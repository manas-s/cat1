var allUsersList = [];
var GetallFinancialMetadataWithCT = [];
var projMgrs = '';
var vContractID = "";
var icontractItem = "";
var GetallMetadataWithCT = [];
var MethodCount = 0;
var articleSystemMileStone = '';
var articleDocumentMileStone = '';
var articleMileStone = '';
var articleObligationMileStone = '';
var defaultGlobalSettings = "";
var contractItem;
var DatepickerFormat = '';
var obligationProducts = "";
var documentview = "";
var SettingUserRole = "";
var arrUser = [];
var arrGlobalUser = [];
var oGeneralSettings = "";
var amendmentcompletedchecking = false;
var vCurrencyDisplayStyle = "";
var StageName = [];
var IsApprovalSheetFeatureExits = false;
var TermTypeDisplayName = {};
var FullContractroleUser = [];
var ReadWriteContractroleUser = [];
var ReadContractroleUser = [];
var ContractRoles = [];
var EndDateCheck = "";
var upForRenewal = "";
var TermTypeHelpText = {};
var arrRelatedcontractRowkey = [];
var RelationshipTypes = [];
var arrRelatedContractsSelected = [];
var thisContractAreaSettings;
var RightSignatureFlag = false;
var AllowSaveDraftInCloud = "";
var SaveDraftInCloud = "";
var Collectcontractdocument = false;
var vContractRenewalHistory = [];
var vRenewalConfirmParticipantsXML = "";
var ConfirmParticipationCollection = [];
var isExecutedBindDocumentTypeandTemplate = false;
var changedocumentstatusbyid = "";
var cleartimevalue;
var thisDocumentLibrarySettings;
var DocVersion = "";
var pendingStarted = false;
var vRawURLDoc = "";
var listAllObligationCatalogs = "";
var NextTermRenewFlag = false;
var isRenewTermClick = false;
var isRenewedManual = "No";
var RenewalName = "";
var Updatedocumenttap = false;
var lstSelectedLabels = "";
var tmpSelectedLabels = "";
var arrLabelCollection = [];
var LabelsCategories = [];
var arrLabelCollection = [];
var ContractLabels = [];

$(document).ready(function () {
    vContractID = getParameterByName("ContractID");
    try {
        BindContractDetails(vContractID);
    } catch (e) {
        $("#loadingPage").fadeOut();
    }
    //BindDataContractDropdownSettings();
    icontractdetails();
    BindMilestone(vContractID);
    GetInnerFeatures();
    //BindPeople();

    var arrId = ["divRelatedProjects", "divPeople", "contextPeople", "divRelatedContracts", "contextRelatedContracts", "dvSentAertsList", "dvUpcomingAertsList"];
    var arrImageId = ["imgRelatedProjects", "imgPeople", "imgRelatedContracts", "imgAlerts"];
    $.each(arrId, function () {
        $("#" + this).slideToggle();
    });

    $.each(arrImageId, function () {
        $("#" + this).attr("title", "Collapse");
        $("#" + this).attr("src", "../Content/Images/e-open.png");
    });

    //BindContractRelationships();

    $("#showMSWordPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        modal: true
    });

    $("#viewMetadataDetailDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Detail",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");
            }
        }
    });

    $("#addEditDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        title: "Document",
        dialogClass: "popup_width100",
        height: 600,
        modal: true,
        buttons: [{
            text: "Save",
            "id": "btnDocAdd",
            click: function () { $("#liSelectedRelatedContract").empty(); modalOnOpenDocument(); }
        },
           {
               text: "Cancel",
               "id": "btnDocCancel",
               click: function () {
                   //manoj
                   if (Updatedocumenttap && (documentview == null || documentview == "" || documentview == 'folder')) {
                       Updatedocumenttap = false;
                       if ($("#showAll").text().indexOf("/") >= 0) {
                           showfolderdocuments($("#showAll").find("a:last")[0])
                       } else {
                           BindDocument(vContractID);
                       }
                   }
                   //manoj
                   $("#hdnIsDocumentTag").text('');
                   $("#liSelectedRelatedContract").empty();
                   $(this).dialog("close");
               }
           }
        ],
        close: function (event, ui) {
            //manoj
            if (Updatedocumenttap && (documentview == null || documentview == "" || documentview == 'folder')) {
                Updatedocumenttap = false;
                if ($("#showAll").text().indexOf("/") >= 0) {
                    showfolderdocuments($("#showAll").find("a:last")[0])
                } else {
                    BindDocument(vContractID);
                }
            }
            //manoj
            $("#hdnIsDocumentTag").text('');
        },
        open: function (event, ui) {//Performance Optimization
            if (!isExecutedBindDocumentTypeandTemplate)
                BindDocumentTypeandTemplate();
        }
    });

    $("#dvContractNotAvail").dialog({
        autoOpen: false,
        closeText: "",
        width: "100%",
        height: "1000",
        dialogClass: "popup_width100",
        modal: true,
        resizable: false,
        closeOnEscape: false,
        close: function (event, ui) {
            $("#dvContractNotAvail").dialog("open");
        }
    });

    $("#addEditCorrespondence").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        height: "400",
        title: "Amendment",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { modalOnOpenCorrespondence(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#dvCorrespondenceDetails").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Correspondence Details",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () { $(this).dialog("close"); }
        }
    });

    $("#dvManageContractStatus").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Manage Contract Record Status",
        buttons: {
            "OK": function () {

                ChangeContractStatus();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        modal: true
    });

    $("#RenewalTermNew").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Initial Term",
        dialogClass: "popup_width100",
        modal: true,
        buttons: [
        {
            text: "Ok",
            "id": "btnAddNewTerm",
            click: function () {
                if (!isRenewTermClick) {
                    if (requiredValidator('RenewalTermNew', false)) {
                        var valcheckauth = $(':input[type=radio][name=TermsSingleMultiple]:checked').val();
                        var val = true;
                        if (valcheckauth == "Yes") {
                            TermName = $("#tdNameofTerms").html().trim();
                            val = SaveAsTableRow(TermName, false);

                            addRenewalComment(TermName, false);

                        }
                        else {
                            TermName = $("#tdNameofTerms").html().trim().split(', ');
                            $.each(TermName, function (i, item) {
                                val = SaveAsTableRow(item, false);
                            });

                            addRenewalComment(TermName, true);
                        }
                        SaveRowClearForm();
                        if (typeof (val) == "undefined" || val)
                            $(this).dialog("close");
                    }
                }
                else {
                    var vRenewalChecklist = "";
                    if ($("#chkRenewalModificationsNew").is(':checked')) {
                        if (vRenewalChecklist == '') {
                            vRenewalChecklist = "Renewal without any modifications";
                        }
                        else {
                            vRenewalChecklist += "; Renewal without any modifications";
                        }
                    }
                    if ($("#chkRenewalPriceAdjustmentsNew").is(':checked')) {
                        if (vRenewalChecklist == '') {
                            vRenewalChecklist = "Renewal with Price Adjustments (minor)";
                        }
                        else {
                            vRenewalChecklist += "; Renewal with Price Adjustments (minor)";
                        }
                    }
                    if ($("#chkRenewalRepricingNew").is(':checked')) {
                        if (vRenewalChecklist == '') {
                            vRenewalChecklist = "Renewal with Repricing (major)";
                        }
                        else {
                            vRenewalChecklist += "; Renewal with Repricing (major)";
                        }
                    }
                    if ($("#chkRenewalOtherNew").is(':checked')) {
                        if (vRenewalChecklist == '') {
                            vRenewalChecklist = "Other Amendments";
                        }
                        else {
                            vRenewalChecklist += "; Other Amendments";
                        }
                    }

                    if (vRenewalChecklist == "") {
                        swal("", "Select Renewal Checklist.");
                        return false;
                    }
                    else {
                        TermName = $("#tdNameofTerms").html().trim();
                        var digit = parseInt(TermName.replace("Renewal", "")) + 1;
                        $("#RenewalChecklist" + digit).html(vRenewalChecklist);

                        var RenewalNotfInternal = $("#ddlRenewalNotfInternalNew").val();
                        var vRenewalNotificationInternal = '';
                        $(RenewalNotfInternal).each(function (i, item) {
                            if (vRenewalNotificationInternal == '') {
                                vRenewalNotificationInternal = item;
                            }
                            else {
                                vRenewalNotificationInternal += "; " + item;
                            }
                        });
                        $("#RenewalNotificationInternal" + digit).html(vRenewalNotificationInternal);
                        addRenewalComment(TermName, false);
                        RenewInTermPopup();

                        $(this).dialog("close");
                    }

                }

            }
        },
        {
            text: "Cancel",
            click: function () {
                $(this).dialog("close");
            }
        }
        ],
        close: function () {
            RenewalAddFlag = false;
            RenewalItemEdit = "";
            $("#txtRenewStartDate").val('');
            $("#txtRenewEndDate").val('');
            GetValuesAndAutoPopulate("ddlRenewalNotfInternalNew", "");
            $("#txtRenewalNotesNew").val('');
            $('input[type="checkbox"][name="checkboxNotifyNew"]').prop('checked', false);
            $("#rdRenewTermEndDate").val('');
            $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('checked', true);
            $("#ContractTermRenewNew").val(1);
            $("#ContractTermRenewChoicesNew").val('days');
            $("#txtRenewStartDate").datepicker("option", "minDate", null);
            $("#txtRenewStartDate").datepicker("option", "maxDate", null);
            NextTermRenewFlag = false;
            EndDateCheckRenewal = "";
            $("#termNotesComments").html('Notes');
        }
    });

    $("#dvCancelContract").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Cancel Contract Record",
        dialogClass: "popup_width100",
        buttons: {
            "OK": function () {
                CancelContract();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        modal: true
    });

    $("#RenewalTermNewlb").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Detail",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");

            }
        },
        close: function (event, ui) {


        }
    });

    $("#dialogDelay").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Missing Information",
        dialogClass: "popup_width100",
        modal: true,
        buttons: [{
            text: "Update",
            "id": "btnPendingUpdate",
            "class": "Manage draft",
            click: function () {
                var idSelected = $("#dialogDelay .pop_up__Acti").attr("id");
                idSelected = idSelected.replace('li', '');
                switch (idSelected) {
                    case 'Required':
                        {
                            $(this).dialog("close");
                            contextMenuContractSettings('edit', '', '');
                            break;
                        }
                    case 'Documents':
                        {
                            $(this).dialog("close");
                            $("#btnAddContractDocument").trigger("click");
                            $("#tabTemplate").trigger("click");
                            break;
                        }
                    case 'Peoples':
                        {
                            $(this).dialog("close");
                            MangePeople();
                            break;
                        }
                    case 'Milestones':
                        {
                            $(this).dialog("close");
                            AddMilestoneMoreNew();
                            break;
                        }
                }
            }
        },
            {
                text: "Close",
                "id": "btnPendingClose",
                click: function () {
                    $(this).dialog("close");
                }
            }

        ],
    });

    $("#popupDefaultProperties").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Default Properties",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { updatedefaultproperties(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#addEditPeople").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: "auto",
        resizable: false,
        title: "People",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                if (savePeople()) {
                    $(this).dialog("close");
                    RemoveErrors();
                }
            },
            Cancel: function () {
                $(this).dialog("close");
                RemoveErrors();
                $("#tblPeople .chosenmulti").val('').trigger("chosen:updated");
            }
        },
        close: function () {
            RemoveErrors();
            $("#tblPeople .chosenmulti").val('').trigger("chosen:updated");

        }
    });

    $("#addViewPeople").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: "auto",
        resizable: false,
        title: "People",
        modal: true,
        buttons: {
            "Close": function () {

                $(this).dialog("close");

            },

        }
    });

    $("#dvContractTerm").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Manage Contract Term & Renewals",
        dialogClass: "popup_width100",
        position: {
            at: "top",
            of: window
        },
        modal: true
    });

    $("#shareContract").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        title: "Share Contract Record",
        dialogClass: "Popup_WarningMsg",
        modal: true,
        minHeight: "80%",
        buttons: {
            "Share": function () {
                ShareContract();
            },
            Cancel: function () {
                $(this).dialog("close");
                ClearShareForm();
            }
        },
        close: function (event, ui) {
            $(".addmorelinks").show();
        },
        open: function (event, ui) {
            if (!($('.smalltextcontract').length)) {
                $("div[aria-describedby='shareContract'].Popup_WarningMsg div span:first").append("<br /><span style='background-color:yellow;font-size:small;' class='smalltextcontract'>A secured view of this Contract Record will be temporarily shared with external contact(s) & users in eContracts as a link in their email.</span>");
            }
            $("div[aria-describedby='shareContract'].Popup_WarningMsg div span:first").attr('style', 'padding-bottom: 0px !important');
        }

    });

    $('#dialogSummary').dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: 'Metadata',
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");
            }
        }
    });

    $("#dvWorkflow").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Workflow",
        dialogClass: "popup_width100",
        modal: true,
        height: "auto",
        buttons: {
            "Start": function () {
                StartWorkflow();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#dvAlertDetails1").dialog({
        autoOpen: false,
        closeText: "",
        width: "45%",
        title: "Alert",
        modal: true,

    });

    $("#dtMilestoneDateNew").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        onSelect: function (dateText, inst) {
            GetMilestonedynamicRecurrenceCount();
            MilestoneDateSlectedEvent(this);
        },
    });

    $("#addEditContractValue").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Financials",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {}
    });

    $("#dtMilestoneNewCompletedDate").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $("#addEditMilestoneNew").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        height: "auto",
        resizable: false,
        title: "Milestone",
        dialogClass: "popup_width100",
        modal: true,
        buttons: [{
            text: "Save Milestone",
            "id": "btnPopupMilestoneSave",
            click: function () {
                if (milestonevalidate()) { }
            }
        },
            {
                text: "Cancel",
                click: function () {
                    $(this).dialog("close");
                }
            }
        ]
    });

    $("#dvAddNotes").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Add Notes",
        modal: true,
        buttons: {
            "OK": function () {
                AddNotes();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#addEditAmendment").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        height: "700",
        title: "Amendment",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () {
                modalOnOpenAmendment();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#dvfileDisplay").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Cancel Contract Record",
        dialogClass: "popup_width100",
        modal: true
    });

    $("#browseGeneric").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        modal: true,
        dialogClass: "popup_width100",
        buttons: {
            "OK": function () {
                var s = false;
                var vCoounterparty = "";
                var my_data = $(this).data('param_1');
                var listdetails = '';
                if (multipleChecksDocumentID != null && multipleChecksDocumentID.length > 0) {
                    listdetails = '';
                    for (var lsc = 0; lsc < multipleChecksDocumentID.length; lsc++) {
                        if (listdetails == '') {
                            listdetails = multipleChecksDocumentID[lsc].trim();
                        } else {
                            listdetails += ";" + multipleChecksDocumentID[lsc].trim();
                        }
                    }
                    $('#' + my_data).val(listdetails);
                    listdetails = '';
                    multipleChecksDocumentID = [];
                    $('#liSelectedRU').empty();
                    s = true;
                    $(this).dialog("close");
                } else {
                    swal({
                        title: '',
                        text: "No item has been selected. Do you want to continue?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                listdetails = '';
                                $('#' + my_data).val('');
                                s = false;
                                $("#browseGeneric").dialog("close");
                            } else {
                                $("#browseGeneric").dialog("open");
                            }
                        });
                }
            },
            Cancel: function () {
                multipleChecksDocumentID = [];
                $('#liSelectedRU').empty();
                $(this).dialog("close");
            }
        }
    });

    $("#popupContracts").dialog({
        autoOpen: false,
        closeText: "",
        width: "85%",
        height: "auto",
        title: "Related Contract Record(s)",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                CreateRelatedContracts();
                $("#ddlRelConFilterContractType option:selected").prop('selected', false).trigger('chosen:updated');
                $("#ddlRelConFilterCounterparty option:selected").prop('selected', false).trigger('chosen:updated');
            },
            Cancel: function () {
                $("#liSelectedRelatedContract").empty();
                $("#ddlRelConFilterContractType option:selected").prop('selected', false).trigger('chosen:updated');
                $("#ddlRelConFilterCounterparty option:selected").prop('selected', false).trigger('chosen:updated');
                $(this).dialog("close");
            }
        },
        open: function (event, ui) {
            if ($("#ddlRelConFilterContractType > option").length <= 0)
                BindRelatedContractsFilters();
            if ($("#ddlRelConFilterCounterparty > option").length <= 0) {
                var IsSystem = false;
                if (oGeneralSettings.CounterpartyRelationshipScope.trim() == "System Level") {
                    IsSystem = true;
                }
                GetCounterparty(IsSystem);
            }
        }
    });

    $("#TagAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Tag(s)",
        modal: true,
        buttons: {
            "Save": function () {
                UpdateLabel();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        close: function () {
            $(this).dialog("close");
        }
    });

    $("#sendForSignature").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        minHeight: "80%",
        title: "Send for Signature",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Send": function () {
                SendForSignature();
            },
            Cancel: function () {
                $(this).dialog("close");
                ClearSignatureForm();
            }
        },
        close: function (event, ui) {

        },
        open: function (event, ui) {
            if (RightSignatureFlag) {
                $("#RightSignDropDown").show();
                $("#SignDocExptxt").hide();
            }
            else {
                $("#RightSignDropDown").hide();
                $("#SignDocExptxt").show();
            }
        }
    });

    $("#shareDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        title: "Share Document",
        dialogClass: "Popup_WarningMsg",
        modal: true,
        minHeight: "80%",
        buttons: {
            "Share": function () {
                ShareDocument();
            },
            Cancel: function () {
                $(this).dialog("close");
                ClearShareForm();
            }
        },
        close: function (event, ui) {
            $(".addmorelinks").show();
        },
        open: function (event, ui) {
            if (!($('.smalltext').length)) {
                $("div[aria-describedby='shareDocument'].Popup_WarningMsg div span:first").append("<br /><span style='background-color:yellow;font-size:small;' class='smalltext'>A secured view of this Contract Document will be temporarily shared with external contact(s) & users in eContracts as a link in their email.</span>");
            }
            $("div[aria-describedby='shareDocument'].Popup_WarningMsg div span:first").attr('style', 'padding-bottom: 0px !important');
        }
    });

    $("#EditDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Document",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { modalOnOpenDocument(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        close: function () {
            $('#dtValidFromEdit').val("");
            $('#dtValidTillEdit').val("");
            $('#txtReminder1Edit').val("");
            $('#txtReminder2Edit').val("");
            $('#txtReminder3Edit').val("");
            $("#ddlReminder1Edit").find('option[value="before"]').prop("selected", true);
            $("#ddlReminder2Edit").find('option[value="before"]').prop("selected", true);
            $("#ddlReminder3Edit").find('option[value="before"]').prop("selected", true);
        },
        open: function (event, ui) {//Performance Optimization
            if (!isExecutedBindDocumentTypeandTemplate)
                BindDocumentTypeandTemplate();
        }
    });

    $("#viewMetadataDetail").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Detail",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");
                $("#MetaRenewalViewHistoryLink").css("display", "none");
            }
        },
        close: function (event, ui) {
            $("#MetaRenewalViewHistoryLink").css("display", "none");

        }
    });

    $("#dvManagefoldercreation").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        title: "Create Folder",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Create": function () {
                Managenewfoldermove();
            },
            Cancel: function () {
                Close_ManageFolder();
                $(this).dialog("close");
            },
        }, close: function (event, ui) {
            Close_ManageFolder();
            $(this).dialog("close");
        }
    });

    $("#browseSigneeUser").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        title: "User",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                SelectedSignee();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        close: function (event, ui) {

        }
    });

    $("#dvMilObgMetadata").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Detail",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");
            }
        },
    });

    $("#labelEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Label",
        modal: true,
        buttons: {
            "Save": function () { SaveLabel(); },
            Cancel: function () {
                $(this).dialog("close");
                LabelsCategories = [];
            }
        },
        close: function () {
            ContractLabels = [];
            LabelsCategories = [];
        }
    });

    var ContractDetailsTextarea = new nicEditor({
        buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml']
    }).panelInstance('txtNotes');
    var ContractApprovalTextarea = new nicEditor({
        buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml']
    }).panelInstance('txtComment');
    var ContractApprovalRenewTextarea = new nicEditor({
        buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml']
    }).panelInstance('txtCommentRenew');
    var SendCopyNotes = new nicEditor({
        buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml']
    }).panelInstance('txtSendCopyNotes');
    var TaskComment = new nicEditor({
        buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml']
    }).panelInstance('txtTaskComment');
    $('.nicEdit-panelContain').parent().width('99%');
    $('.nicEdit-panelContain').parent().next().width('99%');
    $('.nicEdit-main').width("99%");
    docInAutomationList = "";
    $('.AlertEnabled .Toggle').click(function () {
        var obj = jQuery(this).parent();
        $(obj).toggleClass('switch_enable').toggleClass('switch_disable');
        if ($(obj).hasClass('switch_enable')) {
            obj.children('input').val('Yes').change();
        } else {
            obj.children('input').val('No').change();
        }
    });

    //document ready for document
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "20" && n.Status == "ON");
    });

    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1");
    });

    if (vAccFeat.length > 0) {
        $(".FL_Correspondence").css('display', '');
        BindCorrespondence(vContractID);
    }

    if (vAccFeat.length > 0) {
        var vConfig = vAccFeat[0].Configuration;
        vProviderDocSign = $(vConfig).find('Provider').text();
        if (vProviderDocSign == "Right Signature")
            RightSignatureFlag = true;
        else
            RightSignatureFlag = false;
    }

    var vAccFeatApprovalSheet = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "30" && n.Status == "ON");
    });
    if (vAccFeatApprovalSheet.length > 0)
        IsApprovalSheetFeatureExits = true;
    else {
        IsApprovalSheetFeatureExits = false;
    }
    var details = "";
    if (vDocLibFeat.length > 0) {

        if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
            $(".borderTop_Right_none").addClass('newdocview');
        }

        details += '<div class="row-group"><div class="col11 no-pad" style="width:96% !important;"><div class="col7"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a><a href="javascript:void(0);" id="documentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="/Content/Images/down_arrow_blk.png" alt="" title=""></a>' +
            '<a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder" style="display:none"><img src="/Content/Images/add-icon.png">Manage Folder</a>' +
            '<a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="/Content/Images/icon/drop.png" style="height:14px !important;"></a></div>' +
            '<div class="col2" style="width: 12%;padding: 0;float:right;"><ul id="ulFolderDocumentView" class="tab"><li style="display:inline-block;"><a href="javascript:void(0);" id="listfolderdocumentview" class="tablinks group-wit-btn active" data-value="folder" onclick="DisplayDocument(\'folder\')"><img src="/Content/Images/folder-view.png" title="Displays Folder(s) and Documents(s) associated with Contract Record"></a></li><li style="display:inline-block; margin-left:-1px;"><a href="javascript:void(0);" id="listdocumentview" data-value="document" class="tablinks group-wit-btn" onclick="DisplayDocument(\'document\')"><img src="/Content/Images/list-view.png" title="Displays Documents(s) associated with Contract Record"></a></li></ul></div><div id="dvdocumentkeyword" style="width: 29%; float:left"><input style="width: 72%;float: left;padding: 5px 27px 5px 5px; border: 1px solid #ccc!important;" id="txtdocumentkeyword" name="keyword" placeholder="Document(s) Search" class="topSearchBox validelement" type="text"><img class="poPSear" style="cursor: pointer;position: relative;left: -62px;top: 1px;padding: 4px 0px 5px 5px;" onclick="javascript:SearchDocumentKeyword();" src="/Content/Images/search1.png"><a href="javascript:void(0)" class="linkPickerClear" style="float: left;display: block;margin-left: 4px!important;margin-top: 7px!important;" onclick="ClearDocumentKeyword();">Clear</a></div></div>' +
            '<div class="col1 text-right no-pad" style="width:3% !important;"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2><div class="row-group"><div class="col12"><div id="holder" style="width:100%;"><div id="iddropfile" class="dropfiles" style="display:none;">Drop files here.</div><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
        $("#dvtabDocumentView").html(details);
        $("#dvtabSummaryDocumentView").html('<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Primary and Pinned Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');">Primary and Pinned Document(s) (<i id="lblPinDocumentsCount"></i>)</a><a href="javascript:void(0);" id="pindocumentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="/Content/Images/down_arrow_blk.png" alt="" title=""></a></div><div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');"><img id="imgPindoc" src="/Content/Images/e-open.png"></a></div></div><div class="row-group pad-top"><div class="col12"><div style="width:100%;"><div class="wmessage clearfix clpendingaction" style="display:none;margin-left:35%;margin-top:-26px;margin-bottom:39px;"><table id="tblDocumentMissing"></table></div><ul class="ul-data" id="ulPinDocumentLoading"></ul><ul class="ul-data" id="ulPinDocument"></ul></div></div><div id="dvPinDocument" class="col12 pad-top"></div></div>');
        $("#hdnnewdocumentfeature").text("Yes");
        $("#litabDocumentView").css("display", "");

        if (documentview == null || documentview == "" || documentview == 'folder') {
            $("#btnaddnewsubfolder").css("display", "");
        }
        $('#txtdocumentkeyword').keypress(function (e) {
            if (e.keyCode == 13) {
                SearchDocumentKeyword();
            }
        });
    } else {
        if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
            $(".borderTop_Right_none").removeClass('newdocview');
        }
        details += '<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv( \'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a>' +
            '<a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder"><img src="/Content/Images/add-icon.png">Manage Folder</a>' +
            '<a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="/Content/Images/icon/drop.png" style="height:14px !important;"></a></div>' +
            '<div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissingNormal"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Missing\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2>' +
            '<div class="row-group"><div class="col12"><div id="holder" style="width:100%;"><div id="iddropfile" class="dropfiles" style="display:none;">Drop files here.</div><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
        $("#dvtabSummaryDocumentView").html(details);
        $("#hdnnewdocumentfeature").text("No");
        $("#litabDocumentView").css("display", "none");
    }
    details = "";

    //document ready for milestone
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "2" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        if ($("#ddlHistoryFilter option[value='Obligation']").length <= 0)
            $('ddlHistoryFilter').append('<option val="Obligation">Obligation</option>');
    } else {
        if ($("#ddlHistoryFilter option[value='Obligation']").length > 0)
            $("#ddlHistoryFilter option[value='Obligation']").remove();
    }
    $('#txtObligationProductAmountNew').autoNumeric('init');
    $('#txtObligationProductAmountNewActual').autoNumeric('init');
    $('#txtObligationProductAmountNewEdit').autoNumeric('init');
    $('#txtObligationProductAmountNewActualEdit').autoNumeric('init');
    $("#dtMilestoneDateInline").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $('#dtMilestoneDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        fixFocusIE: false,
        onSelect: function (dateText, inst) {
            this.fixFocusIE = true;
        },
    }).click(function () {
        $(this).focus();
    });

    $("#dtMilestoneCompletedDate").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $('#dtObligationNewDueDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        onSelect: function (dateText, inst) {
            GetObligationdynamicRecurrenceCount();
            ObligationDueDateSlectedEvent(this);
        },
    });

    $('#txtProductUnitPrice').autoNumeric('init');
    $('#dtObligationNewCompletedDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $('#dtObligationProductCompletedDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $('#dtObligationProductCompletedDateEdit').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $("#addEditObligation").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Obligation",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () {
                if (modalOnOpenObligation()) { }
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#addEditObligationNew").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        height: "auto",
        title: "Amendment",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () {
                if (modalOnOpenObligationNew()) { }
            },
            Cancel: function () {
                if ($("#obligationnewheading").text() != "Edit Obligation") {
                    if ($('#txtObligationProductsCount').val() == "Yes") {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Catalog",
                            type: 'DELETE',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                username: localStorage.UserName,
                                contractId: getParameterByName("ContractID")
                            },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                $("#addEditObligationNew").dialog("close");
                            }
                        });
                    }
                    if ($('#txtObligationFinancialsCount').val() == "Yes") {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Financials",
                            type: 'DELETE',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                username: localStorage.UserName,
                                contractId: getParameterByName("ContractID")
                            },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                $("#addEditObligationNew").dialog("close");
                            }
                        });
                    }
                    if ($('#txtObligationFinancialsCount').val() != "Yes" && $('#txtObligationProductsCount').val() != "Yes") {
                        $("#addEditObligationNew").dialog("close");
                    }
                } else {
                    $("#addEditObligationNew").dialog("close");
                }
            }
        },
        close: function () {
            if ($("#obligationnewheading").text() != "Edit Obligation") {
                if ($('#txtObligationProductsCount').val() == "Yes") {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Catalog",
                        type: 'DELETE',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            username: localStorage.UserName,
                            contractId: getParameterByName("ContractID")
                        },
                        "Content-Type": "application/json",
                        cache: false,
                        success: function (data) {
                            $("#addEditObligationNew").dialog("close");
                        }
                    });
                }
                if ($('#txtObligationFinancialsCount').val() == "Yes") {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Financials",
                        type: 'DELETE',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            username: localStorage.UserName,
                            contractId: getParameterByName("ContractID")
                        },
                        "Content-Type": "application/json",
                        cache: false,
                        success: function (data) {
                            $("#addEditObligationNew").dialog("close");
                        }
                    });
                }
                if ($('#txtObligationFinancialsCount').val() != "Yes" && $('#txtObligationProductsCount').val() != "Yes") {
                    $("#addEditObligationNew").dialog("close");
                }
            } else {
                $("#addEditObligationNew").dialog("close");
            }
            BindMilestone();
        }
    });

    $("#obligationcatalogsRecurrenceEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditObligationNew").dialog("close");
            }
        }
    });

    $("#obligationRecurrenceEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditObligationNew").dialog("close");
            }
        }
    });

    $("#obligationRecurrenceStatusEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 150,
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#obligationcatalogsAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: 500,
        modal: true,
        buttons: {
            "Add": function () {
                SaveObligationcatalog();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#obligationfinancialsAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Add": function () {
                SaveObligationfinancials();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#obligationcatalogseditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: 500,
        modal: true,
        buttons: {
            "Update": function () {
                UpdateObligationcatalog();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#obligationfinancialseditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Edit Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Update": function () {
                UpdateObligationfinancials();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#obligationcatalogsViewPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "View Catalog",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#obligationFinancialsViewPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "View Financials",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#catalogsAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "ADD": function () {
                Savecatalog();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#transactionAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Transaction",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () {
                Savecatalog();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#AddNewProductsPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Add Product",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () {
                CreateProduct();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#viewProductsPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Manage Products",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                var s = AddObligationProduct();
                $(this).dialog("close");
                $("#txtSearchBoxProduct").val("");
            },
            Cancel: function () {
                $('#txtSearchBoxProduct').val('');
                $(this).dialog("close");
            }
        }
    });

    $("#viewProductsMulPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Manage Products",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "ADD": function () {
                SaveMulObligationCatalogsProducts();
                $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
                $("#txtSearchBoxProductMul").val("");
                $(this).dialog("close");
            },
            "Clear": function () {
                $('#txtSearchBoxProductMul').val('');
                $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
            },
            Cancel: function () {
                $('#txtSearchBoxProductMul').val('');
                $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
                $(this).dialog("close");
            }
        }
    });

    $("#catalogsViewPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "View Catalog",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#commitmentViewPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "View Commitments",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#catalogseditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Edit Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Update": function () {
                Updatecatalog();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#addEditMilestoneNew").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        height: "auto",
        resizable: false,
        title: "Milestone",
        dialogClass: "popup_width100",
        modal: true,
        buttons: [{
            text: "Save Milestone",
            "id": "btnPopupMilestoneSave",
            click: function () {
                if (milestonevalidate()) { }
            }
        },
            {
                text: "Cancel",
                click: function () {
                    $(this).dialog("close");
                }
            }
        ]
    });

    $("#milestonesRecurrenceEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditMilestoneNew").dialog("close");
            }
        }
    });

    $("#milestonesRecurrenceNewEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditMilestoneNew").dialog("close");
            }
        }
    });
    allowNumericsNewMonthly();
});

function BindContractDetails(contractid, ObjBind) {
    articleDocumentMileStone = '';
    contrcttypeselection = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            UserID: localStorage.UserID
        },
        processData: false,
        success: function (item) {
            var allowtoshow = false;
            if (item.IsDraft != "Yes") {
                allowtoshow = true;
            } else if (localStorage.UserName == item.CreatedBy) {
                allowtoshow = true;
            }
            if (!allowtoshow) {
                $("#dvContractNotAvail").dialog("open");
                $("#loadingPage").fadeOut();
            } else {
                //manoj
                vContractTile = item.ContractTitle;
                contractItem = item;
                //BindDataContractDropdownSettings();
                //bindAuthoriseUsers(contractItem);
                //GetRenewalChecklistAndNotes(vContractID, "PageLoad");
                BindObligationsNew(contractItem.RowKey, contractItem);
                if (contractItem != null) {
                    //BindContractTermDetail(contractItem);
                    ////ENH 440 Display Alerts for Missing information
                    //var vContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    //var vMisInfoFeat = $.grep(vContractFeatures, function (n, i) {
                    //    return (n.RowKey == "28" && n.Status == "ON");
                    //});
                    if (oGeneralSettings != "") {
                        if (oGeneralSettings.DisplayMissingInformation == "Yes") {
                            $("#tblDocumentMissing").css("display", "");
                            $("#tblDocuments").css("display", "");
                            $("#tblTermsMissing").css("display", "");
                            $("#tblMilestoneMissing").css("display", "");
                            $("#tblMilestones").css("display", "");
                            $("#tblMetadataMissing").css("display", "");
                            $("#tblRequired").css("display", "");
                            $("#tblPeopleMissing").css("display", "");
                            $("#tblPeoples").css("display", "");
                            $("#tblActivity").css("display", "");
                            $("#tblDescriptionMissing").css("display", "");
                        } else {
                            $("#tblDocumentMissing").css("display", "none");
                            $("#tblDocuments").css("display", "none");
                            $("#tblTermsMissing").css("display", "none");
                            $("#tblMilestoneMissing").css("display", "none");
                            $("#tblMilestones").css("display", "none");
                            $("#tblMetadataMissing").css("display", "none");
                            $("#tblRequired").css("display", "none");
                            $("#tblPeopleMissing").css("display", "none");
                            $("#tblPeoples").css("display", "none");
                            $("#tblActivity").css("display", "none");
                            $("#tblDescriptionMissing").css("display", "none");
                            $(".clpendingaction").css("display", "none");
                        }
                    }
                    ////ENH 440 Display Alerts for Missing information
                    //Sridhar - Load Documents after contracts are loaded
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "20" && n.Status == "ON");
                    });

                    if (typeof (ObjBind) != "undefined" && ObjBind != null && ObjBind != "") {
                        refreshdocuemnt();
                    } else {
                        BindDocument(vContractID);
                    }

                    //manoj
                    if (vDocLibFeat.length > 0) {
                        CreateDocumentListPinView(vContractID);
                    }
                    if (contractItem.IsActive == "" || contractItem.IsActive == "Yes") {
                        $("#general-notification").html("");
                        $("#general-notification").css("visibility", "hidden");
                        $("#btnaddnewsubfolder").css('pointer-events', 'auto');
                        $("#btnAddContractDocument").css('pointer-events', 'auto');
                        $("#holder").css('pointer-events', 'auto');
                        $(".restricamnd").css('pointer-events', 'auto');
                        var innervalue = document.getElementById("topAction1").textContent;
                        if (innervalue == "Add Amendment" || innervalue == "Add Document") {
                            $("#topAction1").css('pointer-events', 'auto');
                        }
                    } else {
                        var Displaymsg = "Contract is created succesfully.";
                        if (typeof (contractItem.RelatedRequestID) != "undefined" && contractItem.RelatedRequestID != null && contractItem.RelatedRequestID != "") {
                            Displaymsg += " Request|Folder(s)|Document(s) creation is in progress";
                        } else {
                            Displaymsg += " Folder(s)|Document(s) creation is in progress";
                        }
                        $("#general-notification").html(Displaymsg);
                        $("#general-notification").css("visibility", "visible");
                        $("#btnaddnewsubfolder").css('pointer-events', 'none');
                        $("#btnAddContractDocument").css('pointer-events', 'none');
                        $("#holder").css('pointer-events', 'none');
                        $(".restricamnd").css('pointer-events', 'none');
                        var innervalue = document.getElementById("topAction1").textContent;
                        if (innervalue == "Add Amendment" || innervalue == "Add Document") {
                            $("#topAction1").css('pointer-events', 'none');
                        }
                        clearTimeout(cleartimevalue);
                        cleartimevalue = setTimeout('checkcontractisactive()', 20000);
                    }
                }
                var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                if ($.inArray(item.Status, vContractStatus) > -1) {
                    $(".AlertEnabled").removeClass("disabled_slider");
                    IsPipeline = false;
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    vAccFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "2" && n.Status == "ON");
                    });
                    if (vAccFeat.length > 0) {
                        $(".FL_Obligations").css('display', '');

                    } else {
                        $(".FL_Obligations").css('display', 'none');
                    }
                    $("#MilestoneEnable").show();
                } else {
                    IsPipeline = true;
                    //BindGeneralSettings();
                    $(".AlertEnabled").removeClass("disabled_slider");
                }

                var IsFullControlUser = false;
                if (item.FullControlPermissions != "") {
                    var FullControlUsers = item.FullControlPermissions;

                    var FullControlUsersarr = $.map(FullControlUsers.trim().split(';'), function (value) {
                        return value.trim();
                    });
                    if (FullControlUsersarr.indexOf(localStorage.UserName.trim()) > -1)
                        IsFullControlUser = true;
                    else {
                        if (localStorage.UserType.indexOf("Global Contract Owner") >= 0) {
                            IsFullControlUser = true;
                        } else {
                            IsFullControlUser = false;
                        }
                    }

                } else {
                    if (localStorage.UserType.indexOf("Global Contract Owner") >= 0) {
                        IsFullControlUser = true;
                    } else {
                        IsFullControlUser = false;
                    }
                }

                if (item.IsFinalized == 'Yes' && !IsFullControlUser) {
                    $("#txtContractTitle").attr('disabled', 'disabled');
                    $("#ddlDPContractTypes").attr('disabled', 'disabled');
                    $("#ddlDPTransactionType").attr('disabled', 'disabled');
                    $("#ddlDPContractClass").attr('disabled', 'disabled');
                } else {
                    $("#txtContractTitle").removeAttr('disabled');
                    $("#ddlDPContractTypes").removeAttr("disabled");
                    $("#ddlDPTransactionType").removeAttr("disabled");
                    $("#ddlDPContractClass").removeAttr("disabled");
                }

                if (item.InRecycleBin == "Yes") {
                    $("#hdnPermission").val('View');
                    $("#liContractstatus").hide();
                    $("#dvRecyclebinMessage").css('display', '');
                    $("#topActionMore").removeClass('openmenuContractSettings');
                    $("#topActionMore").addClass('openmenuContractSettingsRecycleBin');
                } else {
                    $("#topActionMore").removeClass('openmenuContractSettingsRecycleBin');
                    $("#topActionMore").addClass('openmenuContractSettings');
                    $("#hdnPermission").val(item.Permission);
                }
                $(".openmenuContractSettings").contextMenu({
                    menu: 'dropdownMenuContractSettings',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuContractSettings(action, el.parent("tr"), pos);
                });
                $(".openmenuContractSettingsRecycleBin").contextMenu({
                    menu: 'dropdownMenuContractSettingsRecycleBin',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuContractSettingsRecycleBin(action, el.parent("tr"), pos);
                });

                if ((item.ContractManagers + ";" + item.CreatedBy + ";" + item.Approvers + ";" + item.Reviewers + ";" + item.Signees + ";" + item.RenewalConfirmParticipants).indexOf(localStorage.UserName) < 0) {
                    //SetBADashboard(item.BusinessAreaPath, item.BusinessArea);
                }
                //BindDocument(contractid);
                //BindContractRoles(contractItem);
                thisContractAreaNameC = item.ContractArea;
                thisBusinessAreaNameC = item.BusinessArea;
                thisBusinessAreaPath = item.BusinessAreaPath;
                GetUserList();
                //BindBusinessAreaPicker11();
                //*Harshitha contract System milestone
                //BindSystemMilestones(contractItem);
                $("#spancloseout").html(item.CloseOut);
                $("#hdnContractID").text(item.RowKey);
                $("#hdnContractValue").text(item.ContractValue);
                $("#hdnContractCurrency").text(item.ContractCurrency);
                $("#hdnContractPricingType").text(item.ContractPricingType);
                $("#hdnTransactionType").text(item.TransactionType);
                $("#hdnPaymentType").text(item.PaymentType);
                $("#hdnBillingFrequency").text(item.BillingFrequency);
                $("#hdnOldEndDate").text(item.EndDate);
                $("#hdnTermEndDate").text(item.TermEndDate);
                $("#hdnBaseContractValue").text(item.BaseContractValue);
                $("#hdnBaseContractCurrency").text(item.BaseContractValueCurrency);
                $("#hdnFinalizedDocumentsUrl").text(item.FinalizedDocumentsUrl);
                $("#hdnDraftDocumentsUrl").text(item.DraftDocumentsUrl);
                $("#hdnContractDocumentsUrl").text(item.ContractDocumentsUrl);
                $("#hdnContractDocumentsUrlFixed").text(item.ContractDocumentsUrl);
                $("#lblContractArea").text(item.ContractArea);
                $("#lblBusinessArea").text(item.BusinessArea);
                $("#lblBusinessAreaPath").text(item.BusinessAreaPath);
                $("#lblContractAreaAdmins").text(item.ContractAreaAdministrators);
                $("#lblApprovalWorkflow").text(item.ApprovalWorkflow);
                $("#lblBusinessAreaOwners").text(item.BusinessAreaOwners);
                $("#lblCounterparty").text(item.Counterparty);
                //Added For Obligation New
                $("#lblCompanyProfile").text(item.CompanyProfile);
                //Added End
                $("#lblContractType").text(item.ContractType);
                //GetContractTypeDetails(item.ContractType);
                getcontracttypemetadata(item.ContractType);
                //BindRelatedContractsFilters();
                if (item.StartDate != null) {
                    $("#hdnStartDate").text(item.StartDate);
                }
                $("#lblContractTitle").text(item.ContractTitle);
                $("#lblContractTitleHeading").html(item.ContractTitle.replace("  ", "&nbsp;&nbsp;"));
                $("#lblRelatedPopup_ContractTitle").text("Select Relationship for " + item.ContractTitle);
                $(".clsContractTitle").prop('title', "Select Relationship for" + " : " + item.ContractTitle);
                if (item.Description == "") {
                    $("#lblContractDescription").text("");
                    $("#lblContractDescription").addClass('cntdetails-NA');
                } else {
                    $("#lblContractDescription").text(item.Description);
                    $("#lblContractDescription").removeClass('cntdetails-NA');
                }
                $("#summCNumber").text(item.ContractNumber);
                $("#summCBusArea").text(item.BusinessAreaPath);
                var formatcreatedDate = '';
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    formatcreatedDate = moment(new Date(item.Created)).format('MM/DD/YYYY');
                } else {
                    formatcreatedDate = moment(new Date(item.Created)).format(localStorage.AppDateFormat);
                }
                $("#summCreated").text(formatcreatedDate);
                if (vActiveUsers.indexOf(item.CreatedBy.trim()) < 0 && vActiveUsers.length > 0)
                    $("#summCreatedBy").html('<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(item.CreatedBy.trim()) + '\')" class="Link_UserProfile disabled_item_link" title="This user is no longer available.">' + item.CreatedBy.trim() + '</a>');
                else {
                    if (item.CreatedBy.trim() == "Imported")
                        $("#summCreatedBy").html('<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(item.CreatedBy.trim()) + '\')" class="Link_UserProfile disabled_item_link" title="This user is no longer available.">' + item.CreatedBy.trim() + '</a>');
                    else
                        $("#summCreatedBy").html('<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(item.CreatedBy.trim()) + '\')" class="Link_UserProfile">' + item.CreatedBy.trim() + '</a>');
                }

                $("#summContractType").text(item.ContractType);

                if (item.CompanyProfile == null || item.CompanyProfile == "" || item.CompanyProfile == "--Select--") {
                    $("#summCompyLegalEntity").text("Not Available");
                } else {
                    $("#summCompyLegalEntity").text(item.CompanyProfile);
                }

                var usersarr = [];
                if (item.Counterparty == null || item.Counterparty == "") {
                    $("#summCounterparty").text("Not Available");
                } else {
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "6" && n.Status == "ON");
                    });
                    var vreadonly = "";
                    var vbrowse = "";
                    if (vAccFeat.length > 0) {
                        usersarr = item.Counterparty.split(";");
                        var reslength = usersarr.length;
                        var vUsers = '';
                        for (var i = 0; i < reslength; i++) {
                            if (vUsers == '') {
                                vUsers = '<a href="javascript:void(0);" onclick="RedirectToCounterparty(\'' + escape(usersarr[i].trim()) + '\')">' + usersarr[i].trim() + '</a>';
                            } else {
                                vUsers += '; <a href="javascript:void(0);" onclick="RedirectToCounterparty(\'' + escape(usersarr[i].trim()) + '\')">' + usersarr[i].trim() + '</a>';
                            }
                        }
                        $("#summCounterparty").html(vUsers);
                    } else {
                        $("#summCounterparty").text(item.Counterparty);
                    }
                }

                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "11" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    try {
                        if (item.ProjectManager == null || item.ProjectManager == "") {
                            $("#spProjectManager").html("Not Available");
                            $("#spProjectManagerView").html("Not Available");
                            $("#liProjectManager").html("Not Available");
                        } else {
                            var vUsers = '';
                            var userDisable = '';
                            var usertitle = '';
                            projMgrs = item.ProjectManager;
                            if (projMgrs.indexOf(';') >= 0) {
                                $.each(item.ProjectManager.split(";"), function (a, itemname) {
                                    userDisable = '';
                                    usertitle = '';
                                    if (vActiveUsers.indexOf(itemname.trim()) < 0 && vActiveUsers.length > 0) {
                                        userDisable = ' disabled_item_link';
                                        usertitle = 'title="This user is no longer available."';
                                    }
                                    if (vUsers == '') {
                                        vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(itemname) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + itemname + '</a>';
                                    } else {
                                        vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(itemname) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + itemname + '</a>';
                                    }
                                });
                            } else {
                                if (vActiveUsers.indexOf(item.ProjectManager.trim()) < 0 && vActiveUsers.length > 0) {
                                    userDisable = ' disabled_item_link';
                                    usertitle = 'title="This User no longer available"';
                                }
                                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(item.ProjectManager) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + item.ProjectManager + '</a>';
                            }

                            $("#spProjectManager").html(vUsers);
                            $("#spProjectManagerView").html(vUsers);
                            $("#liProjectManager").html(vUsers);
                        }

                        //Related Projects
                        if (item.ProjectTask == null || item.ProjectTask == "") {
                            $("#tblRelatedProjects").html('No items found.');

                        } else {
                            BindProjects(item.ProjectTask);
                        }
                    } catch (e) {
                        $("#loadingPage").fadeOut();
                    }
                }
                BindContractPeopleMetadata(item);
                BindContractRolesMetadata();

                if (item.RelatedRequestID == null) {
                    $("#FL_Requestor").css('display', 'none');
                    $("#trRelatedRequest").css('display', 'none');
                } else if (item.RelatedRequestID == "") {
                    $("#FL_Requestor").css('display', 'none');
                    $("#trRelatedRequest").css('display', 'none');
                    $("#spRequestor").html("Not Available");
                    $("#spRequestorr").html("Not Available");
                } else {
                    $("#FL_Requestor").css('display', '');
                    $("#trRelatedRequest").css('display', '');
                    BindRequestDetails(item.RelatedRequestID);
                }
                lstSelectedLabels = item.Labels;
                tmpSelectedLabels = item.Labels;
                BindContractLabels();
                $("#txtBusinessArea").val(item.BusinessArea);
                getcontractareasettings(item.ContractArea);
                connamechecking = item.ContractArea;

                if (item.Renewable == "Yes") {
                    settingRenewable = true;
                } else {
                    settingRenewable = false;
                }

                if (item.Extendable != null && item.Extendable == "Yes") {
                    $("#hdnIsExtendable").text("Yes");
                    $("#hdnIsExtendableContract").text("Yes");
                    $("#chkDPExtendable").prop('checked', true);
                    $("#chkDPExtensionApproval").removeAttr("disabled");
                } else {
                    $("#hdnIsExtendable").text("No");
                }
                if (item.NeedApprovalForRenewal != null && item.NeedApprovalForRenewal == "Yes") {
                    $("#hdnRenewApprovalRequired").text("Yes");
                } else {
                    $("#hdnRenewApprovalRequired").text("No");
                }


                if (item.IsStandard == "Yes") {
                    // $("#iStandardCont").css('display', '');
                    //$("#iNonStandardCont").css('display', 'none');

                    $("#liContractStandard").css('display', 'none');
                    $("#liContractNonStandard").css('display', '');
                } else {
                    // $("#iStandardCont").css('display', 'none');
                    //$("#iNonStandardCont").css('display', '');
                    $("#liContractStandard").css('display', '');
                    $("#liContractNonStandard").css('display', 'none');
                }

                //ApplyPermissionToMenu($("#hdnPermission").val());
                if (contractItem.IsDraft == "Yes") {
                    $(".draft").css('display', 'none');
                }
                //Default properties form values
                strSelectedContractType = item.ContractType;
                $("#ddlDPTransactionType").find('option[value="' + item.TransactionType + '"]').prop("selected", true);
                $("#ddlDPContractClass").find('option[value="' + item.ContractClass + '"]').prop("selected", true);
                if (item.NeedApprovalForRenewal != null && item.NeedApprovalForRenewal == "Yes") {
                    $("#chkDPRenewalApproval").prop('checked', true);
                }
                if (item.NeedApprovalForExtension != null && item.NeedApprovalForExtension == "Yes") {
                    $("#chkDPExtensionApproval").prop('checked', true);
                }
                if (item.IsFinalized == "Yes") {
                    $("#artAmendment").css('display', '');
                    $("#chkDPAmendmentApproval").removeAttr("disabled");
                    //BindAmendments(contractid);
                } else {
                    $("#artAmendment").css('display', 'none');
                }
                if (item.TransactionType == "Legal/General Agreement") {
                    $("#artFinancials").css('display', 'none');
                } else {
                    $("#artFinancials").css('display', '');
                }

                //if (item.ContractValue != "0") {
                //    $("#lblContractValue").text("Not available");
                //    $("#txtContractValueCurrent").val("Not Available");
                //    $("#lblContractCurrency").text("");
                //    $.ajax({
                //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
                //        type: 'GET',
                //        dataType: 'json',
                //        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //        cache: false,
                //        success: function (data) {
                //            vContractValueSetting = data.IsContractValueInBaseCurrency;
                //            if (vContractValueSetting == "Display Contract Values in Base Currency") {
                //                ContractCurrencyType = 'base';
                //            } else {
                //                ContractCurrencyType = 'actual';
                //            }
                //            if (data.CurrencyDisplayStyle == "UK") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init');
                //                vCurrencyDisplayStyle = "UK";
                //            } else if (data.CurrencyDisplayStyle == "CAN") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: ' ', aDec: '.' });
                //                vCurrencyDisplayStyle = "CAN";
                //            } else if (data.CurrencyDisplayStyle == "EU") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: '.', aDec: ',' });
                //                vCurrencyDisplayStyle = "EU";
                //            }
                //        }
                //    });

                //} else {
                GetContractValueSetting(item);
                // }


                if (item.EndDate != null) {
                    var FEndDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        FEndDate = moment(new Date(item.EndDate)).utc().format('MM/DD/YYYY');
                    } else {
                        FEndDate = moment(new Date(item.EndDate)).utc().format(localStorage.AppDateFormat);
                    }
                    $("#txtContractEndDateCurrent").val(FEndDate);
                } else {
                    $("#txtContractEndDateCurrent").val("Not Available");
                }

                if (item.ApprovalWorkflow != "In Progress") {
                    if (item.Permission != "View" && item.Permission != "") {
                        $("#addActivityApproval").css('display', '');
                    }
                }
                ContractTopActions();
                ApplyPermissionToMenu($("#hdnPermission").val());
                //BindStatus();
                if (item.InRecycleBin == "Yes") {
                    $("#hdnPermission").val('View');
                    $("#liContractstatus").hide();
                    $("#dvRecyclebinMessage").css('display', '');
                } else {
                    $("#hdnPermission").val(item.Permission);
                }
                if (item.InRecycleBin == "Yes" && item.Permission == "Manage") {
                    $("#DeleteContract").show();
                    $("#DeleteContractRecycle").show();
                }
                if (localStorage.UserType.indexOf("Global Contract Owner") >= 0) {
                    $(".GlobalManage").css('display', '');
                } else {
                    $(".GlobalManage").css('display', 'none');
                }
                if (item.IsDraft == "Yes") {
                    $("#dvDraftMessage").css('display', '');
                    $("#addActivityApproval").css('display', 'none');
                    $("#RelatedContractEdit").css('display', 'none');
                    $(".draft").css('display', 'none');
                    //   var Stage = "";
                    //  Stage = getParameterByName("Stage");
                    if (Stage == "") {
                        var loca = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text());
                        $('#lnkDraftToUpdate').attr('href', loca);
                    } else {
                        var loca = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage;
                        $('#lnkDraftToUpdate').attr('href', loca);
                    }
                }
                if (item.IsStandard == "Yes") {
                    $("#liContractStandard").css('display', 'none');
                    $("#liContractNonStandard").css('display', '');
                } else {
                    $("#liContractStandard").css('display', '');
                    $("#liContractNonStandard").css('display', 'none');
                }
                if (contractItem.IsDraft == "Yes") {
                    $(".draft").css('display', 'none');
                }

                $("#loadingPage").fadeOut();
            }

        },
        error: function () {
            $("#dvContractNotAvail").dialog("open");
            $("#loadingPage").fadeOut();
        },
        complete: function () {
            //BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
        }

    });
}

function contextMenuContractSettings(action, el, pos) {
    switch (action) {
        case "edit":
            {
                //  var Stage = "";
                //  Stage = getParameterByName("Stage");
                //  if (Stage == 'pipeline') {
                var LocationURLtoPass = '';
                if ($("#spanstatus").text() != "") {
                    var arrstatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                    if (arrstatus.indexOf($("#spanstatus").text().trim()) > -1) {
                        Stage = '';
                    } else {
                        Stage = 'pipeline';
                    }
                }

                if (Stage == "" && pos == "Closeout") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Closeout=Yes";
                } else if (Stage == "") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text());
                } else if (el == "finalize" && pos == "Yes") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true&DocFianlize=" + pos;
                } else if (el == "finalize") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true";
                } else {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage;
                }
                //manoj
                if (getParameterByName("TaskID") != "" && $("#hdnPermission").val() != "Manage") {
                    LocationURLtoPass += "&TaskAllow=No";
                }
                //manoj
                location = LocationURLtoPass;
                break;
            }
        case "standard":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to mark this as standard Contract Record?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var contractID = getParameterByName("ContractID");
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractID + '&isstandard=Yes&username=' + localStorage.UserName,
                                type: 'PUT',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                },
                                cache: false,
                                success: function (data) {
                                    if ($("#topAction2").html() == 'Mark as Standard') {
                                        $("#topAction2").css("display", "none");
                                        // $("#topAction2").html('Mark as Non-Standard');
                                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("nonstandard","","");');
                                    }

                                    //$("#iStandardCont").css('display', '');
                                    //$("#iNonStandardCont").css('display', 'none');
                                    $("#liContractStandard").css('display', 'none');
                                    $("#liContractNonStandard").css('display', '');
                                    $("#loadingPage").fadeOut();
                                },
                                error: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });


                break;
            }
        case "nonstandard":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to mark this as <span style='font-weight:700'>Non-Standard</span> Contract?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var contractID = getParameterByName("ContractID");
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractID + '&isstandard=No&username=' + localStorage.UserName,
                                type: 'PUT',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                },
                                cache: false,
                                success: function (data) {
                                    if ($("#topAction2").html() == 'Mark as Non-Standard') {
                                        $("#topAction2").css("display", "none");
                                        //$("#topAction2").html('Mark as Standard');
                                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("standard","","");');
                                    }

                                    //$("#iStandardCont").css('display', 'none');
                                    //$("#iNonStandardCont").css('display', '');
                                    $("#liContractStandard").css('display', '');
                                    $("#liContractNonStandard").css('display', 'none');
                                    $("#loadingPage").fadeOut();
                                },
                                error: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });

                break;
            }
        case "view":
            {
                $("#Summary").addClass('pop_up_Harizondal_meta_active');
                $("#Details").removeClass('pop_up_Harizondal_meta_active');
                if ($('#tblDetailsMetadata tr').length == 0) {
                    BindMetaData(contractItem, false);
                } else {
                    $('#tblSummary').css("display", "");
                    $('#tblDetailsMetadata').css("display", "none");
                    $('#dialogSummary').dialog('open');
                }
                break;
            }
        case "history":
            {

                if ($('#contractLogs').text() == "No items found.") {
                    $('#contractLogsPopup').dialog('open');
                } else if ($('#contractLogs tr').length == 0) {
                    CreateContractActivityList();

                    if (Stage == "pipeline") {
                        $("#ddlHistoryFilter option[value='Amendment']").hide();
                    }
                } else {
                    $('#contractLogsPopup').dialog('open');
                }
                break;
            }
        case "duplicate":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to create <span style=\"font-weight:700\">duplicate</span> Contract Record?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            //manoj
                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "16" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Duplicate=Yes&Stage=pipeline";
                            } else {
                                location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Duplicate=Yes&Stage=active";
                            }
                            //manoj
                            //if (getParameterByName('Stage') == 'pipeline') {

                            //} else {

                            //    location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Duplicate=Yes&Stage=pipeline";
                            //}
                        }
                        return;
                    });

                break;
            }

        case "approve":
            {

                oApprovalNewDocID = "";
                if ($("#lblApprovalWorkflow").text() == "In Progress") {
                    $("#alertText1").html("Approval workflow is in progress for this contract");
                    $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=' + workflowurltoshowCONTRACT + '><font color="#44A6D8">View Workflow Details</font></a>');
                    $("#dvAlertDetails1").dialog("open");
                } else {
                    $("#loadingPage").fadeIn();
                    $(".validelement").each(function (index, element) {
                        $(element).removeClass("error");
                        $("#errormsg_" + element.id).remove();
                    });
                    $(".error").removeClass("error");
                    var contractTitle = $("#lblContractTitle").text();
                    var contractID = getParameterByName("ContractID");
                    var businessArea = $("#lblBusinessArea").text();
                    var contractArea = $("#lblContractArea").text();
                    $("#tblStage").empty();
                    $("#ddlRule").empty();

                    $('#chkAutoUpdateStatus').attr('checked', false);
                    //manoj
                    $('#chkSendSummaryDoc').attr('checked', false);
                    //manoj
                    if (contractItem.IsFinalized == 'Yes') {
                        $("#liAutoUpdateStatus").css('display', 'none');
                    } else {
                        $("#liAutoUpdateStatus").css('display', '');
                    }
                    $("#txtWorkflowTitle").val('Approval for ' + contractTitle);
                    //manoj
                    $("#txtWorkflowTitle").prop('readonly', false);
                    //manoj
                    $("#lblAutoUpdateStatus").html('Auto update Contract Record status based on this Workflow.');
                    $("#txtDuration").val("");
                    var nicInstance = '';
                    nicInstance = nicEditors.findEditor('txtComment');
                    if (typeof (nicInstance) == "undefined") {
                        var ContractApprovalTextarea = new nicEditor({
                            buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml']
                        }).panelInstance('txtComment');
                        nicInstance = nicEditors.findEditor('txtComment');
                    }
                    nicInstance.setContent('');
                    $("#hdWorkflowType").val("Contract Approval");
                    $("#hdWorkflowContractArea").val(contractArea);
                    $("#hdWorkflowBusinessArea").val(businessArea);
                    $("#hdWorkflowObjectID").val(contractID);
                    $("#hdWorkflowObjectTitle").val(contractTitle);
                    GetValuesAndAutoPopulate("ddlWorkflowCC", "");

                    var vWorkflowSettings = [];
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Contract Approval&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + contractID,
                        type: 'GET',
                        cache: false,
                        contentType: false,
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey
                        },
                        processData: false,
                        success: function (item) {
                            vWorkflowSettings = item.WorkflowSettings;

                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "8" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                vWorkflowRules = item.WorkflowRules;
                            }

                            if (item.WorkflowSettings != null) {
                                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                        $("#spAddStage").css("display", "none");
                                    }
                                }
                                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                if ($("#txtDuration").val() != "") {
                                    $("#txtDuration").trigger("onchange");
                                } else {
                                    $("#lblDurationDate").empty();
                                }
                                //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                workflowAdHoc = item.WorkflowSettings.WorkflowAdHoc;
                            }
                            if (vWorkflowRules.length > 0) {
                                //$("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                $(vWorkflowRules).each(function (i, rule) {
                                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                });
                                if (workflowAdHoc == "on") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                }
                                var workflowRules = vWorkflowRules[0];
                                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                                if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text(workflowRules.RuleName);
                                    $("#ddlRule").attr('disabled', 'disabled');
                                } else {
                                    $("#lblddlRule").text("");
                                    $("#lblddlRule").css("display", "none");
                                    $("#ddlRule").css("display", "");
                                    $("#ddlRule").removeAttr("disabled");
                                }
                                if (workflowRules.RuleName == "Default") {
                                    if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                        $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + contractTitle);
                                    } else {
                                        $("#txtWorkflowTitle").val('Approval for ' + contractTitle);
                                    }
                                } else {
                                    if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                        $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + contractTitle);
                                    } else {
                                        $("#txtWorkflowTitle").val('Approval for ' + contractTitle);
                                    }

                                }
                                var participantsInXML = workflowRules.ParticipantsInXML;
                                var totalFileCount = 0;
                                if (participantsInXML != '') {
                                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                        var StageTitle = $(this).find('StageTitle').text();
                                        var Participants = $(this).find('Participants').text();
                                        var Order = $(this).find('Order').text();
                                        totalFileCount++;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 start_workflow">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                        if (Order == "Serial")
                                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                        else
                                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                        if (totalFileCount > 1)
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                        else
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);

                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                        workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        });
                                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                        var vParticipantsArr = Participants.split(";");
                                        if (vParticipantsArr.length > 1)
                                            $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                        else
                                            $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                        if (item.WorkflowSettings != null) {
                                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                }
                                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                            }
                                        }
                                    });
                                } else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 start_workflow">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1) {
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        }
                                    });
                                }
                            } else {
                                if ($("#ddlRule").html() == "") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text("Ad-hoc");
                                }
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 start_workflow">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);

                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1) {
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        } else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    }
                                });
                            }


                            //ENH492 - Workflow Cycle time Report & default naming of stages.
                            $("#txtStage" + totalFileCount).autocomplete({
                                source: StageName,
                                minLength: 1,
                                focus: function (event, ui) {
                                    return false;
                                },
                                select: function (evn, uidetails) {
                                    $("#txtStage" + totalFileCount).val(uidetails.item.label);

                                }
                            });
                            if (IsApprovalSheetFeatureExits) {
                                setApprovalDocumentUrl();
                                if (oRelatedApprovalSheets != "") {
                                    $("#ddlApprovalsSheets").empty();
                                    contractAccessUsers = contractAccessUsers.filter(function (e) {
                                        return e;
                                    });
                                    var oArrRelatedApprovalSheets = oRelatedApprovalSheets.split(';');
                                    oArrRelatedApprovalSheets = oArrRelatedApprovalSheets.sort();
                                    oArrRelatedApprovalSheets = stringArrayUnique(oArrRelatedApprovalSheets).sort();
                                    $(oArrRelatedApprovalSheets).each(function (i, value) {
                                        $("#ddlApprovalsSheets").append('<option value="' + escape(value) + '">' + value + '</option>');
                                    });
                                    $("input[name='IsApprovalSheetTaskDetails'][value='No']").prop('checked', true);
                                    $("input[name='IsApprovalSheet'][value='No']").prop('checked', true);
                                    $("#lblApprovalSheetTempdocuments").empty();
                                    $("#btnApprovalSheetCreate").css('display', '');
                                    $("#lblApprovalSheetTempdocuments").css('display', 'none');
                                    IsApprovalSheetNoClick();
                                    IsApprovalSheetTempNoClick();
                                    $(".FL_ApprovalSheetContract").css('display', '');
                                    $("#ddlApprovalsSheets").addClass("validelement");
                                } else {
                                    $("input[name='IsApprovalSheetTaskDetails'][value='No']").prop('checked', true);
                                    $("input[name='IsApprovalSheet'][value='No']").prop('checked', true);
                                    $("#lblApprovalSheetTempdocuments").empty();
                                    $("#btnApprovalSheetCreate").css('display', '');
                                    $("#lblApprovalSheetTempdocuments").css('display', 'none');
                                    IsApprovalSheetNoClick();
                                    IsApprovalSheetTempNoClick();
                                    $(".FL_ApprovalSheetContract").css('display', 'none');
                                    $("#ddlApprovalsSheets").removeClass("validelement");
                                }
                            } else {
                                $(".FL_ApprovalSheetContract").css('display', 'none');
                                $("#ddlApprovalsSheets").removeClass("validelement");
                            }


                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Contract Record Approval Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        },
                        error: function () {
                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                            $("#lblddlRule").css("display", "");
                            $("#ddlRule").css("display", "none");
                            $("#lblddlRule").text("Ad-hoc");
                            if (!workflowAdHoc)
                                $("#ddlRule").attr('disabled', 'disabled');
                            var totalFileCount = 1;
                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width46 start_workflow">';
                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';

                            $("#tblStage").append(htmlFormatFile);
                            var $options = $("#ddlApprovers > option").clone();
                            $('#ddlAssignTo' + totalFileCount).append($options);
                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                if ($(this).val().length > 1) {
                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                } else {
                                    $("#ddlOrder" + vasstoid).val("Serial");
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                }
                            });
                            //ENH492 - Workflow Cycle time Report & default naming of stages.
                            $("#txtStage" + totalFileCount).autocomplete({
                                source: StageName,
                                minLength: 1,
                                focus: function (event, ui) {
                                    return false;
                                },
                                select: function (evn, uidetails) {
                                    $("#txtStage" + totalFileCount).val(uidetails.item.label);

                                }
                            });


                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Contract Record Approval Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        }
                    });
                }
                break;
            }
        case "review":
            {
                var contractTitle = $("#lblContractTitle").text();
                var contractID = getParameterByName("ContractID");
                $("#txtTodoTitle").val('Review for ' + contractTitle);
                $("#ddlTodoType option").filter(function (index) {
                    return $(this).text() === "Contract Review";
                }).prop('selected', true);
                $("#txtBrowseElement").val(contractTitle);
                $("#txtBrowseElementID").val(contractID);
                $("#trBrowse").css("display", "");
                $("#browse").css("display", "none");
                $("#tdBrowseElement").html("Contract Title");
                $('#ddlTodoType').attr('disabled', 'disabled');
                GetValuesAndAutoPopulate("ddlApprovers", "");
                $("#txtDueDate").val("");
                var nicInstance = nicEditors.findEditor('txtNotes');
                nicInstance.setContent('');
                $("#chkNotifyMe").prop('checked', false);
                fnChangeAssignedToText();
                $("#dvTodo").dialog("open");
                break;
            }
        case "delete":
            {
                var allowdelete = false;
                var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                if ($.inArray(contractItem.Status, vContractStatus) !== -1) {
                    if ($("#spancloseout").text() == "Yes" || (contractItem.FinalizedBy == null || contractItem.FinalizedBy == "")) {
                        allowdelete = true;
                    } else {
                        if (contractItem.IsDraft == "Yes") {
                            allowdelete = true;
                        } else {
                            allowdelete = false;
                        }
                    }
                } else {
                    allowdelete = true;
                }
                if (allowdelete) {
                    swal({
                        title: '',
                        text: "Are you sure you want to <span style=\"font-weight:700\">delete</span> Contract Record?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                var contractID = getParameterByName("ContractID");
                                $("#loadingPage").fadeIn();
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractID,
                                    type: 'DELETE',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey,
                                        'UserName': localStorage.UserName
                                    },
                                    cache: false,
                                    success: function (data) {
                                        $("#loadingPage").fadeOut();
                                        swal("", data);
                                        if ($.inArray(contractItem.Status, vContractStatus) !== -1 && (contractItem.FinalizedBy != null && contractItem.FinalizedBy != ""))
                                            location = "/Contracts";
                                        else
                                            location = "/Pipeline";
                                    }
                                });
                            }

                        });
                } else {
                    swal({
                        title: '',
                        text: "Only Closeout Contract Record can be deleted. Do you want to edit for Closeout now?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                contextMenuContractSettings("edit", "", "Closeout");
                            }
                            return;
                        });
                }

                break;
            }
        case "sendacopy":
            {
                ClearSendCopyForm();
                $("#tdSendCopy").html("<b class='PreserveSpace'>" + vContractTile + "</b>");
                $('#sendCopyPopUp').dialog('open');
                break;
            }
        case "share":
            {
                ClearShareContractForm();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    cache: false,
                    success: function (settings) {
                        $("#txtShareExpInContract").val(settings.TaskDuration);
                        if ($("#txtShareExpInContract").val() != "") {
                            $("#txtShareExpInContract").trigger("onchange");
                        } else {
                            $("#lblValidLinkDateContract").empty();
                        }
                        //$("#lblValidLinkDateContract").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                    },
                    error: function () {

                    }
                });
                var LinkURL = $(el).find("a").attr('href');
                var contractID = $("#hdnContractID").val();
                var contractTitle = $("#lblContractTitle").text();
                $("#tdShareContract").html("<b>" + contractTitle + "</b>");
                //****Start*****************************************//
                getNameAndEmail();
                GetValuesAndAutoPopulate("ddlContractShareInternal", "");
                //getShareNameandEmailIdInternal(vContractID, "ddlContractShareInternal");
                //****End*****************************************//
                $("#shareContract").dialog("open");
                break;
            }
        case "status":
            {
                BindStatusbyCLM('Yes');

                break;

            }
        case "value":
            {
                ManageContractValue();

                break;
            }
        case "people":
            {

                MangePeople();
                break;
            }
        case "permission":
            {
                $('#newPopup').empty();
                GetValueAndPopulateManagerNew(contractItem, null);
                var statusss = $('#chkpermission').is(':checked');
                arrUser = GetArrayUserList();
                $("#txtAddUser").empty();
                arrUser = arrUser.filter(function (x) {
                    return arrPermsnUser.indexOf(x) < 0;
                });
                var datalenght = arrUser.length;
                for (var i = 0; i < datalenght; i++) {
                    var sUserName = arrUser[i];
                    var article = '<option value="' + sUserName + '">' + sUserName + '</option>';
                    $("#txtAddUser").append(article);
                }
                $("#txtAddUser").chosen();
                $('#txtAddUser').trigger('chosen:updated');

                if (contractItem.CustomPermission == 'Yes') {
                    $("#chkpermission").prop('checked', true);

                    $("#ddlFullControl").prop('disabled', false).trigger("chosen:updated");
                    $("#ddlReadWrite").prop('disabled', false).trigger("chosen:updated");
                    $("#ddlReadOnly").prop('disabled', false).trigger("chddlPermissionosen:updated");

                    $("#divBottom").show();
                    $("#chkPublicContract").attr("disabled", "disabled");
                    $("#chkPublicContract").prop('checked', false);

                } else {

                    $("#ddlFullControl").prop('disabled', true).trigger("chosen:updated");
                    $("#ddlReadWrite").prop('disabled', true).trigger("chosen:updated");
                    $("#ddlReadOnly").prop('disabled', true).trigger("chosen:updated");
                    $("#chkpermission").prop('checked', false);
                    var vLastRow = $("#newPopup li").length;
                    var totalPermissionCount = "1";
                    if (typeof vLastRow == "undefined") {
                        totalPermissionCount = "1";
                    } else {
                        totalPermissionCount = parseInt(vLastRow);
                    }
                    for (i = 1; i <= totalPermissionCount; i++) {
                        $("#PermissionOption" + i).prop('disabled', true);
                        $("#" + i).hide();
                    }
                    $("#divBottom").hide();
                }

                if (contractItem.IsPublic == 'Yes')
                    $("#chkPublicContract").prop('checked', true);
                else
                    $("#chkPublicContract").prop('checked', false);

                $('#addEditPermission').dialog('open');
                break;
            }
        case "alerts":
            {
                ManageAlerts();

                break;
            }
        case "defaultproperties":
            {
                if ($("#ddlDPContractTypes > option").length <= 1) //Performance Optimization
                    BindContractTypes();
                $("#ddlDPContractTypes").removeClass("error");
                $("#ddlDPTransactionType").removeClass("error");
                $("#ddlDPContractClass").removeClass("error");
                $("#ddlDPContractTypes option").filter(function (index) {
                    return $(this).text() === contractItem.ContractType;
                }).prop('selected', true);
                $("#ddlDPTransactionType option").filter(function (index) {
                    return $(this).text() === contractItem.TransactionType;
                }).prop('selected', true);
                $("#ddlDPContractClass option").filter(function (index) {
                    return $(this).text() === contractItem.ContractClass;
                }).prop('selected', true);
                if (contractItem.Renewable == "Yes") {
                    $("#chkDPRenewable").prop('checked', true);
                    $("#chkDPRenewalApproval").removeAttr("disabled");
                }
                if (contractItem.Extendable != null && contractItem.Extendable == "Yes") {
                    $("#chkDPExtendable").prop('checked', true);
                    $("#chkDPExtensionApproval").removeAttr("disabled");
                }
                if (contractItem.NeedApprovalForRenewal != null && contractItem.NeedApprovalForRenewal == "Yes") {
                    $("#chkDPRenewalApproval").prop('checked', true);
                }
                if (contractItem.NeedApprovalForExtension != null && contractItem.NeedApprovalForExtension == "Yes") {
                    $("#chkDPExtensionApproval").prop('checked', true);
                }
                if (contractItem.Amendable != null && contractItem.Amendable == "Yes") {
                    $("#chkDPAmendmentApproval").removeAttr("disabled");
                }
                if (contractItem.NeedApprovalForAmendment != null && contractItem.NeedApprovalForAmendment == "Yes") {
                    $("#chkDPAmendmentApproval").prop('checked', true);
                }

                $("#popupDefaultProperties").dialog("option", "title", "Default Properties");
                $("#popupDefaultProperties").dialog("open");
                break;
            }
            //manoj
        case "missinginfo":
            {
                GetContractPendingAction(true);
                break;
            }
            //manoj
        case "contractrenewal":
            {
                contextMenuTerm("manage");
                break;
            }
        case "archive":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to <span style=\"font-weight:700\">archive</span> this Contract Record?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var vCancelNote = '';
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=Archived',
                                type: 'PUT',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                    username: localStorage.UserName
                                },
                                data: vCancelNote,
                                cache: false,
                                success: function (result) {
                                    contractItem.Status = "archive";
                                    ContractTopActions();
                                }
                            });
                        }
                        return;
                    });

                break;
            }
            //Copy Contract link Enhancment
        case "copylink":
            {
                ClearCopyLinkForm();
                GetUniqueCopyLinkID();

                break;
            }
            //Copy Contract link Enhancment
    }
}

// Metadata Region Begins
function icontractdetails() {
    icontractItem = "";
    MethodCount += 1;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (mainmetadataFields) {
            icontractItem = $(mainmetadataFields).find('Metadata');
            showMetadataWithFeaturedMeta();
        },
        error: function (mainmetadataFields) { }
    });
}

function getcontracttypemetadata(strcontracttype) {
    GetallMetadataWithCT = []; //ENH485  Featured metadata
    GetallFinancialMetadataWithCT = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + encodeURIComponent(strcontracttype),
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (metadataFields) {
            //manoj
            var FeaturedMetadataFilter = $.grep(metadataFields, function (item, i) {
                return item.FeaturedMetadata == "true";
            });
            //manoj
            GetallMetadataWithCT = FeaturedMetadataFilter; //ENH485  Featured metadata

            //manoj
            FeaturedMetadataFilter = $.grep(metadataFields, function (item, i) {
                return item.FinancialField == "true";
            });
            //manoj
            GetallFinancialMetadataWithCT = FeaturedMetadataFilter;
            var numberexists = '';
            $(metadataFields).each(function (i, item) {
                if (item.FieldName == "ContractNumber") {
                    numberexists = $(icontractItem).find(item.FieldName).text();
                }
            });
            $("#trContractMetadataNumber").css('display', '');
            if (numberexists != '') {
                $("#trContractMetadataNumber").prop("title", numberexists);
            } else {
                $('#summCNumber').text('Not Available');
            }
            if (MethodCount == 0) {
                icontractdetails(); //ENH485  Featured metadata
            } else {
                showMetadataWithFeaturedMeta();
            }
        }
    });
}

function showMetadataWithFeaturedMeta() {
    var str = "";
    var value = "";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "19" && n.Status == "ON");
    });
    $('#MetadataAll').html('');
    if (GetallMetadataWithCT != null && GetallMetadataWithCT != []) {
        $(GetallMetadataWithCT).each(function (i, item) {
            if (item.FieldName != "BusinessArea" && item.FieldName != "ContractType" && item.FieldName != "ContractTitle" && item.FieldName != "Counterparty" && item.FieldName != "ContractNumber" &&
                item.FieldName != "SharedwithInternal" && item.FieldName != "Approvers" && item.FieldName != "ContractManagers" && item.FieldName != "Reviewers" && item.FieldName != "ExternalSignees" &&
                item.FieldName != "RelatedContracts" && item.FieldType != "File Upload" && item.FieldName != "Signees") {
                var onlydate = "";
                if (item.FieldType == 'Date') {
                    var date = $(icontractItem).find(item.FieldName).text();
                    if (date != null) {

                        onlydate = date.substring(0, date.length - 19);
                    }
                    if (onlydate != "") {
                        if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                            onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                        } else {
                            onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                        }
                    }
                    str = '<tr>' +
                        '<td height="10" align="left" valign="top" class="content-text clr999 width40" style="word-break: break-word;">' + item.FieldDisplayName + '</td>';
                    if (onlydate != "") {
                        str += '<td height="10" align="left" valign="top" class="content-text width58">' + onlydate + '</td>';
                    } else {
                        str += '<td height="10" align="left" valign="top" class="content-text width58"> Not Available</td>';
                    }

                    str += '</tr>';
                } else if (item.FieldType.indexOf("Value / Financials") >= 0) {
                    value = $(icontractItem).find(item.FieldName).text();

                    str = '<tr>' +
                        '<td height="10" align="left" valign="top" class="content-text clr999 width40" style="word-break: break-word;">' + item.FieldDisplayName + '</td>';
                    if (value != "") {
                        str += '<td height="10" align="left" valign="top" class="content-text width58">' + '<span id=' + item.FieldName + '_formatted' + '>' + value + '</span>' + '<span>' + $("#hdnContractCurrency").text() + '</span>' + '</td>';
                    } else {
                        str += '<td height="10" align="left" valign="top" class="content-text width58"> Not Available</td>';
                    }

                    str += '</tr>';

                } else {
                    str = '<tr>' +
                        '<td height="10" align="left" valign="top" class="content-text clr999 width40" style="word-break: break-word;">' + item.FieldDisplayName + '</td>';
                    if (typeof ($(icontractItem).find(item.FieldName).text()) != "undefined" && $(icontractItem).find(item.FieldName).text() != null && $(icontractItem).find(item.FieldName).text() != "") {
                        if (item.FieldType == 'Hyperlink') {
                            var link = $(icontractItem).find(item.FieldName).text();
                            str += '<td height="10" align="left" valign="top" class="width58 labelleft">' + '<a href="' + link + '" target="_blank"><p title="' + link + '" style="width:190px;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;font-size:13px">' + link + '</p></a>' + '</td>';
                        } else
                            str += '<td height="10" align="left" valign="top" class="content-text width58" style="word-break: break-word;">' + $(icontractItem).find(item.FieldName).text() + '</td>';
                    } else {
                        str += '<td height="10" align="left" valign="top" class="content-text width58"> Not Available</td>';
                    }

                    str += '</tr>';
                }
            }
            $('#MetadataAll').append(str);
            str = "";
            if (item.FieldType.indexOf("Value / Financials") >= 0) {
                if (vDocLibFeat.length > 0 && value != "") {
                    if ($.isNumeric($('#' + item.FieldName + '_formatted').html())) {
                        if (vCurrencyDisplayStyle == "UK") {
                            $('#' + item.FieldName + '_formatted').autoNumeric();
                        } else if (vCurrencyDisplayStyle == "CAN") {
                            $('#' + item.FieldName + '_formatted').autoNumeric({
                                aSep: ' ',
                                aDec: '.'
                            });
                        } else if (vCurrencyDisplayStyle == "EU") {
                            $('#' + item.FieldName + '_formatted').autoNumeric({
                                aSep: '.',
                                aDec: ','
                            });
                        } else if (vCurrencyDisplayStyle == "IND") {
                            $('#' + item.FieldName + '_formatted').autoNumeric({
                                dGroup: '2',
                            });
                        } else {
                            $('#' + item.FieldName + '_formatted').autoNumeric('init');
                        }
                    }
                }
            }
        });
    }
    FinancialMetadata();
}

function FinancialMetadata() {
    $('#tblcontractvaluepopup tr.financeclass').remove();
    var str = "";
    var MyPipeline = $("#aNavPipeline").hasClass("actNav");
    var MyContracts = $("#aNavContracts").hasClass("actNav");
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));

    var vAccFeatObligation = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "19" && n.Status == "ON");
    });

    if (vAccFeatObligation.length > 0) {
        var datalength = GetallFinancialMetadataWithCT.length;
        $("#tblFinancialMetadata").html('');
        //Binding Financial Metadata
        str += '<tbody>';
        for (var i = 0; i < GetallFinancialMetadataWithCT.length; i++) {
            var data = GetallFinancialMetadataWithCT[i];
            if (data.FieldName != "BusinessArea" && data.FieldName != "ContractType" && data.FieldName != "ContractTitle" && data.FieldName != "Counterparty") {

                if (data.FieldType == 'Date') {
                    var date = $(icontractItem).find(data.FieldName).text();
                    var onlydate = "";
                    if (date != null) {
                        onlydate = date.substring(0, date.length - 19);
                    }
                    if (onlydate != "") {
                        if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                            onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                        } else {
                            onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                        }
                    }
                    str += '<tr>' +
                        '<td height="10" align="left" valign="top" class="content-text clr999 width40" style="word-break: break-word;">' + data.FieldDisplayName + '</td>';
                    if (onlydate != "") {
                        str += '<td height="10" align="left" valign="top" class="content-text width58">' + onlydate + '</td>';
                    } else {
                        str += '<td height="10" align="left" valign="top" class="content-text width58"> Not Available</td>';
                    }
                    str += '</tr>';
                } else {
                    str += '<tr>' +
                        '<td height="10" align="left" valign="top" class="content-text clr999 width40" style="word-break: break-word;">' + data.FieldDisplayName + '</td>';
                    if (typeof ($(icontractItem).find(data.FieldName).text()) != "undefined" && $(icontractItem).find(data.FieldName).text() != null && $(icontractItem).find(data.FieldName).text() != "") {
                        str += '<td height="10" align="left" valign="top" class="content-text width58">' + $(icontractItem).find(data.FieldName).text() + '</td>';
                    } else {
                        str += '<td height="10" align="left" valign="top" class="content-text width58"> Not Available</td>';
                    }
                    str += '</tr>';
                }
            }
        }
        str += '</tbody>';
        $("#tblFinancialMetadata").append(str);
        str = '';
        //To Edit Financial Metadata
        for (var i = 0; i < datalength; i++) {
            var data = GetallFinancialMetadataWithCT[i];
            var inpstr = "";
            var onlydate = "";
            var vMultiDDL1 = "";
            var resValue = "";
            var multiarr = [];
            var vDate = "";

            if (data.FieldType == 'Single Line Text' || data.FieldType == 'Number') {
                str += '<tr class="financeclass">';
                str += '<td class="f_head"  style="height:35px;">' + data.FieldDisplayName + '</td>';
                if ($(icontractItem).find(data.FieldName).text() !== "") {
                    inpstr = '<input id="' + data.FieldName + '" name="' + data.FieldName + '" title="' + data.FieldDisplayName + '" maxlength="100" type="text" class="f_inpt width90" value="' + $(icontractItem).find(data.FieldName).text() + '" />';
                    str += '<td  class="labelright f_list financials">' + inpstr + '';
                } else {
                    inpstr = '<input id="' + data.FieldName + '" name="' + data.FieldName + '" title="' + data.FieldDisplayName + '" maxlength="100" type="text" class="f_inpt width90" />';
                    str += '<td  class="labelright f_list financials">' + inpstr + '';
                }
                str += '</td></tr>';
            } else if (data.FieldType == 'Multi Line Text') {
                str += '<tr class="financeclass">';
                str += '<td class="f_head" style="height:35px;margin-top:-15%;">' + data.FieldDisplayName + '</td>';
                if ($(icontractItem).find(data.FieldName).text() !== "") {
                    inpstr = "<textarea name=" + data.FieldName + " id=" + data.FieldName + " maxlength='500' cols='50' rows='4' style='border:1px solid #ccc;height: 70px; font-size: 13px;color: #6c6c6c;' title='" + data.FieldDisplayName + "' class='width90 clsMultilineText'>" + $(icontractItem).find(data.FieldName).text() + "</textarea>";
                    str += '<td class="labelright f_list financials">' + inpstr + '';
                } else {
                    inpstr = "<textarea name=" + data.FieldName + " id=" + data.FieldName + " maxlength='500' cols='50' rows='4' style='border:1px solid #ccc;height: 70px; font-size: 13px;color: #6c6c6c;' class='width90 clsMultilineText' title='" + data.FieldDisplayName + "'></textarea>";
                    str += '<td class="labelright f_list financials">' + inpstr + '';
                }
                str += '</td></tr>';
            } else if (data.FieldType == 'Date') {
                var vv = $(icontractItem).find(data.FieldName).text();
                if (vv != null) {
                    onlydate = vv.substring(0, vv.length - 19);
                }
                if (onlydate != "") {
                    if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                        onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                    } else {
                        onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                    }
                }
                str += '<tr class="financeclass">';
                str += '<td class="f_head" style="height:35px;">' + data.FieldDisplayName + '</td>';
                if (onlydate !== "") {
                    inpstr = "<input type='text' id='" + data.FieldName + "' name='" + data.FieldName + "' class='f_inpt width60 fielddatecontrol removeText' value='" + onlydate + "' title='" + data.FieldName + "'/>";
                    str += '<td class="labelright f_list fielddatecontrol">' + inpstr + '';

                } else {
                    inpstr = '<input id="' + data.FieldName + '" name="' + data.FieldName + '" title="' + data.FieldDisplayName + '" maxlength="15" type="text" class="f_inpt width60 fielddatecontrol removeText" />';
                    str += '<td class="labelright f_list fielddatecontrol">' + inpstr + '';
                }
                str += '</td></tr>';
            } else if (data.FieldType == 'Multi- Choice (Dropdown)') {
                if (MyContracts || MyPipeline) {
                    str += '<tr class="financeclass">';
                    str += '<td class="f_head"  style="height:35px;">' + data.FieldDisplayName + '</td>';
                    inpstr = "<select id=" + data.FieldName + " multiple='multiple' class='f_inpt width90' name=" + data.FieldName + " title='" + data.FieldName + "' data-placeholder='--Select--'>";
                    str += '<td class="labelright f_list chosenmulti chosen-choices" style="padding-right:35px;">' + inpstr + '';
                    if (vMultiDDL1 == '') {
                        var myArray = [];
                        myArray = data.ChoiceValues.split("\n");
                        for (var j = 0; j < myArray.length; j = j + 1) {
                            vMultiDDL1 += "<option value='" + myArray[j] + "'>" + myArray[j] + "</option>";
                        }
                    }
                    str += vMultiDDL1;
                    str += '</select></td></tr>';
                    vMultiDDL1 = data.FieldName;
                }
            } else if (data.FieldType == 'Multi- Choice (Browse)') {
                str += '<tr class="financeclass">';
                str += '<td class="f_head"  style="height:35px;">' + data.FieldDisplayName + '</td>';
                if ($(icontractItem).find(data.FieldName).text() !== "") {
                    inpstr = '<input id="' + data.FieldName + '" readonly="readonly" name="' + data.FieldName + '" title="' + data.FieldDisplayName + '" maxlength="100" type="text" class="f_inpt width90" value="' + $(icontractItem).find(data.FieldName).text() + '" />';
                    str += '<td  class="labelright f_list financials">' + inpstr + '';
                } else {
                    inpstr = '<input id="' + data.FieldName + '" readonly="readonly" name="' + data.FieldName + '" title="' + data.FieldDisplayName + '" maxlength="100" type="text" class="f_inpt width90" />';
                    str += '<td  class="labelright f_list financials">' + inpstr + '';
                }
                str += '</td>';
                str += '<td class="col3 m1">';
                str += "<a href='javascript:void(0)' class='font12' style='margin-left:-30px !important;color: #3F91CC !important;' id='" + data.FieldDisplayName + "' title='" + data.FieldName + "' onclick='ViewGeneric(this)'> Browse</a>";
                str += "</td></tr>";
            } else if (data.FieldType == 'Choice') {
                str += '<tr class="financeclass">';
                str += '<td class="f_head" style="height:35px;">' + data.FieldDisplayName + '</td>';
                inpstr = "<select id='" + data.FieldName + "' name=" + data.FieldName + " class='f_inpt width90 choicevaluecheck' title='" + data.FieldName + "' data-placeholder='--Select--'>";
                str += '<td class="labelright f_list financials">' + inpstr + '';
                str += "<option value=''>--Select--</option>";
                var myArray1 = [];
                myArray1 = data.ChoiceValues.split("\n");
                for (var l = 0; l < myArray1.length; l = l + 1) {
                    do {
                        myArray1[l] = myArray1[l].replace("&amp;", "&");
                    } while (myArray1[l].indexOf("&amp;") > -1);
                    if ($(icontractItem).find(data.FieldName).text() == myArray1[l]) {
                        str += "<option value='" + myArray1[l] + "' selected>" + myArray1[l] + "</option>";
                    } else {
                        str += "<option value='" + myArray1[l] + "'>" + myArray1[l] + "</option>";
                    }
                }
                str += '</select></td></tr>';
            }
            if (str !== "") {
                $("#tblcontractvaluepopup").append(str);
                if (data.FieldType == "Date") {
                    var dateformate = localStorage.AppDateFormat.toLowerCase().slice(0, -2);
                    $("#" + data.FieldName + "").datepicker({
                        changemonth: true,
                        changeyear: true,
                        dateFormat: dateformate
                    });
                }
                if (data.FieldType == 'Number') {
                    allowOnlyNumberInInputBox(data.FieldName);
                }
                if (vMultiDDL1 != "") {
                    $("#" + vMultiDDL1 + "").chosen().trigger("chosen:updated");
                    var values = $(icontractItem).find(vMultiDDL1).text();
                    if (values != "") {
                        var res = values != null ? values.split(";") : [];
                        var reslength = res.length;
                        for (var k = 0; k < reslength; k++) {
                            resValue = res[k].trim();
                            if (resValue != "") {
                                if ($('#' + vMultiDDL1 + ' option[value="' + resValue + '"]').length > 0 && multiarr.indexOf(resValue) == -1)
                                    multiarr.push(resValue);
                            }
                        }
                        if (multiarr.length > 0)
                            ChosenOrder.setSelectionOrder($('#' + vMultiDDL1), multiarr, true);
                    }
                    resValue = "";
                    vMultiDDL1 = "";
                    multiarr = [];
                }
                str = "";
            }
        }
    }
}

function MetadataDetails() {

    $("#Details").addClass('pop_up_Harizondal_meta_active');
    $("#Summary").removeClass('pop_up_Harizondal_meta_active');
    $('#tblSummary').css("display", "none");
    $('#tblDetailsMetadata').css("display", "");
}

function MetadataSummary() {

    $("#Summary").addClass('pop_up_Harizondal_meta_active');
    $("#Details").removeClass('pop_up_Harizondal_meta_active');
    $("#Details").removeClass('pop_up__Acti');
    $("#Summary").addClass('pop_up__Acti');
    $('#tblSummary').css("display", "");
    $('#tblDetailsMetadata').css("display", "none");
    $('#tblSummary').css("display", "");
    $('#tblDetailsMetadata').css("display", "none");

}

// Metadata Region Ends

// People Region Begins
function BindContractPeopleMetadata(item) {
    var usersarr = [];
    var userDisable = '';
    var userTitle = '';
    //ENH-472 (In Contract, People & Permission tab displaying all the Global Contract Owners.)
    var userslist = [];
    if (allUsersList != [] && allUsersList.length > 0 && typeof allUsersList != 'undefined') {
        var allGlobalContractOwners = $.grep(allUsersList, function (item, i) {
            return item.UserType.indexOf('Global Contract Owner') > -1;
        });
    }

    if (item.ContractAreaAdministrators == null || item.ContractAreaAdministrators == "") {
        $("#liContractAreaAdminNA").css('display', '');
        $("#spContractAreaAdminView").text("Not Available");
    } else {
        usersarr = item.ContractAreaAdministrators.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            usertitle = '';
            userDisable = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#liContractAreaAdmin").html(vUsers);
        $("#spContractAreaAdminView").html(vUsers);
    }
    if (item.BusinessAreaOwners == null || item.BusinessAreaOwners == "") {
        $("#liBusinessAreaOwnerNA").css('display', '');
        $("#spBusinessAreaOwnerView").text("Not Available");
    } else {
        usersarr = item.BusinessAreaOwners.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#liBusinessAreaOwner").html(vUsers);
        $("#spBusinessAreaOwnerView").html(vUsers);
    }
    if (item.ContractManagers == null || item.ContractManagers == "") {
        $("#licontractmanagers").text("Not Available");
        $("#spContractOwner").html("Not Available");
        $("#spContractOwnerView").html("Not Available");

    } else {
        $("#licontractmanagers").text(item.ContractManagers);
        usersarr = item.ContractManagers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spContractOwner").html(vUsers);
        $("#spContractOwnerView").html(vUsers);

    }

    if (item.Reviewers == null || item.Reviewers == "") {
        $("#lireviewers").text("Not Available");
        $("#spReviewers").html("Not Available");
        $("#spReviewersView").html("Not Available");

    } else {
        $("#lireviewers").text(item.Reviewers);
        usersarr = item.Reviewers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
        }
        $("#spReviewers").html(vUsers);
        $("#spReviewersView").html(vUsers);
    }

    if (item.Approvers == null || item.Approvers == "") {
        $("#liapprovers").text("Not Available");
        $("#spApprovers").html("Not Available");
        $("#spApproversView").html("Not Available");
    } else {
        $("#liapprovers").text(item.Approvers);
        usersarr = item.Approvers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spApprovers").html(vUsers);
        $("#spApproversView").html(vUsers);
    }


    if (item.ApprovedBy == null || item.ApprovedBy == "") {
        $("#spApprovedBy").html("Not Available");
        $("#spApprovedByView").html("Not Available");
        $("#tdApprovedBy").html("Not Available");
    } else {
        usersarr = item.ApprovedBy.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spApprovedBy").html(vUsers);
        $("#spApprovedByView").html(vUsers);
        $("#tdApprovedBy").html(vUsers);
    }


    if (item.ReviewedBy == null || item.ReviewedBy == "") {
        $("#spReviewedBy").html("Not Available");
        $("#spReviewedByView").html("Not Available");
        $("#tdReviewedBy").html("Not Available");
    } else {
        usersarr = item.ReviewedBy.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spReviewedBy").html(vUsers);
        $("#spReviewedByView").html(vUsers);
        $("#tdReviewedBy").html(vUsers);
    }



    if (item.Signees == null || item.Signees == "") {
        $("#lisignees").text("Not Available");
        $("#spInternalSignees").html("Not Available");
        $("#spInternalSigneesView").html("Not Available");
    } else {
        $("#lisignees").text(item.Signees);
        usersarr = item.Signees.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spInternalSignees").html(vUsers);
        $("#spInternalSigneesView").html(vUsers);
    }



    if (item.SignedBy == null || item.SignedBy == "") {
        $("#liSignedBy").text("Not Available");
        $("#tdSignedBy").html("Not Available");
        $("#liSignedByView").text("Not Available");
    } else {
        $("#tdSignedBy").html(item.SignedBy);
        var vExternal = item.SignedBy.split(';');
        var reslength = vExternal.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            if (vExternal[i].trim() != '') {
                if (vUsers == '')
                    vUsers = vExternal[i].split('(')[0].trim();
                else
                    vUsers += '; ' + vExternal[i].split('(')[0].trim();
            }
        }
        $("#liSignedBy").text(vUsers);
        $("#liSignedByView").text(vUsers);
    }


    if (item.ExternalSignees == null || item.ExternalSignees == "") {
        $("#lisigneesExternal").html("Not Available");
        $("#lisigneesExternalView").html("Not Available");
    } else {
        var vExternal = item.ExternalSignees.split(';');
        var reslength = vExternal.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            if (vUsers == '')
                vUsers = vExternal[i].split('(')[0].trim();
            else
                vUsers += '; ' + vExternal[i].split('(')[0].trim();;
        }
        $("#lisigneesExternal").html(vUsers);
        $("#lisigneesExternalView").html(item.ExternalSignees);
        $('#txtExternalSignee').val($('#lisigneesExternalView').text());
    }



    if (item.ExternalSignedBy == null || item.ExternalSignedBy == "") {
        $("#liExternalSignedBy").text("Not Available");
        $("#tdExternalSignedBy").html("Not Available");
        $("#liExternalSignedByView").text("Not Available");
    } else {
        $("#liExternalSignedBy").html(item.ExternalSignedBy);
        $("#tdExternalSignedBy").html(item.ExternalSignedBy);
        $("#tdExternalSignedBy").html(item.ExternalSignedBy);
    }

    if (item.SharedWith == null || item.SharedWith == "") {
        $("#lisharedWith").text("Not Available");
        $("#lisharedWithView").text("Not Available");
        $("#tdSharedWith").html("Not Available");
    } else {
        $("#tdSharedWith").html(item.SharedWith);
        var vExternal = item.SharedWith.split(';');
        var reslength = vExternal.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            if (vExternal[i].trim() != '') {
                if (vUsers == '')
                    vUsers = vExternal[i].split('(')[0].trim();
                else
                    vUsers += '; ' + vExternal[i].split('(')[0].trim();
            }
        }
        $("#lisharedWith").text(vUsers);
        $("#lisharedWithView").text(vUsers);
    }


    if (item.ContractManagers == null || item.ContractManagers == "") {
        $("#licontractmanagers").text("Not Available");
        $("#spContractOwner").html("Not Available");
        $("#spContractOwnerView").html("Not Available");

    } else {
        $("#licontractmanagers").text(item.ContractManagers);
        usersarr = item.ContractManagers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(usersarr[i].trim()) + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spContractOwner").html(vUsers);
        $("#spContractOwnerView").html(vUsers);

    }
    if (item.Requestor == null || item.Requestor == "") {
        $("#spRequestor").text("Not Available");
        $("#spRequestorView").text("Not Available");
    } else {
        $("#spRequestor").html(item.ExternalSignedBy);
        $("#spRequestorView").html(item.ExternalSignedBy);
    }

}

function MangePeopleView() {

    $("#addViewPeople").dialog("option", "title", "People");
    $("#addViewPeople").dialog("open");
    $("#addViewPeople").height("auto");
    $('#txtExternalSignee').val($('#lisigneesExternalView').text());

}
// People Region Ends

// Related Projects Region starts
function BindProjects(items) {
    $("#tblRelatedProjects").empty();
    if (items.indexOf(';') >= 0) {
        var vrelated = "";
        $.each(items.split(";"), function (a, itemname) {
            vrelated += '<tr>';
            vrelated += '<td height="10" align="left" valign="top" class="content-text clr999"><a href="javascript:void(0);" onclick="ViewProject(\'' + itemname.split(':')[0] + '\')">' + itemname.split(':')[0] + '</a></td>';
            if (itemname.split(':')[1] == "Default Task") {
                vrelated += '<td height="10" align="left" valign="top" class="content-text">' + itemname.split(':')[1] + '</td>';
            } else {
                vrelated += '<td height="10" align="left" valign="top" class="content-text"><a href="javascript:void(0);" onclick="ViewProjectTask(\'' + itemname + '\')">' + itemname.split(':')[1] + '</a></td>';
            }
            vrelated += '</tr>';
        });
        $("#tblRelatedProjects").html(vrelated);
    } else {
        var vrelated1 = "";
        vrelated1 = '<tr>';
        vrelated1 += '<td height="10" align="left" valign="top" class="content-text clr999"><a href="javascript:void(0);" onclick="ViewProject(\'' + items.split(':')[0] + '\')">' + items.split(':')[0] + '</a></td>';
        if (items.split(':')[1] == "Default Task") {
            vrelated1 += '<td height="10" align="left" valign="top" class="content-text">' + items.split(':')[1] + '</td>';
        } else {
            vrelated1 += '<td height="10" align="left" valign="top" class="content-text"><a href="javascript:void(0);" onclick="ViewProjectTask(\'' + items + '\')">' + items.split(':')[1] + '</a></td>';
        }
        vrelated1 += '</tr>';
        $("#tblRelatedProjects").html(vrelated1);
    }
}

function ViewProject(projectname) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project?projectName=' + projectname.trim(),
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (entity) {
            $("#dvProjectID").html(entity.ProjectID);
            $("#dvProjectName").html(entity.ProjectName);
            if (entity.Description == null || entity.Description == "") {
                $("#dvDescription").html("-");
            } else {
                $("#dvDescription").html(entity.Description);
            }
            $("#dvStatus").html(entity.Status);
            if (entity.StartDate == null || entity.StartDate == "") {
                $("#dvStartDate").html("-")
            } else {
                var fStartDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    fStartDate = moment(new Date(entity.StartDate)).format('MM/DD/YYYY');
                } else {
                    fStartDate = moment(new Date(entity.StartDate)).format(localStorage.AppDateFormat);
                }
                $("#dvStartDate").html(fStartDate);
            }
            if (entity.EndDate == null || entity.EndDate == "") {
                $("#dvEndDate").html("-")
            } else {
                var fEndDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    fEndDate = moment(new Date(entity.EndDate)).format('MM/DD/YYYY');
                } else {
                    fEndDate = moment(new Date(entity.EndDate)).format(localStorage.AppDateFormat);
                }
                $("#dvEndDate").html(fEndDate);
            }
            if (entity.SubAccount == null || entity.SubAccount == "") {
                $("#dvSubAccount").html("-")
            } else {
                $("#dvSubAccount").html(entity.SubAccount);
            }
            $("#dvProjectManager").html(entity.ProjectManager);
            $("#dvBusinessManager").html(entity.BusinessManager);
            if (entity.CustomerID == null || entity.CustomerID == "") {
                $("#dvCustomerID").html("-")
            } else {
                $("#dvCustomerID").html(entity.CustomerID);
            }
            if (entity.Country == "--Select--") {
                $("#dvCountry").html("-");
            } else {
                $("#dvCountry").html(entity.Country);
            }
            if (entity.Division == null || entity.Division == "") {
                $("#dvDivision").html("-")
            } else {
                $("#dvDivision").html(entity.Division);
            }
            if (entity.PracticeArea == null || entity.PracticeArea == "") {
                $("#dvPracticeArea").html("-")
            } else {
                $("#dvPracticeArea").html(entity.PracticeArea);
            }

            $("#dvViewProject").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function ViewProjectTask(taskid) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/projecttaskbytaskid?taskid=' + taskid.trim(),
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (entity) {
            $("#dvTaskID").html(entity.TaskID);
            $("#dvTaskDescription").html(entity.TaskDescription);
            if (entity.StartDate == null || entity.StartDate == "") {
                $("#dvManager").html("-");
            } else {
                $("#dvManager").html(entity.Manager);
            }
            if (entity.StartDate == null || entity.StartDate == "") {
                $("#dvTaskStartDate").html("-");
            } else {
                var fStartDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    fStartDate = moment(new Date(entity.StartDate)).format('MM/DD/YYYY');
                } else {
                    fStartDate = moment(new Date(entity.StartDate)).format(localStorage.AppDateFormat);
                }
                $("#dvTaskStartDate").html(fStartDate);
            }
            if (entity.EndDate == null || entity.EndDate == "") {
                $("#dvTaskEndDate").html("-");
            } else {
                var fEndDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    fEndDate = moment(new Date(entity.EndDate)).format('MM/DD/YYYY');
                } else {
                    fEndDate = moment(new Date(entity.EndDate)).format(localStorage.AppDateFormat);
                }
                $("#dvTaskEndDate").html(fEndDate);
            }
            $("#dvViewProjectTask").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

//Related Projects Region Ends

function GetUserList() {
    var vUserList = '';
    if (allUsers.length > 0) {
        allUsersList = allUsers;
        vUserList = $("#ddlApprovers > option").clone();
    } else {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/coreentity',
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: false,
            async: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            success: function (dataUser) {
                allUsersList = dataUser;
                $(dataUser).each(function (i, item) {
                    var sRowKey = item.RowKey;
                    var sUserName = item.UserName;
                    vUserList += '<option value="' + sUserName + '">' + sUserName + '</option>';
                });
            },
            error: function (dataUser) { }
        });
    }
    return vUserList;
}

function DefaultGlobalsettingsDP() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/GlobalSettings?accountid=' + localStorage.AccountID,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        contentType: 'application/json',
        cache: false,
        success: function (status) {
            localStorage.setItem("RestrictHighSecurityTagging", status.RestrictHighSecurityTagging);
            defaultGlobalSettings = status;
            if (status == null) {
                $("#Upcoming").css("display", "none");
                $("#Delayed").css("display", "none");
            } else {
                $("#hdRenewalRemindersGlobal").val(status.RenewalReminders);
                if (status.CreateCounterpartyDocument == "Yes") {
                    $("#Upcoming").css("display", "");
                    $("#Delayed").css("display", "");
                } else {
                    $("#Upcoming").css("display", "none");
                    $("#Delayed").css("display", "none");
                }
            }
        },
        error: function (status) {
            localStorage.setItem("RestrictHighSecurityTagging", "No");
        }
    });
}

function ShowTabDetail(TabName) {
    if (TabName == "Summary") {
        $('.info-box-main-body').css("display", "none");
        $('#tabSummaryDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabSummary").addClass("active");
    } else if (TabName == "Activity") {
        if ($('#dvContractWorkflows div').length == 0) //Performance Optimization
        {
            GetContractActivities(vContractID); //Performance Optimization
        }
        $('.info-box-main-body').css("display", "none");
        $('#tabActivityDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabActivity").addClass("active");
    } else if (TabName == "Catalog") {
        $('.info-box-main-body').css("display", "none");
        $('#tabCatalogDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabCatalog").addClass("active");
    } else if (TabName == "Transactions") {
        $('.info-box-main-body').css("display", "none");
        $('#tabTransactionsDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabTransactions").addClass("active");
    } else if (TabName == "Obligation") {
        if ($('#ObligationNewDetailsTableBody tr').length == 0 && $('#ObligationNewDetailsTableBodyGroup tr').length == 0) //Performance Optimization
            GetObligationCatalogs(); //Performance Optimization
        $('.info-box-main-body').css("display", "none");
        $('#tabObligationNewDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabObligation").addClass("active");
    } else if (TabName == "Notes") {
        if ($('#ulNotesBody li').length == 0) //Performance Optimization
            BindNotes(vContractID); //Performance Optimization
        $('.info-box-main-body').css("display", "none");
        $('#tabNotesDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabNotes").addClass("active");
    } else if (TabName == "TermsClause") {
        if ($('#ulNotesBody li').length == 0) //Performance Optimization
            TermsAndClauseDocument(vContractID); //Performance Optimization
        $('.info-box-main-body').css("display", "none");
        $('#tabTermsClauseDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabTermsClause").addClass("active");
    } else if (TabName == "Documents") {
        $('.info-box-main-body').css("display", "none");
        $('#tabDocumentsDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabDocuments").addClass("active");
    } else if (TabName == "DocumentView") {
        $('.info-box-main-body').css("display", "none");
        $('#tabDocumentViewDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabDocumentView").addClass("active");
    } else if (TabName == "Amendment") {
        if ($('#ulAmendment li').length == 0) {
            BindAmendments(vContractID);
        }

        $('.info-box-main-body').css("display", "none");
        $('#tabAmendmentDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabAmendment").addClass("active");
    } else if (TabName == "Correspondence") {
        $('.info-box-main-body').css("display", "none");
        $('#tabCorrespondenceDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabCorrespondence").addClass("active");
    }
}

function togglediv(firstObject, secondObject, imgObject) {
    switch (imgObject) {
        case 'imgRelatedContracts':
            if ($('#ulRelatedContracts li').length === 0) {
                BindRelatedContracts();
            }
            break;
    }

    if (firstObject != "")
        $("#" + firstObject).slideToggle();
    if (secondObject != "")
        $("#" + secondObject).slideToggle();
    if (imgObject != "") {
        var imgObj = $("#" + imgObject);

        if (imgObj.attr("title") == "Collapse") {
            imgObj.attr("title", "Expand");
            imgObj.attr("src", "../Content/Images/e-open.png");
        } else {
            imgObj.attr("title", "Collapse");
            imgObj.attr("src", "../Content/Images/e-close.png");
        }
    }
}


//-------------------------------------Document Begins-----------------------------------------------//
function showfolderdocuments(parentfolderid) {
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    selectedamnddoc = false;
    selectedamnddocname = [];
    $("#documentMultiActions").css('display', 'none');
    var Istagexist = false;
    $("#showAll").find("a").each(function (e) {
        var tid = this.id;
        if (tid == parentfolderid.id) {
            Istagexist = true;
        }
    });
    if (Istagexist) {
        var splitsection = Folderselection.split('~8Y92YagH');
        $("#showAll").empty();
        for (spl = 0; spl < splitsection.length; spl++) {
            if (splitsection[spl] != "") {
                if (spl == 0) {
                    $("#showAll").append(splitsection[spl]);
                    Folderselection = splitsection[spl];
                }
                if (splitsection[spl].indexOf(parentfolderid.id) > -1) {
                    if (spl != 0) {
                        $("#showAll").append('/' + splitsection[spl]);
                        Folderselection += "~8Y92YagH" + splitsection[spl];
                    }
                    break;
                } else {
                    if (spl != 0) {
                        $("#showAll").append('/' + splitsection[spl]);
                        Folderselection += "~8Y92YagH" + splitsection[spl];
                    }
                }
            }
        }
    }
    if ($("#showAll").text().indexOf("/") >= 0) {
        var texttille = parentfolderid.id
        Istagexist = false;
        $("#showAll").find("a").each(function (e) {
            var tid = this.id;
            if (tid == parentfolderid.id) {
                Istagexist = true;
            }
        });
        if (Istagexist) {
            $("#showAll").empty();
            var splitsection = Folderselection.split('~8Y92YagH');
            for (spl = 0; spl < splitsection.length; spl++) {
                if (splitsection[spl] != "") {
                    if (splitsection[spl].indexOf(texttille) > -1) {
                        if (spl == 0) {
                            $("#showAll").append(splitsection[spl]);
                            Folderselection = splitsection[spl];
                        } else {
                            $("#showAll").append('/' + splitsection[spl]);
                            Folderselection += "~8Y92YagH" + splitsection[spl];
                        }
                    } else {
                        if (spl == 0) {
                            $("#showAll").empty();
                            $("#showAll").append(splitsection[spl]);
                            Folderselection = splitsection[spl];
                        } else {
                            $("#showAll").append('/' + splitsection[spl]);
                            Folderselection += "~8Y92YagH" + splitsection[spl];
                        }
                    }
                }
            }
        } else {
            var Isexist = false;
            var id;
            $("#showAll").find("a").each(function (e) {
                id = this.id;
                if (id == parentfolderid.id) {
                    Isexist = true;
                }
            });
            if (!Isexist) {
                $("#showAll").append(' / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
                Folderselection += ' ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';
            }
            $("#showAll").css('display', '');
        }
    } else {
        $("#showAll").empty();
        if (parentdocid == parentfolderid.id) {
            $("#showAll").append('<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>');
            Folderselection = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>';
        } else {
            $("#showAll").append('<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a> / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
            Folderselection = '<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a> ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';
        }
        $("#showAll").css('display', '');
    }
    $("#ulDocument").empty();
    $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/documentsinfolder?parentfolderid=' + parentfolderid.id + '&contractid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            if (typeof (data) == 'undefined') {
                $("#ulDocument").empty();
                $("#ulDocument").append('No items found.');
                $("#documentsort").css('display', 'none');
                $('.ShowMoreDocuments').css("display", "none");
                $('#ShowMoreDocuments').css("display", "none");
                $('#ShowLessDocuments').css("display", "none");
            } else {
                $('#ulDocument').empty();
                CreateDocumentListNew(data);
                GetContractActivities(vContractID);
            }
        },
        error: function (data) {
            var Isexist = false;
            var id;
            $("#showAll").find("a").each(function (e) {
                id = this.id;
                if (id == parentfolderid.id) {
                    Isexist = true;
                }
            });
            if (!Isexist) {
                $("#showAll").append(' / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
                Folderselection += ' ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';
            }
            $("#showAll").css('display', '');
            $("#documentsort").css('display', 'none');
            $('#ulDocument').empty();
            $("#lblDocumentsCount").text('0');
            $("#ulDocument").append('No items found.');
            $('.ShowMoreDocuments').css("display", "none");
            $('#ShowMoreDocuments').css("display", "none");
            $('#ShowLessDocuments').css("display", "none");
        },
    });
}

function BindDocument(contractid) {
    multipleChecksDocumentID = '';
    multipleChecksDocumentName = '';
    articleDocumentMileStone = '';
    $("#documentMultiActions").css('display', 'none');
    if (contractid == null || contractid == "") {
        contractid = vContractID;
    }
    $("#ulDocument").empty();
    $("#alertsListUpcomingDocument").empty();
    $("#ddlDocumentList").empty();
    $("#dvDocument").empty();
    DocumentCount = 0;
    $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/parentfolder?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            $("#hdnContractDocumentsUrl").text(data.FolderUrl);
            $("#hdnContractDocumentsUrlFixed").text(data.FolderUrl);
            parentdocid = data.RowKey;
            parentdocname = data.DocumentName;
            $("#showAll").empty();
            $("#showAll").append('<a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>');
            Folderselection = '<a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>';
            $("#showAll").css('display', '');
            var parentdoc = {
                id: parentdocid,
                text: parentdocname
            };
            showfolderdocuments(parentdoc)
        },
        error: function (request) {
            $("#documentsort").css('display', 'none');
            $("#lblDocumentsCount").text('0');
            $("#ulDocumentLoading").css('display', 'none');
            $("#ulDocument").html('No items found.');
            $('.ShowMoreDocuments').css("display", "none");
            $('#ShowMoreDocuments').css("display", "none");
            $('#ShowLessDocuments').css("display", "none");
        }
    });
}

function CreateDocumentListPinView(contractid) {
    articleDocumentMileStone = "";
    $('.ShowMorePinDocuments').css("display", "none");
    $('#ShowMorePinDocuments').css("display", "none");
    $('#ShowLessPinDocuments').css("display", "none");
    $("#hdnPinDocumentCount").text("No");
    $("#ulPinDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (Documentcollections) {
            if (typeof (Documentcollections) != 'undefined') {
                var data = $.grep(Documentcollections, function (n, i) {
                    return (n.IsPined == "Yes" || n.IsPrimary == "Yes");
                });
                if (data.length >= 5) {
                    $("#hdnPinDocumentCount").text("Yes");
                } else {
                    $("#hdnPinDocumentCount").text("No");
                }
                if (data.length > 1) {
                    $("#pindocumentsort").css('display', '');
                } else {
                    $("#pindocumentsort").css('display', 'none');
                }
                var vFinalSignature = "dropdownMenuFinal";
                var vMarkFinalSignature = "dropdownMenuMarkFinal";
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "1" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    vFinalSignature = "dropdownMenuFinalSignature";
                    vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
                    $("#dropdownMenuAmendment .signature").show();
                    $("#dropdownMenuAmendmentFinal .signature").show();
                } else {
                    $("#dropdownMenuAmendment .signature").hide();
                    $("#dropdownMenuAmendmentFinal .signature").hide();
                }
                var vGetTime = new Date();
                $.ajax({
                    url: '/Documents/GetTime',
                    type: 'GET',
                    dataType: 'json',
                    cache: false,
                    success: function (data) {
                        var jsObject = JSON.parse(data);
                        vGetTime = new Date(jsObject);
                    }
                });
                var count = 0;
                var vPermission = $("#hdnPermission").val();
                var settings = {
                    pattern: /\.[0-9a-z]+$/i,
                    knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
                    WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
                };
                var vTitle = '';
                var article = '';
                var articleSubFolder = '';
                var DocDefaultView = "";
                if (thisDocumentLibrarySettings != '' && thisDocumentLibrarySettings != 'undefined' && typeof thisDocumentLibrarySettings != "undefined") {
                    DocDefaultView = thisDocumentLibrarySettings.DocDefaultView;
                    DocVersion = thisDocumentLibrarySettings.DocVersion;
                }
                data.forEach(function (item) {
                    var vv = moment(new Date(item.Modified));
                    var vTime = vv.fromNow();
                    vTime = vv.from(vGetTime);
                    count++;
                    var vClass = "openmenuDocumentFinal";
                    var vDocIcon = "";
                    var vPrimDocIcon = '';
                    if (item.IsFinalized == "Yes") {
                        vClass = "openmenuDocument";
                        vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized Document" title="Finalized Document" />';
                        if (item.CreationMode == "Amendment") {
                            vClass = "openmenuAmendmentDocumentFinal";
                            vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                        }
                    } else if (item.CreationMode == "Amendment") {
                        vClass = "openmenuAmendmentDocument";
                        vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                    }
                    if (item.IsPined == "Yes" && item.IsPrimary != "Yes") {
                        vClass += "UnPin";
                    }
                    if (item.IsPrimary == "Yes") {
                        vPrimDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                        vClass += "UnPin" + " hideItem primarydocument";
                    } else {
                        vClass += " showitem";
                    }
                    if (item.DocumentStatus == "Expired" || contractItem.IsDraft == "Yes" || contractItem.Status == "Expired" ||
                        contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                        vClass = "openmenuExpiredDocument";
                    }
                    vURLDoc = encodeURI(item.DocumentUrl);
                    var ext = vURLDoc.match(settings.pattern);
                    var vFileType = '<dd class="file-icon none"></dd>';
                    if (ext != null) {
                        if (ext.length > 0) {
                            ext = ext[0].slice(1);
                        }
                        if (DocDefaultView == "WordClient") {
                            if (vURLDoc.toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                                if (jQuery.inArray(ext, settings.WopiFrameFileTypes) > -1) {
                                    vRawURLDoc = encodeURIComponent(item.DocumentUrl);
                                    vURLDoc = localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + vRawURLDoc + "&action=default";
                                } else {
                                    vRawURLDoc = "";
                                }
                            }
                        }
                        if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                            vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                        }
                    }
                    if (count <= 10) {
                        article += '<li class=" margin-bottom-5" active=' + item.IsActive + '>';
                    } else {
                        article += '<li class="ShowMorePinDocuments margin-bottom-5" style="display:none;">';
                    }
                    article += '<label id="FolderCreationMode" style="display:none;">' + item.CreationMode + '</label>';
                    article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
                    article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
                    article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
                    article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
                    article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
                    article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
                    article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
                    var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
                    article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';
                    if (item.CreationMode == "Amendment") {
                        article += '<label id="AmendmentID" style="display:none;">' + item.AmendmentID + '</label>';
                    }
                    switch (item.DocumentStatus) {
                        case "New":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived') {
                                article += '<b title="New" style="cursor:default" id="' + item.RowKey + '" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5" style="cursor:default">new</b>';
                            } else {
                                article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                            }
                            break;
                        case "Ready for Signature":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived') {
                                article += '<b title="Ready for Signature" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">sign</b>';
                            } else {
                                article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                            }
                            break;
                        case "Awaiting Signatures":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="Awaiting Signatures" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">sign</b>';
                            else
                                article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                            break;
                        case "Active":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="Active" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">actv</b>';
                            else
                                article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                            break;
                        case "Signed":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="Signed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Sign</b>';
                            else
                                article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                            break;
                        case "Expired":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="Expired" style="cursor:default" id="' + item.RowKey + '" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5" style="cursor:default">exp</b>';
                            else
                                article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                            break;
                        case "Awaiting Review":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="Awaiting Review" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">Rev</b>';
                            else
                                article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                            break;
                        case "Reviewed":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="Reviewed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Rev</b>';
                            else
                                article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                            break;
                        case "In Negotiation":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="In Negotiation" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">nego</b>';
                            else
                                article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                            break;
                        case "Negotiation Complete":
                            if (item.ContractStatus == 'Expired' || contractItem.Status == "Cancelled" || item.ContractStatus == 'Archived')
                                article += '<b title="Negotiation Complete" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">nego</b>';
                            else
                                article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                            break;
                    }
                    vTitle = item.DocumentName;
                    if (vTitle.length > 61) {
                        vTitle = vTitle.substring(0, 60) + '...';
                    }
                    if (item.IsActive == "No") {
                        article += vFileType + '<a data-value="' + encodeURI(item.DocumentUrl) + '" href="javascript:void(0);" title="' + item.DocumentName + '" onclick="ViewDocument(\'' + encodeURI(item.DocumentUrl) + '\')" >' + item.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New">';
                    } else {
                        if (vRawURLDoc != "") {
                            if (DocDefaultView == "WordClient") {
                                article += vFileType + '<a href="#" seqe = "' + vRawURLDoc + '" onclick="viewdocinword(\'' + vRawURLDoc + '\')" title="' + item.DocumentName + '">' + vTitle + '</a>';
                            } else {
                                article += vFileType + '<a href="javascript:void(0);" data-value="' + encodeURIComponent(item.DocumentUrl) + '"  onclick="Opendocinbrowser(this)" title="' + item.DocumentName + '">' + vTitle + '</a>';
                            }
                        } else {
                            article += vFileType + '<a href="javascript:void(0);" data-value="' + encodeURIComponent(item.DocumentUrl) + '"  onclick="Opendocinbrowser(this)" title="' + item.DocumentName + '">' + vTitle + '</a>';
                        }
                    }
                    article += '<span class="sub-text"> ' + vTime + '</span>';
                    article += '';
                    article += '';
                    if (item.IsActive != "No") {
                        article += vPrimDocIcon + vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
                    } else {
                        article += vPrimDocIcon + vDocIcon + '&nbsp';
                    }
                    if (item.IsMetadataMismatch == "Yes" && item.ActualDocID == '' && ext.toLowerCase() != 'pdf') {
                        article += '<a href="javascript:void(0);" data="' + item.ContractAndDocumentMetadata + '" onclick="javascript: openmismatched(this)"><img src="../Content/Images/icon/mismatch_icon.png"  style="cursor:pointer;" title="Mismatched Document and Contract Record Metadata." class="margin-left-5" /></a>';
                    }
                    article += '</li>';
                });
                $("#ulPinDocument").html(articleSubFolder + article);
                if (count > 10) {
                    $("#dvPinDocument").html('<a id="ShowMorePinDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMorePinDocuments()">More Document(s) </a>' +
                        '<a id="ShowLessPinDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessPinDocuments()" style="display:none;">Show less</a>');
                } else {
                    $('.ShowMorePinDocuments').css("display", "none");
                    $('#ShowMorePinDocuments').css("display", "none");
                    $('#ShowLessPinDocuments').css("display", "none");
                }
                $("#lblPinDocumentsCount").text(count);
                if (!$("#lblPinDocumentsCount").text().trim()) {
                    $("#ulPinDocument").empty();
                    $("#ulPinDocument").append('No items found.');
                }
                if (DocVersion == "No") {
                    $('li.history').hide();
                }
                $(".hideItem").click(function () {
                    if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                        $(".unpindocument").hide();
                        $(".pindocument").hide();
                        $(".primary").show();
                    }
                });
                $(".showitem").click(function () {
                    if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                        $(".unpindocument").show();
                        $(".pindocument").show();
                        $(".primary").show();
                    }
                });
                $(".primarydocument").click(function () {
                    $(".primary").hide();
                });
            } else {
                $("#pindocumentsort").css('display', 'none');
                $("#lblPinDocumentsCount").text('0');
                $("#ulPinDocument").html('No items found.');
                $("#hdnPinDocumentCount").text("No");
            }
        },
        error: function (data) {
            $("#pindocumentsort").css('display', 'none');
            $("#lblPinDocumentsCount").text('0');
            $("#ulPinDocument").html('No items found.');
            $("#hdnPinDocumentCount").text("No");
        },
    });
}

function CreateDocumentListNew(data) {
    var NotActiveStatusDocument = $.grep(data, function (n, i) {
        return (n.IsActive == "No");
    });
    var DefaultDocLength = ($("#hdnnewdocumentfeature").text() == "Yes") ? 20 : 10;
    articleDocumentMileStone = "";
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        vFinalSignature = "dropdownMenuFinalSignature";
        vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
        if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') {
            $("#dropdownMenuAmendment .signature").show();
            $("#dropdownMenuAmendmentFinal .signature").show();
        } else {
            $("#dropdownMenuAmendment .signature").hide();
            $("#dropdownMenuAmendmentFinal .signature").hide();
        }

    } else {
        $("#dropdownMenuAmendment .signature").hide();
        $("#dropdownMenuAmendmentFinal .signature").hide();
    }
    var vGetTime = new Date();
    $.ajax({
        url: '/Documents/GetTime',
        type: 'GET',
        dataType: 'json',
        cache: false,
        success: function (data) {
            var jsObject = JSON.parse(data);
            vGetTime = new Date(jsObject);
        }
    });

    var count = 0;
    var vPermission = $("#hdnPermission").val();

    var settings = {
        pattern: /\.[0-9a-z]+$/i,
        knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
        WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
    };
    var datalenght = data.length;
    //clause
    //$("#ddlTemplateAndClauses").empty();
    //$("#ddlTemplateAndClauses").append('<option value="0">--Select--</option>');
    //$("#docversion").css("display", "none");
    //$("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
    $("#ulDocument").empty();
    var vTitle = '';
    var article = '';
    var articleSubFolder = '';
    if (datalenght > 0) {
        for (var vi = 0; vi < datalenght; vi++) {
            if (data[vi].ContractArea != "") {
                docdefaultview(data[vi].ContractArea);
                break;
            }
        }
    }
    var DocDefaultView = "";
    if (thisDocumentLibrarySettings != '' && thisDocumentLibrarySettings != 'undefined' && typeof thisDocumentLibrarySettings != "undefined") {
        DocDefaultView = thisDocumentLibrarySettings.DocDefaultView;
        DocVersion = thisDocumentLibrarySettings.DocVersion;
    }
    //if (datalenght > 0) {
    //    $("#ulFolderDocumentView").css('display', '');
    //    $("#dvdocumentkeyword").css('display', '');
    //    if (datalenght > 1) {
    //        $("#documentsort").css('display', '');
    //    } else {
    //        $("#documentsort").css('display', 'none');
    //    }
    //} else {
    //    $("#documentsort").css('display', 'none');
    //    $("#ulFolderDocumentView").css('display', 'none');
    //    $("#dvdocumentkeyword").css('display', 'none');
    //}

    for (var i = 0; i < datalenght; i++) {
        var item = data[i];
        //manoj
        if (item.IsOCRDoc == "Yes" && item.DocumentName.split('.').pop().toString().toLowerCase().indexOf('tif') > -1) {
            var OldDocumentName = item.DocumentName;
            item.DocumentName = item.DocumentName.split('.').slice(0, -1).join('.') + ".pdf";
            item.DocumentUrl = item.DocumentUrl.split('.').slice(0, -1).join('.') + ".pdf"
        }
        //manoj
        var vv = moment(new Date(item.Modified));
        var vTime = vv.fromNow();
        //vTime = vv.from(vGetTime);

        count++
        if (item.IsFolder == "True") {
            articleSubFolder += '<li class=" margin-bottom-5"><b title="Folder" style="margin-left: 21px; background-color: #888; " class="status_blue details_documentstatus">Folder</b><img src="../Content/Images/icon/folder.png" style="margin-top: -5px; margin-right: 7px;"><a style="display: inline-block; margin: 3px 0px 0px 0px;" href="javascript:void(0)" id=' + item.RowKey + ' onclick="javascript:showfolderdocuments(this);">' + item.DocumentName + '</a><span class="sub-text"> ' + vTime + '</span>';
            articleSubFolder += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
            articleSubFolder += '<label id="FolderCreationMode" style="display:none;">' + item.CreationMode + '</label>';
            articleSubFolder += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
            if (contractItem.Status != "Expired" && contractItem.Status != "Cancelled" && contractItem.Status != "Replaced" && contractItem.Status != "Archived" && contractItem.Permission != "View" && contractItem.Permission != '' && contractItem.Permission != null) {
                articleSubFolder += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuFolder margin-left-5">';
            }
            articleSubFolder += '</li>';
        } else {
            var vClass = "openmenuDocumentFinal";
            var vDocIcon = ""; // '<img src="../Content/Images/Doc_draft.png" class="doc_type margin-left-5" alt="Draft Document" title="Draft Document" />';
            var vPrimDocIcon = '';
            if (item.IsFinalized == "Yes") {
                vClass = "openmenuDocument";
                vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized Document" title="Finalized Document" />';
                if (item.CreationMode == "Amendment") {
                    vClass = "openmenuAmendmentDocumentFinal";
                    vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                }
            } else if (item.CreationMode == "Amendment") {
                vClass = "openmenuAmendmentDocument";
                vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
            }
            //manoj
            if (item.IsPined == "Yes" && item.IsPrimary != "Yes") {
                vClass += "UnPin";
            }
            if (item.IsPrimary == "Yes") {
                vPrimDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                vClass += "UnPin" + " hideItem primarydocument";
            } else {
                vClass += " showitem";
            }
            // Bug (eO37060, eO37244)
            if (item.DocumentStatus == "Expired" || contractItem.IsDraft == "Yes" || contractItem.Status == "Expired" ||
                contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                vClass = "openmenuExpiredDocument";
            }
            //manoj
            vURLDoc = encodeURI(item.DocumentUrl);
            var ext = vURLDoc.match(settings.pattern);
            var vFileType = '<dd class="file-icon none"></dd>';
            if (ext != null) {
                if (ext.length > 0) {
                    ext = ext[0].slice(1);
                }
                if (DocDefaultView == "WordClient") {
                    if (vURLDoc.toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                        if (jQuery.inArray(ext, settings.WopiFrameFileTypes) > -1) {
                            vRawURLDoc = encodeURIComponent(item.DocumentUrl);
                            vURLDoc = localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + vRawURLDoc + "&action=default";
                        } else {
                            vRawURLDoc = "";
                        }
                    }
                }
                if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                    vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                }
            }

            if (count <= DefaultDocLength)
                article += '<li class=" margin-bottom-5" active=' + item.IsActive + '>';
            else
                article += '<li class="ShowMoreDocuments margin-bottom-5" style="display:none;">';

            article += '<label id="FolderCreationMode" style="display:none;">' + item.CreationMode + '</label>';
            article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
            article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
            article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
            article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
            article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
            article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
            article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
            var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
            article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';

            if (item.CreationMode == "Amendment") {
                article += '<label id="AmendmentID" style="display:none;">' + item.AmendmentID + '</label>';
            }
            if (item.IsActive != 'No') {
                article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" class="Contribute" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';
            } else {
                article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" class="Contribute" style="visibility:hidden;" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';
            }

            switch (item.DocumentStatus) {
                case "New":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="New" style="cursor:default" id="' + item.RowKey + '" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5" style="cursor:default">new</b>';
                    else
                        article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                    break;
                case "Ready for Signature":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Ready for Signature" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">sign</b>';
                    else
                        article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                    break;
                case "Awaiting Signatures":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Awaiting Signatures" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">sign</b>';
                    else
                        article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                    break;
                case "Active":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Active" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">actv</b>';
                    else
                        article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                    break;
                case "Signed":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Signed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Sign</b>';
                    else
                        article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                    break;
                case "Expired":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Expired" style="cursor:default" id="' + item.RowKey + '" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5" style="cursor:default">exp</b>';
                    else
                        article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                    break;
                case "Awaiting Review":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Awaiting Review" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">Rev</b>';
                    else
                        article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                    break;
                case "Reviewed":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Reviewed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Rev</b>';
                    else
                        article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                    break;
                case "In Negotiation":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="In Negotiation" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">nego</b>';
                    else
                        article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                    break;
                case "Negotiation Complete":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute'))
                        article += '<b title="Negotiation Complete" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">nego</b>';
                    else
                        article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                    break;
            }
            vTitle = item.DocumentName;
            if (vTitle.length > 61) {
                vTitle = vTitle.substring(0, 60) + '...';
            }
            if (item.IsActive == "No") {
                if (item.CreationMode == "Template") {
                    article += vFileType + '<a data-value="' + encodeURI(item.DocumentUrl) + '" href="javascript:void(0);" title="' + item.DocumentName + '" onclick="ViewDocument(\'' + encodeURI(item.DocumentUrl) + '\')" style="pointer-events: none;" >' + item.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New">';
                } else {
                    article += vFileType + '<a data-value="' + encodeURI(item.DocumentUrl) + '" href="javascript:void(0);" title="' + item.DocumentName + '" onclick="ViewDocument(\'' + encodeURI(item.DocumentUrl) + '\')" >' + item.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New">';
                }
            } else {
                if (vRawURLDoc != "") {
                    if (DocDefaultView == "WordClient") {
                        article += vFileType + '<a href="#" seqe = "' + vRawURLDoc + '" onclick="viewdocinword(\'' + vRawURLDoc + '\')" title="' + item.DocumentName + '">' + vTitle + '</a>';
                    } else {
                        article += vFileType + '<a href="javascript:void(0);" data-value="' + encodeURIComponent(item.DocumentUrl) + '"   onclick="Opendocinbrowser(this)"  title="' + item.DocumentName + '">' + vTitle + '</a>';
                    }
                } else {
                    article += vFileType + '<a href="javascript:void(0);" data-value="' + encodeURIComponent(item.DocumentUrl) + '"  onclick="Opendocinbrowser(this)"  title="' + item.DocumentName + '">' + vTitle + '</a>';
                }
            }

            article += '<span class="sub-text"> ' + vTime + '</span>';
            article += '';
            article += '';
            if (item.IsActive != "No") {
                article += vPrimDocIcon + vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
            } else {
                article += vPrimDocIcon + vDocIcon + '&nbsp';
            }
            if (item.IsMetadataMismatch == "Yes" && item.ActualDocID == '' && ext.toLowerCase() != 'pdf') {
                article += '<a href="javascript:void(0);" data="' + item.ContractAndDocumentMetadata + '" onclick="javascript: openmismatched(this)"><img src="../Content/Images/icon/mismatch_icon.png"  style="cursor:pointer;" title="Mismatched Document and Contract Record Metadata." class="margin-left-5" /></a>';
            }
            if (documentview != 'folder' && documentview != "" && documentview != null) {
                var the_arr = item.DocumentUrl.replace(localStorage.SPHostUrl + "/", "").split('/');
                the_arr.pop();
                var changedUrl = the_arr.join('/');
                article += '<div class="documenturlclass" style="margin-left:0px"><label title="' + changedUrl + '"><img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;">' + changedUrl + '</label></div>'
            }
            article += '</li>';
            DocumentCount++;

            articleDocMiletstone = BindDocumentMilestones(item);
            var doclist = '<option value="' + item.RowKey + '">' + item.DocumentName + '</option>';
            $("#ddlDocumentList").append(doclist);
            articleDocumentMileStone += articleDocMiletstone;
            //BindDocumentAlert(item);
            //Clause
            //$("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
        }
    }
    if (documentview != 'folder' && documentview != "" && documentview != null) {
        $("#ulDocument").html(article);
    } else {
        $("#ulDocument").html(articleSubFolder + article);
    }

    //manoj
    //For display inprogress status
    if (contractItem.IsActive == "" || contractItem.IsActive == "Yes") {
        if (NotActiveStatusDocument.length > 0) {
            $("#general-notification").css("visibility", "visible");
            $("#general-notification").html("Document uploaded successfully. All the options to perform action on document will be enabled once it is ready for use.");
            clearTimeout(cleartimevalue);
            cleartimevalue = setTimeout(refreshdocuemnt, 10000);

        } else {
            $("#general-notification").css("visibility", "hidden");
        }
    }
    //For display inprogress status
    //manoj

    //manoj
    if (documentview != 'folder' && documentview != "" && documentview != null) {
        $("#ulDocument").addClass('ulmarginclass');
    } else {
        $("#ulDocument").removeClass('ulmarginclass');
    }
    //manoj
    if ($("#ulDocument")[0].childNodes.length > 1) {
        $("#documentsort").css('display', '');
    } else {
        $("#documentsort").css('display', 'none');
    }
    if (count > DefaultDocLength) {
        $("#dvDocument").html('<a id="ShowMoreDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreDocuments()">More Document(s) </a>' +
            '<a id="ShowLessDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessDocuments()" style="display:none;">Show less</a>');
    } else {
        $('.ShowMoreDocuments').css("display", "none");
        $('#ShowMoreDocuments').css("display", "none");
        $('#ShowLessDocuments').css("display", "none");
    }

    $("#lblDocumentsCount").text(count);

    //if ($("#showAll").text().indexOf("/") >= 0) {
    //    $('.ShowMoreDocuments').css("display", "none");
    //    $('#ShowMoreDocuments').css("display", "none");
    //    $('#ShowLessDocuments').css("display", "none");
    //}
    if (!$("#lblDocumentsCount").text().trim()) {
        $("#ulDocument").empty();
        $("#ulDocument").append('No items found.');
    }
    if (DocVersion == "No") {
        $('li.history').hide();
    }
    $(".openmenuDocument").contextMenu({
        menu: vFinalSignature,
        leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuDocumentFinal").contextMenu({
        menu: vMarkFinalSignature,
        leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuExpiredDocument").contextMenu({
        menu: "dropdownExpiredDocument",
        leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    }); // Bug (eO37060)
    $(".openmenuAmendmentDocument").contextMenu({
        menu: "dropdownMenuAmendment",
        leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    $(".openmenuAmendmentDocumentFinal").contextMenu({
        menu: "dropdownMenuAmendmentFinal",
        leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //manoj
    //Un Pin Document Document
    $(".openmenuDocumentUnPin").contextMenu({
        menu: vFinalSignature + "UnPin",
        leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuDocumentFinalUnPin").contextMenu({
        menu: vMarkFinalSignature + "UnPin",
        leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuAmendmentDocumentUnPin").contextMenu({
        menu: "dropdownMenuAmendmentUnPin",
        leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    $(".openmenuAmendmentDocumentFinalUnPin").contextMenu({
        menu: "dropdownMenuAmendmentFinalUnPin",
        leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //manoj
    $(".openmenuFolder").contextMenu({
        menu: 'myMenuFolder',
        leftButton: true
    }, function (action, el, pos) {
        contextMenuWorkFolder(action, el.parent("li"), pos);
    });
    if ($("#hdnnewdocumentfeature").text() != "Yes") {
        $(".pinhide").css("display", "none");
    } else {
        if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $('.pinhide').css("display", "");
        } else {
            $('.pinhide').css("display", "none");
        }
        //manoj
        $(".hideItem").click(function () {
            if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                $(".unpindocument").hide();
                $(".pindocument").hide();
                $(".primary").show();
            }
        })
        $(".showitem").click(function () {
            if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                $(".unpindocument").show();
                $(".pindocument").show();
                $(".primary").show();
            }
        })
        $(".primarydocument").click(function () {
            //if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute' && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $(".primary").hide();
            //}
        })
        //manoj
    }
    //manoj
    if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
        if (contractItem.IsDraft != 'Yes')
            $('.Contribute').css("display", "");

        //manoj
        if (documentview != 'folder' && documentview != "" && documentview != null) {
            $("#btnaddnewsubfolder").css("display", "none")
        }
        //manoj
    } else if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') {
        $('.StatusPermission').css("display", "");
    } else {
        $('.Contribute').css("display", "none");
    }

    if (((contractItem.ContractDocumentsUrl != null && contractItem.ContractDocumentsUrl != "") || data.length > 0) && (contractItem.IsDraft != 'Yes' || (contractItem.IsDraft == 'Yes' && contractItem.CreatedBy == localStorage.UserName))) {
        if ((documentview == 'folder' || documentview == "" || documentview == null) && ($("#hdnPermission").val() == 'Manage' || $("#hdnPermission").val() == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $("#btnaddnewsubfolder").css('display', '');
        } else {
            $("#btnaddnewsubfolder").css('display', 'none');
        }
    } else {
        $("#btnaddnewsubfolder").css('display', 'none');
    }
    //manoj

    if (vAccFeat.length > 0) {
        if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') {
            $("#dropdownMenuAmendment .signature").show();
            $("#dropdownMenuAmendmentFinal .signature").show();
        } else {
            $("#dropdownMenuAmendment .signature").hide();
            $("#dropdownMenuAmendmentFinal .signature").hide();
        }
    } else {
        $("#dropdownMenuAmendment li.signature.Contribute").hide();
        $("#dropdownMenuAmendmentFinal li.signature.Contribute").hide();
    }

    $("#contractLogs").empty();
    TermsAndClauseDocument(vContractID);

    pendingStarted = false;
    $("#tblContractSettingMetadata").empty();
    GetContractPendingAction(false, 'Documents');
    ApplyPermissionToMenu($("#hdnPermission").val());
    if (((contractItem.ContractDocumentsUrl != null && contractItem.ContractDocumentsUrl != "") || data.length > 0) && (contractItem.IsDraft != 'Yes' || (contractItem.IsDraft == 'Yes' && contractItem.CreatedBy == localStorage.UserName))) {
        if ((documentview == 'folder' || documentview == "" || documentview == null) && ($("#hdnPermission").val() == 'Manage' || $("#hdnPermission").val() == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $("#btnaddnewsubfolder").css('display', '');
        } else {
            $("#btnaddnewsubfolder").css('display', 'none');
        }
    } else {
        $("#btnaddnewsubfolder").css('display', 'none');
    }
}

function DisplayDocument(objvalue) {
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    selectedamnddoc = false;
    selectedamnddocname = [];
    $("#documentMultiActions").css('display', 'none');
    $("#hdnShowAllTextValue").html('');
    $("#hdnFolderDocumentView").text('');
    PrvFolderselection = '';
    $(".tablinks").removeClass('active');
    documentview = objvalue;
    if (objvalue == 'folder' || documentview == "" || documentview == null) {
        $("#listfolderdocumentview").addClass("active");
        //$("#btnaddnewsubfolder").css('display', '');
        if ((documentview == 'folder' || documentview == "" || documentview == null) && ($("#hdnPermission").val() == 'Manage' || $("#hdnPermission").val() == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $("#btnaddnewsubfolder").css('display', '');
        } else {
            $("#btnaddnewsubfolder").css('display', 'none');
        }
        //ApplyPermissionToMenu($("#hdnPermission").val());
        $("#showAll").empty();
        $("#showAll").css('display', '');
        BindDocument(vContractID);
    } else {
        $("#listdocumentview").addClass("active");
        $("#btnaddnewsubfolder").css('display', 'none');
        if ($("#showAll").text().indexOf("/") >= 0) {
            bindfolderupload($("#showAll").find("a:first")[0])
        } else {
            $("#showAll").css('display', 'none');
        }
        $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + vContractID,
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            success: function (documentcollection) {
                var ParentFolderDatadata = $.grep(documentcollection, function (nparent, iparent) {
                    return (nparent.ParentFolderID == "" || nparent.ParentFolderID == null);
                });
                if (ParentFolderDatadata.length > 0) {
                    contractparentfolderid = ParentFolderDatadata.RowKey;
                } else {
                    contractparentfolderid = "";
                }
                var data = $.grep(documentcollection, function (n, i) {
                    return (n.IsFolder != "Yes");
                });
                if (data.length == 0) {
                    contractparentfolderid = "";
                    $("#lblDocumentsCount").text('0');
                    $("#documentsort").css('display', 'none');
                    $("#ulDocument").html('No items found.');
                } else {
                    $('#ulDocument').empty();
                    CreateDocumentListNew(data);
                    GetContractActivities(vContractID);
                }
            },
            error: function (data) {
                $("#lblDocumentsCount").text('0');
                $("#ulDocument").html('No items found.');
                $("#documentsort").css('display', 'none');
            },
            complete: function () { }
        });
    }
}

function GetContractActivities(contractid, loadaction) {
    $("#dvContractWorkflows").empty();
    workflowurltoshowDOCUMENT = "";
    workflowurltoshowCONTRACT = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + contractid + '/activity',
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            ArrayofAmendmentWorkflows = [];
            ArrayofDocumentWorkflows = [];
            $("#dvContractWorkflows").empty();
            var datalenght = data.length;
            $("#lblActivityCount").text(data.length);
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var RowKey = item.RowKey;
                var WorkflowTitle = item.WorkflowTitle;
                var Participants = item.Participants;
                var Status = item.Status;
                var ActivityType = item.ActivityType;
                var CreatedBy = item.CreatedBy;

                var imgCorn = '<img src="../Content/Images/act-approval.png">';
                var imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                var vWorkflowURL = '<a class="link-head" href="javascript:void(0);">' + WorkflowTitle + '</a>';
                var vWorkflowIconURL = '';
                if (ActivityType == "Contract Approval") {
                    imgCorn = '<img src="../Content/Images/act-approval.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                    if (Status == "In Progress" || Status == "Stopped") {
                        workflowurltoshowCONTRACT = '/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey;
                    }
                } else if (ActivityType == "Renewal Approval") {
                    imgCorn = '<img src="../Content/Images/act-approval.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                } else if (ActivityType == "Amendment Approval") {
                    var person = {
                        id: RowKey,
                        AmendmentID: item.AmendmentId
                    };
                    if (Status == "In Progress")
                        ArrayofAmendmentWorkflows.push(person);
                    imgCorn = '<img src="../Content/Images/act-approval.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                } else if (ActivityType == "Document Review") {
                    var person = {
                        id: RowKey,
                        DocumentID: item.DocumentId
                    };
                    if (Status == "In Progress")
                        ArrayofDocumentWorkflows.push(person);
                    imgCorn = '<img src="../Content/Images/act-reviewl.png">';
                    imgCent = '<img src="../Content/Images/act-doc.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                    if (Status == "In Progress" || Status == "Stopped") {
                        workflowurltoshowDOCUMENT = '/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey;
                    }
                } else if (ActivityType == "Contract Share") {
                    imgCorn = '<img src="../Content/Images/act-share-as-link.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="javascript:void(0);" onclick="ShowWorkflowDetail(\'' + ActivityType + '\',\'' + RowKey + '\')" style="display:inline !important;">' + WorkflowTitle.replace("External Review", "External Share") + '</a>';
                    vWorkflowIconURL = '<p id="ShareID" style="display:none;">' + RowKey + '</p><p id="ShareType" style="display:none;">Contract</p>';
                    if (Status == "In Progress" && $("#hdnPermission").val() != 'View')
                        vWorkflowIconURL += ' <img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuShare Contribute"/>';
                } else if (ActivityType == "Document Share") {
                    imgCorn = '<img src="../Content/Images/act-share-as-link.png">';
                    imgCent = '<img src="../Content/Images/act-doc.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="javascript:void(0);" onclick="ShowWorkflowDetail(\'' + ActivityType + '\',\'' + RowKey + '\')" style="display:inline !important;">' + WorkflowTitle.replace("External Review", "External Share") + '</a>';
                    vWorkflowIconURL = '<p id="ShareID" style="display:none;">' + RowKey + '</p><p id="ShareType" style="display:none;">Document</p>';
                    if (Status == "In Progress" && $("#hdnPermission").val() != 'View')
                        vWorkflowIconURL += ' <img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuShare Contribute"/>';
                } else if (ActivityType == "Document Sign") {
                    imgCorn = '<img src="../Content/Images/act-signature.png">';
                    imgCent = '<img src="../Content/Images/act-doc.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="javascript:void(0);" onclick="ShowDocSignatureDetail(\'' + RowKey + '\')" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "1" && n.Status == "ON");
                    });
                    if (vAccFeat.length > 0 && Status == "In Progress" && CreatedBy == localStorage.UserName) {
                        var vConfig = vAccFeat[0].Configuration;
                        var vProvider = $(vConfig).find('Provider').text();
                        if (vProvider == "Right Signature")
                            vWorkflowURL += '';
                        else if (vProvider == "Echo Sign")
                            vWorkflowURL += '';
                        else if (vProvider == "Docu Sign")
                            vWorkflowURL += ' <a href="javascript:void(0);" onclick="StopDocumentSignature(\'' + RowKey + '\')" title="Cancel Signature Process"><img src="../Content/Images/cancel_icon.png"></a>';
                    }

                }

                var article = '<div class="col12 info-box-activity "><div class="row-group">';
                article += '<div class="col10 no-pad ">';
                article += '<div class="row-group">';
                article += '<div class="col1 no-pad activity-type-box m2">';
                article += imgCorn;
                article += '</div>';
                article += '<div class="col1 no-pad pad-top text-left activity-file-box m2">';
                article += imgCent;
                article += '</div>';
                article += '<div class="col10 activity-title-box m8">';

                article += vWorkflowURL;
                article += vWorkflowIconURL;

                article += '<div class="col12 no-pad pad-top">';
                if (ActivityType == "Document Share") {
                    if (item.ReadyToShare == "Yes" && item.CreatedBy == localStorage.UserName) {
                        article += '<p class="sub-text-head">Participants : <span class="sub-text">' + Participants + '</span></p>';
                        article += '<p class="sub-text-head">New version of this document is available.<a href="javascript:void(0);" onclick="ReplaceDocumentShareNew(\'' + RowKey + '\')" style="color:#44a6d;text-decoration: underline;font-weight: bold;">Share</a> new version link with users.</p>';
                    } else {
                        article += '<p class="sub-text-head">Participants : <span class="sub-text">' + Participants + '</span></p>';
                    }
                } else {
                    article += '<p class="sub-text-head">Participants : <span class="sub-text">' + Participants + '</span></p>';
                }
                article += '</div>';
                article += '</div>';
                article += '</div>';
                article += '</div>';
                article += '<div class="col2 no-pad text-right pad-top ">';
                article += '<a class="close1" href="javascript:void(0);" onclick="ShowWorkflowDetail(\'' + ActivityType + '\',\'' + RowKey + '\')"><img id="Img_' + RowKey + '" src="../Content/Images/e-open.png" title="Expand"></a>';
                article += '<div class="col12 text-right act-doc-status">';

                if (Status == "Complete" || Status == "Completed") {
                    article += '<a class="label label-grn"><span class="m-off"> Completed </span> <span class="m-on"><img src="../Content/Images/wit-completed-icon.png"></span></a>';
                } else if (Status == "In Progress") {
                    article += '<a class="label label-org"><span class="m-off">' + Status + '</span> <span class="m-on"><img src="../Content/Images/wit-in-progress-icon.png"></span></a>';
                } else if (Status == "Cancelled" || Status == "Declined") {
                    article += '<a class="label label-red"><span class="m-off">' + Status + '</span> <span class="m-on"><img src="../Content/Images/wit-cancel-icon.png"></span></a>';
                } else if (Status == "Stopped") {
                    article += '<a class="label label-red"><span class="m-off">' + Status + '</span> <span class="m-on"><img src="../Content/Images/wit-stopl-icon.png"></span></a>';
                } else {
                    article += '<a class="label label-org"><span class="m-off">' + Status + '</span></a>';
                }
                article += '</div>';
                article += '</div>';
                article += '<div class="col12 m12 activity-title-box m8">';
                article += '<div id="Det_' + RowKey + '" class="row-group activity-details-body" style="display:none">';

                article += '</div>';
                article += '</div>';
                article += '</div></div>';
                $("#dvContractWorkflows").append(article);
            }
            //manoj
            if (typeof (loadaction) != "undefined" && loadaction != null && loadaction != "") {
                $("#loadingPage").fadeOut();
            }
            //manoj
            $(".openmenuShare").contextMenu({
                menu: 'dropdownMenuShare',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuShare(action, el.parent("div"), pos);
            });
            if (contractItem.Status == "Cancelled" || contractItem.Status == "Expired" || contractItem.Status == "Archived") {
                $(".Contribute").css('display', 'none');
                $('.status').css('display', '');
                $("#dvContractWorkflows a.link-head").css({
                    "pointer-events": "none",
                    "cursor": "default"
                });
                $(".add-btn").css('display', 'none');
                ApplyPermissionToMenu($("#hdnPermission").val());
            }
            $('.disablelink').removeClass('disablelink');

        },
        error: function (data) {
            //manoj
            if (typeof (loadaction) != "undefined" && loadaction != null && loadaction != "") {
                $("#loadingPage").fadeOut();
            }
            //manoj
            $("#lblActivityCount").text("0");
            $('.disablelink').removeClass('disablelink');
        }
    });
}

function TermsAndClauseDocument(objContractIDvalue) {
    $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
    $("#docversion").css("display", "none");
    $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + vAccountID + '/documents?contractid=' + objContractIDvalue,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': vAPIKey
        },
        success: function (filescount) {
            if (filescount == null) {
                $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
                $("#docversion").css("display", "none");
                $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
            } else {
                $("#ddlTemplateAndClauses").html('<option value="0">--Select--</option>');
                $(filescount).each(function (i, item) {
                    if (item != null) {
                        //if (item.CreationMode == "Template" && item.IsFolder != "True") {
                        //    $("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
                        //}
                        if (item.IsFolder != "True") {
                            $("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
                        }
                    }
                });
            }
        },
        error: function (filescount) {
            $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
            $("#docversion").css("display", "none");
            $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
        }
    });
}

function ApplyPermissionToMenu(vPermission) {
    var stage = getParameterByName("Stage");

    if (stage == "pipeline") {
        if (contractItem.Status == "Cancelled") {
            $('.DeleteRecord').css("display", "");
        } else {
            $('.DeleteRecord').css("display", "none");
        }
    } else {
        if (contractItem.Status == "Archived") {
            $('.DeleteRecord').css("display", "");
        } else {
            $('.DeleteRecord').css("display", "none");
        }
    }

    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
        $('.Manage').css("display", "none");
        $('.Contribute').css("display", "none");
        if (vPermission == 'Contribute') {
            $('.StatusPermission').css("display", "");
            $('#DeleteContract').css("display", "none");
        } else if (vPermission == 'View' || vPermission == '' || vPermission == null) {
            $('.Manage').css("display", "none");
            $('.Contribute').css("display", "none");
            $('#DeleteContract').css("display", "none");
            $('#liContractstatus').css("display", "none");
        } else if (vPermission == 'Manage') {
            $('.StatusPermission').css("display", "");
        }
    } else {
        if (vPermission == 'Contribute') {
            $('.Manage').css("display", "none");
            $('#DeleteContract').css("display", "none");
        } else if (vPermission == 'Manage') {
            $('.Manage').css("display", "");
            //manoj

            //manoj
            if (typeof (contractItem.FinalizedBy) != "undefined" && contractItem.FinalizedBy != null && contractItem.FinalizedBy != "") {
                $("#lidropdownMenuRenewalTerm").css("display", "");
            } else {
                $("#lidropdownMenuRenewalTerm").css("display", "none");
            }
            //manoj
            if (documentview == null || documentview == "" || documentview == 'folder') {
                $('.Contribute').css("display", "");
            } else {
                $('.Contribute:not(#btnaddnewsubfolder)').css("display", "");
            }
            //manoj
        } else if (vPermission == 'View' || vPermission == '') {
            $('.Manage').css("display", "none");
            $('.Contribute').css("display", "none");
            $('#DeleteContract').css("display", "none");
            $('#liContractstatus').css("display", "none");
        }
    }
    if (!(contractItem.Status == "Archived")) {
        $('.DeleteRecord').css("display", "none");
    }

    if ((contractItem.IsDraft == "Yes" && contractItem.Permission == 'Manage' && contractItem.CreatedBy == localStorage.UserName)) {
        $('.DeleteRecord').css("display", "");
    }
    if (contractItem.IsDraft == "Yes") {
        $('.drafthide').css("display", "none");
        $(".draft").css('display', 'none');
    }


    if (contractItem.ContractDocumentsUrl != null && contractItem.ContractDocumentsUrl != "" && (contractItem.IsDraft != 'Yes' || (contractItem.IsDraft == 'Yes' && contractItem.CreatedBy == localStorage.UserName))) {
        if ((documentview == 'folder' || documentview == "" || documentview == null) && (vPermission == 'Manage' || vPermission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $("#btnaddnewsubfolder").css('display', '');
        } else {
            $("#btnaddnewsubfolder").css('display', 'none');
        }
    } else {
        $("#btnaddnewsubfolder").css('display', 'none');
    }

}

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

function docdefaultview(doccontractarea) {
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "14" && n.Status == "ON");
    });
    var dURL = "";
    //multiple document library
    if (vDocLibFeat.length > 0) {
        dURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=' + encodeURIComponent(doccontractarea)
    } else {
        dURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=Business Area'
    }

    $.ajax({
        url: dURL,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        async: false,
        success: function (data) {
            thisDocumentLibrarySettings = data;
        },
        error: function (data) {

        }
    });
}

function BindDataContractDropdownSettings(documenttypes) {
    var vMilestoneType = '';
    $(documenttypes.MilestoneTypes).find('MilestoneType').each(function (i, item) {
        vMilestoneType += "<option value='" + item.innerHTML + "'>" + item.innerHTML + "</option>";
    });
    $("#ddlMilestoneType").append(vMilestoneType);
    $("#ddlMilestoneTypeNew").append(vMilestoneType);
    SortDropdownList('ddlMilestoneTypeNew');

    var vAmendmentType = '';
    $(documenttypes.AmendmentTypes).find('AmendmentType').each(function (i, item) {
        vAmendmentType += "<option value='" + item.innerHTML + "'>" + item.innerHTML + "</option>";
    });
    $("#ddlAmendmentType").append(vAmendmentType);
    SortDropdownList('ddlAmendmentType')

    var vObligationType = '';
    $(documenttypes.ObligationTypes).find('ObligationType').each(function (i, item) {
        vObligationType += "<option value='" + item.innerHTML + "'>" + item.innerHTML + "</option>";
    });
    $("#ddlObligationType").append(vObligationType);
    $("#ddlObligationTypeNew").append(vObligationType);
    SortDropdownList('ddlObligationTypeNew');

    var vUnitType = '';
    $(documenttypes.UnitTypes).find('UnitType').each(function (i, item) {
        vUnitType += "<option value='" + item.innerHTML + "'>" + item.innerHTML + "</option>";
    });
    $("#ddlObligationCatalogUnits").append(vUnitType);
    $("#ddlObligationCatalogUnitsInline").append(vUnitType);
    $("#ddlObligationCatalogUnitsEdit").append(vUnitType);
    $("#ddlProductUnits").append(vUnitType);
    $("#ddlObligationCatalogUnitsNew").append(vUnitType);
    $("#ddlObligationCatalogUnitsNewEdit").append(vUnitType);

    var vCounterpartyType = '';
    $(documenttypes.CounterpartyTypes).find('CounterpartyType').each(function (i, item) {
        vCounterpartyType += "<option value='" + item.innerHTML + "'>" + item.innerHTML + "</option>";
    });
    $("#ddlCounterpartyType").append(vCounterpartyType);
    $("#ddlCounterpartyTypeadd").append(vCounterpartyType);
    SortDropdownList('ddlCounterpartyTypeadd');

    if (contractItem.TransactionType == "Legal/General Agreement") {
        if ($('#ddlAmendmentType option[value="Change of Contract Value"]').length != -1)
            $('#ddlAmendmentType option[value="Change of Contract Value"]').remove();
        $("#chkContractValue").attr("disabled", "disabled");
        $("#chkContractValue").attr("style", "cursor:not-allowed;");
    } else {
        if ($('#ddlAmendmentType option[value="Change of Contract Value"]').length != 1)
            $("#ddlAmendmentType").append('<option value="Change of Contract Value">Change of Contract Value</option>');
        $("#chkContractValue").removeAttr('disabled');
        $("#chkContractValue").attr("style", "cursor:pointer;");
    }

    if (contractItem.EndDate == null) {
        if ($('#ddlAmendmentType option[value="Change to Terms"]').length != -1)
            $("#ddlAmendmentType option[value='Change to Terms']").remove();
        $("#chkContractValidity").attr("disabled", "disabled");
        $("#chkContractValidity").attr("style", "cursor:not-allowed;");
    } else {
        if ($('#ddlAmendmentType option[value="Change to Terms"]').length != 1)
            $("#ddlAmendmentType").append("<option value='Change to Terms'>Change to Terms</option>")
        $("#chkContractValidity").removeAttr('disabled');
        $("#chkContractValidity").attr("style", "cursor:pointer;");
    }

    //var IsSystem = false;
    //if (documenttypes.CounterpartyRelationshipScope.trim() == "System Level") {
    //    IsSystem = true;
    //}
    //GetCounterparty(IsSystem);
}
//-------------------------------------Document Ends-----------------------------------------------//

function SortDropdownList(id) {
    var select = $('#' + id);
    select.html(select.find('option').sort(function (x, y) {
        return $(x).text() > $(y).text() ? 1 : -1;
    }));
}

function GetCounterparty(IsSystem) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (Counterparties) {
            var control = "";
            $.each(Counterparties, function (i, item) {
                if (item.Status == "Active") {
                    if (IsSystem) {
                        control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                    } else {
                        if (typeof item.BusinessAreasPath != 'undefined' && item.BusinessAreasPath != null && item.BusinessAreasPath != "") {
                            if (item.IsGlobal == "No") {
                                if (businessAreaPath != "") {
                                    var isRelCounterpartyFilterAdd = false;
                                    $.each(item.BusinessAreasPath.split(";"), function () {
                                        if (businessAreaPath == $.trim(this)) {
                                            isRelCounterpartyFilterAdd = true;
                                        }
                                    });
                                    if (isRelCounterpartyFilterAdd) {
                                        control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                                    }
                                }
                            } else {
                                control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                            }
                        } else {
                            control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                        }
                    }
                }
            })
            $("#ddlRelConFilterCounterparty").html(control);
            $("#ddlRelConFilterCounterparty").chosen().trigger("chosen:updated");
        },
        error: function (Counterparties) { }
    });
}

function GetValuesAndAutoPopulate(controlname, values) {
    var multiarr = [];
    var res = values != null ? values.split(";") : [];
    var reslength = res.length;
    var resValue = "";
    for (var i = 0; i < reslength; i++) {
        //   multiarr.push(res[i].trim());
        resValue = res[i].trim();
        if (resValue != "") {
            if ($('#' + controlname + ' option[value="' + resValue + '"]').length > 0 && multiarr.indexOf(resValue) == -1)
                multiarr.push(resValue);
        }
    }
    //manoj
    if ($('.ContractRoleType#' + controlname).length > 0) {
        ChosenOrder.setSelectionOrder($("." + controlname + '#' + controlname), multiarr, true);
        ChosenOrder.setSelectionOrder($('.ContractRoleType#' + controlname), multiarr, true);
    }
    //manoj
    ChosenOrder.setSelectionOrder($('#' + controlname), multiarr, true);
}

//$('#addObligationNewItemPopup').click(function () {
//    $('#addEditObligationNew').dialog('widget').find('.ui-dialog-buttonpane .ui-button:button:contains("Save") .pop_up_Content_Green ').html("Add");
//    $("input[type=radio]").attr('disabled', false);
//    $("#ulObliCompletedate").css('display', 'none');
//    $("#dtObligationNewCompletedDate").val('');
//    clearObligationFormDataNew();
//    listObligationNewData = "";
//    $("#liObligationRecurrence").css('display', '');
//    $("#hdnObligationUniqueId").text('');
//    $("#hdnObligationRowKey").text('');
//    $('#hdnProductUpdates').text('');
//    $("#PerformedPartySelf").css("display", "inline");
//    $("#PerformedPartyCounterparty").css("display", "inline");
//    vObligationTextEditRecurrence = "";
//    var string1 = "";
//    var string2 = "";
//    var strCompanyProfile = "";
//    var strCounterpartynew = "";
//    var strEndDate = "";
//    $('#txtOccurrenceCount').val("12");
//    $('#NoObligationFinantials').css('display', '');
//    $('#NoObligationCatalog').css('display', '');
//    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
//        strEndDate = new Date(contractItem.EndDate);
//        listObligationNewEndDate = strEndDate;
//        $('#ObligationNewOcurrenceEndDate').text("");
//        var ONewEndDate = "";
//        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
//            if (getTimeZone().indexOf('+') > -1)
//                ONewEndDate = moment(new Date(listObligationNewEndDate)).format('MM/DD/YYYY');
//            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
//                ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format('MM/DD/YYYY');
//        } else {
//            if (getTimeZone().indexOf('+') > -1)
//                ONewEndDate = moment(new Date(listObligationNewEndDate)).format(localStorage.AppDateFormat);
//            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
//                ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format(localStorage.AppDateFormat);
//        }
//        $('#ObligationNewOcurrenceEndDate').text(" (" + ONewEndDate + ")");
//        $("#rdObligationNewEndOccurence").prop("checked", true);
//    } else {
//        listObligationNewEndDate = "Not Available";
//        $('#ObligationNewOcurrenceEndDate').text("");
//        $('#ObligationNewOcurrenceEndDate').text(" (" + listObligationNewEndDate + ")");
//        $("#rdObligationNewEndOccurence").attr('disabled', true);
//        $('#rdObligationNewEndOccurence').removeAttr('checked');
//        $("#rdObligationNewEndOccurenceUser").prop("checked", true);
//        userFlagObli = false;
//    }
//    $("#divObligationOcurrenceWeekly").css('display', 'none');
//    $("#divObligationOcurrenceMonthly").css('display', 'none');
//    $("#dvobligationOcurrenceEnd").css('display', 'none');
//    $("#divOcurrenceSummary").css('display', 'none');
//    document.getElementById("ddlObligationOccurencess").disabled = true;
//    if ($("#lblCompanyProfile").text() == null || $("#lblCompanyProfile").text() == "") {
//        strCompanyProfile = "Not Available"
//    } else {
//        strCompanyProfile = $("#lblCompanyProfile").text();
//    }
//    if ($("#lblCounterparty").text() == null || $("#lblCounterparty").text() == "") {
//        strCounterpartynew = "Not Available";
//        document.getElementById("rdObligationNewPerformedPartyCP").disabled = true;
//    } else {
//        strCounterpartynew = $("#lblCounterparty").text();
//        document.getElementById("rdObligationNewPerformedPartyCP").disabled = false;
//    }
//    string1 = "My Company" + " " + "(" + strCompanyProfile + ")";
//    string2 = "Counterparty" + " " + "(" + strCounterpartynew + ")";
//    $("#PerformedPartySelf").text(string1);
//    $("#PerformedPartyCounterparty").text(string2);
//    $("#lblCTitleObligationNew").text($("#lblContractTitle").text());
//    $(".validelement").each(function (index, element) {
//        $(element).removeClass("error");
//        $("#errormsg_" + element.id).remove();
//    });
//    GetValuesAndAutoPopulate("ddlObligationNewOwner", $("#licontractmanagers").text());
//    GetValuesAndAutoPopulate("ddlSendReminderToObligationNew", $("#licontractmanagers").text());
//    $("#aobligationRecNoneEdit").css('display', 'none');
//    $("#aobligationRecEdit").css('display', 'none');
//    $("#obligationnewheading").text("New Obligation");
//    if (IsPipeline) {
//        $("#AlertObli").val('No').change();
//        $("#reminderEnableObligation").empty();
//        $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notification, click <a href='javascript:void(0);' id='enableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
//    } else {
//        $("#AlertObli").val('Yes').change();
//        $("#reminderEnableObligation").empty();
//        $("#reminderEnableObligation").append("Reminders");
//    }
//    $("#rdObligationNewAutoCompleteYes").prop("checked", true);
//    $("#rdObligationNewAutoCompleteNo").prop("checked", false);
//    $("#rdObligShowInCalendarYes").prop("checked", true);
//    $("#rdObligShowInCalendarNo").prop("checked", false);
//    $("#addEditObligationNew").dialog("option", "title", "");
//    $("#addEditObligationNew").dialog("open");
//    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
//        var Id = this.id;
//        $("#" + Id).css('outline', '');
//    });
//    $("#lblerrorreclimitObligation").css('display', 'none');
//    allowOnlyNumberInInputBox("txtReminder1ObligationNew");
//    allowOnlyNumberInInputBox("txtReminder2ObligationNew");
//    allowOnlyNumberInInputBox("txtReminder3ObligationNew");
//});

//---------------------------------Milestone Begins-----------------------------------------------//

var listMilestoneNewData = "";
var listMilestoneNewEndDate = "";
var listMilestoneNewStartDate = "";
var milestoneRecur = "";
var milestoneRecurCusString = "";
var milestoneoccur = 1;

var dynamicOccCount = 54;
var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

var dynclistMilestoneNewStartDate = '';

function BindMilestone(contractid) {
    if (contractid == null || contractid == "") {
        contractid = vContractID;
    }
    var completeArticle = '';
    articleMileStone = '';
    $("#ulMilestoneBody").empty();
    var count = 0;
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "2" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        BindObligationMilestones(contractid, count);
    }
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (contactsJsonPayload) {
            $(contactsJsonPayload).each(function (i, item) {
                count++;
                var vMilestoneDate = '';
                var vMilestStatus = '';
                if (item.MilestoneDate != null) {
                    var duedate;
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        duedate = item.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    } else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                            duedate = item.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                            duedate = item.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        }
                    }
                    vMilestoneDate = duedate != "" ? (duedate + ': ') : "";
                    var MilestoneDate = new Date(item.MilestoneDate);
                    var currentDate = new Date();
                    var dateOne = new Date(MilestoneDate.getFullYear(), MilestoneDate.getMonth(), MilestoneDate.getDate(), 00, 00, 00);
                    var dateTwo = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), 00, 00, 00);
                    if (dateOne < dateTwo)
                        vMilestStatus = '<b class="milestone-Delayed" title="DELAYED"><img src="../Content/Images/status/exp.png"> Dly</b>';
                    else if (dateOne >= dateTwo)
                        vMilestStatus = '<b class="milestone-Upcoming" title="UPCOMING"><img src="../Content/Images/status/renew.png"> Upco</b>';
                }
                var article = '';
                if (count <= 5)
                    article = '<li class="margin-bottom-8 WrapText_h2" title="Milestone">';
                else
                    article = '<li class="ShowMoreMilestones margin-bottom-8 WrapText_h2" style="display:none;" title="Milestone">';
                article += '<label id="MilestoneID" style="display:none;">' + item.RowKey + '</label>';
                article += '<label id="MilestoneTitle" style="display:none;">' + item.MilestoneTitle + '</label>';
                article += '<label id="MilestoneCompleted" style="display:none;">' + item.MilestoneCompleted + '</label>';
                if (item.MilestoneCompleted == "Yes" || item.MilestoneCompleted == "yes") {
                    vMilestStatus = '<b class="milestone-Complete" title="COMPLETED"><img src="../Content/Images/status/tick.png"> Comp</b>';
                    if (item.MilestoneDate != null) {
                        article += '<input type="checkbox" style="margin-right: 0px;vertical-align: middle;" class="delmilestone" id="' + item.RowKey + '"  name="chkmilestone" onclick="checkMultipleMilestonesNewMul(this);" value=' + item.RowKey + ' /> ';
                    }
                    article += '<img style="width: 14px; vertical-align: sub;pointer-events: none; margin-right: 2px;" title="Milestone" src="/Content/Images/cal-icon.png">';
                    article += '<span class="DateToSort" style="color: black;"> ' + vMilestoneDate + '</span>';
                    article += '<a href="javascript:void(0)" style="color:#555555;" onclick="ViewMilestineDetail(\'' + item.RowKey + '\')"><del>' + item.MilestoneTitle + '</del></a>';
                } else {
                    if (item.MilestoneDate != null) {
                        article += '<input type="checkbox"  style="margin-right: 0px;vertical-align: middle;" id="' + item.RowKey + '"  name="chkmilestone" onclick="checkMultipleMilestonesNewMul(this);" value=' + item.RowKey + ' /> ';
                    }
                    article += '<img style="width: 14px; vertical-align: sub;pointer-events: none; margin-right: 2px;" title="Milestone" src="/Content/Images/cal-icon.png">';
                    article += '<span class="DateToSort" style="color: black;"> ' + vMilestoneDate + '</span>';
                    article += '<a href="javascript:void(0)" style="color:#555555;" onclick="ViewMilestineDetail(\'' + item.RowKey + '\')">' + item.MilestoneTitle + '</a>';
                }
                article += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuMilestone"/>';
                article += '</li>';
                completeArticle += article;
            });
            articleMileStone = completeArticle;
            $("#ulMilestoneBody").append(completeArticle);
            if (count > 5) {
                var more = count - 5;
                $("#dvMilestone").html('<a id="ShowMoreMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreMilestones()">' + more + ' More Milestone(s) </a>' +
                    '<a id="ShowLessMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessMilestones()" style="display:none;">Show less</a>');
            } else {
                $("#dvMilestone").html('');
            }
            $("#lblMilestonesCount").text(count);
            $(".openmenuMilestone").contextMenu({
                menu: 'dropdownMenu',
                leftButton: true
            },
                function (action, el, pos) {
                    contextMenuMilestone(action, el.parent("li"), pos);
                });
            if (count == 0) {
                $("#ulMilestoneBody").append('No items found.');
                $("#dvMilestone").html('');
            } else { }
        },
        error: function (request) {
            if (completeArticle != '') {
                $("#ulMilestoneBody").append(completeArticle);
                $('#ulMilestoneBody > li').sort(sortDescending).appendTo('#ulMilestoneBody');
                if (count > 5) {
                    var more = count - 5;
                    $("#dvMilestone").html('<a id="ShowMoreMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreMilestones()">' + more + ' More Milestone(s) </a>' +
                        '<a id="ShowLessMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessMilestones()" style="display:none;">Show less</a>');
                } else {
                    $("#dvMilestone").html('');
                }
                articleMileStone = completeArticle;
                $("#lblMilestonesCount").text(count);
                $(".openmenuMilestone").contextMenu({
                    menu: 'dropdownMenu',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuMilestone(action, el.parent("li"), pos);
                });
            } else {
                $("#lblMilestonesCount").text('0');
                $("#ulMilestoneBody").append('No items found.');
                $("#dvMilestone").html('');
            }
        },
        complete: function () {
            BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
            pendingStarted = false;
            GetContractPendingAction(false);
        }
    });
}

function BindObligationMilestones(contractid, subCount) {
    var completeArticle = '';
    var sbcount = subCount;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsNew?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (contactsJsonPayload) {
            articleObligationMileStone = "";
            $(contactsJsonPayload).each(function (i, item) {
                var vDocValidDate = '';
                if (item.DueDate != null) {
                    sbcount++;
                    var Validdate;
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        Validdate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    } else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                            Validdate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                            Validdate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        }
                    }
                    vDocValidDate = '' + Validdate + '';
                    var article = '';
                    if (sbcount <= 5)
                        article = '<li class=" margin-bottom-8 WrapText_h2" title="Obligation">';
                    else
                        article = '<li class="ShowMoreMilestones margin-bottom-8 WrapText_h2" style="display:none;" title="Obligation">';
                    article += '<img style="width: 14px; vertical-align:text-top;pointer-events: none; margin-right: 2px;" title="Obligation" src="/Content/Images/obligation.png">';
                    if (vDocValidDate != '') {
                        article += '<span class="DateToSort" style="color:black"> ' + vDocValidDate + ': </span>';
                    }
                    article += '<span  style="color:#555555">' + item.ObligationTitle + '</span>';
                    var beforeDaysSort = [];
                    var afterDaysSort = [];
                    var beforeDays = '';
                    var afterDays = '';
                    var $rem = [item.Reminder1, item.Reminder2, item.Reminder3];
                    var $remCond = [item.Reminder1Condition, item.Reminder2Condition, item.Reminder3Condition];
                    $.each($remCond, function (i, item) {
                        if ($rem[i] != 0 && $rem[i] != "" && $rem[i] != null) {
                            if (item == 'before') {
                                beforeDaysSort.push($rem[i]);
                            } else if (item == 'after') {
                                afterDaysSort.push($rem[i]);
                            }
                        }
                    });
                    beforeDays = beforeDaysSort.sort(function (a, b) {
                        if (isNaN(a) || isNaN(b)) {
                            return a > b ? 1 : -1;
                        }
                        return a - b;
                    });;
                    afterDays = afterDaysSort.sort(function (a, b) {
                        if (isNaN(a) || isNaN(b)) {
                            return a > b ? 1 : -1;
                        }
                        return a - b;
                    });;
                    if (beforeDays != '' || afterDays != '') {
                        article += '<span class="sub-text-head"> (Reminders ' + (beforeDays != '' ? beforeDays + ' day(s) before' : '') + (afterDays != '' ? (beforeDays != '' ? ' & ' + afterDays + ' day(s) after )' : afterDays + ' day(s) after ) ') : ')') + '</span>';
                    }
                    article += '</li>';
                    articleObligationMileStone += article;
                }
            });
        },
        error: function (request) { },
        complete: function () {
            BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
        }
    });
}

function BindSystemMilestoneTest(sys, doc, actmile, actobligations) {
    if (actmile != '' || sys != '' || doc != '' || actobligations != '') {
        $("#ulMilestoneBody").empty();
        $("#ulMilestoneBody").append(actmile);
        $("#ulMilestoneBody").append(doc);
        $("#ulMilestoneBody").append(sys);
        $("#ulMilestoneBody").append(actobligations);
        var count = $("#ulMilestoneBody li").length;
        if (count == 0) {
            $("#ulMilestoneBody").append('No items found.');
            $("#lblMilestonesCount").text(0);
        } else {
            $("#ulMilestoneBody>li.ShowMoreMilestones").removeClass("ShowMoreMilestones");
            $("#ulMilestoneBody>li").css('display', 'block');
            $('#ulMilestoneBody>li').sort(sortDescending).appendTo('#ulMilestoneBody');
            $('#ulMilestoneBody>li').slice(5, count).addClass("ShowMoreMilestones");
            $('#ulMilestoneBody>li.ShowMoreMilestones').css('display', 'none');
            if (count > 5) {
                var more = count - 5;
                $("#dvMilestone").empty();
                $("#dvMilestone").html('<a id="ShowMoreMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreMilestones()">' + more + ' More Milestone(s) </a>' +
                    '<a id="ShowLessMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessMilestones()" style="display:none;">Show less</a>');
            } else {
                $("#dvMilestone").empty();
            }
            $("#lblMilestonesCount").text(count);
            $(".openmenuMilestone").contextMenu({
                menu: 'dropdownMenu',
                leftButton: true
            },
                function (action, el, pos) {
                    contextMenuMilestone(action, el.parent("li"), pos);
                });
        }
    }
}

function contextMenuMilestone(action, el, pos) {
    switch (action) {
        case "view":
            {
                var milestoneID = $(el).find("#MilestoneID").text();
                ViewMilestineDetail(milestoneID);
                break;
            }
        case "delete":
            {
                var milestoneTitle = $(el).find("#MilestoneTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + milestoneTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var milestoneID = $(el).find("#MilestoneID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + milestoneID,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                "Content-Type": "application/json",
                                cache: false,
                                success: function (data) {
                                    $("#loadingPage").fadeOut();
                                    BindMilestone();
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "edit":
            {
                $('#addEditMilestoneNew').dialog('widget').find('.ui-dialog-buttonpane .ui-button:button:contains("Add") .pop_up_Content_Green ').html("Save");
                clearMilestoneFormDataNew();
                listMilestoneNewData = "";
                $("#loadingPage").fadeIn();
                var milestoneID = $(el).find("#MilestoneID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + milestoneID,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (milestoneentity) {
                        //manoj
                        $("#hdnCustomDateFieldName").text(milestoneentity.CustomDateFieldName);
                        //manoj
                        $("#milestonenewheading").text("Edit Milestone");
                        $("#dtMilestoneDateNew").val("");
                        if (milestoneentity.MilestoneDate != null) {
                            var duedate = '';
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                duedate = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            } else {
                                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                    duedate = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                    duedate = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                                }
                            }

                            $('#dtMilestoneDateNew').datepicker('setDate', duedate);
                            listMilestoneNewStartDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));

                            //$("#dtMilestoneDateNew").val(duedate);
                            //listMilestoneNewStartDate = duedate;

                            var newDate = new Date(milestoneentity.MilestoneDate);
                            $("#dtMilestoneOcurrMonthforYear").val(monthNames[newDate.getMonth()]);
                            $("#dtMilestoneOcurrDateforYear").val(newDate.getDate());
                            $("#dtMilestoneNewOccurrenceDueDate").val(newDate.getDate());
                        }
                        $("#txtMilestoneIDNew").val(milestoneentity.RowKey);
                        $("#txtMilestoneNewText").val(milestoneentity.MilestoneText);
                        $("#txtMilestoneTitleNew").val(milestoneentity.MilestoneTitle);
                        $("#txtMileDescriptionNew").val(milestoneentity.MilestoneDescription);
                        if (milestoneentity.ShowInCalendar == "No") {
                            $('input[type="radio"][name="ShowInCalendarNew"][value="No"]').prop('checked', true);
                        } else {
                            $('input[type="radio"][name="ShowInCalendarNew"][value="Yes"]').prop('checked', true);
                        }
                        if (milestoneentity.MilestoneType != '') {
                            $("#ddlMilestoneTypeNew option").filter(function (index) {
                                return $(this).text() === milestoneentity.MilestoneType;
                            }).prop('selected', true);
                        } else {
                            $("#ddlMilestoneTypeNew").val('0')
                        }


                        GetValuesAndAutoPopulate("ddlMilestoneOwnerNew", milestoneentity.MilestoneOwner);
                        GetValuesAndAutoPopulate("ddlSendReminderToNew", milestoneentity.SendReminderTo);

                        if (milestoneentity.Reminder1 != null && milestoneentity.Reminder1 != "" && milestoneentity.Reminder1 != 0) {
                            $("#txtReminder1MilestoneNew").val(milestoneentity.Reminder1);
                        } else {
                            $("#txtReminder1MilestoneNew").val("");
                        }

                        if (milestoneentity.Reminder2 != null && milestoneentity.Reminder2 != "" && milestoneentity.Reminder2 != 0) {
                            $("#txtReminder2MilestoneNew").val(milestoneentity.Reminder2);
                        } else {
                            $("#txtReminder2MilestoneNew").val("");
                        }
                        if (milestoneentity.Reminder3 != null && milestoneentity.Reminder3 != "" && milestoneentity.Reminder3 != 0) {
                            $("#txtReminder3MilestoneNew").val(milestoneentity.Reminder3);
                        } else {
                            $("#txtReminder3MilestoneNew").val("");
                        }

                        if (milestoneentity.Reminder1Condition != '') {
                            $("#ddlReminder1MilestoneNew option").filter(function (index) {
                                return $(this).text() === milestoneentity.Reminder1Condition;
                            }).prop('selected', true);
                        } else {
                            $("#ddlReminder1MilestoneNew").val('before')
                        }
                        if (milestoneentity.Reminder2Condition != '') {
                            $("#ddlReminder2MilestoneNew option").filter(function (index) {
                                return $(this).text() === milestoneentity.Reminder2Condition;
                            }).prop('selected', true);
                        } else {
                            $("#ddlReminder2MilestoneNew").val('before')
                        }
                        if (milestoneentity.Reminder3Condition != '') {
                            $("#ddlReminder3MilestoneNew option").filter(function (index) {
                                return $(this).text() === milestoneentity.Reminder3Condition;
                            }).prop('selected', true);
                        } else {
                            $("#ddlReminder3MilestoneNew").val('before')
                        }


                        if (milestoneentity.Priority != '') {

                            $("#ddlMilestoneNewPriority option").filter(function (index) {
                                return $(this).text() === milestoneentity.Priority;
                            }).prop('selected', true);

                        } else {
                            $("#ddlMilestoneNewPriority").val('Medium')

                        }

                        if (milestoneentity.MilestoneCompleted != '') {
                            if (milestoneentity.MilestoneCompleted == "No") {
                                $('#ulMilestoneNewCompletedDate').css('display', 'none');
                            }
                        } else {
                            $('#ulMilestoneNewCompletedDate').css('display', 'none');
                        }

                        if (milestoneentity.MilestoneCompletedDate != null && milestoneentity.MilestoneCompletedDate != '') {
                            var completedate = '';

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                completedate = milestoneentity.MilestoneCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            } else {
                                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                    completedate = milestoneentity.MilestoneCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                    completedate = milestoneentity.MilestoneCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                                }
                            }
                            $("#dtMilestoneNewCompletedDate").val(completedate);
                        } else {
                            $("#dtMilestoneNewCompletedDate").val('')
                        }

                        if (milestoneentity.AutoComplete == "No") {
                            $('input[type="radio"][name="MilestoneNewAutoComplete"][value="No"]').prop('checked', true);
                        } else {
                            $('input[type="radio"][name="MilestoneNewAutoComplete"][value="Yes"]').prop('checked', true);
                        }

                        var strEndDate = "";


                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                            strEndDate = new Date(contractItem.EndDate);
                            listMilestoneNewEndDate = formatDate(strEndDate);
                            $('#MilestoneNewOcurrenceEndDate').text("");
                            var MNewEndDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                if (getTimeZone().indexOf('+') > -1)
                                    MNewEndDate = moment(new Date(listMilestoneNewEndDate)).format('MM/DD/YYYY');
                                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                    MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().add(1, 'days').format('MM/DD/YYYY');
                            } else {
                                if (getTimeZone().indexOf('+') > -1)
                                    MNewEndDate = moment(new Date(listMilestoneNewEndDate)).format(localStorage.AppDateFormat);
                                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                    MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().add(1, 'days').format(localStorage.AppDateFormat);
                            }

                            $('#MilestoneNewOcurrenceEndDate').text(" (" + MNewEndDate + ")");
                            $("#rdMilestoneNewEndOccurence").prop("checked", true);
                        } else {
                            listMilestoneNewEndDate = "Not Available";
                            $('#MilestoneNewOcurrenceEndDate').text("");
                            $('#MilestoneNewOcurrenceEndDate').text(" (" + listMilestoneNewEndDate + ")");
                            $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);


                        }

                        if (milestoneentity.MilestoneEndTerm != null && milestoneentity.MilestoneEndTerm != '') {
                            $('input[type="radio"][name="SelectMilestoneOccurenceEndDate"][value="' + milestoneentity.MilestoneEndTerm + '"]').prop('checked', true);

                        } else {
                            $('input[type="radio"][name="SelectMilestoneOccurenceEndDate"][value="Custom"]').prop('checked', true);

                        }
                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                            userFlag = true;
                        } else {
                            userFlag = false;
                        }

                        if (milestoneentity.MilestoneEndTerm == "Custom") {
                            userFlagCustom = true;
                            $("#txtMilestoneOccurrenceCount").val(milestoneentity.Ocurrences);

                        } else {
                            $("#txtMilestoneOccurrenceCount").val("12");
                        }

                        if (milestoneentity.Ocurrences == null && milestoneentity.Ocurrences == "") {
                            $("#txtMilestoneOccurrenceCount").val("1");
                        }



                        if (milestoneentity.MilestoneDate != null && milestoneentity.MilestoneDate != '' && milestoneentity.MilestoneStartDate != null && milestoneentity.MilestoneStartDate != '') {
                            var dtStartdate;

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                dtStartdate = moment(new Date(milestoneentity.MilestoneStartDate)).utc().format('MM/DD/YYYY');
                            } else {
                                dtStartdate = moment(new Date(milestoneentity.MilestoneStartDate)).utc().format(localStorage.AppDateFormat);
                            }

                            var dtEnddate;

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                dtEnddate = moment(new Date(milestoneentity.MilestoneEndDate)).utc().format('MM/DD/YYYY');
                            } else {
                                dtEnddate = moment(new Date(milestoneentity.MilestoneEndDate)).utc().format(localStorage.AppDateFormat);
                            }

                            $('#MilestoneOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + milestoneentity.Ocurrences + " instances)")

                            document.getElementById("ddlMilestoneOccurencess").disabled = true;
                            $('input[type="radio"][name=SelectMilestoneOccurenceEndDate]').attr("disabled", "disabled");

                            vMilestoneEditStatus = "";

                            var dateNew = new Date(milestoneentity.MilestoneDate);

                            $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
                                this.checked = false;
                            });
                            var day = dateNew.getDay()
                            var chkboxId = "MRC" + day;

                            $("#" + chkboxId).prop('checked', true);

                            if (milestoneentity.Recurrences != null && milestoneentity.Recurrences != "") {
                                $("#ddlMilestoneOccurencess option").filter(function (index) {
                                    return $(this).text() === milestoneentity.Recurrences;
                                }).prop('selected', true);

                                if (milestoneentity.Recurrences == "Weekly") {


                                    $("#dtMilestoneDateNew").attr("disabled", "disabled");

                                    $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
                                        this.checked = false;

                                    });



                                    var strRecString = milestoneentity.CustomString.split(',');
                                    //var value = parseInt(strRecString);

                                    $(strRecString).each(function (index, element) {
                                        var value = parseInt(element);
                                        var chkboxId = "MRC" + value;
                                        $("#" + chkboxId).prop('checked', true);
                                    });

                                    //var chkboxId = "MRC" + value;

                                    //$("#" + chkboxId).prop('checked', true);

                                    $("#divMilestoneOcurrenceSummary").css('display', '');
                                    $("#milestoneEditOcursumary").css('display', '');

                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');

                                    $("#amilestoneRecNoneEdit").css('display', 'none');
                                    $("#amilestoneRecEdit").css('display', '');

                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');

                                    $("#liMilestoneRecurrence").css('display', 'none');



                                } else if (milestoneentity.Recurrences == "None") {
                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');
                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceSummary").css('display', '');

                                    $("#milestoneEditOcursumary").css('display', '');


                                    $("#amilestoneRecNoneEdit").css('display', '');
                                    $("#amilestoneRecEdit").css('display', 'none');
                                    $("#liMilestoneRecurrence").css('display', 'none');
                                    $('#MilestoneOcurrenceSummary').text("(" + "Never" + ")")


                                } else if (milestoneentity.Recurrences == "Monthly") {
                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');
                                    $("#ddlMilestoneRepeatMonthly").css('display', '');
                                    $("#ddlMilestoneRepeatMonthly").val(milestoneentity.RecMonthlyString);


                                    $("#dtMilestoneDateNew").attr("disabled", "disabled");


                                    $("#divMilestoneOcurrenceSummary").css('display', '');
                                    $("#milestoneEditOcursumary").css('display', '');


                                    $("#lblMilestoneOcurrenceMonth").css('display', '');
                                    $("#lblMilestoneOcurrenceYear").css('display', 'none');

                                    $("#amilestoneRecNoneEdit").css('display', 'none');
                                    $("#amilestoneRecEdit").css('display', '');
                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                                    $("#liMilestoneRecurrence").css('display', 'none');


                                } else {
                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');
                                    $("#ddlMilestoneRepeatMonthly").css('display', 'none');

                                    $("#lblMilestoneOcurrenceMonth").css('display', 'none');
                                    $("#lblMilestoneOcurrenceYear").css('display', '');


                                    $("#dtMilestoneDateNew").attr("disabled", "disabled");


                                    $("#divMilestoneOcurrenceSummary").css('display', '');
                                    $("#milestoneEditOcursumary").css('display', '');

                                    $("#amilestoneRecNoneEdit").css('display', 'none');
                                    $("#amilestoneRecEdit").css('display', '');
                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                                    $("#liMilestoneRecurrence").css('display', 'none');

                                }

                            }
                        } else {

                            if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                                strEndDate = new Date(contractItem.EndDate);
                                listMilestoneNewEndDate = formatDate(strEndDate);
                                $('#MilestoneNewOcurrenceEndDate').text("");
                                var MNewEndDate = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    if (getTimeZone().indexOf('+') > -1)
                                        MNewEndDate = moment(new Date(listMilestoneNewEndDate)).format('MM/DD/YYYY');
                                    else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                        MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().add(1, 'days').format('MM/DD/YYYY');
                                } else {
                                    if (getTimeZone().indexOf('+') > -1)
                                        MNewEndDate = moment(new Date(listMilestoneNewEndDate)).format(localStorage.AppDateFormat);
                                    else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                        MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().add(1, 'days').format(localStorage.AppDateFormat);
                                }

                                $('#MilestoneNewOcurrenceEndDate').text(" (" + MNewEndDate + ")");
                                $("#rdMilestoneNewEndOccurence").prop("checked", true);
                            } else {
                                listMilestoneNewEndDate = "Not Available";
                                $('#MilestoneNewOcurrenceEndDate').text("");
                                $('#MilestoneNewOcurrenceEndDate').text(" (" + listMilestoneNewEndDate + ")");
                                $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                                $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                                $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);


                            }
                            $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                            $("#divMilestoneOcurrenceMonthly").css('display', 'none');

                            $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                            $("#divMilestoneOcurrenceSummary").css('display', 'none');

                            document.getElementById("ddlMilestoneOccurencess").disabled = true;

                            $("#ddlMilestoneOccurencess").val('None');

                            $("#amilestoneRecNoneEdit").css('display', 'none');
                            $("#amilestoneRecEdit").css('display', 'none');



                        }

                        if (milestoneentity.MilestoneStatus == "Complete" || milestoneentity.MilestoneCompleted == "Yes") {
                            if (milestoneentity.MilestoneCompletedDate != null && milestoneentity.MilestoneCompletedDate != "") {
                                var CDate;

                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    CDate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format('MM/DD/YYYY');
                                } else {
                                    CDate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format(localStorage.AppDateFormat);
                                }

                                $("#ulMilestoneNewCompletedDate").css('display', '');
                                $('#dtMilestoneNewCompletedDate').addClass('validelement');
                                $('#dtMilestoneNewCompletedDate').addClass('validdate');
                                $('#dtMilestoneNewCompletedDate').val(CDate);
                            } else {
                                $("#ulMilestoneNewCompletedDate").css('display', '');
                                $('#dtMilestoneNewCompletedDate').addClass('validelement');
                                $('#dtMilestoneNewCompletedDate').addClass('validdate');
                                $('#dtMilestoneNewCompletedDate').val("");
                            }
                        } else {
                            $("#ulMilestoneNewCompletedDate").css('display', 'none');
                            $('#dtMilestoneNewCompletedDate').removeClass('validelement');
                            $('#dtMilestoneNewCompletedDate').removeClass('validdate');
                            $('#dtMilestoneNewCompletedDate').val("");
                        }


                        if (milestoneentity.MilestoneDate != null && milestoneentity.MilestoneDate != '' && milestoneentity.MilestoneStartDate != null && milestoneentity.MilestoneStartDate != '') {

                            var updatedate1 = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                            var updatedate2 = milestoneentity.MilestoneEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                            $('#mrepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrepupdaterecurrence').text("(" + updatedate1 + " to " + updatedate2 + ")");
                            $('#mrnepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrnepupdaterecurrence').text("(" + updatedate1 + " to " + updatedate2 + ")");

                        } else {
                            var updatedate1 = "NotAvailable";

                            var updatedate2 = "NotAvailable";

                            $('#mrepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrepupdaterecurrence').text("(" + updatedate1 + ")");
                            $('#mrnepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrnepupdaterecurrence').text("(" + updatedate1 + ")");
                        }


                        if (milestoneentity.MilestoneStatus != null && milestoneentity.MilestoneStatus != "" && typeof (milestoneentity.MilestoneStatus) != 'undefined') {
                            $("#ddlMilestoneNewStatus").val(milestoneentity.MilestoneStatus);
                        } else {
                            $("#ddlMilestoneNewStatus").val('Upcoming');
                        }

                        $("#lblerrorreclimitMilestone").css('display', 'none');

                        $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');


                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });
                        if (milestoneentity.AlertsEnabled == "Yes") {
                            $("#AlertMile").val('Yes').change();
                            $("#AlertObli").val('Yes').change();
                            if (IsPipeline) {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn OFF reminders for milestone notifications, click <a href='javascript:void(0);' id='disableSwitch' onclick='disableMilestoneSwitch()'>Disable</a></span>")
                            } else {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders");
                            }
                        } else {
                            $("#AlertMile").val('No').change();
                            $("#AlertObli").val('No').change();
                            if (IsPipeline) {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")
                            } else {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders");
                            }
                        }
                        $("#addEditMilestoneNew").dialog("option", "title", "");
                        $("#addEditMilestoneNew").dialog("open");

                        $("#loadingPage").fadeOut();
                    },
                    error: function (milestoneentity) {
                        $("#inprocessMilestone").css('visibility', 'hidden');
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                        $("#lblCTitleNew").text($("#lblContractTitle").text());
                        $("#inprocessMilestone").css('visibility', 'hidden');
                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });
                        $("#lblerrorreclimitMilestone").css('display', 'none');
                        $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');


                        $("#addEditMilestoneNew").dialog("option", "title", "");
                        $("#addEditMilestoneNew").dialog("open");
                        $("#addEditMilestoneNew").height("auto");
                    }
                });

                break;
            }
    }
}

function ViewMilestineDetail(milestoneID) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + milestoneID,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (milestoneentity) {
            $("#loadingPage").fadeOut();
            var vMetadata = '<ul class="pOp_Cont Milestone">';
            vMetadata += '<li id="milestoneTitle"><p>Milestone Title</p><span>' + milestoneentity.MilestoneTitle + '</span></li>';
            vMetadata += '<li><p>Milestone Type</p><span>' + milestoneentity.MilestoneType + '</span></li>';
            vMetadata += '<li><p>Description</p><span style="word-break: break-all;">';
            if (milestoneentity.MilestoneDescription != '') {
                vMetadata += milestoneentity.MilestoneDescription;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Milestone Date</p><span>';
            if (milestoneentity.MilestoneDate != null && milestoneentity.MilestoneDate != '') {
                var startDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    startDate = moment(new Date(milestoneentity.MilestoneDate)).utc().format('MM/DD/YYYY');
                } else {
                    startDate = moment(new Date(milestoneentity.MilestoneDate)).utc().format(localStorage.AppDateFormat);
                }
                vMetadata += startDate;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Auto Complete on Milestone Date?</p><span>';
            if (milestoneentity.AutoComplete != '') {
                vMetadata += milestoneentity.AutoComplete;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li id="milestoneOwners"><p>Milestone Owner</p><span>';
            if (milestoneentity.MilestoneOwner != '') {
                vMetadata += milestoneentity.MilestoneOwner;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Priority</p><span>';
            if (milestoneentity.Priority != '') {
                vMetadata += milestoneentity.Priority;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Milestone Completed</p><span>';
            if (milestoneentity.MilestoneCompleted != '') {
                vMetadata += milestoneentity.MilestoneCompleted;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Completed Date</p><span>';
            if (milestoneentity.MilestoneCompletedDate != null && milestoneentity.MilestoneCompletedDate != '' && milestoneentity.MilestoneCompleted == "Yes") {
                var completedate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    completedate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format('MM/DD/YYYY');
                } else {
                    completedate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format(localStorage.AppDateFormat);
                }
                vMetadata += completedate;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Completed By</p><span>';
            if (milestoneentity.MilestoneCompletedBy != '') {
                vMetadata += milestoneentity.MilestoneCompletedBy;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Show In Calendar</p><span>';
            if (milestoneentity.ShowInCalendar != '') {
                vMetadata += milestoneentity.ShowInCalendar;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Send Reminder To</p><span>';
            if (milestoneentity.SendReminderTo != '') {
                vMetadata += milestoneentity.SendReminderTo;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Reminder 1</p><span>';
            if (milestoneentity.Reminder1 != '') {
                vMetadata += milestoneentity.Reminder1 + ' days ' + milestoneentity.Reminder1Condition;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Reminder 2</p><span>';
            if (milestoneentity.Reminder2 != '') {
                vMetadata += milestoneentity.Reminder2 + ' days ' + milestoneentity.Reminder2Condition;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Reminder 3</p><span>';
            if (milestoneentity.Reminder3 != '') {
                vMetadata += milestoneentity.Reminder3 + ' days ' + milestoneentity.Reminder3Condition;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li id="contractID" style="display:none;"><p>Contract ID</p><span>' + milestoneentity.ContractID + '</span></li>';
            vMetadata += '<li id="milestoneID" style="display:none;"><p>Milestone ID</p><span>' + milestoneentity.RowKey + '</span></li>';
            vMetadata += '</ul>';
            var permissionsAll = contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees +
                ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager;
            var permissions = $.unique($(permissionsAll.split(';')).map(function (i, item) {
                return item.trim()
            }).filter(function (i, item) {
                return item != "";
            }));
            var msOwners = [];
            if (milestoneentity.MilestoneOwner != "") {
                if (milestoneentity.MilestoneOwner.indexOf('{') > -1) {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/ownersfromgroup?contractid=' + milestoneentity.ContractID + '&milestoneonwers=' + milestoneentity.MilestoneOwner,
                        type: 'GET',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey
                        },
                        cache: false,
                        async: false,
                        success: function (owners) {
                            if (owners != null || owners != "") {
                                for (var key in owners) {
                                    if (owners.hasOwnProperty(key)) {
                                        msOwners.push(key);
                                    }
                                }
                            }
                        },
                        error: function (owners) { }
                    });
                } else
                    msOwners = $.map(milestoneentity.MilestoneOwner.split(';'), $.trim);
            }
            var statusArr = ["Replaced", "Expired", "Cancelled", "Archived"];
            $("#loadingPage").fadeOut();
            if (msOwners != "" && msOwners != null && msOwners.indexOf(localStorage.UserName) > -1 && milestoneentity.MilestoneCompleted != "Yes" &&
                milestoneentity.AutoComplete != "Yes" && jQuery.inArray(contractItem.Status, statusArr) == -1 && permissions.toArray().indexOf(localStorage.UserName) > -1) {
                $("#tblMetadataDetailForOwner").empty();
                $("#tblMetadataDetailForOwner").append(vMetadata);
                $("#btnMarkComplete span").attr('style', 'background-color: transparent; color: #3177b5;font-size: 14px;border: 1px solid #3177b5 !important;');
                $("#viewMetadataDetailForOwner").dialog("option", "title", "View Milestone");
                $("#viewMetadataDetailForOwner").dialog("open");
            } else {
                $("#tblMilObgMetadataDetail").empty();
                $("#tblMilObgMetadataDetail").append(vMetadata);
                $("#dvMilObgMetadata").dialog("option", "title", "View Milestone");
                $("#dvMilObgMetadata").dialog("open");
            }
        },
        error: function () {
            $("#loadingPage").fadeOut();
        },
        complete: function () {
            $("#loadingPage").fadeOut();
        }
    });
}

function clearMilestoneFormDataNew() {
    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');
    $("#txtMilestoneNewText").val("");
    $("#txtMilestoneIDNew").val("");
    $("#txtMilestoneTitleNew").val("");
    $('#ddlMilestoneTypeNew').val("0");
    $("#dtMilestoneDateNew").val("");
    $("#ddlMilestoneNewPriority").val("Medium");
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (projMgrs != "" && vAccFeat.length > 0) {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "{Project Managers}");
    } else {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "");
    }
    $("#txtReminder1MilestoneNew").val("");
    $("#txtReminder2MilestoneNew").val("");
    $("#txtReminder3MilestoneNew").val("");
    $("#ddlReminder1MilestoneNew").val("before");
    $("#ddlReminder2MilestoneNew").val("before");
    $("#ddlReminder3MilestoneNew").val("before");
    $("#hdnCustomDateFieldName").text('');
    $("#lblCTitleNew").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlMilestoneOwnerNew", $("#licontractmanagers").text() + ';' + projMgrs);
    GetValuesAndAutoPopulate("ddlSendReminderToNew", $("#licontractmanagers").text() + ';' + projMgrs);
    $("#ddlMilestoneNewStatus").removeClass("error");
    $('#ddlMilestoneNewStatus').val('Upcoming');
    $('#ddlMilestoneOccurencess').val('None');
    $("#dtMilestoneNewCompletedDate").val("");
    $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
        var Id = this.id;
        $("#" + Id).css('outline', '');
    });
}

function AddMilestoneMoreNew() {
    clearMilestoneFormDataNew();
    listMilestoneNewData = "";
    $("#txtMilestoneIDNew").val("");
    $("#txtMilestoneTitleNew").val("");
    $('#ddlMilestoneTypeNew').val("0");
    $("#dtMilestoneDateNew").val("");
    $("#ddlMilestoneNewPriority").val("Medium");
    $("#txtMileDescriptionNew").val('');
    $('input[type="radio"][name="ShowInCalendarNew"][value="Yes"]').prop('checked', true);
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (projMgrs != "" && vAccFeat.length > 0) {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "{Project Managers}");
    } else {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "");
    }
    $("#milestonenewheading").text("New Milestone");
    $('input[type="radio"][name="MilestoneNewAutoComplete"][value="Yes"]').prop('checked', true);
    $("#dtMilestoneNewCompletedDate").val("");
    $("#amilestoneCRecurrence").css('display', 'none');
    $("#amilestoneESeries").css('display', 'none');
    $("#amilestoneERecurrence").css('display', 'none');
    $("#ulMilestoneNewCompletedDate").css('display', 'none');
    $("#liMilestoneRecurrence").css('display', '');
    var strEndDate = "";
    $('#txtMilestoneOccurrenceCount').val("12");
    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
        strEndDate = new Date(contractItem.EndDate);
        listMilestoneNewEndDate = strEndDate;
        $('#MilestoneNewOcurrenceEndDate').text("");
        var MNewEndDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            if (getTimeZone().indexOf('+') > -1)
                MNewEndDate = moment(new Date(listMilestoneNewEndDate)).format('MM/DD/YYYY');
            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format('MM/DD/YYYY');
        } else {
            if (getTimeZone().indexOf('+') > -1)
                MNewEndDate = moment(new Date(listMilestoneNewEndDate)).format(localStorage.AppDateFormat);
            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format(localStorage.AppDateFormat);
        }
        $('#MilestoneNewOcurrenceEndDate').text(" (" + MNewEndDate + ")");
        $("#rdMilestoneNewEndOccurence").prop("checked", true);
    } else {
        listMilestoneNewEndDate = "Not Available";
        $('#MilestoneNewOcurrenceEndDate').text("");
        $('#MilestoneNewOcurrenceEndDate').text(" (" + listMilestoneNewEndDate + ")");
        $("#rdMilestoneNewEndOccurence").attr('disabled', true);
        $('#rdMilestoneNewEndOccurence').removeAttr('checked');
        $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
    }
    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
    $("#divMilestoneOcurrenceMonthly").css('display', 'none');
    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
    $("#divMilestoneOcurrenceSummary").css('display', 'none');
    document.getElementById("ddlMilestoneOccurencess").disabled = true;
    document.getElementById("dtMilestoneDateNew").disabled = false;
    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');
    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var milestoneReminder = defaultGlobalSettings.MilestoneReminders;
        var xmlDoc = $.parseXML(milestoneReminder);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "MilestoneNew").val(remSplit[0]);
            $("#txtReminder" + j + "MilestoneNew").val(remSplit[1]);
            j = j + 1;
        });
    }
    $("#lblCTitleNew").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlMilestoneOwnerNew", $("#licontractmanagers").text() + ';' + projMgrs);
    GetValuesAndAutoPopulate("ddlSendReminderToNew", $("#licontractmanagers").text() + ';' + projMgrs);
    $("#lblerrorreclimitMilestone").css('display', 'none');
    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
    if (IsPipeline) {
        $("#AlertMile").val('No').change();
        $("#AlertObli").val('No').change();
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")
    } else {
        $("#AlertMile").val('Yes').change();
        $("#AlertObli").val('No').change();
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders");
    }
    $("#addEditMilestoneNew").dialog("option", "title", "");
    $("#addEditMilestoneNew").dialog("open");
    $("#addEditMilestoneNew").height("auto");
}

function GetMilestonedynamicRecurrenceCount() {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))
    }
    var startDateNew = new Date();
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    dynclistMilestoneNewStartDate = fMilestoneDateNew;
    if (listMilestoneNewEndDate != "Not Available") {
        if ($("#ddlMilestoneOccurencess option:selected").val() == "Weekly") {
            var newTestDateNew2 = new Date();
            var sta = false;
            var OCount = 1;
            var Cus = "";
            var CustomRecWeekly = [];
            $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                CustomRecWeekly.push(this.value);
                Cus += (this.value) + ",";
            });
            var selectedstartdate = new Date(dynclistMilestoneNewStartDate);
            for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                    recst = new Date(dynclistMilestoneNewStartDate);
                    newTestDateNew2 = new Date(dynclistMilestoneNewStartDate);
                    sta = true;
                    break;
                }
            }
            if (!sta) {
                var newTestDate = new Date(dynclistMilestoneNewStartDate);
                var newdate = new Date(dynclistMilestoneNewStartDate);
                for (var s = 0; s < 6; s++) {
                    newdate.setDate(newdate.getDate() + 1);
                    newTestDate.setDate(newTestDate.getDate() + 1);
                    for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                        if (newdate.getDay() == CustomRecWeekly[crw1]) {
                            recst = newdate;
                            newTestDateNew2 = newTestDate;
                            sta = true;
                            break;
                        }
                    }
                    if (sta) {
                        break;
                    }
                }
            }
            reced = new Date(listMilestoneNewEndDate);
            if (reced >= recst) {
                var one_day = 1000 * 60 * 60 * 24;
                var date1_ms = recst.getTime();
                var date2_ms = reced.getTime();
                var difference_ms = date2_ms - date1_ms;
                var diff = Math.round(difference_ms / one_day);
                var newCustomdate = newTestDateNew2;
                for (var s1 = 0; s1 < diff; s1++) {
                    newCustomdate.setDate(newCustomdate.getDate() + 1);
                    for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                        if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                            OCount = OCount + 1;
                        }
                    }
                }
                milestoneoccur = OCount;
            } else {
                milestoneoccur = 0;
            }
            if (milestoneoccur > 54) {
                dynamicOccCount = 54;
                $("#lblerrorreclimitMilestone").css('display', '');
                $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            } else {
                dynamicOccCount = milestoneoccur;
                $("#lblerrorreclimitMilestone").css('display', 'none');
                $("#rdMilestoneNewEndOccurence").attr('disabled', false);
                $('#rdMilestoneNewEndOccurence').prop("checked", true);
                if (milestoneoccur == 0)
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                else
                    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }
        } else if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
            var newstartrecdate = new Date(dynclistMilestoneNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistMilestoneNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listMilestoneNewEndDate);
            var occnew = 0;
            if (reced >= newstartrecdate) {
                while (reced >= newstartrecdate) {
                    newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlMilestoneRepeatMonthly option:selected").val())));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                milestoneoccur = occnew;
            } else {
                milestoneoccur = 0;
            }
            if (milestoneoccur > 54) {
                dynamicOccCount = 54;
                $("#lblerrorreclimitMilestone").css('display', '');
                $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            } else {
                dynamicOccCount = milestoneoccur;
                $("#lblerrorreclimitMilestone").css('display', 'none');
                if (milestoneoccur == 0)
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                else
                    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }
            milestoneRecurCusString = recst.getDate();
        } else {
            var newstartrecdate = new Date(dynclistMilestoneNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistMilestoneNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listMilestoneNewEndDate);
            var occnew = 0;
            if (reced >= newstartrecdate) {
                while (reced >= newstartrecdate) {
                    newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                milestoneoccur = occnew;
            } else {
                milestoneoccur = 0;
            }
            if (milestoneoccur > 54) {
                dynamicOccCount = 54;
                $("#lblerrorreclimitMilestone").css('display', '');
                $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            } else {
                dynamicOccCount = milestoneoccur;
                $("#lblerrorreclimitMilestone").css('display', 'none');
                if (milestoneoccur == 0)
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                else
                    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }
            milestoneRecurCusString = recst.getFullYear();
        }
    } else {
        dynamicOccCount = 54;
        $("#lblerrorreclimitMilestone").css('display', '');
        $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
    }
    if ($("#txtMilestoneOccurrenceCount").val() == '') {
        if (parseInt(dynamicOccCount) > 12) {
            $("#txtMilestoneOccurrenceCount").val('12');
        } else {
            $("#txtMilestoneOccurrenceCount").val(dynamicOccCount);
        }
    }
}


function MilestoneDateSlectedEvent(obj) {
    var dateNew = new Date($.datepicker.formatDate('mm/dd/yy', $(obj).datepicker('getDate')));
    $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
        this.checked = false;
    });
    var day = dateNew.getDay()
    var chkboxId = "MRC" + day;
    $("#" + chkboxId).prop('checked', true);
    if ($('#txtMilestoneNewText').val() != "") { } else {
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
    }
    $('#dtMilestoneNewOccurrenceDueDate').val(dateNew.getDate());
    $('#dtMilestoneOcurrMonthforYear').val(monthNames[dateNew.getMonth()]);
    $('#dtMilestoneOcurrDateforYear').val(dateNew.getDate());
    if ($("#ddlMilestoneOccurencess").val() != "None") {
        GetMilestoneDataFinal("");
    }
}

var userFlag = false;
var userFlagCustom = false;
$("#ddlMilestoneOccurencess").change(function (obj) {
    GetMilestonedynamicRecurrenceCount();
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))
    }
    listMilestoneNewStartDate = fMilestoneDateNew;
    var date = new Date(fMilestoneDateNew);
    var Cus = "";
    var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
    var customstring = "";
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fMilestoneDateNew);
        $('#dtMilestoneNewOccurrenceDueDate').val(abc.getDate());
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', '');
        customstring = $("#ddlMilestoneRepeatMonthly").val();
        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $('#ddlMilestoneRepeatMonthly').css('display', '');
        $('#lblMilestoneOcurrenceMonth').css('display', '');
        $('#lblMilestoneOcurrenceYear').css('display', 'none');
        if (listMilestoneNewEndDate != "Not Available") { } else {
            dynamicOccCount = 54;
        }
    } else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
        var abc = new Date(fMilestoneDateNew);
        var text = monthNames[abc.getMonth()];
        $('#dtMilestoneOcurrDateforYear').val(abc.getDate());
        $('#dtMilestoneOcurrMonthforYear').val(text);
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', '');
        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $("#ddlMilestoneRepeatMonthly").val("1");
        $('#ddlMilestoneRepeatMonthly').css('display', 'none');
        $('#lblMilestoneOcurrenceMonth').css('display', 'none');
        $('#lblMilestoneOcurrenceYear').css('display', '');
        if (listMilestoneNewEndDate != "Not Available") { } else {
            dynamicOccCount = 54;
        }
    } else if (ocurrTxtnew == "Weekly") {
        $('#dtMilestoneNewOccurrenceDueDate').val("");
        $('#divMilestoneOcurrenceMonthly').css('display', 'none');
        $('#divMilestoneOcurrenceWeekly').css('display', '');
        $('#divMilestoneOcurrenceSummary').css('display', '');
        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
        $("#ddlMilestoneRepeatMonthly").val("1");
        if (listMilestoneNewEndDate != "Not Available") { } else {
            dynamicOccCount = 54;
        }
    } else {
        $('#dtMilestoneNewOccurrenceDueDate').val("");
        $('#divMilestoneOcurrenceMonthly').css('display', 'none');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', 'none');
        $('#dvMilestoneOcurrenceEnd').css('display', 'none');
        $("#ddlMilestoneRepeatMonthly").val("1");
        if (listMilestoneNewEndDate != "Not Available") { } else {
            dynamicOccCount = 54;
        }
    }
    if (userFlag) {
        if (userFlagCustom) {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
        } else {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurence").prop("checked", true);
            $('#rdMilestoneNewEndOccurenceUser').removeAttr('checked');
        }
    }
    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetMilestoneDataFinal(Cus);
    } else {
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }
        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, Cus, customstring);
    }
});


function GetMilestoneDataFinal(customstring) {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))
    }
    var startDateNew = new Date();
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    listMilestoneNewStartDate = fMilestoneDateNew;
    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {
        if (listMilestoneNewEndDate != "Not Available") {
            if ($("#ddlMilestoneOccurencess option:selected").val() == "Weekly") {
                var newTestDateNew2 = new Date();
                milestoneRecur = "Weekly";
                var sta = false;
                var OCount = 1;
                var Cus = "";
                var CustomRecWeekly = [];
                $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                    CustomRecWeekly.push(this.value);
                    Cus += (this.value) + ",";
                });
                var selectedstartdate = new Date(listMilestoneNewStartDate);
                for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                    if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                        recst = new Date(listMilestoneNewStartDate);
                        newTestDateNew2 = new Date(listMilestoneNewStartDate);
                        sta = true;
                        break;
                    }
                }
                if (!sta) {
                    var newTestDate = new Date(listMilestoneNewStartDate);
                    var newdate = new Date(listMilestoneNewStartDate);
                    for (var s = 0; s < 6; s++) {
                        newdate.setDate(newdate.getDate() + 1);
                        newTestDate.setDate(newTestDate.getDate() + 1);
                        for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                            if (newdate.getDay() == CustomRecWeekly[crw1]) {
                                recst = newdate;
                                newTestDateNew2 = newTestDate;
                                sta = true;
                                break;
                            }
                        }
                        if (sta) {
                            break;
                        }
                    }
                }
                reced = new Date(listMilestoneNewEndDate);
                if (reced >= recst) {
                    var one_day = 1000 * 60 * 60 * 24;
                    var date1_ms = recst.getTime();
                    var date2_ms = reced.getTime();
                    var difference_ms = date2_ms - date1_ms;
                    var diff = Math.round(difference_ms / one_day);
                    var newCustomdate = newTestDateNew2;
                    for (var s1 = 0; s1 < diff; s1++) {
                        newCustomdate.setDate(newCustomdate.getDate() + 1);
                        for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                            if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                                OCount = OCount + 1;
                            }
                        }
                    }
                    milestoneoccur = OCount;
                } else {
                    milestoneoccur = 0;
                }
                Cus = removeLastChar(Cus, ',');
                if (milestoneoccur > 54) {
                    milestoneoccur = $('#txtMilestoneOccurrenceCount').val();
                    $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                    $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                    $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
                    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                        userFlag = true;
                    } else {
                        userFlag = false;
                    }
                }
                milestoneRecurCusString = Cus;
            } else if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
                var newstartrecdate = new Date(listMilestoneNewStartDate);
                milestoneRecur = "Monthly";
                var selectedstartdateNewCustom = new Date(listMilestoneNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listMilestoneNewEndDate);
                var occnew = 0;
                if (reced >= newstartrecdate) {
                    while (reced >= newstartrecdate) {
                        newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlMilestoneRepeatMonthly option:selected").val())));
                        occnew = parseInt(occnew) + parseInt(1);
                    }
                    milestoneoccur = occnew;
                } else {
                    milestoneoccur = 0;
                }
                if (milestoneoccur > 54) {
                    milestoneoccur = $('#txtMilestoneOccurrenceCount').val();
                    $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                    $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                    $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
                    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                        userFlag = true;
                    } else {
                        userFlag = false;
                    }
                }
                milestoneRecurCusString = recst.getDate();
            } else {
                var newstartrecdate = new Date(listMilestoneNewStartDate);
                milestoneRecur = "Yearly";
                var selectedstartdateNewCustom = new Date(listMilestoneNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listMilestoneNewEndDate);
                var occnew = 0;
                if (reced >= newstartrecdate) {
                    while (reced >= newstartrecdate) {
                        newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                        occnew = parseInt(occnew) + parseInt(1);
                    }
                    milestoneoccur = occnew;
                } else {
                    milestoneoccur = 0;
                }
                if (milestoneoccur > 54) {
                    milestoneoccur = $('#txtMilestoneOccurrenceCount').val();
                    $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                    $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                    $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
                    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                        userFlag = true;
                    } else {
                        userFlag = false;
                    }
                }
                milestoneRecurCusString = recst.getFullYear();
            }
            startDateNew = new Date(Number(recst.getFullYear()), Number(recst.getMonth()), Number(recst.getDate()), Number(00), Number(00), Number(00), Number(00));
            startDateNew = formatDate(startDateNew);
        } else {
            occurences = $("#txtMilestoneOccurrenceCount").val();
            milestoneRecur = $("#ddlMilestoneOccurencess").val();
            milestoneRecurCusString = "";
            if (customstring != "") {
                milestoneRecurCusString = customstring;
            } else {
                $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                    milestoneRecurCusString += (this.value) + ",";
                });
                milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
            }
            startDateNew = formatDate(listMilestoneNewStartDate);
        }
        if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlMilestoneRepeatMonthly option:selected").val();
        }
        if (milestoneoccur > 0) {
            getOcurrenceValuesForMilestone(milestoneRecur, milestoneoccur, startDateNew, milestoneRecurCusString, customstringnew)
        } else {
            swal("", "contract is expired by selected date.");
        }
    } else {
        occurences = $("#txtMilestoneOccurrenceCount").val();
        milestoneRecur = $("#ddlMilestoneOccurencess").val();
        milestoneRecurCusString = "";
        if (customstring != "") {
            milestoneRecurCusString = customstring;
        } else {
            $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                milestoneRecurCusString += (this.value) + ",";
            });
            milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
        }
        startDateNew = formatDate(listMilestoneNewStartDate);
        if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlMilestoneRepeatMonthly option:selected").val();
        }
        if (parseInt(occurences) == 0 || occurences == "" || occurences == null) {
            occurences = 1;
        }
        getOcurrenceValuesForMilestone(milestoneRecur, occurences, startDateNew, milestoneRecurCusString, customstringnew);
    }
}

function getOcurrenceValuesForMilestone(recurence, occurences, startDateNew, recurenceCustomString, strmonthly) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/ocurrencedates?ocurrence=' + recurence + '&iOcurrence=' + occurences + '&dtstart=' + startDateNew + '&ocurrencestring=' + recurenceCustomString + '&strmonthly=' + strmonthly,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (folder) {
            listMilestoneNewData = folder;
            var Startdate = new Date(folder.StartDate);
            var Enddate = new Date(folder.LastDate);
            var SMonth = Startdate.getMonth() + 1;
            var EMonth = Enddate.getMonth() + 1;
            var Ocurrs = folder.Values != null ? folder.Values.length : 1;
            milestoneoccur = Ocurrs;
            milestoneRecur = recurence;
            milestoneRecurCusString = recurenceCustomString;
            var dtStartdate = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                dtStartdate = moment(new Date(folder.StartDate)).format('MM/DD/YYYY');
            } else {
                dtStartdate = moment(new Date(folder.StartDate)).format(localStorage.AppDateFormat);
            }
            var dtEnddate = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                dtEnddate = moment(new Date(folder.LastDate)).format('MM/DD/YYYY');
            } else {
                dtEnddate = moment(new Date(folder.LastDate)).format(localStorage.AppDateFormat);
            }
            $('#MilestoneOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + Ocurrs + " instances)")
        },
        error: function (data) {
            isExist = false;
        }
    });
}

function allowNumericsNewMonthly(field) {
    $(field).keypress(function (e) {
        var fieldValue = $(this).val();
        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
            return false;
        }
        if (fieldValue == "") {
            fieldValue = 0;
        }
        if (e.which != 8 && e.which != 0) {
            if (typeof (String.fromCharCode(e.which)) != "undefined")
                fieldValue += String.fromCharCode(e.which);
            if (parseInt(fieldValue) > parseInt(dynamicOccCount)) {
                return false;
            }
        }
    });
}

function BindContractRoles(item) {
    //RoleNames
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractrolesbytype?type=' + item.ContractType,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            if (data != null && data.length != 0) {
                if (vUserListG == '') {
                    vUserListG = GetUserList();
                }
                //  var rolesetting = data[0].ContractRoleSetting;
                var html = '';
                var html_view = '';
                //if (rolesetting !== "") {

                //    var rolesetting = data[0].ContractRoleSetting.split(';');
                var ddllt = [];
                ContractRoles = [];
                $(data).each(function (i, item) {
                    if (item != null) {
                        var Fieldname = item.ContractRoleName;
                        var FieldDisplay = item.ContractRoleDisplayName;
                        var FieldPermi = item.PermissionLabel;
                        var FieldisDeleted = item.isDeleted;

                        //Remove Existing
                        if ($("#view_" + Fieldname).length > 0)
                            $("#view_" + Fieldname).parent().remove();
                        if ($("select#" + Fieldname).length > 0)
                            $("select#" + Fieldname).parent().parent().parent().remove();

                        //For New People
                        if (!FieldisDeleted) {
                            html += ' <tr>';
                            html += '   <td class="f_head">' + FieldDisplay + '</td>';
                            html += '  <td class="labelleft width60">';
                            html += '   <div class="invite-Peop-mul-sel">';
                            html += '       <select id="' + Fieldname + '" multiple="multiple" title="" data-permission="' + FieldPermi + '" class="chosenmulti ContractRoleType" data-placeholder="Select User(s)" style="width:49.5%;"></select>';
                            html += '    </div>';
                            html += '  </td>';
                            ddllt.push(Fieldname);
                        }
                        ContractRoles.push([Fieldname, FieldPermi, FieldDisplay, FieldisDeleted]);
                        //For New People View
                        html_view += ' <tr>';
                        if (FieldisDeleted) {
                            html_view += '   <td height="10" align="left" valign="top" class="content-text clr999" style="color:#f54444;" title="This Contract Role is no longer available.">' + FieldDisplay + '</td>';
                            html_view += '  <td height="10" align="left" valign="top" class="content-text" id="view_' + Fieldname + '"  style="color:#f54444;" title="This Contract Role is no longer available.">';
                        } else {
                            html_view += '   <td height="10" align="left" valign="top" class="content-text clr999">' + FieldDisplay + '</td>';
                            html_view += '  <td height="10" align="left" valign="top" class="content-text" id="view_' + Fieldname + '">';
                        }
                        html_view += '  </td>';
                    }
                });

                $('#tblPeople > tbody > tr').eq(6).after(html);
                $('#tblAddNewPeopleView > tbody > tr').eq(6).after(html_view);
                $(ddllt).each(function () {
                    var item = this.toString();
                    $("#" + item).append(vUserListG);
                    $("#" + item).chosen();
                });
                BindContractRolesMetadata();
                // }

            }
        }
    });
}
var RecvMetadatavaluetofinalize = '';

function BindContractRolesMetadata() {
    var vMetadatavaluetofinalize;
    var metadataFields = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        //async: false,
        success: function (mainmetadataFields) {
            vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
            RecvMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
            var control = '';
            var control_view = '';
            $(ContractRoles).each(function () {
                $('.CRole').remove();
                var itemfield = $(this)[0];
                var itemfieldDisplay = $(this)[2];
                var itemfieldPermission = $(this)[1];
                var itemisdeleted = $(this)[3];
                FullContractroleUser = [];
                ReadContractroleUser = [];
                ReadWriteContractroleUser = [];
                if ($(vMetadatavaluetofinalize).find(itemfield).text() != "undefined" && $(vMetadatavaluetofinalize).find(itemfield).text() != null && $(vMetadatavaluetofinalize).find(itemfield).text() != "") {
                    if (itemisdeleted) {
                        control += '<tr class="CRole" title="This Contract Role is no longer available.">';
                        control += '<td height="10" align="left" valign="top" class="content-text width40" style="color:#f54444;">' + itemfieldDisplay + '</td>';
                        control += '<td height="10" align="left" valign="top" class="content-text width58 contractroles" data-name="' + itemfield + '" style="color:#f54444;">';
                    } else {
                        control += '<tr class="CRole">';
                        control += '<td height="10" align="left" valign="top" class="content-text clr999 width40">' + itemfieldDisplay + '</td>';
                        control += '<td height="10" align="left" valign="top" class="content-text width58 contractroles" data-name="' + itemfield + '">';
                    }

                    // control += '<td height="10" align="left" valign="top" class="content-text width58">' + $(vMetadatavaluetofinalize).find(itemfield).text() + '</td>';
                    var eachus = $(vMetadatavaluetofinalize).find(itemfield).text().split(';');
                    $(eachus).each(function () {
                        //manoj
                        if ($.trim(this.toString()) != "") {
                            //manoj
                            if (itemfieldPermission == "Full Control") {
                                if ($.inArray(this.toString().trim(), FullContractroleUser) == -1) {
                                    FullContractroleUser.push(this.toString().trim());
                                }
                            } else if (itemfieldPermission == "Read Only") {
                                if ($.inArray(this.toString().trim(), ReadContractroleUser) == -1) {
                                    ReadContractroleUser.push(this.toString().trim());
                                }
                            } else if (itemfieldPermission == "Read/Write") {
                                if ($.inArray(this.toString().trim(), ReadWriteContractroleUser) == -1) {
                                    ReadWriteContractroleUser.push(this.toString().trim());
                                }
                            }
                            if (itemisdeleted) {
                                control += ' <span class="Link_UserProfile">' + this.toString().trim() + '</span>; ';

                                //For New People View
                                control_view += '<span class="Link_UserProfile">' + this.toString().trim() + '</span>; ';
                                $("#view_" + itemfield).empty();
                                $("#view_" + itemfield).append(control_view);
                            } else {
                                if (vActiveUsers.length > 0 && vActiveUsers.indexOf(this.toString().trim()) < 0) {
                                    control += ' <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(this.toString().trim()) + '\')" class="Link_UserProfile disabled_item_link" title="This user is no longer available.">' + this.toString().trim() + '</a>; ';

                                    //For New People View
                                    control_view += '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(this.toString().trim()) + '\')" class="Link_UserProfile disabled_item_link" title="This user is no longer available.">' + this.toString().trim() + '</a>; ';
                                    $("#view_" + itemfield).empty();
                                    $("#view_" + itemfield).append(control_view);
                                } else {
                                    control += '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(this.toString().trim()) + '\')" class="Link_UserProfile">' + this.toString().trim() + '</a>; ';

                                    //For New People View
                                    control_view += '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + escape(this.toString().trim()) + '\')" class="Link_UserProfile">' + this.toString().trim() + '</a>; ';
                                    $("#view_" + itemfield).empty();
                                    $("#view_" + itemfield).append(control_view);
                                }
                            }
                        }
                    });
                    control += ' </td>';
                    control += '</tr>';
                } else {
                    if (itemisdeleted) {
                        $("#view_" + itemfield).parent().remove();
                        //control += '<tr class="CRole" title="This Contract Role is no longer available.">';
                        //control += '<td height="10" align="left" valign="top" class="content-text width40" style="color:#f54444;">' + itemfieldDisplay + '</td>';
                        //control += '<td height="10" align="left" valign="top" class="content-text width58" style="color:#f54444;">Not Available</td>';
                        //control += '</tr>';
                    } else {
                        control += '<tr class="CRole">';
                        control += '<td height="10" align="left" valign="top" class="content-text clr999 width40">' + itemfieldDisplay + '</td>';
                        control += '<td height="10" align="left" valign="top" class="content-text width58">Not Available</td>';
                        control += '</tr>';

                        //For New People View
                        $("#view_" + itemfield).empty();
                        $("#view_" + itemfield).append("Not Available");
                    }

                }
                control_view = '';
            });

            $('#PeopleTable').append(control);
        },
    });
}

var jqXHR = "";

function BindPeople() {
    $("#ddlSendReminderTo").append('<option value="{Contract Managers}">{Contract Managers}</option>');
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $("#ddlSendReminderTo").append('<option value="{Project Managers}">{Project Managers}</option>');
    }
    if (allUsers.length > 0) {
        BindPeopleDropdown(allUsers);
    } else {
        jqXHR = $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/coreentity',
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            success: function (data) {
                BindPeopleDropdown(data);
            },
            error: function (data) { }
        });
    }
}

function BindPeopleDropdown(data) {
    var roleoption = '';
    var rolestype = SettingUserRole;
    $(SettingUserRole).find('Roles').each(function () {
        var role = $(this).find('Role').text();
        roleoption += '<option value="[' + role + ']">[' + role + ']</option>';
    });
    $("#ddlSendRenewReminderTo").append(roleoption);
    $("#ddlSendReminderToNew").append(roleoption);
    $("#ddlDocRemindTo").append(roleoption);
    $("#ddlDocRemindToEdit").append(roleoption);
    $("#ddlSendReminderToObligationNew").append(roleoption);
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (!(vAccFeat.length > 0)) {
        var valueRem = "{Project Managers}";
        $("#ddlSendRenewReminderTo option[value='" + valueRem + "']").remove();
        $("#ddlSendReminderToNew option[value='" + valueRem + "']").remove();
        $("#ddlDocRemindTo option[value='" + valueRem + "']").remove();
        $("#ddlDocRemindToEdit option[value='" + valueRem + "']").remove();
        $("#ddlSendReminderToObligationNew option[value='" + valueRem + "']").remove();
    }

    var v = $(data).length;
    var datalenght = data.length;
    for (var i = 0; i < datalenght; i++) {
        var item = data[i];
        var sRowKey = item.RowKey;
        var sUserName = item.UserName;
        var sUserType = item.UserType;
        var sEmail = item.EmailID;
        if (sUserType.indexOf("Global Contract Owner") >= 0) {
            arrGlobalUser.push(sUserName);
        } else {
            arrUser.push(sUserName);
        }
        var articleemailuser = '<option value="' + sUserName + '" data-emailvalue="' + sEmail + '">' + sUserName + '</option>';
        var article = '<option value="' + sUserName + '">' + sUserName + '</option>';
        $("#ddlContractManagers").append(article);
        $("#ddlReviewers").append(article);
        $("#ddlApproversNew").append(article);
        $("#ddlSignees").append(article);
        $("#ddlMilestoneOwner").append(article);
        $("#ddlObligationOwner").append(article);
        $("#ddlSendTo").append(article);
        $("#ddlSendToCancel").append(article);
        //$("#ddlSendToAbort").append(article);In case we add status instead of Cancel to Abort in My Pipline
        $("#ddlDocumentShareInternal").append(articleemailuser);
        $("#ddlContractShareInternal").append(articleemailuser);

        //Obligation Newly Added

        $("#ddlObligationNewOwner").append(article);

        $("#ddlMilestoneOwnerNew").append(article);
        $("#ddlSendReminderToNew").append(article);
        //$("#ddlSendUserToRenewalConfirmUsers").append(article);
        //$("#ddlSendUserToRenewalConfirmUsersCC").append(article);
        $("#ddlRenewalNotfInternalNew").append(article);
        $("#ddlReadOnly").append(article);
        $("#ddlReadWrite").append(article);
        $("#ddlFullControl").append(article);

        $("#ddlCC").append(article);
        $("#ddlWorkflowCC").append(article);
        $("#ddlWorkflowCCRenew").append(article);
        $("#ddlSendReminderTo").append(article);
        $("#ddlRenewalNotfInternal").append(article);


        $("#ddlRequestedBy").append(article);
        $("#ddlSendRenewReminderTo").append(article);
        $("#ddlSendReminderToObligationNew").append(article);


        $("#ddlDocRemindTo").append(article);
        $("#ddlDocRemindToEdit").append(article);
        $("#ddlAuthorCreate").append(article);
        $("#ddlAuthorEdit").append(article);

        if (contractItem.ContractManagers.indexOf(sUserName) > -1)
            $("#ddlOwnersRenew").append('<option value="' + sUserName + '" selected>' + sUserName + '</option>');
        else
            $("#ddlOwnersRenew").append('<option value="' + sUserName + '" disabled>' + sUserName + '</option>');
    }
    $("#ddlDocumentList").chosen();

    $("#ddlContractManagers").chosen();
    $("#ddlReviewers").chosen();
    $("#ddlApproversNew").chosen();
    $("#ddlSignees").chosen();
    $("#ddlMilestoneOwner").chosen();
    $("#ddlObligationOwner").chosen();
    $("#ddlDocumentShareInternal").chosen();
    $("#ddlContractShareInternal").chosen();
    //Newly added For Obligation New
    $("#ddlRenewalNotfInternalNew").chosen();
    $("#ddlObligationNewOwner").chosen();


    $("#ddlMilestoneOwnerNew").chosen();
    $("#ddlSendReminderToNew").chosen();
    $("#ddlSendTo").chosen();
    $("#ddlSendToCancel").chosen();
    //$("#ddlSendToAbort").chosen();In case we add status instead of Cancel to Abort in My Pipline

    $("#ddlCC").chosen();
    $("#ddlSendReminderTo").chosen();
    $("#ddlRenewalNotfInternal").chosen();
    $("#ddlReadOnly").chosen();
    $("#ddlReadWrite").chosen();
    $("#ddlFullControl").chosen();
    //$("#ddlSendUserToRenewalConfirmUsers").chosen();
    //$("#ddlSendUserToRenewalConfirmUsersCC").chosen();

    $("#ddlSendReminderToObligationNew").chosen();
    $("#ddlDocRemindTo").chosen();
    $("#ddlDocRemindToEdit").chosen();
    $("#ddlWorkflowCC").chosen();
    $("#ddlWorkflowCCRenew").chosen();
    $("#ddlRequestedBy").chosen();
    $("#ddlAuthorEdit").chosen();
    $("#ddlSendRenewReminderTo").chosen();

    $("#ddlOwnersRenew").chosen();

    $("#ddlAuthorCreate").chosen().trigger("chosen:updated");
    $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
        $('.result-selected').css('display', 'none');
    });

    if (localStorage.UserName != "") {
        GetValuesAndAutoPopulate("ddlAuthorCreate", localStorage.UserName);
    }


    //ENH-472 (In Contract, People & Permission tab displaying all the Global Contract Owners.)
    var userslist = [];
    var allGlobalContractOwners = $.grep(data, function (item, i) {
        return item.UserType.indexOf('Global Contract Owner') > -1;
    });

    if (allGlobalContractOwners.length <= 0) {
        $("#liContractGlobalOwnerNA").css('display', '');
        $("#spGlobalownwerView").text("Not Available");
    } else {
        var reslength = allGlobalContractOwners.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            usersarr = allGlobalContractOwners[i];
            usertitle = '';
            userDisable = '';
            if (vActiveUsers.indexOf(usersarr.UserName.trim()) < 0 && vActiveUsers.length > 0) {
                vUserClass = 'disabled_item_link';
                usertitle = "title='This user is no longer available.'";
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr.UserName.trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr.UserName.trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr.UserName.trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr.UserName.trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr.UserName.trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#liContractGlobalOwner").html(vUsers);
        $("#spGlobalownwerView").html(vUsers);
    }
    //ENH-472 In Contract, People & Permission tab displaying all the Global Contract Owners.
}


function GetContractValueSetting(contRecord) {
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "19" && n.Status == "ON");
    });
    $('#tblcontractvaluepopup tr.customfinancialfields').remove();
    $("#divfinancialsection").removeClass('col12');
    $("#divfinancialsection").removeClass('col4');
    if (vDocLibFeat.length == 0) {
        $("#divfinancialsection").addClass('col4');
        $("#divfinancialsection").html('<h3 class="f24"><span id="lblContractValue"></span><span id="lblContractCurrency" style="margin-left: 3px !important;"></span></h3><p class="sub-text">Contract Value</p>');
    } else {
        $("#divfinancialsection").addClass('col12');
        $("#divfinancialsection").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    }
    var vContractValueSetting = '';
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            //Authorize Signatory Enhancment
            setting_AuthorizeSign = data.AuthorizedSignatory;
            setting_AuthorizeSignRestriction = data.AuthSignatoryRestriction;
            //Authorize Signatory Enhancment
            SettingUserRole = data.UserRoleSetting; //Performance Optimization
            vDefaultAmendment = data.DefaultAmendment; //Performance Optimization
            oGeneralSettings = data;
            //ENH 440 Display Alerts for Missing information  
            if (data.DisplayMissingInformation == "Yes") {
                $("#tblDocumentMissing").css("display", "");
                $("#tblDocuments").css("display", "");
                $("#tblTermsMissing").css("display", "");
                $("#tblMilestoneMissing").css("display", "");
                $("#tblMilestones").css("display", "");
                $("#tblMetadataMissing").css("display", "");
                $("#tblRequired").css("display", "");
                $("#tblPeopleMissing").css("display", "");
                $("#tblPeoples").css("display", "");
                $("#tblActivity").css("display", "");
                $("#tblDescriptionMissing").css("display", "");
            } else {
                $("#tblDocumentMissing").css("display", "none");
                $("#tblDocuments").css("display", "none");
                $("#tblTermsMissing").css("display", "none");
                $("#tblMilestoneMissing").css("display", "none");
                $("#tblMilestones").css("display", "none");
                $("#tblMetadataMissing").css("display", "none");
                $("#tblRequired").css("display", "none");
                $("#tblPeopleMissing").css("display", "none");
                $("#tblPeoples").css("display", "none");
                $("#tblActivity").css("display", "none");
                $("#tblDescriptionMissing").css("display", "none");
                $(".clpendingaction").css("display", "none");
            }
            //ENH 440 Display Alerts for Missing information

            //$.when().done(function (x) {
            //    BindDataContractDropdownSettings(oGeneralSettings);
            //});


            //old section
            if (vDocLibFeat.length == 0) {
                vContractValueSetting = data.IsContractValueInBaseCurrency;
                if (vContractValueSetting == "Display Contract Values in Base Currency") {
                    if (data.CurrencyDisplayStyle == "UK") {
                        $('#lblContractValue').autoNumeric('init', {
                            vMax: '99999999999999999999.99'
                        });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init');
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                    } else if (data.CurrencyDisplayStyle == "CAN") {
                        $('#lblContractValue').autoNumeric('init', {
                            aSep: ' ',
                            aDec: '.',
                            vMax: '99999999999999999999.99'
                        });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', {
                            aSep: ' ',
                            aDec: '.'
                        });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                    } else if (data.CurrencyDisplayStyle == "EU") {
                        $('#lblContractValue').autoNumeric('init', {
                            aSep: '.',
                            aDec: ',',
                            vMax: '99999999999999999999.99'
                        });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', {
                            aSep: '.',
                            aDec: ','
                        });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                    }
                    if (contRecord.BaseContractValueCurrency != null) {
                        if (contRecord.BaseContractValueCurrency == "0") {
                            contRecord.BaseContractValueCurrency = "";
                        }
                        if (contRecord.BaseContractValueCurrency == "0") {
                            contRecord.BaseContractValueCurrency = "";
                        }
                        $("#lblContractCurrency").text(contRecord.BaseContractValueCurrency);
                        $("#lblContractCurrencyCurrent").text(contRecord.BaseContractValueCurrency);
                        ContractCurrencyType = 'base';
                    }
                } else {
                    ContractCurrencyType = 'actual';
                    if (data.CurrencyDisplayStyle == "UK") {
                        $('#lblContractValue').autoNumeric('init', {
                            vMax: '99999999999999999999.99'
                        });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init');
                        $('#txtContractValueCurrent').autoNumeric('set', contRecord.ContractValue)
                    } else if (data.CurrencyDisplayStyle == "CAN") {
                        $('#lblContractValue').autoNumeric('init', {
                            aSep: ' ',
                            aDec: '.',
                            vMax: '99999999999999999999.99'
                        });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', {
                            aSep: ' ',
                            aDec: '.'
                        });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                    } else if (data.CurrencyDisplayStyle == "EU") {
                        $('#lblContractValue').autoNumeric('init', {
                            aSep: '.',
                            aDec: ',',
                            vMax: '99999999999999999999.99'
                        });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', {
                            aSep: '.',
                            aDec: ','
                        });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                    }
                    if (contRecord.ContractCurrency != null) {
                        if (contRecord.ContractCurrency == "0") {
                            contRecord.ContractCurrency = "";
                        }
                        $("#lblContractCurrency").text(contRecord.ContractCurrency);
                        $("#lblContractCurrencyCurrent").text(contRecord.ContractCurrency);
                    }
                }
                if (data.CurrencyDisplayStyle == "UK") {
                    vCurrencyDisplayStyle = "UK";
                } else if (data.CurrencyDisplayStyle == "CAN") {
                    vCurrencyDisplayStyle = "CAN";
                } else if (data.CurrencyDisplayStyle == "EU") {
                    vCurrencyDisplayStyle = "EU";
                } else if (data.CurrencyDisplayStyle == "IND") {
                    vCurrencyDisplayStyle = "IND";
                }
            } else {
                //old section

                //New Section
                //manoj
                cutomFinancialFields = [];
                var financialtable = "";
                var financialtableedit = "";
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + encodeURIComponent(contRecord.ContractType),
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    cache: false,
                    //async: false,//Performance Optimization
                    success: function (metadataFields) {
                        if (metadataFields != null && metadataFields.length > 0) {
                            cutomFinancialFields = $.grep(metadataFields, function (n, i) {
                                return (n.CustomFieldsGroupName == "FinancialCustomFields");
                            });
                            if (cutomFinancialFields.length > 0) {
                                financialtable = "<table style='width: 420px;'><thead><tr><th></th><th>Base Currency</th><th>Actual Currency</th></tr></thead><tbody>";
                                $(cutomFinancialFields).each(function (i, itemfield) {
                                    financialtable += "<tr><td>" + itemfield.FieldDisplayName + "</td><td><span id='lblBase" + itemfield.FieldName + "'></span><span class='basecurrencyformat' id='lblBase" + itemfield.FieldName + "Currency'></span></td><td><span id='lblActual" + itemfield.FieldName + "'></span><span class='actualcurrencyformat' id='lblActual" + itemfield.FieldName + "Currency'></span></td></tr>";
                                    financialtableedit += "<tr class='customfinancialfields'><td class='f_head'>" + itemfield.FieldDisplayName;
                                    financialtableedit += (itemfield.Newform == "Required" || itemfield.Finalizingfrom == "Required" || itemfield.Closeoutform == "Required") ? "<small class='required'>*</small></td><td class='labelright f_list'><input id='txt" + itemfield.FieldName + "popup' name=" + itemfield.FieldName + " title=" + itemfield.FieldDisplayName + " maxlength='15' type='text' class='f_inpt width90 validelement validcontractvalue customfinancialupdate' /></td></tr>" : "</td><td class='labelright f_list'><input id='txt" + itemfield.FieldName + "popup' name=" + itemfield.FieldName + " title=" + itemfield.FieldDisplayName + " maxlength='15' type='text' class='f_inpt width90 validcontractvalue customfinancialupdate' /></td></tr>"
                                    financialtableedit += "<tr class='customfinancialfields'><td class='f_head' style='height:35px;'>" + itemfield.FieldDisplayName + " In Base Currency</td><td class='labelright'><label id='lbl" + itemfield.FieldName + "InBaseCurency' style='font-size:15px;' /></td></tr>"
                                });
                                financialtable += "</tbody></table>";
                            }
                        }
                        //Performance Optimization
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
                            type: 'GET',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey
                            },
                            cache: false,
                            success: function (mainmetadataFields) {
                                vMetadatavaluetobindcutomFinancial = $(mainmetadataFields).find('Metadata');
                                //manoj
                                $("#divfinancialsection").html('<h3 class="f24"><span id="lblContractValue"></span><span id="lblContractCurrency" style="margin-left: 3px !important;" ></span></h3><p class="sub-text">Contract Value</p><div id="dvcontractfinacialgroup" style=" text-align: center; margin-left:150px"></div>');
                                $("#dvcontractfinacialgroup").html(financialtable);
                                if (typeof (financialtableedit) != "undefined" && financialtableedit != null && financialtableedit != "") {
                                    $(financialtableedit).insertBefore("#trcustomcontractvaluepopup");
                                }
                                financialtable = "";
                                financialtableedit = "";
                                vContractValueSetting = data.IsContractValueInBaseCurrency;
                                if (vContractValueSetting == "Display Contract Values in Base Currency") {
                                    if (data.CurrencyDisplayStyle == "UK") {
                                        $('#lblContractValue').autoNumeric('init', {
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                                        $('#txtContractValueCurrent').autoNumeric('init');
                                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                                    } else if (data.CurrencyDisplayStyle == "CAN") {
                                        $('#lblContractValue').autoNumeric('init', {
                                            aSep: ' ',
                                            aDec: '.',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                                        $('#txtContractValueCurrent').autoNumeric('init', {
                                            aSep: ' ',
                                            aDec: '.'
                                        });
                                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                                    } else if (data.CurrencyDisplayStyle == "EU") {
                                        $('#lblContractValue').autoNumeric('init', {
                                            aSep: '.',
                                            aDec: ',',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                                        $('#txtContractValueCurrent').autoNumeric('init', {
                                            aSep: '.',
                                            aDec: ','
                                        });
                                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                                    }
                                    //if (contRecord.BaseContractValueCurrency != null) {
                                    //    $("#lblContractCurrencyCurrent").text(contRecord.BaseContractValueCurrency);
                                    //    ContractCurrencyType = 'base';
                                    //}
                                    if (contRecord.BaseContractValueCurrency != null) {
                                        if (contRecord.BaseContractValueCurrency == "0") {
                                            contRecord.BaseContractValueCurrency = "";
                                        }
                                        $("#lblContractCurrency").text(contRecord.BaseContractValueCurrency);
                                        $("#lblContractCurrencyCurrent").text(contRecord.BaseContractValueCurrency);
                                        ContractCurrencyType = 'base';
                                    }
                                } else {
                                    ContractCurrencyType = 'actual';
                                    if (data.CurrencyDisplayStyle == "UK") {
                                        $('#lblContractValue').autoNumeric('init', {
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                                        $('#txtContractValueCurrent').autoNumeric('init');
                                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                                    } else if (data.CurrencyDisplayStyle == "CAN") {
                                        $('#lblContractValue').autoNumeric('init', {
                                            aSep: ' ',
                                            aDec: '.',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                                        $('#txtContractValueCurrent').autoNumeric('init', {
                                            aSep: ' ',
                                            aDec: '.'
                                        });
                                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                                    } else if (data.CurrencyDisplayStyle == "EU") {
                                        $('#lblContractValue').autoNumeric('init', {
                                            aSep: '.',
                                            aDec: ',',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                                        $('#txtContractValueCurrent').autoNumeric('init', {
                                            aSep: '.',
                                            aDec: ','
                                        });
                                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                                    }
                                    //if (contRecord.ContractCurrency != null) {
                                    //    $("#lblContractCurrencyCurrent").text(contRecord.ContractCurrency);
                                    //}
                                    if (contRecord.ContractCurrency != null) {
                                        if (contRecord.ContractCurrency == "0") {
                                            contRecord.ContractCurrency = "";
                                        }
                                        $("#lblContractCurrency").text(contRecord.ContractCurrency);
                                        $("#lblContractCurrencyCurrent").text(contRecord.ContractCurrency);
                                    }
                                }
                                if (data.CurrencyDisplayStyle == "UK") {
                                    vCurrencyDisplayStyle = "UK";
                                } else if (data.CurrencyDisplayStyle == "CAN") {
                                    vCurrencyDisplayStyle = "CAN";
                                } else if (data.CurrencyDisplayStyle == "EU") {
                                    vCurrencyDisplayStyle = "EU";
                                } else if (data.CurrencyDisplayStyle == "IND") {
                                    vCurrencyDisplayStyle = "IND";
                                }

                                //manoj

                                //For  Base and Actual Currency
                                $(cutomFinancialFields).each(function (i, itemfield) {

                                    $('#txt' + itemfield.FieldName + 'popup').keypress(function (e) {
                                        if (e.keyCode == 13)
                                            return false;
                                    });

                                    if (vCurrencyDisplayStyle == "UK") {
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('init', {
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                        $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('init', {
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        if (contRecord.ContractCurrency == "0") {
                                            contRecord.ContractCurrency = "";
                                        }
                                        $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                        //popupbind
                                        if (itemfield.FieldName != "ContractValue") {
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                                                vMax: '99999999999999999999.99'
                                            });
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init');
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        }
                                        //popupbind
                                    } else if (vCurrencyDisplayStyle == "CAN") {
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('init', {
                                            aSep: ' ',
                                            aDec: '.',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                        $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('init', {
                                            aSep: ' ',
                                            aDec: '.',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        if (contRecord.ContractCurrency == "0") {
                                            contRecord.ContractCurrency = "";
                                        }
                                        $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                        //popupbind
                                        if (itemfield.FieldName != "ContractValue") {
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                                                aSep: ' ',
                                                aDec: '.',
                                                vMax: '99999999999999999999.99'
                                            });
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', {
                                                aSep: ' ',
                                                aDec: '.'
                                            });
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        }
                                        //popupbind
                                    } else if (vCurrencyDisplayStyle == "EU") {
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('init', {
                                            aSep: '.',
                                            aDec: ',',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                        $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('init', {
                                            aSep: '.',
                                            aDec: ',',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        if (contRecord.ContractCurrency == "0") {
                                            contRecord.ContractCurrency = "";
                                        }
                                        $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                        //popupbind
                                        if (itemfield.FieldName != "ContractValue") {
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                                                aSep: '.',
                                                aDec: ',',
                                                vMax: '99999999999999999999.99'
                                            });
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', {
                                                aSep: '.',
                                                aDec: ','
                                            });
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        }
                                        //popupbind
                                    } else if (vCurrencyDisplayStyle == "IND") {
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('init', {
                                            dGroup: '2',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                        $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('init', {
                                            dGroup: '2',
                                            vMax: '99999999999999999999.99'
                                        });
                                        $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        if (contRecord.ContractCurrency == "0") {
                                            contRecord.ContractCurrency = "";
                                        }
                                        $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                        //popupbind
                                        if (itemfield.FieldName != "ContractValue") {
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                                                dGroup: '2',
                                                vMax: '99999999999999999999.99'
                                            });
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                            $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', {
                                                dGroup: '2'
                                            });
                                            $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                        }
                                        //popupbind
                                    }
                                });
                                //var innertextvalue = null;
                                if (contRecord.ContractCurrency != null) {
                                    //$(".actualcurrencyformat").text(contRecord.ContractCurrency);
                                    //$(".basecurrencyformat").text(contRecord.BaseContractValueCurrency);
                                }
                                //For Base and Actual Currency
                                //FinancialFields = [];
                                //manoj
                            },
                        });
                        //Performance Optimization
                    },
                    error: function (data) { }
                });
                //manoj
            }
            //New Section
        }
    });
}

var removeLastChar = function (value, char) {
    var lastChar = value.slice(-1);
    if (lastChar == char) {
        value = value.slice(0, -1);
    }
    return value;
}

////function BindMilestoneTypes() {
////    $.ajax({
////        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestonetypes',
////        type: 'GET',
////        dataType: 'json',
////        headers: {
////            'eContracts-ApiKey': localStorage.APIKey
////        },
////        cache: false,
////        success: function (documenttypes) {
////            $(documenttypes).each(function (i, item) {
////                $("#ddlMilestoneType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
////                $("#ddlMilestoneTypeNew").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
////            });
////        }
////    });
////}

$("#ddlMilestoneNewStatus").change(function (obj) {
    var milestoneStatus = $("#ddlMilestoneNewStatus").val();
    if (milestoneStatus == "Complete") {
        var CDate = new Date();
        CDate = formatDate(CDate);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
        } else {
            CDate = moment(new Date(CDate)).utc().format(localStorage.AppDateFormat);
        }
        $("#ulMilestoneNewCompletedDate").css('display', '');
        $('#dtMilestoneNewCompletedDate').addClass('validelement');
        $('#dtMilestoneNewCompletedDate').addClass('validdate');
        $('#dtMilestoneNewCompletedDate').val(CDate);
    } else {
        $("#ulMilestoneNewCompletedDate").css('display', 'none');
        $('#dtMilestoneNewCompletedDate').removeClass('validelement');
        $('#dtMilestoneNewCompletedDate').removeClass('validdate');
        $('#dtMilestoneNewCompletedDate').val("");
    }
});

function enableMilestoneSwitch() {
    $("#AlertMile").val('Yes').change();
    if (IsPipeline) {
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn OFF reminders for milestone notifications, click <a href='javascript:void(0);' id='disableSwitch' onclick='disableMilestoneSwitch()'>Disable</a></span>")
    }
}

function disableMilestoneSwitch() {
    $("#AlertMile").val('No').change();
    if (IsPipeline) {
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")
    }
}

$("#AlertMile").change(function () {
    if (IsPipeline) {
        if ($(this).val() == "Yes") {
            $("#reminderEnable").empty();
            $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn OFF reminders for milestone notifications, click <a href='javascript:void(0);' id='disableSwitch' onclick='disableMilestoneSwitch()'>Disable</a></span>")
        } else if ($(this).val() == "No") {
            $("#reminderEnable").empty();
            $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")
        }
    }
});

function EnableAllMilestones(contractid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/enableallmilestones?contractid=' + contractid,
        type: 'PUT',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        cache: false,
        success: function (result) { }
    });
}

function MarkAsCompleted() {
    if ($("#tblMetadataDetailForOwner").find("ul")[0].className.indexOf("Milestone") > -1) {
        var milestoneID = ($("#tblMetadataDetailForOwner ul li#milestoneID").children()[1].textContent != "" ? $("#tblMetadataDetailForOwner ul li#milestoneID").children()[1].textContent.trim() : "");
        var milestoneTitle = ($("#tblMetadataDetailForOwner ul li#milestoneTitle span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul li#milestoneTitle span")[0].textContent.trim() : "");
        var formDataStatusMile = new FormData();
        formDataStatusMile.append("MilestoneIDs", milestoneID);
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/changestatus?status=Complete',
            type: 'PUT',
            dataType: 'json',
            data: formDataStatusMile,
            contentType: false,
            processData: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                username: localStorage.UserName
            },
            cache: false,
            success: function (result) {
                BindMilestone();
                swal({
                    title: '',
                    text: "Thanks, Milestone <span style=\"font-weight:700\">'" + milestoneTitle + "'</span> has been completed successfully.",
                    showCancelButton: false,
                    confirmButtonText: 'OK',
                    html: true
                });
                $("#loadingPage").fadeOut();
            },
            error: function (status) {
                swal("", "Could not mark milestone as complete.");
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        var vObligationID = ($("#tblMetadataDetailForOwner ul li#obligationID span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul li#obligationID span")[0].textContent.trim() : "");
        var vObligationTitle = ($("#tblMetadataDetailForOwner ul#obligationTitle li span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul#obligationTitle li span")[0].textContent.trim() : "");
        var vObligationText = ($("#tblMetadataDetailForOwner ul li#ObligationTEXT span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul li#ObligationTEXT span")[0].textContent.trim() : "");
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?obligationtext=' + vObligationText + '&obligationId=' + vObligationID,
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            cache: false,
            async: false,
            success: function (catalogs) {
                if (catalogs != null && catalogs.length > 0) {
                    var catalogitems = "";
                    catalogitems = $.grep(catalogs, function (p) {
                        return p.ObligationCatalogStatus != "Complete" && p.ObligationCatalogStatus != "Cancelled";
                    })
                        .map(function (p) {
                            return p
                        });
                    if (catalogitems != null && catalogitems != "") {
                        swal("", "Could not mark obligation as complete, Related products need to complete.");
                        $("#loadingPage").fadeOut();
                    } else {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + vObligationID + '&obligationstatus=' + 'Complete',
                            type: 'POST',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                username: localStorage.UserName
                            },
                            cache: false,
                            success: function (person) {
                                BindObligationsNew(getParameterByName('ContractID'));
                                swal({
                                    title: '',
                                    text: "Thanks, Obligation <span style=\"font-weight:700\">'" + vObligationTitle + "'</span> has been completed successfully.",
                                    showCancelButton: false,
                                    confirmButtonText: 'OK',
                                    html: true
                                });
                                $("#loadingPage").fadeOut();
                            },
                            error: function (status) {
                                swal("", "Could not mark obligation as complete.");
                                $("#loadingPage").fadeOut();
                            }
                        });
                    }
                } else {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + vObligationID + '&obligationstatus=' + 'Complete',
                        type: 'POST',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName
                        },
                        cache: false,
                        success: function (person) {
                            BindObligationsNew(getParameterByName('ContractID'));
                            swal({
                                title: '',
                                text: "Thanks, Obligation <span style=\"font-weight:700\">'" + vObligationTitle + "'</span> has been completed successfully.",
                                showCancelButton: false,
                                confirmButtonText: 'OK',
                                html: true
                            });
                            $("#loadingPage").fadeOut();
                        },
                        error: function (status) {
                            swal("", "Could not mark obligation as complete.");
                            $("#loadingPage").fadeOut();
                        }
                    });
                }
            },
            error: function (catalogs) {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + vObligationID + '&obligationstatus=' + 'Complete',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        BindObligationsNew(getParameterByName('ContractID'));
                        swal({
                            title: '',
                            text: "Thanks, Obligation <span style=\"font-weight:700\">'" + vObligationTitle + "'</span> has been completed successfully.",
                            showCancelButton: false,
                            confirmButtonText: 'OK',
                            html: true
                        });
                        $("#loadingPage").fadeOut();
                    },
                    error: function (status) {
                        swal("", "Could not mark obligation as complete.");
                        $("#loadingPage").fadeOut();
                    }
                });
            }
        });
    }
}

function getMilestoneOwners(milestoneOwners) {
    $("#loadingPage").fadeIn();
    var msOwners = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/ownersfromgroup?contractid=' + getParameterByName('ContractID') + '&milestoneonwers=' + milestoneOwners,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: false,
        success: function (owners) {
            if (owners != null || owners != "") {
                for (var key in owners) {
                    if (owners.hasOwnProperty(key)) {
                        msOwners.push(key);
                    }
                }
            }
        },
        error: function (owners) { }
    });
    return msOwners;
}



function BindSystemMilestones(Contract) {
    articleSystemMileStone = '';
    delayedTermDates = "";
    var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
    var vTermType = Contract.ContractTermType;
    var beforeDaysSort = [];
    beforeDaysSort = Object(beforeDaysSort)
    var afterDaysSort = [];
    afterDaysSort = Object(afterDaysSort)
    ReminderConditionCheck(beforeDaysSort, afterDaysSort, Contract);
    if (vTermType == "Fixed Term") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Start / Effective Date", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Start / Effective Date</td></tr>";
        }
        if (contractItem.NextEvaluationDate != null) {
            var dateValue = Contract.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Next Evaluation Date", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Next Evaluation Date</td></tr>";
        }
        if (contractItem.EndDate != null) {
            var dateValue = Contract.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("End Date (Overall Contract Record)", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing End Date</td></tr>";
        }
    } else if (vTermType == "Evergreen / Perpetual") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Start / Effective Date", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Start / Effective Date</td></tr>";
        }
        if (contractItem.NextEvaluationDate != null) {
            var dateValue = Contract.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Next Evaluation Date", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Next Evaluation Date</td></tr>";
        }
    } else if (vTermType == "Renewable") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Initial Term Start Date", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Initial Term Start Date</td></tr>";
        }
        if (contractItem.InitialTermEndDate != null) {
            var dateValue = Contract.InitialTermEndDate != null ? (Contract.InitialTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : "";
            SystemMileStoneArticle("Initial Term End Date", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Initial Term End Date</td></tr>";
        }
        if (contractItem.EndDate != null) {
            var dateValue = Contract.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("End Date (Overall Contract Record)", dateValue, beforeDaysSort, afterDaysSort);
        }
        if (contractItem.TermEndDate != null) {
            var dateValue = Contract.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Current Term Ends", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Current Term End Date</td></tr>";
        }
        if (contractItem.EffectiveDate != null) {
            var dateValue = Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Term Starts", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Current Term Start Date</td></tr>";
        }
    } else if (vTermType == "Executed / Performance") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Date of Execution / Performance", dateValue, beforeDaysSort, afterDaysSort);
        } else {
            delayedTermDates += "<tr><td class='f_head'>Missing Date of Execution / Performance</td></tr>";
        }
    } else {
        delayedTermDates += "<tr><td class='f_head'>The Timelines & Dates for contract is not available.</td></tr>";
    }
    BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
}

function ShowMoreMilestones() {
    $('.ShowMoreMilestones').css("display", "");
    $('#ShowMoreMilestones').css("display", "none");
    $('#ShowLessMilestones').css("display", "");
}

function ShowLessMilestones() {
    $('.ShowMoreMilestones').css("display", "none");
    $('#ShowMoreMilestones').css("display", "");
    $('#ShowLessMilestones').css("display", "none");
}

////function addMilestone() {
////    $("#btnAddMilestone").click();
////}

////$('#btnAddMilestone').click(function () {
////    AddMilestoneMoreNew();
////});

$("input:radio[name=SelectMilestoneOccurenceEndDate]").change(function () {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))
    }
    var recurenceCustomString = "";
    var Cus = "";
    var date = new Date(fMilestoneDateNew);
    var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
    } else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
    } else {
        $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }
    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetMilestoneDataFinal(Cus);
    } else {
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }
        userFlag = false;
        var recurenceCustomString = "";
        if (Cus != "") {
            recurenceCustomString = Cus;
        } else {
            $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }
        var cusRecMonthstring = "";
        if ($("#ddlMilestoneOccurencess").val() == "Monthly") {
            cusRecMonthstring = $("#ddlMilestoneRepeatMonthly option:selected").val();
        }
        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, recurenceCustomString, cusRecMonthstring);
    }
});

$("#txtMilestoneOccurrenceCount").focusout(function () {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))
    }
    if ($("#txtMilestoneOccurrenceCount").val() != "" && $('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'Custom') {
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0) {
            $('#lblerrorreclimitMilestoneNotZero').css('display', '');
            $('#lblerrorreclimitMilestone').css('display', 'none');
        } else {
            $('#lblerrorreclimitMilestoneNotZero').css('display', 'none');
            if (parseInt($("#txtMilestoneOccurrenceCount").val()) > 54) {
                $('#lblerrorreclimitMilestone').css('display', '');
            } else {
                var date = new Date(fMilestoneDateNew);
                var recurenceCustomString = "";
                var Cus = "";
                var cusRecMon = "";
                var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
                if (ocurrTxtnew == "Monthly") {
                    Cus = date.getDay();
                    cusRecMon = $("#ddlMilestoneRepeatMonthly option:selected").val();
                } else if (ocurrTxtnew == "Yearly") {
                    Cus = date.getFullYear();
                } else {
                    $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                        Cus += (this.value) + ",";
                    });
                    Cus = removeLastChar(Cus, ',');
                }
                milestoneoccur = $("#txtMilestoneOccurrenceCount").val();
                milestoneRecur = $("#ddlMilestoneOccurencess").val();
                milestoneRecurCusString = "";
                if (Cus != "") {
                    milestoneRecurCusString = Cus;
                } else {
                    $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                        milestoneRecurCusString += (this.value) + ",";
                    });
                    milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
                }
                getOcurrenceValuesForMilestone(milestoneRecur, milestoneoccur, listMilestoneNewStartDate, milestoneRecurCusString, cusRecMon);
            }
        }
    }
});

$("#dtMilestoneDateNew").focusout(function () {
    if ($("#dtMilestoneDateNew").val() != "") { } else {
        document.getElementById("ddlMilestoneOccurencess").disabled = true;
        $("#ddlMilestoneOccurencess").val("None");
        $('#dtMilestoneNewOccurrenceDueDate').val("");
        $('#divMilestoneOcurrenceMonthly').css('display', 'none');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', 'none');
        $('#dvMilestoneOcurrenceEnd').css('display', 'none');
        $("#ddlMilestoneRepeatMonthly").val("1");
    }
});

$("input:checkbox[name=chkMilestoneRecurWeekly]").change(function () {
    GetMilestonedynamicRecurrenceCount();
    milestoneRecurCusString = "";
    var Cus = "";
    var cusRecMon = "";
    var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        cusRecMon = $("#ddlMilestoneRepeatMonthly option:selected").val();
    } else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
    } else {
        $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }
    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetMilestoneDataFinal(Cus);
    } else {
        milestoneRecurCusString = "";
        if (Cus != "") {
            milestoneRecurCusString = Cus;
        } else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                milestoneRecurCusString += (this.value) + ",";
            });
            milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
        }
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }
        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, milestoneRecurCusString, cusRecMon);
    }
});

$("#ddlMilestoneRepeatMonthly").change(function (obj) {
    GetMilestonedynamicRecurrenceCount();
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))
    }
    var Cus = "";
    var customstring = "";
    var date = new Date(fMilestoneDateNew);
    if ($("#ddlMilestoneOccurencess").val() == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fMilestoneDateNew)
        $('#dtMilestoneNewOccurrenceDueDate').val(abc.getDate());
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#lblMilestoneOcurrenceMonth').css('display', '');
        $('#lblMilestoneOcurrenceYear').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', '');
        customstring = $("#ddlMilestoneRepeatMonthly").val();
        $('#dvMilestoneOcurrenceEnd').css('display', '');
    } else if ($("#ddlMilestoneOccurencess").val() == "Yearly") {
        var abc = new Date(fMilestoneDateNew)
        $('#dtMilestoneNewOccurrenceDueDate').val(abc.getDate());
        $('#dtMilestoneOcurrMonthforYear').val(monthNames[abc.getMonth()]);
        $('#dtMilestoneOcurrDateforYear').val(abc.getDate());
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', '');
        customstring = $("#ddlMilestoneRepeatMonthly").val();
        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $('#lblMilestoneOcurrenceMonth').css('display', 'none');
        $('#lblMilestoneOcurrenceYear').css('display', '');
    }
    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetMilestoneDataFinal(Cus);
    } else {
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }
        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, Cus, customstring);
    }
});

$("#ddlMilestoneTypeNew").change(function (obj) {
    if ($("#ddlMilestoneTypeNew").val() != "0") {
        var string1 = $("#ddlMilestoneTypeNew").val();
        var string2 = string1 + " for " + $("#lblContractTitle").text();
        if ($('#txtMilestoneTitleNew').val() == null || $('#txtMilestoneTitleNew').val() == "") {
            $('#txtMilestoneTitleNew').val(string2)
        } else {
            var update = false;
            var oldString = "";
            $("#ddlMilestoneTypeNew option").each(function () {
                if ($(this).val() != 0) {
                    var value = $(this).val() + " for";
                    if ($('#txtMilestoneTitleNew').val().indexOf(value) > -1) {
                        oldString = $(this).val();
                        update = true;
                    }
                }
            });
            if (update) {
                string2 = string1 + " " + $('#txtMilestoneTitleNew').val().substring(($('#txtMilestoneTitleNew').val().indexOf(" for ")) + 1);
                $('#txtMilestoneTitleNew').val(string2)
            }
        }
    } else {
        if ($('#txtMilestoneTitleNew').val() == null || $('#txtMilestoneTitleNew').val() == "") {
            $('#txtMilestoneTitleNew').val("")
        }
    }
});

var vMilestoneEditStatus = "";
$('#amilestoneRecNoneEdit').click(function () {
    vMilestoneEditStatus = "CHANGERECURRENCE";
    $("#liMilestoneRecurrence").css('display', '');
    $("#divMilestoneOcurrenceSummary").css('display', 'none');
    document.getElementById("ddlMilestoneOccurencess").disabled = false;
    document.getElementById("dtMilestoneDateNew").disabled = false;
    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');
    if (userFlag) {
        if (userFlagCustom) {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        } else {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurence").prop("checked", true);
            $('#rdMilestoneNewEndOccurenceUser').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        }
    } else {
        $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
    }
});

$('#amilestoneRecEdit').click(function () {
    vMilestoneEditStatus = "EDITRECURRENCE";
    if ($("#ddlMilestoneOccurencess").val() == "None") {
        $("#liMilestoneRecurrence").css('display', '');
        $("#divMilestoneOcurrenceSummary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
    } else if ($("#ddlMilestoneOccurencess").val() == "Weekly") {
        $("#divMilestoneOcurrenceWeekly").css('display', '');
        $("#divMilestoneOcurrenceMonthly").css('display', 'none');
        $("#ddlMilestoneRepeatMonthly").css('display', 'none');
        $("#lblMilestoneOcurrenceMonth").css('display', 'none');
        $("#lblMilestoneOcurrenceYear").css('display', 'none');
        $("#divMilestoneOcurrenceSummary").css('display', '');
        $("#milestoneEditOcursumary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
        document.getElementById("dtMilestoneDateNew").disabled = false;
        $("#dvMilestoneOcurrenceEnd").css('display', '');
        $("#liMilestoneRecurrence").css('display', '');
    } else if ($("#ddlMilestoneOccurencess").val() == "Monthly") {
        $("#divMilestoneOcurrenceWeekly").css('display', 'none');
        $("#divMilestoneOcurrenceMonthly").css('display', '');
        $("#ddlMilestoneRepeatMonthly").css('display', '');
        $("#lblMilestoneOcurrenceMonth").css('display', '');
        $("#lblMilestoneOcurrenceYear").css('display', 'none');
        $("#divMilestoneOcurrenceSummary").css('display', '');
        $("#milestoneEditOcursumary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
        document.getElementById("dtMilestoneDateNew").disabled = false;
        $("#dvMilestoneOcurrenceEnd").css('display', '');
        $("#liMilestoneRecurrence").css('display', '');
    } else {
        $("#divMilestoneOcurrenceWeekly").css('display', 'none');
        $("#divMilestoneOcurrenceMonthly").css('display', '');
        $("#ddlMilestoneRepeatMonthly").css('display', 'none');
        $("#lblMilestoneOcurrenceMonth").css('display', 'none');
        $("#lblMilestoneOcurrenceYear").css('display', '');
        $("#divMilestoneOcurrenceSummary").css('display', '');
        $("#milestoneEditOcursumary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
        document.getElementById("dtMilestoneDateNew").disabled = false;
        $("#dvMilestoneOcurrenceEnd").css('display', '');
        $("#liMilestoneRecurrence").css('display', '');
    }
    if (userFlag) {
        if (userFlagCustom) {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        } else {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurence").prop("checked", true);
            $('#rdMilestoneNewEndOccurenceUser').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        }
    } else {
        $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
    }
    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');
    milestoneEditBackupData();
});


function updateMilestonesRecurrenceNew(status) {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));
    }
    var fMilestoneNewCompletedDate = '';
    if ($("#dtMilestoneNewCompletedDate").val() != "" && $("#dtMilestoneNewCompletedDate").val() != null) {
        fMilestoneNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneNewCompletedDate").datepicker('getDate'));
    }
    if (status == "SINGLE") {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        if (requiredValidator('addNewMilestoneNew')) {
            $("#loadingPage").fadeIn();
            var strContractID = getParameterByName('ContractID');
            var cStartDate = "";
            var cEndDate = "";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                cache: false,
                async: false,
                success: function (data) {
                    $(data).each(function (i, item) {
                        if (item.MilestoneTitle == "Start Date") {
                            cStartDate = item.MilestoneDate;
                        } else if (item.MilestoneTitle == "End Date") {
                            cEndDate = item.MilestoneDate;
                        }
                    });
                }
            });
            var datevalidationexists = false;
            if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                if (!comparedatesmile(fMilestoneDateNew, cEndDate)) {
                    datevalidationexists = true;
                }
            } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                if (!comparedatesmile(cStartDate, fMilestoneDateNew)) {
                    datevalidationexists = true;
                }
            }
            if (!datevalidationexists) {
                var start = moment(fMilestoneDateNew);
                var end = moment(new Date());
                var vv = start.diff(end, "days");
                var vRenminder = '';
                var swalFlag = false;
                var blUpdate = true;
                isformvalid = true;
                if (vv <= parseInt($("#txtReminder1New").val()) || vv <= parseInt($("#txtReminder2New").val()) || vv <= parseInt($("#txtReminder3New").val())) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                                var vMilestoneOwner = '';
                                $(arrMilestoneOwner).each(function (i, item) {
                                    if (vMilestoneOwner == '') {
                                        vMilestoneOwner = item;
                                    } else {
                                        vMilestoneOwner += "; " + item;
                                    }
                                });
                                var SendReminderToArr = $("#ddlSendReminderToNew").val();
                                var vSendReminderTo = '';
                                $(SendReminderToArr).each(function (i, item) {
                                    if (vSendReminderTo == '') {
                                        vSendReminderTo = item;
                                    } else {
                                        vSendReminderTo += "; " + item;
                                    }
                                });
                                var MilestoneID = $("#txtMilestoneIDNew").val();
                                var vMilestoneComplete = "No";
                                var vCompleteddate = null;
                                var vCompletedby = "";
                                if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                                    vMilestoneComplete = "Yes";
                                    vCompleteddate = fMilestoneNewCompletedDate;
                                    vCompletedby = localStorage.UserName;
                                }
                                var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
                                if (MilestoneID != "") {
                                    $("#inprocessObligation").css('visibility', 'visible');
                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                                        type: 'POST',
                                        dataType: 'json',
                                        headers: {
                                            'eContracts-ApiKey': localStorage.APIKey,
                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                            username: localStorage.UserName
                                        },
                                        data: {
                                            RowKey: MilestoneID,
                                            ContractID: strContractID,
                                            ContractTitle: $("#lblCTitleNew").text(),
                                            MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                            MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                            MilestoneDate: fMilestoneDateNew,
                                            MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                            AutoComplete: vMilestoneAutoComplete,
                                            MilestoneOwner: vMilestoneOwner,
                                            Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                            MilestoneCompleted: vMilestoneComplete,
                                            MilestoneCompletedDate: vCompleteddate,
                                            MilestoneCompletedBy: vCompletedby,
                                            ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                            ModifiedBy: localStorage.UserName,
                                            SendReminderTo: vSendReminderTo,
                                            Reminder1: $("#txtReminder1MilestoneNew").val(),
                                            Reminder2: $("#txtReminder2MilestoneNew").val(),
                                            Reminder3: $("#txtReminder3MilestoneNew").val(),
                                            Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                            Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                            Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                            MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                            AlertsEnabled: $("#AlertMile").val(),
                                        },
                                        cache: false,
                                        success: function (person) {
                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                            $("#loadingPage").fadeOut();
                                            $("#addEditMilestoneNew").dialog("close");
                                            $("#milestonesRecurrenceEditPopup").dialog("close");
                                            BindMilestone(vContractID);
                                        },
                                        complete: function () {
                                            $("#inprocessObligation").css('visibility', 'none');
                                        }
                                    });
                                }
                            } else {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                            }
                            return;
                        });
                } else {
                    swalFlag = true;
                }
            }
            if (swalFlag) {
                if (blUpdate) {
                    var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                    var vMilestoneOwner = '';
                    $(arrMilestoneOwner).each(function (i, item) {
                        if (vMilestoneOwner == '') {
                            vMilestoneOwner = item;
                        } else {
                            vMilestoneOwner += "; " + item;
                        }
                    });
                    var SendReminderToArr = $("#ddlSendReminderToNew").val();
                    var vSendReminderTo = '';
                    $(SendReminderToArr).each(function (i, item) {
                        if (vSendReminderTo == '') {
                            vSendReminderTo = item;
                        } else {
                            vSendReminderTo += "; " + item;
                        }
                    });
                    var MilestoneID = $("#txtMilestoneIDNew").val();
                    var vMilestoneComplete = "No";
                    var vCompleteddate = null;
                    var vCompletedby = "";
                    if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                        vMilestoneComplete = "Yes";
                        vCompleteddate = fMilestoneNewCompletedDate;
                        vCompletedby = localStorage.UserName;
                    }
                    var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
                    if (MilestoneID != "") {
                        $("#inprocessObligation").css('visibility', 'visible');
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                            type: 'POST',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                username: localStorage.UserName
                            },
                            data: {
                                RowKey: MilestoneID,
                                ContractID: strContractID,
                                ContractTitle: $("#lblCTitleNew").text(),
                                MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                MilestoneDate: fMilestoneDateNew,
                                MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                AutoComplete: vMilestoneAutoComplete,
                                MilestoneOwner: vMilestoneOwner,
                                Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                MilestoneCompleted: vMilestoneComplete,
                                MilestoneCompletedDate: vCompleteddate,
                                MilestoneCompletedBy: vCompletedby,
                                ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                ModifiedBy: localStorage.UserName,
                                SendReminderTo: vSendReminderTo,
                                Reminder1: $("#txtReminder1MilestoneNew").val(),
                                Reminder2: $("#txtReminder2MilestoneNew").val(),
                                Reminder3: $("#txtReminder3MilestoneNew").val(),
                                Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                AlertsEnabled: $("#AlertMile").val(),
                            },
                            cache: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                $("#loadingPage").fadeOut();
                                $("#addEditMilestoneNew").dialog("close");
                                $("#milestonesRecurrenceEditPopup").dialog("close");
                                BindMilestone(vContractID);
                            },
                            complete: function () {
                                $("#inprocessObligation").css('visibility', 'none');
                            }
                        });
                    }
                } else {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                }
            }
        }
    } else {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        if (requiredValidator('addNewMilestoneNew')) {
            $("#loadingPage").fadeIn();
            var strContractID = getParameterByName('ContractID');
            var cStartDate = "";
            var cEndDate = "";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                cache: false,
                async: false,
                success: function (data) {
                    $(data).each(function (i, item) {
                        if (item.MilestoneTitle == "Start Date") {
                            cStartDate = item.MilestoneDate;
                        } else if (item.MilestoneTitle == "End Date") {
                            cEndDate = item.MilestoneDate;
                        }
                    });
                }
            });
            var datevalidationexists = false;
            if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                if (!comparedatesmile(fMilestoneDateNew, cEndDate)) {
                    datevalidationexists = true;
                    swal("", "Start date should be less than the end date milestone.");
                }
            } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                if (!comparedatesmile(cStartDate, fMilestoneDateNew)) {
                    datevalidationexists = true;
                    swal("", "End date should be greater than start date milestone.");
                }
            }
            if (!datevalidationexists) {
                var start = moment(fMilestoneDateNew);
                var end = moment(new Date());
                var vv = start.diff(end, "days");
                var vRenminder = '';
                var swalFlag = false;
                var blUpdate = true;
                isformvalid = true;
                if (vv <= parseInt($("#txtReminder1New").val()) || vv <= parseInt($("#txtReminder2New").val()) || vv <= parseInt($("#txtReminder3New").val())) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                                var vMilestoneOwner = '';
                                $(arrMilestoneOwner).each(function (i, item) {
                                    if (vMilestoneOwner == '') {
                                        vMilestoneOwner = item;
                                    } else {
                                        vMilestoneOwner += "; " + item;
                                    }
                                });
                                var SendReminderToArr = $("#ddlSendReminderToNew").val();
                                var vSendReminderTo = '';
                                $(SendReminderToArr).each(function (i, item) {
                                    if (vSendReminderTo == '') {
                                        vSendReminderTo = item;
                                    } else {
                                        vSendReminderTo += "; " + item;
                                    }
                                });
                                var MilestoneID = $("#txtMilestoneIDNew").val();
                                var vMilestoneComplete = "No";
                                var vCompleteddate = null;
                                var vCompletedby = "";
                                if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                                    vMilestoneComplete = "Yes";
                                    vCompleteddate = fMilestoneNewCompletedDate;
                                    vCompletedby = localStorage.UserName;
                                }
                                var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
                                if (MilestoneID != "") {
                                    $("#inprocessObligation").css('visibility', 'visible');
                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/updatemilestonebyText?strMilestoneText=' + $("#txtMilestoneNewText").val() + '&milestoneId=' + MilestoneID,
                                        type: 'POST',
                                        dataType: 'json',
                                        headers: {
                                            'eContracts-ApiKey': localStorage.APIKey,
                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                            username: localStorage.UserName
                                        },
                                        data: {
                                            RowKey: MilestoneID,
                                            ContractID: strContractID,
                                            ContractTitle: $("#lblCTitleNew").text(),
                                            MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                            MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                            MilestoneDate: fMilestoneDateNew,
                                            MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                            AutoComplete: vMilestoneAutoComplete,
                                            MilestoneOwner: vMilestoneOwner,
                                            Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                            MilestoneCompleted: vMilestoneComplete,
                                            MilestoneCompletedDate: vCompleteddate,
                                            MilestoneCompletedBy: vCompletedby,
                                            ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                            ModifiedBy: localStorage.UserName,
                                            SendReminderTo: vSendReminderTo,
                                            Reminder1: $("#txtReminder1MilestoneNew").val(),
                                            Reminder2: $("#txtReminder2MilestoneNew").val(),
                                            Reminder3: $("#txtReminder3MilestoneNew").val(),
                                            Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                            Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                            Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                            MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                            AlertsEnabled: $("#AlertMile").val(),
                                        },
                                        cache: false,
                                        success: function (person) {
                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                            $("#loadingPage").fadeOut();
                                            $("#addEditMilestoneNew").dialog("close");
                                            $("#milestonesRecurrenceEditPopup").dialog("close");
                                            BindMilestone(vContractID);
                                        },
                                        error: function (data) {
                                            $("#loadingPage").fadeOut();
                                            $("#inprocessObligation").css('visibility', 'none');
                                        }
                                    });
                                }
                            } else {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                            }
                            return;
                        });
                } else {
                    swalFlag = true;
                }
            }
            if (swalFlag) {
                if (blUpdate) {
                    var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                    var vMilestoneOwner = '';
                    $(arrMilestoneOwner).each(function (i, item) {
                        if (vMilestoneOwner == '') {
                            vMilestoneOwner = item;
                        } else {
                            vMilestoneOwner += "; " + item;
                        }
                    });
                    var SendReminderToArr = $("#ddlSendReminderToNew").val();
                    var vSendReminderTo = '';
                    $(SendReminderToArr).each(function (i, item) {
                        if (vSendReminderTo == '') {
                            vSendReminderTo = item;
                        } else {
                            vSendReminderTo += "; " + item;
                        }
                    });
                    var MilestoneID = $("#txtMilestoneIDNew").val();
                    var vMilestoneComplete = "No";
                    var vCompleteddate = null;
                    var vCompletedby = "";
                    if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                        vMilestoneComplete = "Yes";
                        vCompleteddate = fMilestoneNewCompletedDate;
                        vCompletedby = localStorage.UserName;
                    }
                    var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
                    if (MilestoneID != "") {
                        $("#inprocessObligation").css('visibility', 'visible');
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/updatemilestonebyText?strMilestoneText=' + $("#txtMilestoneNewText").val() + '&milestoneId=' + MilestoneID,
                            type: 'POST',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                username: localStorage.UserName
                            },
                            data: {
                                RowKey: MilestoneID,
                                ContractID: strContractID,
                                ContractTitle: $("#lblCTitleNew").text(),
                                MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                MilestoneDate: fMilestoneDateNew,
                                MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                AutoComplete: vMilestoneAutoComplete,
                                MilestoneOwner: vMilestoneOwner,
                                Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                MilestoneCompleted: vMilestoneComplete,
                                MilestoneCompletedDate: vCompleteddate,
                                MilestoneCompletedBy: vCompletedby,
                                ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                ModifiedBy: localStorage.UserName,
                                SendReminderTo: vSendReminderTo,
                                Reminder1: $("#txtReminder1MilestoneNew").val(),
                                Reminder2: $("#txtReminder2MilestoneNew").val(),
                                Reminder3: $("#txtReminder3MilestoneNew").val(),
                                Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                AlertsEnabled: $("#AlertMile").val(),
                            },
                            cache: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                $("#loadingPage").fadeOut();
                                $("#addEditMilestoneNew").dialog("close");
                                $("#milestonesRecurrenceEditPopup").dialog("close");
                                BindMilestone(vContractID);
                            },
                            error: function (data) {
                                $("#loadingPage").fadeOut();
                                $("#inprocessObligation").css('visibility', 'none');
                            }
                        });
                    }
                } else {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                }
            }
        }
    }
}

function updateMilestonesRecurrenceEditNew(status) {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));
    }
    var fMilestoneNewCompletedDate = '';
    if ($("#dtMilestoneNewCompletedDate").val() != "" && $("#dtMilestoneNewCompletedDate").val() != null) {
        fMilestoneNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneNewCompletedDate").datepicker('getDate'));
    }
    if (status == "SINGLE") {
        if (listMilestoneNewData != "") {
            var MilestoneID = $("#txtMilestoneIDNew").val();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID,
                type: 'DELETE',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    username: localStorage.UserName
                },
                "Content-Type": "application/json",
                cache: false,
                success: function (data) {
                    $("#milestonesRecurrenceNewEditPopup").dialog("close");
                    $('#ddlMilestoneOccurencess').val('None');
                    listMilestoneNewData = "";
                    $("#txtMilestoneIDNew").val('');
                    modalOnOpenMilestoneNew();
                }
            });
        } else {
            $("#loadingPage").fadeIn();
            $('.ui-button-green-text').parent().attr('disabled', 'disabled');
            var isformvalid = false;
            if (requiredValidator('addNewMilestoneNew')) {
                $("#loadingPage").fadeIn();
                var strContractID = getParameterByName('ContractID');
                var cStartDate = "";
                var cEndDate = "";
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    cache: false,
                    async: false,
                    success: function (data) {
                        $(data).each(function (i, item) {
                            if (item.MilestoneTitle == "Start Date") {
                                cStartDate = item.MilestoneDate;
                            } else if (item.MilestoneTitle == "End Date") {
                                cEndDate = item.MilestoneDate;
                            }
                        });
                    }
                });
                var datevalidationexists = false;
                if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                    if (!comparedatesmile(fMilestoneDateNew, cEndDate)) {
                        datevalidationexists = true;
                        swal("", "Start date should be less than the end date milestone.");
                    }
                } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                    if (!comparedatesmile(cStartDate, fMilestoneDateNew)) {
                        datevalidationexists = true;
                        swal("", "End date should be greater than start date milestone.");
                    }
                }
                if (!datevalidationexists) {
                    var start = moment(fMilestoneDateNew);
                    var end = moment(new Date());
                    var vv = start.diff(end, "days");
                    var vRenminder = '';
                    var swalFlag = false;
                    var blUpdate = true;
                    isformvalid = true;
                    if (vv <= parseInt($("#txtReminder1New").val()) || vv <= parseInt($("#txtReminder2New").val()) || vv <= parseInt($("#txtReminder3New").val())) {
                        swal({
                            title: '',
                            text: "Reminders are out of date. Are you sure you want to save?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                            function (confirmed) {
                                if (confirmed) {
                                    var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                                    var vMilestoneOwner = '';
                                    $(arrMilestoneOwner).each(function (i, item) {
                                        if (vMilestoneOwner == '') {
                                            vMilestoneOwner = item;
                                        } else {
                                            vMilestoneOwner += "; " + item;
                                        }
                                    });
                                    var SendReminderToArr = $("#ddlSendReminderToNew").val();
                                    var vSendReminderTo = '';
                                    $(SendReminderToArr).each(function (i, item) {
                                        if (vSendReminderTo == '') {
                                            vSendReminderTo = item;
                                        } else {
                                            vSendReminderTo += "; " + item;
                                        }
                                    });
                                    var MilestoneID = $("#txtMilestoneIDNew").val();
                                    var vMilestoneComplete = "No";
                                    var vCompleteddate = null;
                                    var vCompletedby = "";
                                    if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                                        vMilestoneComplete = "Yes";
                                        vCompleteddate = fMilestoneNewCompletedDate;
                                        vCompletedby = localStorage.UserName;
                                    }
                                    var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
                                    if (MilestoneID != "") {
                                        $("#inprocessObligation").css('visibility', 'visible');
                                        $.ajax({
                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                                            type: 'POST',
                                            dataType: 'json',
                                            headers: {
                                                'eContracts-ApiKey': localStorage.APIKey,
                                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                username: localStorage.UserName
                                            },
                                            data: {
                                                RowKey: MilestoneID,
                                                ContractID: strContractID,
                                                ContractTitle: $("#lblCTitleNew").text(),
                                                MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                                MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                                MilestoneDate: fMilestoneDateNew,
                                                MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                                AutoComplete: vMilestoneAutoComplete,
                                                MilestoneOwner: vMilestoneOwner,
                                                Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                                MilestoneCompleted: vMilestoneComplete,
                                                MilestoneCompletedDate: vCompleteddate,
                                                MilestoneCompletedBy: vCompletedby,
                                                ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                                ModifiedBy: localStorage.UserName,
                                                SendReminderTo: vSendReminderTo,
                                                Reminder1: $("#txtReminder1MilestoneNew").val(),
                                                Reminder2: $("#txtReminder2MilestoneNew").val(),
                                                Reminder3: $("#txtReminder3MilestoneNew").val(),
                                                Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                                Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                                Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                                MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                                AlertsEnabled: $("#AlertMile").val(),
                                            },
                                            cache: false,
                                            success: function (person) {
                                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                                $("#loadingPage").fadeOut();
                                                $("#addEditMilestoneNew").dialog("close");
                                                $("#milestonesRecurrenceEditPopup").dialog("close");
                                                $("#milestonesRecurrenceNewEditPopup").dialog("close");
                                                BindMilestone(vContractID);
                                            },
                                            complete: function () {
                                                $("#inprocessObligation").css('visibility', 'none');
                                            }
                                        });
                                    }
                                }
                                return;
                            });
                    } else {
                        swalFlag = true;
                    }
                }
                if (swalFlag) {
                    if (blUpdate) {
                        var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                        var vMilestoneOwner = '';
                        $(arrMilestoneOwner).each(function (i, item) {
                            if (vMilestoneOwner == '') {
                                vMilestoneOwner = item;
                            } else {
                                vMilestoneOwner += "; " + item;
                            }
                        });
                        var SendReminderToArr = $("#ddlSendReminderToNew").val();
                        var vSendReminderTo = '';
                        $(SendReminderToArr).each(function (i, item) {
                            if (vSendReminderTo == '') {
                                vSendReminderTo = item;
                            } else {
                                vSendReminderTo += "; " + item;
                            }
                        });
                        var MilestoneID = $("#txtMilestoneIDNew").val();
                        var vMilestoneComplete = "No";
                        var vCompleteddate = null;
                        var vCompletedby = "";
                        if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                            vMilestoneComplete = "Yes";
                            vCompleteddate = fMilestoneNewCompletedDate;
                            vCompletedby = localStorage.UserName;
                        }
                        var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
                        var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
                        if (MilestoneID != "") {
                            $("#inprocessObligation").css('visibility', 'visible');
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                                type: 'POST',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                    username: localStorage.UserName
                                },
                                data: {
                                    RowKey: MilestoneID,
                                    ContractID: strContractID,
                                    ContractTitle: $("#lblCTitleNew").text(),
                                    MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                    MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                    MilestoneDate: fMilestoneDateNew,
                                    MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                    AutoComplete: vMilestoneAutoComplete,
                                    MilestoneOwner: vMilestoneOwner,
                                    Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                    MilestoneCompleted: vMilestoneComplete,
                                    MilestoneCompletedDate: vCompleteddate,
                                    MilestoneCompletedBy: vCompletedby,
                                    ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                    ModifiedBy: localStorage.UserName,
                                    SendReminderTo: vSendReminderTo,
                                    Reminder1: $("#txtReminder1MilestoneNew").val(),
                                    Reminder2: $("#txtReminder2MilestoneNew").val(),
                                    Reminder3: $("#txtReminder3MilestoneNew").val(),
                                    Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                    Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                    Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                    MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                    AlertsEnabled: $("#AlertMile").val(),
                                },
                                cache: false,
                                success: function (person) {
                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                    $("#loadingPage").fadeOut();
                                    $("#addEditMilestoneNew").dialog("close");
                                    $("#milestonesRecurrenceEditPopup").dialog("close");
                                    BindMilestone(vContractID);
                                },
                                complete: function () {
                                    $("#inprocessObligation").css('visibility', 'none');
                                }
                            });
                        }
                    }
                }
            }
        }
    } else {
        var MilestoneID = $("#txtMilestoneIDNew").val();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/updateUpcoming?strMilestoneText=' + $("#txtMilestoneNewText").val() + '&milestoneId=' + MilestoneID,
            type: 'POST',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                username: localStorage.UserName
            },
            cache: false,
            success: function (person) {
                $("#milestonesRecurrenceEditPopup").dialog("close");
                $("#txtMilestoneIDNew").val('');
                modalOnOpenMilestoneNew();
                $("#milestonesRecurrenceNewEditPopup").dialog("close");
            },
            error: function (data) {
                $("#milestonesRecurrenceNewEditPopup").dialog("close");
                $("#loadingPage").fadeOut();
                $("#inprocessObligation").css('visibility', 'none');
            }
        });
    }
}

var vMilestoneTextEditRecurrence = "";
var vMilestoneFlaging = "";

function modalOnOpenMilestoneNew(dialog) {
    $("#loadingPage").fadeIn();
    var strContractID = getParameterByName('ContractID');
    var isformvalid = false;
    var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
    var vMilestoneOwner = '';
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));
    }
    var fMilestoneNewCompletedDate = '';
    if ($("#dtMilestoneNewCompletedDate").val() != "" && $("#dtMilestoneNewCompletedDate").val() != null) {
        fMilestoneNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneNewCompletedDate").datepicker('getDate'));
    }
    $(arrMilestoneOwner).each(function (i, item) {
        if (vMilestoneOwner == '') {
            vMilestoneOwner = item;
        } else {
            vMilestoneOwner += "; " + item;
        }
    });
    var SendReminderToArr = $("#ddlSendReminderToNew").val();
    var vSendReminderTo = '';
    $(SendReminderToArr).each(function (i, item) {
        if (vSendReminderTo == '') {
            vSendReminderTo = item;
        } else {
            vSendReminderTo += "; " + item;
        }
    });
    var MilestoneID = $("#txtMilestoneIDNew").val();
    var vMilestoneComplete = "No";
    var vCompleteddate = null;
    var vCompletedby = "";
    if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
        vMilestoneComplete = "Yes";
        vCompleteddate = fMilestoneNewCompletedDate;
        vCompletedby = localStorage.UserName;
    }
    var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
    if (MilestoneID != "") {
        if (vMilestoneEditStatus != "") {
            if (vMilestoneEditStatus == "CHANGERECURRENCE") {
                if ($('#ddlMilestoneOccurencess').val() != "None") {
                    if (listMilestoneNewData != "") {
                        vMilestoneTextEditRecurrence = $("#txtMilestoneNewText").val();
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID,
                            type: 'DELETE',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                username: localStorage.UserName
                            },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                $("#txtMilestoneIDNew").val("");
                                modalOnOpenMilestoneNew();
                            }
                        });
                    } else {
                        swal("", "Please modify the occurence to update milestone.");
                        $("#loadingPage").fadeOut();
                    }
                } else {
                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneid=' + MilestoneID,
                        type: 'POST',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName
                        },
                        data: {
                            RowKey: MilestoneID,
                            ContractID: strContractID,
                            ContractTitle: $("#lblCTitleNew").text(),
                            MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                            MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                            MilestoneDate: fMilestoneDateNew,
                            MilestoneDescription: $("#txtMileDescriptionNew").val(),
                            AutoComplete: vMilestoneAutoComplete,
                            MilestoneOwner: vMilestoneOwner,
                            Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                            MilestoneCompleted: vMilestoneComplete,
                            MilestoneCompletedDate: vCompleteddate,
                            MilestoneCompletedBy: vCompletedby,
                            ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                            ModifiedBy: localStorage.UserName,
                            SendReminderTo: vSendReminderTo,
                            Reminder1: $("#txtReminder1MilestoneNew").val(),
                            Reminder2: $("#txtReminder2MilestoneNew").val(),
                            Reminder3: $("#txtReminder3MilestoneNew").val(),
                            Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                            Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                            Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                            MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                            AlertsEnabled: $("#AlertMile").val(),
                            CustomDateFieldName: $("#hdnCustomDateFieldName").text(),
                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            $("#loadingPage").fadeOut();
                            $("#addEditMilestoneNew").dialog("close");
                            BindMilestone(vContractID);
                            pendingStarted = false;
                            GetContractPendingAction(true, "BindPeoples");
                        },
                        complete: function () {
                            $("#inprocessObligation").css('visibility', 'none');
                        }
                    });
                }
            } else if (vMilestoneEditStatus == "EDITRECURRENCE") {
                if (listMilestoneNewData != "") {
                    vMilestoneTextEditRecurrence = $("#txtMilestoneNewText").val();
                    $("#loadingPage").fadeOut();
                    $("#milestonesRecurrenceNewEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                    $("#milestonesRecurrenceNewEditPopup").dialog("open");
                } else {
                    vMilestoneTextEditRecurrence = $("#txtMilestoneNewText").val();
                    $("#loadingPage").fadeOut();
                    $("#milestonesRecurrenceNewEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                    $("#milestonesRecurrenceNewEditPopup").dialog("open");
                }
            } else {
                if ($('#ddlMilestoneOccurencess').val() == "None") {
                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneid=' + MilestoneID,
                        type: 'POST',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName
                        },
                        data: {
                            RowKey: MilestoneID,
                            ContractID: strContractID,
                            ContractTitle: $("#lblCTitleNew").text(),
                            MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                            MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                            MilestoneDate: fMilestoneDateNew,
                            MilestoneDescription: $("#txtMileDescriptionNew").val(),
                            AutoComplete: vMilestoneAutoComplete,
                            MilestoneOwner: vMilestoneOwner,
                            Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                            MilestoneCompleted: vMilestoneComplete,
                            MilestoneCompletedDate: vCompleteddate,
                            MilestoneCompletedBy: vCompletedby,
                            ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                            ModifiedBy: localStorage.UserName,
                            SendReminderTo: vSendReminderTo,
                            Reminder1: $("#txtReminder1MilestoneNew").val(),
                            Reminder2: $("#txtReminder2MilestoneNew").val(),
                            Reminder3: $("#txtReminder3MilestoneNew").val(),
                            Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                            Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                            Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                            MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                            AlertsEnabled: $("#AlertMile").val(),
                            CustomDateFieldName: $("#hdnCustomDateFieldName").text(),
                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            $("#loadingPage").fadeOut();
                            $("#addEditMilestoneNew").dialog("close");
                            BindMilestone(vContractID);
                        },
                        complete: function () {
                            $("#inprocessObligation").css('visibility', 'none');
                        }
                    });
                } else {
                    if (listMilestoneNewData != "") {
                        $("#loadingPage").fadeOut();
                        $("#milestonesRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                        $("#milestonesRecurrenceEditPopup").dialog("open");
                    } else {
                        swal("", "Please modify the occurence to update milestone.");
                        $("#loadingPage").fadeOut();
                    }
                }
            }
        } else {
            if ($('#ddlMilestoneOccurencess').val() == "None") {
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneid=' + MilestoneID,
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    data: {
                        RowKey: MilestoneID,
                        ContractID: strContractID,
                        ContractTitle: $("#lblCTitleNew").text(),
                        MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                        MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                        MilestoneDate: fMilestoneDateNew,
                        MilestoneDescription: $("#txtMileDescriptionNew").val(),
                        AutoComplete: vMilestoneAutoComplete,
                        MilestoneOwner: vMilestoneOwner,
                        Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                        MilestoneCompleted: vMilestoneComplete,
                        MilestoneCompletedDate: vCompleteddate,
                        MilestoneCompletedBy: vCompletedby,
                        ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                        ModifiedBy: localStorage.UserName,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1MilestoneNew").val(),
                        Reminder2: $("#txtReminder2MilestoneNew").val(),
                        Reminder3: $("#txtReminder3MilestoneNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                        MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                        AlertsEnabled: $("#AlertMile").val(),
                        CustomDateFieldName: $("#hdnCustomDateFieldName").text(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#loadingPage").fadeOut();
                        $("#addEditMilestoneNew").dialog("close");
                        BindMilestone(vContractID);
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            } else {
                $("#loadingPage").fadeOut();
                $("#milestonesRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                $("#milestonesRecurrenceEditPopup").dialog("open");
            }
        }
    } else {
        if ($('#ddlMilestoneOccurencess').val() != "None") {
            if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'Custom') {
                if (parseInt($("#txtMilestoneOccurrenceCount").val()) > 54) {
                    $("#lblerrorreclimitMilestone").css('display', '');
                    $("#loadingPage").fadeOut();
                } else if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0) {
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                    $("#loadingPage").fadeOut();
                } else {
                    var formData = new FormData();
                    var milestoneForm = "ContractID=" + getParameterByName('ContractID');
                    milestoneForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleNew").text());
                    milestoneForm += "&MilestoneTitle=" + encodeURIComponent($("#txtMilestoneTitleNew").val());
                    milestoneForm += "&MilestoneType=" + encodeURIComponent($("#ddlMilestoneTypeNew").find('option:selected').text());
                    milestoneForm += "&MilestoneDescription=" + encodeURIComponent($("#txtMileDescriptionNew").val());
                    milestoneForm += "&MilestoneOwner=" + encodeURIComponent(vMilestoneOwner);
                    milestoneForm += "&AutoComplete=" + encodeURIComponent(vMilestoneAutoComplete);
                    milestoneForm += "&Priority=" + $("#ddlMilestoneNewPriority").find('option:selected').text();
                    milestoneForm += "&MilestoneCompleted=" + encodeURIComponent(vMilestoneComplete);
                    milestoneForm += "&MilestoneCompletedDate=" + vCompleteddate;
                    milestoneForm += "&MilestoneCompletedBy=" + encodeURIComponent(vCompletedby);
                    milestoneForm += "&ShowInCalendar=" + $('input[name=ShowInCalendarNew]:checked').val();
                    milestoneForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                    milestoneForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                    milestoneForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                    milestoneForm += "&Reminder1=" + $("#txtReminder1MilestoneNew").val();
                    milestoneForm += "&Reminder2=" + $("#txtReminder2MilestoneNew").val();
                    milestoneForm += "&Reminder3=" + $("#txtReminder3MilestoneNew").val();
                    milestoneForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text());
                    milestoneForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text());
                    milestoneForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text());
                    milestoneForm += "&MilestoneStatus=" + encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text());
                    milestoneForm += "&AlertsEnabled=" + $("#AlertMile").val();
                    milestoneForm += "&Ocurrences=" + encodeURIComponent(milestoneoccur);
                    milestoneForm += "&Recurrences=" + encodeURIComponent(milestoneRecur);
                    milestoneForm += "&CustomString=" + encodeURIComponent(milestoneRecurCusString);
                    milestoneForm += "&MilestoneEndTerm=" + encodeURIComponent($("input:radio[name=SelectMilestoneOccurenceEndDate]:checked").val());
                    if (typeof ($("#hdnCustomDateFieldName").text()) != "undefined" && $("#hdnCustomDateFieldName").text() != null && $("#hdnCustomDateFieldName").text() != "") {
                        milestoneForm += "&CustomDateFieldName=" + encodeURIComponent($("#hdnCustomDateFieldName").text());
                    }
                    if ($('#ddlMilestoneOccurencess').val() == "Monthly") {
                        milestoneForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlMilestoneRepeatMonthly").find('option:selected').text());
                    } else {
                        milestoneForm += "&RecMonthlyString=" + "";
                    }
                    formData.append("SearializeControls", milestoneForm);
                    var milestoneoccurForm = "EndDate=" + encodeURIComponent(listMilestoneNewData.EndDate);
                    milestoneoccurForm += "&LastDate=" + encodeURIComponent(listMilestoneNewData.LastDate);
                    milestoneoccurForm += "&StartDate=" + encodeURIComponent(listMilestoneNewData.StartDate);
                    var strvalues = "";
                    var Values = listMilestoneNewData.Values;
                    for (var j = 0; j < Values.length; j++) {
                        strvalues += Values[j] + ",";
                    }
                    strvalues = removeLastChar(strvalues, ',');
                    milestoneoccurForm += "&Values=" + strvalues;
                    formData.append("objoccurrence", milestoneoccurForm);
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonesnew',
                        type: 'POST',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName
                        },
                        data: formData,
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (person) {
                            $("#loadingPage").fadeOut();
                            $("#addEditMilestoneNew").dialog("close");
                            if ($('#milestoneInline').is(':hidden')) { } else {
                                $('#milestoneInline').slideToggle();
                            }
                            BindMilestone();
                        },
                        error: function (data) {
                            $("#loadingPage").fadeOut();
                        },
                        complete: function () {
                            $("#inprocessObligation").css('visibility', 'none');
                        }
                    });
                }
            } else {
                var formData = new FormData();
                var milestoneForm = "ContractID=" + getParameterByName('ContractID');
                milestoneForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleNew").text());
                milestoneForm += "&MilestoneTitle=" + encodeURIComponent($("#txtMilestoneTitleNew").val());
                milestoneForm += "&MilestoneType=" + encodeURIComponent($("#ddlMilestoneTypeNew").find('option:selected').text());
                milestoneForm += "&MilestoneDescription=" + encodeURIComponent($("#txtMileDescriptionNew").val());
                milestoneForm += "&MilestoneOwner=" + encodeURIComponent(vMilestoneOwner);
                milestoneForm += "&AutoComplete=" + encodeURIComponent(vMilestoneAutoComplete);
                milestoneForm += "&Priority=" + $("#ddlMilestoneNewPriority").find('option:selected').text();
                milestoneForm += "&MilestoneCompleted=" + encodeURIComponent(vMilestoneComplete);
                milestoneForm += "&MilestoneCompletedDate=" + vCompleteddate;
                milestoneForm += "&MilestoneCompletedBy=" + encodeURIComponent(vCompletedby);
                milestoneForm += "&ShowInCalendar=" + $('input[name=ShowInCalendarNew]:checked').val();
                milestoneForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                milestoneForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                milestoneForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                milestoneForm += "&Reminder1=" + $("#txtReminder1MilestoneNew").val();
                milestoneForm += "&Reminder2=" + $("#txtReminder2MilestoneNew").val();
                milestoneForm += "&Reminder3=" + $("#txtReminder3MilestoneNew").val();
                milestoneForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text());
                milestoneForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text());
                milestoneForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text());
                milestoneForm += "&MilestoneStatus=" + encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text());
                milestoneForm += "&AlertsEnabled=" + $("#AlertMile").val();
                milestoneForm += "&Ocurrences=" + encodeURIComponent(milestoneoccur);
                milestoneForm += "&Recurrences=" + encodeURIComponent(milestoneRecur);
                milestoneForm += "&CustomString=" + encodeURIComponent(milestoneRecurCusString);
                milestoneForm += "&MilestoneEndTerm=" + encodeURIComponent($("input:radio[name=SelectMilestoneOccurenceEndDate]:checked").val());
                if (typeof ($("#hdnCustomDateFieldName").text()) != "undefined" && $("#hdnCustomDateFieldName").text() != null && $("#hdnCustomDateFieldName").text() != "") {
                    milestoneForm += "&CustomDateFieldName=" + encodeURIComponent($("#hdnCustomDateFieldName").text());
                }
                if ($('#ddlMilestoneOccurencess').val() == "Monthly") {
                    milestoneForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlMilestoneRepeatMonthly").find('option:selected').text());
                } else {
                    milestoneForm += "&RecMonthlyString=" + "";
                }
                formData.append("SearializeControls", milestoneForm);
                var milestoneoccurForm = "EndDate=" + encodeURIComponent(listMilestoneNewData.EndDate);
                milestoneoccurForm += "&LastDate=" + encodeURIComponent(listMilestoneNewData.LastDate);
                milestoneoccurForm += "&StartDate=" + encodeURIComponent(listMilestoneNewData.StartDate);
                var strvalues = "";
                var Values = listMilestoneNewData.Values;
                for (var j = 0; j < Values.length; j++) {
                    strvalues += Values[j] + ",";
                }
                strvalues = removeLastChar(strvalues, ',');
                milestoneoccurForm += "&Values=" + strvalues;
                formData.append("objoccurrence", milestoneoccurForm);
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonesnew',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (person) {
                        $("#loadingPage").fadeOut();
                        $("#addEditMilestoneNew").dialog("close");
                        if ($('#milestoneInline').is(':hidden')) { } else {
                            $('#milestoneInline').slideToggle();
                        }
                        BindMilestone();
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            }
        } else {
            var vRecurrence = "";
            var vRecurrenceCustom = "";
            var vOcurence = "";
            vRecurrence = "None";
            vRecurrenceCustom = "None";
            vOcurence = 1;
            var formData = new FormData();
            var milestoneForm = "ContractID=" + getParameterByName('ContractID');
            milestoneForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleNew").text());
            milestoneForm += "&MilestoneTitle=" + encodeURIComponent($("#txtMilestoneTitleNew").val());
            milestoneForm += "&MilestoneType=" + encodeURIComponent($("#ddlMilestoneTypeNew").find('option:selected').text());
            milestoneForm += "&MilestoneDescription=" + encodeURIComponent($("#txtMileDescriptionNew").val());
            milestoneForm += "&MilestoneOwner=" + encodeURIComponent(vMilestoneOwner);
            milestoneForm += "&MilestoneDate=" + encodeURIComponent(fMilestoneDateNew);
            milestoneForm += "&AutoComplete=" + encodeURIComponent(vMilestoneAutoComplete);
            milestoneForm += "&Priority=" + $("#ddlMilestoneNewPriority").find('option:selected').text();
            milestoneForm += "&MilestoneCompleted=" + encodeURIComponent(vMilestoneComplete);
            milestoneForm += "&MilestoneCompletedDate=" + vCompleteddate;
            milestoneForm += "&MilestoneCompletedBy=" + encodeURIComponent(vCompletedby);
            milestoneForm += "&ShowInCalendar=" + $('input[name=ShowInCalendarNew]:checked').val();
            milestoneForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
            milestoneForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
            milestoneForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
            milestoneForm += "&Reminder1=" + $("#txtReminder1MilestoneNew").val();
            milestoneForm += "&Reminder2=" + $("#txtReminder2MilestoneNew").val();
            milestoneForm += "&Reminder3=" + $("#txtReminder3MilestoneNew").val();
            milestoneForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text());
            milestoneForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text());
            milestoneForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text());
            milestoneForm += "&MilestoneStatus=" + encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text());
            milestoneForm += "&AlertsEnabled=" + $("#AlertMile").val();
            milestoneForm += "&Ocurrences=" + encodeURIComponent(vOcurence);
            milestoneForm += "&Recurrences=" + encodeURIComponent(vRecurrence);
            milestoneForm += "&CustomString=" + encodeURIComponent(vRecurrenceCustom);
            milestoneForm += "&MilestoneEndTerm=" + encodeURIComponent($("input:radio[name=SelectMilestoneOccurenceEndDate]:checked").val());
            milestoneForm += "&RecMonthlyString=" + "";
            if (typeof ($("#hdnCustomDateFieldName").text()) != "undefined" && $("#hdnCustomDateFieldName").text() != null && $("#hdnCustomDateFieldName").text() != "") {
                milestoneForm += "&CustomDateFieldName=" + encodeURIComponent($("#hdnCustomDateFieldName").text());
            }
            formData.append("SearializeControls", milestoneForm);
            formData.append("objoccurrence", "");
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonesnew',
                type: 'POST',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                    username: localStorage.UserName
                },
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (person) {
                    $("#addEditMilestoneNew").dialog("close");
                    if ($('#milestoneInline').is(':hidden')) { } else {
                        $('#milestoneInline').slideToggle();
                    }
                    $("#loadingPage").fadeOut();
                    BindMilestone();
                },
                error: function (data) {
                    $("#loadingPage").fadeOut();
                },
                complete: function () {
                    $("#loadingPage").fadeOut();
                    $("#inprocessObligation").css('visibility', 'none');
                }
            });
        }
    }
    return isformvalid;
}

function milestonevalidate() {
    var isformvalid = false;
    if (requiredValidator('addNewMilestoneNew')) {
        if (comparedatestatus($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')), $("#ddlMilestoneNewStatus").val())) {
            var oValidate = true;
            if ($('#ddlMilestoneOccurencess').val() == "Weekly") {
                var strrecuobli = "";
                $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                    strrecuobli += (this.value) + ",";
                });
                if (strrecuobli == "") {
                    oValidate = false;
                }
            }
            if (!oValidate) {
                $("#loadingPage").fadeOut();
                $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
                    var Id = this.id;
                    $("#" + Id).css('outline', '1px solid #F00');
                });
                return false;
            }
            var ownervalidation = false;
            var arrNewOwners = [];
            var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
            var isGroup = false;
            $(arrMilestoneOwner).each(function (i, item) {
                if (item.indexOf('{') > -1) {
                    isGroup = true;
                }
            });
            if (isGroup) {
                arrNewOwners = getMilestoneOwners(arrMilestoneOwner.join(';'));
                var vNotMilestoneOwner = '';
                $(arrNewOwners).each(function (i, item) {
                    if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                        if (vNotMilestoneOwner == '') {
                            vNotMilestoneOwner = item;
                        } else {
                            vNotMilestoneOwner += "; " + item;
                        }
                    }
                });
            } else {
                var vNotMilestoneOwner = '';
                $(arrMilestoneOwner).each(function (i, item) {
                    if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                        if (vNotMilestoneOwner == '') {
                            vNotMilestoneOwner = item;
                        } else {
                            vNotMilestoneOwner += "; " + item;
                        }
                    }
                });
            }
            if (vNotMilestoneOwner != '') {
                swal({
                    title: '',
                    text: "<span style=\"font-weight:700\">'" + vNotMilestoneOwner + "'</span> do not have permission to access to this contract or not part of contract.",
                    showCancelButton: false,
                    confirmButtonText: 'OK',
                    html: true
                });
                $("#loadingPage").fadeOut();
                return false;
            }
            var strContractID = getParameterByName('ContractID');
            var existingconMilestones = null;
            var cStartDate = "";
            var cEndDate = "";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                cache: false,
                async: false,
                success: function (data) {
                    existingconMilestones = data;
                    $(data).each(function (i, item) {
                        if (item.MilestoneTitle == "Start Date") {
                            cStartDate = item.MilestoneDate;
                        } else if (item.MilestoneTitle == "End Date") {
                            cEndDate = item.MilestoneDate;
                        }
                    });
                }
            });
            var datevalidationexists = false;
            if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                if (!comparedatesmile($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')), cEndDate)) {
                    datevalidationexists = true;
                    swal("", "Start date should be less than the end date milestone.");
                }
            } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                if (!comparedatesmile(cStartDate, $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')))) {
                    datevalidationexists = true;
                    swal("", "End date should be greater than start date milestone.");
                }
            }
            if (!datevalidationexists) {
                var MilestoneID = $("#txtMilestoneIDNew").val();
                if (MilestoneID != "") {
                    if (existingconMilestones != null) {
                        if ($('#ddlMilestoneOccurencess').val() == "None") {
                            $(existingconMilestones).each(function (i, item) {
                                if (MilestoneID != item.RowKey) {
                                    if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle) {
                                        if (!comparedatesequal(moment(new Date(item.MilestoneDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')))) {
                                            if (!datevalidationexists) {
                                                swal("", "Milestone title for the particular date already exist.");
                                            }
                                            datevalidationexists = true;
                                        }
                                    }
                                }
                            });
                        } else {
                            if (listMilestoneNewData != "") {
                                var txtMilestoneNewText = $('#txtMilestoneNewText').val();
                                $(existingconMilestones).each(function (i, item) {
                                    if (MilestoneID != item.RowKey) {
                                        if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle && txtMilestoneNewText != item.MilestoneText) {
                                            if (!comparedatesequalrecurrence(moment(new Date(item.MilestoneDate)).utc().format('MM/DD/YYYY'), listMilestoneNewData)) {
                                                if (!datevalidationexists) {
                                                    swal("", "Milestone title for one of the date in recurrence already exist.");
                                                }
                                                datevalidationexists = true;
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    }
                } else {
                    if (existingconMilestones != null) {
                        if ($('#ddlMilestoneOccurencess').val() == "None") {
                            $(existingconMilestones).each(function (i, item) {
                                if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle) {
                                    if (!comparedatesequal(moment(new Date(item.MilestoneDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')))) {
                                        if (!datevalidationexists) {
                                            swal("", "Milestone title for the particular date already exist.");
                                        }
                                        datevalidationexists = true;
                                    }
                                }
                            });
                        } else {
                            if (listMilestoneNewData != "") {
                                $(existingconMilestones).each(function (i, item) {
                                    if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle) {
                                        if (!comparedatesequalrecurrence(item.MilestoneDate, listMilestoneNewData)) {
                                            if (!datevalidationexists) {
                                                swal("", "Milestone title for one of the date in recurrence already exist.");
                                            }
                                            datevalidationexists = true;
                                        }
                                    }
                                });
                            }
                        }
                    }
                }
            }
            if (!datevalidationexists) {
                var start = moment($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')));
                var today = new Date();
                var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                var vv = start.diff(end, "days");
                var vRenminder = '';
                var swalFlag = false;
                var blUpdate = true;
                isformvalid = true;
                var oDate = false;
                if ($("#ddlReminder1MilestoneNew").val() == "before") {
                    if (vv <= parseInt($("#txtReminder1MilestoneNew").val())) {
                        oDate = true;
                    }
                } else {
                    oDate = false;
                }
                if ($("#ddlReminder2MilestoneNew").val() == "before") {
                    if (vv <= parseInt($("#txtReminder2MilestoneNew").val())) {
                        oDate = true;
                    }
                } else {
                    oDate = false;
                }
                if ($("#ddlReminder3MilestoneNew").val() == "before") {
                    if (vv <= parseInt($("#txtReminder3MilestoneNew").val())) {
                        oDate = true;
                    }
                } else {
                    oDate = false;
                }
                if (oDate) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                modalOnOpenMilestoneNew();
                            }
                        });
                } else {
                    modalOnOpenMilestoneNew();
                }
                isformvalid = blUpdate
            }
        } else {
            isformvalid = false;
            $("#ddlMilestoneNewStatus").addClass('error');
            $('html, body').animate({
                scrollTop: 0
            }, 'fast');
        }
    }
    return isformvalid;
}

function checkMultipleMilestonesNewMul(object) {
    var hidecomplete = false;
    $.each($('input:checkbox[name="chkmilestone"]:checked'), function () {
        if (typeof (this) != 'undefined' && $.trim(this) != null) {
            if ($(this).hasClass("delmilestone") && (!hidecomplete)) {
                hidecomplete = true;
            }
        }
    });
    if (hidecomplete) {
        $("#limilestonecomplete").css("display", "none");
    } else {
        if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
            $("#limilestonecomplete").css("display", "none");
        } else if ($("#hdnPermission").val() == "Contribute" || $("#hdnPermission").val() == "Manage") {
            $("#limilestonecomplete").css("display", "");
        }
    }
    if ($('input:checkbox[name="chkmilestone"]:checked').length > 0) {
        $("#milestonesNewActions").css('display', '');
    } else {
        $("#milestonesNewActions").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    } catch (ex) { }
}

function contextMenuMilestoneNewMul(action, el, pos) {
    switch (action) {
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var selectedmilestoneid = Getvaluebynameattr('chkmilestone');
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneids=' + selectedmilestoneid + '&contractid=' + vContractID,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                cache: false,
                                success: function (data) {
                                    selectedmilestoneid = "";
                                    BindMilestone(vContractID);
                                    $("#milestonesNewActions").css('display', 'none');
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "update":
            {
                var selectedmilestoneid = Getvaluebynameattr('chkmilestone');
                var formDataStatusMile = new FormData();
                formDataStatusMile.append("MilestoneIDs", selectedmilestoneid);
                $("#loadingPage").fadeIn();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/changestatus?status=Complete',
                    type: 'PUT',
                    dataType: 'json',
                    data: formDataStatusMile,
                    contentType: false,
                    processData: false,
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (result) {
                        $("#loadingPage").fadeOut();
                        selectedmilestoneid = "";
                        BindMilestone(vContractID);
                        $("#milestonesNewActions").css('display', 'none');
                    },
                    error: function (result) {
                        $("#loadingPage").fadeOut();
                        selectedmilestoneid = "";
                        BindMilestone(vContractID);
                    }
                });
                break;
            }
    }
}

function SystemMileStoneArticle(titleTerm, dateValue, beforeDaysSort, afterDaysSort) {
    var article = '';
    var formatdateValue = '';
    if (dateValue != "" && dateValue != null) {
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            formatdateValue = moment(new Date(dateValue)).format('MM/DD/YYYY');
        } else {
            formatdateValue = moment(new Date(dateValue)).format(localStorage.AppDateFormat);
        }
        vDate = formatdateValue != "" ? (formatdateValue + ': ') : "";
        article = '<li class=" margin-bottom-8" title="Contract Term/Timelines">';
        article += '<img src="/Content/Images/Contract_Term.png" title="Contract Term/Timelines" style="pointer-events: none;">';
        article += '<span class="DateToSort" style="color: black;"> ' + vDate + '</span>';
        article += ' <a href="javascript:void(0)" style="color:#555555;" onclick=contextMenuTerm(\"view\",\"\",\"\")>' + titleTerm + '</a>';
        var beforeDays = '';
        var afterDays = '';
        var resultBefore = $.grep(beforeDaysSort, function (e) {
            return e.Condition == titleTerm;
        });
        if (resultBefore != 0) {
            beforeDays = resultBefore[0].Value;
        }
        var resultAfter = $.grep(afterDaysSort, function (e) {
            return e.Condition == titleTerm;
        });
        if (resultAfter != 0) {
            afterDays = resultAfter[0].Value;
        }
        if (beforeDays != '' || afterDays != '') {
            article += '<span class="sub-text-head"> (Reminders ' + (beforeDays != '' ? beforeDays + ' day(s) before' : '') + (afterDays != '' ? (beforeDays != '' ? ' & ' + afterDays + ' day(s) after )' : afterDays + ' day(s) after)') : ')') + ' </span>';
        }
        article += '</li>';
        articleSystemMileStone += article;
    }
}

function comparedatestatus(firstDate, status) {
    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        status != null && status != '') {
        if (status == "Upcoming") {
            var dt1 = new Date(firstDate);
            var dt2 = new Date();
            var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate());
            var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate());
            if (dateOne > dateTwo) {
                isvalid = true;
            } else {
                isvalid = false;
            }
        } else if (status == "Delayed") {
            var dt1 = new Date(firstDate);
            var dt2 = new Date();
            var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate());
            var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate());
            if (dateOne < dateTwo) {
                isvalid = true;
            } else {
                isvalid = false;
            }
        }
    }
    return isvalid;
}

function comparedatesmile(firstDate, secondDate) {
    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        secondDate != null && secondDate != '') {
        var dt1 = new Date(firstDate);
        var dt2 = new Date(secondDate);
        var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate());
        var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate());
        if (dateOne > dateTwo) {
            isvalid = false;
        } else {
            isvalid = true;
        }
    }
    return isvalid;
}

function comparedatesequal(firstDate, secondDate) {
    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        secondDate != null && secondDate != '') {
        var dt1 = new Date(firstDate);
        var dt2 = new Date(secondDate);
        var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate());
        var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate());
        if (dateOne.getTime() == dateTwo.getTime()) {
            isvalid = false;
        } else {
            isvalid = true;
        }
    }
    return isvalid;
}

function comparedatesequalrecurrence(firstDate, secondDate) {
    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        secondDate != null && secondDate != '') {
        var secondDates = secondDate.Values;
        var dt1 = new Date(firstDate);
        var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate());
        $(secondDates).each(function (i, item) {
            var dt2 = new Date(item);
            var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate());
            if (dateOne.getTime() == dateTwo.getTime()) {
                isvalid = false;
            }
        });
    }
    return isvalid;
}

//---------------------------------Milestone Ends-----------------------------------------------//

//---------------------------------Amendment Begins-----------------------------------------------//

function BindAmendments(contractid) {
    if (contractid == null || contractid == "") {
        contractid = vContractID;
    }
    $("#ulAmendment").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        asyn: false,
        success: function (contactsJsonPayload) {
            var count = 0;
            $(contactsJsonPayload).each(function (i, item) {
                count++
                var vDesc = item.AmendmentDescription;
                if (vDesc == null || vDesc == '') {
                    vDesc = '';
                }
                var article = '';
                if (count <= 5)
                    article = '<li class=" margin-bottom-8 WrapText_h2">';
                else
                    article = '<li class="ShowMoreAmendments margin-bottom-8 WrapText_h2" style="display:none;">';
                article += '<label id="AmendmentID" style="display:none;">' + item.RowKey + '</label>';
                article += '<label id="AmendmentTitle" style="display:none;">' + item.AmendmentTitle + '</label>';
                article += '<label id="AmendmentApprovalWorkflow" style="display:none;">' + item.ApprovalWorkflow + '</label>';
                article += '<a href="javascript:void(0)" onclick="ViewAmendment(\'' + item.RowKey + '\')">' + item.AmendmentTitle + '</a>';
                article += '<span class="sub-text"> ' + vDesc + '</span>';
                article += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuAmendment"/>';
                article += '</li>';
                $("#ulAmendment").append(article);
            });
            if (count > 5) {
                var more = count - 5;
                $("#dvAmendment").html('<a id="ShowMoreAmendments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreAmendments()">' + more + ' More Amendments </a>' +
                    '<a id="ShowLessAmendments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessAmendments()" style="display:none;">Show less</a>');
            }
            $("#lblAmendmentsCount").text(count);
            if (count == 0) {
                $("#ulAmendment").append('No items found.');
            }
            $(".openmenuAmendment").contextMenu({
                menu: 'dropdownMenuAmendmentRecord',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuAmendment(action, el.parent("li"), pos);
            });
        },
        error: function (request) {
            $("#lblAmendmentsCount").text('0');
            $("#ulAmendment").append('No items found.');
        }
    });
}

function ShowMoreAmendments() {
    $('.ShowMoreAmendments').css("display", "");
    $('#ShowMoreAmendments').css("display", "none");
    $('#ShowLessAmendments').css("display", "");
}

function ShowLessAmendments() {
    $('.ShowMoreAmendments').css("display", "none");
    $('#ShowMoreAmendments').css("display", "");
    $('#ShowLessAmendments').css("display", "none");
}

function addAmendment() {
    $("#btnAddAmendment").click();
    //manoj
    $("#dtAmendmentFinalizedDate").keypress(function (event) {
        event.preventDefault();
    });
    $("#dtAmendmentEffectiveDate").keypress(function (event) {
        event.preventDefault();
    });
    //manoj
}

function modalOnOpenAmendment(dialog) {
    var fAmendmentEffectiveDate = '';
    if ($("#dtAmendmentEffectiveDate").val() != "" && $("#dtAmendmentEffectiveDate").val() != null) {
        fAmendmentEffectiveDate = $.datepicker.formatDate('mm/dd/yy', $("#dtAmendmentEffectiveDate").datepicker('getDate'));
    }
    var fContractEndDateAfterAmend = '';
    if ($("#txtContractEndDateAfterAmend").val() != "" && $("#txtContractEndDateAfterAmend").val() != null) {
        fContractEndDateAfterAmend = $.datepicker.formatDate('mm/dd/yy', $("#txtContractEndDateAfterAmend").datepicker('getDate'));
    }
    var fAmendmentCompletedDate = '';
    if ($("#dtAmendmentFinalizedDate").val() != "" && $("#dtAmendmentFinalizedDate").val() != null) {
        fAmendmentCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtAmendmentFinalizedDate").datepicker('getDate'));
    }
    var fContractEndDateCurrentAmend = '';
    if ($("#txtContractEndDateCurrent").val() != "" && $("#txtContractEndDateCurrent").val() != null) {
        fContractEndDateCurrentAmend = $.datepicker.formatDate('mm/dd/yy', $("#txtContractEndDateCurrent").datepicker('getDate'));
    }

    var completeddate = fAmendmentCompletedDate != '' ? new Date(fAmendmentCompletedDate) : "";
    var effectivedate = fAmendmentEffectiveDate != '' ? new Date(fAmendmentEffectiveDate) : "";
    var currentdate = new Date(moment());
    var EndDateAfterAmend = fContractEndDateAfterAmend != '' ? new Date(fContractEndDateAfterAmend) : "";
    if (EndDateAfterAmend != "" && currentdate != "" && EndDateAfterAmend < currentdate) {
        swal({
            title: '',
            text: "Contract Record End Date(After Amendment) cannot be less than Today's Date",
            type: 'warning',
            showCancelButton: false,
            confirmButtonText: 'OK',
            html: true
        },
            function (confirmed) {
                if (confirmed) {
                    $("#loadingPage").fadeOut();
                }
            });
        return;
    } else if (completeddate != "" && effectivedate != "" && completeddate > effectivedate) {
        if (completeddate > currentdate) {
            swal({
                title: '',
                text: "Amendment Finalized Date cannot be greater than Today's Date",
                type: 'warning',
                showCancelButton: false,
                confirmButtonText: 'OK',
                html: true
            },
                function (confirmed) {
                    if (confirmed) {
                        $("#loadingPage").fadeOut();

                    }
                });
            return;
        }
        //else if (completeddate > effectivedate) {
        //    swal({
        //        title: '',
        //        text: "Amendment Finalized Date cannot be greater than Effective Date",
        //        type: 'warning',
        //        showCancelButton: false,
        //        confirmButtonText: 'OK',
        //        html: true
        //    },
        //  function (confirmed) {
        //      if (confirmed) {
        //          $("#loadingPage").fadeOut();

        //      }
        //  });
        //    return;
        //}
    }
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var urlOfAttachedDoc = getUrlOfAttachedDoc();
    var isformvalid = false;
    if (requiredValidator('addNewAmendment')) {
        $("#loadingPage").fadeIn();
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var AmendmentID = $("#txtAmendmentID").val()
        if (AmendmentID != "") {
            if (!CheckAmendmentTitle(AmendmentID, $("#txtAmendmentTitle").val())) {
                var effectivedate = ($("#dtAmendmentEffectiveDate").val() != "") ? false : true;
                if (!effectivedate) {
                    effectivedate = CheckAmendmentEffectivedate(AmendmentID, $("#ddlAmendmentType").val());
                } else {
                    effectivedate = false;
                }
                if (!effectivedate) {
                    var formData = new FormData();
                    var opmlFile = $('#docAmendment')[0];

                    formData.append("opmlFile", opmlFile.files[0]);
                    var totalFileCount = $("#inTD").children("div").length

                    for (var i = 1; i < totalFileCount + 1; i++) {

                        var filename = '#file' + i;
                        formData.append("opmlFile" + i, $(filename)[0].files[0]);

                    }
                    formData.append("UrlOfAttachedDoc", urlOfAttachedDoc);
                    formData.append("AmendmentID", AmendmentID);
                    formData.append("ContractID", getParameterByName('ContractID'));
                    formData.append("ContractTitle", $("#lblCTitleAmend").text());
                    formData.append("AmendmentTitle", $("#txtAmendmentTitle").val())
                    formData.append("AmendmentType", $("#ddlAmendmentType").val());
                    formData.append("AmendmentDescription", $("#txtAmendmentDesc").val());
                    formData.append("OriginatingCompany", "OriginatingCompany");
                    formData.append("AccountID", localStorage.AccountID);
                    formData.append("ModifiedBy", localStorage.UserName);

                    formData.append("LocationURL", $('#lblFolderUrlAmend').text())
                    formData.append("FolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())
                    formData.append("NewFolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())

                    if ($("#txtBusinessArea").val() != "") {
                        formData.append("BusinessArea", $("#txtBusinessArea").val().trim());
                    } else {
                        formData.append("BusinessArea", $("#lblBusinessArea").text().trim());
                    }
                    formData.append("BusinessAreaPath", $("#lblBusinessAreaPath").text());
                    formData.append("ContractArea", $("#lblContractArea").text().trim());
                    formData.append("ContractAreaAdministrators", $("#lblContractAreaAdmins").text().trim());
                    formData.append("BusinessAreaOwners", $("#lblBusinessAreaOwners").text().trim());

                    var RequestedByToArr = $("#ddlRequestedBy").val();
                    var vRequestedBy = '';
                    $(RequestedByToArr).each(function (i, item) {
                        if (vRequestedBy == '') {
                            vRequestedBy = item;
                        } else {
                            vRequestedBy += "; " + item;
                        }
                    });
                    formData.append("RequestedBy", vRequestedBy);

                    //var vAmendmentCompleted = $('input[type="radio"][name=AmendmentCompleted]:checked').val();
                    //if (vAmendmentCompleted == "Yes") {
                    //    amendmentcompletedchecking = true;
                    //}
                    //else {
                    //    amendmentcompletedchecking = false;
                    //}
                    //formData.append("AmendmentCompleted", vAmendmentCompleted);
                    //formData.append("AmendmentCompletedDate", (vAmendmentCompleted == "Yes") ? fAmendmentCompletedDate : '');

                    var vAmendmentCompleted = $('input[type="radio"][name=AmendmentFinalized]:checked').val();
                    if (vAmendmentCompleted == "Yes") {
                        if (fAmendmentEffectiveDate == '')
                            amendmentcompletedchecking = true;
                        else {
                            if (vAmendmentCompleted)
                                amendmentcompletedchecking = true;
                            else
                                amendmentcompletedchecking = false;
                        }
                    } else {
                        amendmentcompletedchecking = false;
                    }
                    formData.append("AmendmentFinalized", vAmendmentCompleted);
                    formData.append("AmendmentFinalizedDate", (vAmendmentCompleted == "Yes") ? fAmendmentCompletedDate : '');
                    formData.append("AmendmentFinalizedBy", (vAmendmentCompleted == "Yes") ? $("#txtAmendmentFinalizedBy").val() : '');

                    formData.append("EffectiveDate", fAmendmentEffectiveDate);

                    if ($("#chkContractValidity").is(":checked")) {
                        formData.append("IsContractValidityEnabled", "Yes");
                        formData.append("ContractEndDateAfterAmendment", fContractEndDateAfterAmend);
                        if ($("#chkUpdateContractValidity").is(":checked")) {
                            formData.append("UpdateContractEndDate", "Yes");
                        } else {
                            formData.append("UpdateContractEndDate", "No");
                        }
                        formData.append("ContractValidityNotes", $("#txtContractValidityNotes").val());
                    } else {
                        formData.append("IsContractValidityEnabled", "No");
                        formData.append("ContractEndDateAfterAmendment", "");
                        formData.append("UpdateContractEndDate", "No");
                        formData.append("ContractValidityNotes", "");
                    }
                    if ($("#chkContractValue").is(":checked")) {
                        formData.append("IsContractValueEnabled", "Yes");
                        formData.append("FunderOrAccountName", $("#txtFunderName").val());
                        formData.append("FunderOrAccountNumber", $("#txtFunderNumber").val());
                        formData.append("ContractValueAfterAmendment", $("#txtContractValueAfterAmend").autoNumeric('get'));
                        if (vAmendmentCompleted == "Yes") {
                            formData.append("UpdateContractValue", "Yes");
                        } else {
                            formData.append("UpdateContractValue", "No");
                        }
                        formData.append("ContractValueNotes", $("#txtContractValueNotes").val());
                    } else {
                        formData.append("IsContractValueEnabled", "NO");
                        formData.append("FunderOrAccountName", "");
                        formData.append("FunderOrAccountNumber", "");
                        formData.append("ContractValueAfterAmendment", "");
                        formData.append("UpdateContractValue", "No");
                        formData.append("ContractValueNotes", "");
                    }

                    if ($("#chkSOW").is(":checked")) {
                        formData.append("IsSOWEnabled", "Yes");
                        formData.append("SummaryOfSOWAfterAmendment", $("#txtSOWAfter").val());

                    } else {
                        formData.append("IsSOWEnabled", "No");
                        formData.append("SummaryOfSOWAfterAmendment", "");
                    }
                    if (CheckAmendmentDocumentExist()) {
                        //if document exists as confirmation to overwrite
                        swal({
                            title: '',
                            text: ExitDocuemntName + " already exists, do you want to overwrite the existing document?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                            function (confirmed) {
                                if (confirmed) {
                                    if ($("#chkReplaceDoc").is(":checked")) {
                                        formData.append("ReplaceDocument", "Yes");
                                        formData.append("AmendmentidtoPass", AmendmentidtoPass);
                                    } else {
                                        formData.append("ReplaceDocument", "Yes");
                                        formData.append("AmendmentidtoPass", AmendmentidtoPass);
                                    }

                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?amendmentid=' + AmendmentID,
                                        type: 'PUT',
                                        data: formData,
                                        cache: false,
                                        contentType: false,
                                        headers: {
                                            'eContracts-ApiKey': localStorage.APIKey,
                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                            username: localStorage.UserName,
                                            'RefreshToken': localStorage.RefreshToken
                                        },
                                        processData: false,
                                        success: function (person) {
                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                            BindAmendments();
                                            //manoj
                                            if (documentview == null || documentview == "" || documentview == 'folder') {
                                                if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                                    var selectedfoldervalue = $('#showAll').find("a");
                                                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                                    var parentdocumentdetails = {
                                                        id: idvalueselected,
                                                        text: textvalueselected
                                                    };
                                                    showfolderdocuments(parentdocumentdetails);
                                                } else {
                                                    BindDocument(vContractID);
                                                }
                                            } else {
                                                DisplayDocument(documentview);
                                            }
                                            pendingStarted = false;
                                            GetContractPendingAction(true, "BindPeoples");
                                            $("#hdnFolderDocumentView").text('');
                                            $("#hdnShowAllTextValue").html('');
                                            PrvFolderselection = '';
                                            //Bind primary and pined document based on new feature
                                            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                                CreateDocumentListPinView(vContractID);
                                            }
                                            //manoj
                                            $("#addEditAmendment").dialog("close");
                                        },
                                        complete: function () {
                                            if ($('#txtNewFolderNameAmend').val() != "" && document.getElementById('txtNewFolderNameAmend').style.display != 'none') {
                                                var checkingtestamd = $('#lblFolderUrlAmend').text();
                                                $('#lblFolderUrlAmend').text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/" : checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                                                $("#hdnContractDocumentsUrl").text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" : checkingtestamd);
                                                $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                                $('#txtNewFolderNameAmend').css('display', 'none');
                                                $('#txtNewFolderNameAmend').val("");
                                                $('#txtNewFolderNameAmend').removeClass('validelement');
                                                if (contractItem != null) {
                                                    if (contractItem.AmendmentDocumentsUrl == null || contractItem.AmendmentDocumentsUrl == "") {
                                                        if ($('#lblFolderUrlAmend').text().indexOf("/Amendments/") >= 0) {
                                                            contractItem.AmendmentDocumentsUrl = $('#lblFolderUrlAmend').text();
                                                        }
                                                    }
                                                }
                                            }
                                            clearTimeout(cleartimevalue2);
                                            cleartimevalue2 = setTimeout(refreshContractActivities, 10000);
                                            //GetContractActivities(vContractID);
                                            $("#loadingPage").fadeOut();
                                        }
                                    });
                                } else {
                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                    $("#loadingPage").fadeOut();
                                }
                                return;
                            });
                    } else {
                        if ($("#chkReplaceDoc").is(":checked")) {
                            formData.append("ReplaceDocument", "Yes");
                            formData.append("AmendmentidtoPass", AmendmentidtoPass);
                        } else {
                            formData.append("ReplaceDocument", "No");
                        }
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?amendmentid=' + AmendmentID,
                            type: 'PUT',
                            data: formData,
                            cache: false,
                            contentType: false,
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                username: localStorage.UserName,
                                'RefreshToken': localStorage.RefreshToken
                            },
                            processData: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                BindAmendments();
                                //manoj
                                if (documentview == null || documentview == "" || documentview == 'folder') {
                                    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                        var selectedfoldervalue = $('#showAll').find("a");
                                        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                        var parentdocumentdetails = {
                                            id: idvalueselected,
                                            text: textvalueselected
                                        };
                                        showfolderdocuments(parentdocumentdetails);
                                    } else {
                                        BindDocument(vContractID);
                                    }
                                } else {
                                    DisplayDocument(documentview);
                                }
                                pendingStarted = false;
                                GetContractPendingAction(true, "BindPeoples");
                                $("#hdnFolderDocumentView").text('');
                                $("#hdnShowAllTextValue").html('');
                                PrvFolderselection = '';
                                //Bind primary and pined document based on new feature
                                if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                    CreateDocumentListPinView(vContractID);
                                }
                                //manoj
                                amendmentsucessbinding();
                                $("#addEditAmendment").dialog("close");
                            },
                            complete: function () {
                                if ($('#txtNewFolderNameAmend').val() != "" && document.getElementById('txtNewFolderNameAmend').style.display != 'none') {
                                    var checkingtestamd = $('#lblFolderUrlAmend').text();
                                    $('#lblFolderUrlAmend').text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/" : checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                                    $("#hdnContractDocumentsUrl").text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" : checkingtestamd);
                                    $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                    $('#txtNewFolderNameAmend').css('display', 'none');
                                    $('#txtNewFolderNameAmend').val("");
                                    $('#txtNewFolderNameAmend').removeClass('validelement');
                                    if (contractItem != null) {
                                        if (contractItem.AmendmentDocumentsUrl == null || contractItem.AmendmentDocumentsUrl == "") {
                                            if ($('#lblFolderUrlAmend').text().indexOf("/Amendments/") >= 0) {
                                                contractItem.AmendmentDocumentsUrl = $('#lblFolderUrlAmend').text();
                                            }
                                        }
                                    }
                                }
                                clearTimeout(cleartimevalue2);
                                cleartimevalue2 = setTimeout(refreshContractActivities, 10000);
                                //GetContractActivities(vContractID);
                                $("#loadingPage").fadeOut();
                            }
                        });
                    }

                } else {
                    var effectivedateamdvalue;
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        effectivedateamdvalue = $.datepicker.formatDate('mm/dd/yy', $("#dtAmendmentEffectiveDate").datepicker('getDate'));
                    } else {
                        effectivedateamdvalue = $.datepicker.formatDate(localStorage.AppDateFormat, $("#dtAmendmentEffectiveDate").datepicker('getDate'));
                    }
                    swal("", "Amendment record exists with the effective date '<span style=\"font-weight:700\">" + effectivedateamdvalue + "</span>'");
                    $("#loadingPage").fadeOut();
                }
            } else {
                swal("", "Amendment record exists with the title '<span style=\"font-weight:700\">" + $("#txtAmendmentTitle").val() + "</span>'");
                $("#loadingPage").fadeOut();
                $("#txtAmendmentTitle").focus();
            }
        } else {
            if (!CheckAmendmentTitle(AmendmentID, $("#txtAmendmentTitle").val())) {
                var effectivedate = ($("#dtAmendmentEffectiveDate").val() != "") ? false : true;
                if (!effectivedate) {
                    effectivedate = CheckAmendmentEffectivedate(AmendmentID, $("#ddlAmendmentType").val());
                } else {
                    effectivedate = false;
                }
                if (!effectivedate) {
                    var formData1 = new FormData();
                    var opmlFile = $('#docAmendment')[0];

                    formData1.append("opmlFile", opmlFile.files[0]);
                    var totalFileCount = $("#inTD").children("div").length
                    for (var i = 1; i < totalFileCount + 1; i++) {
                        var filename = '#file' + i;
                        formData1.append("opmlFile" + i, $(filename)[0].files[0]);
                    }
                    formData1.append("AccountID", localStorage.AccountID);
                    formData1.append("AmendmentID", AmendmentID);
                    formData1.append("ContractID", getParameterByName('ContractID'));
                    formData1.append("ContractTitle", $("#lblCTitleAmend").text());
                    formData1.append("AmendmentTitle", $("#txtAmendmentTitle").val())
                    formData1.append("AmendmentType", $("#ddlAmendmentType").val());
                    formData1.append("AmendmentDescription", $("#txtAmendmentDesc").val());
                    formData1.append("OriginatingCompany", "OriginatingCompany");
                    formData1.append("CreatedBy", localStorage.UserName);
                    formData1.append("ModifiedBy", localStorage.UserName);

                    formData1.append("LocationURL", $('#lblFolderUrlAmend').text())
                    formData1.append("FolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())
                    formData1.append("NewFolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())

                    if ($("#txtBusinessArea").val() != "") {
                        formData1.append("BusinessArea", $("#txtBusinessArea").val().trim());
                    } else {
                        formData1.append("BusinessArea", $("#lblBusinessArea").text().trim());
                    }
                    formData1.append("BusinessAreaPath", $("#lblBusinessAreaPath").text());
                    formData1.append("ContractArea", $("#lblContractArea").text().trim());
                    formData1.append("ContractAreaAdministrators", $("#lblContractAreaAdmins").text().trim());
                    formData1.append("BusinessAreaOwners", $("#lblBusinessAreaOwners").text().trim());

                    var RequestedByToArr = $("#ddlRequestedBy").val();
                    var vRequestedBy = '';
                    $(RequestedByToArr).each(function (i, item) {
                        if (vRequestedBy == '') {
                            vRequestedBy = item;
                        } else {
                            vRequestedBy += "; " + item;
                        }
                    });
                    formData1.append("RequestedBy", vRequestedBy);
                    //var vAmendmentCompleted = $('input[type="radio"][name=AmendmentCompleted]:checked').val();
                    //if (vAmendmentCompleted == "Yes") {
                    //    amendmentcompletedchecking = true;
                    //}
                    //else {
                    //    amendmentcompletedchecking = false;
                    //}
                    //formData1.append("AmendmentCompleted", vAmendmentCompleted);
                    //formData1.append("AmendmentCompletedDate", (vAmendmentCompleted == "Yes") ? fAmendmentCompletedDate : '');
                    var vAmendmentCompleted = $('input[type="radio"][name=AmendmentFinalized]:checked').val();
                    if (vAmendmentCompleted == "Yes") {
                        if (fAmendmentEffectiveDate == '')
                            amendmentcompletedchecking = true;
                        else {
                            if (vAmendmentCompleted)
                                amendmentcompletedchecking = true;
                            else
                                amendmentcompletedchecking = false;
                        }
                    } else {
                        amendmentcompletedchecking = false;
                    }
                    formData1.append("AmendmentFinalized", vAmendmentCompleted);
                    formData1.append("AmendmentFinalizedDate", (vAmendmentCompleted == "Yes") ? fAmendmentCompletedDate : '');
                    formData1.append("AmendmentFinalizedBy", (vAmendmentCompleted == "Yes") ? $("#txtAmendmentFinalizedBy").val() : '');

                    formData1.append("EffectiveDate", fAmendmentEffectiveDate);

                    if ($("#chkContractValidity").is(":checked")) {
                        formData1.append("IsContractValidityEnabled", "Yes");
                        formData1.append("ContractEndDateAfterAmendment", fContractEndDateAfterAmend);
                        if ($("#chkUpdateContractValidity").is(":checked")) {
                            formData1.append("UpdateContractEndDate", "Yes");
                        } else {
                            formData1.append("UpdateContractEndDate", "No");
                        }
                        formData1.append("ContractValidityNotes", $("#txtContractValidityNotes").val());
                    } else {
                        formData1.append("IsContractValidityEnabled", "No");
                        formData1.append("ContractEndDateAfterAmendment", "");
                        formData1.append("UpdateContractEndDate", "No");
                        formData1.append("ContractValidityNotes", "");
                    }

                    if ($("#chkContractValue").is(":checked")) {
                        formData1.append("IsContractValueEnabled", "Yes");
                        formData1.append("FunderOrAccountName", $("#txtFunderName").val());
                        formData1.append("FunderOrAccountNumber", $("#txtFunderNumber").val());
                        formData1.append("ContractValueAfterAmendment", $("#txtContractValueAfterAmend").autoNumeric('get'));
                        if (vAmendmentCompleted == "Yes") {
                            formData1.append("UpdateContractValue", "Yes");
                        } else {
                            formData1.append("UpdateContractValue", "No");
                        }
                        formData1.append("ContractValueNotes", $("#txtContractValueNotes").val());
                    } else {
                        formData1.append("IsContractValueEnabled", "No");
                        formData1.append("FunderOrAccountName", "");
                        formData1.append("FunderOrAccountNumber", "");
                        formData1.append("ContractValueAfterAmendment", "");
                        formData1.append("UpdateContractValue", "No");
                        formData1.append("ContractValueNotes", "");
                    }

                    if ($("#chkSOW").is(":checked")) {
                        formData1.append("IsSOWEnabled", "Yes");
                        formData1.append("SummaryOfSOWAfterAmendment", $("#txtSOWAfter").val());

                    } else {
                        formData1.append("IsSOWEnabled", "No");
                        formData1.append("SummaryOfSOWAfterAmendment", "");
                    }

                    if (CheckAmendmentDocumentExist()) {
                        //if document exists as confirmation to overwrite
                        swal({
                            title: '',
                            text: ExitDocuemntName + " already exists, do you want to overwrite the existing document?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                            function (confirmed) {
                                if (confirmed) {
                                    if ($("#chkReplaceDoc").is(":checked")) {
                                        formData1.append("IsSOWEnabled", "Yes");
                                        formData1.append("ReplaceDocument", "Yes");
                                        formData1.append("AmendmentidtoPass", AmendmentidtoPass);
                                    } else {
                                        formData1.append("IsSOWEnabled", "No");
                                        formData1.append("ReplaceDocument", "Yes");
                                        formData1.append("AmendmentidtoPass", AmendmentidtoPass);
                                    }

                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/addwithdoc',
                                        type: 'POST',
                                        data: formData1,
                                        cache: false,
                                        contentType: false,
                                        headers: {
                                            'eContracts-ApiKey': localStorage.APIKey,
                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                            username: localStorage.UserName,
                                            'RefreshToken': localStorage.RefreshToken
                                        },
                                        processData: false,
                                        success: function (person) {
                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                            $("#addEditAmendment").dialog("close");
                                            BindAmendments();
                                            //manoj
                                            if (documentview == null || documentview == "" || documentview == 'folder') {
                                                if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                                    var selectedfoldervalue = $('#showAll').find("a");
                                                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                                    var parentdocumentdetails = {
                                                        id: idvalueselected,
                                                        text: textvalueselected
                                                    };
                                                    showfolderdocuments(parentdocumentdetails);
                                                } else {
                                                    BindDocument(vContractID);
                                                }
                                            } else {
                                                DisplayDocument(documentview);
                                            }
                                            pendingStarted = false;
                                            GetContractPendingAction(true, "BindPeoples");
                                            $("#hdnFolderDocumentView").text('');
                                            $("#hdnShowAllTextValue").html('');
                                            PrvFolderselection = '';
                                            //Bind primary and pined document based on new feature
                                            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                                CreateDocumentListPinView(vContractID);
                                            }
                                            //manoj
                                            amendmentsucessbinding();
                                        },
                                        complete: function (person) {
                                            if ($('#txtNewFolderNameAmend').val() != "") {
                                                var checkingtestamd = $('#lblFolderUrlAmend').text();
                                                var lastCharcheckingamd = checkingtestamd.slice(-1);
                                                if (lastCharcheckingamd == "/") {
                                                    $('#lblFolderUrlAmend').text(checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                                                    $("#hdnContractDocumentsUrl").text(checkingtestamd);
                                                    $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                                    $('#txtNewFolderNameAmend').css('display', 'none');
                                                    $('#txtNewFolderNameAmend').val("");
                                                } else {
                                                    $('#lblFolderUrlAmend').text(checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/");
                                                    $("#hdnContractDocumentsUrl").text(checkingtestamd + "/");
                                                    $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                                    $('#txtNewFolderNameAmend').css('display', 'none');
                                                    $('#txtNewFolderNameAmend').val("");
                                                }
                                                //manoj
                                                if (contractItem != null) {
                                                    if (contractItem.AmendmentDocumentsUrl == null || contractItem.AmendmentDocumentsUrl == "") {
                                                        if ($('#lblFolderUrlAmend').text().indexOf("/Amendments/") >= 0) {
                                                            contractItem.AmendmentDocumentsUrl = $('#lblFolderUrlAmend').text();
                                                        }
                                                    }
                                                }
                                                //manoj
                                                $('#txtNewFolderNameAmend').removeClass('validelement');
                                            }
                                            clearTimeout(cleartimevalue2);
                                            cleartimevalue2 = setTimeout(refreshContractActivities, 10000);
                                            //GetContractActivities(vContractID);
                                            $("#loadingPage").fadeOut();
                                        },
                                        error: function (person) {
                                            $("#loadingPage").fadeOut();
                                        }
                                    });
                                } else {
                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                    $("#loadingPage").fadeOut();
                                }
                                return;
                            });

                    } else {
                        if ($("#chkReplaceDoc").is(":checked")) {
                            formData1.append("IsSOWEnabled", "Yes");
                            formData1.append("ReplaceDocument", "Yes");
                            formData1.append("AmendmentidtoPass", AmendmentidtoPass);
                        } else {
                            formData1.append("IsSOWEnabled", "No");
                            formData1.append("ReplaceDocument", "No");
                        }
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/addwithdoc',
                            type: 'POST',
                            data: formData1,
                            cache: false,
                            contentType: false,
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                username: localStorage.UserName,
                                'RefreshToken': localStorage.RefreshToken
                            },
                            processData: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                $("#addEditAmendment").dialog("close");
                                $("#loadingPage").fadeOut();
                                BindAmendments();
                                //manoj
                                if (documentview == null || documentview == "" || documentview == 'folder') {
                                    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                        var selectedfoldervalue = $('#showAll').find("a");
                                        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                        var parentdocumentdetails = {
                                            id: idvalueselected,
                                            text: textvalueselected
                                        };
                                        showfolderdocuments(parentdocumentdetails);
                                    } else {
                                        BindDocument(vContractID);
                                    }
                                } else {
                                    DisplayDocument(documentview);
                                }
                                pendingStarted = false;
                                GetContractPendingAction(true, "BindPeoples");
                                $("#hdnFolderDocumentView").text('');
                                $("#hdnShowAllTextValue").html('');
                                PrvFolderselection = '';
                                //Bind primary and pined document based on new feature
                                if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                    CreateDocumentListPinView(vContractID);
                                }
                                //manoj
                            },
                            complete: function (person) {
                                if ($('#txtNewFolderNameAmend').val() != "") {
                                    var checkingtestamd = $('#lblFolderUrlAmend').text();
                                    var lastCharcheckingamd = checkingtestamd.slice(-1);
                                    if (lastCharcheckingamd == "/") {
                                        $('#lblFolderUrlAmend').text(checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                                        $("#hdnContractDocumentsUrl").text(checkingtestamd);
                                        $('#txtNewFolderNameAmend').css('display', 'none');
                                        $('#txtNewFolderNameAmend').val("");
                                    } else {
                                        $('#lblFolderUrlAmend').text(checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/");
                                        $("#hdnContractDocumentsUrl").text(checkingtestamd + "/");
                                        $('#txtNewFolderNameAmend').css('display', 'none');
                                        $('#txtNewFolderNameAmend').val("");
                                    }
                                    //manoj
                                    if (contractItem != null) {
                                        if (contractItem.AmendmentDocumentsUrl == null || contractItem.AmendmentDocumentsUrl == "") {
                                            if ($('#lblFolderUrlAmend').text().indexOf("/Amendments/") >= 0) {
                                                contractItem.AmendmentDocumentsUrl = $('#lblFolderUrlAmend').text();
                                            }
                                        }
                                    }
                                    //manoj
                                    $('#txtNewFolderNameAmend').removeClass('validelement');
                                }
                                clearTimeout(cleartimevalue2);
                                cleartimevalue2 = setTimeout(refreshContractActivities, 10000);
                                //GetContractActivities(vContractID);
                                $("#loadingPage").fadeOut();
                            },
                            error: function (person) {
                                $("#loadingPage").fadeOut();
                            }
                        });
                    }
                } else {
                    var effectivedateamdvalue;
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        effectivedateamdvalue = $.datepicker.formatDate('mm/dd/yy', $("#dtAmendmentEffectiveDate").datepicker('getDate'));
                    } else {
                        effectivedateamdvalue = $.datepicker.formatDate(localStorage.AppDateFormat, $("#dtAmendmentEffectiveDate").datepicker('getDate'));
                    }
                    swal("", "Amendment record exists with the effective date '<span style=\"font-weight:700\">" + effectivedateamdvalue + "</span>'");
                    $("#loadingPage").fadeOut();
                }
            } else {
                swal("", "Amendment record exists with the title '<span style=\"font-weight:700\">" + $("#txtAmendmentTitle").val() + "</span>'");
                $("#loadingPage").fadeOut();
                $("#txtAmendmentTitle").focus();
            }
        }
    } else {


        autoscroll();
        $("#addEditAmendment").animate({
            scrollTop: $(".error").offset().top
        }, 2000);
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}

function CheckAmendmentTitle(amnedmentid, amnedmenttitle) {
    var returnvalue = false;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?contractid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: false,
        success: function (AmendmentCollection) {
            var vAccFeat = $.grep(AmendmentCollection, function (n, i) {
                return (n.AmendmentTitle.toLowerCase() == amnedmenttitle.trim().toLowerCase());
            });
            if (vAccFeat.length > 0) {
                if (amnedmentid != null && amnedmentid != "") {
                    vAccFeat = $.grep(vAccFeat, function (n, i) {
                        return (n.RowKey == amnedmentid.trim());
                    });
                    if (vAccFeat.length > 0) {
                        returnvalue = false;
                    } else {
                        returnvalue = true;
                    }
                } else {
                    returnvalue = true;
                }
            }
        },
        error: function (request) { }
    });
    return returnvalue;
}

function CheckAmendmentEffectivedate(amnedmentid, amendmenttype) {
    var returnvalue = false;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?contractid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: false,
        success: function (AmendmentCollection) {
            //manoj
            var effectivedateamdvalue = $.datepicker.formatDate('mm/dd/yy', $("#dtAmendmentEffectiveDate").datepicker('getDate'))
            //manoj
            var vAccFeat = $.grep(AmendmentCollection, function (n, i) {
                return (moment(new Date(n.EffectiveDate)).format('MM/DD/YYYY') == effectivedateamdvalue && n.AmendmentType == amendmenttype);
            });
            if (vAccFeat.length > 0) {
                if (amnedmentid != null && amnedmentid != "") {
                    vAccFeat = $.grep(vAccFeat, function (n, i) {
                        return (n.RowKey == amnedmentid.trim());
                    });
                    if (vAccFeat.length > 0) {
                        returnvalue = false;
                    } else {
                        returnvalue = true;
                    }
                } else {
                    returnvalue = true;
                }
            }
        },
        error: function (request) { }
    });
    return returnvalue;
}

function CheckAmendmentDocumentExist() {
    var isExist = false;
    var vDocURL = "";
    var totalFileCount = $("#inTD").children("div").length;
    ExitDocuemntName = "";
    if ($("#txtNewFolderNameAmend").is(":visible")) {
        isExist = false;
    } else {
        var childtfl = false;
        for (var tfl = 1; tfl < totalFileCount + 1; tfl++) {
            if ($('#file' + tfl)[0].files.length > 0) {
                childtfl = true;
            }
        }
        if ($('#docAmendment')[0].files.length > 0 || childtfl) {
            var lastcharfind = $('#lblFolderUrlAmend').text();
            lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
            if (lastcharfind != "/") {
                vDocURL = localStorage.SPHostUrl + $('#lblFolderUrlAmend').text() + "/";
            } else {
                vDocURL = localStorage.SPHostUrl + $('#lblFolderUrlAmend').text();
            }
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + vContractID,
                type: 'GET',
                dataType: 'json',
                'Content-Type': 'application/json',
                cache: false,
                async: false,
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                success: function (folder) {
                    for (var fol = 0; fol < (totalFileCount + 1) ; fol++) {
                        if (fol == 0) {
                            if ($('#docAmendment')[0].files.length > 0) {
                                var urltosearch = vDocURL + $('#docAmendment')[0].files[0].name;
                                var vAccFeat = $.grep(folder, function (n, i) {
                                    return (n.DocumentUrl == urltosearch);
                                });
                                if (vAccFeat.length > 0) {
                                    AmendmentidtoPass = vAccFeat[0].AmendmentID;
                                    isExist = true;
                                    if (ExitDocuemntName == "") {
                                        ExitDocuemntName = $('#docAmendment')[0].files[0].name;
                                    } else {
                                        ExitDocuemntName += "," + $('#docAmendment')[0].files[0].name
                                    }
                                }
                            }
                        } else {
                            if ($('#file' + fol)[0].files.length > 0) {
                                var urltosearch = vDocURL + $('#file' + fol)[0].files[0].name;
                                var vAccFeat = $.grep(folder, function (n, i) {
                                    return (n.DocumentUrl == urltosearch);
                                });
                                if (vAccFeat.length > 0) {
                                    AmendmentidtoPass = vAccFeat[0].AmendmentID;
                                    isExist = true;
                                    if (ExitDocuemntName == "") {
                                        ExitDocuemntName = $('#file' + fol)[0].files[0].name;
                                    } else {
                                        ExitDocuemntName += "," + $('#file' + fol)[0].files[0].name
                                    }
                                }
                            }
                        }
                    }
                },
                error: function (data) {
                    isExist = false;
                    AmendmentidtoPass = "";
                }
            });
        }
    }
    return isExist;
}

function amendmentsucessbinding() {
    if (amendmentcompletedchecking == true) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + getParameterByName("ContractID"),
            type: 'GET',
            cache: false,
            contentType: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                UserID: localStorage.UserID
            },
            processData: false,
            success: function (item) {
                //if (item.ContractValue != "0") {
                //    $("#lblContractValue").text("Not available");
                //    $("#txtContractValueCurrent").val("Not Available");
                //    $("#lblContractCurrency").text("");

                //    $.ajax({
                //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
                //        type: 'GET',
                //        dataType: 'json',
                //        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //        cache: false,
                //        success: function (data) {
                //            if (data.CurrencyDisplayStyle == "UK") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init');
                //                vCurrencyDisplayStyle = "UK";
                //            } else if (data.CurrencyDisplayStyle == "CAN") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: ' ', aDec: '.' });
                //                vCurrencyDisplayStyle = "CAN";
                //            } else if (data.CurrencyDisplayStyle == "EU") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: '.', aDec: ',' });
                //                vCurrencyDisplayStyle = "EU";
                //            }
                //            $("#loadingPage").fadeOut();
                //        }
                //    });

                //} else {
                GetContractValueSetting(item);
                amendmentcompletedchecking = false;
                //}
            },
            error: function (data) {
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        $("#loadingPage").fadeOut();
    }
}

$('#btnAddAmendmentInline').click(function () {
    if (requiredValidator('amendmentInline')) {
        $("#loadingPage").fadeIn();
        var strContractID = getParameterByName('ContractID');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/add',
            type: 'POST',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                username: localStorage.UserName
            },
            data: {
                ContractID: getParameterByName('ContractID'),
                ContractTitle: $("#lblContractTitle").text(),
                AmendmentTitle: $("#txtAmendmentTitleInline").val(),
                AmendmentDescription: $("#txtAmendmentDescInline").val(),
                CreatedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName,
            },
            cache: false,
            success: function (person) {
                $("#loadingPage").fadeOut();

                $("#amendmentInline").toggle();
                $("#txtAmendmentTitleInline").val("");
                $("#txtAmendmentDescInline").val("");

                BindAmendments();

                clearTimeout(cleartimevalue2);
                cleartimevalue2 = setTimeout(refreshContractActivities, 10000);
                //GetContractActivities(vContractID);
            },
            error: function (status) {
                $("#loadingPage").fadeOut();
            }
        });
    }
});

function deleteamentmentdocumets(dataobj, objid) {
    var documentlength = 0;
    var passdocumenttodelete = dataobj.length;
    $(dataobj).each(function (i, item) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + item.RowKey,
            type: 'DELETE',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                username: localStorage.UserName
            },
            cache: false,
            success: function (data) {
                documentlength++;
                if (passdocumenttodelete == documentlength) {
                    deleteamanetment(objid);
                }
            },
            error: function () {
                documentlength++;
                if (passdocumenttodelete == documentlength) {
                    deleteamanetment(objid);
                }
            },
        });
    });
}

function deleteamanetment(objid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?amendmentid=' + objid,
        type: 'DELETE',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            username: localStorage.UserName
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            reloadaction();
        },
        error: function () {
            $("#loadingPage").fadeOut();
            reloadaction();
        }
    });
}

function reloadaction() {
    BindAmendments();
    if (documentview == null || documentview == "" || documentview == 'folder') {
        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
            var selectedfoldervalue = $('#showAll').find("a");
            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
            var parentdocumentdetails = {
                id: idvalueselected,
                text: textvalueselected
            };
            showfolderdocuments(parentdocumentdetails);
        } else {
            BindDocument(vContractID);
        }
    } else {
        DisplayDocument(documentview);
    }
    pendingStarted = false;
    GetContractPendingAction(true, "BindPeoples");
    $("#hdnFolderDocumentView").text('');
    $("#hdnShowAllTextValue").html('');
    PrvFolderselection = '';
    //Bind primary and pined document based on new feature
    if ($("#hdnnewdocumentfeature").text() == "Yes") {
        CreateDocumentListPinView(vContractID);
    }
}

$('#btnAddAmendment').click(function () {
    AddAmendmentMore();
});

function AddAmendmentMore() {
    $("#trAttachedDoc").attr("style", "display:none");
    $("#tblDocu tr").remove();
    $("#txtAmendmentID").val("");
    $("#txtAmendmentTitle").val("");
    $('#txtAmendmentDesc').val("");
    $('#inTD').empty();

    $("#lblCTitleAmend").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    GetValuesAndAutoPopulate("ddlRequestedBy", "");

    $("#docAmendment").replaceWith($("#docAmendment").val('').clone(true));

    if (contractItem.ContractTermType == "Evergreen / Perpetual" || contractItem.ContractTermType == "Executed / Performance" || contractItem.EndDate == null) {
        $("#chkContractValidity").attr("disabled", "disabled");
        $("#chkContractValidity").attr("style", "cursor:not-allowed;");
        if ($("#ddlAmendmentType option[value='Change to Terms']").length != -1)
            $("#ddlAmendmentType option[value='Change to Terms']").remove();
    } else {
        $("#chkContractValidity").removeAttr('disabled');
        $("#chkContractValidity").attr("style", "cursor:pointer;");
        if ($("#ddlAmendmentType option[value='Change to Terms']").length != 1)
            $("#ddlAmendmentType").append("<option value='Change to Terms'>Change to Terms</option>")
    }

    if (contractItem.TransactionType == "Legal/General Agreement") {
        $("#chkContractValue").attr("disabled", "disabled");
        $("#chkContractValue").attr("style", "cursor:not-allowed;");
        $("#ddlAmendmentType option[value='Change of Contract Value']").remove();
    } else {
        $("#chkContractValue").removeAttr('disabled');
        $("#chkContractValue").attr("style", "cursor:pointer;");
        if ($("#ddlAmendmentType option[value='Change of Contract Value']").length != 1)
            $("#ddlAmendmentType").append("<option value='Change of Contract Value'>Change of Contract Value</option>")
    }

    setAmendmenturl();

    $('#dtAmendmentEffectiveDate').val("");
    $("#chkContractValidity").prop('checked', false);
    $("#tblContractValidity").css('display', 'none');
    $("#imgconValidity").attr("title", "Collapse");
    $("#imgconValidity").attr("src", "../Content/Images/e-close.png");
    $('#txtContractEndDateAfterAmend').val("");
    $("#chkUpdateContractValidity").prop('checked', false);
    $('#txtContractValidityNotes').val("");

    $("#chkContractValue").prop('checked', false);
    $("#tblContractValue").css('display', 'none');
    $("#imgconValue").attr("title", "Collapse");
    $("#imgconValue").attr("src", "../Content/Images/e-close.png");
    $('#txtContractValueAfterAmend').val("");
    $("#chkUpdateContractValue").prop('checked', false);
    $('#txtContractValueNotes').val("");

    $("#chkSOW").prop('checked', false);
    $("#tblSOW").css('display', 'none');
    $("#imgconSOW").attr("title", "Collapse");
    $("#imgconSOW").attr("src", "../Content/Images/e-close.png");
    $('#txtSOWCurrent').val("");
    $('#txtSOWAfter').val("");
    $("#chkReplaceDoc").prop('checked', false);
    if (vDefaultAmendment == "Yes") {
        $("#dtAmendmentFinalizedDate").val("");
        $('#trAmendmentCompletedDate').css('display', '');
        $('#trAmendmentCompletedBy').css('display', '');
        $('input[type="radio"][name="AmendmentFinalized"][value="Yes"]').prop('checked', true);
        $("#dtAmendmentFinalizedDate").addClass("validelement");
    } else {
        $("#dtAmendmentFinalizedDate").val("");
        $('#trAmendmentCompletedDate').css('display', 'none');
        $('#trAmendmentCompletedBy').css('display', 'none');
        $('input[type="radio"][name="AmendmentFinalized"][value="No"]').prop('checked', true);
        $("#dtAmendmentFinalizedDate").removeClass("validelement");
    }
    if ($("#hdnStartDate").val() == "" || $("#hdnStartDate").val() == undefined)
        $("#hdnStartDate").val(contractItem.StartDate);
    var startdate = new Date($("#hdnStartDate").text());
    $("#txtContractEndDateAfterAmend").datepicker("option", "minDate", startdate);
    $("#dtAmendmentEffectiveDate").datepicker("option", "minDate", startdate);
    $("#dtAmendmentFinalizedDate").datepicker("option", "minDate", startdate);
    $("#dtAmendmentFinalizedDate").datepicker("option", "maxDate", new Date());

    if ($("input[type=radio][name=AmendmentFinalized]:checked").val() == "Yes") {
        $('#trAmendmentCompletedDate').css('display', '');
        $('#trAmendmentCompletedBy').css('display', '');
        $('#trAmendmentEffectiveDate').css('display', '');
    } else {
        $('#trAmendmentEffectiveDate').css('display', 'none');
        $('#trAmendmentCompletedDate').css('display', 'none');
        $('#trAmendmentCompletedBy').css('display', 'none');
        $("#dtAmendmentEffectiveDate").val('');
        $("#txtAmendmentFinalizedBy").val('');
        $("#dtAmendmentFinalizedDate").val('');
    }

    //$("#ddlAmendmentType option").val(function (idx, val) {
    //    $(this).siblings("[value='" + val + "']").remove();
    //});

    $("#ddlAmendmentType").val("0");
    $("#addEditAmendment").dialog("option", "title", "New Amendment");
    $("#addEditAmendment").dialog("open");



    if (vCurrencyDisplayStyle == "UK") {
        $('#txtContractValueAfterAmend').autoNumeric('init');
    } else if (vCurrencyDisplayStyle == "CAN") {
        $('#txtContractValueAfterAmend').autoNumeric('init', {
            aSep: ' ',
            aDec: '.'
        });
    } else if (vCurrencyDisplayStyle == "EU") {
        $('#txtContractValueAfterAmend').autoNumeric('init', {
            aSep: '.',
            aDec: ','
        });
    }
}

function setAmendmenturl() {
    if (contractItem.AmendmentDocumentsUrl != "") {
        $('#lblFolderUrlAmend').text(contractItem.AmendmentDocumentsUrl)
        $('#txtNewFolderNameAmend').css('display', 'none');
        $('#txtNewFolderNameAmend').removeClass('validelement');
    } else {
        if (contractItem.ContractDocumentsUrl == "") {
            var headerid = $("#lblContractTitle").text();
            headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
            var finalurl = "";
            finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
            finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl.trim() : finalurl.trim();
            finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
            if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text() != null && $('#showAll').text() != "") {
                $("#lblFolderUrlAmend").text(finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/');
                $('#txtNewFolderNameAmend').val("Amendments");
            } else {
                $('#lblFolderUrlAmend').text(finalurl + headerid.trim() + "/");
                $('#txtNewFolderNameAmend').val("Amendments");
            }
        } else {
            if ((contractItem.ContractDocumentsUrl.charAt(contractItem.ContractDocumentsUrl.length - 1)) != "/") {
                $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl + "/");
            } else {
                $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl);
            }
            $('#txtNewFolderNameAmend').val("Amendments");
        }
        $('#txtNewFolderNameAmend').addClass('validelement');
    }
}

function contextMenuAmendment(action, el, pos) {
    switch (action) {
        case "view":
            {
                var amendmentID = $(el).find("#AmendmentID").text();
                ViewAmendment(amendmentID);

                break;
            }
        case "delete":
            {
                var amendmentTitle = $(el).find("#AmendmentTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + amendmentTitle + "</span>'?  All attachments will be deleted.",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/documents?amendmentid=' + $(el).find("#AmendmentID").text(),
                                type: 'GET',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey
                                },
                                "Content-Type": "application/json",
                                cache: false,
                                async: false,
                                success: function (data) {
                                    deleteamentmentdocumets(data, $(el).find("#AmendmentID").text());
                                },
                                error: function (data) {
                                    deleteamanetment($(el).find("#AmendmentID").text());
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                $("#docAmendment").replaceWith($("#docAmendment").val('').clone(true));
                $('#inTD').empty();
                $("#trAttachedDoc").attr("style", "");
                var amendmentID = $(el).find("#AmendmentID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/amendmentdetails?amendmentid=' + amendmentID,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (amendmententity) {
                        setAmendmenturl();
                        $("#txtAmendmentID").val(amendmententity.RowKey);
                        $("#txtAmendmentTitle").val(amendmententity.AmendmentTitle);
                        $("#txtAmendmentDesc").val(amendmententity.AmendmentDescription);
                        $("#ddlAmendmentType option").filter(function (index) {
                            return $(this).text() === amendmententity.AmendmentType;
                        }).prop('selected', true);

                        $("#tblDocu").empty();
                        GetValuesAndAutoPopulate("ddlRequestedBy", amendmententity.RequestedBy);

                        if (amendmententity.AmendmentFinalized != '') {
                            $('input[type="radio"][name="AmendmentFinalized"][value="' + amendmententity.AmendmentFinalized + '"]').prop('checked', true);
                            if (amendmententity.AmendmentFinalized == "No") {
                                $('#trAmendmentCompletedDate').css('display', 'none');
                                $('#trAmendmentCompletedBy').css('display', 'none');
                                $('#trAmendmentEffectiveDate').css('display', 'none');
                                $("#dtAmendmentFinalizedDate").removeClass("validelement");
                            } else {
                                $("#dtAmendmentFinalizedDate").addClass("validelement");
                                $('#trAmendmentCompletedDate').css('display', 'table-row');
                                $('#trAmendmentCompletedBy').css('display', 'table-row');
                                $('#trAmendmentEffectiveDate').css('display', 'table-row');
                            }
                        } else {
                            $('input[type="radio"][name="AmendmentFinalized"][value="No"]').prop('checked', true);
                            $('#trAmendmentCompletedDate').css('display', 'none');
                            $('#trAmendmentCompletedBy').css('display', 'none');
                            $('#trAmendmentEffectiveDate').css('display', 'none');
                            $("#dtAmendmentFinalizedDate").removeClass("validelement");
                        }
                        if (amendmententity.AmendmentFinalizedBy != null && amendmententity.AmendmentFinalizedBy != '') {
                            $("#txtAmendmentFinalizedBy").val(amendmententity.AmendmentFinalizedBy)
                        } else {
                            $("#txtAmendmentFinalizedBy").val('');
                        }
                        if (amendmententity.AmendmentFinalizedDate != null && amendmententity.AmendmentFinalizedDate != '') {
                            var completedate = "";

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                completedate = moment(new Date(amendmententity.AmendmentFinalizedDate)).format('MM/DD/YYYY');
                            } else {
                                completedate = moment(new Date(amendmententity.AmendmentFinalizedDate)).format(localStorage.AppDateFormat);
                            }

                            $("#dtAmendmentFinalizedDate").val(completedate);
                        } else {
                            $("#dtAmendmentFinalizedDate").val('')
                        }

                        if (amendmententity.EffectiveDate != null) {

                            var fEffectiveDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format('MM/DD/YYYY');
                            } else {
                                fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format(localStorage.AppDateFormat);
                            }
                            $("#dtAmendmentEffectiveDate").val(fEffectiveDate);
                        }

                        if ((contractItem.ContractTermType == "Evergreen / Perpetual" || contractItem.ContractTermType == "Executed / Performance" || contractItem.EndDate == null) && contractItem.ContractTermType != "0") {
                            $("#chkContractValidity").attr("disabled", "disabled");
                            $("#chkContractValidity").attr("style", "cursor:not-allowed;");
                            if ($("#ddlAmendmentType option[value='Change to Terms']").length != -1)
                                $("#ddlAmendmentType option[value='Change to Terms']").remove();
                            $("#chkContractValidity").prop('checked', false);
                            $("#tblContractValidity").css('display', 'none');
                        } else {
                            if ($("#ddlAmendmentType option[value='Change to Terms']").length != 1)
                                $("#ddlAmendmentType").append("<option value='Change to Terms'>Change to Terms</option>")
                            if (amendmententity.IsContractValidityEnabled == "Yes") {
                                $('#chkContractValidity').prop('checked', true);
                                $("#tblContractValidity").css('display', '');
                                $("#imgconValidity").css('display', '');
                            } else {
                                $('#chkContractValidity').prop('checked', false);
                                $("#tblContractValidity").css('display', 'none');
                                $("#imgconValidity").css('display', 'none');
                            }
                            $("#chkContractValidity").removeAttr('disabled');
                            $("#chkContractValidity").attr("style", "cursor:pointer;");
                        }


                        if (contractItem.TransactionType == "Legal/General Agreement") {
                            $("#chkContractValue").attr("disabled", "disabled");
                            $("#chkContractValue").attr("style", "cursor:not-allowed;");
                            if ($("#ddlAmendmentType option[value='Change of Contract Value']").length != -1)
                                $("#ddlAmendmentType option[value='Change of Contract Value']").remove();
                        } else {
                            if ($("#ddlAmendmentType option[value='Change of Contract Value']").length != 1)
                                $("#ddlAmendmentType").append("<option value='Change of Contract Value'>Change of Contract Value</option>")
                            $("#chkContractValue").removeAttr('disabled');
                            $("#chkContractValue").attr("style", "cursor:pointer;");
                        }


                        if (amendmententity.ContractEndDateAfterAmendment != null) {
                            var fAppDateFormate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fAppDateFormate = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format('MM/DD/YYYY');
                            } else {
                                fAppDateFormate = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format(localStorage.AppDateFormat);
                            }
                            $("#txtContractEndDateAfterAmend").val(fAppDateFormate);
                        }
                        if (amendmententity.UpdateContractEndDate == "Yes") {
                            $('#chkUpdateContractValidity').prop('checked', true);
                        }
                        $("#txtContractValidityNotes").val(amendmententity.ContractValidityNotes);


                        if (amendmententity.IsContractValueEnabled == "Yes") {
                            $('#chkContractValue').prop('checked', true);
                            $("#tblContractValue").css('display', '');
                            $("#imgconValue").css('display', '');
                        } else {
                            $('#chkContractValue').prop('checked', false);
                            $("#tblContractValue").css('display', 'none');
                            $("#imgconValue").css('display', 'none');
                        }

                        if (vCurrencyDisplayStyle == "UK") {
                            $('#txtContractValueAfterAmend').autoNumeric('init');
                            $('#txtContractValueAfterAmend').autoNumeric('set', amendmententity.ContractValueAfterAmendment);

                        } else if (vCurrencyDisplayStyle == "CAN") {
                            $('#txtContractValueAfterAmend').autoNumeric('init', {
                                aSep: ' ',
                                aDec: '.'
                            });
                            $('#txtContractValueAfterAmend').autoNumeric('set', amendmententity.ContractValueAfterAmendment);

                        } else if (vCurrencyDisplayStyle == "EU") {
                            $('#txtContractValueAfterAmend').autoNumeric('init', {
                                aSep: '.',
                                aDec: ','
                            });
                            $('#txtContractValueAfterAmend').autoNumeric('set', amendmententity.ContractValueAfterAmendment);

                        }

                        if (amendmententity.UpdateContractValue == "Yes") {
                            $('#chkUpdateContractValue').prop('checked', true);
                        }
                        $("#txtContractValueNotes").val(amendmententity.ContractValueNotes);

                        if (amendmententity.FunderOrAccountName != null && amendmententity.FunderOrAccountName != '' && typeof (amendmententity.FunderOrAccountName) != 'undefined') {
                            $("#txtFunderName").val(amendmententity.FunderOrAccountName)
                        } else {
                            $("#txtFunderName").val('');
                        }
                        if (amendmententity.FunderOrAccountNumber != null && amendmententity.FunderOrAccountNumber != '' && typeof (amendmententity.FunderOrAccountNumber) != 'undefined') {
                            $("#txtFunderNumber").val(amendmententity.FunderOrAccountNumber)
                        } else {
                            $("#txtFunderNumber").val('');
                        }
                        if (amendmententity.IsSOWEnabled == "Yes") {
                            $('#chkSOW').prop('checked', true);
                            $("#tblSOW").css('display', '');
                            $("#imgconSOW").css('display', '');
                        } else {
                            $('#chkSOW').prop('checked', false);
                            $("#tblSOW").css('display', 'none');
                            $("#imgconSOW").css('display', 'none');
                        }
                        $("#txtSOWAfter").val(amendmententity.SummaryOfSOWAfterAmendment);

                        if ($("#hdnStartDate").val() == "" || $("#hdnStartDate").val() == undefined)
                            $("#hdnStartDate").val(contractItem.StartDate);
                        var startdate = new Date($("#hdnStartDate").text());
                        $("#txtContractEndDateAfterAmend").datepicker("option", "minDate", startdate);
                        $("#dtAmendmentEffectiveDate").datepicker("option", "minDate", startdate);
                        $("#dtAmendmentFinalizedDate").datepicker("option", "minDate", startdate);
                        $("#dtAmendmentFinalizedDate").datepicker("option", "maxDate", new Date());


                        //get amendment documents
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/documents?amendmentid=' + amendmentID,
                            type: 'GET',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey
                            },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                var htmlDocu = "";
                                if (data.length > 0) {
                                    $(data).each(function (i, item) {
                                        //var htmlDocu = "";
                                        htmlDocu += "<tr>";
                                        htmlDocu += "<td>";
                                        htmlDocu += "<a class='clsLinkOfDoc' href='" + item.DocumentUrl + "' style='border-bottom: 1px dotted;color: #3F91CC !important;font-size: 12px !important;'>";
                                        htmlDocu += item.DocumentName;
                                        htmlDocu += "</a>";

                                        htmlDocu += "<a id='btnRemoveSavedDoc' href='javascript:void(0)' title='Remove file' onclick=(deleteSavedDocumentElement(this,'" + item.RowKey + "'))>";
                                        htmlDocu += "<img src='../Content/Images/icon/delete.png' style='float:right;margin: 5px 0px 0px 10px;'>";
                                        htmlDocu += "</a>";
                                        htmlDocu += "</td>";
                                        htmlDocu += "</tr>";
                                    });
                                    $("#tblDocu").html(htmlDocu);
                                } else {
                                    $("#tblDocu").html("<tr><td style='font-size:13px;'>No items found.</td></tr>");
                                }
                            },
                            error: function (data) {
                                $("#tblDocu").html("<tr><td style='font-size:13px;'>No items found.</td></tr>");
                            },
                            complete: function (data) {
                                $("#lblCTitleAmend").text($("#lblContractTitle").text());
                                $(".validelement").each(function (index, element) {
                                    $(element).removeClass("error");
                                    $("#errormsg_" + element.id).remove();
                                });
                                $("#loadingPage").fadeOut();
                                $("#addEditAmendment").dialog("option", "title", "Edit Amendment");
                                $("#addEditAmendment").dialog("open");
                            }
                        });

                    },
                    error: function () {
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {

                    }
                });

                break;
            }
        case "approve":
            {
                $(".FL_ApprovalSheetContract").css('display', 'none');
                var amendmentName = $(el).find("#AmendmentTitle").text();
                var amendmentID = $(el).find("#AmendmentID").text();
                var amendmentApprovalWorkflow = $(el).find("#AmendmentApprovalWorkflow").text();
                $("#txtWorkflowTitle").prop('readonly', false);
                if (amendmentApprovalWorkflow == "In Progress") {
                    var oWorkflowID = "";
                    if (ArrayofAmendmentWorkflows.length > 0) {
                        var relatedcon = $.grep(ArrayofAmendmentWorkflows, function (itemR) {
                            return itemR.AmendmentID == amendmentID
                        });
                        if (relatedcon.length > 0) {
                            $("#alertText1").html("Amendment Approval is in progress for this amendment.");
                            $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=/Activity/TaskDetails?TaskID=&WorkflowID=' + relatedcon[0].id + '><font color="#44A6D8">View Workflow Details</font></a>');
                            $("#dvAlertDetails1").dialog("open");
                        } else {
                            $("#loadingPage").fadeIn();
                            var businessArea = $("#lblBusinessArea").text();
                            var contractArea = $("#lblContractArea").text();
                            $("#tblStage").empty();
                            $("#ddlRule").empty();
                            $("#liAutoUpdateStatus").css('display', 'none');
                            $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                            $("#txtDuration").val("");
                            var nicInstance = nicEditors.findEditor('txtComment');
                            nicInstance.setContent('');
                            $("#hdWorkflowType").val("Amendment Approval");
                            $("#hdWorkflowObjectID").val(amendmentID);
                            $("#hdWorkflowObjectTitle").val(amendmentName);
                            GetValuesAndAutoPopulate("ddlWorkflowCC", "");
                            var vWorkflowSettings = [];
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Amendment Approval&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + amendmentID,
                                type: 'GET',
                                cache: false,
                                contentType: false,
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey
                                },
                                processData: false,
                                success: function (item) {
                                    vWorkflowSettings = item.WorkflowSettings;

                                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                        return (n.RowKey == "8" && n.Status == "ON");
                                    });
                                    if (vAccFeat.length > 0) {
                                        vWorkflowRules = item.WorkflowRules;
                                    }
                                    if (item.WorkflowSettings != null) {
                                        workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                        workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                        if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                $("#spAddStage").css("display", "none");
                                            }
                                        }
                                        $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                        if ($("#txtDuration").val() != "") {
                                            $("#txtDuration").trigger("onchange");
                                        } else {
                                            $("#lblDurationDate").empty();
                                        }
                                        //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                        //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                        workflowAdHoc = vWorkflowSettings.WorkflowAdHoc;
                                    }
                                    if (vWorkflowRules.length > 0) {
                                        $(vWorkflowRules).each(function (i, rule) {
                                            $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                        });
                                        if (workflowAdHoc == "on") {
                                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        }
                                        var workflowRules = vWorkflowRules[0];
                                        $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').attr("selected", true);
                                        if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                            $("#lblddlRule").css("display", "");
                                            $("#ddlRule").css("display", "none");
                                            $("#lblddlRule").text(workflowRules.RuleName);
                                            $("#ddlRule").attr('disabled', 'disabled');
                                        } else {
                                            $("#lblddlRule").text("");
                                            $("#lblddlRule").css("display", "none");
                                            $("#ddlRule").css("display", "");
                                            $("#ddlRule").removeAttr("disabled");
                                        }
                                        var participantsInXML = workflowRules.ParticipantsInXML;
                                        var totalFileCount = 0;
                                        if (workflowRules.RuleName == "Default") {
                                            if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                                $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                            } else {
                                                $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                            }
                                        } else {
                                            if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                                $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                            } else {
                                                $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                            }
                                        }
                                        //If the rule is ad-hoc 
                                        if (participantsInXML != "") {
                                            $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                                var StageTitle = $(this).find('StageTitle').text();
                                                var Participants = $(this).find('Participants').text();
                                                var Order = $(this).find('Order').text();
                                                totalFileCount++;
                                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '<td class="width46 start_workflow">';
                                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                                if (Order == "Serial")
                                                    htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                                else
                                                    htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '<td class="width4 start_workflow">';
                                                if (totalFileCount > 1)
                                                    htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                                else
                                                    htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '</tr>';

                                                $("#tblStage").append(htmlFormatFile);
                                                var $options = $("#ddlApprovers > option").clone();
                                                $('#ddlAssignTo' + totalFileCount).append($options);
                                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                                    if ($(this).val() != null) {
                                                        if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                                workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                        } else {
                                                            $("#ddlOrder" + vasstoid).val("Serial");
                                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                        }
                                                    } else {
                                                        $("#ddlOrder" + vasstoid).val("Serial");
                                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    }
                                                });
                                                GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                                var vParticipantsArr = Participants.split(";");
                                                if (vParticipantsArr.length > 1)
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                                else
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);


                                                if (item.WorkflowSettings != null) {
                                                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                        if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                            $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                            $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                        }
                                                        $("#txtStage" + totalFileCount).prop('disabled', true);
                                                        $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                                    }
                                                }
                                            });
                                        } else {
                                            if ($("#ddlRule").html() == "") {
                                                $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                                $("#lblddlRule").css("display", "");
                                                $("#ddlRule").css("display", "none");
                                                $("#lblddlRule").text("Ad-hoc");
                                            }
                                            if (!workflowAdHoc)
                                                $("#ddlRule").attr('disabled', 'disabled');
                                            var totalFileCount = 1;
                                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                            htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width4">';
                                            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '</tr>';

                                            $("#tblStage").append(htmlFormatFile);
                                            var $options = $("#ddlApprovers > option").clone();
                                            $('#ddlAssignTo' + totalFileCount).append($options);

                                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                                if ($(this).val() != null) {
                                                    if ($(this).val().length > 1) {
                                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                    } else {
                                                        $("#ddlOrder" + vasstoid).val("Serial");
                                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    }
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            });
                                        }
                                    } else {
                                        if ($("#ddlRule").html() == "") {
                                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                            $("#lblddlRule").css("display", "");
                                            $("#ddlRule").css("display", "none");
                                            $("#lblddlRule").text("Ad-hoc");
                                        }
                                        if (!workflowAdHoc)
                                            $("#ddlRule").attr('disabled', 'disabled');
                                        var totalFileCount = 1;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4">';
                                        htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);

                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1) {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        });
                                    }
                                    $("#loadingPage").fadeOut();
                                    $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                    $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                    $("#dvWorkflow").dialog("open");
                                    $("#dvWorkflow").height("auto");
                                },
                                error: function () {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text("Ad-hoc");
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 start_workflow">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);
                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1) {
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        } else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    });

                                    $("#loadingPage").fadeOut();
                                    $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                    $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                    $("#dvWorkflow").dialog("open");
                                    $("#dvWorkflow").height("auto");
                                }
                            });
                        }
                    } else {
                        $("#loadingPage").fadeIn();
                        var businessArea = $("#lblBusinessArea").text();
                        var contractArea = $("#lblContractArea").text();
                        $("#tblStage").empty();
                        $("#ddlRule").empty();
                        $("#liAutoUpdateStatus").css('display', 'none');
                        $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                        $("#txtDuration").val("");
                        var nicInstance = nicEditors.findEditor('txtComment');
                        nicInstance.setContent('');
                        $("#hdWorkflowType").val("Amendment Approval");
                        $("#hdWorkflowObjectID").val(amendmentID);
                        $("#hdWorkflowObjectTitle").val(amendmentName);
                        GetValuesAndAutoPopulate("ddlWorkflowCC", "");
                        var vWorkflowSettings = [];
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Amendment Approval&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + amendmentID,
                            type: 'GET',
                            cache: false,
                            contentType: false,
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey
                            },
                            processData: false,
                            success: function (item) {
                                vWorkflowSettings = item.WorkflowSettings;

                                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                    return (n.RowKey == "8" && n.Status == "ON");
                                });
                                if (vAccFeat.length > 0) {
                                    vWorkflowRules = item.WorkflowRules;
                                }
                                if (item.WorkflowSettings != null) {
                                    workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                    workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                    if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                        if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                            $("#spAddStage").css("display", "none");
                                        }
                                    }
                                    $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                    if ($("#txtDuration").val() != "") {
                                        $("#txtDuration").trigger("onchange");
                                    } else {
                                        $("#lblDurationDate").empty();
                                    }
                                    //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                    //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                    workflowAdHoc = vWorkflowSettings.WorkflowAdHoc;
                                }
                                if (vWorkflowRules.length > 0) {
                                    $(vWorkflowRules).each(function (i, rule) {
                                        $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                    });
                                    if (workflowAdHoc == "on") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    }
                                    var workflowRules = vWorkflowRules[0];
                                    $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').attr("selected", true);
                                    if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text(workflowRules.RuleName);
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    } else {
                                        $("#lblddlRule").text("");
                                        $("#lblddlRule").css("display", "none");
                                        $("#ddlRule").css("display", "");
                                        $("#ddlRule").removeAttr("disabled");
                                    }
                                    var participantsInXML = workflowRules.ParticipantsInXML;
                                    var totalFileCount = 0;
                                    if (workflowRules.RuleName == "Default") {
                                        if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                        } else {
                                            $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                        }
                                    } else {
                                        if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                        } else {
                                            $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                        }
                                    }
                                    //If the rule is ad-hoc 
                                    if (participantsInXML != "") {
                                        $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                            var StageTitle = $(this).find('StageTitle').text();
                                            var Participants = $(this).find('Participants').text();
                                            var Order = $(this).find('Order').text();
                                            totalFileCount++;
                                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width46 start_workflow">';
                                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                            if (Order == "Serial")
                                                htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                            else
                                                htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width4 start_workflow">';
                                            if (totalFileCount > 1)
                                                htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                            else
                                                htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '</tr>';

                                            $("#tblStage").append(htmlFormatFile);
                                            var $options = $("#ddlApprovers > option").clone();
                                            $('#ddlAssignTo' + totalFileCount).append($options);
                                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                                if ($(this).val() != null) {
                                                    if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                            workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                    } else {
                                                        $("#ddlOrder" + vasstoid).val("Serial");
                                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    }
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            });
                                            GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                            var vParticipantsArr = Participants.split(";");
                                            if (vParticipantsArr.length > 1)
                                                $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                            else
                                                $("#ddlOrder" + totalFileCount).prop('disabled', true);


                                            if (item.WorkflowSettings != null) {
                                                if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                    if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                        $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                        $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                    }
                                                    $("#txtStage" + totalFileCount).prop('disabled', true);
                                                    $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                                }
                                            }
                                        });
                                    } else {
                                        if ($("#ddlRule").html() == "") {
                                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                            $("#lblddlRule").css("display", "");
                                            $("#ddlRule").css("display", "none");
                                            $("#lblddlRule").text("Ad-hoc");
                                        }
                                        if (!workflowAdHoc)
                                            $("#ddlRule").attr('disabled', 'disabled');
                                        var totalFileCount = 1;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4">';
                                        htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);

                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1) {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        });
                                    }
                                } else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1) {
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        } else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    });
                                }
                                $("#loadingPage").fadeOut();
                                $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                $("#dvWorkflow").dialog("open");
                                $("#dvWorkflow").height("auto");
                            },
                            error: function () {
                                $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                $("#lblddlRule").css("display", "");
                                $("#ddlRule").css("display", "none");
                                $("#lblddlRule").text("Ad-hoc");
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 start_workflow">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);
                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1) {
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        } else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    } else {
                                        $("#ddlOrder" + vasstoid).val("Serial");
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    }
                                });

                                $("#loadingPage").fadeOut();
                                $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                $("#dvWorkflow").dialog("open");
                                $("#dvWorkflow").height("auto");
                            }
                        });

                    }

                } else {
                    if (ArrayofAmendmentWorkflows.length > 0) {
                        var relatedcon = $.grep(ArrayofAmendmentWorkflows, function (itemR) {
                            return itemR.AmendmentID == amendmentID
                        });
                        if (relatedcon.length > 0) {
                            $("#alertText1").html("Amendment Approval is in progress for this amendment.");
                            $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=/Activity/TaskDetails?TaskID=&WorkflowID=' + relatedcon[0].id + '><font color="#44A6D8">View Workflow Details</font></a>');
                            $("#dvAlertDetails1").dialog("open");
                        } else {
                            $("#loadingPage").fadeIn();
                            var businessArea = $("#lblBusinessArea").text();
                            var contractArea = $("#lblContractArea").text();
                            $("#tblStage").empty();
                            $("#ddlRule").empty();
                            $("#liAutoUpdateStatus").css('display', 'none');
                            $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                            $("#txtDuration").val("");
                            var nicInstance = nicEditors.findEditor('txtComment');
                            nicInstance.setContent('');
                            $("#hdWorkflowType").val("Amendment Approval");
                            $("#hdWorkflowObjectID").val(amendmentID);
                            $("#hdWorkflowObjectTitle").val(amendmentName);
                            GetValuesAndAutoPopulate("ddlWorkflowCC", "");
                            var vWorkflowSettings = [];
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Amendment Approval&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + amendmentID,
                                type: 'GET',
                                cache: false,
                                contentType: false,
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey
                                },
                                processData: false,
                                success: function (item) {
                                    vWorkflowSettings = item.WorkflowSettings;

                                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                        return (n.RowKey == "8" && n.Status == "ON");
                                    });
                                    if (vAccFeat.length > 0) {
                                        vWorkflowRules = item.WorkflowRules;
                                    }
                                    if (item.WorkflowSettings != null) {
                                        workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                        workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                        if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                $("#spAddStage").css("display", "none");
                                            }
                                        }
                                        $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                        if ($("#txtDuration").val() != "") {
                                            $("#txtDuration").trigger("onchange");
                                        } else {
                                            $("#lblDurationDate").empty();
                                        }
                                        //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                        //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                        workflowAdHoc = vWorkflowSettings.WorkflowAdHoc;
                                    }
                                    if (vWorkflowRules.length > 0) {
                                        $(vWorkflowRules).each(function (i, rule) {
                                            $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                        });
                                        if (workflowAdHoc == "on") {
                                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        }
                                        var workflowRules = vWorkflowRules[0];
                                        $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').attr("selected", true);
                                        if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                            $("#lblddlRule").css("display", "");
                                            $("#ddlRule").css("display", "none");
                                            $("#lblddlRule").text(workflowRules.RuleName);
                                            $("#ddlRule").attr('disabled', 'disabled');
                                        } else {
                                            $("#lblddlRule").text("");
                                            $("#lblddlRule").css("display", "none");
                                            $("#ddlRule").css("display", "");
                                            $("#ddlRule").removeAttr("disabled");
                                        }
                                        var participantsInXML = workflowRules.ParticipantsInXML;
                                        var totalFileCount = 0;
                                        if (workflowRules.RuleName == "Default") {
                                            if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                                $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                            } else {
                                                $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                            }
                                        } else {
                                            if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                                $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                            } else {
                                                $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                            }
                                        }
                                        //If the rule is ad-hoc 
                                        if (participantsInXML != "") {
                                            $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                                var StageTitle = $(this).find('StageTitle').text();
                                                var Participants = $(this).find('Participants').text();
                                                var Order = $(this).find('Order').text();
                                                totalFileCount++;
                                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '<td class="width46 start_workflow">';
                                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                                if (Order == "Serial")
                                                    htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                                else
                                                    htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '<td class="width4 start_workflow">';
                                                if (totalFileCount > 1)
                                                    htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                                else
                                                    htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                                htmlFormatFile += '</td>';
                                                htmlFormatFile += '</tr>';

                                                $("#tblStage").append(htmlFormatFile);
                                                var $options = $("#ddlApprovers > option").clone();
                                                $('#ddlAssignTo' + totalFileCount).append($options);
                                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                                    if ($(this).val() != null) {
                                                        if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                                workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                        } else {
                                                            $("#ddlOrder" + vasstoid).val("Serial");
                                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                        }
                                                    } else {
                                                        $("#ddlOrder" + vasstoid).val("Serial");
                                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    }
                                                });
                                                GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                                var vParticipantsArr = Participants.split(";");
                                                if (vParticipantsArr.length > 1)
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                                else
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);


                                                if (item.WorkflowSettings != null) {
                                                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                        if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                            $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                            $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                        }
                                                        $("#txtStage" + totalFileCount).prop('disabled', true);
                                                        $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                                    }
                                                }
                                            });
                                        } else {
                                            if ($("#ddlRule").html() == "") {
                                                $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                                $("#lblddlRule").css("display", "");
                                                $("#ddlRule").css("display", "none");
                                                $("#lblddlRule").text("Ad-hoc");
                                            }
                                            if (!workflowAdHoc)
                                                $("#ddlRule").attr('disabled', 'disabled');
                                            var totalFileCount = 1;
                                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                            htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width4">';
                                            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '</tr>';

                                            $("#tblStage").append(htmlFormatFile);
                                            var $options = $("#ddlApprovers > option").clone();
                                            $('#ddlAssignTo' + totalFileCount).append($options);

                                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                                if ($(this).val() != null) {
                                                    if ($(this).val().length > 1) {
                                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                    } else {
                                                        $("#ddlOrder" + vasstoid).val("Serial");
                                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    }
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            });
                                        }
                                    } else {
                                        if ($("#ddlRule").html() == "") {
                                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                            $("#lblddlRule").css("display", "");
                                            $("#ddlRule").css("display", "none");
                                            $("#lblddlRule").text("Ad-hoc");
                                        }
                                        if (!workflowAdHoc)
                                            $("#ddlRule").attr('disabled', 'disabled');
                                        var totalFileCount = 1;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4">';
                                        htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);

                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1) {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        });
                                    }
                                    $("#loadingPage").fadeOut();
                                    $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                    $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                    $("#dvWorkflow").dialog("open");
                                    $("#dvWorkflow").height("auto");
                                },
                                error: function () {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text("Ad-hoc");
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 start_workflow">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);
                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1) {
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        } else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    });

                                    $("#loadingPage").fadeOut();
                                    $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                    $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                    $("#dvWorkflow").dialog("open");
                                    $("#dvWorkflow").height("auto");
                                }
                            });
                        }
                    } else {
                        $("#loadingPage").fadeIn();
                        var businessArea = $("#lblBusinessArea").text();
                        var contractArea = $("#lblContractArea").text();
                        $("#tblStage").empty();
                        $("#ddlRule").empty();
                        $("#liAutoUpdateStatus").css('display', 'none');
                        $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                        $("#txtDuration").val("");
                        var nicInstance = nicEditors.findEditor('txtComment');
                        nicInstance.setContent('');
                        $("#hdWorkflowType").val("Amendment Approval");
                        $("#hdWorkflowObjectID").val(amendmentID);
                        $("#hdWorkflowObjectTitle").val(amendmentName);
                        GetValuesAndAutoPopulate("ddlWorkflowCC", "");
                        var vWorkflowSettings = [];
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Amendment Approval&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + amendmentID,
                            type: 'GET',
                            cache: false,
                            contentType: false,
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey
                            },
                            processData: false,
                            success: function (item) {
                                vWorkflowSettings = item.WorkflowSettings;

                                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                    return (n.RowKey == "8" && n.Status == "ON");
                                });
                                if (vAccFeat.length > 0) {
                                    vWorkflowRules = item.WorkflowRules;
                                }
                                if (item.WorkflowSettings != null) {
                                    workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                    workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                    if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                        if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                            $("#spAddStage").css("display", "none");
                                        }
                                    }
                                    $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                    if ($("#txtDuration").val() != "") {
                                        $("#txtDuration").trigger("onchange");
                                    } else {
                                        $("#lblDurationDate").empty();
                                    }
                                    //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                    //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                    workflowAdHoc = vWorkflowSettings.WorkflowAdHoc;
                                }
                                if (vWorkflowRules.length > 0) {
                                    $(vWorkflowRules).each(function (i, rule) {
                                        $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                    });
                                    if (workflowAdHoc == "on") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    }
                                    var workflowRules = vWorkflowRules[0];
                                    $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').attr("selected", true);
                                    if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text(workflowRules.RuleName);
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    } else {
                                        $("#lblddlRule").text("");
                                        $("#lblddlRule").css("display", "none");
                                        $("#ddlRule").css("display", "");
                                        $("#ddlRule").removeAttr("disabled");
                                    }
                                    var participantsInXML = workflowRules.ParticipantsInXML;
                                    var totalFileCount = 0;
                                    if (workflowRules.RuleName == "Default") {
                                        if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                        } else {
                                            $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                        }
                                    } else {
                                        if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + amendmentName);
                                        } else {
                                            $("#txtWorkflowTitle").val('Approval for ' + amendmentName);
                                        }
                                    }
                                    //If the rule is ad-hoc 
                                    if (participantsInXML != "") {
                                        $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                            var StageTitle = $(this).find('StageTitle').text();
                                            var Participants = $(this).find('Participants').text();
                                            var Order = $(this).find('Order').text();
                                            totalFileCount++;
                                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width46 start_workflow">';
                                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                            if (Order == "Serial")
                                                htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                            else
                                                htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width4 start_workflow">';
                                            if (totalFileCount > 1)
                                                htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                            else
                                                htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '</tr>';

                                            $("#tblStage").append(htmlFormatFile);
                                            var $options = $("#ddlApprovers > option").clone();
                                            $('#ddlAssignTo' + totalFileCount).append($options);
                                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                                if ($(this).val() != null) {
                                                    if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                            workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                    } else {
                                                        $("#ddlOrder" + vasstoid).val("Serial");
                                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    }
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            });
                                            GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                            var vParticipantsArr = Participants.split(";");
                                            if (vParticipantsArr.length > 1)
                                                $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                            else
                                                $("#ddlOrder" + totalFileCount).prop('disabled', true);


                                            if (item.WorkflowSettings != null) {
                                                if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                    if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                        $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                        $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                    }
                                                    $("#txtStage" + totalFileCount).prop('disabled', true);
                                                    $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                                }
                                            }
                                        });
                                    } else {
                                        if ($("#ddlRule").html() == "") {
                                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                            $("#lblddlRule").css("display", "");
                                            $("#ddlRule").css("display", "none");
                                            $("#lblddlRule").text("Ad-hoc");
                                        }
                                        if (!workflowAdHoc)
                                            $("#ddlRule").attr('disabled', 'disabled');
                                        var totalFileCount = 1;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4">';
                                        htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);

                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1) {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                } else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        });
                                    }
                                } else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1) {
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            } else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        } else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    });
                                }
                                $("#loadingPage").fadeOut();
                                $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                $("#dvWorkflow").dialog("open");
                                $("#dvWorkflow").height("auto");
                            },
                            error: function () {
                                $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                $("#lblddlRule").css("display", "");
                                $("#ddlRule").css("display", "none");
                                $("#lblddlRule").text("Ad-hoc");
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 start_workflow">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);
                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1) {
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        } else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    } else {
                                        $("#ddlOrder" + vasstoid).val("Serial");
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    }
                                });

                                $("#loadingPage").fadeOut();
                                $("#contractDetailsSummaryConfiguration").css('display', 'none');
                                $("#dvWorkflow").dialog("option", "title", "Amendment Approval Workflow");
                                $("#dvWorkflow").dialog("open");
                                $("#dvWorkflow").height("auto");
                            }
                        });
                    }
                }
                break;
            }
    }
}

function ViewAmendment(amendmentID) {
    $("#loadingPage").fadeIn();
    $('#tblAmendmentMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> Loading...</td></tr>');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/amendmentdetails?amendmentid=' + amendmentID,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (amendmententity) {

            var vMetadata = '<tr>';
            vMetadata += '<td class="text_label width50">Amendment Title</td>';
            vMetadata += '<td class="text width50">' + amendmententity.AmendmentTitle + '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width50">Amendment Type</td>';
            vMetadata += '<td class="text width50">' + amendmententity.AmendmentType + '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width50">Reason for Amendment</td>';
            vMetadata += '<td class="text width50">' + amendmententity.AmendmentDescription + '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Amendment Finalized?</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentFinalized != '') {
                vMetadata += amendmententity.AmendmentFinalized;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Amendment Finalized Date</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentFinalizedDate != null && amendmententity.AmendmentFinalizedDate != '') {
                var completedate = "";

                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    completedate = amendmententity.AmendmentFinalizedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        completedate = amendmententity.AmendmentFinalizedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        completedate = amendmententity.AmendmentFinalizedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }
                vMetadata += completedate;
            } else {
                vMetadata += '-';
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Amendment Finalized by</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentFinalizedBy != '') {
                vMetadata += amendmententity.AmendmentFinalizedBy;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';



            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Amendment Completed</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentCompleted != '') {
                vMetadata += amendmententity.AmendmentCompleted;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Completed Date</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentCompletedDate != null && amendmententity.AmendmentCompletedDate != '') {
                var completedate = "";

                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    completedate = amendmententity.AmendmentCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        completedate = amendmententity.AmendmentCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        completedate = amendmententity.AmendmentCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }
                vMetadata += completedate;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            if (amendmententity.EffectiveDate != null) {
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Start/ Effective Date of Amendment</td>';

                var fEffectiveDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    if (getTimeZone().indexOf('+') > -1)
                        fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).format('MM/DD/YYYY');
                    else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                        fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format('MM/DD/YYYY');
                } else {
                    if (getTimeZone().indexOf('+') > -1)
                        fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).format(localStorage.AppDateFormat);
                    else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                        fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format(localStorage.AppDateFormat);
                }
                vMetadata += '<td class="text width50">' + fEffectiveDate + '</td>';
                vMetadata += '</tr>';
            }
            if (amendmententity.IsContractValidityEnabled == "Yes") {
                if (amendmententity.ContractEndDateAfterAmendment != null) {
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50">Contract End Date(After Amendment)</td>';

                    var fContractEndDateAfterAmendment = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        if (getTimeZone().indexOf('+') > -1)
                            fContractEndDateAfterAmendment = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).format('MM/DD/YYYY');
                        else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                            fContractEndDateAfterAmendment = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format('MM/DD/YYYY');
                    } else {
                        if (getTimeZone().indexOf('+') > -1)
                            fContractEndDateAfterAmendment = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).format(localStorage.AppDateFormat);
                        else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                            fContractEndDateAfterAmendment = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format(localStorage.AppDateFormat);
                    }
                    vMetadata += '<td class="text width50">' + fContractEndDateAfterAmendment + '</td>';
                    vMetadata += '</tr>';
                }
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Update (after approval) Contract Record metadata & Milestones</td>';
                vMetadata += '<td class="text width50">' + amendmententity.UpdateContractEndDate + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Contract Validity Notes</td>';
                vMetadata += '<td class="text width50">' + amendmententity.ContractValidityNotes + '</td>';
                vMetadata += '</tr>';
            }

            if (amendmententity.IsContractValueEnabled == "Yes") {
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Contract Value(After Amendment)</td>';
                vMetadata += '<td class="text width50">' + amendmententity.ContractValueAfterAmendment + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Update (after approval) Contract Value in Contract Record</td>';
                vMetadata += '<td class="text width50">' + amendmententity.UpdateContractValue + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Funding Source Name</td>';
                vMetadata += '<td class="text width50">' + amendmententity.FunderOrAccountName + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Funding Source Number</td>';
                vMetadata += '<td class="text width50">' + amendmententity.FunderOrAccountNumber + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Contract Value Notes</td>';
                vMetadata += '<td class="text width50">' + amendmententity.ContractValueNotes + '</td>';
                vMetadata += '</tr>';
            }

            if (amendmententity.IsSOWEnabled == "Yes") {
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Summary of SOW/Obligation/Commitment(After Amendment)</td>';
                vMetadata += '<td class="text width50">' + amendmententity.SummaryOfSOWAfterAmendment + '</td>';
                vMetadata += '</tr>';
            }

            //get amendment documents
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/documents?amendmentid=' + amendmentID,
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                "Content-Type": "application/json",
                cache: false,
                success: function (data) {
                    var htmlDocu = "";
                    if (data.length > 0) {
                        $(data).each(function (i, item) {
                            htmlDocu += "<tr>";
                            htmlDocu += "<td>";
                            htmlDocu += "<a href='" + item.DocumentUrl + "' style='border-bottom: 1px dotted;color: #3F91CC !important;font-size: 12px !important;'>";
                            htmlDocu += item.DocumentName;
                            htmlDocu += "</a>";
                            htmlDocu += "</td>";
                            htmlDocu += "</tr>";
                        });
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Attached Documents</td>';
                        vMetadata += '<td class="text width60"><table  class="width100" cellpadding="2" cellspacing="2">' + htmlDocu + '</table></td>';
                        vMetadata += '</tr>';
                    } else {
                        vMetadata += '<tr><td class="text_label width40">Attached Documents</td><td style="font-size:13px;">No items found.</td></tr>';
                    }
                    $("#loadingPage").fadeOut();
                },
                error: function (data) {
                    vMetadata += '<tr><td class="text_label width40">Attached Documents</td><td style="font-size:13px;">No items found.</td></tr>';
                    $("#loadingPage").fadeOut();
                },
                complete: function (data) {
                    $("#tblAmendmentMetadataDetail").html(vMetadata);
                    setBlankValueToHyphen("tblAmendmentMetadataDetail");
                    $("#viewAmendmentMetadataDetail").dialog("option", "title", "Amendment Details");
                    $("#viewAmendmentMetadataDetail").dialog("open");
                    $("#loadingPage").fadeOut();
                }
            });

        },
        error: function () {
            $("#loadingPage").fadeOut();
        },
        complete: function () {

        }
    });
}

function refreshContractActivities() {
    GetContractActivities(vContractID);
}

$('#btnAdd').click(function (e) {
    e.preventDefault();

    var removeBtn = "<img src='../Content/Images/icon/delete.png' style='float:right; margin-top:10px;' onclick='deleteDocumentElement(this)' />";
    var htmlFormatDiv = $("<div id='uploadContainer' style='height:30px'></div>");
    var htmlFormatFile = $("<input type='file' onchange='javascript:changeinuploadfiles(this);'/>");

    var totalFileCount = $("#inTD").children("div").length;
    htmlFormatFile.attr("id", "file" + (totalFileCount + 1));
    htmlFormatFile.attr("name", "file" + (totalFileCount + 1));
    htmlFormatFile.attr("class", "file_amendment");
    htmlFormatFile.addClass("HLeyckU8");
    htmlFormatDiv.attr("id", "uploadContainer" + (totalFileCount + 1));

    htmlFormatDiv.append(htmlFormatFile);
    htmlFormatDiv.append(removeBtn);

    $("#inTD").append(htmlFormatDiv);
});

function deleteDocumentElement(n) {
    var ele = n.parentNode.id;
    var pattern = /[0-9]+/g;
    var docNumb = ele.replace(/[^0-9]/g, '');
    n.parentNode.parentNode.removeChild(n.parentNode);

    var totalFileCount = $("#inTD").children().length;
    totalFileCount = totalFileCount + 1;
    var count = parseInt(docNumb) + 1;

    for (var i = count; i < (totalFileCount + 1) ; i++) {
        $("#uploadContainer" + i).attr('id', 'uploadContainer' + (i - 1));
        var element = $("#file" + i);
        element.attr('id', 'file' + (i - 1));
        element.attr('name', 'file' + (i - 1));
    }
}

function deleteSavedDocumentElement(n, RowKey) {
    swal({
        title: '',
        text: "Are you sure you want to delete?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
        function (confirmed) {
            if (confirmed) {
                $(n).parent().parent().remove();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + RowKey + '&amendment=True',
                    type: 'DELETE',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (data) {

                    },
                    error: function () {

                    }
                });
            }
            return;
        });
}

function getUrlOfAttachedDoc() {
    var urlOfAttachedDoc = "";
    $('.clsLinkOfDoc').each(function () {
        var href = $(this).attr('href');
        if (urlOfAttachedDoc == "")
            urlOfAttachedDoc += href;
        else
            urlOfAttachedDoc += ";" + href;
    });
    return urlOfAttachedDoc;
}

function setBlankValueToHyphen(tableId) {
    $('#' + tableId + ' tr td').each(function () {
        var cellText = $(this).html();
        if (cellText == '' || cellText == '0') {
            $(this).html('-');
        }
    });
}

//---------------------------------Amendment Ends-----------------------------------------------//

//---------------------------------Notes Begins-----------------------------------------------//

function BindNotes(contractid) {
    if (contractid == null || contractid == "") {
        contractid = vContractID;
    }
    $("#ulNotesBody").empty();
    $("#dvNotes").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + contractid + '/notes',
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            var count = 0;
            var datalenght = 0;
            if (data != null)
                datalenght = data.length;
            if (datalenght > 0) {
                var article = '';
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    count++;
                    var vTimedesc = '';
                    if (item.Created != null && item.Created != "") {
                        var vTime = moment(new Date(item.Created)).format('MMMM Do YYYY');
                        var vTimeExact = moment(new Date(item.Created)).format('h:mm A');
                        vTimedesc = ' on ' + vTime + ' at ' + vTimeExact;
                    }

                    if (count <= 10)
                        article += '<li>';
                    else
                        article += '<li class="ShowMoreNotes" style="display:none;">';


                    article += '<span style="display: block;clear: both;" class="color_dark width100">' + item.Note + '</span>';
                    article += '<span class="color_lightgrey" style="float: left; width: 99%; margin: 10px 0px;" >Posted by ' + item.CreatedBy + vTimedesc;
                    if (item.CreatedBy == localStorage.UserName)
                        article += '<span style="float: right; width: 4%;"><img src="../Content/Images/edit-quick.png" class="margin-left-5" onclick="GetNoteDetail(\'' + item.RowKey + '\')" /><img src="../Content/Images/close-quick.png" class="margin-left-5" onclick="DeleteNote(\'' + item.RowKey + '\')" /></span>';
                    article += '</span>';
                    article += '<span><small class="color_lightgrey">&nbsp;</small></span>';
                    article += '</li>';

                }

                $("#ulNotesBody").html(article);
            } else {
                $("#ulNotesBody").append('<li><b class="color_lightgrey">No items found.</b></li>');
            }

            if (count > 10) {
                var more = count - 10;
                $("#dvNotes").html('<a id="ShowMoreNotes" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreNotes()">' + more + ' More Notes </a>' +
                    '<a id="ShowLessNotes" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessNotes()" style="display:none;">Show less</a>');
            }

            $("#lblNotesCount").text(count);

            if (!$("#lblNotesCount").text().trim()) {
                $("#ulNotesBody").append('<li>No items found.</li>');
            }
        },
        error: function (request) {
            $("#lblNotesCount").text('0');
            $("#ulNotesBody").append('No items found.');
        }
    });
}

function ShowMoreNotes() {
    $('.ShowMoreNotes').css("display", "");
    $('#ShowMoreNotes').css("display", "none");
    $('#ShowLessNotes').css("display", "");
}

function ShowLessNotes() {
    $('.ShowMoreNotes').css("display", "none");
    $('#ShowMoreNotes').css("display", "");
    $('#ShowLessNotes').css("display", "none");
}

function GetNoteDetail(noteid) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/notes?noteid=' + noteid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#txtNoteID").val(data.RowKey);
            //*Harshitha
            var nicInstance = nicEditors.findEditor('txtNotes');
            nicInstance.setContent(data.Note);

            GetValuesAndAutoPopulate("ddlSendTo", data.SendTo);

            $("#loadingPage").fadeOut();
            $("#dvAddNotes").dialog("option", "title", "Edit a Note");
            $("#dvAddNotes").dialog("open");
        },
        error: function (request) {
            $("#loadingPage").fadeOut();
        }
    });
}

function DeleteNote(noteid) {
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span>?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
        function (confirmed) {
            if (confirmed) {
                $("#loadingPage").fadeIn();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/notes?noteid=' + noteid + '&username=' + localStorage.UserName,
                    type: 'DELETE',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    cache: false,
                    success: function (data) {
                        $("#loadingPage").fadeOut();
                        BindNotes(vContractID);
                    },
                    error: function (request) {
                        $("#loadingPage").fadeOut();
                        BindNotes(vContractID);
                    }
                });
            }
            return;
        });

}

function DeleteNote(noteid) {
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span>?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
        function (confirmed) {
            if (confirmed) {
                $("#loadingPage").fadeIn();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/notes?noteid=' + noteid + '&username=' + localStorage.UserName,
                    type: 'DELETE',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    cache: false,
                    success: function (data) {
                        $("#loadingPage").fadeOut();
                        BindNotes(vContractID);
                    },
                    error: function (request) {
                        $("#loadingPage").fadeOut();
                        BindNotes(vContractID);
                    }
                });
            }
            return;
        });

}

$('#btnNewNotes').click(function () {
    $(".validelement").each(function (index, element) {

        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validNicEdit").each(function (index, element) {

        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });


    var vActiveParticipants = contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees + ";" + contractItem.Requestor;
    //*Harshitha

    var regexp = new RegExp(escapeRegExp(localStorage.UserName), 'g');
    vActiveParticipants = vActiveParticipants.replace(regexp, '');
    $("#ddlSendTo option").removeClass('hideUserlocal');

    $("#ddlSendTo option").each(function (index, element) {
        if (element.value == localStorage.UserName) {
            $(element).addClass('hideUserlocal');
        }
    });

    //$("#ddlSendTo option[value='" + localStorage.UserName + "']").addClass('hideUserlocal');

    var nicInstance = nicEditors.findEditor('txtNotes');
    nicInstance.setContent('');

    $("#txtNoteID").val("");
    GetValuesAndAutoPopulate("ddlSendTo", vActiveParticipants);

    $("#dvAddNotes").dialog("option", "title", "Add a Note");
    $("#dvAddNotes").dialog("open");
});

function AddNotes() {
    if (requiredValidator('dvAddNotes')) {
        //*Harshitha 
        var nicInstance = nicEditors.findEditor('txtNotes');
        var vNotesText = CleanWordFormatFromHTML(nicInstance.getContent());
        var vNoteTextCount = vNotesText.replace(/<\/?[^>]+(>|$)/g, "");
        if (vNoteTextCount.length <= 26500) {
            $("#loadingPage").fadeIn();
            vNotesText = $('<div/>').text(vNotesText).html();
            var globalConOwners = getGlobalContractOwners();
            var toRemove = (contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees +
                ";" + contractItem.ContractAreaAdministrators + ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadOnlyPermissions +
                ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager + ";" + globalConOwners).split(';');
            toRemove = $.map(toRemove, $.trim);
            var myArray = $('#ddlSendTo').val();
            if (myArray == null)
                myArray = [];
            myArray = myArray.filter(function (el) {
                return toRemove.indexOf(el) < 0;
            });
            var vAllowToAdd = true;
            if (myArray.length > 0) {
                swal({
                    title: '',
                    text: "'" + myArray.join(', ') + "'  do not have access to this contract. Do you want to provide access?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var sendTo = '';
                            $('#ddlSendTo_chosen').find('.chosen-choices li').find('span').each(function () {
                                if (sendTo == '') {
                                    sendTo = $(this).text();
                                } else {
                                    sendTo += "; " + $(this).text();
                                }
                            });
                            vContractID = getParameterByName("ContractID");
                            var vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes';
                            var vType = 'POST';
                            if ($("#txtNoteID").val() != "") {
                                vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes?noteid=' + $("#txtNoteID").val();
                                vType = 'PUT';
                            }
                            $.ajax({
                                url: vUrl,
                                type: vType,
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey
                                },
                                data: {
                                    ContractID: vContractID,
                                    Note: vNotesText,
                                    SendTo: sendTo,
                                    CreatedBy: localStorage.UserName
                                },
                                cache: false,
                                success: function (person) {

                                    BindNotes(vContractID);
                                    if (myArray.length > 0) {
                                        var ReadOnlyUsers = contractItem.ReadOnlyPermissions;
                                        if (ReadOnlyUsers == '')
                                            ReadOnlyUsers = myArray.join('; ');
                                        else
                                            ReadOnlyUsers += "; " + myArray.join('; ');
                                        contractItem.ReadOnlyPermissions = ReadOnlyUsers;

                                        $.ajax({
                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/permission',
                                            type: 'PUT',
                                            dataType: 'json',
                                            headers: {
                                                'eContracts-ApiKey': localStorage.APIKey,
                                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                            },
                                            data: {

                                                ReadOnlyPermissions: ReadOnlyUsers,
                                                ReadWritePermissions: contractItem.ReadWritePermissions,
                                                FullControlPermissions: contractItem.FullControlPermissions,
                                                ModifiedBy: localStorage.UserName,
                                                CustomPermission: "Yes"
                                            },
                                            cache: false,
                                            success: function (person) { }
                                        });
                                    }
                                    $("#dvAddNotes").dialog("close");
                                },
                                complete: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        } else {
                            $("#loadingPage").fadeOut();
                        }
                        return;
                    });

            } else {
                if (vAllowToAdd) {
                    var sendTo = '';
                    $('#ddlSendTo_chosen').find('.chosen-choices li').find('span').each(function () {
                        if (sendTo == '') {
                            sendTo = $(this).text();
                        } else {
                            sendTo += "; " + $(this).text();
                        }
                    });
                    vContractID = getParameterByName("ContractID");
                    var vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes';
                    var vType = 'POST';
                    if ($("#txtNoteID").val() != "") {
                        vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes?noteid=' + $("#txtNoteID").val();
                        vType = 'PUT';
                    }
                    $.ajax({
                        url: vUrl,
                        type: vType,
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey
                        },
                        data: {
                            ContractID: vContractID,
                            Note: vNotesText,
                            SendTo: sendTo,
                            CreatedBy: localStorage.UserName,
                            CustomPermission: "Yes"
                        },
                        cache: false,
                        success: function (person) {
                            BindNotes(vContractID);
                            if (myArray.length > 0) {
                                var ReadOnlyUsers = contractItem.ReadOnlyPermissions;
                                if (ReadOnlyUsers == '')
                                    ReadOnlyUsers = myArray.join('; ');
                                else
                                    ReadOnlyUsers += "; " + myArray.join('; ');
                                contractItem.ReadOnlyPermissions = ReadOnlyUsers;

                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/permission',
                                    type: 'PUT',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey,
                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                    },
                                    data: {
                                        ReadOnlyPermissions: ReadOnlyUsers,
                                        ReadWritePermissions: contractItem.ReadWritePermissions,
                                        FullControlPermissions: contractItem.FullControlPermissions,
                                        ModifiedBy: localStorage.UserName
                                    },
                                    cache: false,
                                    success: function (person) { }
                                });
                            }
                            $("#dvAddNotes").dialog("close");
                        },
                        complete: function () {
                            $("#loadingPage").fadeOut();
                        }
                    });
                } else {
                    $("#loadingPage").fadeOut();
                }
            }
        } else {
            swal("", "Note can not exceed 26500 characters");
        }
    }
}

function getGlobalContractOwners() {
    var gloablconowners = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/usersbyusertype?usertype=Global Contract Owner',
        type: 'GET',
        dataType: 'json',
        cache: false,
        async: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (userdetails) {
            $(userdetails).each(function (i, item) {
                if (gloablconowners == "")
                    gloablconowners = item.UserName;
                else
                    gloablconowners += ";" + item.UserName;
            });
        },
        error: function (userdetails) { }
    });
    return gloablconowners;
}

function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

//---------------------------------Notes Ends-----------------------------------------------//

//---------------------------------TermsAndClauseDocument Begins-----------------------------------------------//
function TermsAndClauseDocument(objContractIDvalue) {
    $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
    $("#docversion").css("display", "none");
    $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + objContractIDvalue,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (filescount) {
            if (filescount == null) {
                $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
                $("#docversion").css("display", "none");
                $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
            } else {
                $("#ddlTemplateAndClauses").html('<option value="0">--Select--</option>');
                $(filescount).each(function (i, item) {
                    if (item != null) {
                        //if (item.CreationMode == "Template" && item.IsFolder != "True") {
                        //    $("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
                        //}
                        if (item.IsFolder != "True") {
                            $("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
                        }
                    }
                });
            }
        },
        error: function (filescount) {
            $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
            $("#docversion").css("display", "none");
            $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
        }
    });
}

//---------------------------------TermsAndClauseDocument Ends-----------------------------------------------//


//---------------------------------Obligation Begins-----------------------------------------------//

function BindObligationsNew(contractid, item1) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Catalog",
        type: 'DELETE',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            username: localStorage.UserName,
            contractId: getParameterByName("ContractID")
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (data) {
            if (contractid == null || contractid == "") {
                contractid = vContractID;
            }
            $("#ObligationNewDetailsTableBody").empty();
            $("#dvObligationAlertNew").empty();
            $("#dvObligationAlertNew").css('display', 'none');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsNew?contractid=' + contractid,
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                cache: false,
                success: function (contactsJsonPayload) {
                    listAllObligations = "";
                    listAllObligations = contactsJsonPayload;
                    $('#obligationgroup').removeClass('active');
                    $('#obligationungroup').addClass('active');
                    $("#ObligationNewDetailsTable").css('display', '');
                    $("#ObligationNewDetailsTableGroup").css('display', 'none');
                    $("#obligationNewActionsdiv").css('display', '');
                    var count = 0;
                    $("#NoObligationNewDetails").css('display', 'none');
                    var htmlContent = "";
                    $(contactsJsonPayload).each(function (i, item) {
                        count++;
                        var url = "";
                        var vDueDate = '';
                        if (item.DueDate != null) {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                vDueDate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            } else {
                                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                    vDueDate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                    vDueDate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                                }
                            }
                        } else {
                            vDueDate = "-";
                        }
                        if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                            if (typeof item1 != "undefined" && item1 != '') {
                                if (item1.Status == "Expired" || item1.Status == "Cancelled" || item1.Status == "Replaced" || item1.Status == "Archived")
                                    url = '<a title="' + item.ObligationTitle + '"  href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')" class="linkText">' + item.ObligationTitle + '</a>';
                                else
                                    url = '<input type="checkbox" id="' + item.RowKey + '" name="MultipleObligationsNew" onclick="checkMultipleObligationsNew(this);" value="' + item.RowKey + '">&nbsp;<a title="' + item.ObligationTitle + '"  href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')" class="linkText">' + item.ObligationTitle + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuObligationNew"/>';
                            } else {
                                url = '<input type="checkbox" id="' + item.RowKey + '" name="MultipleObligationsNew" onclick="checkMultipleObligationsNew(this);" value="' + item.RowKey + '">&nbsp;<a title="' + item.ObligationTitle + '"  href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')" class="linkText">' + item.ObligationTitle + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuObligationNew"/>';
                            }
                        } else {
                            url = '<input type="checkbox" id="' + item.RowKey + '" name="MultipleObligationsNew" onclick="checkMultipleObligationsNew(this);" value="' + item.RowKey + '">&nbsp;<a title="' + item.ObligationTitle + '"  href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')" class="linkText">' + item.ObligationTitle + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuObligationNew"/>';
                        }
                        htmlContent += "<tr>";
                        htmlContent += "<td><p id='ObligationID' style='display:none;'>" + item.RowKey + "</p>";
                        htmlContent += "<span id='ObligationTitle' style='display:none;'>" + item.ObligationTitle + "</span>";
                        htmlContent += "<span id='ObligationText' style='display:none;'>" + item.ObligationText + "</span>";
                        htmlContent += "<span id='ObligationRecurrence' style='display:none;'>" + item.Recurrences + "</span>";
                        htmlContent += "<span id='ObligationStatus' style='display:none;'>" + item.ObligationStatus + "</span>";
                        htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                        htmlContent += "<td ><span  id='ObligationType" + item.RowKey + "'>" + item.ObligationType + "</span></td>";
                        htmlContent += "<td  ><lable id='ObligationDue" + item.RowKey + "'>" + vDueDate + "</lable></td>";
                        if (listAllObligationCatalogs != null && listAllObligationCatalogs != "") {
                            var obligproducts = "";
                            var ID = item.RowKey;
                            obligproducts = $.grep(listAllObligationCatalogs, function (p) {
                                return p.ObligationID == ID;
                            }).map(function (p) {
                                return p
                            });
                            if (obligproducts != null && obligproducts != "" && obligproducts.length > 0) {
                                htmlContent += "<td><lable>" + obligproducts.length + "</lable></td>";
                            } else {
                                htmlContent += "<td><lable>-</lable></td>";
                            }
                        } else {
                            htmlContent += "<td><lable>-</lable></td>";
                        }
                        if (item.PerformedBy == "Self") {
                            if ($("#lblCompanyProfile").text() != null && $("#lblCompanyProfile").text() != "") {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + $("#lblCompanyProfile").text() + "</lable></td>";
                            } else {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + "-" + "</lable></td>";
                            }
                        } else {
                            if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + $("#lblCounterparty").text() + "</lable></td>";
                            } else {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + "-" + "</lable></td>";
                            }
                        }
                        if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                            if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                                htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + item.ObligationStatus + "</a></td>";
                            } else {
                                htmlContent += "<td><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationStatusSettings'>" + item.ObligationStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                            }
                        } else
                            htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + item.ObligationStatus + "</a></td>";
                        htmlContent += "</tr>";
                    });
                    $("#ObligationNewDetailsTableBody").html(htmlContent);
                    $("#lblObligationNewCount").text(count);
                    $(".openmenuObligationNew").contextMenu({
                        menu: 'dropdownMenuobligation',
                        leftButton: true
                    }, function (action, el, pos) {
                        contextMenuObligationNew(action, el.parent("i").parent("td").parent("tr"), pos);
                    });
                    $(".openmenuObligationStatusSettings").contextMenu({
                        menu: 'dropdownMenuObligationStatusSettings',
                        leftButton: true
                    }, function (action, el, pos) {
                        contextMenuObligationStatusSettings(action, el.parent("td").parent("tr"), pos);
                    });
                    $("#loadingPage").fadeOut();
                },
                error: function (request) {
                    listAllObligations = "";
                    $("#NoObligationNewDetails").css('display', '');
                    $("#obligationNewActionsdiv").css('display', 'none');
                    $("#loadingPage").fadeOut();
                    $("#lblObligationNewCount").text('0');
                    $("#ulObligationNew").append('No items found.');
                }
            });
        }
    });
}

function contextMenuObligationNew(action, el, pos) {

    switch (action) {
        case "view":
            {
                var obligationID = $(el).find("#ObligationID").text();
                ViewObligationDetail(obligationID);
                break;
            }
        case "delete":
            {
                var termTitle = $(el).find("#ObligationTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + termTitle + "'</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var obligationID = $(el).find("#ObligationID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                "Content-Type": "application/json",
                                cache: false,
                                success: function (data) {

                                    GetObligationCatalogs();

                                }
                            });
                        }
                        return;
                    });

                break;
            }
        case "edit":
            {
                $('#addEditMilestoneNew').dialog('widget').find('.ui-dialog-buttonpane .ui-button:button:contains("Add") .pop_up_Content_Green ').html("Save");
                $("#loadingPage").fadeIn();
                clearObligationFormDataNew();
                listObligationNewData = "";
                vObligationFlaging = "EDIT";

                $("#inprocessObligation").css("visibility", "hidden");
                var obligationID = $(el).find("#ObligationID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (obligationentity) {

                        $('#hdnProductUpdates').text('EDIT');
                        $("#hdnObligationUniqueId").text(obligationentity.ObligationText);
                        $("#hdnObligationRowKey").text(obligationentity.RowKey);

                        var strCompanyProfile = "";
                        var strCounterpartynew = "";

                        if ($("#lblCompanyProfile").text() == null || $("#lblCompanyProfile").text() == "") {
                            strCompanyProfile = "Not Available"
                        } else {
                            strCompanyProfile = $("#lblCompanyProfile").text();
                        }

                        if ($("#lblCounterparty").text() == null || $("#lblCounterparty").text() == "") {
                            strCounterpartynew = "Not Available";
                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = true;

                        } else {
                            strCounterpartynew = $("#lblCounterparty").text();
                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = false;

                        }


                        string1 = "My Company" + " " + "(" + strCompanyProfile + ")";
                        string2 = "Counterparty" + " " + "(" + strCounterpartynew + ")";

                        $("#PerformedPartySelf").text(string1);
                        $("#PerformedPartyCounterparty").text(string2);
                        vObligationTextEditRecurrence = "";



                        GetValuesAndAutoPopulate("ddlSendReminderToObligationNew", obligationentity.SendReminderTo);


                        if (obligationentity.Reminder1 != null && obligationentity.Reminder1 != "" && obligationentity.Reminder1 != 0) {
                            $("#txtReminder1ObligationNew").val(obligationentity.Reminder1);
                        } else {
                            $("#txtReminder1ObligationNew").val("");
                        }
                        allowOnlyNumberInInputBox("txtReminder1ObligationNew");
                        if (obligationentity.Reminder2 != null && obligationentity.Reminder2 != "" && obligationentity.Reminder2 != 0) {
                            $("#txtReminder2ObligationNew").val(obligationentity.Reminder2);
                        } else {
                            $("#txtReminder2ObligationNew").val("");
                        }
                        allowOnlyNumberInInputBox("txtReminder2ObligationNew");
                        if (obligationentity.Reminder3 != null && obligationentity.Reminder3 != "" && obligationentity.Reminder3 != 0) {
                            $("#txtReminder3ObligationNew").val(obligationentity.Reminder3);
                        } else {
                            $("#txtReminder3ObligationNew").val("");
                        }
                        allowOnlyNumberInInputBox("txtReminder3ObligationNew");
                        if (obligationentity.Reminder1Condition != '') {
                            $("#ddlReminder1ObligationNew option").filter(function (index) {
                                return $(this).text() === obligationentity.Reminder1Condition;
                            }).prop('selected', true);
                        } else {
                            $("#ddlReminder1ObligationNew").val('before')
                        }
                        if (obligationentity.Reminder2Condition != '') {
                            $("#ddlReminder2ObligationNew option").filter(function (index) {
                                return $(this).text() === obligationentity.Reminder2Condition;
                            }).prop('selected', true);
                        } else {
                            $("#ddlReminder2ObligationNew").val('before')
                        }
                        if (obligationentity.Reminder3Condition != '') {
                            $("#ddlReminder3ObligationNew option").filter(function (index) {
                                return $(this).text() === obligationentity.Reminder3Condition;
                            }).prop('selected', true);
                        } else {
                            $("#ddlReminder3ObligationNew").val('before')
                        }

                        $("#ddlObligationNewPriority option").filter(function (index) {
                            return $(this).text() === obligationentity.Priority;
                        }).prop('selected', true);
                        $('input[type="radio"][name="ObligationNewAutoComplete"][value="' + obligationentity.AutoComplete + '"]').prop('checked', true);
                        $('input[type="radio"][name="ShowInObligCalendar"][value="' + obligationentity.ShowInCalendar + '"]').prop('checked', true);

                        $("#lblCTitleObligationNew").text(obligationentity.ContractTitle)
                        var duedate = "";

                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            duedate = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY');
                        } else {
                            duedate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat);
                        }
                        $("#txtObligationNewID").val(obligationentity.RowKey);
                        $("#txtObligationNewText").val(obligationentity.ObligationText);
                        $("#txtObligationNewTitle").val(obligationentity.ObligationTitle);
                        $("#ddlObligationTypeNew option").filter(function (index) {
                            return $(this).text() === obligationentity.ObligationType;
                        }).prop('selected', true);
                        $("#txtObligationNewDesc").val(obligationentity.Description);
                        GetValuesAndAutoPopulate("ddlObligationNewOwner", obligationentity.ObligationOwner);
                        //$("#dtObligationNewDueDate").val(duedate);
                        $('#dtObligationNewDueDate').datepicker('setDate', duedate);

                        $('input[type="radio"][name="PerformedParty"][value="' + obligationentity.PerformedBy + '"]').prop('checked', true);
                        $("#ddlObligationStatus option").filter(function (index) {
                            return $(this).text() === obligationentity.ObligationStatus;
                        }).prop('selected', true);

                        $("#ddlObligationOccurencess option").filter(function (index) {
                            return $(this).text() === obligationentity.Recurrences;
                        }).prop('selected', true);
                        var newDate = new Date(obligationentity.DueDate);
                        listObligationNewStartDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
                        //listObligationNewStartDate = duedate;
                        var strEndDate = "";
                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                            strEndDate = new Date(contractItem.EndDate);
                            listObligationNewEndDate = formatDate(strEndDate);
                            $('#ObligationNewOcurrenceEndDate').text("");
                            var ONewEndDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                if (getTimeZone().indexOf('+') > -1)
                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).format('MM/DD/YYYY');
                                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().add(1, 'days').format('MM/DD/YYYY');
                            } else {
                                if (getTimeZone().indexOf('+') > -1)
                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).format(localStorage.AppDateFormat);
                                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().add(1, 'days').format(localStorage.AppDateFormat);
                            }

                            $('#ObligationNewOcurrenceEndDate').text(" (" + ONewEndDate + ")");
                            $("#rdObligationNewEndOccurence").prop("checked", true);
                        } else {
                            listObligationNewEndDate = "Not Available";
                            $('#ObligationNewOcurrenceEndDate').text("");
                            $('#ObligationNewOcurrenceEndDate').text(" (" + listObligationNewEndDate + ")");
                            $("#rdObligationNewEndOccurence").attr('disabled', true);
                            $('#rdObligationNewEndOccurence').removeAttr('checked');
                            $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                            userFlagObli = false;

                        }

                        if (obligationentity.ObligationStatus == "Complete" || obligationentity.ObligationStatus == "Cancelled") {
                            $("#ulObliCompletedate").css('display', '');
                            $('#dtObligationNewCompletedDate').addClass('validelement');
                            $('#dtObligationNewCompletedDate').addClass('validdate');
                            if (obligationentity.ObligationMetDate != null && obligationentity.ObligationMetDate != "") {

                                var OMetDate = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    OMetDate = moment(new Date(obligationentity.ObligationMetDate)).utc().format('MM/DD/YYYY');
                                } else {
                                    OMetDate = moment(new Date(obligationentity.ObligationMetDate)).utc().format(localStorage.AppDateFormat);
                                }
                                $('#dtObligationNewCompletedDate').val(OMetDate);
                            } else {
                                var CEDate = new Date();
                                CEDate = formatDate(CEDate);

                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    CEDate = moment(new Date(CEDate)).format('MM/DD/YYYY');
                                } else {
                                    CEDate = moment(new Date(CEDate)).utc().format(localStorage.AppDateFormat);
                                }

                                $('#dtObligationNewCompletedDate').val(CEDate);
                            }

                        } else {
                            $("#ulObliCompletedate").css('display', 'none');
                            $('#dtObligationNewCompletedDate').removeClass('validelement');
                            $('#dtObligationNewCompletedDate').removeClass('validdate');
                            $('#dtObligationNewCompletedDate').val('');
                        }

                        userFlagObli = true;


                        $("#dtOblOcurrMonthforYear").val(monthNames[newDate.getMonth()]);
                        $("#dtOblOcurrDateforYear").val(newDate.getDate());


                        $("#dtObligationNewOccurrenceDueDate").val(newDate.getDate());

                        $('input[type="radio"][name="SelectOccurenceEndDate"][value="' + obligationentity.ObligationEndTerm + '"]').prop('checked', true);

                        if (obligationentity.ObligationEndTerm == "Custom") {
                            userFlagObliCustom = true;
                            $("#txtOccurrenceCount").val(obligationentity.Ocurrences);

                        } else {
                            $("#txtOccurrenceCount").val("12");
                        }

                        //var dtStartdate = obligationentity.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                        //var dtEnddate = obligationentity.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                        var fObligationStartDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).utc().format('MM/DD/YYYY');
                        } else {
                            fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).utc().format(localStorage.AppDateFormat);
                        }
                        var dtStartdate = fObligationStartDate;

                        var fObligationEndDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format('MM/DD/YYYY');
                        } else {
                            fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat);
                        }
                        var dtEnddate = fObligationEndDate;



                        $('#ObligationOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + obligationentity.Ocurrences + " instances)")

                        vObligationEditStatus = "";

                        var dateNew = new Date(obligationentity.DueDate);

                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                            this.checked = false;
                            var Id = this.id;
                            $("#" + Id).css('outline', '');


                        });

                        $("#lblerrorreclimitObligation").css('display', 'none');
                        var day = dateNew.getDay()
                        var chkboxId = "ORC" + day;

                        $("#" + chkboxId).prop('checked', true);


                        if (obligationentity.Recurrences == "Weekly") {


                            $("#dtObligationNewDueDate").attr("disabled", "disabled");
                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                this.checked = false;

                            });

                            var strRecString = obligationentity.CustomString.split(',');

                            $(strRecString).each(function (index, element) {
                                var value = parseInt(element);
                                var chkboxId = "ORC" + value;
                                $("#" + chkboxId).prop('checked', true);
                            });

                            $("#divOcurrenceSummary").css('display', '');
                            $("#obligationEditOcursumary").css('display', '');

                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');

                            $("#aobligationRecNoneEdit").css('display', 'none');
                            $("#aobligationRecEdit").css('display', '');

                            $("#dvobligationOcurrenceEnd").css('display', 'none');

                            $("#liObligationRecurrence").css('display', 'none');



                        } else if (obligationentity.Recurrences == "None") {
                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divOcurrenceSummary").css('display', '');

                            $("#obligationEditOcursumary").css('display', '');


                            $("#aobligationRecNoneEdit").css('display', '');
                            $("#aobligationRecEdit").css('display', 'none');
                            $("#liObligationRecurrence").css('display', 'none');
                            $('#ObligationOcurrenceSummary').text("(" + "Never" + ")")


                        } else if (obligationentity.Recurrences == "Monthly") {
                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                            $("#ddlRepeatMonthly").css('display', '');
                            $("#ddlRepeatMonthly").val(obligationentity.RecMonthlyString);


                            $("#dtObligationNewDueDate").attr("disabled", "disabled");


                            $("#divOcurrenceSummary").css('display', '');
                            $("#obligationEditOcursumary").css('display', '');


                            $("#lblOcurrenceMonth").css('display', '');
                            $("#lblOcurrenceYear").css('display', 'none');

                            $("#aobligationRecNoneEdit").css('display', 'none');
                            $("#aobligationRecEdit").css('display', '');
                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                            $("#liObligationRecurrence").css('display', 'none');


                        } else {
                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                            $("#ddlRepeatMonthly").css('display', 'none');

                            $("#lblOcurrenceMonth").css('display', 'none');
                            $("#lblOcurrenceYear").css('display', '');


                            $("#dtObligationNewDueDate").attr("disabled", "disabled");


                            $("#divOcurrenceSummary").css('display', '');
                            $("#obligationEditOcursumary").css('display', '');

                            $("#aobligationRecNoneEdit").css('display', 'none');
                            $("#aobligationRecEdit").css('display', '');
                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                            $("#liObligationRecurrence").css('display', 'none');

                        }

                        $("#lblCTitleObli").text($("#lblContractTitle").text());

                        getObligationCatalogsNew(vContractID, $("#txtObligationNewText").val(), obligationentity.RowKey);

                        var foblnewdate1 = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            foblnewdate1 = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY');
                        } else {
                            foblnewdate1 = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat);
                        }
                        var oblnewdate1 = foblnewdate1;

                        var foblnewdate2 = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            foblnewdate2 = moment(new Date(obligationentity.ObligationEndDate)).format('MM/DD/YYYY');
                        } else {
                            foblnewdate2 = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat);
                        }
                        var oblnewdate2 = foblnewdate2;

                        $('#orepupdatesingle').text("");
                        $('#orepupdaterecurrence').text("");
                        $('#ornepupdatesingle').text("");
                        $('#ornepupdaterecurrence').text("");

                        $('#orepupdatesingle').text("(" + oblnewdate1 + ")");
                        $('#orepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");
                        $('#ornepupdatesingle').text("(" + oblnewdate1 + ")");
                        $('#ornepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");


                        if (vCatalogCount == "Yes") {
                            $("#trObliFinShow").css('display', 'none');
                            document.getElementById("cbObligationCatalogProductsSelect").checked = true;

                            document.getElementById("cbObligationCatalogProductsSelect").disabled = true;
                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "10" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                $("#dvObligationCatalogProducts").css('display', '');
                            }

                        }
                        if (obligationentity.AlertsEnabled == "Yes") {
                            $("#AlertObli").val('Yes').change();
                        } else {
                            $("#AlertObli").val('No').change();
                        }
                    }
                });
                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });


                $("#obligationnewheading").text("Edit Obligation");
                $("#addEditObligationNew").dialog("option", "title", "");
                $("#addEditObligationNew").dialog("open");
                break;
            }
    }
}

function contextMenuObligationStatusSettings(action, el, pos) {
    switch (action) {
        case "Upcoming":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();
                var duedateid = "ObligationDue" + obligationID;
                var obligationDueDate = $(el).find("#" + duedateid).text();
                var obligationStatus = $(el).find("#ObligationStatus").text();
                var mydate = moment(obligationDueDate, 'DD/MM/YYYY');
                mydate = moment(mydate).format("MM/DD/YYYY");
                if (comparedatestatus(mydate, action)) {
                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Upcoming',
                        type: 'POST',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName
                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            GetObligationCatalogs();
                            $("#obligationNewActions").css('display', 'none');
                        },
                        complete: function () {
                            $("#inprocessObligation").css('visibility', 'none');
                        }
                    });
                } else {
                    swal("", "Due Date is past date. So Status can not be Upcoming");
                }
                break;
            }
        case "Delayed":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();
                var duedateid = "ObligationDue" + obligationID;
                var obligationDueDate = $(el).find("#" + duedateid).text();
                var obligationStatus = $(el).find("#ObligationStatus").text();
                var mydate = moment(obligationDueDate, 'DD/MM/YYYY');
                mydate = moment(mydate).format("MM/DD/YYYY");
                if (comparedatestatus(mydate, action)) {
                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Delayed',
                        type: 'POST',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName
                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            GetObligationCatalogs();
                            $("#obligationNewActions").css('display', 'none');
                        },
                        complete: function () {
                            $("#inprocessObligation").css('visibility', 'none');
                        }
                    });
                } else {
                    swal("", "Due Date is future date. So Status can not be Delayed");
                }
                break;
            }
        case "Partial":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Partial',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        GetObligationCatalogs();
                        $("#obligationNewActions").css('display', 'none');
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
                break;
            }
        case "Cancelled":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Cancelled',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        swal("", "Obligation Updated");
                        GetObligationCatalogs();
                        $("#obligationNewActions").css('display', 'none');
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
                break;
            }
        case "Complete":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();
                $("#loadingPage").fadeIn();
                $("#inprocessObligation").css("visibility", "hidden");
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?obligationtext=' + obligationText + '&obligationId=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    cache: false,
                    async: false,
                    success: function (catalogs) {
                        if (catalogs != null && catalogs.length > 0) {
                            var catalogitems = "";
                            catalogitems = $.grep(catalogs, function (p) {
                                return p.ObligationCatalogStatus != "Complete" && p.ObligationCatalogStatus != "Cancelled";
                            })
                                .map(function (p) {
                                    return p
                                });
                            if (catalogitems != null && catalogitems != "") {
                                clearObligationFormDataNew();
                                vObligationFlaging = "EDIT";
                                validateproducts = false;
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                                    type: 'GET',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey
                                    },
                                    "Content-Type": "application/json",
                                    cache: false,
                                    success: function (obligationentity) {
                                        $("#loadingPage").fadeOut();
                                        $('#hdnProductUpdates').text('EDIT');
                                        $("#hdnObligationUniqueId").text(obligationentity.ObligationText);
                                        $("#hdnObligationRowKey").text(obligationentity.RowKey);
                                        var strCompanyProfile = "";
                                        var strCounterpartynew = "";
                                        if ($("#lblCompanyProfile").text() == null || $("#lblCompanyProfile").text() == "") {
                                            strCompanyProfile = "Not Available"
                                        } else {
                                            strCompanyProfile = $("#lblCompanyProfile").text();
                                        }
                                        if ($("#lblCounterparty").text() == null || $("#lblCounterparty").text() == "") {
                                            strCounterpartynew = "Not Available";
                                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = true;
                                        } else {
                                            strCounterpartynew = $("#lblCounterparty").text();
                                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = false;
                                        }
                                        string1 = "My Company" + " " + "(" + strCompanyProfile + ")";
                                        string2 = "Counterparty" + " " + "(" + strCounterpartynew + ")";
                                        $("#PerformedPartySelf").text(string1);
                                        $("#PerformedPartyCounterparty").text(string2);
                                        vObligationTextEditRecurrence = "";
                                        $("#lblCTitleObligationNew").text(obligationentity.ContractTitle)
                                        var duedate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                            duedate = moment(new Date(obligationentity.DueDate)).format('MM/DD/YYYY');
                                        } else {
                                            duedate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat);
                                        }
                                        $("#txtObligationNewID").val(obligationentity.RowKey);
                                        $("#txtObligationNewText").val(obligationentity.ObligationText);
                                        $("#txtObligationNewTitle").val(obligationentity.ObligationTitle);
                                        $("#ddlObligationTypeNew option").filter(function (index) {
                                            return $(this).text() === obligationentity.ObligationType;
                                        }).prop('selected', true);
                                        $("#txtObligationNewDesc").val(obligationentity.Description);
                                        GetValuesAndAutoPopulate("ddlObligationNewOwner", obligationentity.ObligationOwner);
                                        $("#dtObligationNewDueDate").val(duedate);
                                        $('input[type="radio"][name="PerformedParty"][value="' + obligationentity.PerformedBy + '"]').prop('checked', true);
                                        $("#ddlObligationStatus option").filter(function (index) {
                                            return $(this).text() === obligationentity.ObligationStatus;
                                        }).prop('selected', true);
                                        $("#ddlObligationOccurencess option").filter(function (index) {
                                            return $(this).text() === obligationentity.Recurrences;
                                        }).prop('selected', true);
                                        var newDate = new Date(obligationentity.DueDate);
                                        listObligationNewStartDate = duedate;
                                        var strEndDate = "";
                                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                                            strEndDate = new Date(contractItem.EndDate);
                                            listObligationNewEndDate = formatDate(strEndDate);
                                            $('#ObligationNewOcurrenceEndDate').text("");
                                            var ONewEndDate = "";
                                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                                if (getTimeZone().indexOf('+') > -1)
                                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).format('MM/DD/YYYY');
                                                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().add(1, 'days').format('MM/DD/YYYY');
                                            } else {
                                                if (getTimeZone().indexOf('+') > -1)
                                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).format(localStorage.AppDateFormat);
                                                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                                                    ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().add(1, 'days').format(localStorage.AppDateFormat);
                                            }
                                            $('#ObligationNewOcurrenceEndDate').text(" (" + ONewEndDate + ")");
                                            $("#rdObligationNewEndOccurence").prop("checked", true);
                                        } else {
                                            listObligationNewEndDate = "Not Available";
                                            $('#ObligationNewOcurrenceEndDate').text("");
                                            $('#ObligationNewOcurrenceEndDate').text(" (" + listObligationNewEndDate + ")");
                                            $("#rdObligationNewEndOccurence").attr('disabled', true);
                                            $('#rdObligationNewEndOccurence').removeAttr('checked');
                                            $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                                            userFlagObli = false;
                                        }
                                        if (obligationentity.ObligationStatus == "Complete" || obligationentity.ObligationStatus == "Cancelled") {
                                            $("#ulObliCompletedate").css('display', '');
                                            $('#dtObligationNewCompletedDate').addClass('validelement');
                                            $('#dtObligationNewCompletedDate').addClass('validdate');
                                            if (obligationentity.ObligationMetDate != null && obligationentity.ObligationMetDate != "") {
                                                var OMetDate = "";
                                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                                    OMetDate = moment(new Date(obligationentity.ObligationMetDate)).format('MM/DD/YYYY');
                                                } else {
                                                    OMetDate = moment(new Date(obligationentity.ObligationMetDate)).utc().format(localStorage.AppDateFormat);
                                                }
                                                $('#dtObligationNewCompletedDate').val(OMetDate);
                                            } else {
                                                var CEDate = new Date();
                                                CEDate = formatDate(CEDate);
                                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                                    CEDate = moment(new Date(CEDate)).format('MM/DD/YYYY');
                                                } else {
                                                    CEDate = moment(new Date(CEDate)).utc().format(localStorage.AppDateFormat);
                                                }
                                                $('#dtObligationNewCompletedDate').val(CEDate);
                                            }
                                        } else {
                                            $("#ulObliCompletedate").css('display', 'none');
                                            $('#dtObligationNewCompletedDate').removeClass('validelement');
                                            $('#dtObligationNewCompletedDate').removeClass('validdate');
                                            $('#dtObligationNewCompletedDate').val('');
                                        }
                                        $("#dtOblOcurrMonthforYear").val(monthNames[newDate.getMonth()]);
                                        $("#dtOblOcurrDateforYear").val(newDate.getDate());
                                        $("#dtObligationNewOccurrenceDueDate").val(newDate.getDate());
                                        $('input[type="radio"][name="SelectOccurenceEndDate"][value="' + obligationentity.ObligationEndTerm + '"]').prop('checked', true);
                                        if (obligationentity.ObligationEndTerm == "Custom") {
                                            $("#txtOccurrenceCount").val(obligationentity.Ocurrences);
                                        } else {
                                            $("#txtOccurrenceCount").val("12");
                                        }
                                        var fObligationStartDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                            fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).format('MM/DD/YYYY');
                                        } else {
                                            fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).utc().format(localStorage.AppDateFormat);
                                        }
                                        var dtStartdate = fObligationStartDate;
                                        var fObligationEndDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                            fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).format('MM/DD/YYYY');
                                        } else {
                                            fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat);
                                        }
                                        var dtEnddate = fObligationEndDate;
                                        $('#ObligationOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + obligationentity.Ocurrences + " instances)")
                                        vObligationEditStatus = "";
                                        var dateNew = new Date(obligationentity.DueDate);
                                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                            this.checked = false;
                                        });
                                        var day = dateNew.getDay()
                                        var chkboxId = "ORC" + day;
                                        $("#" + chkboxId).prop('checked', true);
                                        if (obligationentity.Recurrences == "Weekly") {
                                            $("#dtObligationNewDueDate").attr("disabled", "disabled");
                                            var strRecString = obligationentity.CustomString;
                                            var value = parseInt(strRecString);
                                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                                this.checked = false;
                                            });
                                            var chkboxId = "ORC" + value;
                                            $("#" + chkboxId).prop('checked', true);
                                            $("#divOcurrenceSummary").css('display', '');
                                            $("#obligationEditOcursumary").css('display', '');
                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                                            $("#aobligationRecNoneEdit").css('display', 'none');
                                            $("#aobligationRecEdit").css('display', '');
                                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                                            $("#liObligationRecurrence").css('display', 'none');
                                        } else if (obligationentity.Recurrences == "None") {
                                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divOcurrenceSummary").css('display', '');
                                            $("#obligationEditOcursumary").css('display', '');
                                            $("#aobligationRecNoneEdit").css('display', '');
                                            $("#aobligationRecEdit").css('display', 'none');
                                            $("#liObligationRecurrence").css('display', 'none');
                                            $('#ObligationOcurrenceSummary').text("(" + "Never" + ")")
                                        } else if (obligationentity.Recurrences == "Monthly") {
                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                                            $("#ddlRepeatMonthly").css('display', '');
                                            $("#ddlRepeatMonthly").val(obligationentity.RecMonthlyString);
                                            $("#dtObligationNewDueDate").attr("disabled", "disabled");
                                            $("#divOcurrenceSummary").css('display', '');
                                            $("#obligationEditOcursumary").css('display', '');
                                            $("#lblOcurrenceMonth").css('display', '');
                                            $("#lblOcurrenceYear").css('display', 'none');
                                            $("#aobligationRecNoneEdit").css('display', 'none');
                                            $("#aobligationRecEdit").css('display', '');
                                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                                            $("#liObligationRecurrence").css('display', 'none');
                                        } else {
                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                                            $("#ddlRepeatMonthly").css('display', 'none');
                                            $("#lblOcurrenceMonth").css('display', 'none');
                                            $("#lblOcurrenceYear").css('display', '');
                                            $("#dtObligationNewDueDate").attr("disabled", "disabled");
                                            $("#divOcurrenceSummary").css('display', '');
                                            $("#obligationEditOcursumary").css('display', '');
                                            $("#aobligationRecNoneEdit").css('display', 'none');
                                            $("#aobligationRecEdit").css('display', '');
                                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                                            $("#liObligationRecurrence").css('display', 'none');
                                        }
                                        $("#lblCTitleObli").text($("#lblContractTitle").text());
                                        if (catalogs.length > 0) {
                                            vCatalogCount = "Yes";
                                            $('#txtObligationProductsCount').val("Yes");
                                            document.getElementById('obligationcatalogDetailsTable').style.display = '';
                                            document.getElementById('NoObligationCatalog').style.display = 'none';
                                            for (var i = 0; i < catalogs.length; i++) {
                                                var str = "";
                                                var strCommitment = "";
                                                var strCom = "";
                                                var url = '<input type="checkbox" id="' + catalogs[i].RowKey + '" name="MultipleObligationCatalogs" onclick="checkMultipleObligationCatalogs(this);" value="' + catalogs[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationCatalogDetail(\'' + catalogs[i].RowKey + '\')" class="linkText">' + catalogs[i].ObligationCatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationCatalogs"/>';
                                                var htmlContent = "<tr>";
                                                htmlContent += "<td><p id='ObligationCatalogID' style='display:none;'>" + catalogs[i].RowKey + "</p>";
                                                htmlContent += "<span id='ObligationCatalogTitle' style='display:none;'>" + catalogs[i].ObligationCatalogName + "</span>";
                                                htmlContent += "<span id='ObligationCatalogObligationText' style='display:none;'>" + catalogs[i].ObligationText + "</span>";
                                                htmlContent += "<span id=''ObligationCatalogUnits' style='display:none;'>" + catalogs[i].ObligationUnits + "</span>";
                                                htmlContent += "<span id=''ObligationCatalogQty' style='display:none;'>" + catalogs[i].ObligationQuantity + "</span>";
                                                htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                                                if (catalogs[i].ObligationQuantity != "" && catalogs[i].ObligationQuantity != null) {
                                                    htmlContent += "<td><span style='margin-left: 10px;float:left' id='ObligationQty" + catalogs[i].RowKey + "'>" + catalogs[i].ObligationQuantity + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationUnits + "</lable></td>";
                                                } else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';
                                                }
                                                if (catalogs[i].QuantityActual != "" && catalogs[i].QuantityActual != null && catalogs[i].QuantityActual != "null") {
                                                    htmlContent += "<td ><span style='margin-left: 10px;float:left' id='QuantityActual" + catalogs[i].RowKey + "'>" + catalogs[i].QuantityActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationUnits + "</lable></td>";
                                                } else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';
                                                }
                                                if (catalogs[i].ObligationAmount != "" && catalogs[i].ObligationAmount != null && catalogs[i].ObligationAmount != "0" && catalogs[i].ObligationAmount != 0) {
                                                    htmlContent += "<td ><span style='margin-left: 10px;float:left' id='ObligationAmount" + catalogs[i].RowKey + "'>" + catalogs[i].ObligationAmount + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationCurrency + "</lable></td>";
                                                } else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';
                                                }
                                                if (catalogs[i].AmountActual != "" && catalogs[i].AmountActual != null && catalogs[i].AmountActual != "0" && catalogs[i].AmountActual != 0) {
                                                    htmlContent += "<td ><span style='margin-left: 10px;float:left' id='AmountActual" + catalogs[i].RowKey + "'>" + catalogs[i].AmountActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationCurrency + "</lable></td>";
                                                } else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';
                                                }
                                                if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                                                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                                                        htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + catalogs[i].ObligationCatalogStatus + "</a></td>";
                                                    } else {
                                                        htmlContent += "<td style='padding:2px;><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + catalogs[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                                                    }
                                                } else
                                                    htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + catalogs[i].ObligationCatalogStatus + "</a></td>";
                                                htmlContent += "</tr>";
                                                $("#ulObligationCatalogBody").append(htmlContent);
                                            }
                                            $(".openmenuRelatedObligationCatalogs").contextMenu({
                                                menu: 'dropdownMenuRelatedObligationCatalogs',
                                                leftButton: true
                                            }, function (action, el, pos) {
                                                contextMenuObligationCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                                            });
                                            $(".openmenuObligationCatalogStatusSettings").contextMenu({
                                                menu: 'dropdownMenuObligationStatusSettings',
                                                leftButton: true
                                            }, function (action, el, pos) {
                                                contextMenuObligationCatalogStatusSettings(action, el.parent("tr"), pos);
                                            });
                                        } else {
                                            document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
                                            vCatalogCount = "No";
                                            $('#NoObligationCatalog').css('display', '');
                                            $('#txtObligationProductsCount').val("No");
                                            vExist = false;
                                        }
                                        if (vCatalogCount == "Yes") {
                                            $("#trObliFinShow").css('display', 'none');
                                            document.getElementById("cbObligationCatalogProductsSelect").checked = true;
                                            document.getElementById("cbObligationCatalogProductsSelect").disabled = true;
                                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                                return (n.RowKey == "10" && n.Status == "ON");
                                            });
                                            if (vAccFeat.length > 0) {
                                                $("#dvObligationCatalogProducts").css('display', '');
                                            }
                                        }
                                        var fDueDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                            fDueDate = moment(new Date(obligationentity.DueDate)).format('MM/DD/YYYY');
                                        } else {
                                            fDueDate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat);
                                        }
                                        var oblnewdate1 = fDueDate;
                                        var fObligationEndDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                            fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).format('MM/DD/YYYY');
                                        } else {
                                            fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat);
                                        }
                                        var oblnewdate2 = fObligationEndDate;
                                        $('#orepupdatesingle').text("");
                                        $('#orepupdaterecurrence').text("");
                                        $('#ornepupdatesingle').text("");
                                        $('#ornepupdaterecurrence').text("");
                                        $('#orepupdatesingle').text("(" + oblnewdate1 + ")");
                                        $('#orepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");
                                        $('#ornepupdatesingle').text("(" + oblnewdate1 + ")");
                                        $('#ornepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");
                                        $(".validelement").each(function (index, element) {
                                            $(element).removeClass("error");
                                            $("#errormsg_" + element.id).remove();
                                        });
                                        $("#obligationnewheading").text("Edit Obligation");
                                        $("#addEditObligationNew").dialog("option", "title", "");
                                        $("#addEditObligationNew").dialog("open");
                                    }
                                });
                            } else {
                                validateproducts = true;
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Complete',
                                    type: 'POST',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey,
                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                        username: localStorage.UserName
                                    },
                                    cache: false,
                                    success: function (person) {
                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                        GetObligationCatalogs();
                                    },
                                    complete: function () {
                                        $("#inprocessObligation").css('visibility', 'none');
                                    }
                                });
                            }
                        } else {
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Complete',
                                type: 'POST',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                    username: localStorage.UserName
                                },
                                cache: false,
                                success: function (person) {
                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                    GetObligationCatalogs();
                                },
                                complete: function () {
                                    $("#inprocessObligation").css('visibility', 'none');
                                }
                            });
                        }
                        $("#obligationNewActions").css('display', 'none');
                    },
                    error: function (catalogs) {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Complete',
                            type: 'POST',
                            dataType: 'json',
                            headers: {
                                'eContracts-ApiKey': localStorage.APIKey,
                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                username: localStorage.UserName
                            },
                            cache: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                GetObligationCatalogs();
                            },
                            complete: function () {
                                $("#inprocessObligation").css('visibility', 'none');
                            }
                        });
                    }
                });
                break;
            }
    }
}

function contextMenuObligationCatalogStatusSettings(action, el, pos) {
    switch (action) {
        case "Upcoming":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Upcoming',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
                break;
            }
        case "Delayed":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Delayed',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
                break;
            }
        case "Partial":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Partial',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
                break;
            }
        case "Cancelled":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Cancelled',
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
                break;
            }
        case "Complete":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#ObligationCatalogID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {
                        if ($('#hdnProductUpdates').text() == "EDIT") {
                            $('#hdnProductUpdates').text('');
                            $('#hdnProductUpdates').text('EDITCATALOG');
                        }
                        cataloentity.ObligationCatalogStatus = "Complete";
                        $('#obliCatalogQtyEditsummary').text('');
                        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
                        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
                        $("#txtObligationCatalogQtyNewEdit").val('');
                        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                        $("#txtObligationProductAmountNewActualEdit").val('');
                        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
                        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                        $("#lblObligationCatalogCTitleEdit").text($("#lblContractTitle").text());
                        $("#txtObligationCatalogIDedit").val(cataloentity.RowKey);
                        $("#txtObligationCatalogNameedit").val(cataloentity.ObligationCatalogName);
                        if (cataloentity.ObligationUnits != "" && cataloentity.ObligationUnits != "--Select--" && cataloentity.ObligationUnits != null) {
                            $("#ddlObligationCatalogUnitsEdit").val(cataloentity.ObligationUnits);
                            $("#ddlObligationCatalogUnitsNewEdit").val(cataloentity.ObligationUnits);
                        } else {
                            $("#ddlObligationCatalogUnitsEdit").val("0");
                            $("#ddlObligationCatalogUnitsNewEdit").val("0");
                        }
                        if (cataloentity.ObligationCatalogStatus != "" && cataloentity.ObligationCatalogStatus != null) {
                            if (cataloentity.ObligationCatalogStatus == "Complete") {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);
                                if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {
                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
                                } else {
                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                                }
                                if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {
                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')
                                } else {
                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                                }
                            } else {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val("");
                                $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                                $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                            }
                        } else {
                            $("#ddlObligationCatalogStatusEdit").val(0);
                            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                        }
                        if (cataloentity.Description != "" && cataloentity.Description != null) {
                            $("#txtObligationCatalogDescEdit").val(cataloentity.Description);
                        } else {
                            $("#txtObligationCatalogDescEdit").val("");
                        }
                        if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {
                            $("#txtObligationCatalogQtyEdit").val(cataloentity.ObligationQuantity);
                        } else {
                            $("#txtObligationCatalogQtyEdit").val("");
                        }
                        if (cataloentity.ObligationQtyType != "" && cataloentity.ObligationQtyType != null) {
                            $("#ddlObligationCatalogUnitTypeEdit").val(cataloentity.ObligationQtyType);
                        } else {
                            $("#ddlObligationCatalogUnitTypeEdit").val(0);
                        }
                        if (cataloentity.QuantityActual != "" && cataloentity.QuantityActual != null) {
                            $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);
                            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
                            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');
                            var string1 = "";
                            string1 = "Quantity Actual vs Expected, ";
                            if (parseInt(cataloentity.QuantityActual) >= parseInt(cataloentity.ObligationQuantity)) {
                                string1 += encodeURIComponent("+" + parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity));
                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_dec');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_act');
                            } else {
                                string1 += parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity);
                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_act');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_dec');
                            }
                            $("#obliCatalogQtyEditsummary").text(string1);
                        } else {
                            $("#txtObligationCatalogQtyNewEdit").val("");
                            $("#obliCatalogQtyEditsummary").text("");
                        }
                        var text = cataloentity.ObligationCurrency;
                        if (text != "") {
                            $("#CurrencyEditExpected").text(text);
                            $("#CurrencyEditActual").text(text);
                        } else if ($('#hdnContractCurrency').text() != "") {
                            $("#CurrencyEditExpected").text($('#hdnContractCurrency').text());
                            $("#CurrencyEditActual").text($('#hdnContractCurrency').text());
                        } else {
                            $("#CurrencyEditExpected").text($('#hdnBaseCurrency').val());
                            $("#CurrencyEditActual").text($('#hdnBaseCurrency').val());
                        }
                        if (cataloentity.ObligationAmountType != "" && cataloentity.ObligationAmountType != null) {
                            $("#ddlObligationProductAmountTypeNewEdit").val(cataloentity.ObligationAmountType);
                        } else {
                            $("#ddlObligationProductAmountTypeNewEdit").val(0);
                        }
                        if (cataloentity.ObligationAmount != "" && cataloentity.ObligationAmount != null && cataloentity.ObligationAmount != "0" && cataloentity.ObligationAmount != 0) {
                            $('#txtObligationProductAmountNewEdit').autoNumeric('set', cataloentity.ObligationAmount);
                        } else {
                            $("#txtObligationProductAmountNewEdit").val("");
                        }
                        if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {
                            $('#txtObligationProductAmountNewActualEdit').autoNumeric('set', cataloentity.AmountActual);
                            var string1 = "";
                            string1 = "Amount Actual vs Expected, ";
                            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
                            var currency1 = cataloentity.ObligationAmount;
                            var currency2 = cataloentity.AmountActual;
                            string1 = "Amount Actual vs Expected, ";
                            $('#catalogAmountsumaryTitleEdit').text(string1);
                            if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {
                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_act')
                            } else {
                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_dec')
                            }
                        } else {
                            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
                            $("#txtObligationProductAmountNewActualEdit").val("");
                            $('#catalogAmountsumaryValueEdit').text('');
                            $('#catalogAmountsumaryTitleEdit').text('');
                        }
                        if (cataloentity.ObligationCatalogStatus == "Complete") {
                            if ($('#txtObligationCatalogQtyEdit').val() != "") {
                                $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
                                $('#txtObligationCatalogQtyNewEdit').addClass('validelement');
                                $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
                                $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
                            }
                            if ($('#txtObligationProductAmountNewEdit').val() != "") {
                                $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
                                $('#txtObligationProductAmountNewActualEdit').addClass('validelement');
                                $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
                                $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')
                            }
                        }
                        if (cataloentity.ObligationCatalogStatus == "Complete" || cataloentity.ObligationCatalogStatus == "Cancelled") {
                            if (cataloentity.CompletedDate !== null && cataloentity.CompletedDate !== "" && cataloentity.CompletedDate !== "null") {
                                var CDate = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    CDate = moment(new Date(cataloentity.CompletedDate)).format('MM/DD/YYYY');
                                } else {
                                    CDate = moment(new Date(cataloentity.CompletedDate)).format(localStorage.AppDateFormat);
                                }
                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);
                            } else {
                                var CDate = new Date();
                                CDate = formatDate(CDate);
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
                                } else {
                                    CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat);
                                }
                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);
                            }
                        } else {
                            $("#productcompleteddateEdit").css('display', 'none');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validelement');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validdate');
                            $('#dtObligationProductCompletedDateEdit').val("");
                        }
                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });
                $("#obligationcatalogseditPopup").dialog("option", "title", "");
                $("#obligationcatalogseditPopup").dialog("open");
                break;
            }
    }
}

function updateObligationStatusRecurrenceNew(status, obligationId, obligationText, obligationStatus) {
    if (status == "SINGLE") {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationId + '&obligationstatus=' + obligationStatus,
            type: 'POST',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                username: localStorage.UserName
            },
            cache: false,
            success: function (person) {
                $('.ui-button-green-text').parent().removeAttr('disabled');
                GetObligationCatalogs();
            },
            complete: function () {
                $("#inprocessObligation").css('visibility', 'none');
            }
        });
    } else {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyText?strObligationText=' + obligationText + '&obligationstatus=' + obligationStatus,
            type: 'POST',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                username: localStorage.UserName
            },
            cache: false,
            success: function (person) {
                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#obligationRecurrenceStatusEditPopup").dialog("close");
                GetObligationCatalogs();
            },
            complete: function () {
                $("#inprocessObligation").css('visibility', 'none');
            }
        });
    }
}

function checkObligationsstatusupdateNew(obj) {
    var text = "MenuObligationStatus" + obj.text;
    $('#dropdownMenuObligationStatusSettings').find('li').each(function () {
        var id = $(this).attr('id');
        if (id == text) {
            $(this).css('display', 'none');
        } else {
            $(this).css('display', '');
        }
    });
}

var vObligationEditStatus = "";
$('#aobligationRecNoneEdit').click(function () {
    vObligationEditStatus = "CHANGERECURRENCE";
    $("#liObligationRecurrence").css('display', '');
    $("#divOcurrenceSummary").css('display', 'none');
    document.getElementById("ddlObligationOccurencess").disabled = false;
    document.getElementById("dtObligationNewDueDate").disabled = false;
    $("#aobligationRecNoneEdit").css('display', 'none');
    $("#aobligationRecEdit").css('display', 'none');
});

$('#aobligationRecEdit').click(function () {
    vObligationEditStatus = "EDITRECURRENCE";
    if ($("#ddlObligationOccurencess").val() == "None") {
        $("#liObligationRecurrence").css('display', '');
        $("#divOcurrenceSummary").css('display', 'none');
        document.getElementById("ddlObligationOccurencess").disabled = false;
    } else if ($("#ddlObligationOccurencess").val() == "Weekly") {
        $("#divObligationOcurrenceWeekly").css('display', '');
        $("#divObligationOcurrenceMonthly").css('display', 'none');
        $("#ddlRepeatMonthly").css('display', 'none');
        $("#lblOcurrenceMonth").css('display', 'none');
        $("#lblOcurrenceYear").css('display', 'none');
        $("#divOcurrenceSummary").css('display', '');
        $("#obligationEditOcursumary").css('display', 'none');
        document.getElementById("ddlObligationOccurencess").disabled = false;
        document.getElementById("dtObligationNewDueDate").disabled = false;
        $("#dvobligationOcurrenceEnd").css('display', '');
        $("#liObligationRecurrence").css('display', '');
    } else if ($("#ddlObligationOccurencess").val() == "Monthly") {
        $("#divObligationOcurrenceWeekly").css('display', 'none');
        $("#divObligationOcurrenceMonthly").css('display', '');
        $("#ddlRepeatMonthly").css('display', '');
        $("#lblOcurrenceMonth").css('display', '');
        $("#lblOcurrenceYear").css('display', 'none');
        $("#divOcurrenceSummary").css('display', '');
        $("#obligationEditOcursumary").css('display', 'none');
        document.getElementById("ddlObligationOccurencess").disabled = false;
        document.getElementById("dtObligationNewDueDate").disabled = false;
        $("#dvobligationOcurrenceEnd").css('display', '');
        $("#liObligationRecurrence").css('display', '');
    } else {
        $("#divObligationOcurrenceWeekly").css('display', 'none');
        $("#divObligationOcurrenceMonthly").css('display', '');
        $("#ddlRepeatMonthly").css('display', 'none');
        $("#lblOcurrenceMonth").css('display', 'none');
        $("#lblOcurrenceYear").css('display', '');
        $("#divOcurrenceSummary").css('display', '');
        $("#obligationEditOcursumary").css('display', 'none');
        document.getElementById("ddlObligationOccurencess").disabled = false;
        document.getElementById("dtObligationNewDueDate").disabled = false;
        $("#dvobligationOcurrenceEnd").css('display', '');
        $("#liObligationRecurrence").css('display', '');
    }
    $("#aobligationRecNoneEdit").css('display', 'none');
    $("#aobligationRecEdit").css('display', 'none');
    ObligationEditBackupData();
});

function clearobligationproducts() {
    if ($('#txtObligationCatalogName').val() == "" || $('#txtObligationCatalogName').val() == null) {
        $('#txtSearchBoxProduct').val('');
        $('input:radio[name=ExtProducts]').attr('checked', false);
    } else {
        $('#txtSearchBoxProduct').val('');
    }
}

function clearObligationproductsmul() {
    $('#txtSearchBoxProductMul').val('');
    $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
}

function clearobligationcatalogs() {
    $('#ddlObligationCatalogStatus').val('Upcoming');
    $('#txtObligationCatalogName').val('');
    $('#txtObligationCatalogDesc').val('');
    $('#ddlObligationCatalogUnits').val('');
    $('#txtObligationCatalogQty').val('');
    $('#ddlObligationCatalogUnitType').val('0');
    $('#txtObligationCatalogQtyNew').val('');
    $('#ddlObligationCatalogUnitsNew').val('0');
    $('#trObligationActualQty').css('display', '');
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $("#txtObligationProductAmountNewActual").prop('disabled', true);
    $("#txtObligationCatalogQtyNew").prop('disabled', true);
    $("#txtObligationCatalogQtyNew").val('');
    $("#txtObligationProductAmountNewActual").val('');
    $('#txtObligationCatalogQtyNew').removeClass('validelement');
    $('#txtObligationProductAmountNewActual').removeClass('validelement');
    $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
    $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')
    $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
    $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')
    $('#obliCatalogQtysummary').text('');
    $('#catalogAmountsumaryTitle').text('');
    $('#catalogAmountsumaryValue').text('');
    $('#txtObligationProductAmountNew').val('');
    $('#txtObligationProductAmountNewActual').val('');
    $('#ddlObligationFinancialsAmountTypeActual').val('0');
    $('#trObligationAmountActual').css('display', '');
}

function clearobligationfinancials() {
    $('#ddlObligationFinancialsStatus').val('0');
    $('#txtObligationFinancialsName').val('');
    $('#txtObligationFinancialsDesc').val('');
    $('#txtObligationFinancialsAmount').val('');
    $('#ddlObligationFinancialsAmountType').val('0');
}

$('#addObligationFinancialsQuickpopup').click(function () {
    clearobligationfinancialsQuick();
});

$('#addObligationCatalogQuickpopup').click(function () {
    clearobligationcatalogsQuick();
});

function clearobligationcatalogsQuick() {
    $('#ddlObligationCatalogInlineUnitsType').val('0');
    $('#txtObligationCatalogTitleInline').val('');
    $('#txtObligationCatalogQtyInline').val('');
    $('#ddlObligationCatalogUnitsInline').val('0');
    $('#ddlObligationCatalogStatusInline').val('0');
}

function clearobligationfinancialsQuick() {
    $('#ddlObligationFinancialsInlineAmountType').val('0');
    $('#txtObligationFinancialsTitleInline').val('');
    $('#txtObligationFinancialAmountInline').val('');
    $('#ddlObligationFinancialsStatusInline').val('0');
}

function clearObligationFormDataNew() {
    vObligationFlaging = "";
    $('#ddlObligationStatus').val('Upcoming');
    $('#txtObligationProductsCount').val('');
    $('#dtObligationNewDueDate').val('');
    $('#txtObligationFinancialsCount').val('');
    $('#txtObligationNewID').val('');
    $('#txtObligationNewText').val('');
    $('#ddlObligationTypeNew').val('0');
    $('#ObligationNewTitle').val('');
    $('#txtObligationNewTitle').val('');
    $('#txtObligationNewDesc').val('');
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "10" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $('#trObliCatShow').css('display', '');
    }
    $('#trObliFinShow').css('display', 'none')
    $("#txtReminder1ObligationNew").val("");
    $("#txtReminder2ObligationNew").val("");
    $("#txtReminder3ObligationNew").val("");
    $("#ddlReminder1ObligationNew").val("before");
    $("#ddlReminder2ObligationNew").val("before");
    $("#ddlReminder3ObligationNew").val("before");
    $('#ddlObligationOccurencess').val('None');
    $('input:checkbox[name=ObligationFinancialCB]').attr('checked', false);
    $('input:checkbox[name=ObligationCatalogCB]').attr('checked', false);
    $('#ulObligationCatalogBody').empty();
    $('#ulObligationFinancialsBody').empty();
    $('#dvObligationCatalogProducts').css('display', 'none');
    $('#dvObligationCatalogFinancials').css('display', 'none');
    document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
    document.getElementById("cbObligationCatalogFinancialsSelect").disabled = false;
    $('#imgObliga').attr("title", "Expand");
    $('#imgObliga').attr("src", "../Content/Images/e-open.png");
    $('#imgObliga1').attr("title", "Expand");
    $('#imgObliga1').attr("src", "../Content/Images/e-open.png");
}

var multipleObligationNewChecks = "";

function checkMultipleObligationsNew(object) {
    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#obligationNewActions").css('display', '');
        multipleObligationNewChecks = multipleObligationNewChecks + ';' + CatalogID;
    } else {
        multipleObligationNewChecks = multipleObligationNewChecks.replace(';' + CatalogID, '');
    }
    if (multipleObligationNewChecks.trim() == "") {
        $("#obligationNewActions").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    } catch (ex) { }
}

function contextMenuObligationNewMul(action, el, pos) {
    switch (action) {
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?strObligationText=' + multipleObligationNewChecks,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                cache: false,
                                success: function (data) {
                                    multipleObligationNewChecks = "";
                                    GetObligationCatalogs();
                                    $("#obligationNewActions").css('display', 'none');
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "update":
            {
                $("input:radio[value='Upcoming']").attr('checked', true);
                showObligationStatusMultiple();
                break;
            }
    }
}

$("#txtObligationCatalogQty").focusout(function () {
    if ($("#txtObligationCatalogQty").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatus").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationCatalogQtyNew").prop('disabled', false);
            $('#txtObligationCatalogQtyNew').addClass('validelement');
            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_enable')
        } else {
            $("#txtObligationCatalogQtyNew").prop('disabled', true);
            $('#txtObligationCatalogQtyNew').removeClass('validelement');
            $("#txtObligationCatalogQtyNew").val('');
            $('#txtObligationProductAmountNewActual').removeClass('validelement');
            $("#txtObligationProductAmountNewActual").val('');
            $("#txtObligationCatalogQtyNew").prop('disabled', true);
            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')
        }
    } else {
        $("#txtObligationCatalogQtyNew").prop('disabled', true);
        $('#txtObligationCatalogQtyNew').removeClass('validelement');
        $("#txtObligationCatalogQtyNew").val('');
        $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')
    }
});

$("#txtObligationProductAmountNew").focusout(function () {
    if ($("#txtObligationProductAmountNew").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatus").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationProductAmountNewActual").prop('disabled', false);
            $('#txtObligationProductAmountNewActual').addClass('validelement');
            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_enable')
        } else {
            $("#txtObligationCatalogQtyNew").prop('disabled', true);
            $('#txtObligationCatalogQtyNew').removeClass('validelement');
            $("#txtObligationCatalogQtyNew").val('');
            $('#txtObligationProductAmountNewActual').removeClass('validelement');
            $("#txtObligationProductAmountNewActual").val('');
            $("#txtObligationProductAmountNewActual").prop('disabled', true);
            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')
        }
    } else {
        $('#txtObligationProductAmountNewActual').removeClass('validelement');
        $("#txtObligationProductAmountNewActual").val('');
        $("#txtObligationProductAmountNewActual").prop('disabled', true);
        $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')
    }
});

$("#ddlObligationCatalogStatus").change(function (obj) {
    var catlogStatus = $("#ddlObligationCatalogStatus").val();
    if (catlogStatus == "Complete") {
        var CDate = new Date();
        CDate = formatDate(CDate);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
        } else {
            CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat);
        }
        $("#productcompleteddate").css('display', '');
        $('#dtObligationProductCompletedDate').addClass('validelement');
        $('#dtObligationProductCompletedDate').addClass('validdate');
        $('#dtObligationProductCompletedDate').val(CDate);
        if ($('#txtObligationCatalogQty').val() != "") {
            $("#txtObligationCatalogQtyNew").prop('disabled', false);
            $('#txtObligationCatalogQtyNew').addClass('validelement');
            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_enable')
        }
        if ($('#txtObligationProductAmountNew').val() != "") {
            $("#txtObligationProductAmountNewActual").prop('disabled', false);
            $('#txtObligationProductAmountNewActual').addClass('validelement');
            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_enable')
        }
    } else if (catlogStatus == "Cancelled") {
        var CDate = new Date();
        CDate = formatDate(CDate);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
        } else {
            CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat);
        }
        $("#productcompleteddate").css('display', '');
        $('#dtObligationProductCompletedDate').addClass('validelement');
        $('#dtObligationProductCompletedDate').addClass('validdate');
        $('#dtObligationProductCompletedDate').val(CDate);
        $("#txtObligationProductAmountNewActual").prop('disabled', true);
        $("#txtObligationCatalogQtyNew").prop('disabled', true);
        $("#txtObligationCatalogQtyNew").val('');
        $("#txtObligationProductAmountNewActual").val('');
        $('#txtObligationCatalogQtyNew').removeClass('validelement');
        $('#txtObligationProductAmountNewActual').removeClass('validelement');
        $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')
        $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')
    } else {
        $("#productcompleteddate").css('display', 'none');
        $('#dtObligationProductCompletedDate').removeClass('validelement');
        $('#dtObligationProductCompletedDate').removeClass('validdate');
        $('#dtObligationProductCompletedDate').val("");
        $("#txtObligationProductAmountNewActual").prop('disabled', true);
        $("#txtObligationCatalogQtyNew").prop('disabled', true);
        $("#txtObligationCatalogQtyNew").val('');
        $("#txtObligationProductAmountNewActual").val('');
        $('#txtObligationCatalogQtyNew').removeClass('validelement');
        $('#txtObligationProductAmountNewActual').removeClass('validelement');
        $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')
        $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')
        $('#obliCatalogQtysummary').text('');
        $('#catalogAmountsumaryTitle').text('');
        $('#catalogAmountsumaryValue').text('');
    }
});

$("#ddlObligationStatus").change(function (obj) {
    var obligationStatus = $("#ddlObligationStatus").val();
    if (obligationStatus == "Complete" || obligationStatus == "Cancelled") {
        var CDate = new Date();
        CDate = formatDate(CDate);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
        } else {
            CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat);
        }
        $("#ulObliCompletedate").css('display', '');
        $('#dtObligationNewCompletedDate').addClass('validelement');
        $('#dtObligationNewCompletedDate').addClass('validdate');
        $('#dtObligationNewCompletedDate').val(CDate);
    } else {
        $("#ulObliCompletedate").css('display', 'none');
        $('#dtObligationNewCompletedDate').removeClass('validelement');
        $('#dtObligationNewCompletedDate').removeClass('validdate');
        $('#dtObligationNewCompletedDate').val("");
    }
});

$("#ddlObligationCatalogUnits").change(function (obj) {
    if ($('#ddlObligationCatalogUnits').val() != "0") {
        $('#ddlObligationCatalogUnitsNew').val($('#ddlObligationCatalogUnits').val())
    } else {
        $('#ddlObligationCatalogUnitsNew').val("0");
    }
});

$("#ddlObligationCatalogUnitsEdit").change(function (obj) {
    if ($('#ddlObligationCatalogUnitsEdit').val() != "0") {
        $('#ddlObligationCatalogUnitsNewEdit').val($('#ddlObligationCatalogUnitsEdit').val())
    } else {
        $('#ddlObligationCatalogUnitsNewEdit').val("0");
    }
});

$("#txtObligationCatalogQtyEdit").focusout(function () {
    if ($("#txtObligationCatalogQtyEdit").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatusEdit").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');
            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
        } else {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
            $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
            $("#txtObligationCatalogQtyNewEdit").val('');
            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
            $("#txtObligationProductAmountNewActualEdit").val('');
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
        }
    } else {
        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
        $("#txtObligationCatalogQtyNewEdit").val('');
        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
    }
});

$("#txtObligationProductAmountNewEdit").focusout(function () {
    if ($("#txtObligationProductAmountNewEdit").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatusEdit").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');
            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')
        } else {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
            $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
            $("#txtObligationCatalogQtyNewEdit").val('');
            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
            $("#txtObligationProductAmountNewActualEdit").val('');
            $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
        }
    } else {
        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
        $("#txtObligationProductAmountNewActualEdit").val('');
        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
    }
});

$("#txtObligationCatalogQtyNew").focusout(function () {
    if ($("#txtObligationCatalogQtyNew").val() != "") {
        var string1 = "";
        string1 = "Quantity Actual vs Expected, ";
        if (parseInt($("#txtObligationCatalogQtyNew").val()) >= parseInt($("#txtObligationCatalogQty").val())) {
            string1 += "+" + parseInt($("#txtObligationCatalogQtyNew").val()) - parseInt($("#txtObligationCatalogQty").val());
            $('#obliCatalogQtysummary').removeClass('oblig_cat_sum_dec')
            $('#obliCatalogQtysummary').addClass('oblig_cat_sum_act')
        } else {
            string1 += parseInt($("#txtObligationCatalogQtyNew").val()) - parseInt($("#txtObligationCatalogQty").val());
            $('#obliCatalogQtysummary').removeClass('oblig_cat_sum_act')
            $('#obliCatalogQtysummary').addClass('oblig_cat_sum_dec')
        }
        $("#obliCatalogQtysummary").text(string1)
    } else {
        $("#obliCatalogQtysummary").text("");
    }
});

$("#txtObligationProductAmountNewActual").focusout(function () {
    if ($("#txtObligationProductAmountNewActual").val() != "") {
        var string1 = "";
        var currency1 = $("#txtObligationProductAmountNew").val();
        var currency2 = $("#txtObligationProductAmountNewActual").val();
        currency1 = currency1.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');
        currency2 = currency2.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');
        string1 = "Amount Actual vs Expected, ";
        $('#catalogAmountsumaryTitle').text(string1);
        if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {
            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
            $('#catalogAmountsumaryValue').autoNumeric('set', diff);
            $('#catalogAmountsumaryValue').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryValue').addClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryTitle').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitle').addClass('oblig_cat_sum_act')
        } else {
            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
            $('#catalogAmountsumaryValue').autoNumeric('set', diff);
            $('#catalogAmountsumaryValue').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryValue').addClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitle').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryTitle').addClass('oblig_cat_sum_dec')
        }
    } else {
        $('#catalogAmountsumaryValue').text('');
        $('#catalogAmountsumaryTitle').text('');
    }
});

$("#txtObligationCatalogQtyNewEdit").focusout(function () {
    if ($("#txtObligationCatalogQtyNewEdit").val() != "") {
        var string1 = "";
        string1 = "Quantity Actual vs Expected, ";
        if (parseInt($("#txtObligationCatalogQtyNewEdit").val()) >= parseInt($("#txtObligationCatalogQtyEdit").val())) {
            string1 += "+" + parseInt($("#txtObligationCatalogQtyNewEdit").val()) - parseInt($("#txtObligationCatalogQtyEdit").val());
            $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_dec')
            $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_act')
        } else {
            string1 += parseInt($("#txtObligationCatalogQtyNewEdit").val()) - parseInt($("#txtObligationCatalogQtyEdit").val());
            $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_act')
            $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_dec')
        }
        $("#obliCatalogQtyEditsummary").text(string1)
    } else {
        $("#obliCatalogQtyEditsummary").text("");
    }
});

$("#txtObligationProductAmountNewActualEdit").focusout(function () {
    if ($("#txtObligationProductAmountNewActualEdit").val() != "") {
        var string1 = "";
        var currency1 = $("#txtObligationProductAmountNewEdit").val();
        var currency2 = $("#txtObligationProductAmountNewActualEdit").val();
        currency1 = currency1.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');
        currency2 = currency2.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');
        string1 = "Amount Actual vs Expected, ";
        $('#catalogAmountsumaryTitleEdit').text(string1);
        if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {
            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
            $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
            $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_act')
        } else {
            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
            $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
            $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_dec')
        }
    } else {
        $('#catalogAmountsumaryValueEdit').text('');
        $('#catalogAmountsumaryTitleEdit').text('');
    }
});

$("#ddlObligationCatalogStatusEdit").change(function (obj) {
    var catlogStatus = $("#ddlObligationCatalogStatusEdit").val();
    if (catlogStatus == "Complete") {
        var CDate = new Date();
        CDate = formatDate(CDate);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
        } else {
            CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat);
        }
        $("#productcompleteddateEdit").css('display', '');
        $('#dtObligationProductCompletedDateEdit').addClass('validelement');
        $('#dtObligationProductCompletedDateEdit').addClass('validdate');
        $('#dtObligationProductCompletedDateEdit').val(CDate);
        if ($('#txtObligationCatalogQtyEdit').val() != "") {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');
            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
        }
        if ($('#txtObligationProductAmountNewEdit').val() != "") {
            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');
            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')
        }
    } else if (catlogStatus == "Cancelled") {
        var CDate = new Date();
        CDate = formatDate(CDate);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
        } else {
            CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat);
        }
        $("#productcompleteddateEdit").css('display', '');
        $('#dtObligationProductCompletedDateEdit').addClass('validelement');
        $('#dtObligationProductCompletedDateEdit').addClass('validdate');
        $('#dtObligationProductCompletedDateEdit').val(CDate);
        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
        $("#txtObligationCatalogQtyNewEdit").val('');
        $("#txtObligationProductAmountNewActualEdit").val('');
        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable');
        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable');
        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable');
        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable');
    } else {
        $("#productcompleteddateEdit").css('display', 'none');
        $('#dtObligationProductCompletedDateEdit').removeClass('validelement');
        $('#dtObligationProductCompletedDateEdit').removeClass('validdate');
        $('#dtObligationProductCompletedDateEdit').val("");
        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
        $("#txtObligationCatalogQtyNewEdit").val('');
        $("#txtObligationProductAmountNewActualEdit").val('');
        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable');
        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable');
        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable');
        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable');
        $("#obliCatalogQtyEditsummary").text("");
        $('#catalogAmountsumaryTitleEdit').text('');
        $('#catalogAmountsumaryValueEdit').text('');
    }
});

$('#cbObligationCatalogProductsSelect').click(function () {
    if ($("#cbObligationCatalogProductsSelect").is(':checked'))
        $("#trObliFinShow").css('display', 'none');
    else
        $("#trObliFinShow").css('display', 'none');
});

$('#cbObligationCatalogFinancialsSelect').click(function () {
    if ($("#cbObligationCatalogFinancialsSelect").is(':checked'))
        $("#trObliCatShow").css('display', 'none');
    else
        $("#trObliCatShow").css('display', '');
});

function enableObligationSwitch() {
    $("#AlertObli").val('Yes').change();
    if (IsPipeline) {
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn OFF reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='disableObligationSwitch()'>Disable</a></span>");
    }
}

function disableObligationSwitch() {
    $("#AlertObli").val('No').change();
    if (IsPipeline) {
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
    }
}

$("#AlertObli").change(function () {
    if (IsPipeline) {
        if ($(this).val() == "Yes") {
            $("#reminderEnableObligation").empty();
            $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn OFF reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='disableObligationSwitch()'>Disable</a></span>");
        } else if ($(this).val() == "No") {
            $("#reminderEnableObligation").empty();
            $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
        }
    }
});

function BindObligationTypes() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligationtypes',
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (documenttypes) {
            $(documenttypes).each(function (i, item) {
                $("#ddlObligationType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlObligationTypeNew").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
            });
        }
    });
}

$('#btnAddObligation').click(function () {
    $("#txtObligationID").val("");
    $("#txtObligationTitle").val("");
    $('#ddlObligationType').val("0");
    $("#txtObligationDesc").val("");
    $("#dtDueDate").val("");
    $("#lblCTitleObli").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlObligationOwner", $("#licontractmanagers").text());
    $('#obligationInline').slideToggle();
    $("#addEditObligation").dialog("option", "title", "New Obligation");
    $("#addEditObligation").dialog("open");
});

function contextMenuObligation(action, el, pos) {
    switch (action) {
        case "view":
            {
                var obligationID = $(el).find("#ObligationID").text();
                ViewObligationDetail(obligationID);
                break;
            }
        case "delete":
            {
                var termTitle = $(el).find("#ObligationTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + termTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var obligationID = $(el).find("#ObligationID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                "Content-Type": "application/json",
                                cache: false,
                                success: function (data) {
                                    BindObligations();
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "edit":
            {
                $("#inprocessObligation").css("visibility", "hidden");
                var obligationID = $(el).find("#ObligationID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (obligationentity) {
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            duedate = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY');
                        } else {
                            duedate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat);
                        }
                        $("#txtObligationID").val(obligationentity.RowKey);
                        $("#txtObligationTitle").val(obligationentity.ObligationTitle);
                        $("#ddlObligationType option").filter(function (index) {
                            return $(this).text() === obligationentity.ObligationType;
                        }).prop('selected', true);
                        $("#txtObligationDesc").val(obligationentity.Description);
                        GetValuesAndAutoPopulate("ddlObligationOwner", obligationentity.ObligationOwner);
                        $("#dtDueDate").val(duedate);
                        $('input[type="radio"][name="ObligationMet"][value="' + obligationentity.ObligationMet + '"]').prop('checked', true);
                        if (obligationentity.AlertsEnabled == "Yes") {
                            $("#AlertObli").val('Yes').change();
                            $("#reminderEnableObligation").empty();
                            $("#reminderEnableObligation").append("Reminders");
                        } else {
                            $("#AlertObli").val('No').change();
                            $("#reminderEnableObligation").empty();
                            $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notifications, click <a href='javascript:void(0);' id='enableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
                        }
                    }
                });
                $("#lblCTitleObli").text($("#lblContractTitle").text());
                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });
                $("#PerformedPartySelf").css("display", "inline");
                $("#PerformedPartyCounterparty").css("display", "inline");
                $("#addEditObligation").dialog("option", "title", "Edit Obligation");
                $("#addEditObligation").dialog("open");
                break;
            }
    }
}

function ViewObligationDetail(obligationID) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (obligationentity) {
            var vOblDueDate = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                vOblDueDate = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY');
            } else {
                vOblDueDate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat);
            }
            var vMetadata = '<ul id="obligationTitle" class="pOp_Cont Obligation">';
            vMetadata += '<li><p>Obligation Title</p><span class="PreserveSpace">' + obligationentity.ObligationTitle + '</span></li>';
            vMetadata += '<li><p>Obligation Type</p><span>' + obligationentity.ObligationType + '</span></li>';
            vMetadata += '<li><p>Description</p><span style="word-break: break-all;">';
            if (obligationentity.Description != '') {
                vMetadata += obligationentity.Description;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li id="obligationOwners"><p>Obligation Owner</p><span>';
            if (obligationentity.ObligationOwner != '') {
                vMetadata += obligationentity.ObligationOwner;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Due Date</p><span>';
            if (vOblDueDate != '') {
                vMetadata += vOblDueDate;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Obligation Met</p><span>';
            if (obligationentity.ObligationMet != '') {
                vMetadata += obligationentity.ObligationMet;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Obligation Met By</p><span>';
            if (obligationentity.ObligationMetBy != '') {
                vMetadata += obligationentity.ObligationMetBy;
            } else {
                vMetadata += "-";
            }
            vMetadata += '</span></li>';
            vMetadata += '<li id="contractID" style="display:none;"><p>ContractID</p><span>' + obligationentity.ContractID + '</span></li>';
            vMetadata += '<li id="obligationID" style="display:none;"><p>ObligationID</p><span>' + obligationentity.RowKey + '</span></li>';
            vMetadata += '<li id="ObligationTEXT" style="display:none;"><p>ObligationTEXT</p><span>' + obligationentity.ObligationText + '</span></li>';
            vMetadata += '</ul>';
            var permissionsAll = contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees +
                ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager;
            var permissions = $.unique($(permissionsAll.split(';')).map(function (i, item) {
                return item.trim()
            }).filter(function (i, item) {
                return item != "";
            }));
            var ogOwners = [];
            if (obligationentity.ObligationOwner != "") {
                if (obligationentity.ObligationOwner.indexOf('{') > -1) {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/ownersfromgroup?contractid=' + obligationentity.ContractID + '&milestoneonwers=' + obligationentity.ObligationOwner,
                        type: 'GET',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey
                        },
                        cache: false,
                        async: false,
                        success: function (owners) {
                            if (owners != null || owners != "") {
                                for (var key in owners) {
                                    if (owners.hasOwnProperty(key)) {
                                        ogOwners.push(key);
                                    }
                                }
                            }
                        },
                        error: function (owners) { }
                    });
                } else
                    ogOwners = $.map(obligationentity.ObligationOwner.split(';'), $.trim);
            }
            $("#loadingPage").fadeOut();
            var statusArr = ["Replaced", "Expired", "Cancelled", "Archived"];
            if (ogOwners != "" && ogOwners != null && ogOwners.indexOf(localStorage.UserName) > -1 && obligationentity.ObligationMet != "Yes" && obligationentity.AutoComplete != "Yes" &&
                obligationentity.ObligationStatus != "Cancelled" && jQuery.inArray(contractItem.Status, statusArr) == -1 && permissions.toArray().indexOf(localStorage.UserName) > -1) {
                $("#tblMetadataDetailForOwner").empty();
                $("#tblMetadataDetailForOwner").append(vMetadata);
                $("#btnMarkComplete span").attr('style', 'background-color: transparent; color: #3177b5;font-size: 14px;border: 1px solid #3177b5 !important;');
                $("#viewMetadataDetailForOwner").dialog("option", "title", "View Obligation");
                $("#viewMetadataDetailForOwner").dialog("open");
            } else {
                $("#tblMilObgMetadataDetail").empty();
                $("#tblMilObgMetadataDetail").append(vMetadata);
                $("#dvMilObgMetadata").dialog("option", "title", "View Obligation");
                $("#dvMilObgMetadata").dialog("open");
            }
        },
        error: function (status) {
            $("#loadingPage").fadeOut();
        }
    });
}

function modalOnOpenObligation(dialog) {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var isformvalid = false;
    if (requiredValidator('addNewObligation')) {
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationID").val();
        var arrObligationOwner = $("#ddlObligationOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            } else {
                vObligationOwner += "; " + item;
            }
        });
        if ($("#txtObligationTitle").val() == "") {
            $('.ui-button-green-text').parent().removeAttr('disabled');
        } else if (ObligationID != "") {
            $("#inprocessObligation").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + ObligationID,
                type: 'PUT',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                    username: localStorage.UserName
                },
                data: {
                    RowKey: ObligationID,
                    ContractID: getParameterByName('ContractID'),
                    ContractTitle: $("#lblCTitleObli").text(),
                    ObligationTitle: $("#txtObligationTitle").val(),
                    ObligationType: $("#ddlObligationType").find('option:selected').text(),
                    Description: $("#txtObligationDesc").val(),
                    ObligationOwner: vObligationOwner,
                    DueDate: $.datepicker.formatDate('mm/dd/yy', $("#dtDueDate").datepicker('getDate')),
                    ObligationMet: $('input[type="radio"][name=ObligationMet]:checked').val(),
                    ModifiedBy: localStorage.UserName
                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#addEditObligation").dialog("close");
                    BindObligations();
                },
                complete: function () {
                    $("#inprocessObligation").css('visibility', 'none');
                }
            });
        } else {
            $("#inprocessObligation").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations',
                type: 'POST',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                    username: localStorage.UserName
                },
                data: {
                    RowKey: $("#txtObligationID").val(),
                    ContractID: getParameterByName('ContractID'),
                    ContractTitle: $("#lblCTitleObli").text(),
                    ObligationTitle: $("#txtObligationTitle").val(),
                    ObligationType: $("#ddlObligationType").find('option:selected').text(),
                    Description: $("#txtObligationDesc").val(),
                    ObligationOwner: vObligationOwner,
                    DueDate: $.datepicker.formatDate('mm/dd/yy', $("#dtDueDate").datepicker('getDate')),
                    ObligationMet: $('input[type="radio"][name=ObligationMet]:checked').val(),
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName
                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    if (vObligationFlaging == "EDIT") { } else { }
                    $("#addEditObligation").dialog("close");
                    $("#obligationInline").slideToggle();
                    BindObligations();
                },
                complete: function () {
                    $("#inprocessObligation").css('visibility', 'none');
                }
            });
        }
    } else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}

function ViewCommitments(catalogId, catalogTitle, catalogCommitment) {
    $("#loadingPage").fadeIn();
    $("#tblCommitmentMetadataDetail").empty();
    $('#tblCommitmentMetadataDetail').append('<tr><td><img src="../Content/Images/icon/loading.gif"/> Loading...</td></tr>');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Commitments?commitmentid=' + catalogCommitment,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            username: localStorage.UserName
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (commitmententity) {
            $("#loadingPage").fadeOut();
            if (commitmententity != null) {
                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Catalog Title</td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + catalogTitle + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Volume / Quantity Commitments </td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityCommitment + '</td>';
                vMetadata += '</tr>';
                if (commitmententity.QuantityCommitment == "Yes") {
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Minimum Quantity (Units) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityMin + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Maximum Quantity (Units) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityMax + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Period / Frequency </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityPeriod + '</td>';
                    vMetadata += '</tr>';
                }
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Amount / Price Commitments </td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PriceCommitment + '</td>';
                vMetadata += '</tr>';
                if (commitmententity.PriceCommitment == "Yes") {
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Minimum Amount (USD) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PriceMin + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Maximum Amount (USD) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PriceMax + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Period / Frequency </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PricePeriod + '</td>';
                    vMetadata += '</tr>';
                }
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Commitment Met ? </td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.CommitmentMet + '</td>';
                vMetadata += '</tr>';
                $("#tblCommitmentMetadataDetail").html(vMetadata);
                setBlankValueToHyphen("tblCommitmentMetadataDetail");
                $("#commitmentViewPopup").dialog("option", "title", "View Commitments");
                $("#commitmentViewPopup").dialog("open");
            }
        },
        error: function (commitmententity) {
            $("#loadingPage").fadeOut();
        }
    });
}

function contextMenuCatalogs(action, el, pos) {
    switch (action) {
        case "view":
            {
                var catalogId = $(el).find("#CatalogID").text();
                ViewCatalogDetail(catalogId);
                break;
            }
        case "delete":
            {
                var catalogTitle = $(el).find("#CatalogTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + catalogTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var catalogId = $(el).find("#CatalogID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + catalogId,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                "Content-Type": "application/json",
                                cache: false,
                                success: function (data) {
                                    swal("", "Item Deleted");
                                    getCatalogsbycontract(vContractID);
                                },
                                complete: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#CatalogID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + catalogId,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {
                        $("#lblCatalogCTitleEdit").text($("#lblContractTitle").text());
                        var validTill = "";
                        if (cataloentity.ValidUpto != null && cataloentity.ValidUpto != "") {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                validTill = moment(new Date(cataloentity.ValidUpto)).format('MM/DD/YYYY');
                            } else {
                                validTill = moment(new Date(cataloentity.ValidUpto)).format(localStorage.AppDateFormat);
                            }
                        }
                        $("#txtCatalogIDedit").val(cataloentity.RowKey);
                        $("#txtCatalogNameedit").val(cataloentity.CatalogName);
                        $("#txtCatalogUnitPriceedit").val(cataloentity.UnitPriceValue);
                        if (cataloentity.UnitPriceCurrency == "") {
                            if ($("#hdnBaseCurrency").val() == "")
                                $("#ddlCatalogCurrencyedit").val("0");
                            else
                                $("#ddlCatalogCurrencyedit").val($("#hdnBaseCurrency").val());
                        } else
                            $("#ddlCatalogCurrencyedit").val(cataloentity.UnitPriceCurrency);
                        $("#txtCatalogUnitsedit").val(cataloentity.Units);
                        $("#dtCatalogValidTilledit").val(validTill);
                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });
                $("#catalogseditPopup").dialog("option", "title", "Edit Catalog");
                $("#catalogseditPopup").dialog("open");
                break;
            }
        case "manage":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#CatalogID").text();
                var catalogTitle = $(el).find("#CatalogTitle").text();
                var catalogCommitment = $(el).find("#CatalogCommitment").text();
                var catalogUnits = $(el).find("#CatalogUnits").text();
                var catalogCurrency = $(el).find("#CatalogCurrency").text();
                $("#lblminQty").text("");
                $("#lblmaxQty").text("");
                $("#lblminQtyEdit").text("");
                $("#lblmaxQtyEdit").text("");
                $("#lblminAmount").text("");
                $("#lblmaxAmount").text("");
                $("#lblminAmountEdit").text("");
                $("#lblmaxAmountEdit").text("");
                if (catalogUnits != "" && catalogUnits != null) {
                    $("#lblminQty").text(catalogUnits);
                    $("#lblmaxQty").text(catalogUnits);
                    $("#lblminQtyEdit").text(catalogUnits);
                    $("#lblmaxQtyEdit").text(catalogUnits);
                }
                if (catalogCurrency != "" && catalogCurrency != null) {
                    $("#lblminAmount").text(catalogCurrency);
                    $("#lblmaxAmount").text(catalogCurrency);
                    $("#lblminAmountEdit").text(catalogCurrency);
                    $("#lblmaxAmountEdit").text(catalogCurrency);
                }
                if (catalogCommitment != "") {
                    var commitmentId = catalogCommitment;
                    $("#lblCommitmentCatalogTitleEdit").text(catalogTitle);
                    $("#lblCommitmentCatalogIDEdit").text(catalogId);
                    $("#txtCommitmentIDedit").val(commitmentId);
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Commitments?commitmentid=' + commitmentId,
                        type: 'GET',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey
                        },
                        "Content-Type": "application/json",
                        cache: false,
                        success: function (commitmententity) {
                            $("#loadingPage").fadeOut();
                            if (commitmententity.PriceCommitment == "Yes") {
                                document.getElementById('trMinPriceEdit').style.display = '';
                                document.getElementById('trMaxPriceEdit').style.display = '';
                                document.getElementById('trPricePeriodEdit').style.display = '';
                                $('input:radio[id=rdCommitmentsPriceYesEdit]').attr('checked', true);
                                if (commitmententity.PricePeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyValidityEdit]').attr('checked', true);
                                } else if (commitmententity.PricePeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTransactionEdit]').attr('checked', true);
                                } else {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentAmountDurationEdit').val(commitmententity.PricePeriod);
                                }
                                $("#txtCommitmentsMinAmountUnitPriceEdit").val(commitmententity.PriceMin);
                                $("#txtCommitmentsMaxAmountUnitPriceEdit").val(commitmententity.PriceMax);
                            } else {
                                document.getElementById('trMinPriceEdit').style.display = 'none';
                                document.getElementById('trMaxPriceEdit').style.display = 'none';
                                document.getElementById('trPricePeriodEdit').style.display = 'none';
                                $('input:radio[id=rdCommitmentsPriceNoEdit]').attr('checked', true);
                                if (commitmententity.PricePeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyValidityEdit]').attr('checked', true);
                                } else if (commitmententity.PricePeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTransactionEdit]').attr('checked', true);
                                } else if (commitmententity.PricePeriod == "") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentAmountDurationEdit').val("Monthly");
                                } else {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentAmountDurationEdit').val(commitmententity.PricePeriod);
                                }
                                $("#txtCommitmentsMinAmountUnitPriceEdit").val("");
                                $("#txtCommitmentsMaxAmountUnitPriceEdit").val("");
                            }
                            if (commitmententity.QuantityCommitment == "Yes") {
                                document.getElementById('trMinQtyEdit').style.display = '';
                                document.getElementById('trMaxQtyEdit').style.display = '';
                                document.getElementById('trQtyPeriodEdit').style.display = '';
                                $('input:radio[id=rdCommitmentsQuantityYes]').attr('checked', true)
                                if (commitmententity.QuantityPeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyValidityEdit]').attr('checked', true);
                                } else if (commitmententity.QuantityPeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTransactionEdit]').attr('checked', true);
                                } else {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentQtyDurationEdit').val(commitmententity.QuantityPeriod);
                                }
                                $("#txtCommitmentsMinQtyUnitsEdit").val(commitmententity.QuantityMin);
                                $("#txtCommitmentsMaxQtyUnitsEdit").val(commitmententity.QuantityMax);
                            } else {
                                document.getElementById('trMinQtyEdit').style.display = 'none';
                                document.getElementById('trMaxQtyEdit').style.display = 'none';
                                document.getElementById('trQtyPeriodEdit').style.display = 'none';
                                $('input:radio[id=rdCommitmentsQuantityNoEdit]').attr('checked', true);
                                if (commitmententity.QuantityPeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyValidityEdit]').attr('checked', true);
                                } else if (commitmententity.QuantityPeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTransactionEdit]').attr('checked', true);
                                } else if (commitmententity.QuantityPeriod == "") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentQtyDurationEdit').val("Monthly");
                                } else {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentQtyDurationEdit').val(commitmententity.QuantityPeriod);
                                }
                                $("#txtCommitmentsMinQtyUnitsEdit").val("");
                                $("#txtCommitmentsMaxQtyUnitsEdit").val("");
                            }
                            if (commitmententity.CommitmentMet == "Yes") {
                                $('input:radio[id=rdCommitmentMetEditYes]').attr('checked', true);
                            } else {
                                $('input:radio[id=rdCommitmentMetEditNo]').attr('checked', true);
                            }
                        },
                        complete: function () {
                            $("#loadingPage").fadeOut();
                        }
                    });
                    $("#commitmenteditPopup").dialog("option", "title", "Manage Commitment");
                    $("#commitmenteditPopup").dialog("open");
                } else {
                    $("#loadingPage").fadeOut();
                    $("#lblCommitmentCatalogTitle").text(catalogTitle);
                    $("#lblCommitmentCatalogID").text(catalogId);
                    $('input:radio[id=rdCommitmentsQuantityNo]').attr('checked', true);
                    $('input:radio[id=rdCommitmentsPriceNo]').attr('checked', true);
                    $('input:radio[id=rdCommitmentPriceFrequencyTime]').attr('checked', true);
                    $('input:radio[id=rdCommitmentQtyFrequencyTime]').attr('checked', true);
                    document.getElementById('trminQty').style.display = 'none';
                    document.getElementById('trmaxQty').style.display = 'none';
                    document.getElementById('trQtyPeriod').style.display = 'none';
                    document.getElementById('trMinPrice').style.display = 'none';
                    document.getElementById('trMaxPrice').style.display = 'none';
                    document.getElementById('trPricePeriod').style.display = 'none';
                    $("#txtCommitmentsMinQtyUnits").val('');
                    $("#txtCommitmentsMaxQtyUnits").val('');
                    $("#txtCommitmentsMinAmountUnitPrice").val('');
                    $("#txtCommitmentsMaxAmountUnitPrice").val('');
                    $('#ddlCommitmentQtyDuration').val("Monthly");
                    $('#ddlCommitmentAmountDuration').val("Monthly");
                    $("#CommitmentAddPopup").dialog("option", "title", "Manage Commitment");
                    $("#CommitmentAddPopup").dialog("open");
                }
                break;
            }
    }
}

$("input[name='QtyCommitments']").on({
    'change': function () {
        $.each($("input[name='QtyCommitments']"),
            function () {
                var ObjectId, ObjectValue;
                if ($(this).is(':checked')) {
                    console.log(this);
                    ObjectId = $(this).attr('id');
                    ObjectValue = $(this).val();
                    if (ObjectValue == "No") {
                        document.getElementById('trminQty').style.display = 'none';
                        document.getElementById('trmaxQty').style.display = 'none';
                        document.getElementById('trQtyPeriod').style.display = 'none';
                    } else {
                        document.getElementById('trminQty').style.display = '';
                        document.getElementById('trmaxQty').style.display = '';
                        document.getElementById('trQtyPeriod').style.display = '';
                    }
                }
            }
        );
    }
});

$("input[name='PriceCommitments']").on({
    'change': function () {
        $.each($("input[name='PriceCommitments']"),
            function () {
                var ObjectId, ObjectValue;
                if ($(this).is(':checked')) {
                    console.log(this);
                    ObjectId = $(this).attr('id');
                    ObjectValue = $(this).val();
                    if (ObjectValue == "No") {
                        document.getElementById('trMinPrice').style.display = 'none';
                        document.getElementById('trMaxPrice').style.display = 'none';
                        document.getElementById('trPricePeriod').style.display = 'none';
                    } else {
                        document.getElementById('trMinPrice').style.display = '';
                        document.getElementById('trMaxPrice').style.display = '';
                        document.getElementById('trPricePeriod').style.display = '';
                    }
                }
            }
        );
    }
});

$("input[name='QtyCommitmentsEdit']").on({
    'change': function () {
        $.each($("input[name='QtyCommitmentsEdit']"),
            function () {
                var ObjectId, ObjectValue;
                if ($(this).is(':checked')) {
                    console.log(this);
                    ObjectId = $(this).attr('id');
                    ObjectValue = $(this).val();
                    if (ObjectValue == "No") {
                        document.getElementById('trMinQtyEdit').style.display = 'none';
                        document.getElementById('trMaxQtyEdit').style.display = 'none';
                        document.getElementById('trQtyPeriodEdit').style.display = 'none';
                    } else {
                        document.getElementById('trMinQtyEdit').style.display = '';
                        document.getElementById('trMaxQtyEdit').style.display = '';
                        document.getElementById('trQtyPeriodEdit').style.display = '';
                    }
                }
            }
        );
    }
});

$("input[name='PriceCommitmentsEdit']").on({
    'change': function () {
        $.each($("input[name='PriceCommitmentsEdit']"),
            function () {
                var ObjectId, ObjectValue;
                if ($(this).is(':checked')) {
                    console.log(this);
                    ObjectId = $(this).attr('id');
                    ObjectValue = $(this).val();
                    if (ObjectValue == "No") {
                        document.getElementById('trMinPriceEdit').style.display = 'none';
                        document.getElementById('trMaxPriceEdit').style.display = 'none';
                        document.getElementById('trPricePeriodEdit').style.display = 'none';
                    } else {
                        document.getElementById('trMinPriceEdit').style.display = '';
                        document.getElementById('trMaxPriceEdit').style.display = '';
                        document.getElementById('trPricePeriodEdit').style.display = '';
                    }
                }
            }
        );
    }
});

function ViewCatalogDetail(catalogid) {
    $("#loadingPage").fadeIn();
    $("#tblCatalogMetadataDetail").empty();
    $('#tblCatalogMetadataDetail').append('<tr><td><img src="../Content/Images/icon/loading.gif"/> Loading...</td></tr>');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + catalogid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            username: localStorage.UserName
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (catalogentity) {
            $("#loadingPage").fadeOut();
            if (catalogentity != null) {
                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width40">Catalog Title</td>';
                vMetadata += '<td class="text width60">' + catalogentity.CatalogName + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Units </td>';
                vMetadata += '<td class="text width60">' + catalogentity.Units + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Units Price</td>';
                vMetadata += '<td class="text width60">';
                if (catalogentity.UnitPriceValue != '') {
                    vMetadata += catalogentity.UnitPriceValue + " " + catalogentity.UnitPriceCurrency;
                }
                vMetadata += '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Valid Till</td>';
                if (catalogentity.ValidUpto != null) {
                    var vDueDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        vDueDate = moment(new Date(catalogentity.ValidUpto)).format('MM/DD/YYYY');
                    } else {
                        vDueDate = moment(new Date(catalogentity.ValidUpto)).format(localStorage.AppDateFormat);
                    }
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';
                $("#tblCatalogMetadataDetail").empty();
                $("#tblCatalogMetadataDetail").append(vMetadata);
                setBlankValueToHyphen("tblCatalogMetadataDetail");
                $("#catalogsViewPopup").dialog("option", "title", "View Catalog");
                $("#catalogsViewPopup").dialog("open");
                $("#catalogsViewPopup").height("auto");
            }
        }
    });
}

function getCatalogsbycontract(contractid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#catalogDetailsTableBody").empty();
            if (data.length > 0) {
                document.getElementById('catalogDetailsTable').style.display = '';
                document.getElementById('NoCatalogDetails').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";
                    if (data[i].CommitmentID != null && data[i].CommitmentID != "") {
                        var color = "";
                        if (data[i].CommitmentMet != null) {
                            if (data[i].CommitmentMet == "Yes") {
                                color = '#01DF01';
                            } else {
                                color = '#FF0000';
                            }
                        } else {
                            color = '#FF0000';
                        }
                        var options = "";
                        if (data[i].CommitmentMet == "Yes") {
                            options += '<option style="width:60px;background-color:#01DF01;" selected value="Yes">Yes</option>';
                            options += '<option  style="width:60px;background-color:#FF0000;" value="No">No</option>';
                        } else {
                            options += '<option style="width:60px;background-color:#01DF01;"  value="Yes">Yes</option>';
                            options += '<option  style="width:60px;background-color:#FF0000;" selected value="No">No</option>';
                        }
                        str = '<select id="ddl' + data[i].RowKey + '" style="background-color:' + color + ';" onchange="SelectedCommitmentMet(this);" >';
                        str += options;
                        str += '</select>';
                        strCom = '<a href="javascript:void(0)" onclick="ViewCommitments(\'' + data[i].RowKey + '\',\'' + data[i].CatalogName + '\',\'' + data[i].CommitmentID + '\')">View</a>';
                        strCommitment = data[i].CommitmentID;
                    } else {
                        str = "-";
                        strCom = "-";
                        strCommitment = "";
                    }
                    var validDate = ""
                    if (data[i].ValidUpto != null && data[i].ValidUpto != "") {
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            validDate = moment(new Date(data[i].ValidUpto)).format('MM/DD/YYYY');
                        } else {
                            validDate = moment(new Date(data[i].ValidUpto)).format(localStorage.AppDateFormat);
                        }
                    }
                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleCatalogs" onclick="checkMultipleCatalogs(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewCatalogDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].CatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedCatalogs"/>';
                    url += '&nbsp;<a id="aEdit' + data[i].RowKey + '" href="javascript:void(0);" class="title-edit-btn close1" onclick="MakeCatalogEditable(\'' + data[i].RowKey + '\')"><img src="/Content/Images/edit.png"></a>';
                    url += '&nbsp;<a id="aSave' + data[i].RowKey + '" href="javascript:void(0);" style="display:none;" class="title-edit-btn close1" onclick="MakeCatalogSave(this)"><img src="/Content/Images/save.png"></a>';
                    url += '&nbsp;<a id="aCancel' + data[i].RowKey + '" href="javascript:void(0);" style="display:none;" class="title-edit-btn close1" onclick="MakeCatalogCancel(\'' + data[i].RowKey + '\')"><img src="/Content/Images/Cancel_Task.png"></a></i>';
                    var htmlContent = "<tr>";
                    htmlContent += "<td  ><span>&nbsp;</span><p id='CatalogID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='CatalogTitle' style='display:none;'>" + data[i].CatalogName + "</span>";
                    htmlContent += "<span id='CatalogCommitment' style='display:none;'>" + strCommitment + "</span>";
                    htmlContent += "<span id='CatalogUnits' style='display:none;'>" + data[i].Units + "</span>";
                    htmlContent += "<span id='CatalogCurrency' style='display:none;'>" + data[i].UnitPriceCurrency + "</span>";
                    htmlContent += "<i>" + url + "</i></td>";
                    htmlContent += "<td ><span id='Units" + data[i].RowKey + "'>" + data[i].Units + "</span></td>";
                    htmlContent += "<td ><lable style='width:36px;' id='Price" + data[i].RowKey + "'>" + data[i].UnitPriceValue + "</lable>&nbsp;<lable>" + data[i].UnitPriceCurrency + "</lable></td>";
                    htmlContent += "<td >" + strCom + "</td>";
                    htmlContent += "<td >" + str + "</td>";
                    htmlContent += "<td style='width:18%;' ><lable id='lblvalid" + data[i].RowKey + "'>" + validDate + "</lable><input  id='txtvalid" + data[i].RowKey + "' type='text' style='display:none;width:100px;' value='" + validDate + "'></td>"
                    htmlContent += "</tr>";
                    $("#catalogDetailsTableBody").append(htmlContent);
                }
                $(".openmenuRelatedCatalogs").contextMenu({
                    menu: 'dropdownMenuRelatedCatalogs',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                });
            } else {
                document.getElementById('catalogDetailsTable').style.display = 'none';
                document.getElementById('NoCatalogDetails').style.display = '';
            }
            $("#lblCatalogsCount").text(data.length);
        },
        error: function (data) {
            vExist = false;
            $("#lblCatalogsCount").text('0');
        }
    });
}

function MakeCatalogEditable(rowkey) {
    $("#aEdit" + rowkey).css('display', 'none');
    $("#aCancel" + rowkey).css('display', '');
    $("#aSave" + rowkey).css('display', '');
    $("#Units" + rowkey).attr('contentEditable', true);
    $("#valid" + rowkey).attr('contentEditable', true);
    $("#Price" + rowkey).attr('contentEditable', true);
    $("#Units" + rowkey).css({
        "padding": "0px 3px",
        "line-height": "17px",
        "border": "1px solid #ddd",
        "background-color": "#eee"
    }).focus();
    $("#Price" + rowkey).css({
        "border": "1px solid #ddd",
        "vertical-align": "top",
        "background-color": "#eee",
        "padding": "2px 2px 2px 3px",
        "width": "30px",
        "display": "inline-block",
        "margin-top": "-2px"
    });
    $("#txtvalid" + rowkey).css('display', '');
    $("#txtvalid" + rowkey).css({
        "width": "100px",
        "border": "1px solid #ddd",
        "padding": "3px 5px"
    });
    $("#lblvalid" + rowkey).css('display', 'none');
    $("#txtvalid" + rowkey).datepicker();
}

function MakeCatalogSave(obj) {
    $("#loadingPage").fadeIn();
    var vCatalogId = $(obj).parent("i").parent("td").parent("tr").find("#CatalogID").text();
    var vCatalogTitle = $(obj).parent("i").parent("td").parent("tr").find("#CatalogTitle").text();
    var catalogForm = "CatalogName=" + vCatalogTitle;
    catalogForm += "&Units=" + $("#Units" + vCatalogId).text();
    catalogForm += "&ContractID=" + vContractID;
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&UnitPriceValue=" + $("#Price" + vCatalogId).text();
    catalogForm += "&ValidUpto=" + $("#txtvalid" + vCatalogId).val();
    catalogForm += "&TotalPriceValue=" + "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogsquick?catalogid=' + vCatalogId,
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            getCatalogsbycontract(vContractID);
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function MakeCatalogCancel(rowkey) {
    $("#aEdit" + rowkey).css('display', '');
    $("#aCancel" + rowkey).css('display', 'none');
    $("#aSave" + rowkey).css('display', 'none');
    $("#Units" + rowkey).attr('contentEditable', false);
    $("#valid" + rowkey).attr('contentEditable', false);
    $("#Price" + rowkey).attr('contentEditable', false);
    $("#Units" + rowkey).css({
        "border": "",
        "background-color": ""
    }).focus();
    $("#Price" + rowkey).css({
        "border": "",
        "vertical-align": "",
        "background-color": "",
        "padding": "",
        "width": "",
        "display": "",
        "margin-top": ""
    });
    $("#txtvalid" + rowkey).css('display', 'none');
    $("#lblvalid" + rowkey).css('display', '');
    $("#txtvalid" + rowkey).datepicker();
}

function BindCurrencyForeditCatalog(currency) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/currencies',
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                if (currency == item.Abbreviation) {
                    $("#ddlCatalogCurrencyedit").append("<option selected value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>")
                } else {
                    $("#ddlCatalogCurrencyedit").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>")
                }
            }
        }
    });
}

var multipleChecks = "";

function checkMultipleCatalogs(object) {
    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#catalogActions").css('display', '');
        multipleChecks = multipleChecks + ';' + CatalogID;
    } else {
        multipleChecks = multipleChecks.replace(';' + CatalogID, '');
    }
    if (multipleChecks.trim() == "") {
        $("#catalogActions").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    } catch (ex) { }
}

function multipleDeleteCatalog() {
    $(".hhide").hide();
    var multipleChecksArray = multipleChecks.split(';');
    var multipleChecksArraylength = multipleChecksArray.length;
    for (var i = 1; i < multipleChecksArraylength; i++) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + multipleChecksArray[i],
            type: 'DELETE',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                username: localStorage.UserName
            },
            cache: false,
            success: function (data) { }
        });
    }
}

function contextMenuCatalogMul(action, el, pos) {
    switch (action) {
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to delete?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var multipleChecksArray = multipleChecks.split(';');
                            var multipleChecksArraylength = multipleChecksArray.length;
                            for (var i = 1; i < multipleChecksArraylength; i++) {
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + multipleChecksArray[i],
                                    type: 'DELETE',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey,
                                        username: localStorage.UserName
                                    },
                                    cache: false,
                                    success: function (data) { }
                                });
                            }
                            swal("", "Items Deleted");
                            getCatalogsbycontract(vContractID);
                            $("#catalogActions").css('display', 'none');
                            $("#loadingPage").fadeOut();
                        }
                        return;
                    });
                break;
            }
    }
}

function SelectedCommitmentMet(obj) {
    var curVal = $(obj).val();
    var curID = $(obj).attr('id');
    var CatID = $(obj).parent("td").parent("tr").find("#CatalogID").text();
    var Commitment = $(obj).parent("td").parent("tr").find("#CatalogCommitment").text();
    if (curVal == "Yes") {
        updateCommitmentMet(Commitment, curVal, CatID);
    } else if (curVal == "No") {
        updateCommitmentMet(Commitment, curVal, CatID);
    }
}

$('#addCatalogpopup').click(function () {
    $("#hdncatalogselect").val("SINGLE");
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $("#lblCatalogCTitle").text($("#lblContractTitle").text());
    $("#txtCatalogName").val('');
    $("#txtCatalogUnits").val('');
    $("#txtCatalogUnitPrice").val('');
    $("#dtCatalogValidTill").val('');
    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlCatalogCurrency").val("0");
    else
        $("#ddlCatalogCurrency").val($("#hdnBaseCurrency").val());
    $('#catalogsAddPopup').dialog('open');
});

$('#addCatalogMultipopup').click(function () {
    $("#hdncatalogselect").val("MULTIPLE");
    if ($('#tbodyExistingMulProducts tr').length <= 0) {
        getProducts();
    } else {
        clearObligationproductsmul();
        $('#loadProduct').empty();
        $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsMulPopup").dialog("open");
    }
});

$('#btnMultipleCatalogAction').click(function () {
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span> catalog(s)?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
        function (confirmed) {
            if (confirmed) {
                $("#loadingPage").fadeIn();
                multipleDeleteCatalog();
                swal("", "Items Deleted");
                getCatalogsbycontract(vContractID);
                $("#btnMultipleCatalogAction").css('display', 'none');
                $("#loadingPage").fadeOut();
            }
            return;
        });
});

$('#viewProductDetails').click(function () {
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
});

$('#viewProductDetailsEdit').click(function () {
    var vTitle = $('#txtCatalogNameedit').val();
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProductsEdit(vTitle);
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
});

$('#addNewProductDetails').click(function () {
    document.getElementById('dvExistingProducts').style.display = 'none';
    document.getElementById('dvAddProducts').style.display = '';
    $("#txtProductName").val("");
    $("#txtProductUnits").val("");
    $("#txtProductUnitPrice").val("");
    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlProductCurrency").val("0");
    else
        $("#ddlProductCurrency").val($("#hdnBaseCurrency").val());
    $('#liSelectedProducts').empty();
    $('.ui-button:contains(OK)').hide()
    $(".ui-dialog-titlebar-close").hide();
});

$('#CancleNewProductDetails').click(function () {
    document.getElementById('dvExistingProducts').style.display = '';
    document.getElementById('dvAddProducts').style.display = 'none';
    $('.ui-button:contains(OK)').show();
    if ($('#txtCatalogName').val() != "") {
        $('#liSelectedProducts').html('<span style="font-size:11px;">' + $('#txtCatalogName').val() + '</span>');
    }
    $(".ui-dialog-titlebar-close").show();
});

$('#SaveNewProductDetails').click(function () {
    CreateProduct();
});

function AddProductPopup() {
    $("#txtProductName").val("");
    $("#txtProductUnits").val("");
    $("#txtProductUnitPrice").val("");
    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlProductCurrency").val("0");
    else
        $("#ddlProductCurrency").val($("#hdnBaseCurrency").val());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $("#AddNewProductsPopup").dialog("option", "title", "New Product");
    $("#AddNewProductsPopup").dialog("open");
}

function CreateProduct() {
    $("#loadingPage").fadeIn();
    if (requiredValidator('ProductForm', false)) {
        var vTitle = $("#txtProductName").val();
        if (CheckProductTitleExist(vTitle)) {
            swal("", "Product record exist with titled " + vTitle + "");
            $("#loadingPage").fadeOut();
        } else {
            SaveProduct();
        }
    } else {
        $("#loadingPage").fadeOut();
    }
}

function SaveProduct() {
    var vTitle = $("#txtProductName").val();
    var productForm = "ProductName=" + vTitle;
    productForm += "&Units=" + $("#ddlProductUnits").val();
    productForm += "&UnitPriceValue=" + $("#txtProductUnitPrice").autoNumeric('get');
    productForm += "&UnitPriceCurrency=" + $("#ddlProductCurrency option:selected").val();
    productForm += "&AccountID=" + localStorage.AccountID;
    productForm += "&CreatedBy=" + localStorage.UserName;
    productForm += "&ModifiedBy=" + localStorage.UserName;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products',
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: productForm,
        cache: false,
        success: function (data) {
            swal("", "Product Created");
            $("#AddNewProductsPopup").dialog("close");
            getProductsEdit(vTitle);
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function CheckProductTitleExist(producttitle) {
    var vExist = true;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products?productTitle=' + producttitle,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: false,
        success: function (data) {
            if (data == null) {
                vExist = false;
            } else {
                vExist = true;
            }
        },
        error: function (data) {
            vExist = false;
        }
    });
    return vExist;
}

function SearchProducts() {
    $("#tbodyExistingProducts").html('');
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products?searchkeyword=' + encodeURIComponent($("#txtSearchBoxProduct").val()) + '&customquery=&sortbyfield=CounterpartyName&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $('#loadProduct').empty();
            $("#tbodyExistingProducts").html('');
            $("#tbodyExistingMulProducts").html('');
            var ProductTags = [];
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var article = "";
                var article1 = "";
                if (i == 0) {
                    article += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                    article1 += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                }
                var Units = "";
                var Price = "";
                if (item.Units != null && item.Units != "") {
                    Units = item.Units;
                }
                if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                    Price = item.UnitPriceValue;
                } else {
                    Price = "0";
                }
                if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                    Price += ' ' + item.UnitPriceCurrency;
                } else {
                    Price += ' ' + $("#hdnBaseCurrency").val();
                }
                article1 += '<tr>';
                article1 += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article1 += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article1 += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article1 += '<td>';
                article1 += '<input id="' + item.RowKey + '" type="checkbox" name="ExtProductsMul" value="' + item.ProductName + '" />&nbsp;';
                article1 += '<label for="' + item.RowKey + '" class="margin-right8" style="text-align: left;">' + item.ProductName + '</label>';
                article1 += '</td>';
                article1 += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article1 += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article1 += '</tr>';
                article += '<tr>';
                article += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article += '<td>';
                article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" value="' + item.ProductName + '" />';
                article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
                article += '</td>';
                article += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article += '</tr>';
                ProductTags.push(item.ProductName);
                $("#tbodyExistingProducts").append(article);
                $("#tbodyExistingMulProducts").append(article1);
            }
            $("#txtSearchBoxProduct").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProduct").val(uidetails.item.label);
                    SearchProducts();
                }
            });
            $("#txtSearchBoxProductMul").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProductMul").val(uidetails.item.label);
                    SearchProductsMul();
                }
            });
            $("#loadingPage").fadeOut();
            $('#compact-paginationProducts').css('display', '');
            var vCountMul = $("#tbodyExistingMulProducts tr").length;
            $('#compact-paginationMulProducts').pagination({
                items: vCountMul,
                itemsOnPage: 10,
                currentPage: 1,
                cssStyle: 'compact-theme',
                type: 'tdbody',
                row: 'tr',
                typeID: 'tbodyExistingMulProducts'
            });
            var vCount = $("#tbodyExistingProducts tr").length;
            $('#compact-paginationProducts').pagination({
                items: vCount,
                itemsOnPage: 10,
                currentPage: 1,
                cssStyle: 'compact-theme',
                type: 'tdbody',
                row: 'tr',
                typeID: 'tbodyExistingProducts'
            });
            if ($("#hdncatalogselect").val() == "MULTIPLE" || $("#hdncatalogselect").val() == "FINANCIALMULTIPLE") {
                $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
                $("#viewProductsMulPopup").dialog("open");
            } else {
                $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
                $("#viewProductsPopup").dialog("open");
            }
        },
        error: function () {
            $('#compact-paginationProducts').css('display', 'none');
            $('#loadProduct').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });
}

function SearchProductsMul() {
    $("#loadingPage").fadeIn();
    $("#tbodyExistingMulProducts").html('');
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products?searchkeyword=' + encodeURIComponent($("#txtSearchBoxProductMul").val()) + '&customquery=&sortbyfield=CounterpartyName&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            var datalenght = data.length;
            var article1 = "";
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                if (i == 0) {
                    article1 += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                }
                var Units = "";
                var Price = "";
                if (item.Units != null && item.Units != "") {
                    Units = item.Units;
                }
                if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                    Price = item.UnitPriceValue;
                } else {
                    Price = "0";
                }
                if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                    Price += ' ' + item.UnitPriceCurrency;
                } else {
                    Price += ' ' + $("#hdnBaseCurrency").val();
                }
                article1 += '<tr>';
                article1 += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article1 += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article1 += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article1 += '<td>';
                article1 += '<input id="' + item.RowKey + '" type="checkbox" name="ExtProductsMul" value="' + item.ProductName + '" />&nbsp;';
                article1 += '<label for="' + item.RowKey + '" class="margin-right8">' + item.ProductName + '</label>';
                article1 += '</td>';
                article1 += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article1 += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article1 += '</tr>';
            }
            $("#tbodyExistingMulProducts").html(article1);
            var vCount = $("#tbodyExistingMulProducts tr").length;
            if (vCount != 0) {
                $('#loadProductMul').html('');
                $('#compact-paginationMulProducts').css('display', '');
                $('#compact-paginationMulProducts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    typeID: 'tbodyExistingProducts',
                    cssStyle: 'compact-theme'
                });
            } else {
                $('#loadProductMul').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $('#compact-paginationMulProducts').css('display', 'none');
            }
        },
        error: function () {
            $('#compact-paginationMulProducts').css('display', 'none');
            $('#loadProductMul').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });
}

function getProducts() {
    $("#loadingPage").fadeIn();
    if ($('#tbodyExistingProducts tr').length <= 0) {
        $("#tbodyExistingProducts").empty();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products',
            type: 'GET',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            cache: false,
            success: function (products) {
                obligationProducts = products;
                $('#loadProduct').empty();
                var ProductTags = [];
                var datalenght = products.length;
                for (var i = 0; i < datalenght; i++) {
                    var item = products[i];
                    var article = "";
                    var article1 = "";
                    if (i == 0) {
                        article += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                        article1 += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                    }
                    var Units = "";
                    var Price = "";
                    if (item.Units != null && item.Units != "") {
                        Units = item.Units;
                    }
                    if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                        Price = item.UnitPriceValue;
                    } else {
                        Price = "0";
                    }
                    if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                        Price += ' ' + item.UnitPriceCurrency;
                    } else {
                        Price += ' ' + $("#hdnBaseCurrency").val();
                    }
                    article1 += '<tr>';
                    article1 += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                    article1 += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                    article1 += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                    article1 += '<td>';
                    article1 += '<input id="' + item.RowKey + '" type="checkbox" name="ExtProductsMul" value="' + item.ProductName + '" />&nbsp;';
                    article1 += '<label for="' + item.RowKey + '" class="margin-right8">' + item.ProductName + '</label>';
                    article1 += '</td>';
                    article1 += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                    article1 += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                    article1 += '</tr>';
                    article += '<tr>';
                    article += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                    article += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                    article += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                    article += '<td>';
                    article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" value="' + item.ProductName + '" />';
                    article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
                    article += '</td>';
                    article += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                    article += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                    article += '</tr>';
                    ProductTags.push(item.ProductName);
                    $("#tbodyExistingProducts").append(article);
                    $("#tbodyExistingMulProducts").append(article1);
                }
                $("#txtSearchBoxProduct").autocomplete({
                    source: ProductTags,
                    minLength: 1,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxProduct").val(uidetails.item.label);
                        SearchProducts();
                    }
                });
                $("#txtSearchBoxProductMul").autocomplete({
                    source: ProductTags,
                    minLength: 1,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxProductMul").val(uidetails.item.label);
                        SearchProductsMul();
                    }
                });
                $("#loadingPage").fadeOut();
                var vCountMul = $("#tbodyExistingMulProducts tr").length;
                $('#compact-paginationMulProducts').pagination({
                    items: vCountMul,
                    itemsOnPage: 10,
                    currentPage: 1,
                    cssStyle: 'compact-theme',
                    type: 'tdbody',
                    row: 'tr',
                    typeID: 'tbodyExistingMulProducts'
                });
                var vCount = $("#tbodyExistingProducts tr").length;
                $('#compact-paginationProducts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    currentPage: 1,
                    cssStyle: 'compact-theme',
                    type: 'tdbody',
                    row: 'tr',
                    typeID: 'tbodyExistingProducts'
                });
                if ($("#hdncatalogselect").val() == "MULTIPLE" || $("#hdncatalogselect").val() == "FINANCIALMULTIPLE") {
                    $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
                    $("#viewProductsMulPopup").dialog("open");
                } else {
                    $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
                    $("#viewProductsPopup").dialog("open");
                }
            },
            error: function (products) {
                $("#tbodyExistingProducts").html('No item found.');
                $("#tbodyExistingMulProducts").html('No item found.');
            }
        });
    } else {
        $("#tbodyExistingProducts").empty();
        var ProductTags = [];
        var datalenght = obligationProducts.length;
        for (var i = 0; i < datalenght; i++) {
            var item = obligationProducts[i];
            var article = "";
            var article1 = "";
            if (i == 0) {
                article += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                article1 += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
            }
            var Units = "";
            var Price = "";
            if (item.Units != null && item.Units != "") {
                Units = item.Units;
            }
            if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                Price = item.UnitPriceValue;
            } else {
                Price = "0";
            }
            if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                Price += ' ' + item.UnitPriceCurrency;
            } else {
                Price += ' ' + $("#hdnBaseCurrency").val();
            }
            article1 += '<tr>';
            article1 += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
            article1 += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
            article1 += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
            article1 += '<td>';
            article1 += '<input id="' + item.RowKey + '" type="checkbox" name="ExtProductsMul" value="' + item.ProductName + '" />&nbsp;';
            article1 += '<label for="' + item.RowKey + '" class="margin-right8">' + item.ProductName + '</label>';
            article1 += '</td>';
            article1 += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
            article1 += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
            article1 += '</tr>';
            article += '<tr>';
            article += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
            article += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
            article += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
            article += '<td>';
            article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" value="' + item.ProductName + '" />';
            article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
            article += '</td>';
            article += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
            article += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
            article += '</tr>';
            ProductTags.push(item.ProductName);
            $("#tbodyExistingProducts").append(article);
            $("#tbodyExistingMulProducts").append(article1);
        }
        $("#txtSearchBoxProduct").autocomplete({
            source: ProductTags,
            minLength: 1,
            focus: function (event, ui) {
                return false;
            },
            select: function (evn, uidetails) {
                $("#txtSearchBoxProduct").val(uidetails.item.label);
                SearchProducts();
            }
        });
        $("#txtSearchBoxProductMul").autocomplete({
            source: ProductTags,
            minLength: 1,
            focus: function (event, ui) {
                return false;
            },
            select: function (evn, uidetails) {
                $("#txtSearchBoxProductMul").val(uidetails.item.label);
                SearchProductsMul();
            }
        });
        $("#loadingPage").fadeOut();
        var vCountMul = $("#tbodyExistingMulProducts tr").length;
        $('#compact-paginationMulProducts').pagination({
            items: vCountMul,
            itemsOnPage: 10,
            currentPage: 1,
            cssStyle: 'compact-theme',
            type: 'tdbody',
            row: 'tr',
            typeID: 'tbodyExistingMulProducts'
        });
        var vCount = $("#tbodyExistingProducts tr").length;
        $('#compact-paginationProducts').pagination({
            items: vCount,
            itemsOnPage: 10,
            currentPage: 1,
            cssStyle: 'compact-theme',
            type: 'tdbody',
            row: 'tr',
            typeID: 'tbodyExistingProducts'
        });
    }
}

function getProductsEdit(vTitle) {
    $("#tbodyExistingProducts").empty();
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products',
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (products) {
            $('#loadProduct').empty();
            var ProductTags = [];
            var datalenght = products.length;
            for (var i = 0; i < datalenght; i++) {
                var item = products[i];
                var article = "";
                if (i == 0) {
                    article += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                }
                var Units = "";
                var Price = "";
                if (item.Units != null && item.Units != "") {
                    Units = item.Units;
                }
                if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                    Price = item.UnitPriceValue;
                } else {
                    Price = "0";
                }
                if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                    Price += ' ' + item.UnitPriceCurrency;
                } else {
                    Price += ' ' + $("#hdnBaseCurrency").val();
                }
                article += '<tr>';
                article += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article += '<td>';
                if (item.ProductName == vTitle) {
                    article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" checked value="' + item.ProductName + '"  />';
                    article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
                } else {
                    article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" value="' + item.ProductName + '" />';
                    article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
                }
                article += '</td>';
                article += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '"  >' + Units + '</label></td>';
                article += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '"  >' + Price + '</label></td>';
                article += '</tr>';
                ProductTags.push(item.ProductName);
                $("#tbodyExistingProducts").append(article);
            }
            $("#txtSearchBoxProduct").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProduct").val(uidetails.item.label);
                    SearchProducts();
                }
            });
            var vCount = $("#tbodyExistingProducts tr").length;
            $('#compact-paginationProducts').pagination({
                items: vCount,
                itemsOnPage: 10,
                currentPage: 1,
                cssStyle: 'compact-theme',
                type: 'tdbody',
                row: 'tr',
                typeID: 'tbodyExistingProducts'
            });
            $("#loadingPage").fadeOut();
            $("#viewProductsPopup").dialog("option", "title", "Products Picker");
            $("#viewProductsPopup").dialog("open");
        }
    });
}

function AddProduct() {
    var vProduct = "";
    var vProductID = "";
    $('input:radio[name="ExtProducts"]:checked').each(function () {
        if (vProduct == "") {
            vProduct = this.value;
            vProductID = this.id;
        } else {
            vProduct += "; " + this.value;
            vProductID += "; " + this.id;
        }
    });
    if (vProduct != "") {
        var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductUnits').text();
        var Price = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();
        var Currency = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductCurrency').text();
        if (Units != null && Units != "" && Units != "null") {
            $('#txtCatalogUnitsedit').val(Units);
            $('#txtCatalogUnits').val(Units);
        } else {
            $('#txtCatalogUnitsedit').val("");
            $('#txtCatalogUnits').val("");
        }
        if (Price != null && Price != "" && Price != "null") {
            $('#txtCatalogUnitPriceedit').val(Price);
            $('#txtCatalogUnitPrice').val(Price);
        } else {
            $('#txtCatalogUnitPriceedit').val("");
            $('#txtCatalogUnitPrice').val("");
        }
        if (Currency != null && Currency != "" && Currency != "null") {
            $('#ddlCatalogCurrencyedit').val(Currency);
            $('#ddlCatalogCurrency').val(Currency);
        } else {
            if ($("#hdnBaseCurrency").val() == "") {
                $("#ddlCatalogCurrencyedit").val("0");
                $("#ddlCatalogCurrency").val("0");
            } else {
                $("#ddlCatalogCurrencyedit").val($("#hdnBaseCurrency").val());
                $("#ddlCatalogCurrency").val($("#hdnBaseCurrency").val());
            }
        }
        $('#txtCatalogName').val(vProduct);
        $('#txtTransProductName').val(vProduct);
        $('#txtCatalogNameedit').val(vProduct);
        return true;
    } else {
        swal("", "No Product has been selected.");
        return false;
    }
}

function SaveCataloginText() {
    var vCatalog = $('#txtCatalogName').val();
    if (vCatalog == "") {
        $('#liSelectedProducts').html('<span style="font-size:11px;">please select the one product.</span>');
    } else {
        $(this).dialog("close");
    }
}

function Updatecatalog() {
    $("#loadingPage").fadeIn();
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('CatalogFormEdit', false)) {
        var vTitle = $("#txtCatalogNameedit").val();
        var vCatalogId = $("#txtCatalogIDedit").val();
        if (!comparedates("StartDate", "ValidTill", "Valid Till should be greater than start date")) {
            swal("", "Valid Till should be greater than start date");
            $("#loadingPage").fadeOut();
        } else {
            UpdateCatalog(false);
        }
    } else {
        $("#loadingPage").fadeOut();
    }
    $("#spInProgress").css('visibility', 'hidden');
}

function Savecatalog() {
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('CatalogForm', false)) {
        var vTitle = $("#txtCatalogName").val();
        $("#loadingPage").fadeIn();
        if (!comparedates("StartDate", "ValidTill", "Valid Till should be greater than start date")) {
            swal("", "Valid Till should be greater than start date");
            $("#loadingPage").fadeOut();
        } else {
            CreateCatalog(false);
        }
    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();
}

function CheckCatalogTitleExistForEdit(contractid, catalogtitle, catalogid) {
    var vExist = true;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + contractid + '&catalogtitle=' + catalogtitle,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: false,
        success: function (data) {
            if (data == null) {
                vExist = false;
            } else {
                if (data.RowKey == catalogid) {
                    vExist = false;
                } else {
                    vExist = true;
                }
            }
        },
        error: function (data) {
            vExist = false;
        }
    });
    return vExist;
}

function CheckCatalogTitleExist(contractid, catalogtitle) {
    var vExist = true;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + contractid + '&catalogtitle=' + catalogtitle,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: false,
        success: function (data) {
            if (data == null) {
                vExist = false;
            } else {
                vExist = true;
            }
        },
        error: function (data) {
            vExist = false;
        }
    });
    return vExist;
}

function UpdateCatalog(isdraft) {
    var vTitle = $("#txtCatalogNameedit").val();
    var vCatalogId = $("#txtCatalogIDedit").val();
    var catalogForm = "CatalogName=" + vTitle;
    catalogForm += "&Units=" + $("#txtCatalogUnitsedit").val();
    catalogForm += "&ContractID=" + vContractID;
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&UnitPriceValue=" + $("#txtCatalogUnitPriceedit").val().trim();
    catalogForm += "&UnitPriceCurrency=" + $("#ddlCatalogCurrencyedit option:selected").text();
    catalogForm += "&ValidUpto=" + $("#dtCatalogValidTilledit").val();
    catalogForm += "&TotalPriceValue=" + "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + vCatalogId,
        type: 'PUT',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (isdraft) {
                swal("", "Item Drafted");
            } else {
                swal("", "Item Updated");
            }
            $("#catalogseditPopup").dialog("close");
            getCatalogsbycontract(vContractID);
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function CreateCatalog(isdraft) {
    var vTitle = $("#txtCatalogName").val();
    var catalogForm = "CatalogName=" + vTitle;
    catalogForm += "&CommitmentID=" + "";
    catalogForm += "&Units=" + $("#txtCatalogUnits").val();
    catalogForm += "&TotalPriceValue=" + "";
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&UnitPriceValue=" + $("#txtCatalogUnitPrice").val().trim();
    catalogForm += "&UnitPriceCurrency=" + $("#ddlCatalogCurrency option:selected").text();
    catalogForm += "&ValidUpto=" + $("#dtCatalogValidTill").val();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            if (isdraft) {
                swal("", "Item Drafted");
            } else {
                swal("", "Item Added");
            }
            getCatalogsbycontract(vContractID);
            $("#catalogsAddPopup").dialog("close");
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

var listObligationNewData = "";
var listObligationNewEndDate = "";
var listObligationNewStartDate = "";
var recurence = "";
var recurenceCustomString = "";
var occurences = 1;
var validateproducts = true;

function clearObligationFormData() {
    $("#txtObligationNewID").val("");
    $("#txtObligationNewTitle").val("");
    $('#ddlObligationTypeNew').val("0");
    $("#txtObligationNewText").val("");
    $("#txtObligationNewDesc").val("");
    $("#txtObligationCatalogTitleInline").val("");
    $("#ddlObligationCatalogInlineUnitsType").val("0");
    $("#txtObligationCatalogQtyInline").val("");
    $("#ddlObligationCatalogUnitsInline").val("0");
    $("#ddlObligationCatalogStatusInline").val("0");
    $("#ulObligationCatalogBody").empty();
    $("#txtObligationFinancialsTitleInline").val("");
    $("#txtObligationFinancialAmountInline").val("");
    $("#ddlObligationFinancialsStatusInline").val("0");
    $("#ulObligationFinancialsBody").empty();
}

$('#addObligationNewItemPopup').click(function () {
    $('#addEditObligationNew').dialog('widget').find('.ui-dialog-buttonpane .ui-button:button:contains("Save") .pop_up_Content_Green ').html("Add");
    $("input[type=radio]").attr('disabled', false);
    $("#ulObliCompletedate").css('display', 'none');
    $("#dtObligationNewCompletedDate").val('');
    clearObligationFormDataNew();
    listObligationNewData = "";
    $("#liObligationRecurrence").css('display', '');
    $("#hdnObligationUniqueId").text('');
    $("#hdnObligationRowKey").text('');
    $('#hdnProductUpdates').text('');
    $("#PerformedPartySelf").css("display", "inline");
    $("#PerformedPartyCounterparty").css("display", "inline");
    vObligationTextEditRecurrence = "";
    var string1 = "";
    var string2 = "";
    var strCompanyProfile = "";
    var strCounterpartynew = "";
    var strEndDate = "";
    $('#txtOccurrenceCount').val("12");
    $('#NoObligationFinantials').css('display', '');
    $('#NoObligationCatalog').css('display', '');
    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
        strEndDate = new Date(contractItem.EndDate);
        listObligationNewEndDate = strEndDate;
        $('#ObligationNewOcurrenceEndDate').text("");
        var ONewEndDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            if (getTimeZone().indexOf('+') > -1)
                ONewEndDate = moment(new Date(listObligationNewEndDate)).format('MM/DD/YYYY');
            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format('MM/DD/YYYY');
        } else {
            if (getTimeZone().indexOf('+') > -1)
                ONewEndDate = moment(new Date(listObligationNewEndDate)).format(localStorage.AppDateFormat);
            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format(localStorage.AppDateFormat);
        }
        $('#ObligationNewOcurrenceEndDate').text(" (" + ONewEndDate + ")");
        $("#rdObligationNewEndOccurence").prop("checked", true);
    } else {
        listObligationNewEndDate = "Not Available";
        $('#ObligationNewOcurrenceEndDate').text("");
        $('#ObligationNewOcurrenceEndDate').text(" (" + listObligationNewEndDate + ")");
        $("#rdObligationNewEndOccurence").attr('disabled', true);
        $('#rdObligationNewEndOccurence').removeAttr('checked');
        $("#rdObligationNewEndOccurenceUser").prop("checked", true);
        userFlagObli = false;
    }
    $("#divObligationOcurrenceWeekly").css('display', 'none');
    $("#divObligationOcurrenceMonthly").css('display', 'none');
    $("#dvobligationOcurrenceEnd").css('display', 'none');
    $("#divOcurrenceSummary").css('display', 'none');
    document.getElementById("ddlObligationOccurencess").disabled = true;
    if ($("#lblCompanyProfile").text() == null || $("#lblCompanyProfile").text() == "") {
        strCompanyProfile = "Not Available"
    } else {
        strCompanyProfile = $("#lblCompanyProfile").text();
    }
    if ($("#lblCounterparty").text() == null || $("#lblCounterparty").text() == "") {
        strCounterpartynew = "Not Available";
        document.getElementById("rdObligationNewPerformedPartyCP").disabled = true;
    } else {
        strCounterpartynew = $("#lblCounterparty").text();
        document.getElementById("rdObligationNewPerformedPartyCP").disabled = false;
    }
    string1 = "My Company" + " " + "(" + strCompanyProfile + ")";
    string2 = "Counterparty" + " " + "(" + strCounterpartynew + ")";
    $("#PerformedPartySelf").text(string1);
    $("#PerformedPartyCounterparty").text(string2);
    $("#lblCTitleObligationNew").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlObligationNewOwner", $("#licontractmanagers").text());
    GetValuesAndAutoPopulate("ddlSendReminderToObligationNew", $("#licontractmanagers").text());
    $("#aobligationRecNoneEdit").css('display', 'none');
    $("#aobligationRecEdit").css('display', 'none');
    $("#obligationnewheading").text("New Obligation");
    if (IsPipeline) {
        $("#AlertObli").val('No').change();
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notification, click <a href='javascript:void(0);' id='enableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
    } else {
        $("#AlertObli").val('Yes').change();
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders");
    }
    $("#rdObligationNewAutoCompleteYes").prop("checked", true);
    $("#rdObligationNewAutoCompleteNo").prop("checked", false);
    $("#rdObligShowInCalendarYes").prop("checked", true);
    $("#rdObligShowInCalendarNo").prop("checked", false);
    $("#addEditObligationNew").dialog("option", "title", "");
    $("#addEditObligationNew").dialog("open");
    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
        var Id = this.id;
        $("#" + Id).css('outline', '');
    });
    $("#lblerrorreclimitObligation").css('display', 'none');
    allowOnlyNumberInInputBox("txtReminder1ObligationNew");
    allowOnlyNumberInInputBox("txtReminder2ObligationNew");
    allowOnlyNumberInInputBox("txtReminder3ObligationNew");
});

function SelectedObligationTitleNew(obj) {
    var curVal = $(obj).val();
    if (curVal != 0) {
        if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
            if ($("input:radio[name=PerformedParty]:checked").val() == "Self") {
                $("#txtObligationNewTitle").val(curVal + " for " + $("#lblCounterparty").text());
            } else {
                $("#txtObligationNewTitle").val(curVal + " from " + $("#lblCounterparty").text());
            }
        }
    }
}

$("input[name=PerformedParty]:radio").change(function () {
    var curVal = $("#ddlObligationTypeNew").val();
    if (curVal != 0) {
        if (this.value == "Self") {
            if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
                $("#txtObligationNewTitle").val(curVal + " for " + $("#lblCounterparty").text());
            }
        } else {
            if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
                $("#txtObligationNewTitle").val(curVal + " from " + $("#lblCounterparty").text());
            }
        }
    }
});

function ViewObligationOcurrence(obj) {
    if ($('#dtObligationNewDueDate').val() != "" && $('#dtObligationNewDueDate').val() != null) {
        if ($(obj).is(':checked')) {
            $("#ulObligationOcurrence").css('display', '');
        } else {
            $("#ulObligationOcurrence").css('display', 'none');
        }
    } else {
        swal("", "select Duedate First.");
        if ($(obj).is(':checked')) {
            $('input:checkbox[name=ObligationRepeat]').removeAttr('checked');
        }
    }
}

function ObligationDueDateSlectedEvent(obj) {
    var dateNew = new Date($.datepicker.formatDate('mm/dd/yy', $(obj).datepicker('getDate')));
    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
        this.checked = false;
    });
    var day = dateNew.getDay()
    var chkboxId = "ORC" + day;
    $("#" + chkboxId).prop('checked', true);
    if ($('#txtObligationNewText').val() != "") { } else {
        document.getElementById("ddlObligationOccurencess").disabled = false;
    }
    $('#dtObligationNewOccurrenceDueDate').val(dateNew.getDate());
    $('#dtOblOcurrMonthforYear').val(monthNames[dateNew.getMonth()]);
    $('#dtOblOcurrDateforYear').val(dateNew.getDate());
    if ($("#ddlObligationOccurencess").val() != "None") {
        GetObligationDataFinal("");
    }
}

function getOcurrenceValuesForObligation(recurence, occurences, startDateNew, recurenceCustomString, strmonthly) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/ocurrencedates?ocurrence=' + recurence + '&iOcurrence=' + occurences + '&dtstart=' + startDateNew + '&ocurrencestring=' + recurenceCustomString + '&strmonthly=' + strmonthly,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (folder) {
            listObligationNewData = folder;
            var Startdate = new Date(folder.StartDate);
            var Enddate = new Date(folder.LastDate);
            var SMonth = Startdate.getMonth() + 1;
            var EMonth = Enddate.getMonth() + 1;
            var Ocurrs = folder.Values != null ? folder.Values.length : 1;;
            occurences = Ocurrs;
            var dtStartdate = "";
            var dtEnddate = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                dtStartdate = moment(new Date(folder.StartDate)).format('MM/DD/YYYY');
            } else {
                dtStartdate = moment(new Date(folder.StartDate)).format(localStorage.AppDateFormat);
            }
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                dtEnddate = moment(new Date(folder.LastDate)).format('MM/DD/YYYY');
            } else {
                dtEnddate = moment(new Date(folder.LastDate)).format(localStorage.AppDateFormat);
            }
            $('#ObligationOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + Ocurrs + " instances)")
        },
        error: function (data) {
            isExist = false;
        }
    });
}

$("#ddlRepeatMonthly").change(function (obj) {
    GetObligationdynamicRecurrenceCount();
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var Cus = "";
    var customstring = "";
    var date = new Date(fObligationNewDueDate);
    if ($("#ddlObligationOccurencess").val() == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fObligationNewDueDate);
        $('#dtObligationNewOccurrenceDueDate').val(abc.getDate());
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#lblOcurrenceMonth').css('display', '');
        $('#lblOcurrenceYear').css('display', 'none');
        $('#divOcurrenceSummary').css('display', '');
        customstring = $("#ddlRepeatMonthly").val();
        $('#dvobligationOcurrenceEnd').css('display', '');
    } else if ($("#ddlObligationOccurencess").val() == "Yearly") {
        var abc = new Date(fObligationNewDueDate);
        $('#dtObligationNewOccurrenceDueDate').val(abc.getDate());
        $('#dtOblOcurrMonthforYear').val(monthNames[abc.getMonth()]);
        $('#dtOblOcurrDateforYear').val(abc.getDate());
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', '');
        customstring = $("#ddlRepeatMonthly").val();
        $('#dvobligationOcurrenceEnd').css('display', '');
        $('#lblOcurrenceMonth').css('display', 'none');
        $('#lblOcurrenceYear').css('display', '');
    }
    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetObligationDataFinal(Cus);
    } else {
        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, Cus, customstring);
    }
});

var dynclistObligationNewStartDate = '';

function GetObligationdynamicRecurrenceCount() {
    var fObligationDateNew = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'))
    }
    var startDateNew = new Date();
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    dynclistObligationNewStartDate = fObligationDateNew;
    if (listObligationNewEndDate != "Not Available") {
        if ($("#ddlObligationOccurencess option:selected").val() == "Weekly") {
            var newTestDateNew2 = new Date();
            var sta = false;
            var OCount = 1;
            var Cus = "";
            var CustomRecWeekly = [];
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                CustomRecWeekly.push(this.value);
                Cus += (this.value) + ",";
            });
            var selectedstartdate = new Date(dynclistObligationNewStartDate);
            for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                    recst = new Date(dynclistObligationNewStartDate);
                    newTestDateNew2 = new Date(dynclistObligationNewStartDate);
                    sta = true;
                    break;
                }
            }
            if (!sta) {
                var newTestDate = new Date(dynclistObligationNewStartDate);
                var newdate = new Date(dynclistObligationNewStartDate);
                for (var s = 0; s < 6; s++) {
                    newdate.setDate(newdate.getDate() + 1);
                    newTestDate.setDate(newTestDate.getDate() + 1);
                    for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                        if (newdate.getDay() == CustomRecWeekly[crw1]) {
                            recst = newdate;
                            newTestDateNew2 = newTestDate;
                            sta = true;
                            break;
                        }
                    }
                    if (sta) {
                        break;
                    }
                }
            }
            reced = new Date(listObligationNewEndDate);
            if (reced >= recst) {
                var one_day = 1000 * 60 * 60 * 24;
                var date1_ms = recst.getTime();
                var date2_ms = reced.getTime();
                var difference_ms = date2_ms - date1_ms;
                var diff = Math.round(difference_ms / one_day);
                var newCustomdate = newTestDateNew2;
                for (var s1 = 0; s1 < diff; s1++) {
                    newCustomdate.setDate(newCustomdate.getDate() + 1);
                    for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                        if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                            OCount = OCount + 1;
                        }
                    }
                }
                occurences = OCount;
            } else {
                occurences = 0;
            }
            if (occurences > 54) {
                dynamicOccCount = 54;
                $('#lblerrorreclimitObligation').css('display', '');
                $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            } else {
                dynamicOccCount = occurences;
                $('#lblerrorreclimitObligation').css('display', 'none');
                if (occurences == 0)
                    $('#lblerrorreclimitObligationNotZero').css('display', '');
                else
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            }
        } else if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
            var newstartrecdate = new Date(dynclistObligationNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistObligationNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listObligationNewEndDate);
            var occnew = 0;
            if (reced >= newstartrecdate) {
                while (reced >= newstartrecdate) {
                    newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlRepeatMonthly option:selected").val())));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                occurences = occnew;
            } else {
                occurences = 0;
            }
            if (occurences > 54) {
                dynamicOccCount = 54;
                $('#lblerrorreclimitObligation').css('display', '');
                $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            } else {
                dynamicOccCount = occurences;
                $('#lblerrorreclimitObligation').css('display', 'none');
                if (occurences == 0)
                    $('#lblerrorreclimitObligationNotZero').css('display', '');
                else
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            }
            recurenceCustomString = recst.getDate();
        } else {
            var newstartrecdate = new Date(dynclistObligationNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistObligationNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listObligationNewEndDate);
            var occnew = 0;
            if (reced >= newstartrecdate) {
                while (reced >= newstartrecdate) {
                    newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                occurences = occnew;
            } else {
                occurences = 0;
            }
            if (occurences > 54) {
                dynamicOccCount = 54;
                $('#lblerrorreclimitObligation').css('display', '');
                $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            } else {
                dynamicOccCount = occurences;
                $('#lblerrorreclimitObligation').css('display', 'none');
                if (occurences == 0)
                    $('#lblerrorreclimitObligationNotZero').css('display', '');
                else
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            }
            recurenceCustomString = recst.getFullYear();
        }
    } else {
        dynamicOccCount = 54;
        $('#lblerrorreclimitObligation').css('display', '');
        $('#lblerrorreclimitObligationNotZero').css('display', 'none');
    }
    if ($("#txtOccurrenceCount").val() == "") {
        if (parseInt(dynamicOccCount) > 12) {
            $("#txtOccurrenceCount").val('12');
        } else {
            $("#txtOccurrenceCount").val(dynamicOccCount);
        }
    }
}

var userFlagObli = false;
var userFlagObliCustom = false;
$("#ddlObligationOccurencess").change(function (obj) {
    GetObligationdynamicRecurrenceCount();
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    listObligationNewStartDate = fObligationNewDueDate;
    var date = new Date(fObligationNewDueDate);
    var Cus = "";
    var ocurrTxtnew = $("#ddlObligationOccurencess").val();
    var customstring = "";
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fObligationNewDueDate);
        $('#dtObligationNewOccurrenceDueDate').val(abc.getDate());
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', '');
        customstring = $("#ddlRepeatMonthly").val();
        $('#dvobligationOcurrenceEnd').css('display', '');
        $('#ddlRepeatMonthly').css('display', '');
        $('#lblOcurrenceMonth').css('display', '');
        $('#lblOcurrenceYear').css('display', 'none');
    } else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
        var abc = new Date(fObligationNewDueDate);
        var text = monthNames[abc.getMonth()];
        $('#dtOblOcurrDateforYear').val(abc.getDate());
        $('#dtOblOcurrMonthforYear').val(text);
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', '');
        $('#dvobligationOcurrenceEnd').css('display', '');
        $("#ddlRepeatMonthly").val("1");
        $('#ddlRepeatMonthly').css('display', 'none');
        $('#lblOcurrenceMonth').css('display', 'none');
        $('#lblOcurrenceYear').css('display', '');
    } else if (ocurrTxtnew == "Weekly") {
        $('#dtObligationNewOccurrenceDueDate').val("");
        $('#divObligationOcurrenceMonthly').css('display', 'none');
        $('#divObligationOcurrenceWeekly').css('display', '');
        $('#divOcurrenceSummary').css('display', '');
        $('#dvobligationOcurrenceEnd').css('display', '');
        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
        $("#ddlRepeatMonthly").val("1");
    } else {
        $('#dtObligationNewOccurrenceDueDate').val("none");
        $('#divObligationOcurrenceMonthly').css('display', 'none');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', 'none');
        $('#dvobligationOcurrenceEnd').css('display', 'none');
        $("#ddlRepeatMonthly").val("1");
    }
    if (userFlagObli) {
        if (userFlagObliCustom) {
            $('#rdObligationNewEndOccurenceUser').prop("checked", true);
            $("#rdObligationNewEndOccurence").removeAttr('disabled');
            $("#rdObligationNewEndOccurence").removeAttr('checked');
        } else {
            $("#rdObligationNewEndOccurence").removeAttr('disabled');
            $("#rdObligationNewEndOccurence").prop("checked", true);
            $('#rdObligationNewEndOccurenceUser').removeAttr('checked');
        }
    }
    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetObligationDataFinal(Cus);
    } else {
        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, Cus, customstring);
    }
});

function GetObligationDataFinal(customstring) {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    listObligationNewStartDate = fObligationNewDueDate;
    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {
        if (listObligationNewEndDate != "Not Available") {
            if ($("#ddlObligationOccurencess option:selected").val() == "Weekly") {
                var startDateNew = new Date();
                var newTestDateNew2 = new Date();
                recurence = "Weekly";
                var sta = false;
                var OCount = 1;
                var Cus = "";
                var CustomRecWeekly = [];
                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                    CustomRecWeekly.push(this.value);
                    Cus += (this.value) + ",";
                });
                var selectedstartdate = new Date(listObligationNewStartDate);
                for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                    if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                        recst = new Date(listObligationNewStartDate);
                        newTestDateNew2 = new Date(listObligationNewStartDate);
                        sta = true;
                        break;
                    }
                }
                if (!sta) {
                    var newTestDate = new Date(listObligationNewStartDate);
                    var newdate = new Date(listObligationNewStartDate);
                    for (var s = 0; s < 6; s++) {
                        newdate.setDate(newdate.getDate() + 1);
                        newTestDate.setDate(newTestDate.getDate() + 1);
                        for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                            if (newdate.getDay() == CustomRecWeekly[crw1]) {
                                recst = newdate;
                                newTestDateNew2 = newTestDate;
                                sta = true;
                                break;
                            }
                        }
                        if (sta) {
                            break;
                        }
                    }
                }
                reced = new Date(listObligationNewEndDate);
                if (reced >= recst) {
                    var one_day = 1000 * 60 * 60 * 24;
                    var date1_ms = recst.getTime();
                    var date2_ms = reced.getTime();
                    var difference_ms = date2_ms - date1_ms;
                    var diff = Math.round(difference_ms / one_day);
                    var newCustomdate = newTestDateNew2;
                    for (var s1 = 0; s1 < diff; s1++) {
                        newCustomdate.setDate(newCustomdate.getDate() + 1);
                        for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                            if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                                OCount = OCount + 1;
                            }
                        }
                    }
                    occurences = OCount;
                } else {
                    occurences = 0;
                }
                Cus = removeLastChar(Cus, ',');
                if (occurences > 54) {
                    occurences = 12;
                    $("#rdObligationNewEndOccurence").attr('disabled', true);
                    $('#rdObligationNewEndOccurence').removeAttr('checked');
                    $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                    userFlagObli = false;
                    $('#lblerrorreclimitObligation').css('display', '');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                } else {
                    $('#lblerrorreclimitObligation').css('display', 'none');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }
                recurenceCustomString = Cus;
            } else if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
                var newstartrecdate = new Date(listObligationNewStartDate);
                recurence = "Monthly";
                var selectedstartdateNewCustom = new Date(listObligationNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listObligationNewEndDate);
                var occnew = 0;
                if (reced >= newstartrecdate) {
                    while (reced >= newstartrecdate) {
                        newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlRepeatMonthly option:selected").val())));
                        occnew = parseInt(occnew) + parseInt(1);
                    }
                    occurences = occnew;
                } else {
                    occurences = 0;
                }
                if (occurences > 54) {
                    occurences = 12;
                    $("#rdObligationNewEndOccurence").attr('disabled', true);
                    $('#rdObligationNewEndOccurence').removeAttr('checked');
                    $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                    userFlagObli = false;
                    $('#lblerrorreclimitObligation').css('display', '');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                } else {
                    $('#lblerrorreclimitObligation').css('display', 'none');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }
                recurenceCustomString = recst.getDate();
            } else {
                var newstartrecdate = new Date(listObligationNewStartDate);
                recurence = "Yearly";
                var selectedstartdateNewCustom = new Date(listObligationNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listObligationNewEndDate);
                var occnew = 0;
                if (reced >= newstartrecdate) {
                    while (reced >= newstartrecdate) {
                        newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                        occnew = parseInt(occnew) + parseInt(1);
                    }
                    occurences = occnew;
                } else {
                    occurences = 0;
                }
                if (occurences > 54) {
                    occurences = 12;
                    $("#rdObligationNewEndOccurence").attr('disabled', true);
                    $('#rdObligationNewEndOccurence').removeAttr('checked');
                    $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                    userFlagObli = false;
                    $('#lblerrorreclimitObligation').css('display', '');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                } else {
                    $('#lblerrorreclimitObligation').css('display', 'none');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }
                recurenceCustomString = recst.getFullYear();
            }
            startDateNew = new Date(Number(recst.getFullYear()), Number(recst.getMonth()), Number(recst.getDate()), Number(00), Number(00), Number(00), Number(00));
            startDateNew = formatDate(startDateNew);
        } else {
            occurences = $("#txtOccurrenceCount").val();
            recurence = $("#ddlObligationOccurencess").val();
            recurenceCustomString = "";
            if (customstring != "") {
                recurenceCustomString = customstring;
            } else {
                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                    recurenceCustomString += (this.value) + ",";
                });
                recurenceCustomString = removeLastChar(recurenceCustomString, ',');
            }
            startDateNew = formatDate(listObligationNewStartDate);
        }
        if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlRepeatMonthly option:selected").val();
        }
        if (occurences > 0) {
            getOcurrenceValuesForObligation(recurence, occurences, startDateNew, recurenceCustomString, customstringnew)
        } else {
            swal("", "contract is expired by selected date.");
        }
    } else {
        occurences = $("#txtOccurrenceCount").val();
        recurence = $("#ddlObligationOccurencess").val();
        recurenceCustomString = "";
        if (customstring != "") {
            recurenceCustomString = customstring;
        } else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }
        startDateNew = formatDate(listObligationNewStartDate);
        if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlRepeatMonthly option:selected").val();
        }
        getOcurrenceValuesForObligation(recurence, occurences, startDateNew, recurenceCustomString, customstringnew)
    }
}

$("input:radio[name=SelectOccurenceEndDate]").change(function () {
    var recurenceCustomString = "";
    var Cus = "";
    var date = new Date($("#dtObligationNewOccurrenceDueDate").val())
    var ocurrTxtnew = $("#ddlObligationOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
    } else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
    } else {
        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }
    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetObligationDataFinal(Cus);
    } else {
        userFlagObli = false;
        var recurenceCustomString = "";
        if (Cus != "") {
            recurenceCustomString = Cus;
        } else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }
        var cusRecMonthstring = "";
        if ($("#ddlObligationOccurencess").val() == "Monthly") {
            cusRecMonthstring = $("#ddlRepeatMonthly option:selected").val();
        }
        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, recurenceCustomString, cusRecMonthstring);
    }
});

$("#txtOccurrenceCount").focusout(function () {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    if ($("#txtOccurrenceCount").val() != "" && $('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
        if (parseInt($("#txtOccurrenceCount").val()) == 0) {
            $('#lblerrorreclimitObligationNotZero').css('display', '');
            $('#lblerrorreclimitObligation').css('display', 'none');
        } else {
            $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                $('#lblerrorreclimitObligation').css('display', '');
            } else {
                var date = new Date(fObligationNewDueDate);
                var Cus = "";
                var cusRecMon = "";
                var ocurrTxtnew = $("#ddlObligationOccurencess").val();
                if (ocurrTxtnew == "Monthly") {
                    Cus = date.getDay();
                    cusRecMon = $("#ddlRepeatMonthly option:selected").val();
                } else if (ocurrTxtnew == "Yearly") {
                    Cus = date.getFullYear();
                } else {
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        Cus += (this.value) + ",";
                    });
                    Cus = removeLastChar(Cus, ',');
                }
                occurences = $("#txtOccurrenceCount").val();
                recurence = $("#ddlObligationOccurencess").val();
                recurenceCustomString = "";
                if (Cus != "") {
                    recurenceCustomString = Cus;
                } else {
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        recurenceCustomString += (this.value) + ",";
                    });
                    recurenceCustomString = removeLastChar(recurenceCustomString, ',');
                }
                getOcurrenceValuesForObligation(recurence, occurences, listObligationNewStartDate, recurenceCustomString, cusRecMon);
            }
        }
    }
});

$("#dtObligationNewDueDate").focusout(function () {
    if ($("#dtObligationNewDueDate").val() != "") {
        document.getElementById("ddlObligationOccurencess").disabled = false;
    } else {
        document.getElementById("ddlObligationOccurencess").disabled = true;
    }
});

$("input:checkbox[name=chkRecurrenceCustom]").change(function () {
    recurenceCustomString = "";
    var Cus = "";
    var cusRecMon = "";
    var ocurrTxtnew = $("#ddlObligationOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        cusRecMon = $("#ddlRepeatMonthly option:selected").val();
    } else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
    } else {
        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }
    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {
        GetObligationDataFinal(Cus);
    } else {
        recurenceCustomString = "";
        if (Cus != "") {
            recurenceCustomString = Cus;
        } else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }
        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, recurenceCustomString, cusRecMon);
    }
});

$('#addObligationCatalogpopup').click(function () {
    clearobligationcatalogs();
    $("#productcompleteddate").css('display', 'none');
    $('#dtObligationProductCompletedDate').removeClass('validelement');
    $('#dtObligationProductCompletedDate').removeClass('validdate');
    $('#dtObligationProductCompletedDate').val("");
    if ($('#hdnProductUpdates').text() == "EDIT") {
        $('#hdnProductUpdates').text('');
        $('#hdnProductUpdates').text('EDITCATALOG');
    }
    $("#hdncatalogselect").val("SINGLE");
    var text = $("#hdnBaseContractCurrency").text();
    if (text != "") {
        $("#CurrencyExpected").text(text);
        $("#CurrencyActual").text(text);
    } else {
        $("#CurrencyExpected").text($('#hdnBaseCurrency').val());
        $("#CurrencyActual").text($('#hdnBaseCurrency').val());
    }
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $('#obligationcatalogsAddPopup').dialog('open', 'title', '');
});

$('#addObligationCatalogMultipopup').click(function () {
    $("#hdncatalogselect").val("MULTIPLE");
    if ($('#tbodyExistingMulProducts tr').length <= 0) {
        getProducts();
    } else {
        clearObligationproductsmul();
        $('#loadProduct').empty();
        $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsMulPopup").dialog("open");
    }
});

function AddObligationProduct() {
    var vProduct = "";
    var vProductID = "";
    $('input:radio[name="ExtProducts"]:checked').each(function () {
        if (vProduct == "") {
            vProduct = this.value;
            vProductID = this.id;
        } else {
            vProduct += "; " + this.value;
            vProductID += "; " + this.id;
        }
    });
    if (vProduct != "") {
        if ($("#hdncatalogselect").val() == "QUICK") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductUnits').text();
            if (Units != null && Units != "" && Units != "null") {
                $('#ddlObligationCatalogUnitsInline').val(Units);
            } else {
                $('#ddlObligationCatalogUnitsInline').val("0");
            }
            $('#txtObligationCatalogTitleInline').val(vProduct);
        } else if ($("#hdncatalogselect").val() == "SINGLE") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductUnits').text();
            var Price = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();
            var ProductCurrency = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductCurrency').text();
            if (Price != null && Price != "" && Price != "null" && Price != 0) {
                $('#txtObligationProductAmountNewEdit').autoNumeric('set', Price);
                $('#txtObligationProductAmountNew').autoNumeric('set', Price);
                if (ProductCurrency == "" || ProductCurrency == null) { } else {
                    $("#CurrencyExpected").text(ProductCurrency);
                    $("#CurrencyActual").text(ProductCurrency);
                }
            } else {
                $('#txtObligationProductAmountNewEdit').val("");
                $('#txtObligationProductAmountNew').val("");
            }
            if (Units != null && Units != "" && Units != "null") {
                $('#ddlObligationCatalogUnitsEdit').val(Units);
                $('#ddlObligationCatalogUnits').val(Units);
                $('#ddlObligationCatalogUnitsNew').val(Units);
                $('#ddlObligationCatalogUnitsNewEdit').val(Units);
            } else {
                $('#ddlObligationCatalogUnitsEdit').val("0");
                $('#ddlObligationCatalogUnits').val("0");
                $('#ddlObligationCatalogUnitsNew').val("0");
                $('#ddlObligationCatalogUnitsNewEdit').val("0");
            }
            $('#txtObligationCatalogName').val(vProduct);
            $('#txtTransProductName').val(vProduct);
            $('#txtObligationCatalogNameedit').val(vProduct);
        } else if ($("#hdncatalogselect").val() == "FINANCIALSINGLE") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();
            var ProductCurrency = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductCurrency').text();
            if (Units != null && Units != "" && Units != "null" && Units != 0) {
                $('#txtObligationFinancialsAmountEdit').autoNumeric('set', Units);
                $('#txtObligationFinancialsAmount').autoNumeric('set', Units);
                if (ProductCurrency == "" || ProductCurrency == null) { } else {
                    $("#CurrencyExpected").text(ProductCurrency);
                    $("#CurrencyActual").text(ProductCurrency);
                    $("#CurrencyEditExpected").text(ProductCurrency);
                    $("#CurrencyEditActual").text(ProductCurrency);
                }
            } else {
                $('#txtObligationFinancialsAmountEdit').val("");
                $('#txtObligationFinancialsAmount').val("");
            }
            $('#txtObligationFinancialsName').val(vProduct);
            $('#txtObligationFinancialsNameedit').val(vProduct);
        } else if ($("#hdncatalogselect").val() == "FINANCIALQUICK") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();
            if (Units != null && Units != "" && Units != "null" && Units != 0) {
                $('#txtObligationFinancialAmountInline').val(Units);
            } else {
                $('#txtObligationFinancialAmountInline').val("");
            }
            $('#txtObligationFinancialsTitleInline').val(vProduct);
        }
        return true;
    } else {
        swal("", "No Product has been selected.");
        return false;
    }
}

$('#viewObligationProductDetails').click(function () {
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        getProducts();
        clearobligationproducts();
        $('input:radio[name=ExtProducts]').each(function (i, item) {
            if ($(item).val() == $("#txtObligationCatalogName").val()) {
                $(item).prop('checked', true);
            }
        });
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
});

$('#viewObligationProductDetailsEdit').click(function () {
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
});

function SaveObligationcatalog() {
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationCatalogForm', false)) {
        var vTitle = $("#txtObligationCatalogName").val();
        $("#loadingPage").fadeIn();
        CreateObligationCatalog();
    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();
}

function CreateObligationCatalog() {
    if ($('#hdnObligationUniqueId').text() != null && $('#hdnObligationUniqueId').text() != "" && $('#hdnObligationUniqueId').text() != "null") {
        var vTitle = $("#txtObligationCatalogName").val();
        var stringUnitType = "";
        if ($("#ddlObligationCatalogUnitType").val() != "0") {
            stringUnitType = $("#ddlObligationCatalogUnitType option:selected").text();
        }
        var obliCurrency = "";
        if ($("#CurrencyActual").text() != "") {
            obliCurrency = $("#CurrencyActual").text();
        } else if ($("#CurrencyExpected").text() != "") {
            obliCurrency = $("#CurrencyExpected").text();
        } else if ($("#hdnBaseContractCurrency").text() != "") {
            obliCurrency = $("#hdnBaseContractCurrency").text();
        } else {
            obliCurrency = $("#hdnBaseCurrency").val();
        }
        var completedate = null;
        if ($("#ddlObligationCatalogStatus").find('option:selected').text() == "Complete" || $("#ddlObligationCatalogStatus").find('option:selected').text() == "Cancelled") {
            completedate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationProductCompletedDate").datepicker('getDate'));
        }
        var catalogForm = "ObligationCatalogName=" + vTitle;
        catalogForm += "&ObligationText=" + $('#hdnObligationUniqueId').text();
        catalogForm += "&ObligationID=" + $('#hdnObligationRowKey').text();
        catalogForm += "&ObligationUnits=" + $("#ddlObligationCatalogUnits option:selected").text();
        catalogForm += "&AccountID=" + localStorage.AccountID;
        catalogForm += "&CreatedBy=" + localStorage.UserName;
        catalogForm += "&ModifiedBy=" + localStorage.UserName;
        catalogForm += "&ObligationQuantity=" + $("#txtObligationCatalogQty").val();
        catalogForm += "&ObligationQtyType=" + stringUnitType;
        catalogForm += "&Description=" + $("#txtObligationCatalogDesc").val();
        catalogForm += "&ObligationCatalogStatus=" + $("#ddlObligationCatalogStatus option:selected").text();
        catalogForm += "&QuantityActual=" + $("#txtObligationCatalogQtyNew").val();
        catalogForm += "&CompletedDate=" + completedate;
        catalogForm += "&ObligationCurrency=" + obliCurrency;
        catalogForm += "&ObligationAmountType=" + $("#ddlObligationProductAmountTypeNew option:selected").text();
        catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
        catalogForm += "&AmountActual=" + $("#txtObligationProductAmountNewActual").autoNumeric('get');
        catalogForm += "&ObligationAmount=" + $("#txtObligationProductAmountNew").autoNumeric('get');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?contractid=' + vContractID,
            type: 'POST',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
            },
            data: catalogForm,
            cache: false,
            success: function (data) {
                getObligationCatalogsNew(vContractID, $('#hdnObligationUniqueId').text(), $('#hdnObligationRowKey').text());
                $("#obligationcatalogsAddPopup").dialog("close");
            },
            error: function (data) {
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        CreateObligationDuplicate();
    }
}

function CreateObligationDuplicate() {
    var catalogForm = "ObligationTitle=" + "Untitled";
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/duplicate?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (obligation) {
            $('#hdnObligationUniqueId').text(obligation.ObligationText);
            $('#hdnObligationRowKey').text(obligation.RowKey);
            CreateObligationCatalog();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

var vCatalogCount = "No";
var vFinancialCount = "No";

function getObligationCatalogsbycontract(contractid, obligationtext) {
    $("#ulObligationCatalogBody").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/obligationtxt?obligationtext=' + obligationtext,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (data.length > 0) {
                vCatalogCount = "Yes";
                $('#txtObligationProductsCount').val("Yes");
                document.getElementById('obligationcatalogDetailsTable').style.display = '';
                document.getElementById('NoObligationCatalog').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";
                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleObligationCatalogs" onclick="checkMultipleObligationCatalogs(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationCatalogDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].ObligationCatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationCatalogs"/>';
                    var htmlContent = "<tr>";
                    htmlContent += "<td><p id='ObligationCatalogID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='ObligationCatalogTitle' style='display:none;'>" + data[i].ObligationCatalogName + "</span>";
                    htmlContent += "<span id='ObligationCatalogObligationText' style='display:none;'>" + data[i].ObligationText + "</span>";
                    htmlContent += "<span id=''ObligationCatalogUnits' style='display:none;'>" + data[i].ObligationUnits + "</span>";
                    htmlContent += "<span id=''ObligationCatalogQty' style='display:none;'>" + data[i].ObligationQuantity + "</span>";
                    htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                    if (data[i].ObligationQuantity != "" && data[i].ObligationQuantity != null) {
                        htmlContent += "<td><span style='margin-left: 10px;float:left' id='ObligationQty" + data[i].RowKey + "'>" + data[i].ObligationQuantity + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if (data[i].QuantityActual != "" && data[i].QuantityActual != null && data[i].QuantityActual != "null") {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='QuantityActual" + data[i].RowKey + "'>" + data[i].QuantityActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if (data[i].ObligationAmount != "" && data[i].ObligationAmount != null && data[i].ObligationAmount != "0" && data[i].ObligationAmount != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='ObligationAmount" + data[i].RowKey + "'>" + data[i].ObligationAmount + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if (data[i].AmountActual != "" && data[i].AmountActual != null && data[i].AmountActual != "0" && data[i].AmountActual != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='AmountActual" + data[i].RowKey + "'>" + data[i].AmountActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                        if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                            htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "</a></td>";
                        } else {
                            htmlContent += "<td style='padding:2px;'><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + data[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                        }
                    } else
                        htmlContent += "<td><a href='javascript:void(0);'  class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                    htmlContent += "</tr>";
                    $("#ulObligationCatalogBody").append(htmlContent);
                }
                $(".openmenuRelatedObligationCatalogs").contextMenu({
                    menu: 'dropdownMenuRelatedObligationCatalogs',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuObligationCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                });
                $(".openmenuObligationCatalogStatusSettings").contextMenu({
                    menu: 'dropdownMenuObligationStatusSettings',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuObligationCatalogStatusSettings(action, el.parent("tr"), pos);
                });
            } else { }
        },
        error: function (data) {
            document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
            vCatalogCount = "No";
            $('#NoObligationCatalog').css('display', '');
            $('#txtObligationProductsCount').val("No");
            $("#loadingPage").fadeOut();
            vExist = false;
        }
    });
}

function getObligationCatalogsNew(contractid, obligationtext, obligationId) {
    $("#ulObligationCatalogBody").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?obligationtext=' + obligationtext + '&obligationId=' + obligationId,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (data.length > 0) {
                var d = $.grep(data, function (p) {
                    return p.ObligationCatalogStatus != "Complete" && p.ObligationCatalogStatus != "Cancelled";
                })
                    .map(function (p) {
                        return p
                    });
                if (d != null && d != "" && d.length > 0) {
                    validateproducts = false;
                } else {
                    validateproducts = true;
                }
                vCatalogCount = "Yes";
                $('#txtObligationProductsCount').val("Yes");
                document.getElementById('obligationcatalogDetailsTable').style.display = '';
                document.getElementById('NoObligationCatalog').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";
                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleObligationCatalogs" onclick="checkMultipleObligationCatalogs(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationCatalogDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].ObligationCatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationCatalogs"/>';
                    var htmlContent = "<tr>";
                    htmlContent += "<td><p id='ObligationCatalogID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='ObligationCatalogTitle' style='display:none;'>" + data[i].ObligationCatalogName + "</span>";
                    htmlContent += "<span id='ObligationCatalogObligationText' style='display:none;'>" + data[i].ObligationText + "</span>";
                    htmlContent += "<span id=''ObligationCatalogUnits' style='display:none;'>" + data[i].ObligationUnits + "</span>";
                    htmlContent += "<span id=''ObligationCatalogQty' style='display:none;'>" + data[i].ObligationQuantity + "</span>";
                    htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                    if (data[i].ObligationQuantity != "" && data[i].ObligationQuantity != null) {
                        htmlContent += "<td><span style='margin-left: 10px;float:left' id='ObligationQty" + data[i].RowKey + "'>" + data[i].ObligationQuantity + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if (data[i].QuantityActual != "" && data[i].QuantityActual != null && data[i].QuantityActual != "null") {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='QuantityActual" + data[i].RowKey + "'>" + data[i].QuantityActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if (data[i].ObligationAmount != "" && data[i].ObligationAmount != null && data[i].ObligationAmount != "0" && data[i].ObligationAmount != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='ObligationAmount" + data[i].RowKey + "'>" + data[i].ObligationAmount + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if (data[i].AmountActual != "" && data[i].AmountActual != null && data[i].AmountActual != "0" && data[i].AmountActual != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='AmountActual" + data[i].RowKey + "'>" + data[i].AmountActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";
                    } else {
                        htmlContent += '<td style="text-align: center;"> - </td>';
                    }
                    if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                        if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                            htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "</a></td>";
                        } else {
                            htmlContent += "<td style='padding:2px;><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + data[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                        }
                    } else
                        htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "</a></td>";
                    htmlContent += "</tr>";
                    $("#ulObligationCatalogBody").append(htmlContent);
                }
                $(".openmenuRelatedObligationCatalogs").contextMenu({
                    menu: 'dropdownMenuRelatedObligationCatalogs',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuObligationCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                });
                $(".openmenuObligationCatalogStatusSettings").contextMenu({
                    menu: 'dropdownMenuObligationStatusSettings',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuObligationCatalogStatusSettings(action, el.parent("tr"), pos);
                });
            } else { }
        },
        error: function (data) {
            document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
            vCatalogCount = "No";
            $('#NoObligationCatalog').css('display', '');
            validateproducts = true;
            $('#txtObligationProductsCount').val("No");
            $("#loadingPage").fadeOut();
            vExist = false;
        }
    });
}

function GetObligationCatalogs() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (dataUser) {


            listAllObligationCatalogs = dataUser;
            BindObligationsNew(vContractID);

        },
        error:
            function (dataUser) {
                listAllObligationCatalogs = "";
                BindObligationsNew(vContractID);
            }
    });
}

function SaveMulObligationCatalogsProducts() {
    $("#loadingPage").fadeIn();
    $('input:checkbox[name="ExtProductsMul"]:checked').each(function () {
        var vProduct = this.value;
        var vProductID = this.id;
        var Units = "";
        var Price = "";
        var Currency = "";
        if ($(this).parent().parent().find('#ProductUnits').text() != null && $(this).parent().parent().find('#ProductUnits').text() != "" && $(this).parent().parent().find('#ProductUnits').text() != "null") {
            Units = $(this).parent().parent().find('#ProductUnits').text();
        }
        if ($(this).parent().parent().find('#ProductPrice').text() != null && $(this).parent().parent().find('#ProductPrice').text() != "" && $(this).parent().parent().find('#ProductPrice').text() != "null" && $(this).parent().parent().find('#ProductPrice').text() != 0) {
            Price = $(this).parent().parent().find('#ProductPrice').text();
        }
        if ($("#hdncatalogselect").val() == "MULTIPLE") {
            var catalogForm = "ObligationCatalogName=" + vProduct;
            catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
            catalogForm += "&ObligationUnits=" + Units;
            catalogForm += "&AccountID=" + localStorage.AccountID;
            catalogForm += "&CreatedBy=" + localStorage.UserName;
            catalogForm += "&ModifiedBy=" + localStorage.UserName;
            catalogForm += "&ObligationQuantity=" + "";
            catalogForm += "&ObligationQtyType=" + "";
            catalogForm += "&Description=" + "";
            catalogForm += "&ObligationCatalogStatus=" + "";
            catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
            catalogForm += "&ObligationAmountType=" + "";
            catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
            catalogForm += "&AmountActual=" + "";
            catalogForm += "&ObligationAmount=" + Price;
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?contractid=' + vContractID,
                type: 'POST',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                },
                data: catalogForm,
                cache: false,
                success: function (data) { },
                error: function (data) {
                    $("#loadingPage").fadeOut();
                }
            });
        } else {
            var catalogForm = "ObligationFinancialsName=" + vProduct;
            catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
            catalogForm += "&ObligationAmount=" + Price;
            catalogForm += "&AccountID=" + localStorage.AccountID;
            catalogForm += "&CreatedBy=" + localStorage.UserName;
            catalogForm += "&ModifiedBy=" + localStorage.UserName;
            catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
            catalogForm += "&ObligationAmountType=" + "";
            catalogForm += "&Description=" + "";
            catalogForm += "&ObligationFinancialsStatus=" + "";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?contractid=' + vContractID,
                type: 'POST',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                },
                data: catalogForm,
                cache: false,
                success: function (data) { },
                error: function (data) {
                    $("#loadingPage").fadeOut();
                }
            });
        }
    });
    if ($("#hdncatalogselect").val() == "MULTIPLE") {
        getObligationCatalogsbycontract(vContractID, $("#txtObligationNewText").val());
    } else {
        getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
    }
}

var multipleObligationProductsChecks = "";

function checkMultipleObligationCatalogs(object) {
    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#obligationCatalogAction").css('display', '');
        multipleObligationProductsChecks = multipleObligationProductsChecks + ';' + CatalogID;
    } else {
        multipleObligationProductsChecks = multipleObligationProductsChecks.replace(';' + CatalogID, '');
    }
    if (multipleObligationProductsChecks.trim() == "") {
        $("#obligationCatalogAction").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    } catch (ex) { }
}

function contextMenuObligationCatalogMul(action, el, pos) {
    switch (action) {
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationscatalogs?catalogids=' + multipleObligationProductsChecks,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                cache: false,
                                success: function (data) {
                                    multipleObligationProductsChecks = "";
                                    $("#obligationCatalogAction").css('display', 'none');
                                    $("#loadingPage").fadeOut();
                                    getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                                }
                            });
                        }
                        return;
                    });
                break;
            }
    }
}

$('#btnAddObligationCatalogInline').click(function () {
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationCatalogInline', false)) {
        var vTitle = $("#txtObligationCatalogName").val();
        $("#loadingPage").fadeIn();
        CreateObligationCatalogQuick();
    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();
});

function CreateObligationCatalogQuick() {
    var vTitle = $("#txtObligationCatalogTitleInline").val();
    var catalogForm = "ObligationCatalogName=" + vTitle;
    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationUnits=" + $("#ddlObligationCatalogUnitsInline option:selected").text();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationQuantity=" + $("#txtObligationCatalogQtyInline").val();
    catalogForm += "&ObligationQtyType=" + $("#ddlObligationCatalogInlineUnitsType option:selected").text();
    catalogForm += "&Description=" + "";
    catalogForm += "&ObligationCatalogStatus=" + $("#ddlObligationCatalogStatusInline option:selected").text();
    catalogForm += "&QuantityActual=" + "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            togglediv('tblObligationCatalog', '', '');
            getObligationCatalogsbycontract(vContractID, $("#txtObligationNewText").val());
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function viewObligationCatalogProductsQuick() {
    $("#hdncatalogselect").val("QUICK");
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
}

function viewObligationFinancialsProductsQuick() {
    $("#hdncatalogselect").val("FINANCIALQUICK");
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
}

$('#addObligationFinancialspopup').click(function () {
    clearobligationfinancials();
    $("#hdncatalogselect").val("FINANCIALSINGLE");
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $('#obligationfinancialsAddPopup').dialog('open');
});

$('#addObligationFinancialsMultipopup').click(function () {
    $("#hdncatalogselect").val("FINANCIALMULTIPLE");
    if ($('#tbodyExistingMulProducts tr').length <= 0) {
        getProducts();
    } else {
        clearObligationproductsmul();
        $('#loadProduct').empty();
        $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsMulPopup").dialog("open");
    }
});

function SaveObligationfinancials() {
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationFinancialsForm', false)) {
        var vTitle = $("#txtObligationFinancialsName").val();
        $("#loadingPage").fadeIn();
        CreateObligationFinancial();
    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();
}

function CreateObligationFinancial() {
    var vTitle = $("#txtObligationFinancialsName").val();
    var catalogForm = "ObligationFinancialsName=" + vTitle;
    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationAmount=" + $("#txtObligationFinancialsAmount").val();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationFinancialsAmountType option:selected").text();
    catalogForm += "&Description=" + $("#txtObligationFinancialsDesc").val();
    catalogForm += "&ObligationFinancialsStatus=" + $("#ddlObligationFinancialsStatus option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
            $("#obligationfinancialsAddPopup").dialog("close");
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function getObligationFinancialsbycontract(contractid, obligationtext) {
    $("#ulObligationFinancialsBody").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/obligationtxt?obligationtext=' + obligationtext,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (data.length > 0) {
                vFinancialCount = "Yes";
                $('#txtObligationFinancialsCount').val("Yes");
                document.getElementById('obligationFinancialsDetailsTable').style.display = '';
                document.getElementById('NoObligationFinantials').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";
                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleObligationFinancials" onclick="checkMultipleObligationFinancials(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationFinancialsDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].ObligationFinancialsName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationFinancials"/>';
                    var htmlContent = "<tr>";
                    htmlContent += "<td  ><span >&nbsp;</span><p id='FinancialsID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='ObligationFinancialsTitle' style='display:none;'>" + data[i].ObligationFinancialsName + "</span>";
                    htmlContent += "<span id='ObligationFinancialsObligationText' style='display:none;'>" + data[i].ObligationText + "</span>";
                    htmlContent += "<span id=''ObligationFinancialsAmount' style='display:none;'>" + data[i].ObligationAmount + "</span>";
                    htmlContent += "<span id=''ObligationFinancialsAmountType' style='display:none;'>" + data[i].ObligationAmountType + "</span>";
                    htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                    htmlContent += "<td ><span style='margin-left: 10px;float: left;'  id='ObligationAmount" + data[i].RowKey + "'>" + data[i].ObligationAmount + "</span>&nbsp;<lable style='float:left;margin-left: 10px;'> (" + $("#hdnContractCurrency").text() + ") </lable></td>";
                    htmlContent += "<td  ><lable id='ObligationStatus" + data[i].RowKey + "'>" + data[i].ObligationFinancialsStatus + "</lable></td>"
                    htmlContent += "</tr>";
                    $("#ulObligationFinancialsBody").append(htmlContent);
                }
                $(".openmenuRelatedObligationFinancials").contextMenu({
                    menu: 'dropdownMenuRelatedObligationFinancials',
                    leftButton: true
                }, function (action, el, pos) {
                    contextMenuObligationFinancials(action, el.parent("i").parent("td").parent("tr"), pos);
                });
            } else { }
        },
        error: function (data) {
            document.getElementById("cbObligationCatalogFinancialsSelect").disabled = false;
            vFinancialCount = "No";
            $('#NoObligationFinantials').css('display', '');
            $('#txtObligationFinancialsCount').val("No");
            $("#loadingPage").fadeOut();
            vExist = false;
        }
    });
}

var multipleObligationFinancialsChecks = "";

function checkMultipleObligationFinancials(object) {
    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#obligationFinancialsAction").css('display', '');
        multipleObligationFinancialsChecks = multipleObligationFinancialsChecks + ';' + CatalogID;
    } else {
        multipleObligationFinancialsChecks = multipleObligationFinancialsChecks.replace(';' + CatalogID, '');
    }
    if (multipleObligationFinancialsChecks.trim() == "") {
        $("#obligationFinancialsAction").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    } catch (ex) { }
}

function contextMenuObligationFinancialsMul(action, el, pos) {
    switch (action) {
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var multipleChecksArray = multipleObligationFinancialsChecks.split(';');
                            var multipleChecksArraylength = multipleChecksArray.length;
                            for (var i = 1; i < multipleChecksArraylength; i++) {
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?catalogid=' + multipleChecksArray[i],
                                    type: 'DELETE',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey,
                                        username: localStorage.UserName
                                    },
                                    cache: false,
                                    success: function (data) { }
                                });
                            }
                            swal("", "Items Deleted");
                            getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
                            $("#obligationFinancialsAction").css('display', 'none');
                            $("#loadingPage").fadeOut();
                        }
                        return;
                    });
                break;
            }
    }
}

$('#viewObligationFinancialsProductDetails').click(function () {
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
});

$('#btnAddObligationFinancialsInline').click(function () {
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationFinancialsInline', false)) {
        var vTitle = $("#txtObligationFinancialsTitleInline").val();
        $("#loadingPage").fadeIn();
        CreateObligationFinancialQuick();
    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();
});

function CreateObligationFinancialQuick() {
    var vTitle = $("#txtObligationFinancialsTitleInline").val();
    var catalogForm = "ObligationFinancialsName=" + vTitle;
    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationAmount=" + $("#txtObligationFinancialAmountInline").val();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationFinancialsInlineAmountType option:selected").text();
    catalogForm += "&Description=" + "";
    catalogForm += "&ObligationFinancialsStatus=" + $("#ddlObligationFinancialsStatusInline option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            swal("", "Item Added");
            togglediv('tblObligationFinancials', '', '');
            getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function contextMenuObligationCatalogs(action, el, pos) {
    switch (action) {
        case "view":
            {
                var catalogId = $(el).find("#ObligationCatalogID").text();
                ViewObligationCatalogDetail(catalogId);
                break;
            }
        case "delete":
            {
                var catalogTitle = $(el).find("#ObligationCatalogTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + catalogTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var catalogId = $(el).find("#ObligationCatalogID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + catalogId,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                "Content-Type": "application/json",
                                cache: false,
                                success: function (data) {
                                    if ($('#hdnProductUpdates').text() == "EDIT") {
                                        $('#hdnProductUpdates').text('');
                                        $('#hdnProductUpdates').text('EDITCATALOG');
                                    }
                                    getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                                },
                                complete: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#ObligationCatalogID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + catalogId,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {
                        if ($('#hdnProductUpdates').text() == "EDIT") {
                            $('#hdnProductUpdates').text('');
                            $('#hdnProductUpdates').text('EDITCATALOG');
                        }
                        $('#obliCatalogQtyEditsummary').text('');
                        $("#txtObligationCatalogNameedit").prop('disabled', true);
                        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
                        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
                        $("#txtObligationCatalogQtyNewEdit").val('');
                        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                        $("#txtObligationProductAmountNewActualEdit").val('');
                        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
                        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                        $("#lblObligationCatalogCTitleEdit").text($("#lblContractTitle").text());
                        $("#txtObligationCatalogIDedit").val(cataloentity.RowKey);
                        $("#txtObligationCatalogNameedit").val(cataloentity.ObligationCatalogName);
                        if (cataloentity.ObligationUnits != "" && cataloentity.ObligationUnits != null) {
                            $("#ddlObligationCatalogUnitsEdit").val(cataloentity.ObligationUnits);
                            $("#ddlObligationCatalogUnitsNewEdit").val(cataloentity.ObligationUnits);
                        } else {
                            $("#ddlObligationCatalogUnitsEdit").val("0");
                            $("#ddlObligationCatalogUnitsNewEdit").val("0");
                        }
                        if (cataloentity.ObligationCatalogStatus != "" && cataloentity.ObligationCatalogStatus != null) {
                            if (cataloentity.ObligationCatalogStatus == "Complete") {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);
                                if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {
                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
                                } else {
                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                                }
                                if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {
                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')
                                } else {
                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                                }
                            } else {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val("");
                                $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                                $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                            }
                        } else {
                            $("#ddlObligationCatalogStatusEdit").val(0);
                            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
                            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                        }
                        if (cataloentity.Description != "" && cataloentity.Description != null) {
                            $("#txtObligationCatalogDescEdit").val(cataloentity.Description);
                        } else {
                            $("#txtObligationCatalogDescEdit").val("");
                        }
                        if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {
                            $("#txtObligationCatalogQtyEdit").val(cataloentity.ObligationQuantity);
                        } else {
                            $("#txtObligationCatalogQtyEdit").val("");
                        }
                        if (cataloentity.ObligationQtyType != "" && cataloentity.ObligationQtyType != null) {
                            $("#ddlObligationCatalogUnitTypeEdit").val(cataloentity.ObligationQtyType);
                        } else {
                            $("#ddlObligationCatalogUnitTypeEdit").val(0);
                        }
                        if (cataloentity.QuantityActual != "" && cataloentity.QuantityActual != null) {
                            $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);
                            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
                            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');
                            var string1 = "";
                            string1 = "Quantity Actual vs Expected, ";
                            if (parseInt(cataloentity.QuantityActual) >= parseInt(cataloentity.ObligationQuantity)) {
                                string1 += encodeURIComponent("+" + parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity));
                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_dec');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_act');
                            } else {
                                string1 += parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity);
                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_act');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_dec');
                            }
                            $("#obliCatalogQtyEditsummary").text(string1);
                        } else {
                            $("#txtObligationCatalogQtyNewEdit").val("");
                            $("#obliCatalogQtyEditsummary").text("");
                        }
                        var text = cataloentity.ObligationCurrency;
                        if (text != "") {
                            $("#CurrencyEditExpected").text(text);
                            $("#CurrencyEditActual").text(text);
                        } else if ($('#hdnContractCurrency').text() != "") {
                            $("#CurrencyEditExpected").text($('#hdnContractCurrency').text());
                            $("#CurrencyEditActual").text($('#hdnContractCurrency').text());
                        } else {
                            $("#CurrencyEditExpected").text($('#hdnBaseCurrency').val());
                            $("#CurrencyEditActual").text($('#hdnBaseCurrency').val());
                        }
                        if (cataloentity.ObligationAmountType != "" && cataloentity.ObligationAmountType != null) {
                            $("#ddlObligationProductAmountTypeNewEdit").val(cataloentity.ObligationAmountType);
                        } else {
                            $("#ddlObligationProductAmountTypeNewEdit").val(0);
                        }
                        if (cataloentity.ObligationAmount != "" && cataloentity.ObligationAmount != null && cataloentity.ObligationAmount != "0" && cataloentity.ObligationAmount != 0) {
                            $('#txtObligationProductAmountNewEdit').autoNumeric('set', cataloentity.ObligationAmount);
                        } else {
                            $("#txtObligationProductAmountNewEdit").val("");
                        }
                        if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {
                            $('#txtObligationProductAmountNewActualEdit').autoNumeric('set', cataloentity.AmountActual);
                            var string1 = "";
                            string1 = "Amount Actual vs Expected, ";
                            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
                            var currency1 = cataloentity.ObligationAmount;
                            var currency2 = cataloentity.AmountActual;
                            string1 = "Amount Actual vs Expected, ";
                            $('#catalogAmountsumaryTitleEdit').text(string1);
                            if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {
                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_act')
                            } else {
                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_dec')
                            }
                        } else {
                            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
                            $("#txtObligationProductAmountNewActualEdit").val("");
                            $('#catalogAmountsumaryValueEdit').text('');
                            $('#catalogAmountsumaryTitleEdit').text('');
                        }
                        if (cataloentity.ObligationCatalogStatus == "Complete" || cataloentity.ObligationCatalogStatus == "Cancelled") {
                            if (cataloentity.CompletedDate != null && cataloentity.CompletedDate != "") {
                                var CDate;
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    CDate = moment(new Date(cataloentity.CompletedDate)).format('MM/DD/YYYY');
                                } else {
                                    CDate = moment(new Date(cataloentity.CompletedDate)).format(localStorage.AppDateFormat);
                                }
                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);
                            } else {
                                var CDate = new Date();
                                CDate = formatDate(CDate);
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    CDate = moment(new Date(CDate)).format('MM/DD/YYYY');
                                } else {
                                    CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat);
                                }
                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);
                            }
                        } else {
                            $("#productcompleteddateEdit").css('display', 'none');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validelement');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validdate');
                            $('#dtObligationProductCompletedDateEdit').val("");
                        }
                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });
                $("#obligationcatalogseditPopup").dialog("option", "title", "");
                $("#obligationcatalogseditPopup").dialog("open");
                break;
            }
    }
}

function ViewObligationCatalogDetail(catalogid) {
    $("#loadingPage").fadeIn();
    $('#tblObligationCatalogMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> Loading...</td></tr>');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + catalogid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            username: localStorage.UserName
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (catalogentity) {
            $("#loadingPage").fadeOut();
            if (catalogentity != null) {
                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width40">Catalog Title</td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationCatalogName + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Units </td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationUnits + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Quantity</td>';
                vMetadata += '<td class="text width60">';
                if (catalogentity.ObligationQuantity != '') {
                    vMetadata += catalogentity.ObligationQuantity + " ( " + catalogentity.ObligationQtyType + " )";
                }
                vMetadata += '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Status</td>';
                if (catalogentity.ObligationCatalogStatus != null) {
                    var vDueDate = catalogentity.ObligationCatalogStatus;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Description</td>';
                if (catalogentity.Description != null) {
                    var vDueDate = catalogentity.Description;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';
                $("#tblObligationCatalogMetadataDetail").html(vMetadata);
                setBlankValueToHyphen("tblObligationCatalogMetadataDetail");
                $("#obligationcatalogsViewPopup").dialog("option", "title", "View Catalog");
                $("#obligationcatalogsViewPopup").dialog("open");
                $("#obligationcatalogsViewPopup").height("auto");
            }
        }
    });
}

function contextMenuObligationFinancials(action, el, pos) {
    switch (action) {
        case "view":
            {
                var catalogId = $(el).find("#FinancialsID").text();
                ViewObligationFinancialsDetail(catalogId);
                break;
            }
        case "delete":
            {
                var catalogTitle = $(el).find("#ObligationFinancialsTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + catalogTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var catalogId = $(el).find("#FinancialsID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?catalogid=' + catalogId,
                                type: 'DELETE',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey,
                                    username: localStorage.UserName
                                },
                                "Content-Type": "application/json",
                                cache: false,
                                success: function (data) {
                                    swal("", "Item Deleted");
                                    getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
                                },
                                complete: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#FinancialsID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?financialid=' + catalogId,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {
                        $("#lblObligationFinancialsCTitleEdit").text($("#lblContractTitle").text());
                        $("#txtObligationFinancialsIDedit").val(cataloentity.RowKey);
                        $("#txtObligationFinancialsNameedit").val(cataloentity.ObligationFinancialsName);
                        if (cataloentity.Description != "" && cataloentity.Description != null) {
                            $("#txtObligationFinancialsDescEdit").val(cataloentity.Description);
                        } else {
                            $("#txtObligationFinancialsDescEdit").val("");
                        }
                        if (cataloentity.ObligationAmount != "" && cataloentity.ObligationAmount != null) {
                            $("#txtObligationFinancialsAmountEdit").val(cataloentity.ObligationAmount);
                        } else {
                            $("#txtObligationFinancialsAmountEdit").val("");
                        }
                        if (cataloentity.ObligationFinancialsStatus != "" && cataloentity.ObligationFinancialsStatus != null) {
                            $("#ddlObligationFinancialsStatusEdit").val(cataloentity.ObligationFinancialsStatus);
                        } else {
                            $("#ddlObligationFinancialsStatusEdit").val(0);
                        }
                        if (cataloentity.ObligationAmountType != "" && cataloentity.ObligationAmountType != null) {
                            $("#ddlObligationFinancialsAmountTypeEdit").val(cataloentity.ObligationAmountType);
                        } else {
                            $("#ddlObligationFinancialsAmountTypeEdit").val(0);
                        }
                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });
                $("#obligationfinancialseditPopup").dialog("option", "title", "Edit Financials");
                $("#obligationfinancialseditPopup").dialog("open");
                break;
            }
    }
}

function ViewObligationFinancialsDetail(catalogid) {
    $("#loadingPage").fadeIn();
    $('#tblObligationFinancialsMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> Loading...</td></tr>');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?financialid=' + catalogid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            username: localStorage.UserName
        },
        "Content-Type": "application/json",
        cache: false,
        success: function (catalogentity) {
            $("#loadingPage").fadeOut();
            if (catalogentity != null) {
                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width40">Financial Title</td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationFinancialsName + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Currency </td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationCurrency + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Amount</td>';
                vMetadata += '<td class="text width60">';
                if (catalogentity.ObligationAmount != '') {
                    vMetadata += catalogentity.ObligationAmount + " ( " + catalogentity.ObligationAmountType + " )";
                }
                vMetadata += '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Status</td>';
                if (catalogentity.ObligationFinancialsStatus != null) {
                    var vDueDate = catalogentity.ObligationFinancialsStatus;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Description</td>';
                if (catalogentity.Description != null) {
                    var vDueDate = catalogentity.Description;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';
                $("#tblObligationFinancialsMetadataDetail").html(vMetadata);
                setBlankValueToHyphen("tblObligationFinancialsMetadataDetail");
                $("#obligationFinancialsViewPopup").dialog("option", "title", "View Catalog");
                $("#obligationFinancialsViewPopup").dialog("open");
                $("#obligationFinancialsViewPopup").height("auto");
            }
        }
    });
}

function UpdateObligationcatalog() {
    $("#loadingPage").fadeIn();
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationCatalogFormEdit', false)) {
        var vTitle = $("#txtObligationCatalogNameedit").val();
        var vCatalogId = $("#txtObligationCatalogIDedit").val();
        UpdateObligationCatalogNew();
    } else {
        $("#loadingPage").fadeOut();
    }
    $("#spInProgress").css('visibility', 'hidden');
}

function UpdateObligationCatalogNew() {
    var vTitle = $("#txtObligationCatalogNameedit").val();
    var vCatalogId = $("#txtObligationCatalogIDedit").val();
    var obliCurrency = "";
    if ($("#hdnContractCurrency").text() != "") {
        obliCurrency = $("#hdnContractCurrency").text();
    } else if ($("#hdnBaseCurrency").val() != "") {
        obliCurrency = $("#hdnBaseCurrency").val();
    } else {
        obliCurrency = "USD";
    }
    var completedate = null;
    if ($("#ddlObligationCatalogStatusEdit").find('option:selected').text() == "Complete" || $("#ddlObligationCatalogStatusEdit").find('option:selected').text() == "Cancelled") {
        completedate = $("#dtObligationProductCompletedDateEdit").val();
    }
    var catalogForm = "ObligationCatalogName=" + vTitle;
    catalogForm += "&ObligationText=" + $("#hdnObligationUniqueId").text();
    catalogForm += "&ObligationID=" + $("#hdnObligationRowKey").text();
    catalogForm += "&ObligationUnits=" + $("#ddlObligationCatalogUnitsEdit option:selected").text();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationQuantity=" + $("#txtObligationCatalogQtyEdit").val();
    catalogForm += "&ObligationQtyType=" + $("#ddlObligationCatalogUnitTypeEdit option:selected").text();
    catalogForm += "&Description=" + $("#txtObligationCatalogDescEdit").val();
    catalogForm += "&ObligationCatalogStatus=" + $("#ddlObligationCatalogStatusEdit option:selected").text();
    catalogForm += "&QuantityActual=" + $("#txtObligationCatalogQtyNewEdit").val();
    catalogForm += "&CompletedDate=" + completedate;
    catalogForm += "&ObligationCurrency=" + obliCurrency;
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationProductAmountTypeNewEdit option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
    catalogForm += "&AmountActual=" + $("#txtObligationProductAmountNewActualEdit").autoNumeric('get');
    catalogForm += "&ObligationAmount=" + $("#txtObligationProductAmountNewEdit").autoNumeric('get');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + vCatalogId,
        type: 'PUT',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#obligationcatalogseditPopup").dialog("close");
            getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function UpdateObligationfinancials() {
    $("#loadingPage").fadeIn();
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationFinancialsFormEdit', false)) {
        var vTitle = $("#txtObligationFinancialsNameedit").val();
        var vCatalogId = $("#txtObligationFinancialsIDedit").val();
        UpdateObligationfinancialsNew();
    } else {
        $("#loadingPage").fadeOut();
    }
    $("#spInProgress").css('visibility', 'hidden');
}

function UpdateObligationfinancialsNew() {
    var vTitle = $("#txtObligationFinancialsNameedit").val();
    var vCatalogId = $("#txtObligationFinancialsIDedit").val();
    var catalogForm = "ObligationFinancialsName=" + vTitle;
    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationAmount=" + $("#txtObligationFinancialsAmountEdit").val();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationFinancialsAmountTypeEdit option:selected").text();
    catalogForm += "&Description=" + $("#txtObligationFinancialsDescEdit").val();
    catalogForm += "&ObligationFinancialsStatus=" + $("#ddlObligationFinancialsStatusEdit option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?financialid=' + vCatalogId,
        type: 'PUT',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            $("#obligationfinancialseditPopup").dialog("close");
            getObligationFinancialsbycontract(vContractID, $("#hdnObligationUniqueId").text());
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function updateObligationRecurrenceNew(status) {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var fObligationNewCompletedDate = '';
    if ($("#dtObligationNewCompletedDate").val() != "" && $("#dtObligationNewCompletedDate").val() != null) {
        fObligationNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewCompletedDate").datepicker('getDate'));
    }
    var obliCurrency = "";
    if ($("#hdnContractCurrency").text() != "") {
        obliCurrency = $("#hdnContractCurrency").text();
    } else if ($("#hdnBaseCurrency").val() != "") {
        obliCurrency = $("#hdnBaseCurrency").val();
    } else {
        obliCurrency = "USD";
    }
    if (status == "SINGLE") {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            } else {
                vObligationOwner += "; " + item;
            }
        });
        if ($("#txtObligationNewTitle").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Title.");
        } else if ($("#dtObligationNewDueDate").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Due Date.");
        } else if (ObligationID != "") {
            $("#inprocessObligation").css('visibility', 'visible');
            var obligationmet = "No";
            var obligationmetby = "";
            var obligationmetdate = null;
            if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                obligationmet = "Yes";
                obligationmetby = localStorage.UserName;
                obligationmetdate = fObligationNewCompletedDate;
            } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                obligationmetdate = fObligationNewCompletedDate;
            }
            var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
            var vSendReminderTo = '';
            $(SendReminderToArr).each(function (i, item) {
                if (vSendReminderTo == '') {
                    vSendReminderTo = item;
                } else {
                    vSendReminderTo += "; " + item;
                }
            });
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/recurrenceedit?obligationid=' + ObligationID,
                type: 'POST',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                    username: localStorage.UserName
                },
                data: {
                    RowKey: ObligationID,
                    ContractID: getParameterByName('ContractID'),
                    ContractTitle: $("#lblCTitleObligationNew").text(),
                    ObligationTitle: $("#txtObligationNewTitle").val(),
                    ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                    Description: $("#txtObligationNewDesc").val(),
                    ObligationOwner: vObligationOwner,
                    DueDate: fObligationNewDueDate,
                    ObligationMetDate: obligationmetdate,
                    ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                    ObligationMet: obligationmet,
                    ObligationMetBy: obligationmetby,
                    ModifiedBy: localStorage.UserName,
                    CompanyProfile: $("#lblCompanyProfile").text(),
                    Counterparty: $("#lblCounterparty").text(),
                    ContractEndDate: contractItem.EndDate,
                    ContractCurrency: obliCurrency,
                    SendReminderTo: vSendReminderTo,
                    Reminder1: $("#txtReminder1ObligationNew").val(),
                    Reminder2: $("#txtReminder2ObligationNew").val(),
                    Reminder3: $("#txtReminder3ObligationNew").val(),
                    Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                    Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                    Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                    AlertsEnabled: $("#AlertObli").val(),
                    ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                    Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                    AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#addEditObligationNew").dialog("close");
                    $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                    GetObligationCatalogs();
                },
                complete: function () {
                    $("#inprocessObligation").css('visibility', 'none');
                }
            });
        }
    } else {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            } else {
                vObligationOwner += "; " + item;
            }
        });
        if ($("#txtObligationNewTitle").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Title.");
        } else if ($("#dtObligationNewDueDate").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Due Date.");
        } else if (ObligationID != "") {
            if ($('#hdnProductUpdates').text() == "EDITCATALOG") {
                $("#inprocessObligation").css('visibility', 'visible');
                var obligationmet = "No";
                var obligationmetby = "";
                var obligationmetdate = null;
                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                    obligationmet = "Yes";
                    obligationmetby = localStorage.UserName;
                    obligationmetdate = fObligationNewCompletedDate;
                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                    obligationmetdate = fObligationNewCompletedDate;
                }
                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                var vSendReminderTo = '';
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendReminderTo == '') {
                        vSendReminderTo = item;
                    } else {
                        vSendReminderTo += "; " + item;
                    }
                });
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updatewithcatalog?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    data: {
                        RowKey: ObligationID,
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblCTitleObligationNew").text(),
                        ObligationTitle: $("#txtObligationNewTitle").val(),
                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                        Description: $("#txtObligationNewDesc").val(),
                        ObligationOwner: vObligationOwner,
                        DueDate: fObligationNewDueDate,
                        ObligationMetDate: obligationmetdate,
                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                        ObligationMet: obligationmet,
                        ObligationMetBy: obligationmetby,
                        ModifiedBy: localStorage.UserName,
                        CompanyProfile: $("#lblCompanyProfile").text(),
                        Counterparty: $("#lblCounterparty").text(),
                        ContractEndDate: contractItem.EndDate,
                        ContractCurrency: obliCurrency,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1ObligationNew").val(),
                        Reminder2: $("#txtReminder2ObligationNew").val(),
                        Reminder3: $("#txtReminder3ObligationNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                        AlertsEnabled: $("#AlertObli").val(),
                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#addEditObligationNew").dialog("close");
                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        GetObligationCatalogs();
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            } else {
                $("#inprocessObligation").css('visibility', 'visible');
                var obligationmet = "No";
                var obligationmetby = "";
                var obligationmetdate = null;
                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                    obligationmet = "Yes";
                    obligationmetby = localStorage.UserName;
                    obligationmetdate = fObligationNewCompletedDate;
                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                    obligationmetdate = fObligationNewCompletedDate;
                }
                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                var vSendReminderTo = '';
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendReminderTo == '') {
                        vSendReminderTo = item;
                    } else {
                        vSendReminderTo += "; " + item;
                    }
                });
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyText?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    data: {
                        RowKey: ObligationID,
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblCTitleObligationNew").text(),
                        ObligationTitle: $("#txtObligationNewTitle").val(),
                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                        Description: $("#txtObligationNewDesc").val(),
                        ObligationOwner: vObligationOwner,
                        DueDate: fObligationNewDueDate,
                        ObligationMetDate: obligationmetdate,
                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                        ObligationMet: obligationmet,
                        ObligationMetBy: obligationmetby,
                        ModifiedBy: localStorage.UserName,
                        CompanyProfile: $("#lblCompanyProfile").text(),
                        Counterparty: $("#lblCounterparty").text(),
                        ContractEndDate: contractItem.EndDate,
                        ContractCurrency: obliCurrency,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1ObligationNew").val(),
                        Reminder2: $("#txtReminder2ObligationNew").val(),
                        Reminder3: $("#txtReminder3ObligationNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                        AlertsEnabled: $("#AlertObli").val(),
                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#addEditObligationNew").dialog("close");
                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        GetObligationCatalogs();
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            }
        }
    }
}

function updateNewObligationsNew(status) {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var obliCurrency = "";
    if ($("#hdnContractCurrency").text() != "") {
        obliCurrency = $("#hdnContractCurrency").text();
    } else if ($("#hdnBaseCurrency").val() != "") {
        obliCurrency = $("#hdnBaseCurrency").val();
    } else {
        obliCurrency = "USD";
    }
    if (status == "SINGLE") {
        if (listObligationNewData != "") {
            $("#obligationRecurrenceEditPopup").dialog("close");
            $('#ddlObligationOccurencess').val('None');
            listObligationNewData = "";
            listAllObligations = "";
            $("#txtObligationNewID").val('');
            modalOnOpenObligationNew();
        } else {
            $("#loadingPage").fadeIn();
            $('.ui-button-green-text').parent().attr('disabled', 'disabled');
            var isformvalid = false;
            isformvalid = true;
            var strContractID = getParameterByName('ContractID');
            var ObligationID = $("#txtObligationNewID").val();
            var arrObligationOwner = $("#ddlObligationNewOwner").val();
            var vObligationOwner = '';
            $(arrObligationOwner).each(function (i, item) {
                if (vObligationOwner == '') {
                    vObligationOwner = item;
                } else {
                    vObligationOwner += "; " + item;
                }
            });
            if ($("#txtObligationNewTitle").val() == "") {
                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');
                swal("", "Enter Obligation Title.");
            } else if ($("#dtObligationNewDueDate").val() == "") {
                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');
                swal("", "Enter Obligation Due Date.");
            } else if (ObligationID != "") {
                $("#inprocessObligation").css('visibility', 'visible');
                var obligationmet = "No";
                var obligationmetby = "";
                var obligationmetdate = null;
                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                    obligationmet = "Yes";
                    obligationmetby = localStorage.UserName;
                    obligationmetdate = fObligationNewCompletedDate;
                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                    obligationmetdate = fObligationNewCompletedDate;
                }
                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                var vSendReminderTo = '';
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendReminderTo == '') {
                        vSendReminderTo = item;
                    } else {
                        vSendReminderTo += "; " + item;
                    }
                });
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/recurrenceedit?obligationid=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    data: {
                        RowKey: ObligationID,
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblCTitleObligationNew").text(),
                        ObligationTitle: $("#txtObligationNewTitle").val(),
                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                        Description: $("#txtObligationNewDesc").val(),
                        ObligationOwner: vObligationOwner,
                        DueDate: fObligationNewDueDate,
                        ObligationMetDate: obligationmetdate,
                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                        ObligationMet: obligationmet,
                        ObligationMetBy: obligationmetby,
                        ModifiedBy: localStorage.UserName,
                        CompanyProfile: $("#lblCompanyProfile").text(),
                        Counterparty: $("#lblCounterparty").text(),
                        ContractEndDate: contractItem.EndDate,
                        ContractCurrency: obliCurrency,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1ObligationNew").val(),
                        Reminder2: $("#txtReminder2ObligationNew").val(),
                        Reminder3: $("#txtReminder3ObligationNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                        AlertsEnabled: $("#AlertObli").val(),
                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#addEditObligationNew").dialog("close");
                        $("#obligationRecurrenceEditPopup").dialog("close");
                        GetObligationCatalogs();
                    },
                    complete: function () {
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            }
        }
    } else {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            } else {
                vObligationOwner += "; " + item;
            }
        });
        if ($("#txtObligationNewTitle").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Title.");
        } else if ($("#dtObligationNewDueDate").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Due Date.");
        } else if (ObligationID != "") {
            if ($('#hdnProductUpdates').text() == "EDITCATALOG") {
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateUpcoming?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        $("#hdnObligationUniqueId").text('');
                        $("#hdnObligationUniqueId").text(person);
                        $("#txtObligationNewID").val('');
                        modalOnOpenObligationNew();
                        $("#obligationRecurrenceEditPopup").dialog("close");
                    },
                    error: function (data) {
                        $("#obligationRecurrenceEditPopup").dialog("close");
                        $("#loadingPage").fadeOut();
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            } else {
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateUpcoming?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    cache: false,
                    success: function (person) {
                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        $("#hdnObligationUniqueId").text('');
                        $("#hdnObligationUniqueId").text(person);
                        $("#txtObligationNewID").val('');
                        modalOnOpenObligationNew();
                        $("#obligationRecurrenceEditPopup").dialog("close");
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                        $("#obligationRecurrenceEditPopup").dialog("close");
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            }
        }
    }
}

var vObligationTextEditRecurrence = "";
var vObligationFlaging = "";

function modalOnOpenObligationNew() {
    var isNotOwner = false;
    var ownervalidation = false;
    var arrNewOwners = [];
    var arrObligationOwner = $("#ddlObligationNewOwner").val();
    var isGroup = false;
    $(arrObligationOwner).each(function (i, item) {
        if (item.indexOf('{') > -1) {
            isGroup = true;
        }
    });
    if (isGroup) {
        arrNewOwners = getMilestoneOwners(arrObligationOwner.join(';'));
        var vNotObligationOwner = '';
        $(arrNewOwners).each(function (i, item) {
            if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                if (vNotObligationOwner == '') {
                    vNotObligationOwner = item;
                } else {
                    vNotObligationOwner += "; " + item;
                }
            }
        });
    } else {
        var vNotObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                if (vNotObligationOwner == '') {
                    vNotObligationOwner = item;
                } else {
                    vNotObligationOwner += "; " + item;
                }
            }
        });
    }
    if (vNotObligationOwner != '') {
        swal({
            title: '',
            text: "<span style=\"font-weight:700\">'" + vNotObligationOwner + "'</span> do not have permission to access to this contract or not part of contract.",
            showCancelButton: false,
            confirmButtonText: 'OK',
            html: true
        });
        $("#loadingPage").fadeOut();
        isNotOwner = true;
    }
    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
        if (!isNotOwner) {
            if (validateproducts) {
                modalonOpenObligationNewEdit();
            } else {
                swal("", "Related Catalog status need to be completed.");
            }
        }
    } else {
        if ($("input:radio[name=ObligationNewAutoComplete]:checked").val() == "Yes") {
            if (!isNotOwner) {
                if (validateproducts) {
                    modalonOpenObligationNewEdit();
                } else {
                    swal("", "Obligation will be auto completed only if all the Products/Services & Commitments are completed before Start/Due date.");
                    modalonOpenObligationNewEdit();
                }
            }
        } else {
            if (!isNotOwner)
                modalonOpenObligationNewEdit();
        }
    }
}

function modalonOpenObligationNewEdit() {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var fObligationNewCompletedDate = '';
    if ($("#dtObligationNewCompletedDate").val() != "" && $("#dtObligationNewCompletedDate").val() != null) {
        fObligationNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewCompletedDate").datepicker('getDate'));
    }
    if ($('#hdnObligationUniqueId').text() != null && $('#hdnObligationUniqueId').text() != "" && $('#hdnObligationUniqueId').text() != "null") {
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            } else {
                vObligationOwner += "; " + item;
            }
        });
        if (requiredValidator('obligationreqvalidator1')) {
            if (requiredValidator('obligationreqvalidator2')) {
                if (requiredValidator('dvObliOccurrenceDates')) {
                    if (comparedatestatus($.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')), $("#ddlObligationStatus").val())) {
                        var oValidate = true;
                        if ($('#ddlObligationOccurencess').val() == "Weekly") {
                            var strrecuobli = "";
                            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                strrecuobli += (this.value) + ",";
                            });
                            if (strrecuobli == "") {
                                oValidate = false;
                            }
                        }
                        if (oValidate) {
                            if (ObligationID != "") {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if (ObligationID != item.RowKey) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                    if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for the particular date already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            }
                                        });
                                    } else {
                                        if (listObligationNewData != "") {
                                            var txtObligationNewText = $("#txtObligationNewText").val();
                                            $(listAllObligations).each(function (i, item) {
                                                if (ObligationID != item.RowKey) {
                                                    if ($("#txtObligationNewTitle").val() == item.ObligationTitle && item.ObligationText != txtObligationNewText) {
                                                        if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                            if (oValidate) {
                                                                swal("", "Obligation title for one of the date in recurrence already exist.");
                                                            }
                                                            oValidate = false;
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            } else {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                    if (oValidate) {
                                                        swal("", "Obligation title for the particular date already exist.");
                                                    }
                                                    oValidate = false;
                                                }
                                            }
                                        });
                                    } else {
                                        if (listObligationNewData != "") {
                                            $(listAllObligations).each(function (i, item) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle && item.ObligationText != $('#hdnObligationUniqueId').text()) {
                                                    if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for one of the date in recurrence already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        }
                        if (oValidate) {
                            if ($('#ddlObligationOccurencess').val() != "None") {
                                if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                    if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                        $("#lblerrorreclimitObligation").css('display', '');
                                        oValidate = false;
                                    }
                                }
                            }
                            if (oValidate) {
                                $("#loadingPage").fadeIn();
                                if (ObligationID != "") {
                                    if (vObligationEditStatus != "") {
                                        if (vObligationEditStatus == "CHANGERECURRENCE") {
                                            if ($('#ddlObligationOccurencess').val() != "None") {
                                                if (listObligationNewData != "") {
                                                    vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                    $("#txtObligationNewID").val("");
                                                    modalOnOpenObligationNew();
                                                } else {
                                                    swal("", "Please modify the occurence to update obligation.");
                                                }
                                            } else {
                                                $("#inprocessObligation").css('visibility', 'visible');
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                } else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                } else {
                                                    obliCurrency = "USD";
                                                }
                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    } else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                        username: localStorage.UserName
                                                    },
                                                    data: {
                                                        RowKey: ObligationID,
                                                        ContractID: getParameterByName('ContractID'),
                                                        ContractTitle: $("#lblCTitleObligationNew").text(),
                                                        ObligationTitle: $("#txtObligationNewTitle").val(),
                                                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                        Description: $("#txtObligationNewDesc").val(),
                                                        ObligationOwner: vObligationOwner,
                                                        DueDate: fObligationNewDueDate,
                                                        ObligationMetDate: obligationmetdate,
                                                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                        ObligationMet: obligationmet,
                                                        ModifiedBy: localStorage.UserName,
                                                        ObligationMetBy: obligationmetby,
                                                        CompanyProfile: $("#lblCompanyProfile").text(),
                                                        Counterparty: $("#lblCounterparty").text(),
                                                        ContractEndDate: contractItem.EndDate,
                                                        ContractCurrency: obliCurrency,
                                                        SendReminderTo: vSendReminderTo,
                                                        Reminder1: $("#txtReminder1ObligationNew").val(),
                                                        Reminder2: $("#txtReminder2ObligationNew").val(),
                                                        Reminder3: $("#txtReminder3ObligationNew").val(),
                                                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                        AlertsEnabled: $("#AlertObli").val(),
                                                        PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                    },
                                                    cache: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        $("#addEditObligationNew").dialog("close");
                                                        GetObligationCatalogs();
                                                    },
                                                    complete: function () {
                                                        $("#inprocessObligation").css('visibility', 'none');
                                                    }
                                                });
                                            }
                                        } else if (vObligationEditStatus == "EDITRECURRENCE") {
                                            if (listObligationNewData != "") {
                                                vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                $("#loadingPage").fadeOut();
                                                $("#obligationRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                $("#obligationRecurrenceEditPopup").dialog("open");
                                            } else {
                                                vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                $("#loadingPage").fadeOut();
                                                $("#obligationRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                $("#obligationRecurrenceEditPopup").dialog("open");
                                            }
                                        } else {
                                            if ($('#ddlObligationOccurencess').val() == "None") {
                                                $("#inprocessObligation").css('visibility', 'visible');
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                } else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                } else {
                                                    obliCurrency = "USD";
                                                }
                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    } else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                        username: localStorage.UserName
                                                    },
                                                    data: {
                                                        RowKey: ObligationID,
                                                        ContractID: getParameterByName('ContractID'),
                                                        ContractTitle: $("#lblCTitleObligationNew").text(),
                                                        ObligationTitle: $("#txtObligationNewTitle").val(),
                                                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                        Description: $("#txtObligationNewDesc").val(),
                                                        ObligationOwner: vObligationOwner,
                                                        DueDate: fObligationNewDueDate,
                                                        ObligationMetDate: obligationmetdate,
                                                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                        ObligationMet: obligationmet,
                                                        ModifiedBy: localStorage.UserName,
                                                        ObligationMetBy: obligationmetby,
                                                        CompanyProfile: $("#lblCompanyProfile").text(),
                                                        Counterparty: $("#lblCounterparty").text(),
                                                        ContractEndDate: contractItem.EndDate,
                                                        ContractCurrency: obliCurrency,
                                                        SendReminderTo: vSendReminderTo,
                                                        Reminder1: $("#txtReminder1ObligationNew").val(),
                                                        Reminder2: $("#txtReminder2ObligationNew").val(),
                                                        Reminder3: $("#txtReminder3ObligationNew").val(),
                                                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                        AlertsEnabled: $("#AlertObli").val(),
                                                        PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                    },
                                                    cache: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        $("#addEditObligationNew").dialog("close");
                                                        GetObligationCatalogs();
                                                    },
                                                    complete: function () {
                                                        $("#inprocessObligation").css('visibility', 'none');
                                                    }
                                                });
                                            } else {
                                                if (listObligationNewData != "") {
                                                    $("#loadingPage").fadeOut();
                                                    $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                    $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                                } else {
                                                    $("#loadingPage").fadeOut();
                                                    swal("", "Please modify the occurence to update obligation.");
                                                }
                                            }
                                        }
                                    } else {
                                        if ($('#ddlObligationOccurencess').val() == "None") {
                                            $("#inprocessObligation").css('visibility', 'visible');
                                            var obligationmet = "No";
                                            var obligationmetby = "";
                                            var obligationmetdate = null;
                                            if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                obligationmet = "Yes";
                                                obligationmetby = localStorage.UserName;
                                                obligationmetdate = fObligationNewCompletedDate;
                                            } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                obligationmetdate = fObligationNewCompletedDate;
                                            }
                                            var obliCurrency = "";
                                            if ($("#hdnContractCurrency").text() != "") {
                                                obliCurrency = $("#hdnContractCurrency").text();
                                            } else if ($("#hdnBaseCurrency").val() != "") {
                                                obliCurrency = $("#hdnBaseCurrency").val();
                                            } else {
                                                obliCurrency = "USD";
                                            }
                                            var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                            var vSendReminderTo = '';
                                            $(SendReminderToArr).each(function (i, item) {
                                                if (vSendReminderTo == '') {
                                                    vSendReminderTo = item;
                                                } else {
                                                    vSendReminderTo += "; " + item;
                                                }
                                            });
                                            $.ajax({
                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                type: 'POST',
                                                dataType: 'json',
                                                headers: {
                                                    'eContracts-ApiKey': localStorage.APIKey,
                                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                    username: localStorage.UserName
                                                },
                                                data: {
                                                    RowKey: ObligationID,
                                                    ContractID: getParameterByName('ContractID'),
                                                    ContractTitle: $("#lblCTitleObligationNew").text(),
                                                    ObligationTitle: $("#txtObligationNewTitle").val(),
                                                    ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                    Description: $("#txtObligationNewDesc").val(),
                                                    ObligationOwner: vObligationOwner,
                                                    DueDate: fObligationNewDueDate,
                                                    ObligationMetDate: obligationmetdate,
                                                    ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                    ObligationMet: obligationmet,
                                                    ModifiedBy: localStorage.UserName,
                                                    ObligationMetBy: obligationmetby,
                                                    CompanyProfile: $("#lblCompanyProfile").text(),
                                                    Counterparty: $("#lblCounterparty").text(),
                                                    ContractEndDate: contractItem.EndDate,
                                                    ContractCurrency: obliCurrency,
                                                    SendReminderTo: vSendReminderTo,
                                                    Reminder1: $("#txtReminder1ObligationNew").val(),
                                                    Reminder2: $("#txtReminder2ObligationNew").val(),
                                                    Reminder3: $("#txtReminder3ObligationNew").val(),
                                                    Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                    Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                    Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                    AlertsEnabled: $("#AlertObli").val(),
                                                    PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                    ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                    Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                    AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                },
                                                cache: false,
                                                success: function (person) {
                                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                                    $("#addEditObligationNew").dialog("close");
                                                    GetObligationCatalogs();
                                                },
                                                complete: function () {
                                                    $("#inprocessObligation").css('visibility', 'none');
                                                }
                                            });
                                        } else {
                                            $("#loadingPage").fadeOut();
                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                        }
                                    }
                                } else {
                                    $("#inprocessObligation").css('visibility', 'visible');
                                    if ($('#ddlObligationOccurencess').val() != "None") {
                                        if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                                $("#lblerrorreclimitObligation").css('display', '');
                                                $("#loadingPage").fadeOut();
                                            } else {
                                                $("#lblerrorreclimitObligation").css('display', '');
                                                if ($('#ddlObligationOccurencess').val() == "Weekly") {
                                                    var validobli = false;
                                                    var strrecuobli = "";
                                                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                                        strrecuobli += (this.value) + ",";
                                                    });
                                                    if (strrecuobli != "") {
                                                        validobli = true;
                                                    }
                                                    if (validobli) {
                                                        var obligationmet = "No";
                                                        var obligationmetby = "";
                                                        var obligationmetdate = null;
                                                        if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                            obligationmet = "Yes";
                                                            obligationmetby = localStorage.UserName;
                                                            obligationmetdate = fObligationNewCompletedDate;
                                                        } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                            obligationmetdate = fObligationNewCompletedDate;
                                                        }
                                                        var obliCurrency = "";
                                                        if ($("#hdnContractCurrency").text() != "") {
                                                            obliCurrency = $("#hdnContractCurrency").text();
                                                        } else if ($("#hdnBaseCurrency").val() != "") {
                                                            obliCurrency = $("#hdnBaseCurrency").val();
                                                        } else {
                                                            obliCurrency = "USD";
                                                        }
                                                        var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                        var vSendReminderTo = '';
                                                        $(SendReminderToArr).each(function (i, item) {
                                                            if (vSendReminderTo == '') {
                                                                vSendReminderTo = item;
                                                            } else {
                                                                vSendReminderTo += "; " + item;
                                                            }
                                                        });
                                                        var formData = new FormData();
                                                        var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                        contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                        contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                                        contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                        contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                                        contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                        contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                        contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                        contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                        contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                        contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                        contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                        contractForm += "&CustomString=" + encodeURIComponent(strrecuobli);
                                                        contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                        contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                        contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                                        contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                        contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                        contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                        contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                        contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                                        contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                        contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                        contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                        contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                        contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                        contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                        contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                        contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                                        contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                        contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                        contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                                        if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                            contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                        } else {
                                                            contractForm += "&RecMonthlyString=" + "";
                                                        }
                                                        formData.append("SearializeControls", contractForm);
                                                        var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                        occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                        occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                        var strvalues = "";
                                                        var Values = listObligationNewData.Values;
                                                        for (var j = 0; j < Values.length; j++) {
                                                            strvalues += Values[j] + ",";
                                                        }
                                                        strvalues = removeLastChar(strvalues, ',');
                                                        occurrenceForm += "&Values=" + strvalues;
                                                        formData.append("objoccurrence", occurrenceForm);
                                                        $.ajax({
                                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                            type: 'POST',
                                                            dataType: 'json',
                                                            headers: {
                                                                'eContracts-ApiKey': localStorage.APIKey,
                                                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                                username: localStorage.UserName
                                                            },
                                                            data: formData,
                                                            cache: false,
                                                            contentType: false,
                                                            processData: false,
                                                            async: false,
                                                            success: function (person) {
                                                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                                                if (vObligationFlaging == "EDIT") { } else { }
                                                                if ($('#txtObligationProductsCount').val() == "Yes") { }
                                                                if ($('#txtObligationFinancialsCount').val() == "Yes") {
                                                                    $.ajax({
                                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                        type: 'POST',
                                                                        dataType: 'json',
                                                                        headers: {
                                                                            'eContracts-ApiKey': localStorage.APIKey,
                                                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                        },
                                                                        cache: false,
                                                                        success: function (data) { },
                                                                        error: function (data) {
                                                                            $("#loadingPage").fadeOut();
                                                                        }
                                                                    });
                                                                }
                                                                $("#addEditObligationNew").dialog("close");
                                                                clearObligationFormDataNew();
                                                                GetObligationCatalogs();
                                                            },
                                                            error: function (data) {
                                                                $("#loadingPage").fadeOut();
                                                            },
                                                            complete: function () {
                                                                $("#inprocessObligation").css('visibility', 'none');
                                                            }
                                                        });
                                                    } else {
                                                        $("#loadingPage").fadeOut();
                                                    }
                                                } else {
                                                    var obligationmet = "No";
                                                    var obligationmetby = "";
                                                    var obligationmetdate = null;
                                                    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                        obligationmet = "Yes";
                                                        obligationmetby = localStorage.UserName;
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    }
                                                    var obliCurrency = "";
                                                    if ($("#hdnContractCurrency").text() != "") {
                                                        obliCurrency = $("#hdnContractCurrency").text();
                                                    } else if ($("#hdnBaseCurrency").val() != "") {
                                                        obliCurrency = $("#hdnBaseCurrency").val();
                                                    } else {
                                                        obliCurrency = "USD";
                                                    }
                                                    var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                    var vSendReminderTo = '';
                                                    $(SendReminderToArr).each(function (i, item) {
                                                        if (vSendReminderTo == '') {
                                                            vSendReminderTo = item;
                                                        } else {
                                                            vSendReminderTo += "; " + item;
                                                        }
                                                    });
                                                    var formData = new FormData();
                                                    var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                    contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                    contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                                    contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                    contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                                    contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                    contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                    contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                    contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                    contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                    contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                                    contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                    contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                    contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                                    contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                    contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                    contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                    contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                    contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                                    contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                    contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                    contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                    contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                    contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                    contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                                    contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                    contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                    contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                                    if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                        contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                    } else {
                                                        contractForm += "&RecMonthlyString=" + "";
                                                    }
                                                    formData.append("SearializeControls", contractForm);
                                                    var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                    occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                    occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                    var strvalues = "";
                                                    var Values = listObligationNewData.Values;
                                                    for (var j = 0; j < Values.length; j++) {
                                                        strvalues += Values[j] + ",";
                                                    }
                                                    strvalues = removeLastChar(strvalues, ',');
                                                    occurrenceForm += "&Values=" + strvalues;
                                                    formData.append("objoccurrence", occurrenceForm);
                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: {
                                                            'eContracts-ApiKey': localStorage.APIKey,
                                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                            username: localStorage.UserName
                                                        },
                                                        data: formData,
                                                        cache: false,
                                                        contentType: false,
                                                        processData: false,
                                                        async: false,
                                                        success: function (person) {
                                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                                            if (vObligationFlaging == "EDIT") { } else { }
                                                            if ($('#txtObligationProductsCount').val() == "Yes") { }
                                                            if ($('#txtObligationFinancialsCount').val() == "Yes") {
                                                                $.ajax({
                                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                    type: 'POST',
                                                                    dataType: 'json',
                                                                    headers: {
                                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                    },
                                                                    cache: false,
                                                                    success: function (data) { },
                                                                    error: function (data) {
                                                                        $("#loadingPage").fadeOut();
                                                                    }
                                                                });
                                                            }
                                                            $("#addEditObligationNew").dialog("close");
                                                            clearObligationFormDataNew();
                                                            GetObligationCatalogs();
                                                        },
                                                        error: function (data) {
                                                            $("#loadingPage").fadeOut();
                                                        },
                                                        complete: function () {
                                                            $("#inprocessObligation").css('visibility', 'none');
                                                        }
                                                    });
                                                }
                                            }
                                        } else {
                                            if ($('#ddlObligationOccurencess').val() == "Weekly") {
                                                var validobli = false;
                                                var strrecuobli = "";
                                                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                                    strrecuobli += (this.value) + ",";
                                                });
                                                if (strrecuobli != "") {
                                                    validobli = true;
                                                }
                                                if (validobli) {
                                                    var obligationmet = "No";
                                                    var obligationmetby = "";
                                                    var obligationmetdate = null;
                                                    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                        obligationmet = "Yes";
                                                        obligationmetby = localStorage.UserName;
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                        obligationmetdate = fObligationNewCompletedDate
                                                    }
                                                    var obliCurrency = "";
                                                    if ($("#hdnContractCurrency").text() != "") {
                                                        obliCurrency = $("#hdnContractCurrency").text();
                                                    } else if ($("#hdnBaseCurrency").val() != "") {
                                                        obliCurrency = $("#hdnBaseCurrency").val();
                                                    } else {
                                                        obliCurrency = "USD";
                                                    }
                                                    var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                    var vSendReminderTo = '';
                                                    $(SendReminderToArr).each(function (i, item) {
                                                        if (vSendReminderTo == '') {
                                                            vSendReminderTo = item;
                                                        } else {
                                                            vSendReminderTo += "; " + item;
                                                        }
                                                    });
                                                    var formData = new FormData();
                                                    var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                    contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                    contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                                    contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                    contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                                    contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                    contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                    contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                    contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                    contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                    contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                                    contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                    contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                    contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                                    contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                    contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                    contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                    contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                    contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                                    contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                    contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                    contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                    contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                    contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                    contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                                    contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                    contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                    contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                                    if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                        contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                    } else {
                                                        contractForm += "&RecMonthlyString=" + "";
                                                    }
                                                    formData.append("SearializeControls", contractForm);
                                                    var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                    occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                    occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                    var strvalues = "";
                                                    var Values = listObligationNewData.Values;
                                                    for (var j = 0; j < Values.length; j++) {
                                                        strvalues += Values[j] + ",";
                                                    }
                                                    strvalues = removeLastChar(strvalues, ',');
                                                    occurrenceForm += "&Values=" + strvalues;
                                                    formData.append("objoccurrence", occurrenceForm);
                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: {
                                                            'eContracts-ApiKey': localStorage.APIKey,
                                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                            username: localStorage.UserName
                                                        },
                                                        data: formData,
                                                        cache: false,
                                                        contentType: false,
                                                        processData: false,
                                                        async: false,
                                                        success: function (person) {
                                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                                            if (vObligationFlaging == "EDIT") { } else { }
                                                            if ($('#txtObligationProductsCount').val() == "Yes") { }
                                                            if ($('#txtObligationFinancialsCount').val() == "Yes") {
                                                                $.ajax({
                                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                    type: 'POST',
                                                                    dataType: 'json',
                                                                    headers: {
                                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                    },
                                                                    cache: false,
                                                                    success: function (data) { },
                                                                    error: function (data) {
                                                                        $("#loadingPage").fadeOut();
                                                                    }
                                                                });
                                                            }
                                                            $("#addEditObligationNew").dialog("close");
                                                            clearObligationFormDataNew();
                                                            GetObligationCatalogs();
                                                        },
                                                        error: function (data) {
                                                            $("#loadingPage").fadeOut();
                                                        },
                                                        complete: function () {
                                                            $("#inprocessObligation").css('visibility', 'none');
                                                        }
                                                    });
                                                } else {
                                                    $("#loadingPage").fadeOut();
                                                }
                                            } else {
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                } else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                } else {
                                                    obliCurrency = "USD";
                                                }
                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    } else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });
                                                var formData = new FormData();
                                                var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                                contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                                contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                                contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                                contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                                contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                                contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                                if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                    contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                } else {
                                                    contractForm += "&RecMonthlyString=" + "";
                                                }
                                                formData.append("SearializeControls", contractForm);
                                                var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                var strvalues = "";
                                                var Values = listObligationNewData.Values;
                                                for (var j = 0; j < Values.length; j++) {
                                                    strvalues += Values[j] + ",";
                                                }
                                                strvalues = removeLastChar(strvalues, ',');
                                                occurrenceForm += "&Values=" + strvalues;
                                                formData.append("objoccurrence", occurrenceForm);
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                        username: localStorage.UserName
                                                    },
                                                    data: formData,
                                                    cache: false,
                                                    contentType: false,
                                                    processData: false,
                                                    async: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        if (vObligationFlaging == "EDIT") { } else { }
                                                        if ($('#txtObligationProductsCount').val() == "Yes") { }
                                                        if ($('#txtObligationFinancialsCount').val() == "Yes") {
                                                            $.ajax({
                                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                type: 'POST',
                                                                dataType: 'json',
                                                                headers: {
                                                                    'eContracts-ApiKey': localStorage.APIKey,
                                                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                },
                                                                cache: false,
                                                                success: function (data) { },
                                                                error: function (data) {
                                                                    $("#loadingPage").fadeOut();
                                                                }
                                                            });
                                                        }
                                                        $("#addEditObligationNew").dialog("close");
                                                        clearObligationFormDataNew();
                                                        GetObligationCatalogs();
                                                    },
                                                    error: function (data) {
                                                        $("#loadingPage").fadeOut();
                                                    },
                                                    complete: function () {
                                                        $("#inprocessObligation").css('visibility', 'none');
                                                    }
                                                });
                                            }
                                        }
                                    } else {
                                        var vRecurrence = "";
                                        var vRecurrenceCustom = "";
                                        var vOcurence = "";
                                        vRecurrence = "None";
                                        vRecurrenceCustom = "None";
                                        vOcurence = 1;
                                        var obligationmet = "No";
                                        var obligationmetby = "";
                                        var obligationmetdate = null;
                                        if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                            obligationmet = "Yes";
                                            obligationmetby = localStorage.UserName;
                                            obligationmetdate = fObligationNewCompletedDate;
                                        } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                            obligationmetdate = fObligationNewCompletedDate;
                                        }
                                        var obliCurrency = "";
                                        if ($("#hdnContractCurrency").text() != "") {
                                            obliCurrency = $("#hdnContractCurrency").text();
                                        } else if ($("#hdnBaseCurrency").val() != "") {
                                            obliCurrency = $("#hdnBaseCurrency").val();
                                        } else {
                                            obliCurrency = "USD";
                                        }
                                        var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                        var vSendReminderTo = '';
                                        $(SendReminderToArr).each(function (i, item) {
                                            if (vSendReminderTo == '') {
                                                vSendReminderTo = item;
                                            } else {
                                                vSendReminderTo += "; " + item;
                                            }
                                        });
                                        var formData = new FormData();
                                        var contractForm = "ContractID=" + getParameterByName('ContractID');
                                        contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                        contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                        contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                        contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                        contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                        contractForm += "&DueDate=" + encodeURIComponent(fObligationNewDueDate);
                                        contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                        contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                        contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                        contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                        contractForm += "&Ocurrences=" + encodeURIComponent(vOcurence);
                                        contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                        contractForm += "&CustomString=" + encodeURIComponent(vRecurrenceCustom);
                                        contractForm += "&RecMonthlyString=" + encodeURIComponent("None");
                                        contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                        contractForm += "&RecMonthlyString=" + "";
                                        contractForm += "&ObligationMet=" + obligationmet;
                                        contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                        contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                        contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                        contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                        contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                        contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                        contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                        contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                        contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                        contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                        contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                        contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                        contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                        contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                        contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                        contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                        contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                        formData.append("SearializeControls", contractForm);
                                        formData.append("objoccurrence", "");
                                        $.ajax({
                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                            type: 'POST',
                                            dataType: 'json',
                                            headers: {
                                                'eContracts-ApiKey': localStorage.APIKey,
                                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                username: localStorage.UserName
                                            },
                                            data: formData,
                                            cache: false,
                                            contentType: false,
                                            processData: false,
                                            async: false,
                                            success: function (person) {
                                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                                $("#addEditObligationNew").dialog("close");
                                                $("#loadingPage").fadeOut();
                                                $("#addEditObligationNew").dialog("close");
                                                $("#loadingPage").fadeOut();
                                                clearObligationFormDataNew();
                                                GetObligationCatalogs();
                                            },
                                            error: function (data) {
                                                $("#loadingPage").fadeOut();
                                            },
                                            complete: function () {
                                                clearObligationFormDataNew();
                                                $("#loadingPage").fadeOut();
                                                $("#inprocessObligation").css('visibility', 'none');
                                            }
                                        });
                                    }
                                }
                            }
                        } else {
                            $("#loadingPage").fadeOut();
                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                var Id = this.id;
                                $("#" + Id).css('outline', '1px solid #F00');
                            });
                        }
                    } else {
                        $("#loadingPage").fadeOut();
                        isformvalid = false;
                        $("#ddlObligationStatus").addClass('error');
                        $('html, body').animate({
                            scrollTop: 0
                        }, 'fast');
                    }
                } else {
                    var oValidate = true;
                    if ($('#ddlObligationOccurencess').val() == "Weekly") {
                        var strrecuobli = "";
                        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                            strrecuobli += (this.value) + ",";
                        });
                        if (strrecuobli == "") {
                            oValidate = false;
                        }
                    }
                    if (oValidate) {
                        if ($('#ddlObligationOccurencess').val() != "None") {
                            if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                    $("#lblerrorreclimitObligation").css('display', '');
                                    oValidate = false;
                                }
                            }
                        }
                    } else {
                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                            var Id = this.id;
                            $("#" + Id).css('outline', '1px solid #F00');
                        });
                    }
                    $("#loadingPage").fadeOut();
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                }
            } else {
                var oValidate = true;
                if ($('#ddlObligationOccurencess').val() == "Weekly") {
                    var strrecuobli = "";
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        strrecuobli += (this.value) + ",";
                    });
                    if (strrecuobli == "") {
                        oValidate = false;
                    }
                }
                if (oValidate) {
                    if ($('#ddlObligationOccurencess').val() != "None") {
                        if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                $("#lblerrorreclimitObligation").css('display', '');
                                oValidate = false;
                            }
                        }
                    }
                } else {
                    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                        var Id = this.id;
                        $("#" + Id).css('outline', '1px solid #F00');
                    });
                }
                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');
            }
        } else {
            var oValidate = true;
            if ($('#ddlObligationOccurencess').val() == "Weekly") {
                var strrecuobli = "";
                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                    strrecuobli += (this.value) + ",";
                });
                if (strrecuobli == "") {
                    oValidate = false;
                }
            }
            if (oValidate) {
                if ($('#ddlObligationOccurencess').val() != "None") {
                    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                        if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                            $("#lblerrorreclimitObligation").css('display', '');
                            oValidate = false;
                        }
                    }
                }
            } else {
                $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                    var Id = this.id;
                    $("#" + Id).css('outline', '1px solid #F00');
                });
            }
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
        }
        $('.ui-button-green-text').parent().removeAttr('disabled');
        return isformvalid;
    } else {
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            } else {
                vObligationOwner += "; " + item;
            }
        });
        if (requiredValidator('obligationreqvalidator1')) {
            if (requiredValidator('obligationreqvalidator2')) {
                if (requiredValidator('dvObliOccurrenceDates')) {
                    if (comparedatestatus($.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')), $("#ddlObligationStatus").val())) {
                        var oValidate = true;
                        if ($('#ddlObligationOccurencess').val() == "Weekly") {
                            var strrecuobli = "";
                            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                strrecuobli += (this.value) + ",";
                            });
                            if (strrecuobli == "") {
                                oValidate = false;
                            }
                        }
                        if (oValidate) {
                            if (ObligationID != "") {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if (ObligationID != item.RowKey) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                    if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for the particular date already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            }
                                        });
                                    } else {
                                        if (listObligationNewData != "") {
                                            $(listAllObligations).each(function (i, item) {
                                                if (ObligationID != item.RowKey) {
                                                    if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                        if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                            if (oValidate) {
                                                                swal("", "Obligation title for one of the date in recurrence already exist.");
                                                            }
                                                            oValidate = false;
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            } else {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                    if (oValidate) {
                                                        swal("", "Obligation title for the particular date already exist.");
                                                    }
                                                    oValidate = false;
                                                }
                                            }
                                        });
                                    } else {
                                        if (listObligationNewData != "") {
                                            $(listAllObligations).each(function (i, item) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                    if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for one of the date in recurrence already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        }
                        if (oValidate) {
                            if ($('#ddlObligationOccurencess').val() != "None") {
                                if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                    if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                        $("#lblerrorreclimitObligation").css('display', '');
                                        oValidate = false;
                                    }
                                }
                            }
                            if (oValidate) {
                                $("#loadingPage").fadeIn();
                                if (ObligationID != "") {
                                    if (vObligationEditStatus != "") {
                                        if (vObligationEditStatus == "CHANGERECURRENCE") {
                                            if ($('#ddlObligationOccurencess').val() != "None") {
                                                if (listObligationNewData != "") {
                                                    vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + ObligationID,
                                                        type: 'DELETE',
                                                        dataType: 'json',
                                                        headers: {
                                                            'eContracts-ApiKey': localStorage.APIKey,
                                                            username: localStorage.UserName
                                                        },
                                                        "Content-Type": "application/json",
                                                        cache: false,
                                                        success: function (data) {
                                                            $("#txtObligationNewID").val("");
                                                            modalOnOpenObligationNew();
                                                        }
                                                    });
                                                } else {
                                                    $("#loadingPage").fadeOut();
                                                    swal("", "Please modify the occurence to update obligation.");
                                                }
                                            } else {
                                                $("#inprocessObligation").css('visibility', 'visible');
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                } else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                } else {
                                                    obliCurrency = "USD";
                                                }
                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    } else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                        username: localStorage.UserName
                                                    },
                                                    data: {
                                                        RowKey: ObligationID,
                                                        ContractID: getParameterByName('ContractID'),
                                                        ContractTitle: $("#lblCTitleObligationNew").text(),
                                                        ObligationTitle: $("#txtObligationNewTitle").val(),
                                                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                        Description: $("#txtObligationNewDesc").val(),
                                                        ObligationOwner: vObligationOwner,
                                                        DueDate: fObligationNewDueDate,
                                                        ObligationMetDate: obligationmetdate,
                                                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                        ObligationMet: obligationmet,
                                                        ModifiedBy: localStorage.UserName,
                                                        ObligationMetBy: obligationmetby,
                                                        CompanyProfile: $("#lblCompanyProfile").text(),
                                                        Counterparty: $("#lblCounterparty").text(),
                                                        ContractEndDate: contractItem.EndDate,
                                                        ContractCurrency: obliCurrency,
                                                        SendReminderTo: vSendReminderTo,
                                                        Reminder1: $("#txtReminder1ObligationNew").val(),
                                                        Reminder2: $("#txtReminder2ObligationNew").val(),
                                                        Reminder3: $("#txtReminder3ObligationNew").val(),
                                                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                        AlertsEnabled: $("#AlertObli").val(),
                                                        PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                    },
                                                    cache: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        $("#addEditObligationNew").dialog("close");
                                                        GetObligationCatalogs();
                                                    },
                                                    complete: function () {
                                                        $("#inprocessObligation").css('visibility', 'none');
                                                    }
                                                });
                                            }
                                        } else if (vObligationEditStatus == "EDITRECURRENCE") {
                                            if (listObligationNewData != "") {
                                                vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteobligations?strObligationText=' + $("#txtObligationNewText").val(),
                                                    type: 'DELETE',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                        username: localStorage.UserName
                                                    },
                                                    "Content-Type": "application/json",
                                                    cache: false,
                                                    success: function (data) {
                                                        $("#txtObligationNewID").val("");
                                                        modalOnOpenObligationNew();
                                                    }
                                                });
                                            } else {
                                                if ($('#ddlObligationOccurencess').val() == "None") {
                                                    vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteobligations?strObligationText=' + $("#txtObligationNewText").val(),
                                                        type: 'DELETE',
                                                        dataType: 'json',
                                                        headers: {
                                                            'eContracts-ApiKey': localStorage.APIKey,
                                                            username: localStorage.UserName
                                                        },
                                                        "Content-Type": "application/json",
                                                        cache: false,
                                                        success: function (data) {
                                                            $("#txtObligationNewID").val("");
                                                            modalOnOpenObligationNew();
                                                        }
                                                    });
                                                } else {
                                                    if (listObligationNewData != "") {
                                                        $("#loadingPage").fadeOut();
                                                        $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                        $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                                    } else {
                                                        $("#loadingPage").fadeOut();
                                                        swal("", "Please modify the occurence to update obligation.");
                                                    }
                                                }
                                            }
                                        } else {
                                            if ($('#ddlObligationOccurencess').val() == "None") {
                                                $("#inprocessObligation").css('visibility', 'visible');
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                } else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                } else {
                                                    obliCurrency = "USD";
                                                }
                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    } else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                        username: localStorage.UserName
                                                    },
                                                    data: {
                                                        RowKey: ObligationID,
                                                        ContractID: getParameterByName('ContractID'),
                                                        ContractTitle: $("#lblCTitleObligationNew").text(),
                                                        ObligationTitle: $("#txtObligationNewTitle").val(),
                                                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                        Description: $("#txtObligationNewDesc").val(),
                                                        ObligationOwner: vObligationOwner,
                                                        DueDate: fObligationNewDueDate,
                                                        ObligationMetDate: obligationmetdate,
                                                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                        ObligationMet: obligationmet,
                                                        ModifiedBy: localStorage.UserName,
                                                        ObligationMetBy: obligationmetby,
                                                        CompanyProfile: $("#lblCompanyProfile").text(),
                                                        Counterparty: $("#lblCounterparty").text(),
                                                        ContractEndDate: contractItem.EndDate,
                                                        ContractCurrency: obliCurrency,
                                                        SendReminderTo: vSendReminderTo,
                                                        Reminder1: $("#txtReminder1ObligationNew").val(),
                                                        Reminder2: $("#txtReminder2ObligationNew").val(),
                                                        Reminder3: $("#txtReminder3ObligationNew").val(),
                                                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                        AlertsEnabled: $("#AlertObli").val(),
                                                        PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                    },
                                                    cache: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        $("#addEditObligationNew").dialog("close");
                                                        GetObligationCatalogs();
                                                    },
                                                    complete: function () {
                                                        $("#inprocessObligation").css('visibility', 'none');
                                                    }
                                                });
                                            } else {
                                                $("#loadingPage").fadeOut();
                                                $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                            }
                                        }
                                    } else {
                                        if ($('#ddlObligationOccurencess').val() == "None") {
                                            $("#inprocessObligation").css('visibility', 'visible');
                                            var obligationmet = "No";
                                            var obligationmetby = "";
                                            var obligationmetdate = null;
                                            if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                obligationmet = "Yes";
                                                obligationmetby = localStorage.UserName;
                                                obligationmetdate = fObligationNewCompletedDate;
                                            } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                obligationmetdate = fObligationNewCompletedDate;
                                            }
                                            var obliCurrency = "";
                                            if ($("#hdnContractCurrency").text() != "") {
                                                obliCurrency = $("#hdnContractCurrency").text();
                                            } else if ($("#hdnBaseCurrency").val() != "") {
                                                obliCurrency = $("#hdnBaseCurrency").val();
                                            } else {
                                                obliCurrency = "USD";
                                            }
                                            var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                            var vSendReminderTo = '';
                                            $(SendReminderToArr).each(function (i, item) {
                                                if (vSendReminderTo == '') {
                                                    vSendReminderTo = item;
                                                } else {
                                                    vSendReminderTo += "; " + item;
                                                }
                                            });
                                            $.ajax({
                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                type: 'POST',
                                                dataType: 'json',
                                                headers: {
                                                    'eContracts-ApiKey': localStorage.APIKey,
                                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                    username: localStorage.UserName
                                                },
                                                data: {
                                                    RowKey: ObligationID,
                                                    ContractID: getParameterByName('ContractID'),
                                                    ContractTitle: $("#lblCTitleObligationNew").text(),
                                                    ObligationTitle: $("#txtObligationNewTitle").val(),
                                                    ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                    Description: $("#txtObligationNewDesc").val(),
                                                    ObligationOwner: vObligationOwner,
                                                    DueDate: fObligationNewDueDate,
                                                    ObligationMetDate: obligationmetdate,
                                                    ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                    ObligationMet: obligationmet,
                                                    ModifiedBy: localStorage.UserName,
                                                    ObligationMetBy: obligationmetby,
                                                    CompanyProfile: $("#lblCompanyProfile").text(),
                                                    Counterparty: $("#lblCounterparty").text(),
                                                    ContractEndDate: contractItem.EndDate,
                                                    ContractCurrency: obliCurrency,
                                                    SendReminderTo: vSendReminderTo,
                                                    Reminder1: $("#txtReminder1ObligationNew").val(),
                                                    Reminder2: $("#txtReminder2ObligationNew").val(),
                                                    Reminder3: $("#txtReminder3ObligationNew").val(),
                                                    Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                    Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                    Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                    AlertsEnabled: $("#AlertObli").val(),
                                                    PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                    ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                    Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                    AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                },
                                                cache: false,
                                                success: function (person) {
                                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                                    $("#addEditObligationNew").dialog("close");
                                                    GetObligationCatalogs();
                                                },
                                                complete: function () {
                                                    $("#inprocessObligation").css('visibility', 'none');
                                                }
                                            });
                                        } else {
                                            $("#loadingPage").fadeOut();
                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                        }
                                    }
                                } else {
                                    $("#inprocessObligation").css('visibility', 'visible');
                                    if ($('#ddlObligationOccurencess').val() != "None") {
                                        if ($('#ddlObligationOccurencess').val() == "Weekly") {
                                            var validobli = false;
                                            var strrecuobli = "";
                                            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                                strrecuobli += (this.value) + ",";
                                            });
                                            if (strrecuobli != "") {
                                                validobli = true;
                                            }
                                            if (validobli) {
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                } else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                } else {
                                                    obliCurrency = "USD";
                                                }
                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    } else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });
                                                var formData = new FormData();
                                                var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                                contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                                contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                contractForm += "&CustomString=" + encodeURIComponent(strrecuobli);
                                                contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                                contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                                contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                                contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                                if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                    contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                } else {
                                                    contractForm += "&RecMonthlyString=" + "";
                                                }
                                                formData.append("SearializeControls", contractForm);
                                                var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                var strvalues = "";
                                                var Values = listObligationNewData.Values;
                                                for (var j = 0; j < Values.length; j++) {
                                                    strvalues += Values[j] + ",";
                                                }
                                                strvalues = removeLastChar(strvalues, ',');
                                                occurrenceForm += "&Values=" + strvalues;
                                                formData.append("objoccurrence", occurrenceForm);
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew',
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey,
                                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                        username: localStorage.UserName
                                                    },
                                                    data: formData,
                                                    cache: false,
                                                    contentType: false,
                                                    processData: false,
                                                    async: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        if (vObligationFlaging == "EDIT") { } else { }
                                                        if ($('#txtObligationFinancialsCount').val() == "Yes") {
                                                            $.ajax({
                                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                type: 'POST',
                                                                dataType: 'json',
                                                                headers: {
                                                                    'eContracts-ApiKey': localStorage.APIKey,
                                                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                },
                                                                cache: false,
                                                                success: function (data) { },
                                                                error: function (data) {
                                                                    $("#loadingPage").fadeOut();
                                                                }
                                                            });
                                                        }
                                                        $("#addEditObligationNew").dialog("close");
                                                        clearObligationFormDataNew();
                                                        GetObligationCatalogs();
                                                    },
                                                    error: function (data) {
                                                        $("#loadingPage").fadeOut();
                                                    },
                                                    complete: function () {
                                                        $("#inprocessObligation").css('visibility', 'none');
                                                    }
                                                });
                                            } else {
                                                $("#loadingPage").fadeOut();
                                            }
                                        } else {
                                            var obligationmet = "No";
                                            var obligationmetby = "";
                                            var obligationmetdate = null;
                                            if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                obligationmet = "Yes";
                                                obligationmetby = localStorage.UserName;
                                                obligationmetdate = fObligationNewCompletedDate;
                                            } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                obligationmetdate = fObligationNewCompletedDate;
                                            }
                                            var obliCurrency = "";
                                            if ($("#hdnContractCurrency").text() != "") {
                                                obliCurrency = $("#hdnContractCurrency").text();
                                            } else if ($("#hdnBaseCurrency").val() != "") {
                                                obliCurrency = $("#hdnBaseCurrency").val();
                                            } else {
                                                obliCurrency = "USD";
                                            }
                                            var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                            var vSendReminderTo = '';
                                            $(SendReminderToArr).each(function (i, item) {
                                                if (vSendReminderTo == '') {
                                                    vSendReminderTo = item;
                                                } else {
                                                    vSendReminderTo += "; " + item;
                                                }
                                            });
                                            var formData = new FormData();
                                            var contractForm = "ContractID=" + getParameterByName('ContractID');
                                            contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                            contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                            contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                            contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                            contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                            contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                            contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                            contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                            contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                            contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                            contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                            contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                            contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                            contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                            contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                            contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                            contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                            contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                            contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                            contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                            contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                            contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                            contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                            contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                            contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                            contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                            contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                            contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                            contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                            contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                            contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                            if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                            } else {
                                                contractForm += "&RecMonthlyString=" + "";
                                            }
                                            formData.append("SearializeControls", contractForm);
                                            var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                            occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                            occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                            var strvalues = "";
                                            var Values = listObligationNewData.Values;
                                            for (var j = 0; j < Values.length; j++) {
                                                strvalues += Values[j] + ",";
                                            }
                                            strvalues = removeLastChar(strvalues, ',');
                                            strvalues = removeLastChar(strvalues, ',');
                                            occurrenceForm += "&Values=" + strvalues;
                                            formData.append("objoccurrence", occurrenceForm);
                                            $.ajax({
                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew',
                                                type: 'POST',
                                                dataType: 'json',
                                                headers: {
                                                    'eContracts-ApiKey': localStorage.APIKey,
                                                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                    username: localStorage.UserName
                                                },
                                                data: formData,
                                                cache: false,
                                                contentType: false,
                                                processData: false,
                                                async: false,
                                                success: function (person) {
                                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                                    if (vObligationFlaging == "EDIT") { } else { }
                                                    if ($('#txtObligationFinancialsCount').val() == "Yes") {
                                                        $.ajax({
                                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                            type: 'POST',
                                                            dataType: 'json',
                                                            headers: {
                                                                'eContracts-ApiKey': localStorage.APIKey,
                                                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                            },
                                                            cache: false,
                                                            success: function (data) { },
                                                            error: function (data) {
                                                                $("#loadingPage").fadeOut();
                                                            }
                                                        });
                                                    }
                                                    $("#addEditObligationNew").dialog("close");
                                                    clearObligationFormDataNew();
                                                    GetObligationCatalogs();
                                                },
                                                error: function (data) {
                                                    $("#loadingPage").fadeOut();
                                                },
                                                complete: function () {
                                                    $("#inprocessObligation").css('visibility', 'none');
                                                }
                                            });
                                        }
                                    } else {
                                        var vRecurrence = "";
                                        var vRecurrenceCustom = "";
                                        var vOcurence = "";
                                        vRecurrence = "None";
                                        vRecurrenceCustom = "None";
                                        vOcurence = 1;
                                        var obligationmet = "No";
                                        var obligationmetby = "";
                                        var obligationmetdate = null;
                                        if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                            obligationmet = "Yes";
                                            obligationmetby = localStorage.UserName;
                                            obligationmetdate = fObligationNewCompletedDate;
                                        } else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                            obligationmetdate = fObligationNewCompletedDate;
                                        }
                                        var obliCurrency = "";
                                        if ($("#hdnContractCurrency").text() != "") {
                                            obliCurrency = $("#hdnContractCurrency").text();
                                        } else if ($("#hdnBaseCurrency").val() != "") {
                                            obliCurrency = $("#hdnBaseCurrency").val();
                                        } else {
                                            obliCurrency = "USD";
                                        }
                                        var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                        var vSendReminderTo = '';
                                        $(SendReminderToArr).each(function (i, item) {
                                            if (vSendReminderTo == '') {
                                                vSendReminderTo = item;
                                            } else {
                                                vSendReminderTo += "; " + item;
                                            }
                                        });
                                        var formData = new FormData();
                                        var contractForm = "ContractID=" + getParameterByName('ContractID');
                                        contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                        contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());
                                        contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                        contractForm += "&Description=" + $("#txtObligationNewDesc").val();
                                        contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                        contractForm += "&DueDate=" + encodeURIComponent(fObligationNewDueDate);
                                        contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                        contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                        contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                        contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                        contractForm += "&Ocurrences=" + encodeURIComponent(vOcurence);
                                        contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                        contractForm += "&CustomString=" + encodeURIComponent(vRecurrenceCustom);
                                        contractForm += "&RecMonthlyString=" + encodeURIComponent("None");
                                        contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                        contractForm += "&RecMonthlyString=" + "";
                                        contractForm += "&ObligationMet=" + obligationmet;
                                        contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                        contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                        contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                        contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                        contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                        contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);
                                        contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                        contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                        contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                        contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                        contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                        contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                        contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                        contractForm += "&AlertsEnabled=" + $("#AlertObli").val();
                                        contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                        contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                        contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());
                                        formData.append("SearializeControls", contractForm);
                                        formData.append("objoccurrence", "");
                                        $.ajax({
                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew',
                                            type: 'POST',
                                            dataType: 'json',
                                            headers: {
                                                'eContracts-ApiKey': localStorage.APIKey,
                                                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                                username: localStorage.UserName
                                            },
                                            data: formData,
                                            cache: false,
                                            contentType: false,
                                            processData: false,
                                            async: false,
                                            success: function (person) {
                                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                                if ($('#txtObligationFinancialsCount').val() == "Yes") {
                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: {
                                                            'eContracts-ApiKey': localStorage.APIKey,
                                                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                        },
                                                        cache: false,
                                                        success: function (data) { },
                                                        error: function (data) {
                                                            $("#loadingPage").fadeOut();
                                                        }
                                                    });
                                                }
                                                if (vObligationFlaging == "EDIT") { } else { }
                                                $("#addEditObligationNew").dialog("close");
                                                $("#loadingPage").fadeOut();
                                                clearObligationFormDataNew();
                                                GetObligationCatalogs();
                                            },
                                            error: function (data) {
                                                $("#loadingPage").fadeOut();
                                            },
                                            complete: function () {
                                                clearObligationFormDataNew();
                                                $("#loadingPage").fadeOut();
                                                $("#inprocessObligation").css('visibility', 'none');
                                            }
                                        });
                                    }
                                }
                            }
                        } else {
                            $("#loadingPage").fadeOut();
                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                var Id = this.id;
                                $("#" + Id).css('outline', '1px solid #F00');
                            });
                        }
                    } else {
                        $("#loadingPage").fadeOut();
                        isformvalid = false;
                        $("#ddlObligationStatus").addClass('error');
                        $('html, body').animate({
                            scrollTop: 0
                        }, 'fast');
                    }
                } else {
                    var oValidate = true;
                    if ($('#ddlObligationOccurencess').val() == "Weekly") {
                        var strrecuobli = "";
                        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                            strrecuobli += (this.value) + ",";
                        });
                        if (strrecuobli == "") {
                            oValidate = false;
                        }
                    }
                    if (oValidate) {
                        if ($('#ddlObligationOccurencess').val() != "None") {
                            if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                    $("#lblerrorreclimitObligation").css('display', '');
                                    oValidate = false;
                                }
                            }
                        }
                    } else {
                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                            var Id = this.id;
                            $("#" + Id).css('outline', '1px solid #F00');
                        });
                    }
                    $("#loadingPage").fadeOut();
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                }
            } else {
                var oValidate = true;
                if ($('#ddlObligationOccurencess').val() == "Weekly") {
                    var strrecuobli = "";
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        strrecuobli += (this.value) + ",";
                    });
                    if (strrecuobli == "") {
                        oValidate = false;
                    }
                }
                if (oValidate) {
                    if ($('#ddlObligationOccurencess').val() != "None") {
                        if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                $("#lblerrorreclimitObligation").css('display', '');
                                oValidate = false;
                            }
                        }
                    }
                } else {
                    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                        var Id = this.id;
                        $("#" + Id).css('outline', '1px solid #F00');
                    });
                }
                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');
            }
        } else {
            var oValidate = true;
            if ($('#ddlObligationOccurencess').val() == "Weekly") {
                var strrecuobli = "";
                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                    strrecuobli += (this.value) + ",";
                });
                if (strrecuobli == "") {
                    oValidate = false;
                }
            }
            if (oValidate) {
                if ($('#ddlObligationOccurencess').val() != "None") {
                    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                        if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                            $("#lblerrorreclimitObligation").css('display', '');
                            oValidate = false;
                        }
                    }
                }
            } else {
                $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                    var Id = this.id;
                    $("#" + Id).css('outline', '1px solid #F00');
                });
            }
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
        }
        $('.ui-button-green-text').parent().removeAttr('disabled');
        return isformvalid;
    }
}

function GetObligationCatalogs() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (dataUser) {
            listAllObligationCatalogs = dataUser;
            BindObligationsNew(vContractID);
        },
        error: function (dataUser) {
            listAllObligationCatalogs = "";
            BindObligationsNew(vContractID);
        }
    });
}

function ShowObligationsNew() {
    $('#obligationgroup').removeClass('active');
    $('#obligationungroup').addClass('active');
    $("#ObligationNewDetailsTable").css('display', '');
    $("#ObligationNewDetailsTableGroup").css('display', 'none');
    $("#obligationNewActionsdiv").css('display', '');
    $("#NoObligationNewDetails").css('display', 'none');
}

function BindObligationsNewGroup(contractid) {
    if (contractid == null || contractid == "") {
        contractid = vContractID;
    }
    $("#ObligationNewDetailsTableBodyGroup").empty();
    $("#dvObligationAlertNew").empty();
    $("#dvObligationAlertNew").css('display', 'none');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewgroup',
        type: 'POST',
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
            'BusinessAreaLocation': localStorage.GlobalBusinessAreaLocation
        },
        data: JSON.stringify(listAllObligations),
        cache: false,
        async: false,
        success: function (contactsJsonPayload) {
            $('#obligationungroup').removeClass('active');
            $('#obligationgroup').addClass('active');
            $("#ObligationNewDetailsTable").css('display', 'none');
            $("#ObligationNewDetailsTableGroup").css('display', '');
            $("#obligationNewActionsdiv").css('display', '');
            var count = 0;
            $("#NoObligationNewDetails").css('display', 'none');
            $(contactsJsonPayload).each(function (i, item) {
                count++;
                var vDueDate = '';
                if (item.ObligationStartDate != null) {
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        vDueDate = item.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    } else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                            vDueDate = item.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                            vDueDate = item.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        }
                    }
                } else {
                    vDueDate = "-";
                }
                if (item.ObligationEndDate != null) {
                    vDueDate += " to ";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        vDueDate += item.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    } else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                            vDueDate += item.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                            vDueDate += item.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        }
                    }
                } else {
                    vDueDate += " to ";
                    vDueDate += "-";
                }
                var url = '<a  href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')" class="linkText">' + item.ObligationTitle + '</a>';
                var htmlContent = "<tr>";
                htmlContent += "<td><p id='ObligationID' style='display:none;'>" + item.RowKey + "</p>";
                htmlContent += "<span id='ObligationTitle' style='display:none;'>" + item.ObligationTitle + "</span>";
                htmlContent += "<span id='ObligationText' style='display:none;'>" + item.ObligationText + "</span>";
                htmlContent += "<span id='ObligationRecurrence' style='display:none;'>" + item.Recurrences + "</span>";
                htmlContent += "<span id='ObligationStatus' style='display:none;'>" + item.ObligationStatus + "</span>";
                htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                htmlContent += "<td ><span id='ObligationTypeGroup" + item.RowKey + "'>" + item.ObligationType + "</span></td>";
                htmlContent += "<td  ><lable id='ObligationRecGroup" + item.RowKey + "'>" + item.Recurrences + "</lable></td>";
                htmlContent += "<td  ><lable id='ObligationOcuGroup" + item.RowKey + "'>" + item.Ocurrences + "</lable></td>";
                htmlContent += "<td  ><lable id='ObligationDueDateGroup" + item.RowKey + "'>" + vDueDate + "</lable></td>";
                htmlContent += "</tr>";
                $("#ObligationNewDetailsTableBodyGroup").append(htmlContent);
            });
            $(".openmenuObligationNewGroup").contextMenu({
                menu: 'dropdownMenuobligation',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuObligationNew(action, el.parent("i").parent("td").parent("tr"), pos);
            });
            $("#loadingPage").fadeOut();
        },
        error: function (request) {
            $("#NoObligationNewDetails").css('display', '');
            $("#obligationNewActionsdiv").css('display', 'none');
            $("#loadingPage").fadeOut();
            $("#lblObligationNewCount").text('0');
            $("#ulObligationNew").empty();
            $("#ulObligationNew").append('No items found.');
        }
    });
}

function showObligationStatusMultiple() {
    $('#addEditStatusMultiple').dialog('open');
}

function changestatusmultiple() {
    var selectedValue = decodeURI($("input:radio[name=rdobligationstatus]:checked").val());
    if (selectedValue == "undefined" || selectedValue == "0" || selectedValue == "") {
        swal("", "Select Status");
        return false;
    } else {
        changestatusM();
        return true;
    }
}

function changestatusM() {
    $("#loadingPage").fadeIn();
    var stat = decodeURI($("input:radio[name=rdobligationstatus]:checked").val());
    var formDataStatus = new FormData();
    formDataStatus.append("ObligationIDs", multipleObligationNewChecks);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/changestatus?status=' + stat,
        type: 'PUT',
        data: formDataStatus,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
            username: localStorage.UserName
        },
        cache: false,
        contentType: false,
        processData: false,
        success: function (result) {
            $("#loadingPage").fadeOut();
            multipleObligationNewChecks = "";
            GetObligationCatalogs();
            $("#obligationNewActions").css('display', 'none');
            $('#addEditStatusMultiple').dialog('close');
        },
        error: function (result) {
            $("#loadingPage").fadeOut();
        }
    });
}

function showMilestoneStatusMultiple() {
    $('#addEditMilestoneStatusMultiple').dialog('open');
}

function changemilestonestatusmultiple() {
    var selectedValue = decodeURI($("input:radio[name=rdmilestonestatus]:checked").val());
    if (selectedValue == "undefined" || selectedValue == "0" || selectedValue == "") {
        swal("", "Select Status");
        return false;
    } else {
        changemilestonestatusM();
        return true;
    }
}

function changemilestonestatusM() {
    $("#loadingPage").fadeIn();
    var selectedmilestoneid = Getvaluebynameattr('chkmilestone');
    var formDataStatusMile = new FormData();
    formDataStatusMile.append("MilestoneIDs", selectedmilestoneid);
    var stat = decodeURI($("input:radio[name=rdmilestonestatus]:checked").val());
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/changestatus?status=' + stat,
        type: 'PUT',
        dataType: 'json',
        data: formDataStatusMile,
        contentType: false,
        processData: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
            username: localStorage.UserName
        },
        cache: false,
        success: function (result) {
            $("#loadingPage").fadeOut();
            selectedmilestoneid = "";
            BindMilestone(vContractID);
            $("#milestonesNewActions").css('display', 'none');
            $('#addEditMilestoneStatusMultiple').dialog('close');
        },
        error: function (result) {
            $("#loadingPage").fadeOut();
        }
    });
}

function milestoneEditBackupData() {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))
    }
    if ($("#txtMilestoneOccurrenceCount").val() != "" && $('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'Custom') {
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0) {
            $('#lblerrorreclimitMilestoneNotZero').css('display', '');
            $('#lblerrorreclimitMilestone').css('display', 'none');
        } else {
            $('#lblerrorreclimitMilestoneNotZero').css('display', 'none');
            if (parseInt($("#txtMilestoneOccurrenceCount").val()) > 54) {
                $('#lblerrorreclimitMilestone').css('display', '');
            } else {
                var date = new Date(fMilestoneDateNew);
                var recurenceCustomString = "";
                var Cus = "";
                var cusRecMon = "";
                var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
                if (ocurrTxtnew == "Monthly") {
                    Cus = date.getDay();
                    cusRecMon = $("#ddlMilestoneRepeatMonthly option:selected").val();
                } else if (ocurrTxtnew == "Yearly") {
                    Cus = date.getFullYear();
                } else {
                    $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                        Cus += (this.value) + ",";
                    });
                    Cus = removeLastChar(Cus, ',');
                }
                milestoneoccur = $("#txtMilestoneOccurrenceCount").val();
                milestoneRecur = $("#ddlMilestoneOccurencess").val();
                milestoneRecurCusString = "";
                if (Cus != "") {
                    milestoneRecurCusString = Cus;
                } else {
                    $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                        milestoneRecurCusString += (this.value) + ",";
                    });
                    milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
                }
                getOcurrenceValuesForMilestone(milestoneRecur, milestoneoccur, listMilestoneNewStartDate, milestoneRecurCusString, cusRecMon);
            }
        }
    }
}

function ObligationEditBackupData() {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    if ($("#txtOccurrenceCount").val() != "" && $('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
        if (parseInt($("#txtOccurrenceCount").val()) == 0) {
            $('#lblerrorreclimitObligationNotZero').css('display', '');
            $('#lblerrorreclimitObligation').css('display', 'none');
        } else {
            $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                $('#lblerrorreclimitObligation').css('display', '');
            } else {
                var date = new Date(fObligationNewDueDate);
                var Cus = "";
                var cusRecMon = "";
                var ocurrTxtnew = $("#ddlObligationOccurencess").val();
                if (ocurrTxtnew == "Monthly") {
                    Cus = date.getDay();
                    cusRecMon = $("#ddlRepeatMonthly option:selected").val();
                } else if (ocurrTxtnew == "Yearly") {
                    Cus = date.getFullYear();
                } else {
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        Cus += (this.value) + ",";
                    });
                    Cus = removeLastChar(Cus, ',');
                }
                occurences = $("#txtOccurrenceCount").val();
                recurence = $("#ddlObligationOccurencess").val();
                recurenceCustomString = "";
                if (Cus != "") {
                    recurenceCustomString = Cus;
                } else {
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        recurenceCustomString += (this.value) + ",";
                    });
                    recurenceCustomString = removeLastChar(recurenceCustomString, ',');
                }
                getOcurrenceValuesForObligation(recurence, occurences, listObligationNewStartDate, recurenceCustomString, cusRecMon);
            }
        }
    }
}
//---------------------------------Obligation Ends-----------------------------------------------//

//---------------------------------Financials Begins-----------------------------------------------//

function ManageContractValue() {
    GetContractValueFormData();
    $("#addEditContractValue").dialog("open");
}

function GetContractValueFormData() {
    var strBaseContractValueCurr = "";
    if ($("#hdnBaseContractCurrency").text() == "0") {
        $("#hdnBaseContractCurrency").text("");
    }
    if ($("#hdnContractCurrency").text() == "0") {
        $("#hdnContractCurrency").text("");
    }

    strBaseContractValueCurr = $("#hdnBaseContractValue").text() + " " + $("#hdnBaseContractCurrency").text();
    //if (strBaseContractValueCurr.trim() == "0") {
    //    strBaseContractValueCurr = "Not Available";
    //    $("#lblContractValueInBaseCurency").text(strBaseContractValueCurr);
    //} else {
    if (vCurrencyDisplayStyle == "UK") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', {
            vMax: '99999999999999999999.99'
        });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    } else if (vCurrencyDisplayStyle == "CAN") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', {
            aSep: ' ',
            aDec: '.',
            vMax: '99999999999999999999.99'
        });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    } else if (vCurrencyDisplayStyle == "EU") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', {
            aSep: '.',
            aDec: ',',
            vMax: '99999999999999999999.99'
        });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    } else if (vCurrencyDisplayStyle == "IND") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', {
            dGroup: '2',
            vMax: '99999999999999999999.99'
        });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    }

    // }

    $("#lblCurrencyDisplayStyle").text(vCurrencyDisplayStyle);
    $("#ddlTransactionType").find('option[value="' + $("#hdnTransactionType").text() + '"]').prop("selected", true);
    //if ($("#hdnContractValue").text() == "0") {
    //    $("#hdnContractValue").text("");
    //    $("#txtContractValuepopup").attr("placeholder", "Not Available");

    //    if (vCurrencyDisplayStyle == "UK") {
    //        $('#txtContractValuepopup').autoNumeric('init');
    //    } else if (vCurrencyDisplayStyle == "CAN") {
    //        $('#txtContractValuepopup').autoNumeric('init', { aSep: ' ', aDec: '.' });
    //    } else if (vCurrencyDisplayStyle == "EU") {
    //        $('#txtContractValuepopup').autoNumeric('init', { aSep: '.', aDec: ',' });
    //    } else if (vCurrencyDisplayStyle == "IND") {
    //        $('#txtContractValuepopup').autoNumeric('init', { dGroup: '2' });
    //    }
    //}
    //else {
    $("#txtContractValuepopup").removeAttr("placeholder");
    //    $("#tblcontractvaluepopup tr td.labelright.f_list.financials").each(function (index, value) {

    //        var id = value.children[0].id;
    //        var value1 = value.children[0].value; //$(value).find('td:first-child').text();
    //        $("#" + id).val(value1);
    //    });

    //    $("#tblcontractvaluepopup tr td.labelright.f_list.financials").each(function (index, value) {

    //        var id = value.children[0].id;
    //        var value1 = value.children[0].value; //$(value).find('td:first-child').text();
    //        $("#" + id).val(value1);
    //    });


    FinancialMetadata();

    if (vCurrencyDisplayStyle == "UK") {
        $('#txtContractValuepopup').autoNumeric('init');
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    } else if (vCurrencyDisplayStyle == "CAN") {
        $('#txtContractValuepopup').autoNumeric('init', {
            aSep: ' ',
            aDec: '.'
        });
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    } else if (vCurrencyDisplayStyle == "EU") {
        $('#txtContractValuepopup').autoNumeric('init', {
            aSep: '.',
            aDec: ','
        });
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    } else if (vCurrencyDisplayStyle == "IND") {
        $('#txtContractValuepopup').autoNumeric('init', {
            dGroup: '2'
        });
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    }

    // }
    $("#ddlContractCurrencypopup").val($("#hdnContractCurrency").text());


    //manoj
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "19" && n.Status == "ON");
    });
    if (vDocLibFeat.length > 0) {
        $(cutomFinancialFields).each(function (i, itemfield) {
            $('#txt' + itemfield.FieldName + 'popup').keypress(function (e) {
                if (e.keyCode == 13)
                    return false;
            });

            if (vCurrencyDisplayStyle == "UK") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                        vMax: '99999999999999999999.99'
                    });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init');
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            } else if (vCurrencyDisplayStyle == "CAN") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                        aSep: ' ',
                        aDec: '.',
                        vMax: '99999999999999999999.99'
                    });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', {
                        aSep: ' ',
                        aDec: '.'
                    });
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            } else if (vCurrencyDisplayStyle == "EU") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                        aSep: '.',
                        aDec: ',',
                        vMax: '99999999999999999999.99'
                    });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', {
                        aSep: '.',
                        aDec: ','
                    });
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            } else if (vCurrencyDisplayStyle == "IND") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', {
                        dGroup: '2',
                        vMax: '99999999999999999999.99'
                    });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', {
                        dGroup: '2'
                    });
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            }

        });
    }
    //manoj
}

$("#btnCancelContractValues").click(function () {
    $(".removeChoices").each(function (i, item) {
        var value = $(".removeChoices").val();
        $("#" + item.id + " option[value='dropdownval']").remove();
    });
    $(".removeMultichoice").each(function (i, item) {
        $("#" + item.id + "").val('').trigger("chosen:updated");
    });
    $(".removeText").each(function (i, item) {
        $("#" + item.id + "").val('');
    });
    $(".clsMultilineText").each(function (i, item) {
        $("#" + item.id + "").val('');
    });
    $("#addEditContractValue").dialog("close");

});

function updatevalue() {
    $("#loadingPage").fadeIn();
    var contractvalue = $("#txtContractValuepopup").autoNumeric('get')
    //if (contractvalue == 0) {
    //    swal("", "Enter valid contract value.");
    //    $("#loadingPage").fadeOut();
    //} else {
    if (requiredValidator("addEditContractValue")) {
        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
        var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
            return (n.RowKey == "19" && n.Status == "ON");
        });
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        if (vDocLibFeat.length > 0) {
            updatecustomfinacialvalue();
        } else {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/value?contractvalue=' + contractvalue + '&username=' + localStorage.UserName,
                type: 'PUT',
                dataType: 'json',
                async: false,
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                },
                data: {
                    "TransactionType": contractItem.TransactionType,
                    "ContractCurrency": $("#ddlContractCurrencypopup option:selected").val(),
                    "ModifiedBy": localStorage.UserName
                },
                cache: false,
                success: function (result) {
                    $("#hdnBaseContractValue").text(result.BaseContractValue);
                    $("#hdnBaseContractCurrency").text(result.BaseContractValueCurrency);
                    $("#loadingPage").fadeOut();
                    $("#addEditContractValue").dialog("close");
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#loadingPage").fadeOut();
                },
                error: function (person) {
                    $("#loadingPage").fadeOut();
                }
            });
            $("#hdnContractValue").text(contractvalue);

            $("#hdnContractCurrency").text($("#ddlContractCurrencypopup option:selected").val());
            var sTransType = contractItem.TransactionType;
            if (sTransType == "0")
                sTransType = "";
            $("#liTType").text(sTransType);
            return true;
        }
    } else {
        $("#loadingPage").fadeOut();
        $('.ui-button-green-text').parent().removeAttr('disabled');
        return false;
    }
}

function updatecustomfinacialvalue() {
    var contractvalue = $("#txtContractValuepopup").autoNumeric('get')
    var ContractUpdate = "TransactionType=" + contractItem.TransactionType;
    var dataAppend = "";
    $("#tblcontractvaluepopup tr td.labelright.f_list.financials").each(function (index, item) {
        var name = item.children[0].name;
        var value = item.children[0].value;
        dataAppend = "&" + name + "=" + value;
        ContractUpdate += dataAppend;
        dataAppend = "";
    });
    $('#tblcontractvaluepopup tr td.labelright.f_list.chosenmulti').each(function (index, item) {
        var id = item.children[0].id;
        var cm = '';
        var choicevalues = $("#" + id).val();
        dataAppend += "&" + id + "=";
        $(choicevalues).each(function (i, item) {
            if (cm == '') {
                cm = item;
            } else {
                cm += "; " + item;
            }
        });
        dataAppend += cm;
        ContractUpdate += dataAppend;
        dataAppend = "";
    });
    $('#tblcontractvaluepopup tr td.labelright.f_list.fielddatecontrol').each(function (index) {
        //if ($(this).css('display') != 'none') {
        if ($(this).attr('class').toLowerCase().indexOf("hasdatepicker") >= 0) {
            var name = this.children[0].name;
            var value = $.datepicker.formatDate('mm/dd/yy', $(this.children[0]).datepicker('getDate'));
            dataAppend = "&" + name + "=" + value;
        } else {
            var name = this.children[0].name
            var value = $.datepicker.formatDate('mm/dd/yy', $(this.children[0]).datepicker('getDate'));
            dataAppend = "&" + name + "customfinancialDatefields=" + value;
        }
        //}
        ContractUpdate += dataAppend;
        dataAppend = "";
    });
    ContractUpdate += "&ContractCurrency=" + $("#ddlContractCurrencypopup option:selected").val();
    ContractUpdate += "&ModifiedBy=" + localStorage.UserName;
    $(".customfinancialupdate").each(function (indexfinancial, elementfinancial) {
        ContractUpdate += "&" + elementfinancial.name + "customfieldwyM1fCHT=" + $("#" + elementfinancial.id).autoNumeric('get');
    });

    var formData = new FormData();
    formData.append("AccountID", localStorage.AccountID);
    formData.append("SearializeControls", ContractUpdate)

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/customfinancialvalue?contractid=' + getParameterByName("ContractID") + '&contractvalue=' + contractvalue + '&username=' + localStorage.UserName,
        type: 'PUT',
        dataType: 'json',
        async: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: formData,
        cache: false,
        contentType: false,
        processData: false,
        success: function (result) {
            $("#hdnBaseContractValue").text(result.BaseContractValue);
            $("#hdnBaseContractCurrency").text(result.BaseContractValueCurrency);
            $("#addEditContractValue").dialog("close");
            $('.ui-button-green-text').parent().removeAttr('disabled');
            GetContractValueSetting(result);
            $("#loadingPage").fadeOut();
        },
        error: function (person) {
            $("#loadingPage").fadeOut();
        }
    });
    $("#hdnContractValue").text(contractvalue);
    $("#lblContractValue").css('display', 'inline');
    $("#lblContractCurrency").css('display', 'inline');
    if ($("#lblContractValue").text() == "Not available") {
        $("#lblContractValue").text("0");
    }
    if (ContractCurrencyType == 'base') {
        if (vCurrencyDisplayStyle == "UK") {
            $('#lblContractValue').autoNumeric('init', {
                vMax: '99999999999999999999.99'
            });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        } else if (vCurrencyDisplayStyle == "CAN") {
            $('#lblContractValue').autoNumeric('init', {
                aSep: ' ',
                aDec: '.',
                vMax: '99999999999999999999.99'
            });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        } else if (vCurrencyDisplayStyle == "EU") {
            $('#lblContractValue').autoNumeric('init', {
                aSep: '.',
                aDec: ',',
                vMax: '99999999999999999999.99'
            });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        } else if (vCurrencyDisplayStyle == "IND") {
            $('#lblContractValue').autoNumeric('init', {
                dGroup: '2',
                vMax: '99999999999999999999.99'
            });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        }
        if ($("#hdnBaseContractCurrency").text() == "0") {
            $("#hdnBaseContractCurrency").text("");
        }
        $("#lblContractCurrency").text($("#hdnBaseContractCurrency").text());
    } else if (ContractCurrencyType == 'actual') {
        if (vCurrencyDisplayStyle == "UK") {
            $('#lblContractValue').autoNumeric('init');
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        } else if (vCurrencyDisplayStyle == "CAN") {
            $('#lblContractValue').autoNumeric('init', {
                aSep: ' ',
                aDec: '.',
                vMax: '99999999999999999999.99'
            });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        } else if (vCurrencyDisplayStyle == "EU") {
            $('#lblContractValue').autoNumeric('init', {
                aSep: '.',
                aDec: ',',
                vMax: '99999999999999999999.99'
            });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        } else if (vCurrencyDisplayStyle == "IND") {
            $('#lblContractValue').autoNumeric('init', {
                dGroup: '2',
                vMax: '99999999999999999999.99'
            });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        }
        if ($("#ddlContractCurrencypopup option:selected").val() == "0") {
            $("#lblContractCurrency").text("");
        } else {
            $("#lblContractCurrency").text($("#ddlContractCurrencypopup option:selected").val());
        }

    }
    if ($("#ddlContractCurrencypopup option:selected").val() == "0") {
        $("#hdnContractCurrency").text("");
    } else {
        $("#hdnContractCurrency").text($("#ddlContractCurrencypopup option:selected").val());
    }

    var sTransType = contractItem.TransactionType;
    if (sTransType == "0")
        sTransType = "";
    $("#liTType").text(sTransType);
    icontractdetails();

}

//---------------------------------Financials Ends-----------------------------------------------//

//---------------------------------Workflow Begins-----------------------------------------------//

function getworkflowrules() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/WorkflowRules',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            var vCount = data.WorkflowRules.length;
            for (var j = 0; j < vCount; j++) {
                var item = data.WorkflowRules[j];
                var participantsInXML = item.ParticipantsInXML;
                $(participantsInXML).find('WorkflowPaticipant').each(function () {
                    var StageTitle = $(this).find('StageTitle').text();
                    if (StageName.indexOf(StageTitle) === -1) {
                        StageName.push(StageTitle);
                    }
                });
            }
        },
    });
}

function AddStage() {
    var vLastRow = $("#tblStage tr:last").attr('id');
    var vRowLength = $("#tblStage tr").length;
    if (typeof vRowLength != 'undefined')
        vRowLength = parseInt(vRowLength) + 1;
    var totalFileCount = "1";
    if (typeof vLastRow == "undefined") {
        totalFileCount = "1";
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trStage", ""));
        totalFileCount += 1;
    }
    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + vRowLength + '"/>';
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width46 start_workflow">';
    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
    //If adhoc workflow is configured in settings
    if (workflowAdHoc) {
        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32"><option selected="selected">Serial</option><option>Parallel</option></select>';
    } else {
        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
    }
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
    htmlFormatFile += '</td>';
    htmlFormatFile += '</tr>';

    $("#tblStage").append(htmlFormatFile);
    var $options = $("#ddlApprovers > option").clone();
    $('#ddlAssignTo' + totalFileCount).append($options);

    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
        if ($(this).val() != null) {
            if ($(this).val().length > 1) {
                $("#ddlOrder" + vasstoid).prop('disabled', false);
            }
            else {
                $("#ddlOrder" + vasstoid).val("Serial");
                $("#ddlOrder" + vasstoid).prop('disabled', true);
            }
        }
        else {
            $("#ddlOrder" + vasstoid).val("Serial");
            $("#ddlOrder" + vasstoid).prop('disabled', true);
        }
    });
    //ENH492 - Workflow Cycle time Report & default naming of stages.
    $("#txtStage" + totalFileCount).autocomplete({
        source: StageName,
        minLength: 1,
        focus: function (event, ui) {
            return false;
        },
        select: function (evn, uidetails) {
            $("#txtStage" + totalFileCount).val(uidetails.item.label);

        }
    });

}

function DeleteStage(n) {
    var vv = $(n.parentNode.parentNode).find('select');
    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $("#tblStage tr").each(function (i, item) {

        if (typeof ($(item).attr('id')) != "undefined" && $(item).attr('id') != "" && $(item).attr('id') != null) {
            var ind = $(item).attr('id').replace('trStage', '');
            if (typeof (ind) != "undefined" && ind != "" && ind != null) {
                if ($("#txtStage" + ind).val().indexOf('Stage ') == 0) {
                    var replaceint = $("#txtStage" + ind).val().replace('Stage ', '');
                    if ($.isNumeric(replaceint)) {
                        if (!isNaN(parseInt(replaceint)) && !isNaN(parseInt(i)) && parseInt(replaceint) != (parseInt(i) + 1)) {
                            $("#txtStage" + ind).val('Stage ' + (parseInt(i) + 1))
                        }
                    }
                }
            }
        }
    })

}

function StartWorkflow() {
    if (requiredValidator("ulStartWorkflow", true)) {
        if (contractItem.IsPublic == "Yes") {
            StartWorkFlowProcess();
        } else {
            $("#loadingPage").fadeIn();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/contractpermission?contractid=' + vContractID,
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName
                },
                "Content-Type": "application/json",
                cache: false,
                success: function (UserList) {
                    var PermittedUser = UserList.split(';');
                    $('#tblStage tr').each(function (i, row) {
                        var vRow = $(row).attr('id');
                        var vRowIndex = vRow.replace("trStage", "");
                        $('#ddlAssignTo' + vRowIndex + '_chosen').find('.chosen-choices li').find('span').each(function () {
                            PermittedUser.push($(this).text());
                        });
                    });
                    var ccsArr = [];
                    $($("#ddlWorkflowCC").val()).each(function (i, item) {
                        ccsArr.push(item);
                    });
                    var FilterArray = $.grep(ccsArr, function (nccsArr, iccsArr) {
                        return (PermittedUser.indexOf(nccsArr) == -1);
                    });
                    if (FilterArray.length > 0) {
                        var liuser = FilterArray.join(',');
                        if (liuser.lastIndexOf(",") > -1) {
                            liuser = liuser.substr(0, liuser.lastIndexOf(",")) + ' and ' + liuser.substr(liuser.lastIndexOf(",") + 1);
                        }
                        swal({
                            title: '',
                            //text: liuser + " are not a part of the contract, Are you sure add this user as <span style=\"font-weight:700\">Readonly Permission</span>'?",
                            text: "'<span style=\"font-weight:700\">" + liuser + "</span> do not have access to this contract, . Do you want to provide access?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                        function (confirmed) {
                            if (confirmed) {
                                StartWorkFlowProcess();
                            } else {
                                $("#loadingPage").fadeOut();
                            }
                            return;
                        });
                    } else {
                        StartWorkFlowProcess();
                    }
                },
                error: function (UserList) {
                    $("#loadingPage").fadeOut();
                }
            });
        }
    }
}

function StartWorkFlowProcess() {
    var vAutoUpdateObjectStatus;
    vAutoUpdateObjectStatus = $("#chkAutoUpdateStatus").is(':checked') ? 'Yes' : 'No';
    var sendSummary = $("#chkSendSummaryDoc").is(':checked') ? 'Yes' : 'No';
    $("#loadingPage").fadeIn();
    var vWorkflowStage = [];
    $('#tblStage tr').each(function (i, row) {
        var vRow = $(row).attr('id');
        var vRowIndex = vRow.replace("trStage", "");
        var stage = $("#txtStage" + vRowIndex).val();
        var order = $("#ddlOrder" + vRowIndex).find('option:selected').text();
        var approvers = $("#ddlAssignTo" + vRowIndex).val();
        var sendTo = '';

        $('#ddlAssignTo' + vRowIndex + '_chosen').find('.chosen-choices li').find('span').each(function () {
            if (sendTo == '') {
                sendTo = $(this).text();
            }
            else {
                sendTo += "; " + $(this).text();
            }
        });
        vWorkflowStage.push({
            "StageID": i + 1,
            "StageTitle": stage,
            "Participants": sendTo,
            "Order": order
        });
    });
    //*Harshitha 
    var nicInstance = nicEditors.findEditor('txtComment');
    var vcommentText = CleanWordFormatFromHTML(nicInstance.getContent());
    var vNoteTextCount = vcommentText.replace(/>\/?[^>]+(>|$)/g, "");
    if (vNoteTextCount.length <= 26500) {
        //var vcommentText = nicInstance.getContent();
        vcommentText = $('<div/>').text(vcommentText).html();
        var ccsArr = $("#ddlWorkflowCC").val();
        var ccs = '';
        $(ccsArr).each(function (i, item) {
            if (ccs == '') {
                ccs = item;
            }
            else {
                ccs += "; " + item;
            }
        });
        var vObject = "Contracts";
        var vTaskRouting = $("#lblddlRule").text();
        if ($("#hdWorkflowType").val() == "Document Review") {
            vObject = "Documents";
        }
        if ($("#hdWorkflowType").val() == "Amendment Approval") {
            vObject = "Amendments";
        }

        if (workflowAdHoc == "on") {
            vTaskRouting = $("#ddlRule").find('option:selected').text();
        }
        if (vTaskRouting != "Default" && vTaskRouting != "Ad-hoc") {
            vTaskRouting = "Conditional";
        }

        //Approval Sheet Region

        var strIsApprovalSheetConfigured = "No";
        var strIsSummaryDisplayedInWorkflow = "No";
        var strIsSummaryTempInWorkflow = "No";
        var strSummaryTempDetails = "";
        var strSummaryAdditionalDocs = "";
        var strContractApprovalSheetName = "";
        if ($("#hdWorkflowType").val() == "Contract Approval") {
            if (IsApprovalSheetFeatureExits) {
                if (oRelatedApprovalSheets != "") {
                    if ($("#contractDetailsSummaryConfiguration").css('display') != 'none') {
                        if ($('input[type="radio"][name=IsApprovalSheetTaskDetails]:checked').val() == "No") {
                            strIsSummaryDisplayedInWorkflow = "No";
                            strContractApprovalSheetName = "";
                        }
                        else {
                            if ($("#ddlApprovalsSheets").val() != "0" && $("#ddlApprovalsSheets").val() != "Select") {
                                strIsSummaryDisplayedInWorkflow = "Yes";
                                strContractApprovalSheetName = $("#ddlApprovalsSheets").val();
                            }
                            else {
                                strIsSummaryDisplayedInWorkflow = "No";
                                strContractApprovalSheetName = "";
                            }
                        }

                        if ($('input[type="radio"][name=IsApprovalSheet]:checked').val() == "No") {
                            strIsSummaryTempInWorkflow = "No";
                            strSummaryTempDetails = "";
                        }
                        else {
                            if ($('#lblApprovalSheetTempdocuments').children().length > 0) {
                                strIsSummaryTempInWorkflow = "Yes";
                                strSummaryTempDetails = "<SummaryTempDetails>";
                                $('#lblApprovalSheetTempdocuments').find('div').each(function () {
                                    strSummaryTempDetails += '<Metadata>';
                                    strSummaryTempDetails += '<DocumentID>' + $(this).find("#DocumentID").text() + '</DocumentID>';
                                    strSummaryTempDetails += '<DocumentName>' + $(this).find("#DocumentName").text() + '</DocumentName>';
                                    strSummaryTempDetails += '<DocumentURL>' + decodeURI($(this).find("#DocumentURL").text()) + '</DocumentURL>';
                                    strSummaryTempDetails += '</Metadata>';
                                });
                                strSummaryTempDetails += "</SummaryTempDetails>";
                            }
                            else {
                                strIsSummaryTempInWorkflow = "No";
                                strSummaryTempDetails = "";
                            }
                        }
                        if ($('#lblApprovalSheetdocuments').children().length > 0) {
                            strSummaryAdditionalDocs = "<SummaryAdditionalDocs>";
                            $('#lblApprovalSheetdocuments').find('div').each(function () {
                                strSummaryAdditionalDocs += '<Metadata>';
                                strSummaryAdditionalDocs += '<DocumentID>' + $(this).find("#DocumentID").text() + '</DocumentID>';
                                strSummaryAdditionalDocs += '<DocumentName>' + $(this).find("#DocumentName").text() + '</DocumentName>';
                                strSummaryAdditionalDocs += '<DocumentURL>' + decodeURI($(this).find("#DocumentURL").text()) + '</DocumentURL>';
                                strSummaryAdditionalDocs += '</Metadata>';
                            });
                            strSummaryAdditionalDocs += "</SummaryAdditionalDocs>";
                        }
                        else {
                            strSummaryAdditionalDocs = "";
                        }

                        strIsApprovalSheetConfigured = "No";

                    }
                    else {
                        strIsApprovalSheetConfigured = "No";
                        strIsSummaryDisplayedInWorkflow = "No";
                        strIsSummaryTempInWorkflow = "No";
                        strContractApprovalSheetName = "";
                        strSummaryTempDetails = "";
                        strSummaryAdditionalDocs = "";
                    }
                }
                else {
                    strIsApprovalSheetConfigured = "No";
                    strIsSummaryDisplayedInWorkflow = "No";
                    strIsSummaryTempInWorkflow = "No";
                    strContractApprovalSheetName = "";
                    strSummaryTempDetails = "";
                    strSummaryAdditionalDocs = "";
                }
            }
        }
        else {
            strIsApprovalSheetConfigured = "No";
            strIsSummaryDisplayedInWorkflow = "No";
            strIsSummaryTempInWorkflow = "No";
            strContractApprovalSheetName = "";
            strSummaryTempDetails = "";
            strSummaryAdditionalDocs = "";
        }
        //Approval Sheet Region

        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow',
            type: 'POST',
            "Content-Type": "application/json;charset=utf-8",
            headers: {
                'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
            },
            data: {
                "Object": vObject,
                "ObjectID": $("#hdWorkflowObjectID").val(),
                "ObjectTitle": $("#hdWorkflowObjectTitle").val(),
                "WorkflowTitle": $("#txtWorkflowTitle").val(),
                "WorkflowType": $("#hdWorkflowType").val(),
                "CCs": ccs,
                "Notes": vcommentText,
                "DurationPerTask": $("#txtDuration").val(),
                "Initiator": localStorage.UserName,
                "StopIfRejectedByAnyParticipant": "No",
                "StopIfItemModified": "No",
                "WorkflowStage": vWorkflowStage,
                "ContractArea": $("#lblContractArea").text(),
                "BusinessArea": $("#lblBusinessArea").text(),
                "BusinessAreaPath": $("#lblBusinessAreaPath").text(),
                "AutoUpdateStatus": vAutoUpdateObjectStatus,
                //manoj
                "SendSummary": sendSummary,
                //manoj
                "TaskRouting": vTaskRouting,
                "IsApprovalSheetConfigured": strIsApprovalSheetConfigured,
                "ContractApprovalSheetName": unescape(strContractApprovalSheetName),
                "IsSummaryDisplayedInWorkflow": strIsSummaryDisplayedInWorkflow,
                "IsSummaryTempInWorkflow": strIsSummaryTempInWorkflow,
                "SummaryTempDetails": strSummaryTempDetails,
                "SummaryAdditionalDocs": strSummaryAdditionalDocs
            },
            cache: false,
            success: function (status) {
                var vmsg = $("#hdWorkflowType").val() + " Workflow Started";
                $("#inprocessStartWorkflow").css('display', 'none');

                if ((vAutoUpdateObjectStatus == "Yes" || $("#hdIsPrimaryDoc").val() == "Yes") && contractItem.IsFinalized != "Yes") {
                    if (vObject == "Contracts") {
                        var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "About to Expire", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived"];
                        if ($.inArray(contractItem.Status, vContractStatus) !== -1)
                            vmsg = 'This Contract Record is moved to the Pipeline Contracts. Check "Pipeline" tab.';
                        contractItem.Status = "Awaiting Approval";
                        $("#lblApprovalWorkflow").text("In Progress");
                        $("#addActivityApproval").css('display', 'none');
                    }
                    else {
                        contractItem.Status = "Awaiting Review";
                    }
                    ContractTopActions();
                }
                if (vObject == "Contracts") {
                    $("#lblApprovalWorkflow").text("In Progress");
                }
                BindUpdatedContractDetails(vContractID);
                if (vObject == "Documents") {
                    //manoj
                    if (documentview == null || documentview == "" || documentview == 'folder') {
                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                            var selectedfoldervalue = $('#showAll').find("a");
                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                            var parentdocumentdetails = {
                                id: idvalueselected, text: textvalueselected
                            };
                            showfolderdocuments(parentdocumentdetails);
                        }
                        else {
                            BindDocument(vContractID);
                        }
                    } else {
                        DisplayDocument(documentview);
                    }
                    //GetContractPendingAction(true, "BindPeoples");
                    $("#hdnFolderDocumentView").text('');
                    $("#hdnShowAllTextValue").html('');
                    PrvFolderselection = '';
                    //Bind primary and pined document based on new feature
                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                        CreateDocumentListPinView(vContractID);
                    }
                    //manoj
                }

                $("#dvWorkflow").dialog("close");//ui-dialog-buttonset
                //manoj
                $("#txtWorkflowTitle").prop('readonly', false);
                //manoj
                GetContractActivities(vContractID);
                $("#loadingPage").fadeOut();

                BindWorkflow();
            },
            error: function () {
                $("#loadingPage").fadeOut();
            }
        });
    }
    else {
        $("#loadingPage").fadeOut();
        swal("", "Note can not exceed 26500 characters");
    }
}

function BindUpdatedContractDetails(contractid) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID
        },
        processData: false,
        success: function (item) {
            contractItem = item;
            vContractTile = item.ContractTitle;

            BindContractPeopleMetadata(item);
            BindContractRolesMetadata();
            ContractTopActions();
            if (item.InRecycleBin == "Yes") {
                $("#hdnPermission").val('View');
                $("#liContractstatus").hide()
                $("#dvRecyclebinMessage").css('display', '');
            }
            else {
                $("#hdnPermission").val(item.Permission);

            }
            ApplyPermissionToMenu($("#hdnPermission").val());
            if (item.IsStandard == "Yes") {
                //$("#iStandardCont").css('display', '');
                //$("#iNonStandardCont").css('display', 'none');

                $("#liContractStandard").css('display', 'none');
                $("#liContractNonStandard").css('display', '');
            } else {
                //$("#iStandardCont").css('display', 'none');
                //$("#iNonStandardCont").css('display', '');
                $("#liContractStandard").css('display', '');
                $("#liContractNonStandard").css('display', 'none');
            }
            if (item.InRecycleBin == "Yes" && item.Permission == "Manage") {
                $("#DeleteContract").show();
                $("#DeleteContractRecycle").show();
            }
            BindContractTermDetail(contractItem);
            $("#loadingPage").fadeOut();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();

            BindContractTermDetail(contractItem);

            $("#loadingPage").fadeOut();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function BindWorkflow(actionvalue) {
    var Contracts = "Contracts";

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/WorkflowByObject?strObject=' + Contracts + '&objectID=' + contractItem.RowKey,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        //async: false,

        success: function (data) {
            vWorkflowItem = data;
            UpcomingApprovalTaskSlider(data, actionvalue);
        },
        error: function (data) {
            if (actionvalue == "Yes") {
                $('#SliderCount').html("0");
                $('#UpcomingTaskSlider').html('');
                CheckSlider(actionvalue);
                $("#loadingPage").fadeOut();
            }
        }
    });
}

function UpcomingApprovalTaskSlider(data, actionvalue) {
    var Intiator = "";
    var vDurationTask = "";
    var vMetadata = '';
    var WorkflowID = "";
    var vStartDate = "";
    var vDoudate = "";
    vTaskID = "";
    var dataSlider = $.grep(data, function (item, i) {
        return item.Status == "In Progress"
    })[0];
    if (dataSlider != null && (dataSlider.Participants.indexOf(localStorage.UserName) > -1)) {
        $(vWorkflowItem).each(function (i, vItem) {
            if (vItem.ObjectID == contractItem.RowKey) {
                if (vItem.Object == "Contracts" && vItem.Status == "In Progress") {
                    Intiator = vItem.Initiator;
                    vDurationTask = vItem.DurationPerTask;
                    WorkflowID = vItem.RowKey;
                    vStartDate = vItem.StartDate;
                }
            }
        });
        if (WorkflowID != "") {
            var vConApprInprogress = false;
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/taskdetail?taskid=' + vTaskID + "&workflowid=" + WorkflowID,
                type: 'GET',
                cache: false,
                contentType: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                success: function (data) {

                    var vWorkflowTasks = data.WorkflowTasks;
                    var vFilterTask = $.grep(vWorkflowTasks, function (n, i) {
                        return (n.Status == "In Progress" && n.AssignTo == localStorage.UserName && n.TaskType != "Change Request");
                    });
                    if (vFilterTask.length > 0) {
                        vTaskID = vFilterTask[0].RowKey;
                        vConApprInprogress = true;
                    }
                    if (vConApprInprogress == true) {
                        vDoudate = moment(new Date(vStartDate)).add(vDurationTask, "days").format('MM/DD/YYYY');
                        if ($("ul#UpcomingTaskSlider").has("li#ContractApprovalLI").length === 0) {
                            vMetadata = '<li id="ContractApprovalLI"> <div class="renewal-new-sec" id="ContractApproval">' +
                                          '<div class="renewal-new-text"> <a href="/Activity/TaskDetails?TaskID=&WorkflowID=' + WorkflowID + '">' + contractItem.ContractTitle + ' is assigned to you for approval by ' + Intiator + '</a> <span> Due date ' + vDoudate + '</span> </div><div class="renewal-new-button">' +
                                          '<button class="authorize" type="button" id="btnApprove" value="" onclick="Approve();">Approve</button><button class="stop_renewal" type="button" id="btnReject" value="" onclick="Reject();">Reject</button>' +
                                          '</div></div></li>';
                            $("#SliderCount").html(++vSliderCounter);
                            $('#UpcomingTaskSlider').append(vMetadata);
                            CheckSlider(actionvalue);
                        }
                    } else if (actionvalue == "Yes") {
                        $('#SliderCount').html("0");
                        $('#UpcomingTaskSlider').html('');
                        CheckSlider(actionvalue);
                    }

                }
            });
        }
    }

}

function CheckSlider(actionvalue) {
    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
        $('#clickme').css("display", "none");
        $(".mydiv").css("display", "none");
    }
    else {
        if ($('#SliderCount').html() == "0") {
            $('#clickme').css("display", "none");
            $(".mydiv").css("display", "none");
        }
        else {
            $('#clickme').css("display", "");
            $(".mydiv").css("display", "");
            if (!($('#UpcomingTaskSlider').children().length > 1)) {
                $('#UpcomingTaskSlider').css({ marginLeft: "0px" });
                $('.mydiv').css("left", "-0");
                $(".notification-arrow").toggleClass("addArrow");
            }

            if ($('#UpcomingTaskSlider').children().length == 1) {
                $('.control_prev').css("display", "none");
                $('.control_next').css("display", "none");
            }
            else {
                $('.control_prev').css("display", "");
                $('.control_next').css("display", "");
            }
            var classExist = false;
            if ($('#UpcomingTaskSlider').children().length > 1) {
                $('#UpcomingTaskSlider li').each(function (i) {
                    if ($(this).attr('class') == 'firstLI') {
                        classExist = true;
                    }

                });
            }
            if (!classExist)
                $("#UpcomingTaskSlider li:first").addClass("firstLI");

        }
        if (actionvalue == "Yes") {
            $(".mydiv").css("display", "none");
            $("#loadingPage").fadeOut();
        }
    }

}

//---------------------------------Workflow Ends-----------------------------------------------//

//---------------------------------ContextMenu Begins-----------------------------------------------//

// status
function BindStatusbyCLM(OpenPopup) {
    var CheckBindFinalizedData = parseInt($("#tdFinalized").children().length)
    var CheckBindPipelindData = parseInt($("#tdPipelind").children().length)
    if (CheckBindFinalizedData != 0 || CheckBindPipelindData != 0) {
        if (contractItem.IsFinalized == 'Yes') {
            $('#tdFinalizeContract1').css("display", "none");
            $('#tdFinalizeContract2').css("display", "none");
            $('#tdFinalizeContract3').css("display", "");
            $('#tdFinalizeContract3').html('<img src="/Content/Images/right.png" />Marked Finalized/Ready for Signature by ' + contractItem.FinalizedBy);
            $('#trPipelineStatusFull').css('display', 'none');
            $('#trPipelineStatus').css('display', 'none');
            $('input:radio[name="FinalizedStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
            $('input:radio[name="FinalizedStatus"]').prop('disabled', false);
            $("#tdFinalized").css("display", "");
            $("#tdPipelind").css("display", "none");

            var imgObj = $("#imgFinalizedStatus");
            imgObj.attr("title", "Collapse");
            imgObj.attr("src", "../Content/Images/e-close.png");
            $('#trFinalizedStatus').css('display', '');
            $('#trFinalizedStatusFull').css('display', '');
            //manoj
            if (contractItem.Status == "Archived") {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#trCloseOutContract").css('display', '')
                } else {
                    $("#trCloseOutContract").css('display', 'none');
                }
                $("#rtarchived").css('display', '');
            } else {
                $("#trCloseOutContract").css('display', '');
                $("#rtarchived").css('display', 'none');
            }
            //manoj
            //$("#trCloseOutContract").css('display', '')
            imgObj = $("#imgPipelineStatus");
            imgObj.attr("title", "Expand");
            imgObj.attr("src", "../Content/Images/e-open.png");
        } else {
            $('#tdFinalizeContract1').css("display", "");
            $('#tdFinalizeContract2').css("display", "");
            $('#tdFinalizeContract3').css("display", "none");
            $('#tdFinalizeContract3').html('');
            $('#trFinalizedStatusFull').css('display', 'none');
            $('#trFinalizedStatus').css('display', 'none');
            $("#trCloseOutContract").css('display', 'none')
            $('input:radio[name="PipelineStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
            $('input:radio[name="PipelineStatus"]').prop('disabled', false);
            $("#tdPipelind").css("display", "");
            $("#tdFinalized").css("display", "none");

            var imgObj = $("#imgFinalizedStatus");
            imgObj.attr("title", "Collapse");
            imgObj.attr("src", "../Content/Images/e-close.png");

            imgObj = $("#imgPipelineStatus");
            imgObj.attr("title", "Expand");
            imgObj.attr("src", "../Content/Images/e-open.png");
            $('#trPipelineStatus').css('display', '');
            $('#trPipelineStatusFull').css('display', '');
        }
        $('#dvContCancelNote').css("display", "none");
        if ($("#txtReasonOfCancelContract").hasClass("validelement"))
            $("#txtReasonOfCancelContract").removeClass('validelement');
        $("#dvManageContractStatus").dialog("open");
    } else {
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractstatusesbyCLM',
            type: 'GET',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            cache: false,
            success: function (contractstatuses) {
                $("#tdPipelind").empty();
                $("#tdFinalized").empty();
                var datalength = contractstatuses.length;
                var vAutoChange = '';
                for (var i = 0; i < datalength; i++) {
                    var item = contractstatuses[i];
                    if ((item.Transition == "Manual" || contractItem.Status == item.ContractStatus) && item.Active == true) {
                        if (item.Transition != "Manual")
                            vAutoChange = 'AutoChange';
                        else
                            vAutoChange = '';

                        if (item.ContractStage == "Pipeline") {
                            var ctrl = "";
                            if (item.ContractStatus == "New") {
                                ctrl = "<input id='rdPipelineNew' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='New:" + item.Description + "' class='status_green_another'><img src='../Content/Images/status/new.png'>new</b><label for='rdPipelineNew' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Awaiting Review") {
                                ctrl = "<input id='rdPipelineAwaitReview' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Awaiting Review:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>rev</b><label for='rdPipelineAwaitReview' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Reviewed") {
                                ctrl = "<input id='rdPipelineReviewed' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Reviewed:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/renew.png'>rev</b><label for='rdPipelineReviewed' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Awaiting Approval") {
                                ctrl = "<input id='rdPipelineAwaitApproval' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Awaiting Approval:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>appr</b><label for='rdPipelineAwaitApproval' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Approved") {
                                ctrl = "<input id='rdPipelineApproved' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Approved:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/tick.png'>appr</b><label for='rdPipelineApproved' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "In Negotiation") {
                                ctrl = "<input id='rdPipelineInNegotiation' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='In Negotiation:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>nego</b><label for='rdPipelineInNegotiation' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Negotiation Complete") {
                                ctrl = "<input id='rdPipelineNegotiationComplete' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Negotiation Complete:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/tick.png'>nego</b><label for='rdPipelineNegotiationComplete' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                                //ENH 452 Added Cancel Status 
                            else if (item.ContractStatus == "Cancelled") {
                                ctrl = "<input id='rdPipelineCancelled' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Cancelled:" + item.Description + "' class='status_Gray'><img src='../Content/Images/status/close.png'>canc</b><label for='rdPipelineCancelled' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }

                            $("#tdPipelind").append(ctrl);

                        } else {
                            var Fctrl = "";
                            if (item.ContractStatus == "Active") {
                                Fctrl = "<input id='rdFinalizedActive' type='radio' name='FinalizedStatus' value=" + item.ContractStatus + " class='css-checkbox " + vAutoChange + "' /><b title='Active:" + item.Description + "' class='status_green'><img src='../Content/Images/status/active.png'>actv</b><label for='rdFinalizedActive' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Ready for Signature") {
                                Fctrl = "<input id='rdFinalizedReadySign' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Ready for Signature:" + item.Description + "' class='status_green'><img src='../Content/Images/status/active.png'>sign</b><label for='rdFinalizedReadySign' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Awaiting Signatures") {
                                Fctrl = "<input id='rdFinalizedAwaitingSign' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Awaiting Signatures:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>sign</b><label for='rdFinalizedAwaitingSign' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Signed") {
                                Fctrl = "<input id='rdFinalizedSigned' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Signed:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/tick.png'>sign</b><label for='rdFinalizedSigned' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Up for Renewal") {
                                Fctrl = "<input id='rdFinalizedUpForRenewal' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Up for Renewal:" + item.Description + "' class='status_red'><img src='../Content/Images/status/exp.png'>renw</b><label for='rdFinalizedUpForRenewal' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "About to Expire") {
                                Fctrl = "<input id='rdFinalizedAboutToExpire' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='About to Expire:" + item.Description + "' class='status_red'><img src='../Content/Images/status/exp.png'>exp</b><label for='rdFinalizedAboutToExpire' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "On Hold") {
                                Fctrl = "<input id='rdFinalizedOnHold' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='On Hold:" + item.Description + "' class='status_red'><img src='../Content/Images/status/exp.png'>hold</b><label for='rdFinalizedOnHold' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Replaced") {
                                Fctrl = "<input id='rdFinalizedReplaced' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Replaced:" + item.Description + "' class='status_Gray'><img src='../Content/Images/status/replace.png'>rep</b><label for='rdFinalizedReplaced' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Expired") {
                                Fctrl = "<input id='rdFinalizedExpired' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Expired:" + item.Description + "' class='status_Gray'><img src='../Content/Images/status/expried.png'>exp</b><label for='rdFinalizedExpired' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Cancelled") {
                                Fctrl = "<input id='rdFinalizedCancelled' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Cancelled:" + item.Description + "' class='status_Gray'><img src='../Content/Images/status/close.png'>canc</b><label for='rdFinalizedCancelled' class='css-label'>" + item.ContractStatus + "</label><br />";
                            } else if (item.ContractStatus == "Archived") {
                                if ($("#spancloseout").text() != "") {
                                    if ($("#spancloseout").text().trim() != "" && $("#spancloseout").text() == "Yes") {
                                        $("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="DeleteContractRecord()"><span class="f_button_green">Delete Contract Record</span></a></div></td>');
                                        Fctrl = "<div id='rtarchived'><input id='rdFinalizedArchived' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Archived:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/archive.png'>ARCH</b><label for='rdFinalizedArchived' class='css-label'>" + item.ContractStatus + "</label><br /></div>";
                                    } else {
                                        $("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="MarkContractAsCloseout();"><span class="f_button_green">Mark Contract Record for Closeout</span></a></div></td>')
                                        Fctrl = "<div id='rtarchived' style='display:none;'><input id='rdFinalizedArchived' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Archived:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/archive.png'>ARCH</b><label for='rdFinalizedArchived' class='css-label'>" + item.ContractStatus + "</label><br /></div>";
                                    }
                                } else {
                                    $("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="MarkContractAsCloseout();"><span class="f_button_green">Mark Contract Record for Closeout</span></a></div></td>')
                                    Fctrl = "<div id='rtarchived' style='display:none;'><input id='rdFinalizedArchived' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Archived:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/archive.png'>ARCH</b><label for='rdFinalizedArchived' class='css-label'>" + item.ContractStatus + "</label><br /></div>";
                                }
                            }
                            $("#tdFinalized").append(Fctrl);
                        }
                    }
                }

                if (contractItem.IsFinalized == 'Yes') {
                    $('#tdFinalizeContract1').css("display", "none");
                    $('#tdFinalizeContract2').css("display", "none");
                    $('#tdFinalizeContract3').css("display", "");
                    $('#trPipelineStatusFull').css('display', 'none');
                    $('#trPipelineStatus').css('display', 'none');
                    $('#tdFinalizeContract3').html('<img src="/Content/Images/right.png" />Marked Finalized/Ready for Signature by ' + contractItem.FinalizedBy);
                    $('input:radio[name="FinalizedStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
                    $('input:radio[name="FinalizedStatus"]').prop('disabled', false);
                    $("#tdFinalized").css("display", "");
                    $("#tdPipelind").css("display", "none");

                    var imgObj = $("#imgFinalizedStatus");
                    imgObj.attr("title", "Collapse");
                    imgObj.attr("src", "../Content/Images/e-close.png");
                    $('#trFinalizedStatus').css('display', '');
                    $('#trFinalizedStatusFull').css('display', '');
                    //manoj
                    if (contractItem.Status == "Archived") {
                        if ($("#hdnPermission").val() == "Manage") {
                            $("#trCloseOutContract").css('display', '')
                        } else {
                            $("#trCloseOutContract").css('display', 'none');
                        }
                        $("#rtarchived").css('display', '');
                    } else {
                        $("#trCloseOutContract").css('display', '');
                        $("#rtarchived").css('display', 'none');
                    }
                    //manoj
                    //$("#trCloseOutContract").css('display', '');
                    imgObj = $("#imgPipelineStatus");
                    imgObj.attr("title", "Expand");
                    imgObj.attr("src", "../Content/Images/e-open.png");


                } else {

                    $('#tdFinalizeContract1').css("display", "");
                    $('#tdFinalizeContract2').css("display", "");
                    $('#tdFinalizeContract3').css("display", "none");
                    $('#tdFinalizeContract3').html('');
                    $('#trFinalizedStatusFull').css('display', 'none');
                    $('#trFinalizedStatus').css('display', 'none');
                    $("#trCloseOutContract").css('display', 'none');
                    $('input:radio[name="PipelineStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
                    $('input:radio[name="PipelineStatus"]').prop('disabled', false);
                    $("#tdPipelind").css("display", "");
                    $("#tdFinalized").css("display", "none");

                    var imgObj = $("#imgFinalizedStatus");
                    imgObj.attr("title", "Collapse");
                    imgObj.attr("src", "../Content/Images/e-close.png");

                    imgObj = $("#imgPipelineStatus");
                    imgObj.attr("title", "Expand");
                    imgObj.attr("src", "../Content/Images/e-open.png");
                    $('#trPipelineStatus').css('display', '');
                    $('#trPipelineStatusFull').css('display', '');
                }
                $('.AutoChange').prop('disabled', true);

                $('#dvContCancelNote').css("display", "none");
                if ($("#txtReasonOfCancelContract").hasClass("validelement"))
                    $("#txtReasonOfCancelContract").removeClass('validelement');
                $("#loadingPage").fadeOut();
                if (OpenPopup == 'Yes')
                    $("#dvManageContractStatus").dialog("open");
            }
        });

    }
}

// view metadata
function BindMetaData(contractRecord, isRefresh) {
    //if (!(TermTypeBinded)) {
    //    if (!(isRefresh)) {
    //        $("#loadingPage").fadeIn();
    //    }
    //BindTermTypes(true);
    // }else{
    if (!(isRefresh)) {
        $("#loadingPage").fadeIn();
    }
    if (contractRecord == null) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + getParameterByName("ContractID"),
            type: 'GET',
            cache: false,
            contentType: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                UserID: localStorage.UserID
            },
            processData: false,
            success: function (data) {
                contractRecord = data;
                BindMetadataDetail(contractRecord, isRefresh);
            }
        });
    } else {
        BindMetadataDetail(contractRecord, isRefresh);
    }
    //}
}

function BindMetadataDetail(contractRecord, isRefresh) {
    $("#tdSumContractTitle").html(contractRecord.ContractTitle);
    $("#tdSumContractNumber").html((contractRecord.ContractNumber != null && contractRecord.ContractNumber != "") ? contractRecord.ContractNumber : '-');
    $("#tdSumContractType").html(contractRecord.ContractType);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (mainmetadataFields) {
            var vMetadata = $(mainmetadataFields).find('Metadata');
            var vMetadataHTML = vMetadata[0].innerHTML;
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + encodeURIComponent(contractRecord.ContractType),
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                cache: false,
                success: function (metadataFields) {
                    $("#tblSummaryMetadata").empty();
                    var datalenght = metadataFields.length;
                    for (var i = 0; i < datalenght; i++) {
                        var item = metadataFields[i];
                        var fieldtext = $(vMetadata).find(item.FieldName).text();

                        //Vinod
                        if (item.FieldType == "File Upload") {
                            continue;
                        }

                        if ((item.FieldName != "ContractTitle") && (item.FieldName != "ContractNumber") && (item.FieldName != "ContractType") && (name != "STATUSCHANGEDALERT")) {
                            var vCurrency = "";
                            var vControls = '<tr>';
                            //if (item.FieldName == "ContractValue" || item.FieldType == "Currency") {
                            //    vControls += '<td class="f_head width40">' + item.FieldDisplayName + '(actual)</td>';
                            //} else {
                            if (item.FieldDisplayName.trim().toLowerCase().indexOf("related contract (s)") >= 0)
                                vControls += '<td class="f_head width60">Related Contract Record(s)</td>';
                            else
                                vControls += '<td class="f_head width90">' + item.FieldDisplayName + '</td>';

                            // }
                            var valuetobindinfield = "";
                            if (item.FieldType == "Date") {
                                var vv = $(vMetadata).find(item.FieldName).text();
                                var onlydate = "";
                                if (vv != null) {
                                    onlydate = vv.substring(0, vv.length - 19);
                                    if (onlydate != "") {
                                        if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                            onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                                        } else {
                                            onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                                        }
                                    }
                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + onlydate + '</td>';
                                }
                            } else if (item.FieldName == "ContractValue" || item.FieldType == "Currency" || item.FieldType == "Value / Financials") {
                                vCurrency = item.FieldName;
                                //var strBaseContractValueCurr = "";
                                //strBaseContractValueCurr = $("#hdnContractCurrency").text();
                                //if (strBaseContractValueCurr.trim() == "") {
                                //    strBaseContractValueCurr = "Not Available";
                                //}
                                //else {
                                //    //if (fieldtext == "Not Available") {
                                //    //    strBaseContractValueCurr = "";
                                //    //}
                                //}
                                valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? $(vMetadata).find(item.FieldName).text() : "0.00";
                                vControls += '<td class="labelleft width60" style="word-break: break-all;"><label id="' + item.FieldName + '">' + valuetobindinfield + '</label> ' + $("#hdnContractCurrency").text() + '</td>';
                                valuetobindinfield = "";
                                //vCurrency = item.FieldName;

                            } else {
                                if (item.FieldName == "ContractTermType") {
                                    valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? TermTypeDisplayName[$(vMetadata).find(item.FieldName).text()] : "-";
                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + valuetobindinfield + '</td>';
                                    valuetobindinfield = "";
                                } else {
                                    valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? $(vMetadata).find(item.FieldName).text() : "-";
                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + valuetobindinfield + '</td>';
                                    valuetobindinfield = "";
                                }
                            }

                            vControls += '</tr>';
                            valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? $(vMetadata).find(item.FieldName).text() : "-";
                            vMetadataHTML = vMetadataHTML.replace("<" + item.FieldName + ">" + valuetobindinfield + "</" + item.FieldName + ">", "");
                            valuetobindinfield = '';
                            $("#tblSummaryMetadata").append(vControls);
                            if (vCurrency != "") {
                                if ($.isNumeric($('#' + vCurrency).html())) {
                                    if (vCurrencyDisplayStyle == "UK") {
                                        $('#' + vCurrency).autoNumeric();
                                    } else if (vCurrencyDisplayStyle == "CAN") {
                                        $('#' + vCurrency).autoNumeric({
                                            aSep: ' ',
                                            aDec: '.'
                                        });
                                    } else if (vCurrencyDisplayStyle == "EU") {
                                        $('#' + vCurrency).autoNumeric({
                                            aSep: '.',
                                            aDec: ','
                                        });
                                    } else if (vCurrencyDisplayStyle == "IND") {
                                        $('#' + vCurrency).autoNumeric({
                                            dGroup: '2',
                                        });
                                    }
                                }

                                //var vControlsvalue = '<tr><td class="f_head width40">' + item.FieldDisplayName + '(Base)</td>';
                                //var strBaseContractValueCurr = $("#hdnBaseContractValue").text() + " " + $("#hdnBaseContractCurrency").text();
                                //if (strBaseContractValueCurr.trim() == "0") {
                                //    strBaseContractValueCurr = "Not Available";
                                //    vControlsvalue += '<td class="labelleft width60" style="word-break: break-all;" id=basecurrency>Not Available</td></tr>'
                                //}
                                //else if (true) {
                                //    vControlsvalue += '<td class="labelleft width60" style="word-break: break-all;" ><label id="basecurrencyvalue">' + $("#hdnBaseContractValue").text() + '</label> ' + $("#hdnBaseContractCurrency").text() + '</td></tr>';
                                //}
                                //$("#tblSummaryMetadata").append(vControlsvalue);
                                //vControlsvalue = "";
                                //if (vCurrencyDisplayStyle == "UK") {
                                //    $('#basecurrencyvalue').autoNumeric();
                                //} else if (vCurrencyDisplayStyle == "CAN") {
                                //    $('#basecurrencyvalue').autoNumeric({ aSep: ' ', aDec: '.' });
                                //} else if (vCurrencyDisplayStyle == "EU") {
                                //    $('#basecurrencyvalue').autoNumeric({ aSep: '.', aDec: ',' });
                                //} else if (vCurrencyDisplayStyle == "IND") {
                                //    $('#basecurrencyvalue').autoNumeric({ dGroup: '2', });
                                //}
                                vCurrency == "";
                            }
                        }
                    }

                    var vContractFields = null;

                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractfields',
                        type: 'GET',
                        dataType: 'json',
                        "Content-Type": "application/json",
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey
                        },
                        cache: false,
                        async: false,
                        success: function (contractfields) {
                            vContractFields = contractfields;
                            $("#tblDetailsMetadata").empty();
                            var datalenght = $(vMetadataHTML).length;
                            for (var i = 0; i < datalenght; i++) {
                                var item = $(vMetadataHTML)[i];
                                var name = item.nodeName;
                                var vCurrency = "";
                                if ((name == "APPROVEDBY") || (name == "CONTRACTNUMBER") || (name == "CONTRACTMANAGERS") || (name == "CONTRACTTERMTYPE") ||
                                    (name == "CONTRACTVALUE") || (name == "COUNTERPARTY") || (name == "CUSTOMPERMISSION") ||
                                    (name == "DESCRIPTION") || (name == "STARTDATE") || (name == "ENDDATE") || (name == "EXTERNALSIGNEES") || (name == "ORIGINATINGPARTY") ||
                                    (name == "PROJECT") || (name == "RELATEDCONTRACT") || (name == "TERMENDDATE") || (name == "REVIEWEDBY") || (name == "RENEWALDATE") ||
                                    (name == "COMPANYPROFILE") || (name == "SIGNEES") || (name == "RELATEDCONTRACTS") || (name == "RELATEDREQUESTS")) {
                                    // if transation type is general agreement do not show contract value in metadata
                                    if ($("#hdnTransactionType").text() == "Legal/General Agreement" && name == "CONTRACTVALUE") { } else {
                                        var vField = $.grep(vContractFields, function (person) {
                                            return person.FieldName.toUpperCase() == name
                                        });
                                        var value = item.textContent;
                                        if (vField.length > 0) {
                                            var vControls = '<tr>';
                                            if (vField[0].FieldDisplayName == "Contract Managers") {
                                                vControls += '<td class="f_head width40">Contract Owner(s)</td>';
                                            } else if (vField[0].FieldDisplayName.trim().toLowerCase().indexOf("related contract (s)") >= 0) {
                                                vControls += '<td class="f_head width60">Related Contract Record(s)</td>';
                                            } else {
                                                vControls += '<td class="f_head width90">' + vField[0].FieldDisplayName + '</td>';
                                            }
                                            //else if (vField[0].FieldName == "ContractValue" || item.FieldType == "Currency") {
                                            //    vControls += '<td class="f_head width40">Contract Value(Actual)</td>';
                                            // }

                                            if (value == '' || value == '0') {
                                                if (vField[0].FieldName == "ContractValue" || item.FieldType == "Currency") {

                                                    var valuetoapply = (typeof value != "undefined" && value != null && value != "") ? value : "0.00"
                                                    vControls += '<td class="labelleft width60" style="word-break: break-all;"><label id="td' + vField[0].FieldName + '">' + valuetoapply + '</label> ' + $("#hdnContractCurrency").text() + '</td>';

                                                    vCurrency = 'td' + vField[0].FieldName;
                                                } else {
                                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">-</td>';
                                                }
                                            } else {
                                                if (vField[0].FieldType == "Date") {
                                                    var onlydate = "";
                                                    onlydate = value.substring(0, value.length - 19);
                                                    if (onlydate != "") {
                                                        if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                                            onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                                                        } else {
                                                            onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                                                        }
                                                    }
                                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + onlydate + '</td>';
                                                } else {
                                                    if (vField[0].FieldName == "ContractValue" || item.FieldType == "Currency") {
                                                        //var strBaseContractValueCurr = "";
                                                        //strBaseContractValueCurr = $("#hdnContractCurrency").text();
                                                        //if (strBaseContractValueCurr == "") {
                                                        //    strBaseContractValueCurr = "Not Available";
                                                        //} else {
                                                        //    if (strBaseContractValueCurr.trim() == "") {
                                                        //        strBaseContractValueCurr = "Not Available";
                                                        //    }
                                                        //}
                                                        vControls += '<td class="labelleft width60" style="word-break: break-all;"><label id="td' + vField[0].FieldName + '">' + value + '</label> ' + $("#hdnContractCurrency").text() + '</td>';
                                                        vCurrency = 'td' + vField[0].FieldName;
                                                    } else {
                                                        if (vField[0].FieldName == "ContractTermType") {
                                                            vControls += '<td class="labelleft width60" style="word-break: break-all;">' + TermTypeDisplayName[value] + '</td>';
                                                        } else {
                                                            vControls += '<td class="labelleft width60" style="word-break: break-all;">' + value + '</td>';
                                                        }

                                                    }
                                                }
                                            }
                                            vControls += '</tr>';

                                            $("#tblDetailsMetadata").append(vControls);
                                            if (vCurrency != "") {
                                                if ($.isNumeric($('#' + vCurrency).html())) {
                                                    if (vCurrencyDisplayStyle == "UK") {
                                                        $('#' + vCurrency).autoNumeric({
                                                            vMax: '99999999999999999999.99'
                                                        });
                                                    } else if (vCurrencyDisplayStyle == "CAN") {
                                                        $('#' + vCurrency).autoNumeric({
                                                            aSep: ' ',
                                                            aDec: '.',
                                                            vMax: '99999999999999999999.99'
                                                        });
                                                    } else if (vCurrencyDisplayStyle == "EU") {
                                                        $('#' + vCurrency).autoNumeric({
                                                            aSep: '.',
                                                            aDec: ',',
                                                            vMax: '99999999999999999999.99'
                                                        });
                                                    } else if (vCurrencyDisplayStyle == "IND") {
                                                        $('#' + vCurrency).autoNumeric({
                                                            dGroup: '2',
                                                            vMax: '99999999999999999999.99'
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (!(isRefresh)) {
                                $("#loadingPage").fadeOut();
                                $('#dialogSummary').dialog('open');
                            }
                        },
                        error: function () {
                            if (!(isRefresh)) {
                                $("#loadingPage").fadeOut();
                            }
                        }
                    });
                },
                error: function () {
                    if (!(isRefresh)) {
                        $("#loadingPage").fadeOut();
                    }
                }
            });
        }
    });
}

function ClearShareContractForm() {
    $("#txtShareNotesContract").val('');
    $("#txtShareToContract").val('');
    $("#txtShareExpInContract").val('');
    $('#chkAutoUpdateStatusShare').attr('checked', false);
    GetValuesAndAutoPopulate("ddlContractShareInternal", "");
    if (contractItem.IsFinalized == 'Yes') {
        $("#trAutoUpdateStatusShare").css('display', 'none');
    } else {
        $("#trAutoUpdateStatusShare").css('display', '');
    }

    $('#tblShareContract').empty();
    $('#chkDiscloseCon').attr('checked', false);
    var vSignee = '<tr>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareContract1" name="ShareContractName1" maxlength="42" title="Name" placeholder="Name" type="text" class="f_inpt width90 validelement" />';
    vSignee += '</td>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareContractEmail1" name="ShareContractEmail1" maxlength="50" title="Email ID" placeholder="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">&nbsp;</td>';
    vSignee += '</tr>';
    $('#tblShareContract').html(vSignee);
}

function change_date(txtBox, lblDate) {
    var lblSelected = document.getElementById(lblDate);
    if (typeof ($(txtBox).val()) != "undefined" && $(txtBox).val() != null && $(txtBox).val() != "") {
        var noofdays = parseInt($(txtBox).val());
        $(lblSelected).empty();
        $(lblSelected).html(moment(new Date()).add(noofdays, "days").format('MM/DD/YYYY'));
    } else {
        $(lblSelected).empty();
    }
}

// share contract record
function ShareContract() {
    var vValid = requiredValidator('shareContract', false);
    if (vValid) {

        var emailvalue = "";
        arremail = [];
        $('#shareContract .validemail').each(function (i, item) {
            if (emailvalue == '') {
                emailvalue = item.value;
                if (emailvalue != "")
                    arremail.push(emailvalue.toLowerCase());
                emailvalue = '';
            }

        });

        recipientsArray = arremail.sort();
        reportRecipientsDuplicate = [];
        for (var j = 0; j < recipientsArray.length - 1; j++) {
            if (recipientsArray[j + 1] == recipientsArray[j]) {
                reportRecipientsDuplicate.push(recipientsArray[j]);
                if (reportRecipientsDuplicate.length > 0) {
                    vValid = false;
                }

            }
        }

        if (vValid) {
            $("#loadingPage").fadeIn();
            var vAutoStatusChange = $("#chkAutoUpdateStatusShare").is(':checked') ? 'Yes' : 'No';
            var contractForm = $("#frmShareContract *").serialize();
            contractForm += "&SendBy=" + localStorage.UserName;
            contractForm += "&Notes=" + encodeURI($("#txtShareNotesContract").val());
            contractForm += "&ExpIn=" + $("#txtShareExpInContract").val();
            contractForm += "&ContractTitle=" + encodeURIComponent($("#lblContractTitle").text());
            contractForm += "&AllowComment=" + 'Yes';
            contractForm += "&AutoUpdateStatus=" + vAutoStatusChange;
            var notify = $("#ddlContractShareInternal").chosen().find("option:selected");
            var notyEmail = "";

            $(notify).each(function (i, item) {
                var email = $(item).attr("data-emailvalue");
                if (email != null && email.trim() != "") {

                    var name = item.text;
                    notyEmail += name + "~" + email.trim() + ";";
                }
            });

            contractForm += "&InternalUsers=" + notyEmail;
            if ($("#chkDiscloseCon").is(':checked')) {
                contractForm += "&Disclose=Yes";
            } else {
                contractForm += "&Disclose=No";
            }
            var vContractID = getParameterByName('ContractID');
            //$("#inprocessShareContract").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/Share?contractid=' + vContractID,
                type: 'POST',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey,
                    'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                },
                data: contractForm,
                cache: false,
                success: function (person) {
                    $("#shareContract").dialog("close");
                    if (vAutoStatusChange == "Yes") {
                        contractItem.Status = "In Negotiation";
                        ContractTopActions();
                        //manoj
                        if (documentview == null || documentview == "" || documentview == 'folder') {
                            if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                var selectedfoldervalue = $('#showAll').find("a");
                                var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                var parentdocumentdetails = {
                                    id: idvalueselected,
                                    text: textvalueselected
                                };
                                showfolderdocuments(parentdocumentdetails);
                            } else {
                                BindDocument(vContractID);
                            }
                        } else {
                            DisplayDocument(documentview);
                        }
                        $("#hdnFolderDocumentView").text('');
                        $("#hdnShowAllTextValue").html('');
                        PrvFolderselection = '';
                        //Bind primary and pined document based on new feature
                        if ($("#hdnnewdocumentfeature").text() == "Yes") {
                            CreateDocumentListPinView(vContractID);
                        }
                        //manoj
                    }
                    $("#loadingPage").fadeOut();
                    ClearShareContractForm();
                    GetContractActivities(vContractID);
                },
                error: function (person) {
                    $("#loadingPage").fadeOut();
                    swal("", "Email ID should not duplicate.");
                },
                complete: function () {
                    //$("#inprocessShareContract").css('visibility', 'hidden');
                }
            });
        } else {

            $('#shareContract .validemail').each(function (i, item) {
                for (i = 0; i <= reportRecipientsDuplicate.length; i++) {
                    if (item.value.toLowerCase() == reportRecipientsDuplicate[i]) {
                        var id = item.id;
                        $('#' + id).addClass('error')
                    }
                }

            });
        }
    }
}

function ClearShareContractForm() {
    $("#txtShareNotesContract").val('');
    $("#txtShareToContract").val('');
    $("#txtShareExpInContract").val('');
    $('#chkAutoUpdateStatusShare').attr('checked', false);
    GetValuesAndAutoPopulate("ddlContractShareInternal", "");
    if (contractItem.IsFinalized == 'Yes') {
        $("#trAutoUpdateStatusShare").css('display', 'none');
    } else {
        $("#trAutoUpdateStatusShare").css('display', '');
    }

    $('#tblShareContract').empty();
    $('#chkDiscloseCon').attr('checked', false);
    var vSignee = '<tr>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareContract1" name="ShareContractName1" maxlength="42" title="Name" placeholder="Name" type="text" class="f_inpt width90 validelement" />';
    vSignee += '</td>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareContractEmail1" name="ShareContractEmail1" maxlength="50" title="Email ID" placeholder="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">&nbsp;</td>';
    vSignee += '</tr>';
    $('#tblShareContract').html(vSignee);
}


// share contract record
function getNameAndEmail() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + getParameterByName("ContractID") + '/contacts',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            if (data != null) {
                var datalenght = data.length;
                var allInternal = ''
                var totalFileCount = 0;
                var iex = 0;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];

                    totalFileCount++;
                    if (item.InternalOrExternal == "External") {
                        if (iex == 0) {
                            iex = 1;
                            $('#txtShareContract1').val(item.ContactName);
                            $('#txtShareContractEmail1').val(item.EmailID);
                        } else {
                            var htmlFormatFile = '<tr id="trShareContract' + totalFileCount + '">';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareContract' + totalFileCount + '" maxlength="42" value="' + item.ContactName + '" name="ShareContractName' + totalFileCount + '" placeholder="Name" title="Name" type="text" class="f_inpt width90" value="' + item.ContactName + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareContractEmail' + totalFileCount + '" maxlength="50" value="' + item.EmailID + '" name="ShareContractEmail' + totalFileCount + '" placeholder="Email ID" title="Email ID" type="text" class="f_inpt width90 validelement validemail" value="' + item.EmailID + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td style="width:20px">';
                            htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareContract(this)"><img src="../Content/Images/icon/delete.png" /></a>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';
                            $("#tblShareContract").append(htmlFormatFile);
                        }
                    } else {
                        allInternal += item.ContactName + ";";
                    }
                }
                GetTextAndAutoPopulateNotHidden("ddlContractShareInternal", allInternal);
            }

        },
        error: function () { }

    });
}

function GetTextAndAutoPopulateNotHidden(controlname, values) {

    var multiarr = [];
    var res = values != null ? values.split(";") : [];
    var reslength = res.length;
    var resValue = "";
    for (var i = 0; i < reslength; i++) {
        //   multiarr.push(res[i].trim());
        resValue = res[i].trim();
        if (resValue != "") {
            if ($('#' + controlname + ' option[value="' + resValue + '"]').length > 0 && multiarr.indexOf(resValue) == -1 && $('#' + controlname + ' option[value="' + resValue + '"]').css("display") != "none") {
                multiarr.push(resValue);
            }
        }
    }


    ChosenOrder.setSelectionOrder($('#' + controlname), multiarr, true);
}

// missinginfo
function GetContractPendingAction(open, tabname) {
    //if (typeof tabname != "undefined") {
    //    if (tabname == "Missing") {
    //        currentPanel = "Missing";
    //    } else if (tabname == "Contract Fields") {
    //        currentPanel = "Contract Fields";
    //    }
    //}
    if (!pendingStarted) {
        pendingStarted = true;
        if (open == true)
            $("#loadingPage").fadeIn();
        //if ($("#tblRequired").text() == "") {
        //var ContractSettings = "";
        //var StartApproval = "";
        //var EditContract = "";
        //var JustInfo = "";
        //var Activities = "";
        //var OnlyDocuments = "";
        //var OnlyTerms = "";
        //var OnlyMilestonesObli = "";
        //var OnlyMetadata = "";
        //var OnlyPeople = "";
        var DisplayMissingData = [];
        //$("#tblContractSettingMetadata").empty()
        //$("#tblStartApprovalMetadata").empty()
        $("#tblRequired").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
        $("#tblPeoples").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
        $("#tblDocuments").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
        $("#tblMilestones").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
        $("#tblMilestones").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
        //$("#tblActivitiesMetadata").empty()
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/PendingAction',
            type: 'GET',
            cache: false,
            contentType: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            processData: false,
            success: function (item) {
                //manoj
                if (item != null) {
                    for (keyvalue in item) {
                        switch (keyvalue) {
                            case "OnlyDocuments":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblDocumentMissing").html(item[keyvalue]);
                                        $("#tblDocumentMissing").html('<a href="javascript:void(0);" data-title="' + $(item[keyvalue]).text() + '" onclick="GetContractPendingAction(true, \'Documents\')"><img src="/Content/Images/missing-exc.png"/></a>'); //Added 2.4final to 2.4
                                        DisplayMissingData.push("tblDocumentMissing");
                                        $("#tblDocuments").html(item[keyvalue]);
                                    } else {
                                        $("#tblDocumentMissing").html('');
                                        $("#tblDocuments").html("<tr><td class='f_head'>No Required Document Template(s) and Document Type(s) are missing.</td></tr>");
                                    }
                                    //$("#tblDocumentMissing").parent().show();
                                    break;
                                }
                            case "OnlyTerms":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        $("#tblTermsMissing").html(item[keyvalue]);
                                        //DisplayMissingData.push("tblTermsMissing");
                                    } else {
                                        // $("#tblTermsMissing").html("<tr><td class='f_head'>No item found.</td></tr>");
                                    }
                                    //$("#tblTermsMissing").parent().show();
                                    break;
                                    //$("#tblDocumentMissing").parent().show();

                                }
                            case "OnlyMilestonesObli":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblMilestoneMissing").html(item[keyvalue]);
                                        $("#tblMilestoneMissing").html('<a href="javascript:void(0);" data-title="' + $(item[keyvalue]).text() + '" onclick="GetContractPendingAction(true, \'Milestones\')"><img src="/Content/Images/missing-exc.png"/></a>');
                                        $("#tblMilestones").html(item[keyvalue]);
                                        DisplayMissingData.push("tblMilestoneMissing");
                                        $("#tblMilestoneMissing").parent().parent().css('display', '');
                                    } else {
                                        $("#tblMilestones").html("<tr><td class='f_head'>No Required Milestone(s) is missing.</td></tr>");
                                        $("#tblMilestoneMissing").html('');
                                        $("#tblMilestoneMissing").parent().parent().hide();
                                    }
                                    break;
                                }
                            case "OnlyMetadata":
                                {
                                    var NoItemsFound = "No item found.";
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblMetadataMissing").html(item[keyvalue]);
                                        $("#tblMetadataMissing").html('<a href="javascript:void(0);"  onclick="GetContractPendingAction(true, \'Required\')" data-title="' + $(item[keyvalue]).text() + '"><img src="/Content/Images/missing-exc.png"></a>');
                                        $("#tblRequired").html(item[keyvalue]);
                                        DisplayMissingData.push("tblMetadataMissing");
                                    } else {
                                        $("#tblMetadataMissing").html('<a href="javascript:void(0);" data-title="' + NoItemsFound + '"><img src="/Content/Images/missing-exc.png"></a>');
                                        $("#tblRequired").html("<tr><td class='f_head'>No Required Metadata is missing.</td></tr>");
                                    }
                                    break;
                                }
                            case "OnlyPeople":
                                {
                                    var NoItemsFound = "No Required People(s) are missing."
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblPeopleMissing").html(item[keyvalue]);
                                        $("#tblPeopleMissing").html('<a href="javascript:void(0);" onclick="GetContractPendingAction(true, \'Peoples\')"  data-title="' + $(item[keyvalue]).text() + '"><img src="/Content/Images/missing-exc.png"/></a>');
                                        $("#tblPeoples").html(item[keyvalue]);
                                        DisplayMissingData.push("tblPeopleMissing");
                                    } else {
                                        $("#tblPeoples").html("<tr><td class='f_head'>No Required People(s) are missing.</td></tr>");
                                        $("#tblPeopleMissing").html('<a href="javascript:void(0);" data-title="' + NoItemsFound + '"><img src="/Content/Images/missing-exc.png"/></a>');
                                    }
                                    break;
                                }
                            case "Activities":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "<tr><td class='f_head'>No item found.</td></tr>") {
                                        $("#tblActivity").html(item[keyvalue]);
                                    } else {
                                        $("#tblActivity").html("<tr><td class='f_head'>No Pending Tasks.</td></tr>");
                                    }
                                    break;
                                }
                            case "OnlyDescription": //Added 2.4final to 2.4
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {

                                        //$("#tblDescriptionMissing").html(item[keyvalue]);                                        
                                        $("#tblDescriptionMissing").html('<tr><td><a href="javascript:void(0);" data-title="' + $(item[keyvalue]).text() + '"><img src="/Content/Images/missing-exc.png" style="cursor: default !important;"/></a></td></tr>');
                                        DisplayMissingData.push("tblDescriptionMissing");
                                    } else {
                                        //$("#tblDescriptionMissing").html("<tr><td class='f_head'><label title='Missing Contract Record Description.'>Missing Contract Record Description.</label></td></tr>");
                                        if (contractItem.Description == '') {
                                            $("#tblDescriptionMissing").html("<tr><td class='f_head' style='line-height: 13px !important;'><a href='javascript:void(0);' data-title='Missing Contract Record Description.'><img src='/Content/Images/missing-exc.png' style='cursor: default !important;'/></a></td></tr>");
                                            $("#lblContractDescription").css("display", "none");
                                        } else
                                            $("#lblContractDescription").css("display", "");


                                    }
                                    break;
                                }
                        }
                    }
                    if (DisplayMissingData.length > 0) {
                        $(DisplayMissingData).each(function (iDisplayMissingData, itemDisplayMissingData) {
                            $("#" + itemDisplayMissingData).parent().show();
                        });
                    } else {
                        $(".clpendingaction").css("display", "none");
                        if (contractItem.Description == '')
                            $("#tblDescriptionMissing").parent().show();
                        else
                            $("#tblDescriptionMissing").parent().hide();
                    }
                    //ENH 440 Display Alerts for Missing information
                    if (DisplayMissingData.length > 0) {
                        if (oGeneralSettings != "") {
                            if (oGeneralSettings.DisplayMissingInformation == "No") {
                                $(".clpendingaction").css("display", "none");
                            }
                        } else {
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
                                type: 'GET',
                                dataType: 'json',
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey
                                },
                                cache: false,
                                success: function (data) {
                                    if (data.DisplayMissingInformation == "No") {
                                        $(".clpendingaction").css("display", "none");
                                    }
                                },
                                error: function (data) {
                                    $(".clpendingaction").css("display", "none");
                                }
                            });
                        }
                    } else {
                        $(".clpendingaction").css("display", "none");
                        if (contractItem.Description == '')
                            $("#tblDescriptionMissing").parent().show();
                        else
                            $("#tblDescriptionMissing").parent().hide();
                    }

                    //var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    //var vMissInfoFeat = $.grep(veContractFeatures, function (n, i) {
                    //    return (n.RowKey == "28" && n.Status == "ON");
                    //});
                    //if (!(vMissInfoFeat.length > 0)) {
                    //    $(".clpendingaction").css("display", "none");
                    //}
                    //ENH 440 Display Alerts for Missing information


                    ////manoj
                    //var vActions = '';
                    //ContractSettings += delayedTermDates;
                    //ContractSettings += item["ContractSettings"];
                    //StartApproval = item["StartApproval"];
                    //EditContract = item["EditContract"];
                    //JustInfo = item["JustInfo"];
                    //Activities = item["Activities"];
                    //OnlyDocuments = item["OnlyDocuments"];
                    //OnlyTerms = item["OnlyTerms"];
                    //OnlyMilestonesObli = item["OnlyMilestonesObli"];
                    //OnlyMetadata = item["OnlyMetadata"];
                    //OnlyPeople = item["OnlyPeople"];



                    //if (ContractSettings != '' && ContractSettings != 'undefined' && typeof ContractSettings != "undefined") {
                    //    $("#tblContractSettingMetadata").append(ContractSettings);
                    //} else {
                    //    $("#tblContractSettingMetadata").append("<tr><td>No pending contract settings.</td></tr>");
                    //}
                    //if (StartApproval != '' && typeof StartApproval != "undefined") {
                    //    $("#tblStartApprovalMetadata").append(StartApproval);
                    //    var DocId = $("#tblStartApprovalMetadata .DocumentRowId");
                    //    $(DocId).each(function (i, docid) {
                    //        var documId = docid.id;
                    //        if (typeof documId != "undefined") {
                    //            documId = documId.replace('DocSignMiss-', '');
                    //            if (typeof documId != "undefined" && documId != "") {
                    //                var article = "";
                    //                $.ajax({
                    //                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/SignatureDetail?documentid=' + documId,
                    //                    type: 'GET',
                    //                    dataType: 'json',
                    //                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    //                    cache: false,
                    //                    async: false,
                    //                    success: function (data) {
                    //                        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    //                        var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    //                            return (n.RowKey == "1" && n.Status == "ON");
                    //                        });
                    //                        if (vAccFeat.length > 0) {
                    //                            var num = 1;
                    //                            var vConfig = vAccFeat[0].Configuration;
                    //                            var vProvider = $(vConfig).find('Provider').text();
                    //                            if (vProvider == "Right Signature") {
                    //                                $(data).find('recipient').each(function () {
                    //                                    var issender = $(this).find('is-sender').text();
                    //                                    if (issender != 'true') {
                    //                                        var username = $(this).find('name').text();
                    //                                        var mustsign = $(this).find('must-sign').text();
                    //                                        var email = $(this).find('email').text();
                    //                                        var state = $(this).find('state').text();
                    //                                        article += '<tr>' + num + '.';
                    //                                        article += '<b>' + username + ' - ' + email + '</b> ';
                    //                                        article += '<small>(' + state + ')</small>';
                    //                                        article += '</tr>';
                    //                                        num += 1;
                    //                                    }
                    //                                });
                    //                            }
                    //                            else if (vProvider == "Echo Sign") {
                    //                                $(data).find('participants').each(function () {
                    //                                    var mustsign = $(this).find('ParticipantInfo').text();
                    //                                    var email = $(this).find('email:first').text();
                    //                                    var name = $(this).find('name:first').text();
                    //                                    article += '<tr>' + num + '.';
                    //                                    article += '<b>' + email + '</b> ';
                    //                                    article += '<small>(' + name + ')</small>';
                    //                                    article += '</tr>';
                    //                                    num += 1;
                    //                                });
                    //                            }
                    //                            else if (vProvider == "Docu Sign") {
                    //                                $(data).find('Recipients').each(function () {
                    //                                    var email = $(this).find('Email').text();
                    //                                    var name = $(this).find('UserName').text();
                    //                                    article += '<tr>' + num + '.';
                    //                                    article += '<b>' + email + '</b> ';
                    //                                    article += '<small>(' + name + ')</small>';
                    //                                    article += '</tr>';
                    //                                    num += 1;
                    //                                });
                    //                            }
                    //                        }
                    //                        var DocTd = document.getElementById('DocSignMiss-' + documId);
                    //                        if (typeof article != "undefined") {
                    //                            $(DocTd).append(article);
                    //                        }
                    //                        pendingStarted = false;
                    //                    },
                    //                    error: function (data) {
                    //                        var DocTd = document.getElementById('DocSignMiss-' + documId);
                    //                        if (typeof article != "undefined") {
                    //                            $(DocTd).append(article);
                    //                        }
                    //                        pendingStarted = false;
                    //                    }

                    //                });
                    //            }
                    //        }

                    //    });

                    //}
                    //else {
                    //    $("#tblStartApprovalMetadata").append("<tr><td>No pending/missing signee.</td></tr>");
                    //}
                    //if (EditContract != '' && typeof EditContract != "undefined") {
                    //    $("#tblEditcontractMetadata").append(EditContract);
                    //} else {
                    //    $("#tblEditcontractMetadata").append("<tr><td>No pending required fields.</td></tr>");
                    //}
                    //if (JustInfo != '' && typeof JustInfo != "undefined") {
                    //    $("#tblJustInfoMetadata").append(JustInfo);
                    //} else {
                    //    $("#tblJustInfoMetadata").append("<tr><td>No pending actions required.</td></tr>");
                    //}
                    //if (Activities != '' && typeof Activities != "undefined") {
                    //    //$("#tblActivitiesMetadata").append(Activities);
                    //    $("#tblActivity").html(Activities);
                    //} else {
                    //    //$("#tblActivitiesMetadata").append("<tr><td>No pending tasks.</td></tr>");
                    //    $("#tblActivity").html("<tr><td>No pending tasks.</td></tr>");
                    //}

                    //if (OnlyDocuments != '' && typeof OnlyDocuments != "undefined") {
                    //    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    //    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                    //        return (n.RowKey == "20" && n.Status == "ON");
                    //    });
                    //    var details = "";
                    //    if (vDocLibFeat.length > 0) {
                    //        $("#tblDocumentMissing").empty();
                    //        $("#tblDocumentMissing").append(OnlyDocuments);
                    //        $("#tblDocumentMissing").parent().show();
                    //    } else {
                    //        $("#tblDocumentMissingNormal").empty();
                    //        $("#tblDocumentMissingNormal").append(OnlyDocuments);
                    //        $("#tblDocumentMissingNormal").parent().show();
                    //    }
                    //} else {
                    //    $("#tblDocumentMissing").empty();
                    //    $("#tblDocumentMissing").parent().hide();

                    //    $("#tblDocumentMissingNormal").empty();
                    //    $("#tblDocumentMissingNormal").parent().hide();
                    //}

                    //if (OnlyTerms != '' && typeof OnlyTerms != "undefined") {
                    //    $("#tblTermsMissing").empty();
                    //    $("#tblTermsMissing").append(OnlyTerms);
                    //    $("#tblTermsMissing").parent().show();
                    //} else {
                    //    $("#tblTermsMissing").empty();
                    //    $("#tblTermsMissing").parent().hide();
                    //}

                    //if (OnlyMilestonesObli != '' && typeof OnlyMilestonesObli != "undefined") {
                    //    $("#tblMilestoneMissing").empty();
                    //    $("#tblMilestoneMissing").append(OnlyMilestonesObli);
                    //    $("#tblMilestoneMissing").parent().show();
                    //} else {
                    //    $("#tblMilestoneMissing").empty();
                    //    $("#tblMilestoneMissing").parent().hide();
                    //}

                    //if (OnlyMetadata != '' && typeof OnlyMetadata != "undefined") {
                    //    $("#tblMetadataMissing").empty();
                    //    $("#tblMetadataMissing").append(OnlyMetadata);
                    //    $("#tblMetadataMissing").parent().show();
                    //} else {
                    //    $("#tblMetadataMissing").empty();
                    //    $("#tblMetadataMissing").parent().hide();
                    //}

                    //if (OnlyPeople != '' && typeof OnlyPeople != "undefined") {
                    //    $("#tblPeopleMissing").empty();
                    //    $("#tblPeopleMissing").append(OnlyPeople);
                    //    $("#tblPeopleMissing").parent().show();
                    //} else {
                    //    $("#tblPeopleMissing").empty();
                    //    $("#tblPeopleMissing").parent().hide();
                    //}

                    if (open == true && tabname != "BindPeoples") {
                        var passdispalyid = "";
                        $(".cltabrequired").removeClass('pop_up__Acti');
                        $('.cltblrequired').css("display", "none");
                        if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
                            $("#li" + tabname).addClass('pop_up__Acti');
                            $("#tbl" + tabname).css("display", "");
                            passdispalyid = 'tbl' + tabname;
                        } else {
                            $("#liRequired").addClass('pop_up__Acti');
                            $("#tblRequired").css("display", "");
                            passdispalyid = 'tblRequired';
                        }
                        allowtoupdate(passdispalyid);
                        $("#loadingPage").fadeOut();
                        $("#dialogDelay").dialog("open");
                    } else {
                        $("#loadingPage").fadeOut();
                    }
                } else {
                    $("#loadingPage").fadeOut();
                }
            },
            error: function () {
                pendingStarted = false;
                //manoj
                $("#tblRequired").html('<tr><td>No item found.</td></tr>');
                $("#tblPeoples").html('<tr><td>No item found.</td></tr>');
                $("#tblDocuments").html('<tr><td>No item found.</td></tr>');
                $("#tblMilestones").html('<tr><td>No item found.</td></tr>');
                $("#tblActivity").html('<tr><td>No item found.</td></tr>');
                $("#tblDescription").html('<tr><td>No item found.</td></tr>');
                $("#lblContractDescription").css("display", "");
                $(".clpendingaction").css("display", "none");
                //manoj
                //$("#tblContractSettingMetadata").append("<tr><td>No pending contract settings</td></tr>");
                //$("#tblStartApprovalMetadata").append("<tr><td>no pending/missing signee.</td></tr>");
                //$("#tblEditcontractMetadata").append("<tr><td>No pending required fields.</td></tr>");
                //$("#tblJustInfoMetadata").append("<tr><td>No pending actions required.</td></tr>");
                //$("#tblActivitiesMetadata").append("<tr><td>No pending tasks.</td></tr>");
                //$("#tblDescriptionMissing").html("<tr><td>No pending tasks.</td></tr>");
                if (open == true && tabname != "BindPeoples") {
                    var passdispalyid = "";
                    $(".cltabrequired").removeClass('pop_up__Acti');
                    $('.cltblrequired').css("display", "none");
                    if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
                        $("#li" + tabname).addClass('pop_up__Acti');
                        $("#tbl" + tabname).css("display", "");
                        passdispalyid = 'tbl' + tabname;
                    } else {
                        $("#liRequired").addClass('pop_up__Acti');
                        $("#tblRequired").css("display", "");
                        passdispalyid = 'tblRequired';
                    }
                    allowtoupdate(passdispalyid);
                    $("#loadingPage").fadeOut();
                    $("#dialogDelay").dialog("open");
                } else {
                    $("#loadingPage").fadeOut();
                }
            }
        });
        //}
        //else {
        //    if (open == true) {
        //        var passdispalyid = "";
        //        $(".cltabrequired").removeClass('pop_up__Acti');
        //        $('.cltblrequired').css("display", "none");
        //        if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
        //            $("#li" + tabname).addClass('pop_up__Acti');
        //            $("#tbl" + tabname).css("display", "");
        //            passdispalyid = 'tbl' + tabname;
        //        } else {
        //            $("#liRequired").addClass('pop_up__Acti');
        //            $("#tblRequired").css("display", "");
        //            passdispalyid = 'tblRequired';
        //        }
        //        allowtoupdate(passdispalyid);
        //        $("#loadingPage").fadeOut();
        //        $("#dialogDelay").dialog("open");
        //    }
        //}
    } else {
        if (open == true && tabname != "BindPeoples") {
            var passdispalyid = "";
            $(".cltabrequired").removeClass('pop_up__Acti');
            $('.cltblrequired').css("display", "none");
            if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
                $("#li" + tabname).addClass('pop_up__Acti');
                $("#tbl" + tabname).css("display", "");
                passdispalyid = 'tbl' + tabname;
            } else {
                $("#liRequired").addClass('pop_up__Acti');
                $("#tblRequired").css("display", "");
                passdispalyid = 'tblRequired';
            }
            allowtoupdate(passdispalyid);
            $("#loadingPage").fadeOut();
            $("#dialogDelay").dialog("open");
        } else {
            $("#loadingPage").fadeOut();
        }
    }
}

function allowtoupdate(displayid) {
    if (displayid != "tblActivity") {
        var tbldata = document.getElementById(displayid).textContent;
        if (typeof (tbldata) != "undefined" && tbldata != null && tbldata != "" && tbldata != "No Required Metadata is missing." && tbldata != "No Required People(s) are missing." && tbldata != "No Required Document Template(s) and Document Type(s) are missing." && tbldata != "No Required Milestone(s) is missing." && tbldata != "No Pending Tasks.") {
            if (displayid == "tblPeoples") {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#btnPendingUpdate").show();
                } else {
                    $("#btnPendingUpdate").hide();
                }
            } else if (displayid == "tblMilestones") {
                if (contractItem.IsDraft == "Yes") {
                    $("#btnPendingUpdate").hide();
                } else {
                    if ($("#hdnPermission").val() == "Manage" || $("#hdnPermission").val() == "Contribute") {
                        $("#btnPendingUpdate").show();
                    } else {
                        $("#btnPendingUpdate").hide();
                    }
                }
            } else {
                if ($("#hdnPermission").val() == "Manage" || $("#hdnPermission").val() == "Contribute") {
                    $("#btnPendingUpdate").show();
                } else {
                    $("#btnPendingUpdate").hide();
                }
            }
        } else {
            $("#btnPendingUpdate").hide();
        }
    } else {
        $("#btnPendingUpdate").hide();
    }
}

function MangePeople() {
    $('input[name="ContractPrivacy"][value="' + $("#lblContractPrivacy").text() + '"]').prop('checked', true);
    if ($("#licontractmanagers").text() != "") {
        GetValuesAndAutoPopulate("ddlContractManagers", $("#licontractmanagers").text());
    }

    if ($("#lireviewers").text() != "") {
        GetValuesAndAutoPopulate("ddlReviewers", $("#lireviewers").text());
    }

    if ($("#liapprovers").text() != "") {
        GetValuesAndAutoPopulate("ddlApproversNew", $("#liapprovers").text());
    }

    if ($("#lisignees").text() != "") {
        GetValuesAndAutoPopulate("ddlSignees", $("#lisignees").text());
    }
    $('.contractroles').each(function () {
        var id = $(this).attr("data-name");
        GetValuesAndAutoPopulate(id, $(this).text());
    })
    $("#txtExternalSignee").val($("#lisigneesExternal").text());

    $('#txtExternalSignee').val($('#lisigneesExternalView').text());

    $("#addEditPeople").dialog("option", "title", "People");
    $("#addEditPeople").dialog("open");
    $("#addEditPeople").height("auto");
}

function DisplayRequiredTab(tabname) {
    var passdispalyid = "";
    $(".cltabrequired").removeClass('pop_up__Acti');
    $('.cltblrequired').css("display", "none");
    if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
        $("#li" + tabname).addClass('pop_up__Acti');
        $("#tbl" + tabname).css("display", "");
        passdispalyid = 'tbl' + tabname;
    } else {
        $("#liRequired").addClass('pop_up__Acti');
        $("#tblRequired").css("display", "");
        passdispalyid = 'tblRequired';
    }
    allowtoupdate(passdispalyid);
}

function savePeople() {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var isformvalid = false;
    if (requiredValidator('formaddNewPeople')) {
        $("#loadingPage").fadeIn();
        var contractmanagers = $("#ddlContractManagers").val();
        var cm = '';

        $(contractmanagers).each(function (i, item) {
            if (cm == '') {
                cm = item;
            } else {
                cm += "; " + item;
            }
        });

        var reviewers = $("#ddlReviewers").val();
        var rev = '';
        $(reviewers).each(function (i, item) {
            if (rev == '') {
                rev = item;
            } else {
                rev += "; " + item;
            }
        });

        var approvers = $("#ddlApproversNew").val();
        var app = '';
        $(approvers).each(function (i, item) {
            if (app == '') {
                app = item;
            } else {
                app += "; " + item;
            }
        });

        var signees = $("#ddlSignees").val();
        var sign = '';
        $(signees).each(function (i, item) {
            if (sign == '') {
                sign = item;
            } else {
                sign += "; " + item;
            }
        });
        var signees = $("#ddlSignees").val();




        var extsign = $("#txtExternalSignee").val();
        var formData = new FormData();
        formData.append("ContractManagers", cm);
        formData.append("Reviewers", rev);
        formData.append("Approvers", app);
        formData.append("Signees", sign);
        formData.append("ExternalSignees", extsign);

        formData.append("ModifiedBy", localStorage.UserName);
        formData.append("CustomPermission", contractItem.CustomPermission);
        var read = [];
        var writeRead = [];
        var full = [];
        var UniqueUsers = [];
        $(".ContractRoleType").each(function () {
            var valddl = $(this).val();
            var IDddl = this.id;
            var Permi = $(this).attr('data-permission');
            var vallt = '';
            $(valddl).each(function (i, item) {
                if (vallt == '') {
                    vallt = item;
                } else {
                    vallt += "; " + item;
                }

                if (Permi == "Read Only") {
                    read.push(item);
                    if ($.inArray(item, ReadContractroleUser) > -1) {
                        ReadContractroleUser = jQuery.grep(ReadContractroleUser, function (value) {
                            return value != item;
                        });
                    }
                } else if (Permi == "Read/Write") {
                    writeRead.push(item);
                    if ($.inArray(item, ReadWriteContractroleUser) > -1) {
                        ReadWriteContractroleUser = jQuery.grep(ReadWriteContractroleUser, function (value) {
                            return value != item;
                        });
                    }
                } else if (Permi == "Full Control") {
                    full.push(item);
                    if ($.inArray(item, FullContractroleUser) > -1) {
                        FullContractroleUser = jQuery.grep(FullContractroleUser, function (value) {
                            return value != item;
                        });
                    }
                }
            });
            formData.append(IDddl, vallt);
        });
        var arrFull = $.map(contractItem.FullControlPermissions.split(";"), $.trim);
        var arrReadWrite = $.map(contractItem.ReadWritePermissions.split(";"), $.trim);
        var arrRead = $.map(contractItem.ReadOnlyPermissions.split(";"), $.trim);

        //Sridhar
        //New users
        if (contractmanagers != "" && contractmanagers != null && typeof (contractmanagers) != "undefined")
            var newOwners = contractmanagers.filter(function (obj) {
                return arrFull.indexOf(obj) == -1;
            });
        if (approvers != "" && approvers != null && typeof (approvers) != "undefined")
            var newApprovers = approvers.filter(function (obj) {
                return arrReadWrite.indexOf(obj) == -1;
            });
        if (reviewers != "" && reviewers != null && typeof (reviewers) != "undefined")
            var newReviewers = reviewers.filter(function (obj) {
                return arrReadWrite.indexOf(obj) == -1;
            });
        if (signees != "" && signees != null && typeof (signees) != "undefined")
            var newSignees = signees.filter(function (obj) {
                return arrReadWrite.indexOf(obj) == -1;
            });

        $(FullContractroleUser).each(function () {
            var username = this.toString().trim();
            arrFull = jQuery.grep(arrFull, function (value) {
                return value != username;
            });
        });
        $(ReadWriteContractroleUser).each(function () {
            var username = this.toString().trim();
            arrReadWrite = jQuery.grep(arrReadWrite, function (value) {
                return value != username;
            });
        });
        $(ReadContractroleUser).each(function () {
            var username = this.toString().trim();
            arrRead = jQuery.grep(arrRead, function (value) {
                return value != username;
            });
        });


        contractItem.FullControlPermissions = arrFull.join('; ') + (newOwners != "" && newOwners != null ? "; " + newOwners.join('; ') : "");
        contractItem.ReadWritePermissions = arrReadWrite.join('; ') + (newApprovers != "" && newApprovers != null ? "; " + newApprovers.join('; ') : "") +
            (newReviewers != "" && newReviewers != null ? "; " + newReviewers.join('; ') : "") +
            (newSignees != "" && newSignees != null ? "; " + newSignees.join('; ') : "");
        contractItem.ReadOnlyPermissions = arrRead.join('; ');
        $(full).each(function () {
            var username = this.toString();
            if ($.inArray(username, $.map(contractItem.FullControlPermissions.split(";"), $.trim)) == -1) {
                contractItem.FullControlPermissions = contractItem.FullControlPermissions != "" ? contractItem.FullControlPermissions + "; " + username : username;
            }
            if ($.inArray(username, writeRead) > -1) {
                writeRead = jQuery.grep(writeRead, function (value) {
                    return value != username;
                });
            }
            if ($.inArray(username, read) > -1) {
                read = jQuery.grep(read, function (value) {
                    return value != username;
                });
            }
            if ($.inArray(username, UniqueUsers) == -1)
                UniqueUsers.push(username);
        });
        $(writeRead).each(function () {
            var username = this.toString();
            if ($.inArray(username, $.map(contractItem.ReadWritePermissions.split(";"), $.trim)) == -1) {
                contractItem.ReadWritePermissions = contractItem.ReadWritePermissions != "" ? contractItem.ReadWritePermissions + "; " + username : username;
            }

            if ($.inArray(username, read) > -1) {
                read = jQuery.grep(read, function (value) {
                    return value != username;
                });
            }
            if ($.inArray(username, UniqueUsers) == -1)
                UniqueUsers.push(username);
        });
        $(read).each(function () {
            var username = this.toString();
            if ($.inArray(username, $.map(contractItem.ReadOnlyPermissions.split(";"), $.trim)) == -1) {
                contractItem.ReadOnlyPermissions = contractItem.ReadOnlyPermissions ? contractItem.ReadOnlyPermissions + "; " + username : username;
            }
            if ($.inArray(username, UniqueUsers) == -1)
                UniqueUsers.push(username);

        });
        var uniUser = '';
        $(UniqueUsers).each(function (i, item) {
            if (uniUser == '') {
                uniUser = item;
            } else {
                uniUser += "; " + item;
            }
        });
        formData.append("ContractRoleUsers", uniUser);
        formData.append("ReadOnlyPermissions", contractItem.ReadOnlyPermissions);
        formData.append("ReadWritePermissions", contractItem.ReadWritePermissions);
        formData.append("FullControlPermissions", contractItem.FullControlPermissions);
        $.ajax({
            // url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/people',
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/ipeopleupdate',
            type: 'PUT',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
            },
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            success: function (item) {
                BindContractPeopleMetadata(item);
                BindContractRolesMetadata();
                contractItem = item;

                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#loadingPage").fadeOut();
                $("#addEditPeople").dialog("close");

                //Binding Missing Information
                pendingStarted = false;
                $("#tblContractSettingMetadata").empty();
                GetContractPendingAction(true, "BindPeoples");
            },
            error: function () {
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
        $("#loadingPage").fadeOut();
    }
    return isformvalid;

}

function RemoveErrors() {
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validuser").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validmultiselect").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validdate").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validnumspec").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validNicEdit").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validemail").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".specialchar").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validnumber").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".error").removeClass("error");
}


// Manage term
function contextMenuTerm(action, el, pos) {
    switch (action) {
        case "view":
            {
                var vTermType = contractItem.ContractTermType;
                var vTermTypeDisplay = vTermType != "" ? TermTypeDisplayName[vTermType] : "NA";
                var vMetadata = '<tr>';
                vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Term Type</td>';
                vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + vTermTypeDisplay + '</td>';
                vMetadata += '</tr>';
                if (vTermType == "Fixed Term") {
                    var vStartdate = '';
                    var vEnddate = '';

                    var vCounterNotice = '';
                    //Renewal / Cancellation Conditions
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Cancellation Conditions</td>';
                    if (contractItem.ContractTermNotes != null && contractItem.ContractTermNotes != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.ContractTermNotes + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';



                    //Current Term
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Start / Effective Date</td>';
                    if (contractItem.StartDate != null && contractItem.StartDate != '') {
                        var rstartdate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + rstartdate + ' </td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';

                    vMetadata += '</tr>';


                    //Next Evaluation Date
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Next Evaluation Date</td>';
                    if (contractItem.NextEvaluationDate != null && contractItem.NextEvaluationDate != '') {
                        var nextEvaluationDate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            nextEvaluationDate = contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                nextEvaluationDate = contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                nextEvaluationDate = contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + nextEvaluationDate + '</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';

                    vMetadata += '</tr>';


                    //End Date
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">End Date</td>';
                    if (contractItem.EndDate != null && contractItem.EndDate != '') {
                        var renddate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            renddate = contractItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                renddate = contractItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                renddate = contractItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + renddate + '</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';

                    vMetadata += '</tr>';


                    //Counterparty Contact / Address for Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Contact / Address for Notice</td>';
                    if (contractItem.CounterpartyNotices != null && contractItem.CounterpartyNotices != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.CounterpartyNotices + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Counterparty Cancellation Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Cancellation Notice</td>';
                    if (contractItem.CounterpartyNoticesCancel != null && contractItem.CounterpartyNoticesCancel != '') {
                        //var counterpartyNoticesCancelDate = '';
                        //if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        //    counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        //}
                        //else {
                        //    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        //        counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        //    }
                        //    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        //        counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        //    }

                        //}
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.CounterpartyNoticesCancel + ' day(s)</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    $(".renewableTermDetails").css('display', 'none');

                    showTermActivities();

                } else if (vTermType == "Evergreen / Perpetual") {
                    //Renewal / Cancellation Conditions
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Cancellation Conditions</td>';
                    if (contractItem.ContractTermNotes != null && contractItem.ContractTermNotes != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.ContractTermNotes + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';



                    //Current Term
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Start / Effective Date</td>';
                    if (contractItem.StartDate != null && contractItem.StartDate != '') {
                        var rstartdate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + rstartdate + ' </td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';

                    vMetadata += '</tr>';


                    //Next Evaluation Date
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Next Evaluation Date</td>';
                    if (contractItem.NextEvaluationDate != null && contractItem.NextEvaluationDate != '') {
                        var nextEvaluationDate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            nextEvaluationDate = contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                nextEvaluationDate = contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                nextEvaluationDate = contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + nextEvaluationDate + '</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';

                    vMetadata += '</tr>';

                    //Counterparty Contact / Address for Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Contact / Address for Notice</td>';
                    if (contractItem.CounterpartyNotices != null && contractItem.CounterpartyNotices != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.CounterpartyNotices + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Counterparty Cancellation Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Cancellation Notice</td>';
                    if (contractItem.CounterpartyNoticesCancel != null && contractItem.CounterpartyNoticesCancel != '') {
                        //var counterpartyNoticesCancelDate = '';
                        //if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        //    counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        //}
                        //else {
                        //    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        //        counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        //    }
                        //    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        //        counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        //    }

                        //}
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.CounterpartyNoticesCancel + ' day(s)</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    $(".renewableTermDetails").css('display', 'none');
                    showTermActivities();
                } else if (vTermType == "Executed / Performance") {
                    //Renewal / Cancellation Conditions
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Cancellation Conditions</td>';
                    if (contractItem.ContractTermNotes != null && contractItem.ContractTermNotes != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.ContractTermNotes + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';



                    //Date of execution
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Start / Effective Date</td>';
                    if (contractItem.StartDate != null && contractItem.StartDate != '') {
                        var rstartdate = '',
                            renddate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                rstartdate = contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + rstartdate + ' </td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';

                    vMetadata += '</tr>';


                    //Counterparty Contact / Address for Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Contact / Address for Notice</td>';
                    if (contractItem.CounterpartyNotices != null && contractItem.CounterpartyNotices != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.CounterpartyNotices + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Counterparty Cancellation Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Cancellation Notice</td>';
                    if (contractItem.CounterpartyNoticesCancel != null && contractItem.CounterpartyNoticesCancel != '') {
                        //var counterpartyNoticesCancelDate = '';
                        //if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        //    counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        //}
                        //else {
                        //    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        //        counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        //    }
                        //    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        //        counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        //    }

                        //}
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.CounterpartyNoticesCancel + ' day(s)</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    $(".renewableTermDetails").css('display', 'none');
                    showTermActivities();
                } else if (vTermType == "Renewable") {
                    var vRenewOn = '';

                    //Renewal / Cancellation Conditions
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Renewal / Cancellation Conditions</td>';
                    if (contractItem.ContractTermNotes != null && contractItem.ContractTermNotes != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.ContractTermNotes + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Auto-Renew at the end of each term
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Auto-Renew at the end of each term</td>';
                    if (contractItem.AutoRenew != null && contractItem.AutoRenew != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.AutoRenew + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Requires Renewal Authorization
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Requires Renewal Authorization</td>';
                    if (contractItem.RequiresAuth != null && contractItem.RequiresAuth != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.RequiresAuth + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Renewal Notice to Counterparty
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Renewal Notice to Counterparty</td>';
                    if (contractItem.CounterpartyNoticesRenewalDate != null && contractItem.CounterpartyNoticesRenewalDate != '') {
                        var counterpartyNoticesRenewalDate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            counterpartyNoticesRenewalDate = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                counterpartyNoticesRenewalDate = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                counterpartyNoticesRenewalDate = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + counterpartyNoticesRenewalDate + '</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Counterparty Cancellation Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Cancellation Notice</td>';
                    if (contractItem.CounterpartyNoticesCancelDate != null && contractItem.CounterpartyNoticesCancelDate != '') {
                        var counterpartyNoticesCancelDate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                counterpartyNoticesCancelDate = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + counterpartyNoticesCancelDate + '</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Counterparty Contact / Address for Notice
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Counterparty Contact / Address for Notice</td>';
                    if (contractItem.CounterpartyNotices != null && contractItem.CounterpartyNotices != '')
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + contractItem.CounterpartyNotices + '</td>';
                    else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Current Term
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Current Term</td>';
                    if (contractItem.EffectiveDate != null && contractItem.EffectiveDate != '') {
                        var rstartdate = '',
                            renddate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            rstartdate = contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            if (contractItem.TermEndDate != null)
                                renddate = contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                rstartdate = contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                                if (contractItem.TermEndDate != null)
                                    renddate = contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                rstartdate = contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                                if (contractItem.TermEndDate != null)
                                    renddate = contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + rstartdate + ' - ' + renddate + '</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    //Upcoming Term
                    vMetadata += '<tr>';
                    vMetadata += '<td style="padding: 5px;color: #2f2f2f;">Upcoming Term</td>';
                    if (contractItem.NextTermStartDate != null && contractItem.NextTermStartDate != '') {
                        var rstartdate = '',
                            renddate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            rstartdate = contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            renddate = contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        } else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                                rstartdate = contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                                renddate = contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                                rstartdate = contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                                renddate = contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                            }

                        }
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">' + rstartdate + ' - ' + renddate + '</td>';
                    } else
                        vMetadata += '<td style="padding: 5px;color: #2f2f2f;">-</td>';
                    vMetadata += '</tr>';

                    $(".renewableTermDetails").css('display', '');
                    //$("#MetaRenewalViewHistoryLink").css("display", "");
                    //$("#tblMetadataDetail").css("display", "none");
                    //$("#viewMetadataDetailForRenew").css("display", "");
                    //    vMetadata += '<h2 class="pop_heading" style="font-size: 18px;text-decoration: initial;">Term Type :' + vTermType + '</h2></br>';
                    //    vMetadata += '<small>Renew On or Before:</small>';
                    //    if (contractItem.CounterpartyNoticesRenewal != null && contractItem.CounterpartyNoticesRenewalDate != null) {
                    //        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    //        { vRenewOn = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        else {
                    //            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vRenewOn = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    //            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vRenewOn = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }

                    //        }
                    //        vMetadata += '<small class="small_text">' + vRenewOn + '</small></br>';
                    //    }
                    //    else {
                    //        vMetadata += '</br>';
                    //    }
                    //    vMetadata += '<small>Upcoming Term :</small>';
                    //    vMetadata += '<small class="small_text">';
                    //    if (contractItem.NextTermStartDate != null)
                    //        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    //        { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        else {
                    //            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    //            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }

                    //        }
                    //    vMetadata += '</small>';
                    //    vMetadata += '<small>-</small>';
                    //    vMetadata += '<small class="small_text">';
                    //    if (contractItem.NextTermEndDate != null)
                    //        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    //        { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        else {
                    //            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    //            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        }
                    //    vMetadata += '</small></br>';
                    //    vMetadata += '<small>Current Term :</small>';
                    //    vMetadata += '<small class="small_text">';
                    //    if (contractItem.EffectiveDate != null)
                    //        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    //        { vMetadata += contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        else {
                    //            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    //            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                    //                vMetadata += contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    //            }
                    //        }
                    //    vMetadata += '</small>';
                    //    vMetadata += '<small>-</small>';
                    //    vMetadata += '<small class="small_text">';
                    //    if (contractItem.TermEndDate != null)
                    //        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    //        { vMetadata += contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        else {
                    //            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    //            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                    //                vMetadata += contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    //            }
                    //        }
                    //    vMetadata += '</small></br>';
                    //    vMetadata += '<h2 class="pop_heading" style="font-size: 18px;">Renewal Terms & Conditions</h2></br>';
                    //    var RenewalTypes = '';
                    //    if (contractItem.RequiresAuth != null && contractItem.AutoRenew != null) {
                    //        if (contractItem.AutoRenew == 'Yes')
                    //            RenewalTypes += 'Auto Renewal ';
                    //        else
                    //            RenewalTypes += 'Manual Renewal ';

                    //        if (contractItem.RequiresAuth == 'Yes')
                    //            RenewalTypes += 'With Authorization';
                    //        else
                    //            RenewalTypes += 'Without Authorization';
                    //    }
                    //    vMetadata += '<small>Renewal Types :</small><small class="small_text">' + RenewalTypes + '</small></br>';
                    //    vMetadata += '<small>Renewal/Termination Conditions :</small><small class="small_text">' + contractItem.ContractTermNotes + '</small></br>';
                    //    var CounterNoticeON = '';
                    //    var vDiffNoticON = '';
                    //    var vFromDate = moment(new Date());
                    //    if (contractItem.CounterpartyNoticesCancel != null && contractItem.CounterpartyNoticesCancelDate != null) {
                    //        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    //        { CounterNoticeON = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        else {
                    //            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { CounterNoticeON = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    //            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { CounterNoticeON = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    //        }
                    //        vDiffNoticON = DiffBetDate(vFromDate, contractItem.CounterpartyNoticesCancelDate);
                    //        vMetadata += '<small class="small_text">Counterparty Notice for Termination ' + vDiffNoticON + ' Prior (' + CounterNoticeON + ')</small></br>';
                    //    }

                    //    vMetadata += '<h2 class="pop_heading" style="font-size: 18px;">Renewal Activity & Status</h2></br>';
                    //    vMetadata += '<small class="small_text">' + UpcomingChecklist + '</small></br>';
                    //    vMetadata += '<small class="small_text">' + UpComingNotes + '</small>';
                    //}
                }
                $("#tbodyTermSummary").html(vMetadata);
                //setBlankValueToHyphen("tblMetadataDetail");
                $("#dvRenewHistory").css('display', 'none');
                $("#dvActivityComment").css('display', 'none');
                $("#viewMetadataDetail").dialog("option", "title", "View Contract Term & Renewals Details");
                $("#viewMetadataDetail").dialog("open");
                break;
            }
        case "manage":

            {
                OpenManageContractTerm(contractItem);

                break;
            }
    }
}

function showTermActivities() {
    $("#ulActivityComment").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (mainmetadataFields) {
            var vMetadata = $(mainmetadataFields).find('Metadata');
            if ($(vMetadata).find("TermCommentsXML").length > 0) {
                $("#ulActivityComment").empty();
                var commentArr = [];
                var commentsxML = decodeURIComponent($(vMetadata).find("TermCommentsXML")[0].innerHTML);
                $(commentsxML).find("RenewalComment").each(function () {
                    var dateText = $(this).find("Created").text()

                    var item = {
                        activity: $(this).find('Activity').text(),
                        comment: $(this).find('Comments').text(),
                        sendto: $(this).find('SendTo').text(),
                        created: new Date(dateText)
                        /* other properties*/
                    }
                    /* push object to array*/
                    commentArr.push(item);

                });

                if (commentArr.length > 0) {
                    commentArr.sort(function (a, b) {
                        return a.created < b.created;
                    });
                    var htmlComment = '';
                    $.each(commentArr, function (index, item) {
                        if (index < 3) {
                            htmlComment += '<li><b class="color_lightgrey"><span class="color_dark" style="margin-right: 20px;">Activity: </span>' + item.activity + '</b><br><br><b class="color_dark float_left" style="margin-right: 7px;">Comment: </b><div class="taskcomment"><span> ' + item.comment + '</span></div></li>';
                        } else {
                            htmlComment += '<li class="moreComments" style="display:none;"><b class="color_lightgrey"><span class="color_dark" style="margin-right: 20px;">Activity: </span>' + item.activity + '</b><br><br><b class="color_dark float_left" style="margin-right: 7px;">Comment: </b><div class="taskcomment"><span> ' + item.comment + '</span></div></li>';

                        }
                    });
                    if (commentArr.length > 3) {
                        htmlComment += '<li style="border: none;"><a href="javascript:void(0);" onclick="showAllActivities(this)" style="color: #44a6d8;">Show Older</a></li>';
                    }

                    $("#ulActivityComment").append(htmlComment);
                }

            } else {
                $("#ulActivityComment").empty();
                $("#ulActivityComment").append('<li style="border: none;"><b class="color_lightgrey"><span class="color_dark" style="margin-right: 20px;">No Activities found</span></b></li>');
            }
        },
        error: function (mainmetadataFields) {
            $("#ulActivityComment").empty();
            $("#ulActivityComment").append('<li style="border: none;"><b class="color_lightgrey"><span class="color_dark" style="margin-right: 20px;">No Activities found</span></b></li>');
        }
    });
}

function OpenManageContractTerm(contrcatItemselection) {
    contrcatItem = contrcatItemselection;
    vContractID = contrcatItem.RowKey;
    //$("#hdContractID").val(contrcatItem.RowKey)
    //Sridhar
    BindContractTermTypeddl();
    //Sridhar
    if (contrcatItem.ContractTermType != undefined && contrcatItem.ContractTermType != "" && contrcatItem.ContractTermType != null) {
        $("#ddlTermType").val(contrcatItem.ContractTermType);
    }
    var vTermType = $("#ddlTermType option:selected").val();
    $("#TermNotes").val(contrcatItem.ContractTermNotes);
    TermTypeChange(vTermType);
    //if (vTermType != "") {
    if (contrcatItem.ContractTermType != "" && contrcatItem.ContractTermType != "0") {
        GetValuesAndAutoPopulate("ddlSendRenewReminderTo", contrcatItem.SendRenewReminderTo);
        if (contrcatItem.RenewReminder1 != 0)
            $("#txtSendRenewReminderDay1").val(contrcatItem.RenewReminder1);
        else
            $("#txtSendRenewReminderDay1").val('');
        if (contrcatItem.RenewReminder2 != 0)
            $("#txtSendRenewReminderDay2").val(contrcatItem.RenewReminder2);
        else
            $("#txtSendRenewReminderDay2").val('');
        if (contrcatItem.RenewReminder3 != 0)
            $("#txtSendRenewReminderDay3").val(contrcatItem.RenewReminder3);
        else
            $("#txtSendRenewReminderDay3").val('');

        if (contrcatItem.CounterpartyNoticesRenewal == null || contrcatItem.CounterpartyNoticesRenewal == "" || typeof (contrcatItem.CounterpartyNoticesRenewal) == "undefined") {
            if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
                var settingupforRenew = defaultGlobalSettings.UpForRenewal;
                $("#txtSendRenewReminderDayRenewalCounter").val(settingupforRenew);
            }
        }
        if ((contrcatItem.RenewReminder1Condition == null || contrcatItem.RenewReminder1Condition == "") && (contrcatItem.RenewReminder2Condition == null || contrcatItem.RenewReminder2Condition == "") && (contrcatItem.RenewReminder3Condition == null || contrcatItem.RenewReminder3Condition == "")) {
            if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
                var documentReminders = defaultGlobalSettings.RenewalReminders;
                var xmlDoc = $.parseXML(documentReminders);
                var $xml = $(xmlDoc);
                var $reminder = $xml.find("reminder");
                var j = 1;
                $reminder.each(function () {
                    var beforeSplit = $(this).text();
                    var remSplit = beforeSplit.split(/ +/);
                    $("#ddlSendRenewReminder" + j).val(remSplit[0]);
                    $("#txtSendRenewReminderDay" + j).val(remSplit[1]);
                    j = j + 1;
                });
            }
        } else {
            var vRenewReminderCondition = contrcatItem.RenewReminder1Condition.split('-');
            $("#ddlSendRenewReminder1").val(vRenewReminderCondition[0]);
            $("#ddlSendRenewReminderDate1").val(vRenewReminderCondition[1]);
            vRenewReminderCondition = contrcatItem.RenewReminder2Condition.split('-');
            $("#ddlSendRenewReminder2").val(vRenewReminderCondition[0]);
            $("#ddlSendRenewReminderDate2").val(vRenewReminderCondition[1]);
            vRenewReminderCondition = contrcatItem.RenewReminder3Condition.split('-');
            $("#ddlSendRenewReminder3").val(vRenewReminderCondition[0]);
            $("#ddlSendRenewReminderDate3").val(vRenewReminderCondition[1]);
        }


    } else {
        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
        var vAccFeat = $.grep(veContractFeatures, function (n, i) {
            return (n.RowKey == "11" && n.Status == "ON");
        });
        if (vAccFeat.length > 0) {
            GetValuesAndAutoPopulate("ddlSendRenewReminderTo", contrcatItem.ContractManagers + ";" + contrcatItem.ProjectManager);
        } else {
            GetValuesAndAutoPopulate("ddlSendRenewReminderTo", contrcatItem.ContractManagers);
        }
        //*Harshitha
        if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
            var documentReminders = defaultGlobalSettings.RenewalReminders;
            upForRenewal = defaultGlobalSettings.UpForRenewal; //Added 2.4final to 2.4
            var xmlDoc = $.parseXML(documentReminders);
            var $xml = $(xmlDoc);
            var $reminder = $xml.find("reminder");
            var j = 1;
            $reminder.each(function () {
                var beforeSplit = $(this).text();
                var remSplit = beforeSplit.split(/ +/);
                $("#ddlSendRenewReminder" + j).val(remSplit[0]);
                $("#txtSendRenewReminderDay" + j).val(remSplit[1]);
                j = j + 1;

            });
        }
        $("#txtSendRenewReminderDayRenewalCounter").val(upForRenewal); //Added 2.4final to 2.4
        $(".NoTerms").css('display', 'none');
    }

    if (contrcatItem.AlertEnabled != null && contrcatItem.AlertEnabled == 'Yes') {
        $("#AlertActive").val('Yes').change();
        //$("input:radio[name=ManageUsers][value='Yes']").attr('checked', 'checked');
    } else {
        $("#AlertActive").val('No').change();
        //  $("input:radio[name=ManageUsers][value='No']").attr('checked', 'checked');
    }

    if (contrcatItem.StartDate != null) {
        //contrcatItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')
        var fStartDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            fStartDate = contrcatItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
        } else {
            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                fStartDate = contrcatItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                fStartDate = contrcatItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            }
        }
        $("#txtContractTermStartDate").val(fStartDate);
    } else
        $("#txtContractTermStartDate").val('');
    if (contrcatItem.NextEvaluationDate != null) {
        // contrcatItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')
        var fNextEvaluationDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            fNextEvaluationDate = contrcatItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
        } else {
            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                fNextEvaluationDate = contrcatItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                fNextEvaluationDate = contrcatItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            }
        }
        $("#txtContractTermEvaluationDate").val(fNextEvaluationDate);
    } else
        $("#txtContractTermEvaluationDate").val('');
    if (contrcatItem.EndDate != null) {
        //contrcatItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')
        var fEndDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            fEndDate = contrcatItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
        } else {
            if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                fEndDate = contrcatItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
            } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                fEndDate = contrcatItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            }
        }
        $("#txtContractTermEndDate").val(fEndDate);
        EndDateCheck = fEndDate;
    } else
        $("#txtContractTermEndDate").val('');
    //EndDateCheck = "";
    $("#CounterpartyNoticeAll").val(contrcatItem.CounterpartyNotices);
    $("#txtSendReminderDayCancelCounterAll").val(contrcatItem.CounterpartyNoticesCancel);
    $("#CounterpartyNotice").val(contrcatItem.CounterpartyNotices);
    $("#txtSendRenewReminderDayCancelCounter").val(contrcatItem.CounterpartyNoticesCancel);
    if (contrcatItem.ContractTerm != '') {
        $('input[type="radio"][name="rdTermEndDate"][value="Term"]').prop('checked', true);
        EnableContractTermEndChoice();
        $("#ContractTerm").val(contrcatItem.ContractTerm);
        $("#ContractTermChoices").val(contrcatItem.ContractTermChoices);
        calculateenddate();
    } else if (contrcatItem.EndDate != null) {
        $('input[type="radio"][name="rdTermEndDate"][value="EndDate"]').prop('checked', true);
        $("#ContractTerm").val('');
        EnableContractTermEndDate();

    } else {
        $('input[type="radio"][name="rdTermEndDate"][value="Term"]').prop('checked', true);
        $("#ContractTerm").val("1");
        EnableContractTermEndChoice();
    }

    if (contrcatItem.ContractTermType == "Renewable") {
        //EndDateCheck = "";


        if (contrcatItem.AutoRenew == "Yes") {
            $('input[type="radio"][name="RenewalConfirmAuto"][value="Yes"]').prop('checked', true);
            $("#txtContractTermRenewSet").val(contrcatItem.ContractAutoTerm);
            $("#txtContractTermRenewSet").addClass("validelement");
            $("#ddlTermPeriodSet").val(contrcatItem.ContractAutoTermChoices);
            if (contrcatItem.RenewalDate != null)
                $("#AutoContractRenewOn").val($.datepicker.formatDate('mm/dd/yy', new Date(contrcatItem.RenewalDate)));
            if (contrcatItem.AutoContractRenewTermCount != "") {
                if ($("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']").length > 0 && !($("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']").css('display') == "none"))
                    $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                else
                    $("#ddlTermPeriodSetRenewal").val("Unlimited");
            } else
                $("#ddlTermPeriodSetRenewal").val("Unlimited");
            $(".ManRenewal").css('display', 'none');
            $(".autoRenewal").css('display', 'none');
        } else {
            $("#txtContractTermRenewSet").val('');
            $("#txtContractTermRenewSet").removeClass("validelement");
            $("#ddlTermPeriodSet").val('');
            $("#AutoContractRenewOn").val('');
            $("#ddlTermPeriodSetRenewal").val('');
            $('input[type="radio"][name="RenewalConfirmAuto"][value="No"]').prop('checked', true);
            $(".ManRenewal").css('display', '');
            $(".autoRenewal").css('display', '');
        }
        $("#CounterpartyNotice").val(contrcatItem.CounterpartyNotices);
        $("#txtSendRenewReminderDayRenewalCounter").val(contrcatItem.CounterpartyNoticesRenewal);
        $("#txtSendRenewReminderDayCancelCounter").val(contrcatItem.CounterpartyNoticesCancel);
        if (contrcatItem.CounterpartyNoticesCancelDate != null)
            $("#txtRenewConfirmCancelCounter").val($.datepicker.formatDate("mm/dd/yy", new Date(contrcatItem.CounterpartyNoticesCancelDate)));

        if (contrcatItem.CounterpartyNoticesRenewalDate != null)
            $("#txtRenewConfirmRenewalCounter").val($.datepicker.formatDate("mm/dd/yy", new Date(contrcatItem.CounterpartyNoticesRenewalDate)));

        if (contrcatItem.RequiresAuth == "Yes") {
            $('input[type="radio"][name="RenewalAuth"][value="Yes"]').prop('checked', true);
            GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsers", contrcatItem.RenewalConfirmParticipants);
            $("#txtSendRenewReminderDayRenewalConfirm").val(contrcatItem.ContractConfirmSendTerm);
            if (contrcatItem.ContractConfirmSendDate != null)
                $("#txtRenewConfirmSendDate").text($.datepicker.formatDate("mm/dd/yy", new Date(contrcatItem.ContractConfirmSendDate)));
            GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsersCC", contrcatItem.RenewalConfirmParticipantsCC);
            $("#hdParticipantsXML").val(contrcatItem.RenewalConfirmParticipantsXML);
            var values = contrcatItem.RenewalConfirmParticipantsCC;
            var owner = contrcatItem.ContractManagers;
            var multiarr = [];
            if (values != null && typeof (values) != "undefined" && values != "") {
                var res = values.split(";");
                var reslength = res.length;
                for (var i = 0; i < reslength; i++) {
                    multiarr.push(res[i].trim());
                }
            }
            if (owner != null && typeof (owner) != "undefined" && owner != "") {
                var res = owner.split(";");
                var reslength = res.length;
                for (var i = 0; i < reslength; i++) {
                    multiarr.push(res[i].trim());
                }
            }
            $("#ddlSendUserToRenewalConfirmUsers").addClass("validmultiselect");
            $("#txtSendRenewReminderDayRenewalConfirm").addClass("validelement");
            if (contrcatItem.RenewalConfirmOverall == "In Progress" || contrcatItem.RenewalConfirmOverall == "Completed") {
                $('input[type="radio"][name="RenewalAuth"][value="Yes"]').prop('disabled', true);
                $('input[type="radio"][name="RenewalAuth"][value="No"]').prop('disabled', true);
                $("#ddlSendUserToRenewalConfirmUsers").prop('disabled', true);
                $("#txtSendRenewReminderDayRenewalConfirm").prop('disabled', true);
                $("#txtRenewConfirmSendDate").prop('disabled', true);;
                $("#ddlSendUserToRenewalConfirmUsersCC").prop('disabled', true);
                var UserPending = [];
                var Xml = contrcatItem.RenewalConfirmParticipantsXML;
                if (Xml != null && Xml != "") {
                    $(Xml).find('participant').each(function () {
                        var Status = $(this).find('status').text();
                        if (Status == "In Progress") {
                            var Name = $(this).find('name').text();
                            if (Name != "" && Name != null)
                                UserPending.push(Name);
                        }
                    })
                }

                if (UserPending.length != 0) {
                    $("#trContractTermRenewal").css('display', '');
                    $("#trContractTermRenewalSec").css('display', '');
                    if (UserPending.indexOf(localStorage.UserName) != -1) {

                        $("#trOwnerAuth").css('display', '');

                    } else {

                        $("#trOtherAuth").css('display', 'none');
                    }
                    var userlt = '';
                    $(UserPending).each(function (i, item) {
                        if (item != localStorage.UserName)
                            userlt = item + ",";

                    })
                    userlt = userlt.trim(',');
                    if (userlt != '') {

                        $("#OtherAuth").text('Awaiting Authorization from ' + userlt + ' for next renewal ');
                        if (multiarr.indexOf(localStorage.UserName) != -1) {
                            $("#trOtherAuth").css('display', '');
                        } else {
                            $("#trOtherAuth").css('display', 'none');
                            if (UserPending.indexOf(localStorage.UserName) == -1) {
                                $("#trContractTermRenewal").css('display', 'none');
                                $("#trContractTermRenewalSec").css('display', 'none');
                            }
                        }
                    } else {

                        $("#trOtherAuth").css('display', 'none');
                        $("#OtherAuth").text('No Awaiting Authorization ');
                        if (UserPending.indexOf(localStorage.UserName) == -1) {
                            $("#trContractTermRenewal").css('display', 'none');
                            $("#trContractTermRenewalSec").css('display', 'none');
                        }
                    }


                } else {
                    $("#trContractTermRenewal").css('display', 'none');
                    $("#trContractTermRenewalSec").css('display', 'none');
                }
            } else {
                $('input[type="radio"][name="RenewalAuth"][value="Yes"]').prop('disabled', false);
                $('input[type="radio"][name="RenewalAuth"][value="No"]').prop('disabled', false);
                $("#ddlSendUserToRenewalConfirmUsers").prop('disabled', false);
                $("#txtSendRenewReminderDayRenewalConfirm").prop('disabled', false);
                $("#txtRenewConfirmSendDate").prop('disabled', true);;
                $("#ddlSendUserToRenewalConfirmUsersCC").prop('disabled', false);

            }
        } else {
            $('input[type="radio"][name="RenewalAuth"][value="Yes"]').prop('disabled', false);
            $('input[type="radio"][name="RenewalAuth"][value="No"]').prop('disabled', false);
            $("#ddlSendUserToRenewalConfirmUsers").prop('disabled', false);
            $("#txtSendRenewReminderDayRenewalConfirm").prop('disabled', false);
            $("#txtRenewConfirmSendDate").prop('disabled', true);;
            $("#ddlSendUserToRenewalConfirmUsersCC").prop('disabled', false);
            $('input[type="radio"][name="RenewalAuth"][value="No"]').prop('checked', true);
            GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsers", '');
            $("#txtSendRenewReminderDayRenewalConfirm").val('');
            $("#txtRenewConfirmSendDate").text('');
            GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsersCC", '');
            $("#hdParticipantsXML").val('');
            $("#ddlSendUserToRenewalConfirmUsers").removeClass("validmultiselect");
            $("#txtSendRenewReminderDayRenewalConfirm").removeClass("validelement");
        }
        RenewalConfirmAuto();
        RequiresAuthchange();

    } else {


        if (contrcatItem.TermEndDate != null) {
            //  contrcatItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')
            var fTermEndDate = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                fTermEndDate = contrcatItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            } else {
                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                    fTermEndDate = contrcatItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                    fTermEndDate = contrcatItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                }
            }
            $("#txtContractTermEnds").val(fTermEndDate);
        } else
            $("#txtContractTermEnds").val('');
        if (contrcatItem.RenewalDate != null) {
            //contrcatItem.RenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')
            var fRenewalDate = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                fRenewalDate = contrcatItem.RenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            } else {
                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                    fRenewalDate = contrcatItem.RenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                    fRenewalDate = contrcatItem.RenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                }
            }
            $("#txtContractTermRenewOn").val(fRenewalDate);
        } else
            $("#txtContractTermRenewOn").val('');
        if (contrcatItem.AutoExpireOn != null) {
            //contrcatItem.AutoExpireOn.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')
            var fAutoExpireOn = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                fAutoExpireOn = contrcatItem.AutoExpireOn.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            } else {
                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                    fAutoExpireOn = contrcatItem.AutoExpireOn.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                    fAutoExpireOn = contrcatItem.AutoExpireOn.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                }
            }
            $("#txtContractTermExpireOn").val(fAutoExpireOn);
        } else
            $("#txtContractTermExpireOn").val('');

        $('input[type="radio"][name="TermAutoRenewal"][value="' + contrcatItem.AutoRenew + '"]').prop('checked', true);
        if (contrcatItem.AutoRenew == 'Yes') {
            var vRenewableTerm = contrcatItem.RenewableTerm.split('-');
            $("#txtTermTimes").val(vRenewableTerm[0]);
            $("#ddlTermPeriod").val(vRenewableTerm[1]);
        }
        if (contrcatItem.ScheduledRenewal == 'Auto renew only once') {
            $('input[type="radio"][name="ScheduleAutoRenewal"][value="Auto renew only once"]').prop('checked', true);
        } else if (contrcatItem.ScheduledRenewal == 'Auto renew till End Date') {
            $('input[type="radio"][name="ScheduleAutoRenewal"][value="Auto renew till End Date"]').prop('checked', true);
        } else if (contrcatItem.ScheduledRenewal != "") {
            $('input[type="radio"][name="ScheduleAutoRenewal"][value="Instances"]').prop('checked', true);
            $("#txtRenewalInstance").val(contrcatItem.ScheduledRenewal.replace(' Instances', ''));
        } else {
            $('input[type="radio"][name="ScheduleAutoRenewal"][value="Auto renew only once"]').prop('checked', true);
        }
        //}

        if (vTermType == "Renewable") {
            if (!comparedates("txtContractTermEnds", "txtContractTermEndDate")) {

            }
        }

    }
    var arrstatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
    if (contrcatItem.ContractTermType != "" && contrcatItem.ContractTermType != "0" && arrstatus.indexOf(contrcatItem.Status) > -1) {
        $("#btnContractTermCancel").show();
        if (contrcatItem.ContractTermType == "Renewable") {
            $("#btnContractTermExpire").show();

        } else {
            $("#btnContractTermExpire").hide();
        }
    } else {
        $("#btnContractTermCancel").hide();
        $("#btnContractTermExpire").hide();
    }
    //if (contrcatItem.Status == "Cancelled") {
    //    $("#btnContractTermCancel").hide();
    //}
    //else {
    //    $("#btnContractTermCancel").show();
    //}

    if (contrcatItem.AlertsEnabled == "Yes" && arrstatus.indexOf(contrcatItem.Status) > -1) {
        $("#AlertActive").val('Yes').change();
    } else {
        $("#AlertActive").val('No').change();
    }
    $("#dvContractTerm").dialog("open");


}

function BindContractTermTypeddl() {
    $("#ddlTermType").empty();
    $("#ddlTermType").append("<option value='0'>--Select--</option>");
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttermtypesenabled',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: false,
        success: function (data) {
            var datalength = data.length;
            for (var i = 0; i < datalength; i++) {
                var itemname = data[i];
                $("#ddlTermType").append("<option value='" + itemname.ContractTermName + "'>" + itemname.ContractTermDisplayName + "</option>");
                TermTypeHelpText[data[i].ContractTermName] = data[i].HelpText;
                TermTypeDisplayName[data[i].ContractTermName] = data[i].ContractTermDisplayName;
            }
        },
        error: function (data) { }
    });
    $("#ddlTermType").val('0');
}

function RenewalConfirmAuto() {
    var valcheckauth = $(':input[type=radio][name=RenewalConfirmAuto]:checked').val();
    if (valcheckauth == "Yes") {
        $("#divRenewalConfirmAuto").show();
        $('input[type="radio"][name="RenewalAuth"][value="No"]').prop('checked', true);
        RequiresAuthchange();
        $("#txtContractTermRenewSet").val(contractItem.ContractAutoTerm);
        $("#txtContractTermRenewSet").addClass("validelement");
        $("#ddlTermPeriodSet").val(contractItem.ContractAutoTermChoices);
        if (contrcatItem.AutoContractRenewTermCount != "") {
            if ($("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']").length > 0 && !($("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']").css('display') == "none"))
                $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
            else
                $("#ddlTermPeriodSetRenewal").val("Unlimited");
        } else
            $("#ddlTermPeriodSetRenewal").val("Unlimited");
        $("#AutoContractRenewOn").val(contractItem.RenewalDate);
        $(".ManRenewal").css('display', 'none');
        $(".autoRenewal").css('display', 'none');
    } else {
        $("#divRenewalConfirmAuto").hide();
        $("#txtContractTermRenewSet").val("");
        $("#txtContractTermRenewSet").removeClass("validelement");
        $("#ddlTermPeriodSet").val("");
        $("#ddlTermPeriodSetRenewal").val("");
        $("#AutoContractRenewOn").val("");
        $(".ManRenewal").css('display', '');
        $(".autoRenewal").css('display', '');

    }
}

function RequiresAuthchange() {
    var valcheckauth = $(':input[type=radio][name=RenewalAuth]:checked').val();
    if (valcheckauth == "Yes") {
        $("#RequiresAuthorizationYes").show();
        GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsers", contractItem.RenewalConfirmParticipants);
        $("#txtSendRenewReminderDayRenewalConfirm").val(contractItem.ContractConfirmSendTerm);
        $("#txtRenewConfirmSendDate").text($.datepicker.formatDate("mm/dd/yy", new Date(contrcatItem.ContractConfirmSendDate)));
        GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsersCC", contractItem.RenewalConfirmParticipantsCC);
        $("#ddlSendUserToRenewalConfirmUsers").addClass("validmultiselect");
        $("#txtSendRenewReminderDayRenewalConfirm").addClass("validelement");
    } else {
        $("#RequiresAuthorizationYes").hide();
        GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsers", "");
        $("#txtSendRenewReminderDayRenewalConfirm").val("");
        $("#txtRenewConfirmSendDate").text('');
        GetValuesAndAutoPopulate("ddlSendUserToRenewalConfirmUsersCC", "");
        $("#ddlSendUserToRenewalConfirmUsers").removeClass("validmultiselect");
        $("#txtSendRenewReminderDayRenewalConfirm").removeClass("validelement");

    }
}

function EnableContractTermEndChoice() {
    $("#ContractTermChoices").prop('disabled', false);
    $("#ContractTerm").prop('disabled', false);
    $("#ContractTerm").val('1');
    $("#ContractTermChoices").val('years');
    EndDateCheck = "";
    if (EndDateCheck == "")
        calculateenddate();
    else
        $("#txtContractTermEndDate").val(EndDateCheck);
    $("#txtContractTermEndDate").prop('disabled', true);
    $("#txtContractTermEndDate").removeClass('form-contro-Date');
    $("#txtContractTermEndDate").addClass('form-contro-NoDate');
}

function EnableContractTermEndDate() {
    $("#ContractTerm").val('');
    $("#ContractTermChoices").val('years');
    if (EndDateCheck == "")
        calculateenddate();
    else
        $("#txtContractTermEndDate").val(EndDateCheck);
    $("#ContractTermChoices").prop('disabled', true);
    $("#ContractTerm").prop('disabled', true);
    $("#txtContractTermEndDate").prop('disabled', false);
    $("#txtContractTermEndDate").removeClass('form-contro-NoDate');
    $("#txtContractTermEndDate").addClass('form-contro-Date');
}

function calculateenddate() {
    if ($("#ContractTermChoices").find('option:selected').val() == "months" && ($("#ContractTerm").val() % 12 == 0)) {
        $("#ContractTermChoices").val('years');
        $("#ContractTerm").val($("#ContractTerm").val() / 12);
    }
    if ($("#ContractTermType").val() != 'Evergreen / Perpetual' && $("#ContractTermType").val() != 'Executed / Performance') {
        if ($("#txtContractTermStartDate").val() != "" && $("#ContractTerm").val() != "") {

            var ftxtContractTermStartDate = '';
            if ($("#txtContractTermStartDate").val() != "" && $("#txtContractTermStartDate").val() != null) {
                ftxtContractTermStartDate = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermStartDate").datepicker('getDate'));
            }
            var fnextDate = "";
            var nextDate = moment(ftxtContractTermStartDate).add($("#ContractTerm").val(), $("#ContractTermChoices").find('option:selected').val());
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                if (getTimeZone().indexOf('+') > -1)
                    fnextDate = moment(nextDate).utc().format('MM/DD/YYYY');
                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                    fnextDate = moment(nextDate).utc().subtract(1, "days").format('MM/DD/YYYY');
            } else {
                if (getTimeZone().indexOf('+') > -1)
                    fnextDate = moment(nextDate).utc().format(localStorage.AppDateFormat);
                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                    fnextDate = moment(nextDate).utc().subtract(1, "days").format(localStorage.AppDateFormat);

            }
            $("#txtContractTermEndDate").val(fnextDate);
        }
    }
}

var sContractTermType = "";

function TermTypeChange(vTermType) {
    sContractTermType = vTermType;
    ContractTermAutoRenewalNo();
    var fContractTermRenewOn = '';
    if ($("#txtContractTermRenewOn").val() != "" && $("#txtContractTermRenewOn").val() != null) {
        fContractTermRenewOn = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermRenewOn").datepicker('getDate'));
    }
    if (vTermType == "Fixed Term") {
        $("#spTermTypeDesc").html('<br>' + TermTypeHelpText[vTermType]);
        $("#trContractTermDates1").css('display', '');
        $("#trContractTermDates2").css('display', '');
        $("#trContractTermSettings1").css('display', 'none');
        $("#trContractTermSettings2").css('display', 'none');
        $("#trContractTermReminders1").css('display', '');
        $("#trContractTermReminders2").css('display', '');
        $("#btnContractTermRenew").css('display', 'none');
        $("#btnContractTermExpire").css('display', 'none');

        $("#btnContractTermSave").css('display', '');
        $("#btnContractTermClose").css('display', '');

        $("#tdContractTermStartDateLbl").html('Start / Effective Date <img src="../Content/Images/input-help.png" title="Select the date from which the Contract Record becomes active. ">');
        $("#trContractTermStartDate").css('display', '');
        $("#trContractTermEvaluationDate").css('display', '');
        $("#trContractTermEndDate").css('display', '');
        $("#trContractTermStartDateRenew").css('display', 'none');
        $("#trContractTermEndDateRenew").css('display', 'none');
        $("#trContractNextTermEndDateRenew").css('display', 'none');
        $("#trContractRenewalConfirmText").css('display', 'none');
        $("#trContractRenewalConfirm").css('display', 'none');
        $("#trContractRenewalConfirmTextAuto").css('display', 'none');
        $("#trContractRenewalConfirmAuto").css('display', 'none');
        $("#trContractRenewalConfirmTextCounterparty").css('display', 'none');
        $("#trContractRenewalConfirmCounterparty").css('display', 'none');
        $("#trContractConfirmTextCounterparty").css('display', '');
        $("#trContractConfirmCounterparty").css('display', '');


        // $("#trContractRenewalConfirmTextCounterparty").css('display', '');
        // $("#trContractRenewalConfirmCounterparty").css('display', '');
        $("#trContractRenewalHistoryText").css('display', 'none');
        $("#trContractRenewalHistory").css('display', 'none');
        $("#trContractRenewNext").css('display', 'none');
        $("#trContractTermRenewal").css('display', 'none');
        $("#trContractTermRenewalSec").css('display', 'none');
        $("#ddlSendUserToRenewalConfirmUsers").removeClass("validmultiselect");
        $("#txtSendRenewReminderDayRenewalConfirm").removeClass("validelement");
        $("#txtContractTermRenewSet").removeClass("validelement");
        var vRenewReminderDate = '<option value="Start / Effective Date">Start / Effective Date</option>';
        vRenewReminderDate += '<option value="Next Evaluation Date">Next Evaluation Date</option>';
        vRenewReminderDate += '<option value="End Date (Overall Contract)">End Date (Overall Contract Record)</option>';
        $("#ddlSendRenewReminderDate1").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate2").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate3").html(vRenewReminderDate);
        $(".NoTerms").css('display', 'none');
    } else if (vTermType == "Evergreen / Perpetual") {
        $("#spTermTypeDesc").html('<br>' + TermTypeHelpText[vTermType]);
        $("#trContractTermDates1").css('display', '');
        $("#trContractTermDates2").css('display', '');
        $("#trContractTermSettings1").css('display', 'none');
        $("#trContractTermSettings2").css('display', 'none');
        $("#trContractTermReminders1").css('display', '');
        $("#trContractTermReminders2").css('display', '');
        $("#btnContractTermRenew").css('display', 'none');
        $("#btnContractTermExpire").css('display', 'none');
        $("#btnContractTermSave").css('display', '');
        $("#btnContractTermClose").css('display', '');

        $("#tdContractTermStartDateLbl").html('Start / Effective Date <img src="../Content/Images/input-help.png" title="Select the date from which the Contract Record becomes active.">');
        $("#trContractTermStartDate").css('display', '');
        $("#trContractTermEvaluationDate").css('display', '');
        $("#trContractTermEndDate").css('display', 'none');
        $("#trContractTermStartDateRenew").css('display', 'none');
        $("#trContractTermEndDateRenew").css('display', 'none');
        $("#trContractNextTermEndDateRenew").css('display', 'none');
        $("#trContractRenewalConfirmText").css('display', 'none');
        $("#trContractRenewalConfirm").css('display', 'none');
        $("#trContractRenewalConfirmTextAuto").css('display', 'none');
        $("#trContractRenewalConfirmAuto").css('display', 'none');
        $("#trContractRenewalConfirmTextCounterparty").css('display', 'none');
        $("#trContractRenewalConfirmCounterparty").css('display', 'none');
        $("#trContractConfirmTextCounterparty").css('display', '');
        $("#trContractConfirmCounterparty").css('display', '');
        // $("#trContractRenewalConfirmTextCounterparty").css('display', '');
        // $("#trContractRenewalConfirmCounterparty").css('display', '');
        $("#trContractRenewalHistoryText").css('display', 'none');
        $("#trContractRenewalHistory").css('display', 'none');
        $("#trContractRenewNext").css('display', 'none');
        $("#trContractTermRenewal").css('display', 'none');
        $("#trContractTermRenewalSec").css('display', 'none');
        $("#ddlSendUserToRenewalConfirmUsers").removeClass("validmultiselect");
        $("#txtSendRenewReminderDayRenewalConfirm").removeClass("validelement");
        $("#txtContractTermRenewSet").removeClass("validelement");
        var vRenewReminderDate = '<option value="Start / Effective Date">Start / Effective Date</option>';
        vRenewReminderDate += '<option value="Next Evaluation Date">Next Evaluation Date</option>';
        $("#ddlSendRenewReminderDate1").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate2").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate3").html(vRenewReminderDate);
        $(".NoTerms").css('display', 'none');
        //Sridhar
        $("#EndDate").val('');
    } else if (vTermType == "Executed / Performance") {
        $("#spTermTypeDesc").html('<br>' + TermTypeHelpText[vTermType]);
        $("#trContractTermDates1").css('display', '');
        $("#trContractTermDates2").css('display', '');
        $("#trContractTermSettings1").css('display', 'none');
        $("#trContractTermSettings2").css('display', 'none');
        $("#trContractTermReminders1").css('display', '');
        $("#trContractTermReminders2").css('display', '');
        $("#btnContractTermRenew").css('display', 'none');
        $("#btnContractTermExpire").css('display', 'none');

        $("#btnContractTermSave").css('display', '');
        $("#btnContractTermClose").css('display', '');

        $("#tdContractTermStartDateLbl").html('Date of Execution / Performance <img src="../Content/Images/input-help.png" title="Select the date on which the Contract Record is being executed.">');
        $("#trContractTermStartDate").css('display', '');
        $("#trContractTermEvaluationDate").css('display', 'none');
        $("#trContractTermEndDate").css('display', 'none');
        $("#trContractTermStartDateRenew").css('display', 'none');
        $("#trContractTermEndDateRenew").css('display', 'none');
        $("#trContractNextTermEndDateRenew").css('display', 'none');
        $("#trContractRenewalConfirmText").css('display', 'none');
        $("#trContractRenewalConfirm").css('display', 'none');
        $("#trContractRenewalConfirmTextAuto").css('display', 'none');
        $("#trContractRenewalConfirmAuto").css('display', 'none');
        $("#trContractRenewalConfirmTextCounterparty").css('display', 'none');
        $("#trContractRenewalConfirmCounterparty").css('display', 'none');
        $("#trContractConfirmTextCounterparty").css('display', '');
        $("#trContractConfirmCounterparty").css('display', '');
        // $("#trContractRenewalConfirmTextCounterparty").css('display', '');
        // $("#trContractRenewalConfirmCounterparty").css('display', '');
        $("#trContractRenewalHistoryText").css('display', 'none');
        $("#trContractRenewalHistory").css('display', 'none');
        $("#trContractRenewNext").css('display', 'none');
        $("#trContractTermRenewal").css('display', 'none');
        $("#trContractTermRenewalSec").css('display', 'none');
        $("#ddlSendUserToRenewalConfirmUsers").removeClass("validmultiselect");
        $("#txtSendRenewReminderDayRenewalConfirm").removeClass("validelement");
        $("#txtContractTermRenewSet").removeClass("validelement");
        var vRenewReminderDate = '<option value="Date of Execution / Performance">Date of Execution / Performance</option>';
        $("#ddlSendRenewReminderDate1").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate2").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate3").html(vRenewReminderDate);
        $(".NoTerms").css('display', 'none');
        //Sridhar
        $("#EndDate").val('');
    } else if (vTermType == "Renewable") {
        $("#spTermTypeDesc").html('<br>' + TermTypeHelpText[vTermType]);
        $("#trContractTermDates1").css('display', 'none');
        $("#trContractTermDates2").css('display', 'none');
        $("#trContractTermSettings1").css('display', 'none');
        $("#trContractTermSettings2").css('display', 'none');
        $("#trContractTermReminders1").css('display', '');
        $("#trContractTermReminders2").css('display', '');
        $("#btnContractTermRenew").css('display', 'none');
        var vRenewReminderDate = '<option value="Start / Effective Date">Start / Effective Date</option>';
        vRenewReminderDate += '<option value="End Date (Overall Contract)">End Date (Overall Contract Record)</option>';
        vRenewReminderDate += '<option value="Current Term Ends">Current Term Ends</option>';
        vRenewReminderDate += '<option value="Renew On">Renew On</option>';
        $("#ddlSendRenewReminderDate1").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate2").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate3").html(vRenewReminderDate);
        $('input[type="radio"][name="RenewalAuth"][value="Yes"]').prop('disabled', false);
        $('input[type="radio"][name="RenewalAuth"][value="No"]').prop('disabled', false);
        var vRenewReminderDate = '<option value="Term Starts">Current Term Start Date</option>';
        //vRenewReminderDate += '<option value="End Date (Overall Contract)">End Date (Overall Contract Record)</option>';
        vRenewReminderDate += '<option value="Current Term Ends">Current Term End Date</option>';
        //vRenewReminderDate += '<option value="Renew On">Renew On</option>';
        $("#ddlSendRenewReminderDate1").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate2").html(vRenewReminderDate);
        $("#ddlSendRenewReminderDate3").html(vRenewReminderDate);
        $("#ContractAutoTerm").removeClass("validmultiselect");
        $("#RenewalConfirmParticipants").removeClass("validelement");
        $("#ContractConfirmSendTerm").removeClass("validelement");
        //if (sContractTermType == "Renewable") {

        //} else {
        //    $('input[type="radio"][name="TermAutoRenewal"][value="No"]').prop('checked', true);
        //    $("#btnContractTermRenew").css('display', 'none');
        //    $("#btnContractTermExpire").css('display', 'none');


        //    var vDT = new Date();
        //    if ($("#txtContractTermStartDate").val() != '') {
        //        var ftxtContractTermStartDate = '';
        //        ftxtContractTermStartDate = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermStartDate").datepicker('getDate'));
        //        vDT = new Date(ftxtContractTermStartDate);
        //        vDT = moment(vDT).add(1, 'year').format('MM/DD/YYYY');
        //        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        //        { vDT = moment(new Date(vDT)).format('MM/DD/YYYY'); }
        //        else { vDT = moment(new Date(vDT)).format(localStorage.AppDateFormat); }
        //        $("#txtContractTermEnds").val(vDT);
        //        $("#txtContractTermRenewOn").val(vDT);
        //    }
        //    if ($("#txtContractTermEnds").val() != '') {
        //        $("#txtContractTermRenewOn").val($("#txtContractTermEnds").val());
        //    }
        //    if ($("#txtContractTermRenewOn").val() != '') {
        //        if (fContractTermRenewOn != "" && fContractTermRenewOn != null) {
        //            vDT = new Date(fContractTermRenewOn);
        //            vDT = moment(vDT).add(60, 'days').format('MM/DD/YYYY');
        //            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        //            { vDT = moment(new Date(vDT)).format('MM/DD/YYYY'); }
        //            else { vDT = moment(new Date(vDT)).format(localStorage.AppDateFormat); }
        //            if ($('input[type="radio"][name=TermAutoRenewal]:checked').val() == "No")
        //                $("#txtContractTermExpireOn").val(vDT);
        //        }
        //        else {
        //            $("#txtContractTermRenewOn").val($("#txtContractTermEnds").val());
        //            if ($("#txtContractTermRenewOn").val() != "" && $("#txtContractTermRenewOn").val() != null) {
        //                fContractTermRenewOn = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermRenewOn").datepicker('getDate'));
        //            }
        //            vDT = new Date(fContractTermRenewOn);
        //            vDT = moment(vDT).add(60, 'days').format('MM/DD/YYYY');
        //            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        //            { vDT = moment(new Date(vDT)).format('MM/DD/YYYY'); }
        //            else { vDT = moment(new Date(vDT)).format(localStorage.AppDateFormat); }
        //            if ($('input[type="radio"][name=TermAutoRenewal]:checked').val() == "No")
        //                $("#txtContractTermExpireOn").val(vDT);
        //        }
        //    }
        //}
        $("#btnContractTermSave").css('display', '');
        $("#btnContractTermClose").css('display', '');

        $("#tdContractTermStartDateLbl").html('Start / Effective Date <img src="../Content/Images/input-help.png" title="Select the date from which the Contract Record becomes active.">');
        $("#trContractTermStartDate").css('display', 'none');
        $("#trContractTermStartDateRenew").css('display', '');
        $("#trContractTermEndDateRenew").css('display', '');
        $("#trContractNextTermEndDateRenew").css('display', '');
        $("#trContractRenewalConfirmText").css('display', '');
        $("#trContractRenewalConfirm").css('display', '');
        $("#trContractRenewalConfirmTextAuto").css('display', '');
        $("#trContractRenewalConfirmAuto").css('display', '');
        //$("#trContractRenewalConfirmTextCounterparty").css('display', 'none');
        //$("#trContractRenewalConfirmCounterparty").css('display', 'none');
        $("#trContractConfirmTextCounterparty").css('display', 'none');
        $("#trContractConfirmCounterparty").css('display', 'none');
        $("#trContractRenewalConfirmTextCounterparty").css('display', '');
        $("#trContractRenewalConfirmCounterparty").css('display', '');
        $("#trContractRenewalHistoryText").css('display', '');
        $("#trContractRenewalHistory").css('display', '');
        $("#trContractRenewNext").css('display', '');
        $("#trContractTermRenewal").css('display', 'none');
        $("#trContractTermRenewalSec").css('display', 'none');
        $("#trContractTermEvaluationDate").css('display', 'none');
        $("#trContractTermEndDate").css('display', 'none');
        GetRenewalAll();
        $("#AddInitialTerm").css("display", "");
        $("#AddRenewalTerm").css("display", "none");
        $("#ddlSendUserToRenewalConfirmUsers").removeClass("validmultiselect");
        $("#txtSendRenewReminderDayRenewalConfirm").removeClass("validelement");
        $("#txtContractTermRenewSet").removeClass("validelement");
        $(".NoTerms").css('display', '');
        //$(".ManRenewal").css('display', 'none');
    } else {
        $("#spTermTypeDesc").html('');
        $("#trContractTermDates1").css('display', 'none');
        $("#trContractTermDates2").css('display', 'none');
        $("#trContractTermSettings1").css('display', 'none');
        $("#trContractTermSettings2").css('display', 'none');
        $("#trContractTermReminders1").css('display', 'none');
        $("#trContractTermReminders2").css('display', 'none');
        $("#btnContractTermRenew").css('display', 'none');
        $("#btnContractTermExpire").css('display', 'none');
        $("#btnContractTermCancel").css('display', 'none');
        $("#btnContractTermSave").css('display', 'none');
        $("#btnContractTermClose").css('display', 'none');
        $("#trContractTermStartDateRenew").css('display', 'none');
        $("#trContractTermEndDateRenew").css('display', 'none');
        $("#trContractNextTermEndDateRenew").css('display', 'none');
        $("#trContractRenewalConfirmText").css('display', 'none');
        $("#trContractRenewalConfirm").css('display', 'none');
        $("#trContractRenewalConfirmTextAuto").css('display', 'none');
        $("#trContractRenewalConfirmAuto").css('display', 'none');
        $("#trContractRenewalConfirmTextCounterparty").css('display', 'none');
        $("#trContractRenewalConfirmCounterparty").css('display', 'none');
        $("#trContractConfirmTextCounterparty").css('display', 'none');
        $("#trContractConfirmCounterparty").css('display', 'none');
        $("#trContractRenewalHistoryText").css('display', 'none');
        $("#trContractRenewalHistory").css('display', 'none');
        $("#trContractRenewNext").css('display', 'none');
        $("#trContractTermRenewal").css('display', 'none');
        $("#trContractTermRenewalSec").css('display', 'none');
        //$("#tdContractTermStartDateLbl").html('Start / Effective Date');
        //$("#trContractTermStartDate").css('display', 'none');
        //$("#trContractTermEvaluationDate").css('display', 'none');
        //$("#trContractTermEndDate").css('display', 'none');
        $("#ddlSendUserToRenewalConfirmUsers").removeClass("validmultiselect");
        $("#txtSendRenewReminderDayRenewalConfirm").removeClass("validelement");
        $("#txtContractTermRenewSet").removeClass("validelement");
        $(".NoTerms").css('display', 'none');
    }
    var arrstatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
    if (contrcatItem.ContractTermType != "" && contrcatItem.ContractTermType != "0" && arrstatus.indexOf(contrcatItem.Status) > -1) {
        $("#btnContractTermCancel").show();
        if (contrcatItem.ContractTermType == "Renewable") {
            $("#btnContractTermExpire").show();

        } else {
            $("#btnContractTermExpire").hide();
        }
    } else {
        $("#btnContractTermCancel").hide();
    }
}

function ContractTermAutoRenewalNo() {
    $("#txtContractTermRenewOn").val($("#txtContractTermEnds").val());
    var fContractTermRenewOn = '';
    if ($("#txtContractTermRenewOn").val() != "" && $("#txtContractTermRenewOn").val() != null) {
        fContractTermRenewOn = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermRenewOn").datepicker('getDate'));
    }
    $("#tdContractRenewOn").html('Renew On / Anniversary Date <img src="../Content/Images/input-help.png" title="Select the date for renewing the Contract. By default, this is the Contract term end date.">');
    $("#trContractAutoExpireOn").css('display', '');
    $("#trContractAutoRenewals").css('display', 'none');
    $("#lblTermRenewFor").css('display', 'none');
    $("#txtTermTimes").css('display', 'none');
    $("#ddlTermPeriod").css('display', 'none');
    if (contrcatItem.ContractTermType == "Renewable") {

        //$("#btnContractTermExpire").css('display', '');
    } else {
        $("#btnContractTermRenew").css('display', 'none');
        $("#btnContractTermExpire").css('display', 'none');
    }
    $("#txtContractTermRenewOn").prop('disabled', false);
    $("#txtContractTermRenewOn").addClass('form-contro-Date');
    $("#txtContractTermRenewOn").removeClass('form-contro-NoDate');
    $("#txtTermTimes").removeClass('validelement');
    $("#txtTermTimes").removeClass('error');
    if ($("#txtContractTermRenewOn").val() != "") {
        var vDT = new Date(fContractTermRenewOn);
        vDT = moment(vDT).add(60, 'days').format('MM/DD/YYYY');
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            vDT = moment(new Date(vDT)).format('MM/DD/YYYY');
        } else {
            vDT = moment(new Date(vDT)).format(localStorage.AppDateFormat);
        }
        $("#txtContractTermExpireOn").val(vDT);
    }
    //$("#ddlSendRenewReminderDate1").append('<option value="Auto Expire On">Auto Expire On</option>');
    //$("#ddlSendRenewReminderDate2").append('<option value="Auto Expire On">Auto Expire On</option>');
    //$("#ddlSendRenewReminderDate3").append('<option value="Auto Expire On">Auto Expire On</option>');
    //if (contrcatItem.AutoRenew == "Yes") {
    //    $("#btnContractTermRenew").css('display', '');
    //    $("#txtContractTermRenewOn").val($("#txtContractTermEnds").val());
    //} else {
    //    $("#btnContractTermRenew").css('display', 'none');
    //    $("#txtContractTermRenewOn").val('');
    //}
}

function GetRenewalAll() {
    var RenewalTermName = "";
    $("#AddRenewalTerm").css("display", "none");
    $("#AddInitialTerm").css("display", "none");
    var expireFlag = false;
    var isCurrentPresent = false;
    if (vContractID == '') {
        vContractID = $("#hdContractID").val();
    }
    $("#renewalViewHistoryTerm").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/contractrenewalhistory',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            $("#renewalViewHistoryTerm").empty();
            $("#hdCurrentTermName").val('');
            $("#hdCurrentRenewalTermStart").val('');
            $("#hdCurrentRenewalTermEnd").val('').trigger('change');
            var str = "";
            if (data == null || data.length == 0) {
                $("#AddInitialTerm").css("display", "");
                $("#AddRenewalTerm").css("display", "none");

                $("#CurrentTermName").val('Initial Term');
                CurrentTermDetails = "";
                $("#ddlTermPeriodSetRenewal").find("option").show()
            } else {
                $("#AddInitialTerm").css("display", "none");
                $("#AddRenewalTerm").css("display", "");
                var TermStartDate = "";
                var TermEndDate = "";
                var TermNextDate = "";
                var len = data.length;
                var InitialTermFlag = true;
                var todaydate = new Date();

                var allTerms = [];
                var endedTerms = $.grep(data, function (itemR, i) {
                    return itemR.TermStatus == "Ended"
                })

                var currentTerm = $.grep(data, function (itemR, i) {
                    return itemR.TermStatus == "Current"
                })
                var expiredTerms = $.grep(data, function (itemR, i) {
                    return itemR.TermStatus == "Expired" && itemR.RenewableTermName != "Initial Term"
                })

                var notStartedTerms = $.grep(data, function (itemR, i) {
                    return itemR.TermStatus == "Not Started"
                })

                allTerms = allTerms.concat(endedTerms, currentTerm, expiredTerms, notStartedTerms);
                $(allTerms).each(function (i, item) {
                    var indexCount = (parseInt(i) + 1);
                    var vAction = "";
                    var vActionStatus = "";
                    if (item.RenewableTermName == "Initial Term") {
                        InitialTermFlag = false;
                    } else {
                        InitialTermFlag = true;
                    }
                    if (item.RenewableTermName == "" || item.RenewableTermName == null) {
                        var dStartDate;
                        var dEndDate;

                        if (InitialTermFlag) {
                            InitialTermFlag = false;
                            var fStartDate = "";
                            str += '  <tr id="renewalViewHistoryTerm' + indexCount + '">';
                            str += ' <td id="RenewableTermName' + indexCount + '">Initial Term<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vAction + ' margin-left-5"></td>';
                            if (contrcatItem.StartDate != null) {

                                var fStartDate = "";
                                var fStartDateDisplay = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    fStartDateDisplay = moment(new Date(contrcatItem.StartDate)).utc().format('MM/DD/YYYY');
                                } else {
                                    fStartDateDisplay = moment(new Date(contrcatItem.StartDate)).utc().format(localStorage.AppDateFormat);
                                }
                                dStartDate = new Date(contrcatItem.StartDate);
                                fStartDate = moment(new Date(contrcatItem.StartDate)).utc().format('MM/DD/YYYY');
                                str += ' <td id="RenewedDate' + indexCount + '" style="display:none;">' + fStartDate + '</td>';
                                str += ' <td id="RenewedDateDisplay' + indexCount + '" >' + fStartDateDisplay + '</td>';

                            } else if (contrcatItem.EffectiveDate != null) {
                                var fStartDate = "";
                                var fStartDateDisplay = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    fStartDateDisplay = moment(new Date(contrcatItem.EffectiveDate)).utc().format('MM/DD/YYYY');
                                } else {
                                    fStartDateDisplay = moment(new Date(contrcatItem.EffectiveDate)).utc().format(localStorage.AppDateFormat);
                                }
                                fStartDate = moment(new Date(contrcatItem.EffectiveDate)).utc().format('MM/DD/YYYY');
                                str += ' <td id="RenewedDate' + indexCount + '" style="display:none;">' + fStartDate + '</td>';
                                str += ' <td id="RenewedDateDisplay' + indexCount + '" >' + fStartDateDisplay + '</td>';


                            } else {
                                str += ' <td id="RenewedDate' + indexCount + '" style="display:none;"></td>';
                                str += ' <td id="RenewedDateDisplay' + indexCount + '" ></td>';
                            }
                            if (item.RenewedDate != null) {
                                dEndDate = new Date(item.RenewedDate);
                                dEndDate.setDate(dEndDate.getDate() - 1);
                                var fRenewedDate = "";
                                var fRenewedDateDisplay = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                    fRenewedDateDisplay = moment(new Date(dEndDate)).utc().format('MM/DD/YYYY');
                                } else {
                                    fRenewedDateDisplay = moment(new Date(dEndDate)).utc().format(localStorage.AppDateFormat);
                                }
                                fRenewedDate = moment(new Date(dEndDate)).utc().format('MM/DD/YYYY');
                                str += ' <td id="TermEndDate' + indexCount + '" style="display:none;">' + fRenewedDate + '</td>';
                                str += ' <td id="TermEndDateDisplay' + indexCount + '" >' + fRenewedDateDisplay + '</td>';
                            } else {
                                str += ' <td id="TermEndDate' + indexCount + '" style="display:none;"></td>';
                                str += ' <td id="TermEndDateDisplay' + indexCount + '" ></td>';
                            }
                            var statTerm = "";
                            if (dStartDate <= todaydate && todaydate < dEndDate)
                                statTerm = "Current";
                            else if (dStartDate > todaydate)
                                statTerm = "Not Started";
                            else if (todaydate > dEndDate)
                                statTerm = "Ended";
                            if (statTerm == "Current")
                                str += '  <td id="TermStatus' + indexCount + '"><b title="Current" class="status_green" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;"  alt="Open Menu" title="Open Menu" class="' + vActionStatus + ' edithide margin-left-5"></b></td>';
                            else if (statTerm == "Ended")
                                str += '  <td id="TermStatus' + indexCount + '"><b title="Ended" class="status_Gray" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '</b></td>';
                            else if (statTerm == "Expired")
                                str += '  <td id="TermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;" alt="Open Menu" title="Open Menu" class="' + vActionStatus + ' edithide margin-left-5"></b></td>';
                            else if (statTerm == "Not Started")
                                str += '  <td id="TermStatus' + indexCount + '"><b title="Not Started" class="status_blue" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '</b></td>';
                            else
                                str += '  <td id="TermStatus' + indexCount + '"><b title="Current" class="" style="padding: 5px 0px; color:;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '</b></td>';
                            str += ' <td id="Status' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="RenewalNotes' + indexCount + '" style="display:none;"></td>';
                            str += '  <td id="RenewalConfirmParticipants' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="RenewedOn' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="RenewedOnDisplay' + indexCount + '" ></td>';
                            str += ' <td id="RenewedBy' + indexCount + '"></td>';
                            str += '      <td id="RenewalChecklist' + indexCount + '" style="display:none;"></td>';
                            str += '  <td id="RenewalNotificationInternal' + indexCount + '" style="display:none;"></td>';
                            str += '  <td id="RenewalConfirmParticipantsXML' + indexCount + '" style="display:none;"></td>';
                            str += '  <td id="ContractTermEach' + indexCount + '" style="display:none;"></td>';
                            str += '  <td id="RenewalType' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="ContractTermChoicesEach' + indexCount + '" style="display:none;"></td>';
                            str += '     <td id="CreatedBy' + indexCount + '" style="display:none;">' + item.CreatedBy + '</td>';
                            str += '    <td id="ModifiedBy' + indexCount + '" style="display:none;">' + item.ModifiedBy + '</td>';
                            str += '<td id="Created' + indexCount + '" style="display:none;">' + item.Created + '</td>';
                            str += '        <td id="Modified' + indexCount + '" style="display:none;">' + item.Modified + '</td>';
                            str += '        <td id="RenewalCommentsXML' + indexCount + '" style="display:none;">' + item.RenewalCommentsXML + '</td>';
                            str += '</tr>';
                            indexCount = (parseInt(indexCount) + 1);
                        } else {
                            indexCount = (parseInt(indexCount) + 1);
                        }
                        if (i == 0)
                            item.RenewableTermName = "Renewal 1";
                        else
                            item.RenewableTermName = "Renewal " + i;

                        var startdate = "";
                        var enddate = "";
                        if (item.RenewedDate != null) {
                            {
                                startdate = new Date(item.RenewedDate);
                            }
                        }
                        if (item.TermEndDate != null) {
                            {
                                enddate = new Date(item.TermEndDate);
                            }
                        }
                        if (startdate <= todaydate && todaydate < enddate)
                            item.TermStatus = "Current";
                        else if (startdate > todaydate)
                            item.TermStatus = "Not Started";
                        else if (todaydate > enddate)
                            item.TermStatus = "Ended";
                    }
                    if (item.TermStatus == "Ended" || item.TermStatus == "Current" || item.TermStatus == "Expired") {
                        vAction = "openmenuRenewalAll";
                        if (item.TermStatus == "Current" || item.TermStatus == "Expired") {
                            if (!isCurrentPresent) {
                                $("#hdCurrentTermName").val(item.RenewableTermName);
                                TermStartDate = moment(new Date(item.RenewedDate)).utc().format('MM/DD/YYYY'); //$.datepicker.formatDate('mm/dd/yy', new Date(item.RenewedDate));
                                TermEndDate = moment(new Date(item.TermEndDate)).utc().format('MM/DD/YYYY');
                                //$.datepicker.formatDate('mm/dd/yy', new Date(item.TermEndDate));
                                if (item.NextRenewalDate != null) {
                                    TermNextDate = moment(new Date(item.NextRenewalDate)).utc().format('MM/DD/YYYY'); // $.datepicker.formatDate('mm/dd/yy', new Date(item.NextRenewalDate));
                                    $("#hdNextRenewalTermStart").val(TermNextDate);
                                } else
                                    $("#hdNextRenewalTermStart").val("");
                                $("#hdCurrentRenewalTermEnd").val(TermEndDate).trigger('change');
                                $("#hdCurrentRenewalTermStart").val(TermStartDate);
                            }
                            if (item.TermStatus == "Current") {
                                vActionStatus = "openmenuRenewalExp";
                                isCurrentPresent = true;

                            } else if (item.TermStatus == "Expired") {
                                if (!isCurrentPresent) {
                                    expireFlag = true;
                                    vActionStatus = "openmenuRenewalCur";
                                } else {
                                    vAction = "openmenuRenewalDelNew";
                                    vActionStatus = "";
                                }
                            }

                        } else if (item.TermStatus == "Ended") {
                            if (item.NextRenewalDate != null) {
                                TermNextDate = moment(new Date(item.NextRenewalDate)).utc().format('MM/DD/YYYY'); //$.datepicker.formatDate('mm/dd/yy', new Date(item.NextRenewalDate));
                                //    $("#hdNextRenewalTermStart").val(TermNextDate);
                                //}
                                //else
                                //    $("#hdNextRenewalTermStart").val("");
                            }
                        }

                    } else {
                        vAction = "openmenuRenewalDel";

                        if (TermNextDate != null && TermNextDate != "" && typeof (TermNextDate) != "undefined") {
                            var nextDate = new Date(TermNextDate);

                            if ($.datepicker.formatDate('mm/dd/yy', new Date(item.RenewedDate)) == $.datepicker.formatDate('mm/dd/yy', nextDate) && (item.RenewalType == "" || item.RenewalType == "Manual")) {
                                NextTermRenewFlag = true;
                                RenewalTermName = item.RenewableTermName;
                            }
                        } else {
                            NextTermRenewFlag = false;
                            RenewalTermName = "";
                        }

                    }
                    if (item.TermStatus == "Expired" && item.RenewableTermName != "Initial Term") {
                        indexCount = parseInt(item.RenewableTermName.replace("Renewal ", ""));
                        str += '  <tr id="ExpRenewalViewHistoryTerm' + indexCount + '" class="termExpired">';
                        str += ' <td id="ExpRenewableTermName' + indexCount + '">' + item.RenewableTermName + '<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vAction + ' margin-left-5"></td>';
                        if (item.RenewedDate != null) {
                            var fStartDate = "";
                            var fStartDateDisplay = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fStartDateDisplay = moment(new Date(item.RenewedDate)).utc().format('MM/DD/YYYY');
                            } else {
                                fStartDateDisplay = moment(new Date(item.RenewedDate)).utc().format(localStorage.AppDateFormat);
                            }
                            fStartDate = moment(new Date(item.RenewedDate)).utc().format('MM/DD/YYYY');
                            str += ' <td id="ExpRenewedDate' + indexCount + '" style="display:none;">' + fStartDate + '</td>';
                            str += ' <td id="ExpRenewedDateDisplay' + indexCount + '" >' + fStartDateDisplay + '</td>';
                        } else {
                            str += ' <td id="ExpRenewedDate' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="ExpRenewedDateDisplay' + indexCount + '" ></td>';
                        }
                        if (item.TermEndDate != null) {
                            var fRenewedDate = "";
                            var fRenewedDateDisplay = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fRenewedDateDisplay = moment(new Date(item.TermEndDate)).utc().format('MM/DD/YYYY');
                            } else {
                                fRenewedDateDisplay = moment(new Date(item.TermEndDate)).utc().format(localStorage.AppDateFormat);
                            }
                            fRenewedDate = moment(new Date(item.TermEndDate)).utc().format('MM/DD/YYYY');
                            str += ' <td id="ExpTermEndDate' + indexCount + '" style="display:none;">' + fRenewedDate + '</td>';
                            str += ' <td id="ExpTermEndDateDisplay' + indexCount + '" >' + fRenewedDateDisplay + '</td>';
                        } else {
                            str += ' <td id="ExpTermEndDate' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="ExpTermEndDateDisplay' + indexCount + '" ></td>';
                        }

                        if (item.TermStatus == "Current")
                            str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Current" class="status_green" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;"  alt="Open Menu" title="Open Menu" class="' + vActionStatus + ' edithide margin-left-5"></b></td>';
                        else if (item.TermStatus == "Ended")
                            str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Ended" class="status_Gray" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                        else if (item.TermStatus == "Expired") {
                            if (TermEndDate != "") {
                                var dateEnd = new Date(TermEndDate);
                                if (todaydate <= dateEnd) {
                                    if (vActionStatus != "")
                                        str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;" alt="Open Menu" title="Open Menu" class="' + vActionStatus + ' edithide margin-left-5"></b></td>';
                                    else
                                        str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                                } else
                                    str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                            } else {
                                str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                            }

                        } else if (item.TermStatus == "Not Started")
                            str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Not Started" class="status_blue" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                        else
                            str += '  <td id="ExpTermStatus' + indexCount + '"><b title="Current" class="" style="padding: 5px 0px; color:;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                        str += ' <td id="ExpStatus' + indexCount + '" style="display:none;">' + item.Status + '</td>';
                        str += ' <td id="ExpRenewalNotes' + indexCount + '" style="display:none;">' + item.RenewalNotes + '</td>';
                        str += '  <td id="ExpRenewalConfirmParticipants' + indexCount + '" style="display:none;"> ' + (item.RenewalConfirmParticipants == "" ? '-' : item.RenewalConfirmParticipants) + ' </td>';
                        str += ' <td id="ExpRenewedOn' + indexCount + '" style="display:none;">' + (item.RenewedOn != null ? moment(new Date(item.RenewedOn)).utc().format('MM/DD/YYYY') : "-") + '</td>';
                        var fRenewedDisplay = "";
                        if (item.RenewedOn != null) {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fRenewedDisplay = moment(new Date(item.RenewedOn)).utc().format('MM/DD/YYYY');
                            } else {
                                fRenewedDisplay = moment(new Date(item.RenewedOn)).utc().format(localStorage.AppDateFormat);
                            }
                        } else {
                            fRenewedDisplay = "-";
                        }
                        str += ' <td id="ExpRenewedOnDisplay' + indexCount + '">' + (fRenewedDisplay != null ? fRenewedDisplay : "-") + '</td>';
                        str += ' <td id="ExpRenewedBy' + indexCount + '">' + (item.RenewedBy == "" ? '-' : item.RenewedBy) + '</td>';
                        str += '      <td id="ExpRenewalChecklist' + indexCount + '" style="display:none;">' + item.RenewalChecklist + '</td>';
                        str += '  <td id="ExpRenewalNotificationInternal' + indexCount + '" style="display:none;">' + item.RenewalNotificationInternal + '</td>';
                        str += '  <td id="ExpRenewalConfirmParticipantsXML' + indexCount + '" style="display:none;">' + item.RenewalConfirmParticipantsXML + '</td>';
                        str += '  <td id="ExpContractTermEach' + indexCount + '" style="display:none;">' + item.ContractTermEach + '</td>';
                        str += '  <td id="ExpRenewalType' + indexCount + '" style="display:none;">' + item.RenewalType + '</td>';
                        str += ' <td id="ExpContractTermChoicesEach' + indexCount + '" style="display:none;">' + item.ContractTermChoicesEach + '</td>';
                        str += '     <td id="ExpCreatedBy' + indexCount + '" style="display:none;">' + item.CreatedBy + '</td>';
                        str += '    <td id="ExpModifiedBy' + indexCount + '" style="display:none;">' + item.ModifiedBy + '</td>';
                        str += '<td id="ExpCreated' + indexCount + '" style="display:none;">' + item.Created + '</td>';
                        str += '        <td id="ExpModified' + indexCount + '" style="display:none;">' + item.Modified + '</td>';
                        str += '        <td id="ExpRenewalCommentsXML' + indexCount + '" style="display:none;">' + item.RenewalCommentsXML + '</td>';
                        str += '</tr>';
                    } else {
                        if (item.RenewableTermName != "Initial Term")
                            indexCount = parseInt(item.RenewableTermName.replace("Renewal ", "")) + 1;

                        str += '  <tr id="renewalViewHistoryTerm' + indexCount + '">';
                        str += ' <td id="RenewableTermName' + indexCount + '">' + item.RenewableTermName + '<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vAction + ' margin-left-5"></td>';
                        if (item.RenewedDate != null) {
                            var fStartDate = "";
                            var fStartDateDisplay = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fStartDateDisplay = moment(new Date(item.RenewedDate)).utc().format('MM/DD/YYYY');
                            } else {
                                fStartDateDisplay = moment(new Date(item.RenewedDate)).utc().format(localStorage.AppDateFormat);
                            }
                            fStartDate = moment(new Date(item.RenewedDate)).utc().format('MM/DD/YYYY');
                            str += ' <td id="RenewedDate' + indexCount + '" style="display:none;">' + fStartDate + '</td>';
                            str += ' <td id="RenewedDateDisplay' + indexCount + '" >' + fStartDateDisplay + '</td>';
                        } else {
                            str += ' <td id="RenewedDate' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="RenewedDateDisplay' + indexCount + '" ></td>';
                        }
                        if (item.TermEndDate != null) {
                            var fRenewedDate = "";
                            var fRenewedDateDisplay = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fRenewedDateDisplay = moment(new Date(item.TermEndDate)).utc().format('MM/DD/YYYY');
                            } else {
                                fRenewedDateDisplay = moment(new Date(item.TermEndDate)).utc().format(localStorage.AppDateFormat);
                            }
                            fRenewedDate = moment(new Date(item.TermEndDate)).utc().format('MM/DD/YYYY');
                            str += ' <td id="TermEndDate' + indexCount + '" style="display:none;">' + fRenewedDate + '</td>';
                            str += ' <td id="TermEndDateDisplay' + indexCount + '" >' + fRenewedDateDisplay + '</td>';
                        } else {
                            str += ' <td id="TermEndDate' + indexCount + '" style="display:none;"></td>';
                            str += ' <td id="TermEndDateDisplay' + indexCount + '" ></td>';
                        }

                        if (item.TermStatus == "Current")
                            str += '  <td id="TermStatus' + indexCount + '"><b title="Current" class="status_green" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;"  alt="Open Menu" title="Open Menu" class="' + vActionStatus + ' edithide margin-left-5"></b></td>';
                        else if (item.TermStatus == "Ended")
                            str += '  <td id="TermStatus' + indexCount + '"><b title="Ended" class="status_Gray" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                        else if (item.TermStatus == "Expired") {
                            if (TermEndDate != "") {
                                var dateEnd = new Date(TermEndDate);
                                if (todaydate <= dateEnd) {
                                    if (vActionStatus != "")
                                        str += '  <td id="TermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;" alt="Open Menu" title="Open Menu" class="' + vActionStatus + ' edithide margin-left-5"></b></td>';
                                    else
                                        str += '  <td id="TermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                                } else
                                    str += '  <td id="TermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                            } else {
                                str += '  <td id="TermStatus' + indexCount + '"><b title="Expired" class="status_red" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                            }

                        } else if (item.TermStatus == "Not Started")
                            str += '  <td id="TermStatus' + indexCount + '"><b title="Not Started" class="status_blue" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                        else
                            str += '  <td id="TermStatus' + indexCount + '"><b title="Current" class="" style="padding: 5px 0px; color:;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + item.TermStatus + '</b></td>';
                        str += ' <td id="Status' + indexCount + '" style="display:none;">' + item.Status + '</td>';
                        str += ' <td id="RenewalNotes' + indexCount + '" style="display:none;">' + item.RenewalNotes + '</td>';
                        str += '  <td id="RenewalConfirmParticipants' + indexCount + '" style="display:none;"> ' + (item.RenewalConfirmParticipants == "" ? '-' : item.RenewalConfirmParticipants) + ' </td>';
                        str += ' <td id="RenewedOn' + indexCount + '" style="display:none;">' + (item.RenewedOn != null ? moment(new Date(item.RenewedOn)).utc().format('MM/DD/YYYY') : "-") + '</td>';
                        var fRenewedDisplay = "";
                        if (item.RenewedOn != null) {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fRenewedDisplay = moment(new Date(item.RenewedOn)).utc().format('MM/DD/YYYY');
                            } else {
                                fRenewedDisplay = moment(new Date(item.RenewedOn)).utc().format(localStorage.AppDateFormat);
                            }
                        } else {
                            fRenewedDisplay = "-";
                        }
                        str += ' <td id="RenewedOnDisplay' + indexCount + '">' + (fRenewedDisplay != null ? fRenewedDisplay : "-") + '</td>';
                        str += ' <td id="RenewedBy' + indexCount + '">' + (item.RenewedBy == "" ? '-' : item.RenewedBy) + '</td>';
                        str += '      <td id="RenewalChecklist' + indexCount + '" style="display:none;">' + item.RenewalChecklist + '</td>';
                        str += '  <td id="RenewalNotificationInternal' + indexCount + '" style="display:none;">' + item.RenewalNotificationInternal + '</td>';
                        str += '  <td id="RenewalConfirmParticipantsXML' + indexCount + '" style="display:none;">' + item.RenewalConfirmParticipantsXML + '</td>';
                        str += '  <td id="ContractTermEach' + indexCount + '" style="display:none;">' + item.ContractTermEach + '</td>';
                        str += '  <td id="RenewalType' + indexCount + '" style="display:none;">' + item.RenewalType + '</td>';
                        str += ' <td id="ContractTermChoicesEach' + indexCount + '" style="display:none;">' + item.ContractTermChoicesEach + '</td>';
                        str += '     <td id="CreatedBy' + indexCount + '" style="display:none;">' + item.CreatedBy + '</td>';
                        str += '    <td id="ModifiedBy' + indexCount + '" style="display:none;">' + item.ModifiedBy + '</td>';
                        str += '<td id="Created' + indexCount + '" style="display:none;">' + item.Created + '</td>';
                        str += '        <td id="Modified' + indexCount + '" style="display:none;">' + item.Modified + '</td>';
                        str += '        <td id="RenewalCommentsXML' + indexCount + '" style="display:none;">' + item.RenewalCommentsXML + '</td>';
                        str += '</tr>';
                    }

                });
                if (str != '')
                    $("#renewalViewHistoryTerm").append(str);
                else
                    $("#renewalViewHistoryTerm").append('No History found.');


                var TermNameLast = $("#renewalViewHistoryTerm tr:not(.termExpired):last td:first").text();
                if (TermNameLast != "Initial Term") {
                    var countTerm = TermNameLast.replace("Renewal ", "");
                    //$("#AddRenewalTerm").text("+Add Renewal " + (parseInt(countTerm) + 1));
                    $("#ddlTermPeriodSetRenewal").find("option").show();
                    if ((parseInt(countTerm)) <= 15)
                        $("#ddlTermPeriodSetRenewal").find("option:lt(" + (parseInt(countTerm)) + ")").hide();
                    else
                        $("#ddlTermPeriodSetRenewal").find("option:lt(15)").hide();
                    if (contrcatItem.AutoContractRenewTermCount == "")
                        $("#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm)));
                    else {
                        var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                        if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                            $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                        } else {
                            $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
                        }
                    }
                } else {
                    //$("#AddRenewalTerm").text("+Add Renewal 1");
                    if (contrcatItem.AutoContractRenewTermCount != "") {
                        if ($("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']").length > 0 && !($("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']").css('display') == "none"))
                            $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                    } else
                        $("#ddlTermPeriodSetRenewal").val("Unlimited")
                    $("#ddlTermPeriodSetRenewal").find("option").show();
                }
                if (NextTermRenewFlag && RenewalTermName != "" && RenewalTermName != "Initial Term") {
                    RenewalName = RenewalTermName;
                    var RenewIndex = RenewalName.replace("Renewal ", "");
                    if ($("#RenewedOn" + (parseInt(RenewIndex) + 1)).text() == "" || $("#RenewedOn" + (parseInt(RenewIndex) + 1)).text() == "-") {
                        var html = $("#RenewTerm").html();
                        $("#RenewedOnDisplay" + (parseInt(RenewIndex) + 1)).html(html);
                    }
                    if ($(':input[type=radio][name=RenewalConfirmAuto]:checked').val() == "Yes") {
                        $(".ManRenewal").css('display', 'none');
                        $(".autoRenewal").css('display', 'none');
                        // $("#RenewTerm").css('display', '');
                    } else {
                        $(".ManRenewal").css('display', '');
                        $(".autoRenewal").css('display', '');
                    }
                } else {
                    // $("#RenewTerm").text('');
                    // $("#RenewTerm").css('display', 'none');
                }
            }
            if (expireFlag) {
                $("#AddRenewalTerm").css("display", "none");
                // $("#RenewTerm").css('display', 'none');
                $("#ddlTermPeriodSetRenewal").find("option").show();
                $("#trContractTermRenewal").css("display", "none");
                $("#trContractTermRenewalSec").css("display", "none");
            }
            $(".openmenuRenewalAll").contextMenu({
                menu: 'menuRenewalAll',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("td").parent("tr"), pos);
            });
            $(".openmenuRenewalDel").contextMenu({
                menu: 'menuRenewalDel',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("td").parent("tr"), pos);
            });

            $(".openmenuRenewalDelNew").contextMenu({
                menu: 'menuRenewalDelNew',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("td").parent("tr"), pos);
            });

            $(".openmenuRenewalExp").contextMenu({
                menu: 'menuRenewalExp',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("b").parent("td").parent("tr"), pos);
            });
            $(".openmenuRenewalCur").contextMenu({
                menu: 'menuRenewalCur',
                leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("b").parent("td").parent("tr"), pos);
            });
        },
        error: function (data) {
            $("#hdCurrentTermName").val('');
            $("#hdCurrentRenewalTermStart").val('');
            $("#hdCurrentRenewalTermEnd").val('').trigger('change');
            $("#renewalViewHistoryTerm").empty();
            $("#renewalViewHistoryTerm").append('No History found.');
        }
    });
}

function contextMenuRenewal(action, el, pos) {

    switch (action) {
        case "view":
            {
                var tbrowcount = $(el).attr('id').replace("renewalViewHistoryTerm", "");

                var term = $("#RenewableTermName" + tbrowcount).text();
                //if (term == "Initial term") {

                //    $("#RenewalChecklistNewlb").css("display", "none");
                //    $("#RenewalTypelb").css("display", "none");

                //    $("#SendRenewalNotificationNewlb").css("display", "none");

                //}
                //else {
                //    $("#RenewalTypelb").css("display", "");
                //    $("#RenewalChecklistNewlb").css("display", "");
                //    $("#SendRenewalNotificationNewlb").css("display", "");
                //}
                $("#RenewalChecklistNewlb").css("display", "none");
                $("#RenewalTypelb").css("display", "none");
                $("#SendRenewalNotificationNewlb").css("display", "none");
                $("#AuthorizRequiredlb").css("display", "none");
                $("#AuthorizedBylb").css("display", "none");



                $("#txtRenewStartDatelb").text(($("#RenewedDateDisplay" + tbrowcount).text() == "" ? "-" : $("#RenewedDateDisplay" + tbrowcount).text()));

                $("#txtRenewEndDatelb").text(($("#TermEndDateDisplay" + tbrowcount).text() == "" ? "-" : $("#TermEndDateDisplay" + tbrowcount).text()));
                $("#txtRenewStatuslb").text(($("#TermStatus" + tbrowcount).text() == "" ? "-" : $("#TermStatus" + tbrowcount).text()));
                $("#txtRenewalNotesNewlb").text(($("#RenewalNotes" + tbrowcount).text() == "" ? "-" : $("#RenewalNotes" + tbrowcount).text()));
                $("#txtRenewalTypelb").text(($("#RenewalType" + tbrowcount).text() == "" ? "-" : $("#RenewalType" + tbrowcount).text()));
                $("#ddlRenewalNotfInternalNewlb").text(($("#RenewalNotificationInternal" + tbrowcount).text() == "" ? "-" : $("#RenewalNotificationInternal" + tbrowcount).text()));
                var ParticipantXmlhtml = '';
                if ($("#RenewalConfirmParticipantsXML" + tbrowcount).html() != null && $("#RenewalConfirmParticipantsXML" + tbrowcount).html() != '') {
                    var XML = $("#RenewalConfirmParticipantsXML" + tbrowcount).html();
                    $(XML).find('participant').each(function () {
                        var Status = $(this).find('status').text();
                        var Name = $(this).find('name').text();
                        if (Name != "" && Name != null) {
                            if (Status == "In Progress") {

                                ParticipantXmlhtml += '             <div>';
                                ParticipantXmlhtml += '   <img src="../Content/Images/refresh.png" alt="Open Menu" title="Open Menu" class=" margin-left-5" style="pointer-events: none;">';
                                ParticipantXmlhtml += '            <label id="txtRenewStatuslb" class="css1-label" style="text-align:left;">' + Name + '</label>';
                                ParticipantXmlhtml += '          </div>';
                            } else if (Status == "Renewed") {
                                ParticipantXmlhtml += '             <div>';
                                ParticipantXmlhtml += '   <img src="../Content/Images/approved.png" alt="Open Menu" title="Open Menu" class=" margin-left-5" style="pointer-events: none;">';
                                ParticipantXmlhtml += '            <label id="txtRenewStatuslb" class="css1-label" style="text-align:left;">' + Name + '</label>';
                                ParticipantXmlhtml += '          </div>';

                            } else if (Status == "Rejected") {
                                ParticipantXmlhtml += '             <div>';
                                ParticipantXmlhtml += '   <img src="../Content/Images/reject.png" alt="Open Menu" title="Open Menu" class=" margin-left-5" style="pointer-events: none;">';
                                ParticipantXmlhtml += '            <label id="txtRenewStatuslb" class="css1-label" style="text-align:left;">' + Name + '</label>';
                                ParticipantXmlhtml += '          </div>';

                            }
                        }
                    })
                    if (ParticipantXmlhtml != "")
                        $("#ddlAuthorizedBylb").html(ParticipantXmlhtml);
                    else
                        $("#ddlAuthorizedBylb").text('-');
                } else {
                    $("#ddlAuthorizedBylb").text('-');
                }
                $("#txtAuthorizRequiredlb").text(($("#RequiresAuth" + tbrowcount).text() == "" ? "-" : $("#RequiresAuth" + tbrowcount).text()));
                $("#txtRenewalChecklistNewlb").text(($("#RenewalChecklist" + tbrowcount).text() == "" ? "-" : $("#RenewalChecklist" + tbrowcount).text()));

                $("#ddlRenewedBylb").text(($("#RenewedBy" + tbrowcount).text() == "" ? "-" : $("#RenewedBy" + tbrowcount).text()));
                $("#RenewalTermNewlb").dialog("option", "title", term);
                $("#RenewalTermNewlb").dialog("open");

                break;
            }
        case "edit":
            {
                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });

                //Sridhar
                $('input[type="radio"][name="TermsSingleMultiple"][value="Yes"]').prop('checked', true);
                $(".trSingle").css('display', '');
                $(".trMultiple").css('display', 'none');
                $("#trNumberOfTerms").css('display', 'none');
                $("#SendRenewalNotificationNew").css("display", "none");
                $("#RenewalChecklistNew").css("display", "none");
                //Sridhar

                EditSaveFlag = false;
                var tbrowcount = $(el).attr('id').replace("renewalViewHistoryTerm", "");
                var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
                var term = $("#RenewableTermName" + tbrowcount).text();
                $("#tdNameofTerms").html(term);
                $("#txtRenewStartDate").prop('disabled', false);
                $("#txtRenewStartDate").addClass('form-contro-Date');
                $("#txtRenewStartDate").removeClass('form-contro-NoDate');
                $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('disabled', false);
                $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('disabled', false);
                //manoj
                if ($("#ContractTermEach" + tbrowcount).text() == "") {
                    $("#ContractTermRenewNew").val('');
                    $("#ContractTermRenewChoicesNew").val('years');
                } else {
                    $("#ContractTermRenewNew").val($("#ContractTermEach" + tbrowcount).text());
                    $("#ContractTermRenewChoicesNew").val($("#ContractTermChoicesEach" + tbrowcount).text());
                }
                //manoj

                if (term == "Initial Term") {

                    $("#RenewalChecklistNew").css("display", "none");
                    $("#SendRenewalNotificationNew").css("display", "none");
                    GetValuesAndAutoPopulate("ddlRenewalNotfInternalNew", "");
                    $('input[type="checkbox"][name="checkboxNotifyNew"]').prop('checked', false);

                    if (term != TermNameLast) {
                        var tempdateStart = ($("#RenewedDate" + (parseInt(tbrowcount) + 1)) != null && typeof ($("#RenewedDate" + (parseInt(tbrowcount) + 1))) != "undefined") ? ($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text() == "" ? null : new Date($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text())) : null;
                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        $("#txtRenewStartDate").datepicker("option", "maxDate", (tempdateStart != null ? new Date(tempdateStart.setDate(tempdateStart.getDate() - 1)) : null));
                        $("#txtRenewEndDate").datepicker("option", "maxDate", tempdateStart);
                        $("#txtRenewEndDate").datepicker("option", "minDate", (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() - 1)) : null));
                        $("#txtRenewStartDate").datepicker("option", "minDate", null);
                        EndDateCheckRenewal = new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text());
                    } else {
                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        $("#txtRenewStartDate").datepicker("option", "maxDate", null);
                        $("#txtRenewEndDate").datepicker("option", "maxDate", null);
                        $("#txtRenewEndDate").datepicker("option", "minDate", (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() + 1)) : null));
                        $("#txtRenewStartDate").datepicker("option", "minDate", null);
                        EndDateCheckRenewal = "";
                    }
                } else {
                    if (term == TermNameLast) {
                        var tempdateEnd = ($("#TermEndDate" + (parseInt(tbrowcount) - 1)) != null && typeof ($("#TermEndDate" + (parseInt(tbrowcount) - 1))) != "undefined") ? ($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text() == "" ? null : new Date($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text())) : null;
                        var tempdateStart = ($("#RenewedDate" + (parseInt(tbrowcount) + 1)) != null && typeof ($("#RenewedDate" + (parseInt(tbrowcount) + 1))) != "undefined") ? ($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text() == "" ? null : new Date($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text())) : null;
                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        var tempdateEndthis = new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text());
                        var temp1 = (tempdateEnd != null ? new Date(tempdateEnd.setDate(tempdateEnd.getDate() + 1)) : null);
                        var temp2 = (tempdateStart != null ? new Date(tempdateStart.setDate(tempdateStart.getDate() - 1)) : null);
                        var temp3 = (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() + 1)) : null)
                        $("#txtRenewStartDate").datepicker("option", "minDate", temp1);
                        $("#txtRenewStartDate").datepicker("option", "maxDate", temp2);
                        $("#txtRenewEndDate").datepicker("option", "minDate", temp3);
                        $("#txtRenewEndDate").datepicker("option", "maxDate", null);
                        EndDateCheckRenewal = "";
                    } else {
                        var tempdateEnd = ($("#TermEndDate" + (parseInt(tbrowcount) - 1)) != null && typeof ($("#TermEndDate" + (parseInt(tbrowcount) - 1))) != "undefined") ? ($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text() == "" ? null : new Date($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text())) : null;
                        var tempdateStart = ($("#RenewedDate" + (parseInt(tbrowcount) + 1)) != null && typeof ($("#RenewedDate" + (parseInt(tbrowcount) + 1))) != "undefined") ? ($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text() == "" ? null : new Date($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text())) : null;
                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        var tempdateEndthis = new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text());
                        var temp1 = (tempdateEnd != null ? new Date(tempdateEnd.setDate(tempdateEnd.getDate() + 1)) : null);
                        var temp2 = (tempdateStart != null ? new Date(tempdateStart) : null);
                        if (temp2 != null)
                            temp2 = new Date(temp2.setDate(temp2.getDate() - 1));
                        var temp3 = (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() + 1)) : null)
                        var temp4 = (tempdateStart != null ? new Date(tempdateStart) : null);
                        if (temp4 != null)
                            temp4 = new Date(temp4.setDate(tempdateStart.getDate() - 1));
                        $("#txtRenewStartDate").datepicker("option", "minDate", temp1);
                        $("#txtRenewStartDate").datepicker("option", "maxDate", temp2);
                        $("#txtRenewEndDate").datepicker("option", "minDate", temp3);
                        $("#txtRenewEndDate").datepicker("option", "maxDate", temp4);
                        EndDateCheckRenewal = new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text());
                    }
                    $("#RenewalChecklistNew").css("display", "none");
                    $("#SendRenewalNotificationNew").css("display", "none");
                }

                $("#txtRenewStartDate").val($.datepicker.formatDate(DatepickerFormat, new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text())));

                if ($("#ContractTermEach" + tbrowcount).text() == "") {
                    $("#ContractTermRenewChoicesNew").prop('disabled', true);
                    $("#ContractTermRenewNew").prop('disabled', true);
                    $("#ContractTermRenewNew").val('');
                    $("#ContractTermRenewChoicesNew").val('years');
                    $("#txtRenewEndDate").prop('disabled', false);
                    $("#txtRenewEndDate").addClass('form-contro-Date');
                    $("#txtRenewEndDate").removeClass('form-contro-NoDate');

                    $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('checked', true);
                    $("#txtRenewEndDate").val($.datepicker.formatDate(DatepickerFormat, new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text())));
                } else {
                    $("#ContractTermRenewChoicesNew").prop('disabled', false);
                    $("#ContractTermRenewNew").prop('disabled', false);
                    $("#ContractTermRenewNew").val($("#ContractTermEach" + tbrowcount).text());
                    $("#ContractTermRenewChoicesNew").val($("#ContractTermChoicesEach" + tbrowcount).text());
                    $("#txtRenewEndDate").prop('disabled', true);
                    $("#txtRenewEndDate").removeClass('form-contro-Date');
                    $("#txtRenewEndDate").addClass('form-contro-NoDate');


                    $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('checked', true);
                    calculateenddateRenew('txtRenewStartDate', 'ContractTermRenewChoicesNew', 'ContractTermRenewNew', 'txtRenewEndDate');
                }
                $("#txtRenewStatus").html(($("#TermStatus" + tbrowcount).html() == "" ? "" : $("#TermStatus" + tbrowcount).html()));
                $("#txtRenewalNotesNew").val(($("#RenewalNotes" + tbrowcount).text() == "" ? "" : $("#RenewalNotes" + tbrowcount).text()));
                GetValuesAndAutoPopulate("ddlRenewalNotfInternalNew", ($("#RenewalNotificationInternal" + tbrowcount).text() == "" ? "" : $("#RenewalNotificationInternal" + tbrowcount).text()));
                //GetValuesAndAutoPopulate("ddlAuthorizedBy", ($("#RenewalConfirmParticipants" + tbrowcount).text() == "" ? "-" : $("#RenewalConfirmParticipants" + tbrowcount).text()));
                //GetValuesAndAutoPopulate("ddlRenewedBy", ($("#RenewedBy" + tbrowcount).text() == "" ? "-" : $("#RenewedBy" + tbrowcount).text()));
                $("#txtAuthorizRequired").val(($("#RequiresAuth" + tbrowcount).text() == "" ? "No" : $("#RequiresAuth" + tbrowcount).text()));
                var CheckList = ($("#RenewalChecklist" + tbrowcount).text() == "" ? "-" : $("#RenewalChecklist" + tbrowcount).text());
                if (CheckList != "" && CheckList != null && typeof (CheckList) != "undefined") {
                    var splitchecklt = CheckList.split(';');
                    $(splitchecklt).each(function (i, item) {
                        var valcheck = item.trim();
                        if (valcheck != "") {
                            $(':input[type=checkbox][value="' + valcheck + '"]').prop('checked', true);
                        }
                    });
                }
                RenewalItemEdit = term;
                RenewalAddFlag = false;
                isRenewTermClick = false;
                $("#btnAddNewTerm").html('<span class="pop_up_Content_Green">Ok</span>');
                $("#RenewalTermNew").dialog("option", "title", "Edit " + term);
                $("#RenewalTermNew").dialog("open");

                break;
            }
        case "expire":
            {
                swal({
                    title: '',
                    text: "Expiring this term will delete the subsequent term(s). Are you sure you want to <span style=\"font-weight:700\">Expire</span>? ",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            $("#trContractTermRenewal").css('display', 'none');
                            $("#trContractTermRenewalSec").css('display', 'none');
                            var index = $(el).index();
                            var tbrowcount = $("#tbRenewalActivities").find("tr:gt(" + (parseInt(index) + 1) + ")").remove();
                            var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
                            if (TermNameLast == "" || TermNameLast == null || typeof (TermNameLast) == "undefined") {
                                $("#AddInitialTerm").css("display", "");
                                $("#AddRenewalTerm").css("display", "none");

                            } else if (TermNameLast == "Initial Term") {
                                $("#AddInitialTerm").css("display", "none");
                                $("#AddRenewalTerm").css("display", "");
                                $("#AddRenewalTerm").text("+Add Terms");
                                $("#ddlTermPeriodSetRenewal").find("option").show();
                                $("#ddlTermPeriodSetRenewal").find("option:lt(1)").hide();

                                if (contrcatItem.AutoContractRenewTermCount == "")
                                    $("#ddlTermPeriodSetRenewal").val("Unlimited");
                                else {
                                    var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                                    if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                                        $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                                    } else {
                                        $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', 2);
                                    }
                                }
                            } else {
                                $("#AddInitialTerm").css("display", "none");
                                $("#AddRenewalTerm").css("display", "");
                                var countTerm = TermNameLast.replace("Renewal ", "");
                                $("#AddRenewalTerm").text("+Add Terms");
                                if ((parseInt(countTerm)) <= 15)
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(" + (parseInt(countTerm)) + ")").hide();
                                else
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(15)").hide();
                                if (contrcatItem.AutoContractRenewTermCount == "")
                                    $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
                                else {
                                    var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                                    if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                                        $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                                    } else {
                                        $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
                                    }
                                }



                            }
                            $('#TermStatus' + (parseInt(index) + 1)).html('<b title="Current" class="status_red" style="padding: 5px 24px; color:#fff">Expired<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;"  alt="Open Menu" title="Open Menu" class="openmenuRenewalCur edithide margin-left-5"></b>');
                            $('#Status' + (parseInt(index) + 1)).text('Expired');
                            $(".openmenuRenewalCur").contextMenu({
                                menu: 'menuRenewalCur',
                                leftButton: true
                            }, function (action, el, pos) {
                                contextMenuRenewal(action, el.parent("b").parent("td").parent("tr"), pos);
                            });

                            $("#AddInitialTerm").css("display", "none");

                            contractItem.RenewalConfirmOverall = "";
                            contractItem.RenewalConfirmParticipantsXML = "";
                            $("#AddRenewalTerm").css("display", "none");
                            // $("#RenewTerm").css('display', 'none');

                            $("#trContractTermRenewal").css("display", "none");
                            $("#trContractTermRenewalSec").css("display", "none");
                        }
                        return;
                    });
                break;
            }
        case "current":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to make the term <span style=\"font-weight:700\">Current</span>? ",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {

                            var index = $(el).index();
                            var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
                            if (TermNameLast == "" || TermNameLast == null || typeof (TermNameLast) == "undefined") {
                                $("#AddInitialTerm").css("display", "");
                                $("#AddRenewalTerm").css("display", "none");

                            } else if (TermNameLast == "Initial Term") {
                                $("#AddInitialTerm").css("display", "none");
                                $("#AddRenewalTerm").css("display", "");
                                $("#AddRenewalTerm").text("+Add Terms");
                                $("#ddlTermPeriodSetRenewal").find("option").show();
                                $("#ddlTermPeriodSetRenewal").find("option:lt(1)").hide();
                                if (contrcatItem.AutoContractRenewTermCount == "")
                                    $("#ddlTermPeriodSetRenewal").val("Unlimited");
                                else {
                                    var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                                    if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                                        $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                                    } else {
                                        $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', 2);
                                    }
                                }
                            } else {
                                $("#AddInitialTerm").css("display", "none");
                                $("#AddRenewalTerm").css("display", "");
                                var countTerm = TermNameLast.replace("Renewal ", "");
                                $("#AddRenewalTerm").text("+Add Terms");
                                if ((parseInt(countTerm)) <= 15)
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(" + (parseInt(countTerm)) + ")").hide();
                                else
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(15)").hide();
                                if (contrcatItem.AutoContractRenewTermCount == "")
                                    $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
                                else {
                                    var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                                    if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                                        $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                                    } else {
                                        $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
                                    }
                                }
                            }

                            $('#TermStatus' + (parseInt(index) + 1)).html('<b title="Current" class="status_green" style="padding: 5px 24px; color:#fff">Current<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;"  alt="Open Menu" title="Open Menu" class="openmenuRenewalExp edithide margin-left-5"></b>');
                            $('#Status' + (parseInt(index) + 1)).text('Renewed');
                            $(".openmenuRenewalExp").contextMenu({
                                menu: 'menuRenewalExp',
                                leftButton: true
                            }, function (action, el, pos) {
                                contextMenuRenewal(action, el.parent("b").parent("td").parent("tr"), pos);
                            });
                            $("#AddRenewalTerm").css("display", "");
                            $("#ddlTermPeriodSetRenewal").find("option").show();
                            if ((parseInt(index)) <= 15)
                                $("#ddlTermPeriodSetRenewal").find("option:lt(" + (parseInt(index)) + ")").hide();
                            else
                                $("#ddlTermPeriodSetRenewal").find("option:lt(15)").hide();
                            if (contrcatItem.AutoContractRenewTermCount == "")
                                $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(index) <= 15 ? parseInt(countTerm) : 15));
                            else {
                                var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                                if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                                    $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                                } else {
                                    $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(index) <= 15 ? parseInt(countTerm) : 15));
                                }
                            }
                        }
                        return;
                    });
                break;
            }
        case "delete":
            {
                swal({
                    title: '',
                    text: "Deleting this term will delete the subsequent term(s). Are you sure you want to <span style=\"font-weight:700\">Delete</span>? ",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var index = $(el).index();
                            var tbrowcount = $("#tbRenewalActivities").find("tr:gt(" + index + ")").remove();
                            var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
                            if (TermNameLast == "" || TermNameLast == null || typeof (TermNameLast) == "undefined") {
                                $("#AddInitialTerm").css("display", "");
                                $("#AddRenewalTerm").css("display", "none");
                            } else if (TermNameLast == "Initial Term") {
                                $("#AddInitialTerm").css("display", "none");
                                $("#AddRenewalTerm").css("display", "");
                                $("#AddRenewalTerm").text("+Add Terms");
                                $("#ddlTermPeriodSetRenewal").find("option").show();
                                // $("#ddlTermPeriodSetRenewal").find("option:lt(1)").hide();
                                if (contrcatItem.AutoContractRenewTermCount == "")
                                    $("#ddlTermPeriodSetRenewal").val("Unlimited");
                                else {
                                    var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                                    if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                                        $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                                    } else {
                                        $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', 2);
                                    }
                                }
                            } else {
                                $("#AddInitialTerm").css("display", "none");
                                $("#AddRenewalTerm").css("display", "");
                                var countTerm = TermNameLast.replace("Renewal ", "");
                                $("#AddRenewalTerm").text("+Add Terms");
                                $("#ddlTermPeriodSetRenewal").find("option").show();
                                if ((parseInt(countTerm)) <= 15)
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(" + (parseInt(countTerm)) + ")").hide();
                                else
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(15)").hide();
                                if (contrcatItem.AutoContractRenewTermCount == "")
                                    $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
                                else {
                                    var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
                                    if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                                        $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
                                    } else {
                                        $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
                                    }
                                }

                            }
                            if (RenewalName != "Initial Term") {
                                indexCount = RenewalName.replace("Renewal ", "");
                                indexCount = parseInt(indexCount) + 1;
                                if (($("#RenewalConfirmParticipantsXML" + indexCount) != null && typeof ($("#RenewalConfirmParticipantsXML" + indexCount) != "undefined")) ? false : true) {

                                    $("#trContractTermRenewal").css('display', 'none');
                                    $("#trContractTermRenewalSec").css('display', 'none');
                                }
                            }

                            var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
                            if (TermNameLast == "") {
                                $("#ddlTermPeriodSetRenewal").find("option").show();
                            } else if (TermNameLast == "Initial Term") {
                                $("#ddlTermPeriodSetRenewal").find("option").show();
                                $("#ddlTermPeriodSetRenewal").find("option:lt(1)").hide();
                            } else {
                                var countTerm = TermNameLast.replace("Renewal ", "");
                                $("#ddlTermPeriodSetRenewal").find("option").show();
                                if ((parseInt(countTerm)) <= 15)
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(" + (parseInt(countTerm)) + ")").hide();
                                else
                                    $("#ddlTermPeriodSetRenewal").find("option:lt(15)").hide();
                            }
                        }
                        return;
                    });

                break;
            }
        case "deleteexpired":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to <span style=\"font-weight:700\">Delete</span>? ",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                    function (confirmed) {
                        if (confirmed) {
                            var trName = $(el)[0].id;
                            var index = parseInt(trName.replace("ExpRenewalViewHistoryTerm", ""));
                            var tbrowcount = $("#tbRenewalActivities").find("tr#ExpRenewalViewHistoryTerm" + index).remove();
                        }
                        return;
                    });

                break;
            }
        case "editsave":
            {
                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });
                EditSaveFlag = true;
                $('input[type="radio"][name="TermsSingleMultiple"][value="Yes"]').prop('checked', true);
                $(".trSingle").css('display', '');
                $(".trMultiple").css('display', 'none');
                $("#trNumberOfTerms").css('display', 'none');
                var tbrowcount = $(el).attr('id').replace("renewalViewHistoryTerm", "");
                var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
                var term = $("#RenewableTermName" + tbrowcount).text();
                //manoj
                if ($("#ContractTermEach" + tbrowcount).text() == "") {
                    $("#ContractTermRenewNew").val('');
                    $("#ContractTermRenewChoicesNew").val('years');
                } else {
                    $("#ContractTermRenewNew").val($("#ContractTermEach" + tbrowcount).text());
                    $("#ContractTermRenewChoicesNew").val($("#ContractTermChoicesEach" + tbrowcount).text());
                }
                //manoj
                if (term == "Initial Term") {
                    $("#RenewalChecklistNew").css("display", "none");
                    $("#SendRenewalNotificationNew").css("display", "none");
                    GetValuesAndAutoPopulate("ddlRenewalNotfInternalNew", "");
                    $('input[type="checkbox"][name="checkboxNotifyNew"]').prop('checked', false);

                    if (term != TermNameLast) {
                        var tempdateStart = ($("#RenewedDate" + (parseInt(tbrowcount) + 1)) != null && typeof ($("#RenewedDate" + (parseInt(tbrowcount) + 1))) != "undefined") ? ($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text() == "" ? null : new Date($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text())) : null;
                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        $("#txtRenewStartDate").datepicker("option", "maxDate", (tempdateStart != null ? new Date(tempdateStart.setDate(tempdateStart.getDate() - 1)) : null));
                        $("#txtRenewEndDate").datepicker("option", "maxDate", tempdateStart);
                        $("#txtRenewEndDate").datepicker("option", "minDate", (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() - 1)) : null));
                        $("#txtRenewStartDate").datepicker("option", "minDate", null);
                    } else {

                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        $("#txtRenewStartDate").datepicker("option", "maxDate", null);
                        $("#txtRenewEndDate").datepicker("option", "maxDate", null);
                        $("#txtRenewEndDate").datepicker("option", "minDate", (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() + 1)) : null));
                        $("#txtRenewStartDate").datepicker("option", "minDate", null);
                    }
                } else {
                    if (term == TermNameLast) {
                        var tempdateEnd = ($("#TermEndDate" + (parseInt(tbrowcount) - 1)) != null && typeof ($("#TermEndDate" + (parseInt(tbrowcount) - 1))) != "undefined") ? ($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text() == "" ? null : new Date($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text())) : null;
                        var tempdateStart = ($("#RenewedDate" + (parseInt(tbrowcount) + 1)) != null && typeof ($("#RenewedDate" + (parseInt(tbrowcount) + 1))) != "undefined") ? ($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text() == "" ? null : new Date($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text())) : null;
                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        var tempdateEndthis = new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text());
                        var temp1 = (tempdateEnd != null ? new Date(tempdateEnd.setDate(tempdateEnd.getDate() + 1)) : null);
                        var temp2 = (tempdateStart != null ? new Date(tempdateStart.setDate(tempdateStart.getDate() - 1)) : null);
                        var temp3 = (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() + 1)) : null)
                        $("#txtRenewStartDate").datepicker("option", "minDate", temp1);
                        $("#txtRenewStartDate").datepicker("option", "maxDate", temp2);
                        $("#txtRenewEndDate").datepicker("option", "minDate", temp3);
                        $("#txtRenewEndDate").datepicker("option", "maxDate", null);
                    } else {
                        var tempdateEnd = ($("#TermEndDate" + (parseInt(tbrowcount) - 1)) != null && typeof ($("#TermEndDate" + (parseInt(tbrowcount) - 1))) != "undefined") ? ($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text() == "" ? null : new Date($("#TermEndDate" + (parseInt(tbrowcount) - 1)).text())) : null;
                        var tempdateStart = ($("#RenewedDate" + (parseInt(tbrowcount) + 1)) != null && typeof ($("#RenewedDate" + (parseInt(tbrowcount) + 1))) != "undefined") ? ($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text() == "" ? null : new Date($("#RenewedDate" + (parseInt(tbrowcount) + 1)).text())) : null;
                        var tempdateStartthis = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());
                        var tempdateEndthis = new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text());
                        var temp1 = (tempdateEnd != null ? new Date(tempdateEnd.setDate(tempdateEnd.getDate() + 1)) : null);
                        var temp2 = (tempdateStart != null ? new Date(tempdateStart) : null);
                        if (temp2 != null)
                            temp2 = new Date(temp2.setDate(temp2.getDate() - 1));
                        var temp3 = (tempdateStartthis != null ? new Date(tempdateStartthis.setDate(tempdateStartthis.getDate() + 1)) : null)
                        var temp4 = (tempdateStart != null ? new Date(tempdateStart) : null);
                        if (temp4 != null)
                            temp4 = new Date(temp4.setDate(tempdateStart.getDate() - 1));
                        $("#txtRenewStartDate").datepicker("option", "minDate", temp1);
                        $("#txtRenewStartDate").datepicker("option", "maxDate", temp2);
                        $("#txtRenewEndDate").datepicker("option", "minDate", temp3);
                        $("#txtRenewEndDate").datepicker("option", "maxDate", temp4);

                    }
                    $("#RenewalChecklistNew").css("display", "none");
                    $("#SendRenewalNotificationNew").css("display", "none");
                }

                var vvSD = new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text());

                $("#txtRenewStartDate").val($.datepicker.formatDate(DatepickerFormat, new Date($("#RenewedDate" + tbrowcount).text() == "" ? "" : $("#RenewedDate" + tbrowcount).text())));
                EndDateCheckRenewal = new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text());
                if ($("#ContractTermEach" + tbrowcount).text() == "") {
                    $("#ContractTermRenewChoicesNew").prop('disabled', true);
                    $("#ContractTermRenewNew").prop('disabled', true);
                    $("#ContractTermRenewNew").val('');
                    $("#ContractTermRenewChoicesNew").val('years');
                    $("#txtRenewEndDate").prop('disabled', false);
                    $("#txtRenewEndDate").addClass('form-contro-Date');
                    $("#txtRenewEndDate").removeClass('form-contro-NoDate');

                    $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('checked', true);
                    $("#txtRenewEndDate").val($.datepicker.formatDate(DatepickerFormat, new Date($("#TermEndDate" + tbrowcount).text() == "" ? "" : $("#TermEndDate" + tbrowcount).text())));
                } else {
                    $("#ContractTermRenewChoicesNew").prop('disabled', false);
                    $("#ContractTermRenewNew").prop('disabled', false);
                    $("#ContractTermRenewNew").val($("#ContractTermEach" + tbrowcount).text());
                    $("#ContractTermRenewChoicesNew").val($("#ContractTermChoicesEach" + tbrowcount).text());
                    $("#txtRenewEndDate").prop('disabled', true);
                    $("#txtRenewEndDate").removeClass('form-contro-Date');
                    $("#txtRenewEndDate").addClass('form-contro-NoDate');


                    $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('checked', true);
                    calculateenddateRenew('txtRenewStartDate', 'ContractTermRenewChoicesNew', 'ContractTermRenewNew', 'txtRenewEndDate');
                }

                $("#txtRenewStatus").html(($("#TermStatus" + tbrowcount).html() == "" ? "" : $("#TermStatus" + tbrowcount).html()));
                $("#txtRenewStatus .edithide").hide();
                if ($("#TermStatus" + tbrowcount).text() == "Current" || $("#TermStatus" + tbrowcount).text() == "Ended" || $("#TermStatus" + tbrowcount).text() == "Expired") {
                    $("#ContractTermRenewChoicesNew").prop('disabled', true);
                    $("#ContractTermRenewNew").prop('disabled', true);
                    $("#ContractTermRenewNew").val($("#ContractTermEach" + tbrowcount).text());
                    $("#ContractTermRenewChoicesNew").val($("#ContractTermChoicesEach" + tbrowcount).text());
                    $("#txtRenewEndDate").prop('disabled', true);
                    $("#txtRenewEndDate").removeClass('form-contro-Date');
                    $("#txtRenewEndDate").addClass('form-contro-NoDate');
                    $("#txtRenewStartDate").prop('disabled', true);
                    $("#txtRenewStartDate").removeClass('form-contro-Date');
                    $("#txtRenewStartDate").addClass('form-contro-NoDate');
                    $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('disabled', true);
                    $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('disabled', true);
                    if ($("#TermStatus" + tbrowcount).text() == "Current") {
                        $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('checked', true);
                        $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('disabled', false);
                        $("#txtRenewEndDate").prop('disabled', false);
                        $("#txtRenewEndDate").addClass('form-contro-Date');
                        $("#txtRenewEndDate").removeClass('form-contro-NoDate');
                        var today = new Date();
                        if (today != null)
                            today = new Date(today.setDate(today.getDate() + 1));
                        $("#txtRenewEndDate").datepicker("option", "minDate", today);
                    }
                } else {
                    $("#txtRenewStartDate").prop('disabled', false);
                    $("#txtRenewStartDate").addClass('form-contro-Date');
                    $("#txtRenewStartDate").removeClass('form-contro-NoDate');
                    $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('disabled', false);
                    $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('disabled', false);
                }
                $("#txtRenewalNotesNew").val(($("#RenewalNotes" + tbrowcount).text() == "" ? "" : $("#RenewalNotes" + tbrowcount).text()));
                GetValuesAndAutoPopulate("ddlRenewalNotfInternalNew", ($("#RenewalNotificationInternal" + tbrowcount).text() == "" ? "" : $("#RenewalNotificationInternal" + tbrowcount).text()));
                //GetValuesAndAutoPopulate("ddlAuthorizedBy", ($("#RenewalConfirmParticipants" + tbrowcount).text() == "" ? "-" : $("#RenewalConfirmParticipants" + tbrowcount).text()));
                //GetValuesAndAutoPopulate("ddlRenewedBy", ($("#RenewedBy" + tbrowcount).text() == "" ? "-" : $("#RenewedBy" + tbrowcount).text()));
                $("#txtAuthorizRequired").val(($("#RequiresAuth" + tbrowcount).text() == "" ? "No" : $("#RequiresAuth" + tbrowcount).text()));
                var CheckList = ($("#RenewalChecklist" + tbrowcount).text() == "" ? "-" : $("#RenewalChecklist" + tbrowcount).text());
                if (CheckList != "" && CheckList != null && typeof (CheckList) != "undefined") {
                    var splitchecklt = CheckList.split(';');
                    $(splitchecklt).each(function (i, item) {
                        var valcheck = item.trim();
                        if (valcheck != "") {
                            $(':input[type=checkbox][value="' + valcheck + '"]').prop('checked', true);
                        }
                    });
                }
                RenewalItemEdit = term;
                RenewalAddFlag = false;
                $("#tdNameofTerms").html(term);
                isRenewTermClick = false;
                $("#btnAddNewTerm").html('<span class="pop_up_Content_Green">Ok</span>');
                $("#RenewalTermNew").dialog("option", "title", "Edit " + term);
                $("#RenewalTermNew").dialog("open");

                break;
            }
    }
}

function calculateenddateRenew(from, choice, number, to) {
    var todaydate = new Date();
    var startdate = $("#" + from).datepicker('getDate');
    var enddate = $("#" + to).datepicker('getDate');
    var todaydateM = "";
    var startdateM = "";
    var enddateM = "";
    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
        todaydateM = moment(new Date(todaydate)).format('MM/DD/YYYY');
        startdateM = moment(new Date(startdate)).format('MM/DD/YYYY');
        enddateM = moment(new Date(enddate)).format('MM/DD/YYYY');

    } else {
        todaydateM = moment(new Date(todaydate)).format(localStorage.AppDateFormat);
        startdateM = moment(new Date(startdate)).format(localStorage.AppDateFormat);
        enddateM = moment(new Date(enddate)).format(localStorage.AppDateFormat);
    }


    var valcheckauth = $(':input[type=radio][name=TermsSingleMultiple]:checked').val();
    if (valcheckauth == "Yes") {
        if ($('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').is(':checked')) {
            if ($("#" + number).val() == "1" && $("#" + choice).val() == "days") {
                swal("", "Term duration cannot be one day.");
                $("#" + number).val("2")
            } else if (/^0*$/.test($("#" + number).val())) {
                swal("", "Term duration cannot be less than two days.");
                $("#" + number).val("2")
            }
            if ($("#" + choice).find('option:selected').val() == "months" && ($("#" + number).val() != "0" && $("#" + choice).val() != "" && $("#" + number).val() % 12 == 0)) {
                $("#" + choice).val('years');
                $("#" + number).val($("#" + number).val() / 12);
            }
            if ($("#" + from).val() != "" && $("#" + number).val() != "") {

                var ftxtContractTermStartDate = '';
                if ($("#" + from).val() != "" && $("#" + from).val() != null) {
                    ftxtContractTermStartDate = $.datepicker.formatDate("mm/dd/yy", $("#" + from).datepicker('getDate'));
                    if ($("#" + from).datepicker('getDate') == null) {
                        ftxtContractTermStartDate = $("#" + from).val();
                        startdate = new Date($("#" + from).val());
                    }
                }
                var fnextDate = "";
                var dtNextdate;
                var strNextDateUTC = "";
                var nextDate = moment(new Date(ftxtContractTermStartDate)).utcOffset(getTimeZone()).add($("#" + number).val(), $("#" + choice).find('option:selected').val()).utc();

                //var nextDate = moment(ftxtContractTermStartDate).add($("#" + choice).find('option:selected').val(), $("#" + number).val());
                strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
                dtNextdate = new Date(strNextDateUTC);
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    if (getTimeZone().indexOf('+') > -1)
                        fnextDate = moment(nextDate).utc().format('MM/DD/YYYY');
                    else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                        fnextDate = moment(nextDate).utc().subtract(1, "days").format('MM/DD/YYYY');
                } else {
                    if (getTimeZone().indexOf('+') > -1)
                        fnextDate = moment(nextDate).utc().format(localStorage.AppDateFormat);
                    else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                        fnextDate = moment(nextDate).utc().subtract(1, "days").format(localStorage.AppDateFormat);
                }
                if (fnextDate != "Invalid Date") {
                    //maxAllowedDate = $("#" + to).val();
                    //var maxdate = $("#" + to).datepicker("option", "maxDate");
                    //if (maxdate != null) {
                    //    if (fnextDate < new Date(maxAllowedDate)) {
                    //        $("#" + to).val(fnextDate);
                    //        enddate = new Date(nextDate);
                    //    }
                    //    else {
                    //        swal("", "Terms choosen has end date beyond the maximum allowed date for this term.");
                    //        EnableContractRenewTermEndDate();

                    //        $("#" + to).val(maxAllowedDate);
                    //    }
                    //}
                    //else {
                    if (EndDateCheckRenewal != "") {
                        if (EndDateCheckRenewal < new Date(fnextDate)) {
                            //swal("", "Terms choosen has End date beyond the maximum allowed date for this term.");
                            swal("", "Term chosen has the End date that has the maximum allowed date for this term.");
                            var orig = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                orig = moment(new Date(fnextDate)).format('MM/DD/YYYY');
                            } else {
                                orig = moment(new Date(fnextDate)).format(localStorage.AppDateFormat);
                            }
                            $("#" + to).val(orig);
                            enddate = new Date(EndDateCheckRenewal);
                            $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('checked', true);

                            EnableContractTermRenewEndChoice(true, false);
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                enddateM = moment(new Date(enddate)).format('MM/DD/YYYY');
                            } else {
                                enddateM = moment(new Date(enddate)).format(localStorage.AppDateFormat);
                            }
                        } else {
                            $("#" + to).val(fnextDate);
                            enddate = new Date(dtNextdate);
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                enddateM = moment(new Date(enddate)).format('MM/DD/YYYY');
                            } else {
                                enddateM = moment(new Date(enddate)).format(localStorage.AppDateFormat);
                            }
                        }
                    } else {
                        $("#" + to).val(fnextDate);
                        enddate = new Date(dtNextdate);
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            enddateM = moment(new Date(enddate)).format('MM/DD/YYYY');
                        } else {
                            enddateM = moment(new Date(enddate)).format(localStorage.AppDateFormat);
                        }

                    }
                    //}
                } else
                    $("#" + to).val('');

            }
        }
    } else {
        if ($("#" + number).val() == "1" && $("#" + choice).val() == "days") {
            swal("", "Term duration cannot be one day.");
            $("#" + number).val("2")
        } else if (/^0*$/.test($("#" + number).val()) || $("#" + number).val() == '') {
            swal("", "Term duration cannot be less than two days.");
            $("#" + number).val("2")
        }
        if ($("#" + choice).find('option:selected').val() == "months" && ($("#" + number).val() != "0" && $("#" + choice).val() != "" && $("#" + number).val() % 12 == 0)) {
            $("#" + choice).val('years');
            $("#" + number).val($("#" + number).val() / 12);
        }
        if ($("#" + from).val() != "" && $("#" + number).val() != "") {

            var ftxtContractTermStartDate = '';
            if ($("#" + from).val() != "" && $("#" + from).val() != null) {
                ftxtContractTermStartDate = $.datepicker.formatDate("mm/dd/yy", $("#" + from).datepicker('getDate'));
                if ($("#" + from).datepicker('getDate') == null) {
                    ftxtContractTermStartDate = $("#" + from).val();
                    startdate = new Date($("#" + from).val());
                }
            }
            var fnextDate = "";
            var dtNextdate;
            var strNextDateUTC = "";
            var nextDate = moment(new Date(ftxtContractTermStartDate)).utcOffset(getTimeZone()).add($("#" + number).val(), $("#" + choice).find('option:selected').val()).utc();

            //var nextDate = moment(ftxtContractTermStartDate).add($("#" + choice).find('option:selected').val(), $("#" + number).val());
            strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
            dtNextdate = new Date(strNextDateUTC);
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                if (getTimeZone().indexOf('+') > -1)
                    fnextDate = moment(nextDate).utc().format('MM/DD/YYYY');
                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                    fnextDate = moment(nextDate).utc().subtract(1, "days").format('MM/DD/YYYY');
            } else {
                if (getTimeZone().indexOf('+') > -1)
                    fnextDate = moment(nextDate).utc().format(localStorage.AppDateFormat);
                else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                    fnextDate = moment(nextDate).utc().subtract(1, "days").format(localStorage.AppDateFormat);
            }
            if (fnextDate != "Invalid Date") {
                //maxAllowedDate = $("#" + to).val();
                //var maxdate = $("#" + to).datepicker("option", "maxDate");
                //if (maxdate != null) {
                //    if (fnextDate < new Date(maxAllowedDate)) {
                //        $("#" + to).val(fnextDate);
                //        enddate = new Date(nextDate);
                //    }
                //    else {
                //        swal("", "Terms choosen has end date beyond the maximum allowed date for this term.");
                //        EnableContractRenewTermEndDate();

                //        $("#" + to).val(maxAllowedDate);
                //    }
                //}
                //else {
                if (EndDateCheckRenewal != "") {
                    var fNextDateNew = moment(new Date(fnextDate)).format('DD/MM/YYYY');
                    if (EndDateCheckRenewal < new Date(fNextDateNew)) {
                        //swal("", "Terms choosen has End date beyond the maximum allowed date for this term.");
                        swal("", "Term chosen has the End date that has the maximum allowed date for this term.");
                        var orig = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            orig = moment(new Date(fnextDate)).format('MM/DD/YYYY');
                        } else {
                            orig = moment(new Date(fnextDate)).format(localStorage.AppDateFormat);
                        }
                        $("#" + to).val(orig);
                        enddate = new Date(EndDateCheckRenewal);
                        $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('checked', true);

                        EnableContractTermRenewEndChoice(true, false);

                    } else {
                        $("#" + to).val(fnextDate);
                        enddate = new Date(dtNextdate);

                    }
                } else {
                    $("#" + to).val(fnextDate);
                    enddate = new Date(dtNextdate);

                }
                //}
            } else
                $("#" + to).val('');

        }

    }
    //$("#txtContractTermStartRenewNext").val($("#txtContractTermEndDateRenew").val());
    //if (CurrentTermDetails == "" && $("#CurrentTermName").val() == "Initial Term") {
    //    $("#CurrentRenewalTermStart").text($("#txtContractTermStartDateRenew").val());
    //    $("#CurrentRenewalTermEnd").text($("#txtContractTermEndDateRenew").val());
    //}

    var statTerm = 'Not Started';
    if ((startdate < todaydate || startdateM == todaydateM) && (todaydateM == enddateM || todaydate < enddate))
        $("#txtRenewStatus").find('b').length > 0 ? $("#txtRenewStatus b").text("Current") : $("#txtRenewStatus").text("Current");
    else if (startdate > todaydate || startdate == null)
        $("#txtRenewStatus").find('b').length > 0 ? $("#txtRenewStatus b").text("Not Started") : $("#txtRenewStatus").text("Not Started");
    else if (todaydate > enddate && todaydateM != enddateM)
        $("#txtRenewStatus").find('b').length > 0 ? $("#txtRenewStatus b").text("Ended") : $("#txtRenewStatus").text("Ended");
    //if(EditSaveFlag)
    //{
    //    var str='';
    //    if (statTerm == "Current")
    //        str = '<b title="Current" class="status_green" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '<img src="../Content/Images/down_arrow.png" style="width: 8px;margin-top: 4px !important;"  alt="Open Menu" title="Open Menu" class="openmenuRenewalExp edithide margin-left-5"></b>';
    //    else if (statTerm == "Ended")
    //        str = '<b title="Ended" class="status_Gray" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '</b>';
    //    else if (statTerm == "Not Started")
    //        str = '<b title="Not Started" class="status_blue" style="padding: 5px 0px; color:#fff;display: inline-block;width: 88px;vertical-align: middle;text-align: center;height: 15px;">' + statTerm + '</b>';
    //    else 
    //        str = '<b>' + statTerm + '</b>';

    //    $("#txtRenewStatus").html(str);
    //    $(".openmenuRenewalExp").contextMenu({
    //        menu: 'menuRenewalExp', leftButton: true
    //    }, function (action, el, pos) {
    //        contextMenuRenewal(action, el.parent("b").parent("td").parent("tr"), pos);
    //    });
    //}
}

function EnableContractTermRenewEndChoice(IsEnableday, isMultiple) {
    $("#ContractTermRenewChoicesNew").prop('disabled', false);
    $("#ContractTermRenewNew").prop('disabled', false);
    $("#txtContractTermRenewSetMulti").prop('disabled', false);
    $("#ddlTermPeriodSetMulti").prop('disabled', false);

    if (IsEnableday) {
        $("#ContractTermRenewNew").val('2');
        $("#ContractTermRenewChoicesNew").val('days');
        $("#txtContractTermRenewSetMulti").val('2');
        if (!isMultiple)
            $("#ddlTermPeriodSetMulti").val('days');

    } else {
        $("#ContractTermRenewNew").val('1');
        $("#ContractTermRenewChoicesNew").val('years');
        if (!isMultiple) {
            $("#txtContractTermRenewSetMulti").val('1');
            $("#ddlTermPeriodSetMulti").val('years');
        }
    }
    //  if ($('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').is(':checked'))
    if (!isMultiple)
        calculateenddateRenew('txtRenewStartDate', 'ContractTermRenewChoicesNew', 'ContractTermRenewNew', 'txtRenewEndDate')
    else
        calculateenddateRenew('txtRenewStartDate', 'ddlTermPeriodSetMulti', 'txtContractTermRenewSetMulti', 'txtRenewEndDate')



    $("#txtRenewEndDate").prop('disabled', true);
    $("#txtRenewEndDate").removeClass('form-contro-Date');
    $("#txtRenewEndDate").addClass('form-contro-NoDate');
}

$("#ddlTermType").change(function (obj) {
    //location = "/Contracts/CreateContract?ContractType=" + $("#ddlContractTypes option:selected").text() + "&LibID=" + LibID + "&DocID=" + DocID;
    var vTermType = $("#ddlTermType option:selected").val();
    TermTypeChange(vTermType);
});

function calculateenddateRenewSub(from, choice, number, to) {
    var todaydate = new Date();
    var startdate = new Date($("#" + from).val());



    if ($("#" + choice).find('option:selected').val() == "months" && ($("#" + number).val() != "0" && $("#" + choice).val() != "" && $("#" + number).val() % 12 == 0)) {
        $("#" + choice).val('years');
        $("#" + number).val($("#" + number).val() / 12);
    }
    if ($("#" + from).val() != "" && $("#" + number).val() != "") {

        var ftxtContractTermStartDate = '';
        if ($("#" + from).val() != "" && $("#" + from).val() != null) {
            ftxtContractTermStartDate = $.datepicker.formatDate("mm/dd/yy", $("#" + from).datepicker('getDate'));
            if ($("#" + from).datepicker('getDate') == null) {
                ftxtContractTermStartDate = $("#" + from).val();
                startdate = new Date($("#" + from).val());
            }
        }
        var fnextDate = "";
        var dtNextdate;
        var strNextDateUTC = "";

        var nextDate = moment(new Date(ftxtContractTermStartDate)).utcOffset(getTimeZone()); //.subtract($("#" + choice).find('option:selected').val(), $("#" + number).val()).utc();
        strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
        dtNextdate = new Date(strNextDateUTC);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            if (getTimeZone().indexOf('+') > -1)
                fnextDate = moment(nextDate).subtract($("#" + number).val(), $("#" + choice).find('option:selected').val()).format('MM/DD/YYYY');
            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1)
                fnextDate = moment(nextDate).subtract($("#" + number).val(), $("#" + choice).find('option:selected').val()).utc().format('MM/DD/YYYY');
        } else {
            if (getTimeZone().indexOf('+') > -1)
                fnextDate = moment(nextDate).subtract($("#" + number).val(), $("#" + choice).find('option:selected').val()).format(localStorage.AppDateFormat);
            else if (getTimeZone().indexOf('+00:00') > -1 || getTimeZone().indexOf('-') > -1) {
                fnextDate = moment(nextDate).subtract($("#" + number).val(), $("#" + choice).find('option:selected').val()).utc().format(localStorage.AppDateFormat);
                //fnextDate = moment(fnextDate).subtract(1, "days").format(localStorage.AppDateFormat);
            }
        }
        if (fnextDate != "Invalid Date") {
            $("#" + to).text("(" + fnextDate + ")");
        } else
            $("#" + to).text('');
    } else
        $("#" + to).text('');
}

function toggledivsingle(object, imgObject) {
    $("#" + object).slideToggle();

    var imgObj = $("#" + imgObject);

    if (imgObj.attr("title") == "Collapse") {
        imgObj.attr("title", "Expand");
        imgObj.attr("src", "../Content/Images/e-open.png");
    } else {
        imgObj.attr("title", "Collapse");
        imgObj.attr("src", "../Content/Images/e-close.png");
    }
}

$('#btnContractTermSave').click(function () {
    if ($("#ddlTermType").val() == "Renewable") {
        RenewalTermSave();
    } else {
        var constatus = contrcatItem.Status;
        var msg = "";
        var strStartDate = "";
        var strEndDate = "";
        var Sdate = new Date(contrcatItem.StartDate);
        if (contrcatItem.StartDate != null)
            strStartDate = moment(new Date(contrcatItem.StartDate)).format('MM/DD/YYYY');
        if (contrcatItem.EndDate != null)
            strEndDate = moment(new Date(contrcatItem.EndDate)).format('MM/DD/YYYY');
        var ftxtContractTermStartDate = '';
        if ($("#txtContractTermStartDate").val() != "" && $("#txtContractTermStartDate").val() != null) {
            ftxtContractTermStartDate = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermStartDate").datepicker('getDate'));
        }
        var fContractTermEndDate = '';
        if ($("#txtContractTermEndDate").val() != "" && $("#txtContractTermEndDate").val() != null) {
            fContractTermEndDate = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermEndDate").datepicker('getDate'));
        }
        if (constatus == "Active" && strStartDate != ftxtContractTermStartDate) {
            msg = "Start Date";
        } else if (constatus == "Expired" || constatus == "Cancelled") {
            if (strStartDate != ftxtContractTermStartDate) {
                msg = "Start Date";
            }
            if (strEndDate != fContractTermEndDate) {
                if (msg != "") {
                    msg += " and End Date";
                } else {
                    msg = "End Date";
                }
            }
        }
        if (msg != "") {
            swal({
                title: '',
                text: "Contract is " + constatus + " are you sure you want to <span style=\"font-weight:700\">update the </span>" + msg + " ?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                html: true,
                closeOnConfirm: false,
                closeOnCancel: true
                //

            },
                function (confirmed) {
                    if (confirmed) {
                        ContractTermSave();

                    }
                    // return;
                });
        } else {
            ContractTermSave();
        }
    }

});

function RenewalTermSave() {
    if (requiredValidator('dvContractTerm', false)) {
        //manoj
        var allowtoadd = false;
        var renewalstartdate;
        var comparedate;
        if ($("#renewalViewHistoryTerm tr").length > 0) {
            var startdateParts = $("#RenewedDate1").text().split('/');
            comparedateParts = $("#txtRenewConfirmSendDate").text().trim();
            comparedateParts = (comparedateParts.charAt(0) == "(") ? comparedateParts.substr(1) : comparedateParts;
            comparedateParts = (comparedateParts.slice(-1) == ")") ? comparedateParts.slice(0, -1) : comparedateParts;
            var arrcomparedateParts = comparedateParts.split('/');
            if (DatepickerFormat == "dd/mm/yy") {
                renewalstartdate = new Date($.datepicker.formatDate('mm/dd/yy', new Date(startdateParts[2], startdateParts[0] - 1, startdateParts[1])));
                comparedate = new Date($.datepicker.formatDate('mm/dd/yy', new Date(arrcomparedateParts[2], arrcomparedateParts[1] - 1, arrcomparedateParts[0])));
            } else {
                renewalstartdate = new Date($.datepicker.formatDate('mm/dd/yy', new Date(startdateParts[2], startdateParts[0] - 1, startdateParts[1])));
                comparedate = new Date($.datepicker.formatDate('mm/dd/yy', new Date(arrcomparedateParts[2], arrcomparedateParts[0] - 1, arrcomparedateParts[1])));
            }
            if (renewalstartdate < comparedate) {
                allowtoadd = true;
            } else { //Added from 2.4final to 2.4
                if ($(':input[type="radio"][name=RenewalAuth]:checked').val() == "Yes") {
                    if (comparedate == "Invalid Date") {
                        swal("", "Please select a \"Current Term\" to receive Authorization alerts.");
                        allowtoadd = false
                    } else {
                        swal("", "Renewal authorization alert date should be greater than current term Start date.");
                        allowtoadd = false
                    }
                } else
                    allowtoadd = true;
            }
        } else {
            allowtoadd = true;
        }

        //manoj
        if (allowtoadd) {
            var errmsg = '';
            var vCurrentTermName = $("#hdCurrentTermName").val();
            var vCurrentTermEndDate = '';
            var dateEndTerm;

            var vCounterpartyNoticesCancel = "";
            var vCounterpartyNoticesRenewal = "";
            var vCounterpartyNoticesRenewalDate = null;
            var vCounterpartyNoticesCancelDate = null;

            var vContractConfirmSendTerm = "";
            var vContractConfirmSendDate = null;


            var fConfirmSendDate = null;

            if ($("#hdCurrentRenewalTermEnd").val() != "" && $("#hdCurrentRenewalTermEnd").val() != null) {
                vCurrentTermEndDate = $.datepicker.formatDate('mm/dd/yy', new Date($("#hdCurrentRenewalTermEnd").val()));

            }
            vCounterpartyNoticesCancel = $("#txtSendRenewReminderDayCancelCounter").val();
            vContractConfirmSendTerm = $("#txtSendRenewReminderDayRenewalConfirm").val();
            vCounterpartyNoticesRenewal = $("#txtSendRenewReminderDayRenewalCounter").val();
            if (vCurrentTermEndDate != '' && typeof (vCurrentTermEndDate) != "undefined") {

                if (vContractConfirmSendTerm != null && vContractConfirmSendTerm != "" && typeof (vContractConfirmSendTerm) != "undefined") {
                    var nextDate = moment(new Date()).add(vContractConfirmSendTerm, "days");
                    var strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
                    var dtNextdate = new Date(strNextDateUTC);
                    var dtcurrentdate = new Date(vCurrentTermEndDate);
                    if ($("#txtSendRenewReminderDayRenewalConfirm").prop('disabled') == true) {
                        fConfirmSendDate = $.datepicker.formatDate('mm/dd/yy', new Date(strNextDateUTC));
                        vContractConfirmSendDate = fConfirmSendDate;
                    } else {
                        if (dtNextdate != "invalid" && dtcurrentdate != "invalid" && dtNextdate >= dtcurrentdate) {
                            errmsg = "The authorization email alerts days is greater than the possible days allowed from today before current term ends.";
                        } else {
                            fConfirmSendDate = $.datepicker.formatDate('mm/dd/yy', new Date(strNextDateUTC));
                            vContractConfirmSendDate = fConfirmSendDate;
                        }
                    }
                }


                if (vCounterpartyNoticesRenewal != null && vCounterpartyNoticesRenewal != "" && typeof (vCounterpartyNoticesRenewal) != "undefined") {
                    var nextDate = moment(new Date()).add(vCounterpartyNoticesRenewal, "days");
                    var strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
                    var dtNextdate = new Date(strNextDateUTC);
                    var dtcurrentdate = new Date(vCurrentTermEndDate);
                    if (dtNextdate != "invalid" && dtcurrentdate != "invalid" && dtNextdate >= dtcurrentdate) {
                        errmsg = "The Renewal Notice days is greater than the possible days allowed from today before current term ends.";
                    } else {
                        vCounterpartyNoticesRenewalDate = $.datepicker.formatDate('mm/dd/yy', new Date(strNextDateUTC));
                    }
                }


                if (vCounterpartyNoticesCancel != null && vCounterpartyNoticesCancel != "" && typeof (vCounterpartyNoticesCancel) != "undefined") {
                    var nextDate = moment(new Date()).add(vCounterpartyNoticesCancel, "days");
                    var strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
                    var dtNextdate = new Date(strNextDateUTC);
                    var dtcurrentdate = new Date(vCurrentTermEndDate);
                    if (dtNextdate != "invalid" && dtcurrentdate != "invalid" && dtNextdate >= dtcurrentdate) {
                        errmsg = "The Cancellation Notice days is greater than the possible days allowed from today before current term ends.";
                    } else {
                        vCounterpartyNoticesCancelDate = $.datepicker.formatDate('mm/dd/yy', new Date(strNextDateUTC));
                    }
                }


            }
            var vAutoRenew = $(':input[type="radio"][name=RenewalConfirmAuto]:checked').val();
            if (vAutoRenew == "Yes") {
                if ($("#txtContractTermRenewSet").val() == "0")
                    errmsg = "Renewal Term cannot be 0.";
            }

            if (errmsg != '') {
                //  alert(errmsg);

                swal("", errmsg);
            } else {

                $("#loadingPage").fadeIn();
                if (vContractID == '') {
                    vContractID = $("#hdContractID").val();
                }
                var vContractTermType = $("#ddlTermType option:selected").val();
                var vContractTermNotes = $("#TermNotes").val();
                var vRenewalTerms = [];
                $("#renewalViewHistoryTerm tr").each(function (i, item) {
                    var elid = item.id;
                    if ($(item).hasClass('termExpired')) {
                        var totalFileCount = elid.replace("ExpRenewalViewHistoryTerm", "");
                        var vRenewableTermName = $('#ExpRenewableTermName' + totalFileCount).text();
                        var vRenewedDate = $('#ExpRenewedDate' + totalFileCount).text();
                        var vNextRenewalDate = ($('#ExpRenewedDate' + (parseInt(totalFileCount) + 1)) != null && typeof ($('#ExpRenewedDate' + (parseInt(totalFileCount) + 1))) != "undefined") ? $('#ExpRenewedDate' + (parseInt(totalFileCount) + 1)).text() : "";
                        var vTermEndDate = $('#ExpTermEndDate' + totalFileCount).text();
                        var vTermStatus = $('#ExpTermStatus' + totalFileCount).text();
                        var vRenewalType = $('#ExpRenewalType' + totalFileCount).text();
                        var vStatus = $('#ExpStatus' + totalFileCount).text();
                        var vRenewalNotes = $('#ExpRenewalNotes' + totalFileCount).text();
                        var vRenewalConfirmParticipants = $('#ExpRenewalConfirmParticipants' + totalFileCount).text();
                        var vRenewedBy = $('#ExpRenewedBy' + totalFileCount).text();
                        var vRenewedOn = $('#ExpRenewedOn' + totalFileCount).text();
                        var vRenewalChecklist = $('#ExpRenewalChecklist' + totalFileCount).text();
                        var vRenewalNotificationInternal = $('#ExpRenewalNotificationInternal' + totalFileCount).text();
                        var vContractTermEach = $('#ExpContractTermEach' + totalFileCount).text();
                        var vContractTermChoicesEach = $('#ExpContractTermChoicesEach' + totalFileCount).text();
                        var vCreated = $('#ExpCreated' + totalFileCount).text();
                        var vCreatedBy = $('#ExpCreatedBy' + totalFileCount).text();
                        var vModified = $('#ExpModified' + totalFileCount).text();
                        var vModifiedBy = $('#ExpModifiedBy' + totalFileCount).text();
                        var vRenewalCommentXML = encodeURIComponent($('#ExpRenewalCommentsXML' + totalFileCount).html());
                        vRenewalTerms.push({
                            "ContractID": vContractID,
                            "RenewableTermName": vRenewableTermName,
                            "RenewedFor": vRenewedDate + "-" + vTermEndDate,
                            "RenewedBy": vRenewedBy,
                            "RenewedOn": vRenewedOn != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vRenewedOn)) : null,
                            "RenewedDate": vRenewedDate != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vRenewedDate)) : null,
                            "NextRenewalDate": vNextRenewalDate != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vNextRenewalDate)) : null,
                            "TermEndDate": vTermEndDate != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vTermEndDate)) : null,
                            "Status": vStatus,
                            "TermStatus": vTermStatus,
                            "Created": vCreated != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vCreated)) : $.datepicker.formatDate('mm/dd/yy', new Date()),
                            "CreatedBy": vCreatedBy,
                            "Modified": vModified != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vModified)) : null,
                            "ModifiedBy": vModifiedBy,
                            "RenewalType": vRenewalType,
                            "RenewalNotes": vRenewalNotes,
                            "RenewalChecklist": vRenewalChecklist,
                            "RenewalNotificationInternal": vRenewalNotificationInternal,
                            "ContractTermEach": vContractTermEach,
                            "ContractTermChoicesEach": vContractTermChoicesEach,
                            "RenewalConfirmOverall": contractItem.RenewalConfirmOverall,
                            "RenewalConfirmParticipantsXML": contractItem.RenewalConfirmParticipantsXML,
                            "RenewalCommentsXML": vRenewalCommentXML
                        });
                    } else {
                        var totalFileCount = elid.replace("renewalViewHistoryTerm", "");
                        var vRenewableTermName = $('#RenewableTermName' + totalFileCount).text();
                        var vRenewedDate = $('#RenewedDate' + totalFileCount).text();
                        var vNextRenewalDate = ($('#RenewedDate' + (parseInt(totalFileCount) + 1)) != null && typeof ($('#RenewedDate' + (parseInt(totalFileCount) + 1))) != "undefined") ? $('#RenewedDate' + (parseInt(totalFileCount) + 1)).text() : "";
                        var vTermEndDate = $('#TermEndDate' + totalFileCount).text();
                        var vTermStatus = $('#TermStatus' + totalFileCount).text();
                        var vRenewalType = $('#RenewalType' + totalFileCount).text();
                        var vStatus = $('#Status' + totalFileCount).text();
                        var vRenewalNotes = $('#RenewalNotes' + totalFileCount).text();
                        var vRenewalConfirmParticipants = $('#RenewalConfirmParticipants' + totalFileCount).text();
                        var vRenewedBy = $('#RenewedBy' + totalFileCount).text();
                        var vRenewedOn = $('#RenewedOn' + totalFileCount).text();
                        var vRenewalChecklist = $('#RenewalChecklist' + totalFileCount).text();
                        var vRenewalNotificationInternal = $('#RenewalNotificationInternal' + totalFileCount).text();
                        var vContractTermEach = $('#ContractTermEach' + totalFileCount).text();
                        var vContractTermChoicesEach = $('#ContractTermChoicesEach' + totalFileCount).text();
                        var vCreated = $('#Created' + totalFileCount).text();
                        var vCreatedBy = $('#CreatedBy' + totalFileCount).text();
                        var vModified = $('#Modified' + totalFileCount).text();
                        var vModifiedBy = $('#ModifiedBy' + totalFileCount).text();
                        var vRenewalCommentXML = encodeURIComponent($('#RenewalCommentsXML' + totalFileCount).html());
                        vRenewalTerms.push({
                            "ContractID": vContractID,
                            "RenewableTermName": vRenewableTermName,
                            "RenewedFor": vRenewedDate + "-" + vTermEndDate,
                            "RenewedBy": vRenewedBy,
                            "RenewedOn": vRenewedOn != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vRenewedOn)) : null,
                            "RenewedDate": vRenewedDate != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vRenewedDate)) : null,
                            "NextRenewalDate": vNextRenewalDate != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vNextRenewalDate)) : null,
                            "TermEndDate": vTermEndDate != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vTermEndDate)) : null,
                            "Status": vStatus,
                            "TermStatus": vTermStatus,
                            "Created": vCreated != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vCreated)) : $.datepicker.formatDate('mm/dd/yy', new Date()),
                            "CreatedBy": vCreatedBy,
                            "Modified": vModified != "" ? $.datepicker.formatDate('mm/dd/yy', new Date(vModified)) : null,
                            "ModifiedBy": vModifiedBy,
                            "RenewalType": vRenewalType,
                            "RenewalNotes": vRenewalNotes,
                            "RenewalChecklist": vRenewalChecklist,
                            "RenewalNotificationInternal": vRenewalNotificationInternal,
                            "ContractTermEach": vContractTermEach,
                            "ContractTermChoicesEach": vContractTermChoicesEach,
                            "RenewalConfirmOverall": contractItem.RenewalConfirmOverall,
                            "RenewalConfirmParticipantsXML": contractItem.RenewalConfirmParticipantsXML,
                            "RenewalCommentsXML": vRenewalCommentXML
                        });
                    }


                })

                var vContractAutoTerm = "";
                var vContractAutoTermChoices = "";
                var vAutoContractRenewTermCount = "";
                var vAutoContractRenewOn = null;
                if (vAutoRenew == "Yes") {
                    vContractAutoTerm = $("#txtContractTermRenewSet").val();
                    vContractAutoTermChoices = $("#ddlTermPeriodSet").val();
                    vAutoContractRenewTermCount = $("#ddlTermPeriodSetRenewal").val();
                    var fAutoContractRenewOn = null;
                    vAutoContractRenewOn = vCurrentTermEndDate;
                }
                var vRequiresAuth = $(':input[type="radio"][name=RenewalAuth]:checked').val();

                //var vRenewalConfirmParticipants = "";  //Added from 2.4final to 2.4

                var vRenewalConfirmParticipantsCC = "";
                if (vRequiresAuth == "Yes") {
                    var vSendRenewConfirmParticipants = '';
                    var SendConfirmParticipantsToArr = $("#ddlSendUserToRenewalConfirmUsers").val();
                    $(SendConfirmParticipantsToArr).each(function (i, item) {
                        if (vSendRenewConfirmParticipants == '') {
                            vSendRenewConfirmParticipants = item;
                        } else {
                            vSendRenewConfirmParticipants += "; " + item;
                        }
                    });
                    vRenewalConfirmParticipants = vSendRenewConfirmParticipants;



                    var vSendRenewConfirmParticipantsCC = '';
                    var SendConfirmParticipantsToArrCC = $("#ddlSendUserToRenewalConfirmUsersCC").val();
                    $(SendConfirmParticipantsToArrCC).each(function (i, item) {
                        if (vSendRenewConfirmParticipantsCC == '') {
                            vSendRenewConfirmParticipantsCC = item;
                        } else {
                            vSendRenewConfirmParticipantsCC += "; " + item;
                        }
                    });
                    vRenewalConfirmParticipantsCC = vSendRenewConfirmParticipantsCC;
                }
                var vCounterpartyNotices = $("#CounterpartyNotice").val();


                var vSendRenewReminderTo = "";
                var vRenewReminder1Condition = "";
                var vRenewReminder2Condition = "";
                var vRenewReminder3Condition = "";



                var vRenewReminder1 = $("#txtSendRenewReminderDay1").val() == "" ? 0 : $("#txtSendRenewReminderDay1").val();
                var vRenewReminder2 = $("#txtSendRenewReminderDay2").val() == "" ? 0 : $("#txtSendRenewReminderDay2").val();
                var vRenewReminder3 = $("#txtSendRenewReminderDay3").val() == "" ? 0 : $("#txtSendRenewReminderDay3").val();
                if (vRenewReminder1 != 0)
                    vRenewReminder1Condition = $("#ddlSendRenewReminder1").val() + '-' + $("#ddlSendRenewReminderDate1").val();
                else
                    vRenewReminder1Condition = $("#ddlSendRenewReminder1 option:first").val() + '-' + $("#ddlSendRenewReminderDate1 option:first").val();
                if (vRenewReminder2 != 0)
                    vRenewReminder2Condition = $("#ddlSendRenewReminder2").val() + '-' + $("#ddlSendRenewReminderDate2").val();
                else
                    vRenewReminder2Condition = $("#ddlSendRenewReminder2 option:first").val() + '-' + $("#ddlSendRenewReminderDate2 option:first").val();
                if (vRenewReminder3 != 0)
                    vRenewReminder3Condition = $("#ddlSendRenewReminder3").val() + '-' + $("#ddlSendRenewReminderDate3").val();
                else
                    vRenewReminder3Condition = $("#ddlSendRenewReminder3 option:first").val() + '-' + $("#ddlSendRenewReminderDate3 option:first").val();

                var SendReminderToArr = $("#ddlSendRenewReminderTo").val();
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendRenewReminderTo == '') {
                        vSendRenewReminderTo = item;
                    } else {
                        vSendRenewReminderTo += "; " + item;
                    }
                });
                vAlertEnabled = $("#AlertActive").val();
                var IsWarningShow = false;
                if ($("#ddlSendRenewReminder1").val() == "before") {
                    if (vRenewReminder1 != 0) {
                        if ($("#ddlSendRenewReminderDate1").val() == "Start / Effective Date") {
                            var start = moment(ftxtContractTermStartDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder1)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate1").val() == "Next Evaluation Date") {
                            var start = moment(fContractTermEvaluationDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder1)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate1").val() == "End Date (Overall Contract)") {
                            var start = moment(fContractTermEndDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder1)) {
                                IsWarningShow = true;
                            }
                        }

                    }
                }
                if ($("#ddlSendRenewReminder2").val() == "before") {
                    if (vRenewReminder2 != 0) {
                        if ($("#ddlSendRenewReminderDate2").val() == "Start / Effective Date") {
                            var start = moment(ftxtContractTermStartDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder2)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate2").val() == "Next Evaluation Date") {
                            var start = moment(fContractTermEvaluationDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder2)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate2").val() == "End Date (Overall Contract)") {
                            var start = moment(fContractTermEndDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder2)) {
                                IsWarningShow = true;
                            }
                        }
                    }
                }
                if ($("#ddlSendRenewReminder3").val() == "before") {
                    if (vRenewReminder3 != 0) {
                        if ($("#ddlSendRenewReminderDate3").val() == "Start / Effective Date") {
                            var start = moment(ftxtContractTermStartDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder3)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate3").val() == "Next Evaluation Date") {
                            var start = moment(fContractTermEvaluationDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder3)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate3").val() == "End Date (Overall Contract)") {
                            var start = moment(fContractTermEndDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder3)) {
                                IsWarningShow = true;
                            }
                        }
                    }
                }

                if (IsWarningShow) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/ContractRenewalTerm',
                                    type: 'PUT',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey,
                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                        username: localStorage.UserName,
                                        'RenewedManual': isRenewedManual
                                    },
                                    data: {
                                        ContractID: vContractID,
                                        ContractTermType: vContractTermType,
                                        ContractTermNotes: vContractTermNotes,
                                        AutoRenew: vAutoRenew,
                                        RenewalDate: vAutoContractRenewOn,
                                        ContractAutoTerm: vContractAutoTerm,
                                        ContractAutoTermChoices: vContractAutoTermChoices,
                                        AutoContractRenewTermCount: vAutoContractRenewTermCount,
                                        RequiresAuth: vRequiresAuth,
                                        RenewalConfirmParticipants: vRenewalConfirmParticipants,
                                        ContractConfirmSendTerm: vContractConfirmSendTerm,
                                        ContractConfirmSendDate: vContractConfirmSendDate,
                                        RenewalConfirmParticipantsCC: vRenewalConfirmParticipantsCC,
                                        CounterpartyNotices: vCounterpartyNotices,
                                        CounterpartyNoticesRenewal: vCounterpartyNoticesRenewal,
                                        CounterpartyNoticesRenewalDate: vCounterpartyNoticesRenewalDate,
                                        CounterpartyNoticesCancel: vCounterpartyNoticesCancel,
                                        CounterpartyNoticesCancelDate: vCounterpartyNoticesCancelDate,
                                        RenewalTerms: vRenewalTerms,
                                        RenewalConfirmOverall: contractItem.RenewalConfirmOverall,
                                        RenewalConfirmParticipantsXML: contractItem.RenewalConfirmParticipantsXML,
                                        SendRenewReminderTo: vSendRenewReminderTo,
                                        RenewReminder1: vRenewReminder1,
                                        RenewReminder2: vRenewReminder2,
                                        RenewReminder3: vRenewReminder3,
                                        RenewReminder1Condition: vRenewReminder1Condition,
                                        RenewReminder2Condition: vRenewReminder2Condition,
                                        RenewReminder3Condition: vRenewReminder3Condition,
                                        AlertsEnabled: vAlertEnabled
                                    },
                                    cache: false,
                                    success: function (data) {
                                        if (data != null) {
                                            var permissiontoapply = contractItem.Permission;
                                            contractItem = data;
                                            if (contractItem.Permission == null || contractItem.Permission == "") {
                                                contractItem.Permission = permissiontoapply;
                                            }
                                        }
                                        BindContractTermDetail(contractItem);
                                        //ApplyPermissionToAuthorizers(contractItem, vRenewalConfirmParticipants); //Added 2.4final to 2.4
                                        $("#loadingPage").fadeOut();
                                        $("#dvContractTerm").dialog("close");
                                        try {
                                            BindSystemMilestones(contractItem)
                                        } catch (ex) {

                                        }
                                        GetRenewalChecklistAndNotes(vContractID, 0);
                                    },
                                    error: function (data) {
                                        $("#loadingPage").fadeOut();
                                    },
                                    complete: function () {
                                        $("#loadingPage").fadeOut();
                                        isRenewedManual = "No";
                                    }
                                });

                            } else {
                                $("#loadingPage").fadeOut();
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                            }
                            return;
                        });
                } else {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/ContractRenewalTerm',
                        type: 'PUT',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName,
                            'RenewedManual': isRenewedManual
                        },
                        data: {
                            ContractID: vContractID,
                            ContractTermType: vContractTermType,
                            ContractTermNotes: vContractTermNotes,
                            AutoRenew: vAutoRenew,
                            RenewalDate: vAutoContractRenewOn,
                            ContractAutoTerm: vContractAutoTerm,
                            ContractAutoTermChoices: vContractAutoTermChoices,
                            AutoContractRenewTermCount: vAutoContractRenewTermCount,
                            RequiresAuth: vRequiresAuth,
                            RenewalConfirmParticipants: vRenewalConfirmParticipants,
                            ContractConfirmSendTerm: vContractConfirmSendTerm,
                            ContractConfirmSendDate: vContractConfirmSendDate,
                            RenewalConfirmParticipantsCC: vRenewalConfirmParticipantsCC,
                            CounterpartyNotices: vCounterpartyNotices,
                            CounterpartyNoticesRenewal: vCounterpartyNoticesRenewal,
                            CounterpartyNoticesRenewalDate: vCounterpartyNoticesRenewalDate,
                            CounterpartyNoticesCancel: vCounterpartyNoticesCancel,
                            CounterpartyNoticesCancelDate: vCounterpartyNoticesCancelDate,
                            RenewalTerms: vRenewalTerms,
                            RenewalConfirmOverall: contractItem.RenewalConfirmOverall,
                            RenewalConfirmParticipantsXML: contractItem.RenewalConfirmParticipantsXML,
                            SendRenewReminderTo: vSendRenewReminderTo,
                            RenewReminder1: vRenewReminder1,
                            RenewReminder2: vRenewReminder2,
                            RenewReminder3: vRenewReminder3,
                            RenewReminder1Condition: vRenewReminder1Condition,
                            RenewReminder2Condition: vRenewReminder2Condition,
                            RenewReminder3Condition: vRenewReminder3Condition,
                            AlertsEnabled: vAlertEnabled
                        },
                        cache: false,
                        success: function (data) {
                            if (data != null) {
                                var permissiontoapply = contractItem.Permission;
                                contractItem = data;
                                if (contractItem.Permission == null || contractItem.Permission == "") {
                                    contractItem.Permission = permissiontoapply;
                                }
                            }
                            BindContractTermDetail(contractItem);
                            //ApplyPermissionToAuthorizers(contractItem, vRenewalConfirmParticipants);   //Added 2.4final to 2.4
                            $("#loadingPage").fadeOut();
                            $("#dvContractTerm").dialog("close");
                            try {
                                BindSystemMilestones(contractItem)
                            } catch (ex) {

                            }
                            GetRenewalChecklistAndNotes(vContractID, 0);
                        },
                        error: function (data) {
                            $("#loadingPage").fadeOut();
                        },
                        complete: function () {
                            $("#loadingPage").fadeOut();
                            isRenewedManual = "No";
                        }
                    });
                }
            }
        } else {
            if (comparedate == "Invalid Date") {
                swal("", "Please select a \"Current Term\" to receive Authorization alerts.");
            } else
                swal("", "Renewal authorization alert date should be greater than current term Start date.");
        }
    }
}

function ContractTermSave() {
    if ($("#txtTermTimes").val() == 0) {
        $("#txtTermTimes").val('');
    }
    if (requiredValidator('dvContractTerm', false)) {
        var vCurrentTermEndDate = '';
        if ($("#txtTermTimes").val() == "0") {
            $('#txtTermTimes').addClass('error');
        } else {
            $('#txtTermTimes').removeClass('error');
            var ftxtContractTermStartDate = '';
            if ($("#txtContractTermStartDate").val() != "" && $("#txtContractTermStartDate").val() != null) {
                ftxtContractTermStartDate = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermStartDate").datepicker('getDate'));
            }
            var fContractTermEvaluationDate = '';
            if ($("#txtContractTermEvaluationDate").val() != "" && $("#txtContractTermEvaluationDate").val() != null) {
                fContractTermEvaluationDate = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermEvaluationDate").datepicker('getDate'));
            }
            var fContractTermEndDate = '';
            if ($("#txtContractTermEndDate").val() != "" && $("#txtContractTermEndDate").val() != null) {
                fContractTermEndDate = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermEndDate").datepicker('getDate'));
            }
            var fContractTermEnds = '';
            if ($("#txtContractTermEnds").val() != "" && $("#txtContractTermEnds").val() != null) {
                fContractTermEnds = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermEnds").datepicker('getDate'));
            }
            var fContractTermRenewOn = '';
            if ($("#txtContractTermRenewOn").val() != "" && $("#txtContractTermRenewOn").val() != null) {
                fContractTermRenewOn = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermRenewOn").datepicker('getDate'));
            }
            var fContractTermExpireOn = '';
            if ($("#txtContractTermExpireOn").val() != "" && $("#txtContractTermExpireOn").val() != null) {
                fContractTermExpireOn = $.datepicker.formatDate('mm/dd/yy', $("#txtContractTermExpireOn").datepicker('getDate'));
            }
            var vTermType = $("#ddlTermType option:selected").val();
            var vContractTermNotes = $("#TermNotes").val();
            var errmsg = '';
            if (vTermType == "Fixed Term") {
                if (!comparedates("txtContractTermStartDate", "txtContractTermEvaluationDate")) {
                    //$("#txtContractTermStartDate").addClass('error');
                    //alert("Next Evaluation Date should be greater than Start / Effective Date");
                    errmsg += "Next Evaluation Date should be greater than Start / Effective Date.\n";
                }
                if (!comparedates("txtContractTermStartDate", "txtContractTermEndDate")) {
                    //alert("End Date should be greater than Start / Effective Date");
                    errmsg += "End Date should be greater than Start / Effective Date.\n";
                }
                if (!comparedates("txtContractTermEvaluationDate", "txtContractTermEndDate")) {
                    //alert("End Date should be greater than Next Evaluation Date");
                    errmsg += "End Date should be greater than Next Evaluation Date.\n";
                }
            } else if (vTermType == "Evergreen / Perpetual") {
                if (!comparedates("txtContractTermStartDate", "txtContractTermEvaluationDate")) {
                    //$("#txtContractTermStartDate").addClass('error');
                    //alert("Next Evaluation Date should be greater than Start / Effective Date");
                    errmsg += "Next Evaluation Date should be greater than Start / Effective Date.\n";
                }
            } else if (vTermType == "Executed / Performance") { } else if (vTermType == "Renewable") {
                if (!comparedates("txtContractTermStartDate", "txtContractTermEnds")) {
                    //$("#txtContractTermStartDate").addClass('error');
                    //alert("Next Evaluation Date should be greater than Start / Effective Date");
                    errmsg += "Current Term End Date should be greater than Start / Effective Date.\n";
                }
                if (!comparedates("txtContractTermEnds", "txtContractTermEndDate")) {
                    //$("#txtContractTermStartDate").addClass('error');
                    //alert("Next Evaluation Date should be greater than Start / Effective Date");
                    errmsg += "End Date should be greater than Current Term End Date.\n";
                }
                if (!comparedates("txtContractTermStartDate", "txtContractTermEndDate")) {
                    //alert("End Date should be greater than Start / Effective Date");
                    errmsg += "End Date should be greater than Start / Effective Date.\n";
                }
                if (!comparedates("txtContractTermRenewOn", "txtContractTermEndDate")) {
                    //alert("End Date should be greater than Start / Effective Date");
                    errmsg += "End Date should be greater than Renew On / Anniversary Date.\n";
                }

                if ($('input[type="radio"][name=TermAutoRenewal]:checked').val() == 'Yes') {
                    var vTermTime = parseInt($("#txtTermTimes").val());
                    var vRenewalDate = new Date(fContractTermRenewOn);
                    var vScheduledRenewal = $('input[type="radio"][name=ScheduleAutoRenewal]:checked').val();
                    if (vScheduledRenewal == 'Instances')
                        vTermTime *= parseInt($("#txtRenewalInstance").val());

                    if ($("#ddlTermPeriod").val() == 'Years')
                        vRenewalDate = moment(vRenewalDate).add(vTermTime, 'years').format('MM/DD/YYYY');
                    else
                        vRenewalDate = moment(vRenewalDate).add(vTermTime, 'months').format('MM/DD/YYYY');
                    $("#hdContractTermRenewOn").val(vRenewalDate);
                    if (!comparedates("hdContractTermRenewOn", "txtContractTermEndDate")) {
                        //alert("End Date should be greater than Start / Effective Date");
                        errmsg += "End Date should be greater than Schedule Auto Renewal Date.\n";
                    }
                }
            }

            //var vCounterpartyNoticesRenewal = $("#CounterpartyNoticesRenewal").val();
            var vCounterpartyNoticesCancel = $("#txtSendReminderDayCancelCounterAll").val();
            var vCounterpartyNotices = $("#CounterpartyNoticeAll").val();
            //if ($("#txtContractTermEndDate").val() != "" && $("#txtContractTermEndDate").val() != null) {
            //    vCurrentTermEndDate = $.datepicker.formatDate('mm/dd/yy', new Date($("#txtContractTermEndDate").val()));

            //}
            //if (vCurrentTermEndDate != '' && typeof (vCurrentTermEndDate) != "undefined") {
            //    var vCounterpartyNoticesRenewalDate = '';

            //    if (vCounterpartyNoticesRenewal != null && vCounterpartyNoticesRenewal != "" && typeof (vCounterpartyNoticesRenewal) != "undefined") {
            //        var nextDate = moment(vCurrentTermEndDate).add("days", vCounterpartyNoticesRenewal);
            //        var strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
            //        var dtNextdate = new Date(strNextDateUTC);
            //        var dtcurrentdate = new Date(vCurrentTermEndDate);
            //        if (dtNextdate != "invalid" && dtcurrentdate != "invalid" && dtNextdate >= dtcurrentdate) {
            //            errmsg = "The Cancellation / Termination Notice days is greater than the possible days allowed from today before term end date.";
            //        }
            //        else {
            //            vCounterpartyNoticesRenewalDate = $.datepicker.formatDate('mm/dd/yy', new Date(strNextDateUTC));
            //        }
            //    }

            //    var vCounterpartyNoticesCancelDate = '';
            //    if (vCounterpartyNoticesCancel != null && vCounterpartyNoticesCancel != "" && typeof (vCounterpartyNoticesCancel) != "undefined") {
            //        var nextDate = moment(vCurrentTermEndDate).add("days", vCounterpartyNoticesCancel);
            //        var strNextDateUTC = moment(new Date(nextDate)).utc().format('MM/DD/YYYY');
            //        var dtNextdate = new Date(strNextDateUTC);
            //        var dtcurrentdate = new Date(vCurrentTermEndDate);
            //        if (dtNextdate != "invalid" && dtcurrentdate != "invalid" && dtNextdate >= dtcurrentdate) {
            //            errmsg = "The Renewal Notice days is greater than the possible days allowed from today before end date.";
            //        }
            //        else {
            //            vCounterpartyNoticesCancelDate = $.datepicker.formatDate('mm/dd/yy', new Date(strNextDateUTC));
            //        }
            //    }
            //}
            if (errmsg != '') {
                //  alert(errmsg);
                swal("", errmsg);
            } else {
                $("#loadingPage").fadeIn();

                if (vContractID == '') {
                    vContractID = $("#hdContractID").val();
                }
                var vStartDate = null;
                var vContractTerm = '';
                var vContractTermChoices = '';
                var vEndDate = null;
                var vRenewalDate = null;
                var vNextEvaluationDate = null;
                var vTermEndDate = null;
                var vAutoRenew = '';
                var vAutoExpireOn = null;
                var vScheduledRenewal = '';
                var vRenewableTerm = '';

                var vSendRenewReminderTo = '';
                var vRenewReminder1 = $("#txtSendRenewReminderDay1").val() == "" ? 0 : $("#txtSendRenewReminderDay1").val();
                var vRenewReminder2 = $("#txtSendRenewReminderDay2").val() == "" ? 0 : $("#txtSendRenewReminderDay2").val();
                var vRenewReminder3 = $("#txtSendRenewReminderDay3").val() == "" ? 0 : $("#txtSendRenewReminderDay3").val();
                if (vRenewReminder1 != 0)
                    var vRenewReminder1Condition = $("#ddlSendRenewReminder1").val() + '-' + $("#ddlSendRenewReminderDate1").val();
                else
                    var vRenewReminder1Condition = $("#ddlSendRenewReminder1 option:first").val() + '-' + $("#ddlSendRenewReminderDate1 option:first").val();
                if (vRenewReminder2 != 0)
                    var vRenewReminder2Condition = $("#ddlSendRenewReminder2").val() + '-' + $("#ddlSendRenewReminderDate2").val();
                else
                    var vRenewReminder2Condition = $("#ddlSendRenewReminder2 option:first").val() + '-' + $("#ddlSendRenewReminderDate2 option:first").val();
                if (vRenewReminder3 != 0)
                    var vRenewReminder3Condition = $("#ddlSendRenewReminder3").val() + '-' + $("#ddlSendRenewReminderDate3").val();
                else
                    var vRenewReminder3Condition = $("#ddlSendRenewReminder3 option:first").val() + '-' + $("#ddlSendRenewReminderDate3 option:first").val();

                var SendReminderToArr = $("#ddlSendRenewReminderTo").val();
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendRenewReminderTo == '') {
                        vSendRenewReminderTo = item;
                    } else {
                        vSendRenewReminderTo += "; " + item;
                    }
                });

                if (vTermType == "Fixed Term") {
                    vStartDate = ftxtContractTermStartDate;
                    //$("#txtContractTermStartDate").val();
                    vNextEvaluationDate = fContractTermEvaluationDate;
                    vEndDate = fContractTermEndDate;
                    if ($('input[type="radio"][name=rdTermEndDate]:checked').val() == 'Term') {
                        vContractTerm = $("#ContractTerm").val();
                        vContractTermChoices = $("#ContractTermChoices option:selected").val();
                    }
                } else if (vTermType == "Evergreen / Perpetual") {
                    vStartDate = ftxtContractTermStartDate;
                    //$("#txtContractTermStartDate").val();
                    vNextEvaluationDate = fContractTermEvaluationDate;
                } else if (vTermType == "Executed / Performance") {
                    vStartDate = ftxtContractTermStartDate;
                    //$("#txtContractTermStartDate").val();
                } else if (vTermType == "Renewable") {
                    vStartDate = ftxtContractTermStartDate;
                    //$("#txtContractTermStartDate").val();
                    vEndDate = fContractTermEndDate;
                    if ($('input[type="radio"][name=rdTermEndDate]:checked').val() == 'Term') {
                        vContractTerm = $("#ContractTerm").val();
                        vContractTermChoices = $("#ContractTermChoices option:selected").val();
                    }

                    vTermEndDate = fContractTermEnds;
                    vAutoRenew = $('input[type="radio"][name=TermAutoRenewal]:checked').val();
                    if (vAutoRenew == 'Yes') {
                        vRenewalDate = fContractTermRenewOn;
                        vRenewableTerm = $("#txtTermTimes").val() + '-' + $("#ddlTermPeriod").val();
                        vScheduledRenewal = $('input[type="radio"][name=ScheduleAutoRenewal]:checked').val();
                        if (vScheduledRenewal == 'Instances')
                            vScheduledRenewal = $("#txtRenewalInstance").val() + " Instances";
                    } else {
                        vRenewalDate = fContractTermRenewOn;
                        vAutoExpireOn = fContractTermExpireOn;
                    }
                }
                vAlertEnabled = $("#AlertActive").val();
                //Sridhar
                var termCommentsXML = getTermCommentsXML(vTermType, vStartDate, vEndDate, vNextEvaluationDate);

                var IsWarningShow = false;
                if ($("#ddlSendRenewReminder1").val() == "before") {
                    if (vRenewReminder1 != 0) {
                        if ($("#ddlSendRenewReminderDate1").val() == "Start / Effective Date") {
                            var start = moment(ftxtContractTermStartDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder1)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate1").val() == "Next Evaluation Date") {
                            var start = moment(fContractTermEvaluationDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder1)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate1").val() == "End Date (Overall Contract)") {
                            var start = moment(fContractTermEndDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder1)) {
                                IsWarningShow = true;
                            }
                        }

                    }
                }
                if ($("#ddlSendRenewReminder2").val() == "before") {
                    if (vRenewReminder2 != 0) {
                        if ($("#ddlSendRenewReminderDate2").val() == "Start / Effective Date") {
                            var start = moment(ftxtContractTermStartDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder2)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate2").val() == "Next Evaluation Date") {
                            var start = moment(fContractTermEvaluationDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder2)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate2").val() == "End Date (Overall Contract)") {
                            var start = moment(fContractTermEndDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder2)) {
                                IsWarningShow = true;
                            }
                        }
                    }
                }
                if ($("#ddlSendRenewReminder3").val() == "before") {
                    if (vRenewReminder3 != 0) {
                        if ($("#ddlSendRenewReminderDate3").val() == "Start / Effective Date") {
                            var start = moment(ftxtContractTermStartDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder3)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate3").val() == "Next Evaluation Date") {
                            var start = moment(fContractTermEvaluationDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder3)) {
                                IsWarningShow = true;
                            }
                        } else if ($("#ddlSendRenewReminderDate3").val() == "End Date (Overall Contract)") {
                            var start = moment(fContractTermEndDate);
                            var today = new Date();
                            var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                            var vv = start.diff(end, "days");
                            if (vv <= parseInt(vRenewReminder3)) {
                                IsWarningShow = true;
                            }
                        }
                    }
                }

                if (IsWarningShow) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                        function (confirmed) {
                            if (confirmed) {
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/ContractTerm',
                                    type: 'PUT',
                                    dataType: 'json',
                                    headers: {
                                        'eContracts-ApiKey': localStorage.APIKey,
                                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                                        username: localStorage.UserName
                                    },
                                    data: {
                                        ContractID: vContractID,
                                        ContractTermType: vTermType,
                                        ContractTermNotes: vContractTermNotes,
                                        StartDate: vStartDate,
                                        ContractTerm: vContractTerm,
                                        ContractTermChoices: vContractTermChoices,
                                        EndDate: vEndDate,
                                        RenewalDate: vRenewalDate,
                                        NextEvaluationDate: vNextEvaluationDate,
                                        TermEndDate: vTermEndDate,
                                        AutoRenew: vAutoRenew,
                                        AutoExpireOn: vAutoExpireOn,
                                        ScheduledRenewal: vScheduledRenewal,
                                        RenewableTerm: vRenewableTerm,
                                        SendRenewReminderTo: vSendRenewReminderTo,
                                        CounterpartyNotices: vCounterpartyNotices,
                                        //CounterpartyNoticesRenewal: vCounterpartyNoticesRenewal,
                                        //CounterpartyNoticesRenewalDate: vCounterpartyNoticesRenewalDate,
                                        CounterpartyNoticesCancel: vCounterpartyNoticesCancel,
                                        //CounterpartyNoticesCancelDate: vCounterpartyNoticesCancelDate,
                                        RenewReminder1: vRenewReminder1,
                                        RenewReminder2: vRenewReminder2,
                                        RenewReminder3: vRenewReminder3,
                                        RenewReminder1Condition: vRenewReminder1Condition,
                                        RenewReminder2Condition: vRenewReminder2Condition,
                                        RenewReminder3Condition: vRenewReminder3Condition,
                                        ModifiedBy: localStorage.UserName,
                                        AlertsEnabled: vAlertEnabled,
                                        TermCommentsXML: termCommentsXML
                                    },
                                    cache: false,
                                    success: function (data) {
                                        //if (data != null)
                                        //    contractItem = data;
                                        if (data != null) {
                                            var permissiontoapply = contractItem.Permission;
                                            contractItem = data;
                                            if (contractItem.Permission == null || contractItem.Permission == "") {
                                                contractItem.Permission = permissiontoapply;
                                            }
                                        }

                                        if (contractItem.EndDate != null) {
                                            var FEndDate = "";
                                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                                FEndDate = moment(new Date(contractItem.EndDate)).utc().format('MM/DD/YYYY');
                                            } else {
                                                FEndDate = moment(new Date(contractItem.EndDate)).utc().format(localStorage.AppDateFormat);
                                            }
                                            $("#txtContractEndDateCurrent").val(FEndDate);
                                        } else {
                                            $("#txtContractEndDateCurrent").val("Not Available");
                                        }

                                        BindContractTermDetail(contractItem);
                                        $("#loadingPage").fadeOut();
                                        swal.close();
                                        $("#dvContractTerm").dialog("close");
                                        try {
                                            BindSystemMilestones(contractItem)
                                        } catch (ex) {

                                        }
                                        GetRenewalChecklistAndNotes(vContractID, 0);
                                    },
                                    error: function (data) {
                                        swal.close();
                                        $("#loadingPage").fadeOut();
                                    },
                                    complete: function () {
                                        swal.close();
                                        $("#loadingPage").fadeOut();
                                    }
                                });
                            } else {
                                swal.close();
                                $("#loadingPage").fadeOut();
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                            }
                            return;
                        });
                } else {
                    swal.close();
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/ContractTerm',
                        type: 'PUT',
                        dataType: 'json',
                        headers: {
                            'eContracts-ApiKey': localStorage.APIKey,
                            'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                            username: localStorage.UserName
                        },
                        data: {
                            ContractID: vContractID,
                            ContractTermType: vTermType,
                            ContractTermNotes: vContractTermNotes,
                            StartDate: vStartDate,
                            ContractTerm: vContractTerm,
                            ContractTermChoices: vContractTermChoices,
                            EndDate: vEndDate,
                            RenewalDate: vRenewalDate,
                            NextEvaluationDate: vNextEvaluationDate,
                            TermEndDate: vTermEndDate,
                            AutoRenew: vAutoRenew,
                            AutoExpireOn: vAutoExpireOn,
                            ScheduledRenewal: vScheduledRenewal,
                            RenewableTerm: vRenewableTerm,
                            SendRenewReminderTo: vSendRenewReminderTo,
                            CounterpartyNotices: vCounterpartyNotices,
                            //CounterpartyNoticesRenewal: vCounterpartyNoticesRenewal,
                            //CounterpartyNoticesRenewalDate: vCounterpartyNoticesRenewalDate,
                            CounterpartyNoticesCancel: vCounterpartyNoticesCancel,
                            //CounterpartyNoticesCancelDate: vCounterpartyNoticesCancelDate,
                            RenewReminder1: vRenewReminder1,
                            RenewReminder2: vRenewReminder2,
                            RenewReminder3: vRenewReminder3,
                            RenewReminder1Condition: vRenewReminder1Condition,
                            RenewReminder2Condition: vRenewReminder2Condition,
                            RenewReminder3Condition: vRenewReminder3Condition,
                            ModifiedBy: localStorage.UserName,
                            AlertsEnabled: vAlertEnabled,
                            TermCommentsXML: termCommentsXML
                        },
                        cache: false,
                        success: function (data) {
                            //if (data != null)
                            //    contractItem = data;
                            if (data != null) {
                                var permissiontoapply = contractItem.Permission;
                                contractItem = data;
                                if (contractItem.Permission == null || contractItem.Permission == "") {
                                    contractItem.Permission = permissiontoapply;
                                }
                            }
                            BindContractTermDetail(contractItem);
                            $("#loadingPage").fadeOut();
                            swal.close();
                            $("#dvContractTerm").dialog("close");
                            try {
                                BindSystemMilestones(contractItem)
                            } catch (ex) {

                            }
                            GetRenewalChecklistAndNotes(vContractID, 0);
                        },
                        error: function (data) {
                            swal.close();
                            $("#loadingPage").fadeOut();
                        },
                        complete: function () {
                            swal.close();
                            $("#loadingPage").fadeOut();
                        }
                    });
                }
            }
        }
    }
}

function BindContractTermDetail(item) {
    var vTermType = item.ContractTermType;
    //Sridhar
    BindContractTermTypeddl();
    var vTermTypeDisplay = TermTypeDisplayName[vTermType];
    //Sridhar
    var vContractTerm = '';
    var vContractTermEnd = '';
    var Endflag = false;
    var curstatus = item.Status;
    var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];

    if ($.inArray(curstatus, vContractStatus) > -1)
        Endflag = true;
    $("#spContractTerm").html('');
    $("#liAdminMenuRenewal").show();
    if (curstatus == "Expired") {
        var vExpiredDate = '';
        if (item.ExpiredDate != null)
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                vExpiredDate = item.ExpiredDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            }
            else {
                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                    vExpiredDate = item.ExpiredDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                    vExpiredDate = item.ExpiredDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                }
            }
        vExpiredDate = vExpiredDate != '' ? vExpiredDate : "NA"; //moment(new Date(item.CancelledDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')));

        vContractTerm += '<td>';
        vContractTerm += '<span class="con_m_head">Expired on: ' + vExpiredDate + ' </span>';
        //vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn Manage" style="padding: 3px 7px;font-size: 12px;margin: 4px 4px 0 0;">Setup Contract Term</a>';
        //vContractTerm += '<a href="javascript:void(0)" data-title="The terms (timelines) for this Contract Record is not available." style="padding: 4px 4px 0 0;"><img src="/Content/Images/missing-exc.png" style="cursor: default !important;"/></a>';
        vContractTerm += '</td>';

        vContractTerm += '<td align="right">';
        vContractTerm += '<a href="javascript:void(0);" onclick="viewDetailsTerm()" id="btnViewDetails" class="wit-btn" style="padding: 3px 7px;font-size: 12px;">View Details</a>';
        vContractTerm += '</td>';

        $("#tbodyManageTerm").html(vContractTerm);
    } else if (curstatus == "Cancelled") {
        var vCancelledDate = '';
        if (item.CancelledDate != null)
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                vCancelledDate = item.CancelledDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            }
            else {
                if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                    vCancelledDate = item.CancelledDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                    vCancelledDate = item.CancelledDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                }
            }

        vCancelledDate = vCancelledDate != '' ? vCancelledDate : "NA"; //moment(new Date(item.CancelledDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')));

        vContractTerm += '<td>';
        vContractTerm += '<span class="con_m_head">Cancelled on: ' + vCancelledDate + ' </span>';
        // vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn Manage" style="padding: 3px 7px;font-size: 12px;margin: 4px 4px 0 0;">Setup Contract Term</a>';
        //vContractTerm += '<a href="javascript:void(0)" data-title="The terms (timelines) for this Contract Record is not available." style="padding: 4px 4px 0 0;"><img src="/Content/Images/missing-exc.png" style="cursor: default !important;"/></a>';
        vContractTerm += '</td>';

        vContractTerm += '<td align="right">';
        vContractTerm += '<a href="javascript:void(0);" onclick="viewDetailsTerm()" id="btnViewDetails" class="wit-btn" style="padding: 3px 7px;font-size: 12px;">View Details</a>';
        vContractTerm += '</td>';

        $("#tbodyManageTerm").html(vContractTerm);

    } else {
        if (vTermType == "Fixed Term") {
            var vFromDate = moment(new Date());
            var vToDate = null;
            var FstartDate = null;
            var FendDate = null;
            vContractTerm += '<td>';
            //if (item.StartDate != null || item.EndDate != null) {
            if (item.StartDate != null) {
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    FstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        FstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        FstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }


                //vContractTerm += '<small class="contract_term_date" title="Start / Effective Date">Current Term: <small class="Small_term">' + FstartDate + '</small></small>';
            }
            if (item.EndDate != null) {
                vToDate = moment(new Date(item.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')));
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    FendDate = item.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        FendDate = item.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        FendDate = item.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }
                //vContractTerm += '&nbsp;&nbsp;-&nbsp;&nbsp;<small class="contract_term_date" title="End Date"><span><small class="Small_term">' + FendDate + '</small></small></small>';
            }


            FstartDate = FstartDate != null ? FstartDate : "NA";
            FendDate = FendDate != null ? FendDate : "NA";

            vContractTerm += '<span class="con_m_head">Start Date   -   End Date (' + vTermTypeDisplay + ')</span><br>';
            vContractTerm += '<span class="con_s_head">' + FstartDate + '   -  ' + FendDate;


            vContractTerm += '</span>';
            vContractTerm += '</td>';

            //Evaluation Date
            if (item.NextEvaluationDate != null) {
                var nextEvalDate = moment(new Date(item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')));
                var vDiffEval = DiffBetDate(vFromDate, nextEvalDate);
                if (vDiffEval != '') {
                    var vNextEval = '';
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        vNextEval = item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    } else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                            vNextEval = item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                            vNextEval = item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        }
                    }

                    vContractTerm += '<td>';
                    vContractTerm += '<span class="con_m_head">Next Evaluation: </span><br>';
                    vContractTerm += '<span class="con_s_head">' + vNextEval + ' (' + vDiffEval + ' left)</span>';
                    vContractTerm += '</td>';
                } else {
                    vContractTerm += '<td>';
                    vContractTerm += '<span class="con_m_head"></span><br>';
                    vContractTerm += '<span class="con_s_head"></span>';
                    vContractTerm += '</td>';
                }
            } else {
                vContractTerm += '<td>';
                vContractTerm += '<span class="con_m_head"></span><br>';
                vContractTerm += '<span class="con_s_head"></span>';
                vContractTerm += '</td>';
            }

            //Buttons
            //if (item.StartDate == null && item.EndDate == null) {
            //}
            //else {
            vContractTerm += '<td align="right">';
            vContractTerm += '<a href="javascript:void(0);" onclick="viewDetailsTerm()" id="btnViewDetails" class="wit-btn" style="padding: 3px 7px;font-size: 12px;">View Details</a>';
            vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn managesettings Manage " style="padding: 3px 7px;font-size: 12px;">Manage Term</a>';
            vContractTerm += '</td>';
            //}

        } else if (vTermType == "Evergreen / Perpetual") {
            var vFromDate = moment(new Date());
            vContractTerm += '<td>';
            if (item.StartDate != null) {
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    FstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        FstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        FstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }

            }

            FstartDate = FstartDate != null ? FstartDate : "NA";
            vContractTerm += '<span class="con_m_head">Start Date (' + vTermTypeDisplay + ')</span><br>';
            vContractTerm += '<span class="con_s_head">' + FstartDate;
            vContractTerm += '</span>';
            vContractTerm += '</td>';
            //Evaluation Date
            if (item.NextEvaluationDate != null) {
                var nextEvalDate = moment(new Date(item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')));
                var vDiffEval = DiffBetDate(vFromDate, nextEvalDate);
                if (vDiffEval != '') {
                    var vNextEval = '';
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        vNextEval = item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    } else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                            vNextEval = item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                            vNextEval = item.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        }
                    }

                    vContractTerm += '<td>';
                    vContractTerm += '<span class="con_m_head">Next Evaluation: </span><br>';
                    vContractTerm += '<span class="con_s_head">' + vNextEval + ' (' + vDiffEval + ' left)</span>';
                    vContractTerm += '</td>';
                } else {
                    vContractTerm += '<td>';
                    vContractTerm += '<span class="con_m_head"></span><br>';
                    vContractTerm += '<span class="con_s_head"></span>';
                    vContractTerm += '</td>';
                }
            } else {
                vContractTerm += '<td>';
                vContractTerm += '<span class="con_m_head"></span><br>';
                vContractTerm += '<span class="con_s_head"></span>';
                vContractTerm += '</td>';
            }

            //Buttons
            vContractTerm += '<td align="right">';
            vContractTerm += '<a href="javascript:void(0);" onclick="viewDetailsTerm()" id="btnViewDetails" class="wit-btn" style="padding: 3px 7px;font-size: 12px;">View Details</a>';
            vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn managesettings Manage" style="padding: 3px 7px;font-size: 12px;">Manage Term</a>';
            vContractTerm += '</td>';

        } else if (vTermType == "Executed / Performance") {
            vContractTerm += '<td>';
            if (item.StartDate != null) {
                var FormatstartDate = null;
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    FormatstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        FormatstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        FormatstartDate = item.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }
                // vContractTerm += '<small class="contract_term_date" title="Date of Execution / Performance">Date of Execution: <small class="Small_term">' + FormatstartDate + '</small></small>';
            }

            FormatstartDate = FormatstartDate != null ? FormatstartDate : "NA";
            vContractTerm += '<span class="con_m_head">Date of Execution / Performance</span><br>';
            vContractTerm += '<span class="con_s_head">' + FormatstartDate;
            vContractTerm += '</span>';
            vContractTerm += '</td>';

            vContractTerm += '<td>';
            vContractTerm += '<span class="con_m_head"></span><br>';
            vContractTerm += '<span class="con_s_head"></span>';
            vContractTerm += '</td>';

            //Buttons
            vContractTerm += '<td align="right">';
            vContractTerm += '<a href="javascript:void(0);" onclick="viewDetailsTerm()" id="btnViewDetails" class="wit-btn" style="padding: 3px 7px;font-size: 12px;">View Details</a>';
            vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn managesettings Manage" style="padding: 3px 7px;font-size: 12px;">Manage Term</a>';
            vContractTerm += '</td>';


        } else if (vTermType == "Renewable") {
            vContractTerm += '<td>';
            var vFromDate = moment(new Date());
            var vToDate = null;
            if (item.EffectiveDate != null) {
                var FormatstartDate = null;
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    FormatstartDate = item.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        FormatstartDate = item.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        FormatstartDate = item.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }
            }

            if (item.TermEndDate != null) {

                var FTermEndDate = null;
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    FTermEndDate = item.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                } else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                        FTermEndDate = item.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                    } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                        FTermEndDate = item.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    }
                }


            }


            if (item.RenewalDate != null)
                vToDate = moment(new Date(item.RenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')));

            FormatstartDate = FormatstartDate != null ? FormatstartDate : "NA";
            FTermEndDate = FTermEndDate != null ? FTermEndDate : "NA";
            vContractTerm += '<span class="con_m_head">Term Type (' + vTermTypeDisplay + ')</span><br>';
            vContractTerm += '<span class="con_s_head">' + FormatstartDate + '  -  ' + FTermEndDate + ' ';


            vContractTerm += '</span>';


            vContractTerm += '</td>';

            if (contractItem.Status == "Up for Renewal") {
                if (item.CounterpartyNoticesRenewal != null && item.CounterpartyNoticesRenewalDate != null) {
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        vRenewOn = item.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                    } else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') {
                            vRenewOn = item.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1');
                        } else if (localStorage.AppDateFormat == 'MM/DD/YYYY') {
                            vRenewOn = item.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
                        }
                    }
                    var CounterpartyNoticesRenewalDate = moment(new Date(item.CounterpartyNoticesRenewalDate));
                    var vDiffRenew = DiffBetDate(vFromDate, CounterpartyNoticesRenewalDate);

                    vContractTerm += '<td>';
                    vContractTerm += '<span class="con_m_head">Renew On or Before </span><br>';
                    vContractTerm += '<span class="con_s_head">' + vRenewOn;
                    if (vDiffRenew != '')
                        vContractTerm += '<span style="font-size: 11px;color: #999;"> (' + vDiffRenew + ' left) </span>';
                    else
                        vContractTerm += '<span style="font-size: 11px;color: #999;"> (NA) </span>';
                    vContractTerm += '</span>';
                    vContractTerm += '</td>';
                } else {
                    vContractTerm += '<td>';
                    vContractTerm += '<span class="con_m_head"></span><br>';
                    vContractTerm += '<span class="con_s_head"></span>';
                    vContractTerm += '</td>';
                }
            } else {
                vContractTerm += '<td>';
                vContractTerm += '<span class="con_m_head"></span><br>';
                vContractTerm += '<span class="con_s_head"></span>';
                vContractTerm += '</td>';
            }

            //Buttons
            vContractTerm += '<td align="right">';
            vContractTerm += '<a href="javascript:void(0);" onclick="viewDetailsTerm()" id="btnViewDetails" class="wit-btn" style="padding: 3px 7px;font-size: 12px;">View Details</a>';
            vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn managesettings Manage" style="padding: 3px 7px;font-size: 12px;">Manage Term</a>';
            vContractTerm += '</td>';
        } else {
            //ENH 440 Display Alerts for Missing information
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
                type: 'GET',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                cache: false,
                success: function (data) {
                    if (data.DisplayMissingInformation == "Yes") {
                        vContractTerm += '<td>';
                        if (vTermType != "" && vTermType != null && vTermType != "--Select--" && vTermType != "0") {
                            vContractTerm += '<span class="con_m_head">(' + vTermTypeDisplay + ') </span>';
                        }
                        vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn managesettings Manage" style="padding: 3px 7px;font-size: 12px;margin: 4px 4px 0 0;">Setup Contract Term</a>';
                        vContractTerm += '<a href="javascript:void(0)" data-title="The terms (timelines) for this Contract Record is not available." style="padding: 4px 4px 0 0;"><img src="/Content/Images/missing-exc.png" style="cursor: default !important;"/></a>';
                        vContractTerm += '</td>';
                        $("#tbodyManageTerm").html(vContractTerm);
                    } else {
                        vContractTerm += '<td>';
                        if (vTermType != "" && vTermType != null && vTermType != "--Select--" && vTermType != "0") {
                            vContractTerm += '<span class="con_m_head">(' + vTermTypeDisplay + ') </span>';
                        }
                        vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn managesettings Manage" style="padding: 3px 7px;font-size: 12px;">Setup Contract Term</a>';
                        vContractTerm += '</td>';
                        $("#tbodyManageTerm").html(vContractTerm);
                    }
                    ApplyPermissionToMenu(item.Permission);
                },
                error: function (data) {
                    vContractTerm += '<td>';
                    if (vTermType != "" && vTermType != null && vTermType != "--Select--" && vTermType != "0") {
                        vContractTerm += '<span class="con_m_head">Contract Term: ' + vTermTypeDisplay + ' </span>';
                    }
                    vContractTerm += '<a href="javascript:void(0);" onclick="OpenManageTerm()" id="btnManageTerms" class="wit-btn managesettings Manage" style="padding: 3px 7px;font-size: 12px;">Setup Contract Term</a>';
                    vContractTerm += '</td>';
                    $("#tbodyManageTerm").html(vContractTerm);
                    ApplyPermissionToMenu(item.Permission);
                }
            });
            //ENH 440 Display Alerts for Missing information


        }
        $("#tbodyManageTerm").html(vContractTerm);
        // $("#spContractTermEnd").html(vContractTermEnd);


        $(".openmenuTerm").contextMenu({
            menu: 'dropdownMenuTerm',
            leftButton: true
        }, function (action, el, pos) {
            contextMenuTerm(action, el.parent("div"), pos);
        });
        $(".openmenuFixedTerm").contextMenu({
            menu: 'dropdownMenuFixedTerm',
            leftButton: true
        }, function (action, el, pos) {
            contextMenuFixedTerm(action, el.parent("div"), pos);
        });
        $(".openmenuRenewalTerm").contextMenu({
            menu: 'dropdownMenuRenewalTerm',
            leftButton: true
        }, function (action, el, pos) {
            contextMenuRenewalTerm(action, el.parent("div"), pos);
        });
    }
    $("#secContractTerm").css("display", "");

    //Sridhar
    //BindContractTermTypeddl();//Performance Optimization
    //var vTermTypeDisplay = TermTypeDisplayName[vTermType];//Performance Optimization
    //Sridhar
}

function getTermCommentsXML(TermName, vStartDate, vEndDate, vNextEvalDate) {
    var activityXML = '';
    var user = localStorage.UserName;
    var vtime = moment(new Date()).format('MMMM Do YYYY, h:mm A');
    var conStartDate = contractItem.StartDate != null ? moment(contractItem.StartDate).format('MM/DD/YYYY') : null;
    var conEndDate = contractItem.EndDate != null ? moment(contractItem.EndDate).format('MM/DD/YYYY') : null;
    var conNextEvalDate = contractItem.NextEvaluationDate != null ? moment(contractItem.NextEvaluationDate).format('MM/DD/YYYY') : null;
    if (contractItem.ContractTermType == "")
        activityXML += user + ' has setup the term on ' + vtime;
    else if (contractItem.ContractTermType != TermName)
        activityXML += user + ' has changed the term from ' + contractItem.ContractTermType + ' to ' + TermName + ' on ' + vtime;
    else if (conStartDate != null && conStartDate != vStartDate)
        activityXML += user + ' has changed the term Start Date from ' + conStartDate + ' to ' + vStartDate + ' on ' + vtime;
    else if (conEndDate != null && conEndDate != vEndDate)
        activityXML += user + ' has changed the term End Date from ' + conEndDate + ' to ' + vEndDate + ' on ' + vtime;
    else if (conNextEvalDate != null && conNextEvalDate != vNextEvalDate)
        activityXML += user + ' has changed the term Next Evaluation Date from ' + conNextEvalDate + ' to ' + vNextEvalDate + ' on ' + vtime;
    else
        return "";

    var existRenewalCommentsXML = '';
    if (typeof RecvMetadatavaluetofinalize != "undefined" && RecvMetadatavaluetofinalize != '') {
        if ($(RecvMetadatavaluetofinalize).find("TermCommentsXML").length > 0) {
            existRenewalCommentsXML = $(RecvMetadatavaluetofinalize).find("TermCommentsXML").find("RenewalComments");
        }
    }

    var existingXML = '';
    existingXML += '<RenewalComments>';
    if (existRenewalCommentsXML != null && existRenewalCommentsXML != '') {
        $(existRenewalCommentsXML).find('RenewalComment').each(function () {
            var activity = $(this).find('Activity').text();
            var comment = $(this).find('Comments').text();
            var sendton = $(this).find('SendTo').text();
            var created = $(this).find('Created').text();
            existingXML += '<RenewalComment>';

            existingXML += '<Activity>';
            existingXML += activity;
            existingXML += '</Activity>';

            existingXML += '<Comments>';
            existingXML += comment;
            existingXML += '</Comments>';

            existingXML += '<SendTo>';
            existingXML += sendton;
            existingXML += '</SendTo>';

            existingXML += '<Created>';
            existingXML += created;
            existingXML += '</Created>';
            existingXML += '</RenewalComment>';

        });
    }
    existingXML += '<RenewalComment>';
    existingXML += '<Activity>';
    existingXML += activityXML;
    existingXML += '</Activity>';

    existingXML += '<Comments>';
    existingXML += '</Comments>';

    existingXML += '<SendTo>';
    existingXML += '</SendTo>';

    existingXML += '<Created>';
    existingXML += moment(new Date());
    existingXML += '</Created>';

    existingXML += '</RenewalComment>';
    existingXML += '</RenewalComments>';
    return existingXML;

}

function contextMenuFixedTerm(action, el, pos) {
    switch (action) {

        case "manage":
            {
                OpenManageContractTerm(contractItem);
                break;
            }
        case "Cancel":
            {
                $("#txtReasonOfCancel").val("");
                $("#ddlSendToCancel").val('');
                $("#dvCancelContract").dialog("open");
                break;
            }

    }
}

function contextMenuRenewalTerm(action, el, pos) {
    switch (action) {

        case "manage":
            {
                OpenManageContractTerm(contractItem);
                break;
            }
        case "Expire":
            {
                ExpireContract();
                break;
            }
    }
}

function ExpireContract() {
    swal({
        title: '',
        text: "Are you sure you want to <span style=\"font-weight:700\">expire</span> this Contract Record?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
        function (confirmed) {
            if (confirmed) {
                $("#loadingPage").fadeIn();
                var vCancelNote = '';
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=Expired',
                    type: 'PUT',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey,
                        'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging,
                        username: localStorage.UserName
                    },
                    data: vCancelNote,
                    cache: false,
                    success: function (result) {
                        $("#loadingPage").fadeOut();
                        $("#dvContractTerm").dialog("close");
                        contrcatItem.Status = "Expired";
                        ContractTopActions();
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                    }
                });
            }
            return;
        });
}

function ContractTopActions() {
    $(".m-status-btn").empty();
    var constatus = contractItem.Status; //"New";//
    BindContractTermDetail(contractItem);
    $("#spanstatus").html(constatus);
    var arrstatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
    if (arrstatus.indexOf(constatus) > -1) {
        Stage = '';
        $("#btnContractTermExpire").show();
    } else {
        Stage = 'pipeline';
    }
    if (contractItem.IsDraft == "Yes") {
        constatus = "Draft";
        $("#addActivityApproval").css('display', 'none');
        $("#RelatedContractEdit").css('display', 'none');
        $("#bNavContracts").removeClass('act-contrac');
        $("#bNavContracts").removeClass('actNav');
        $("#bNavContracts").addClass('contrac_1');
        $(".draft").css('display', 'none');
    }
    switch (constatus) {
        case "New":
            $("#idNewStatus").html('<b title="New" class="status_green_another" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/new.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Awaiting Review":
            $("#idNewStatus").html('<b title="Awaiting Review" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Reviewed":
            $("#idNewStatus").html('<b title="Reviewed" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Awaiting Approval":
            $("#idNewStatus").html('<b title="Awaiting Approval" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Approved":
            $("#idNewStatus").html('<b title="Approved" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/tick.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "In Negotiation":
            $("#idNewStatus").html('<b title="In Negotiation" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Negotiation Complete":
            $("#idNewStatus").html('<b title="Negotiation Complete" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/tick.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
            //case "Aborted":
            //    $("#idNewStatus").html('<b title="Aborted" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/close.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            //    break;
        case "Ready for Signature":
            $("#idNewStatus").html('<b title="Ready for Signature" class="status_green" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/active.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Awaiting Signatures":
            $("#idNewStatus").html('<b title="Awaiting Signature" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Signed":
            $("#idNewStatus").html('<b title="Signed" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/tick.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Active":
            $("#idNewStatus").html('<b title="Active" class="status_green" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/active.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Up for Renewal":
            $("#idNewStatus").html('<b title="Up for Renewal" class="status_red" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/exp.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "About to Expire":
            $("#idNewStatus").html('<b title="About to Expire" class="status_red" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/exp.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "On Hold":
            $("#idNewStatus").html('<b title="On Hold" class="status_red" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/exp.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Replaced":
            $("#idNewStatus").html('<b title="Replaced" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/replace.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Expired":
            $("#idNewStatus").html('<b title="Expired" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/expried.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Cancelled":
            $("#idNewStatus").html('<b title="Cancelled" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/close.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Archived":
            $("#idNewStatus").html('<b title="Archived" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/archive.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Draft":
            $("#idNewStatus").html('<b title="In Draft" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/icon/Draft_icon.png" /> ' + constatus + '</b>');
            break;
    }
    var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];

    if (constatus == "Draft") {
        if (getParameterByName("Stage") != "" && getParameterByName("Stage") == "pipeline") {
            $("#aNavPipeline").addClass('actNav');
            $("#bNavPipeline").removeClass('pipeline_1');
            $("#bNavPipeline").addClass('act-pipeline');
            $("#aNavContracts").removeClass('actNav');
            $("#bNavContracts").addClass('contrac_1');
            $("#bNavContracts").removeClass('act-contrac');
            if (constatus == "Cancelled") {
                $('.DeleteRecord').css("display", "");
            }
        } else {
            $("#aNavPipeline").removeClass('actNav');
            $("#bNavPipeline").addClass('pipeline_1');
            $("#bNavPipeline").removeClass('act-pipeline');
            $("#aNavContracts").addClass('actNav');
            $("#bNavContracts").removeClass('contrac_1');
            $("#bNavContracts").addClass('act-contrac');
        }
    }
        //else if (MakeFinalized != "Yes") {
    else {
        if (($.inArray(constatus, vContractStatus) < 0 || constatus == "Cancelled") && ((contractItem.FinalizedBy == null || contractItem.FinalizedBy == ""))) {
            $("#aNavPipeline").addClass('actNav');
            $("#bNavPipeline").removeClass('pipeline_1');
            $("#bNavPipeline").addClass('act-pipeline');
            $("#aNavContracts").removeClass('actNav');
            $("#bNavContracts").addClass('contrac_1');
            $("#bNavContracts").removeClass('act-contrac');
            if (constatus == "Cancelled") {
                $('.DeleteRecord').css("display", "");
            }
        } else {
            $("#aNavPipeline").removeClass('actNav');
            $("#bNavPipeline").addClass('pipeline_1');
            $("#bNavPipeline").removeClass('act-pipeline');
            $("#aNavContracts").addClass('actNav');
            $("#bNavContracts").removeClass('contrac_1');
            $("#bNavContracts").addClass('act-contrac');
        }
    }

    if (constatus != "0" && constatus != "" && constatus != "undefined") {
        if ($("#hdnPermission").val() != "View" && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
            $("#topAction1").css("display", "");
            $("#topAction2").css("display", "");
            if (constatus == "New") {
                $("#topAction1").html('Add Document');
                $("#topAction2").html('Add Milestone');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                $("#topAction2").attr('onclick', 'AddMilestoneMoreNew();');
            } else if (constatus == "Drafting") {
                $("#topAction1").html('Add Document');
                $("#topAction2").html('Start Approval');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                $("#topAction2").attr('onclick', 'contextMenuContractSettings("approve","","");');
            } else if (constatus == "Awaiting Review") {
                $("#topAction1").html('Add Document');
                $("#topAction2").html('Edit Metadata');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                $("#topAction2").attr('onclick', 'contextMenuContractSettings("edit","","");');
            } else if (constatus == "Reviewed") {
                $("#topAction1").html('Start Approval');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("approve","","");');
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction2").html('Share Contract Record');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("share","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Awaiting Approval") {
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction1").html('Share Contract Record');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("share","","");');
                } else {
                    $("#topAction1").css("display", "none");
                }
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Add Related Contract Record(s)');
                    $("#topAction2").attr('onclick', 'AddRelatedContracts();');
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Approved") {
                $("#topAction1").html('Add Document');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction2").html('Share Contract Record');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("share","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "In Negotiation") {
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction1").html('Share Contract Record');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("share","","");');
                } else {
                    $("#topAction1").css("display", "none");
                }
                if ($("#hdnPermission").val() == "Manage") {
                    if (contractItem.IsStandard == "Yes") {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Non-Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("nonstandard","","");');
                    } else {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("standard","","");');
                    }
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Negotiation Complete") {
                $("#topAction1").html('Start Approval');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("approve","","");');
                if ($("#hdnPermission").val() == "Manage") {
                    if (contractItem.IsStandard == "Yes") {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Non-Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("nonstandard","","");');
                    } else {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("standard","","");');
                    }
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Awaiting Signatures" || constatus == "Ready for Signature") {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction1").html('Add Related Contract Record(s)');
                    $("#topAction2").html('Manage Permission');
                    $("#topAction1").attr('onclick', 'AddRelatedContracts();');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                } else {
                    if ($("#topAction1").html() == "") {
                        $("#topAction1").css("display", "none");
                    }
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Signed") {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction1").html('Manage Permission');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("permission","","");');
                    $("#topAction2").html('Term Settings');
                    $("#topAction2").attr('onclick', 'contextMenuTerm("manage","","");');
                } else {
                    $("#topAction1").css("display", "none");
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Active") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Manage Permission');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Up for Renewal") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Term Settings');
                    $("#topAction2").attr('onclick', 'contextMenuTerm("manage","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Renewed") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Manage Permission');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "Extended") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Manage Permission');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
            } else if (constatus == "About to Expire") {
                $("#topAction1").html('Start Approval');
                $("#topAction2").html('Add Amendment');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("approve","","");');
                $("#topAction2").attr('onclick', 'AddAmendmentMore();');
            } else if (constatus == "Archived") {
                $("#topAction1").html('View History');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("history","","");');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Delete Contract');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("delete","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
                //manoj
                $('.Manage').css("display", "none");
                $('.Contribute').css("display", "none");
                //manoj
            } else {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").css("display", "none");
                    $("#topAction1").html('Duplicate Contract');
                    //$("#topAction2").html('Archive Contract');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("duplicate","","");');
                    //$("#topAction2").attr('onclick', 'contextMenuContractSettings("archive","","");');
                } else {
                    $("#topAction1").css("display", "none");
                    $("#topAction2").css("display", "none");
                }
            }
        } else {
            $("#topAction1").css("display", "none");
            $("#topAction2").css("display", "none");
        }
    } else {
        $("#spanstatus").html('Not Assigned');
    }

    $(".m-status-btn").html($(".constatus").clone());

    $('#btnEditStatus').click(function () {
        BindStatusbyCLM('Yes');


    });
    if (contractItem.IsDraft == "Yes" || constatus == "Archived") {
        $(".managesettings").css("display", "none");
        $(".review").css("display", "none");
        $(".signature").css("display", "none");
        $(".draft").css('display', 'none');
        $("#addActivityApproval").css('display', 'none');
        $("#RelatedContractEdit").css('display', 'none');
        $(".FL_Share").css("display", "none");
        $(".approve").css("display", "none");
        $(".mail").css("display", "none");
        $(".liContractStandard").css("display", "none");
        $(".liContractNonStandard").css("display", "none");
        $(".status").css("display", "none");
        $(".contractrenewal").css("display", "none");
        $(".permission").css("display", "none");
        $(".defaultproperties").css("display", "none");
        $(".template").css("display", "none");
        $(".duplicate").css("display", "none");
        $(".final").css("display", "none");
        $(".separator").css("display", "none");
        $("#topAction1").css("display", "none");
        $("#topAction2").css("display", "none");
    }
}

var relatedContractsTag = [];

function AddRelatedContracts() {
    $("#ddlRelConFilterContractType option:selected").prop('selected', false).trigger('chosen:updated');
    $("#ddlRelConFilterCounterparty option:selected").prop('selected', false).trigger('chosen:updated');
    addbuttonclick = false;
    $("#loadingPage").fadeIn();
    $('#loadContract').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    $('#tblPopupContracts').empty();
    $("#txtSearchBoxContract").val("");
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getrelatedcontracts?stage=&searchkeyword=&customquery=&sortbyfield=ContractTitle&orderby=ASC';
    if ($('#tblPopupContracts tr').length <= 0) {
        $("#txtSearchBoxContract").val("");
        $.ajax({
            url: vURL,
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: {
                'eContracts-ApiKey': localStorage.APIKey,
                BusinessAreaLocation: $("#lblBusinessAreaPath").text(),
                UserID: localStorage.UserID
            },
            cache: false,
            success: function (data) {
                $('#tblPopupContracts').empty();
                $('#loadContract').empty();
                $("#hdnRelatedContracts").append(";" + getParameterByName("ContractID"))
                //Sridhar - Added pagination
                //manoj
                var SelectedRelContractID = $("#hdnRelatedContracts").text().split(';').filter(function (e) {
                    return e
                });

                if (SelectedRelContractID.length > 0) {
                    data = $.grep(data, function (nRelCon, iRelCon) {
                        return (SelectedRelContractID.indexOf(nRelCon.RowKey) == -1);
                    });
                }
                //$("#hdnRelatedContracts").text()
                // listRelatedContracts
                //manoj
                listRelatedContracts = data;
                CreateRelatedContractsList(0);
                collectrelatedcontractrowkey("");
                var vCount = data.length;
                if (vCount != 0) {
                    $("#tblPopupContracts tr td").attr('style', 'vertical-align: top');
                    $('#compact-paginationRelatedContracts').css('display', '');
                    $('#compact-paginationRelatedContracts').pagination({
                        items: vCount,
                        itemsOnPage: 10,
                        type: 'tbody',
                        typeID: 'tblPopupContracts',
                        row: 'tr',
                        cssStyle: 'compact-theme',
                        listname: 'RelatedContracts'
                    });
                } else {
                    $('#compact-paginationRelatedContracts').css('display', 'none');
                    $('#loadContract').html('<p style="margin-left: 20px;">No items found.</p>')
                }
                $("#txtSearchBoxContract").autocomplete({
                    source: relatedContractsTag,
                    minLength: 2,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxContract").val(uidetails.item.label);
                        ViewContracts();
                    }
                });
                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });
                $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
                $("#popupContracts").dialog("open");
                $("#loadingPage").fadeOut();
            },
            error: function (data) {
                var arr = data.responseText.split(':');
                var str1 = arr[1];
                var str2 = "No contract found";

                if (str1.indexOf(str2) != -1) {
                    $('#loadContract').html('<p style="margin-left: 20px;">No items found.</p>')
                    $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
                    $("#popupContracts").dialog("open");
                    $("#loadingPage").fadeOut();
                }



                $('#loadMA').empty();
                $('#loadContract').empty();
                $('#loadMA').html('<p style="margin-left: 20px;">No items found.</p>');
                $('#tblPopupContracts').html('No items found.');
                $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
                $("#popupContracts").dialog("open");
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        $('#loadMA').empty();
        $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
        $("#popupContracts").dialog("open");
        $("#loadingPage").fadeOut();
    }

    vContractID = getParameterByName("ContractID");
}

function CreateRelatedContractsList(page) {
    $("#tblPopupContracts").empty();
    var startIndex = page * 10;
    var endIndex = startIndex + 10;
    if (endIndex > listRelatedContracts.length) endIndex = listRelatedContracts.length;
    //$("#spResult").html((startIndex + 1) + '&nbsp;to&nbsp;' + endIndex + '&nbsp;of&nbsp;' + listRelatedContracts.length);
    for (var i = startIndex; i < endIndex; i++) {
        var item = listRelatedContracts[i];
        if ($("#hdnRelatedContracts").text().indexOf(item.RowKey) > -1) { } else {
            if (item.RowKey != getParameterByName("ContractID")) {
                var article = '<tr><td class="width65">';
                if (arrRelatedcontractRowkey.indexOf(item.RowKey.trim()) >= 0) {
                    article += '<input id="' + item.RowKey + '" type="checkbox" style="margin-left: 40px;" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" checked />';
                } else {
                    article += '<input id="' + item.RowKey + '" type="checkbox" style="margin-left: 40px;" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                }
                //article += '<input id="' + item.RowKey + '" type="checkbox" style="margin-left: 40px;" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                article += '<label for="' + item.RowKey + '" class="css1-label"><a href="/Contracts/ContractDetails?ContractID=' + item.RowKey + '" target="_blank">' + item.ContractTitle + '</a></label>'; //ENH487 Customer inhanc
                article += '</td>';
                article += '<td ><label class="">' + item.ContractType + '</label></td>'
                article += '<td ><label class="">'
                if (item.Counterparty != null && item.Counterparty != "") {
                    article += item.Counterparty
                } else {
                    article += "-"
                }
                article += '</label></td><td ><label class="" style="word-break: break-all;">'
                if (item.ContractNumber != null && item.ContractNumber != "") {
                    article += item.ContractNumber
                } else {
                    article += "-"
                }
                article += '</label></td><td <label class="">' + item.Status + '</label></td>'
                //manoj
                if (arrRelatedcontractRowkey.indexOf(item.RowKey.trim()) >= 0) {
                    var indexvaluetake = vRelatedContractTitlearr.indexOf(item.ContractTitle.trim());
                    var relationtypefetch = RelatedRelationshipTypearr[indexvaluetake];
                    article += "<td class='ddl'><select class='f_inpt width90' onchange='showallspans(this)'>";
                    var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                    var jsLangType = $("#ddlRelationshipType option:selected").val();
                    var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                        return (a[1] === jsLang && a[0] === jsLangType);
                    });
                    var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                        return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                    });
                    if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                        var Relationship = rela1[0];
                        $.each(Relationship[2], function (index, value) {
                            var optRel2 = value.toString();
                            article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                        })
                        if ($(Relationship[2]).length == 0) {
                            var optRel2 = Relationship[1].toString();
                            article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                        }
                    } else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                        var Relationship = rela2[0];
                        article += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                    } else {
                        switch (jsLang) {
                            case 'Master Agreement':
                                if (relationtypefetch == "Sub-Agreement") {
                                    article += '<option value="Sub-Agreement" selected>Sub-Agreement</option>';
                                    article += '<option value="SOW">SOW</option>';
                                } else {
                                    article += '<option value="Sub-Agreement" >Sub-Agreement</option>';
                                    article += '<option value="SOW" selected>SOW</option>';
                                }
                                break;
                            case 'Sub-Agreement':
                            case 'SOW':
                                article += '<option value="Master Agreement">Master Agreement</option>';
                                break;
                            case 'Prime Contractor Agreement':
                                article += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                break;
                            case 'Sub Contractor Agreement':
                                article += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                break;
                            case 'Blanket Agreement':
                                if (relationtypefetch == "Order") {
                                    article += '<option value="Order" selected>Order</option>';
                                    article += '<option value="Invoice">Invoice</option>';
                                } else {
                                    article += '<option value="Order">Order</option>';
                                    article += '<option value="Invoice" selected>Invoice</option>';
                                }

                                break;
                            case 'Order':
                            case 'Invoice':
                                article += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                break;
                            case 'Original':
                                if (relationtypefetch == "Duplicate") {
                                    article += '<option value="Duplicate" selected>Duplicate</option>';
                                    article += '<option value="Copy">Copy</option>';
                                } else {
                                    article += '<option value="Duplicate">Duplicate</option>';
                                    article += '<option value="Copy" selected>Copy</option>';
                                }
                                break;
                            case 'Duplicate':
                            case 'Copy':
                                article += '<option value="Original">Original</option>';
                                break;
                            case 'Past Contract':
                                article += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                break;
                            case 'Renegotiated Contract':
                                article += '<option value="Past Contract">Past Contract</option>';
                                break;
                            case 'Primary Contract':
                                if (relationtypefetch == "Amendment") {
                                    article += '<option value="Amendment" selected>Amendment</option>';
                                    article += '<option value="Modification">Modification</option>';
                                } else {
                                    article += '<option value="Amendment">Amendment</option>';
                                    article += '<option value="Modification" selected>Modification</option>';
                                }
                                break;
                            case 'Amendment':
                            case 'Modification':
                                article += '<option value="Primary Contract">Primary Contract</option>';
                                break;
                            case 'Other':
                                article += '<option value="Other">Other</option>';
                                break;
                        }
                    }
                    article += '</select></td></tr>';
                } else {
                    article += '<td class="ddl"></td></tr>'
                }
                $("#tblPopupContracts").append(article);
                relatedContractsTag.push(item.ContractTitle.trim());
                //manoj
                //article += '<td class="ddl"></td>'
                //article += '  </tr>'
                //$("#tblPopupContracts").append(article);
                //relatedContractsTag.push(item.ContractTitle.trim());
            }
        }
        $("#" + item.RowKey).click(function () {
            if (this.checked) {
                if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                    var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                    var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                    var jsLangType = $("#ddlRelationshipType option:selected").val();
                    $("#relatedrole").html("Relationship");
                    var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                        return (a[1] === jsLang && a[0] === jsLangType);
                    });
                    var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                        return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                    });
                    if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                        var Relationship = rela1[0];
                        $.each(Relationship[2], function (index, value) {
                            var optRel2 = value.toString();
                            vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                        })

                        if ($(Relationship[2]).length == 0) {
                            var optRel2 = Relationship[1].toString();

                            vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                        }
                    } else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                        var Relationship = rela2[0];
                        vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                    } else {
                        switch (jsLang) {
                            case 'Master Agreement':
                                vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                vOptions += '<option value="SOW">SOW</option>';
                                break;
                            case 'Sub-Agreement':
                            case 'SOW':
                                vOptions += '<option value="Master Agreement">Master Agreement</option>';
                                break;
                            case 'Prime Contractor Agreement':
                                vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                break;
                            case 'Sub Contractor Agreement':
                                vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                break;
                            case 'Blanket Agreement':
                                vOptions += '<option value="Order">Order</option>';
                                vOptions += '<option value="Invoice">Invoice</option>';
                                break;
                            case 'Order':
                            case 'Invoice':
                                vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                break;
                            case 'Original':
                                vOptions += '<option value="Duplicate">Duplicate</option>';
                                vOptions += '<option value="Copy">Copy</option>';
                                break;
                            case 'Duplicate':
                            case 'Copy':
                                vOptions += '<option value="Original">Original</option>';
                                break;
                            case 'Past Contract':
                                vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                break;
                            case 'Renegotiated Contract':
                                vOptions += '<option value="Past Contract">Past Contract</option>';
                                break;
                            case 'Primary Contract':
                                vOptions += '<option value="Amendment">Amendment</option>';
                                vOptions += '<option value="Modification">Modification</option>';
                                break;
                            case 'Amendment':
                            case 'Modification':
                                vOptions += '<option value="Primary Contract">Primary Contract</option>';
                                break;
                            case 'Other':
                                vOptions += '<option value="Other">Other</option>';
                                break;
                        }
                    }
                    vOptions += '</select>';
                    $(this).parent().parent().children(".ddl").append(vOptions);
                }
            } else {

                $(this).parent().parent().children(".ddl").empty();
            }
            showallspans(this);

        });
    }
}

function showallspans(obj) {
    if (obj == "") {
        var reltypeselected = $("#ddlRelationshipType").find('option:selected').val();
        if (reltypeselected != 0 && $(this).parent().parent().children(".ddl").find('option:selected').text() != "") {
            $('#liSelectedRelatedContract').empty();
            $('input:checkbox[name="RelatedContract"]:checked').each(function () {
                $('#liSelectedRelatedContract').append('<span style="font-size:11px;" id=' + this.id + '>' + this.value + ' (' + $(this).parent().parent().children(".ddl").find('option:selected').text() + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationshipselected(this);" style="float:right" /></span>');

                if (arrRelatedContractsSelected.length > 0) {
                    var rtypeindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";").indexOf(this.id);
                    var rtypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";");
                    var reltypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType.split(";");
                    rtypetoremove[rtypeindex] = $(this).parent().parent().children(".ddl").find('option:selected').text();
                    reltypetoremove[rtypeindex] = $("#ddlRelationshipTypeParent").find('option:selected').text();
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType = rtypetoremove.join(";");
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType = reltypetoremove.join(";");
                }
            });
        }

    } else {
        var spanid = $(obj).parent().parent().children().find("input[type=checkbox]")[0].id;
        if (spanid != "") {
            var chkObj = $("#" + spanid)[0];
            $("#liSelectedRelatedContract #" + spanid).remove();
            if ($(chkObj).parent().parent().children(".ddl").find('option:selected').text() != "") {
                $('#liSelectedRelatedContract').append('<span style="font-size:11px;" id=' + chkObj.id + '>' + chkObj.value + ' (' + $(chkObj).parent().parent().children(".ddl").find('option:selected').text() + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationshipselected(this);" style="float:right" /></span>');
            }
            if (arrRelatedContractsSelected.length > 0) {
                var rtypeindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";").indexOf(chkObj.id);
                var rtypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";");
                var reltypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType.split(";");
                rtypetoremove[rtypeindex] = $(chkObj).parent().parent().children(".ddl").find('option:selected').text();
                reltypetoremove[rtypeindex] = $("#ddlRelationshipTypeParent").find('option:selected').text();
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType = rtypetoremove.join(";");
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType = reltypetoremove.join(";");
            }
        }
    }

}

function collectrelatedcontractrowkey(obj) {
    if (requiredValidator('popupContracts', false)) {
        //$('#liSelectedRelatedContract').empty();
        //$('input:checkbox[name="RelatedContract"]:checked').each(function () {
        if (arrRelatedcontractRowkey.length > 0) {
            arrRelatedcontractRowkey = $.grep(arrRelatedcontractRowkey, function (n) {
                return n.trim() != obj.id;
            });
        }
        if (obj != "" && obj.checked == true) {
            //manoj
            $("#liSelectedRelatedContract #" + obj.id).remove();
            //manoj
            //$("#" + obj.id).trigger("click");
            $('#liSelectedRelatedContract').append('<span style="font-size:11px;" id=' + obj.id + '>' + obj.value + ' (' + $(obj).parent().parent().children(".ddl").find('option:selected').text() + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationshipselected(this);" style="float:right" /></span>');
            arrRelatedcontractRowkey.push(obj.id);
        }

        //});
        var SelectedRelConID = [];
        SelectedRelConID = [];
        $('input:checkbox[name="RelatedContract"]:checked').each(function () {
            SelectedRelConID.push(this.id);
        });
        if (SelectedRelConID.length > 0) {
            $("#relatedrole").css('display', '');
        } else {
            //$("#relatedrole").html("");
            $("#relatedrole").css('display', 'none');
        }

        if (obj != "" && obj.checked == true) {
            if (arrRelatedContractsSelected.length > 0) {
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID += ";" + obj.id;
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle += ";" + obj.value;
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType += ";" + $(obj).parent().parent().children(".ddl").find('option:selected').text();
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType += ";" + $("#ddlRelationshipTypeParent").find('option:selected').text();
            } else {
                arrRelatedContractsSelected.push({
                    ContractID: "",
                    ContractTitle: "",
                    RelatedContractID: obj.id,
                    RelatedContractTitle: obj.value,
                    RelationshipType: $("#ddlRelationshipTypeParent").find('option:selected').text(),
                    RelatedRelationshipType: $(obj).parent().parent().children(".ddl").find('option:selected').text(),
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName
                });
            }
        } else if (obj != "" && obj.checked == false) {
            var rtypeindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";").indexOf(obj.id);
            var rtindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";");
            var rtitle = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(";");
            var rtypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";");
            var reltypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType.split(";");
            rtindex[rtypeindex] = "";
            rtitle[rtypeindex] = "";
            rtypetoremove[rtypeindex] = "";
            reltypetoremove[rtypeindex] = "";
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID = rtindex.join(";").replace(";;", "");
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle = rtitle.join(";").replace(";;", "");
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType = rtypetoremove.join(";").replace(";;", "");
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType = reltypetoremove.join(";").replace(";;", "");
            $("#liSelectedRelatedContract").find('span#' + obj.id).remove();
        }
        RelatedContractRelationShipTypeparent = $("#ddlRelationshipTypeParent option:selected").val();

    } else {
        //$("#relatedrole").html("");
        $("#" + obj.id).prop('checked', false);
        $("#" + obj.id).parent().parent().children(".ddl").empty();
    }
}

function ViewContracts() {
    relatedContractsTag = [];
    var selectedrows = "";
    if ($("#txtSearchBoxContract").val() != "") {
        $('input:checkbox[name="RelatedContract"]:checked').each(function () {
            rowtext = this.value;
            if (rowtext != "" && rowtext.trim() == $("#txtSearchBoxContract").val().trim() && this.checked == true)
                $(this).parent().parent().remove();
        });
        selectedrows = $('input:checkbox[name="RelatedContract"]:checked').parent().parent();
    }

    var strCustomQueryRelCon = "";
    if ($("#filteroptionstatus").css('display') != 'none') {
        var RelConFilterCP = $('#ddlRelConFilterCounterparty option:selected');
        var strQryRelConFilterCP = "";
        if (RelConFilterCP != null && RelConFilterCP != "") {
            RelConFilterCP.each(function () {
                strQryRelConFilterCP += $(this).text() + "~";
            });
            strQryRelConFilterCP = removeLastChar(strQryRelConFilterCP, '~');
        }

        if (strQryRelConFilterCP != null && strQryRelConFilterCP != "") {
            strCustomQueryRelCon += "Counterparty:" + encodeURIComponent(strQryRelConFilterCP) + ";";
        }

    }

    if ($("#filteroptiontype").css('display') != 'none') {
        var RelConFilterContractTypes = $('#ddlRelConFilterContractType option:selected');
        var strQryRelConFilterCT = "";
        if (RelConFilterContractTypes != null && RelConFilterContractTypes != "") {
            RelConFilterContractTypes.each(function () {
                strQryRelConFilterCT += $(this).text() + "~";
            });
            strQryRelConFilterCT = removeLastChar(strQryRelConFilterCT, '~');
        }

        if (strQryRelConFilterCT != null && strQryRelConFilterCT != "") {
            strCustomQueryRelCon += "ContractType:" + encodeURIComponent(strQryRelConFilterCT) + ";";
        }
    }
    if (strCustomQueryRelCon != "")
        strCustomQueryRelCon = removeLastChar(strCustomQueryRelCon, ';');

    $("#tblPopupContracts").html('');
    $('#loadContract').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getrelatedcontracts?stage=&searchkeyword=' + encodeURIComponent($("#txtSearchBoxContract").val()) + '&customquery=' + strCustomQueryRelCon + '&sortbyfield=ContractTitle&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey,
            BusinessAreaLocation: $("#lblBusinessAreaPath").text(),
            UserID: localStorage.UserID
        },
        cache: false,
        success: function (data) {
            $('#loadContract').empty();
            $("#tblPopupContracts").html('');
            var datalenght = data.length;
            $("#hdnRelatedContracts").append(";" + getParameterByName("ContractID"))

            arr = [];
            RelatedContractIDarr = [];
            vRelatedContractTitlearr = [];
            RelatedRelationshipTypearr = [];
            counterpartyTags = [];
            if (arrRelatedContractsSelected.length > 0) {
                $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(";"), function () {
                    if (this != "") {
                        if ($.trim(this) != "") {
                            arr.push($.trim(this));
                        }
                    }
                });
            }

            if (arr.length > 0) {
                if (arrRelatedContractsSelected.length > 0) {
                    $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";"), function () {
                        RelatedContractIDarr.push($.trim(this));
                    });
                    $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(";"), function () {
                        vRelatedContractTitlearr.push($.trim(this));
                    });
                    $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";"), function () {
                        RelatedRelationshipTypearr.push($.trim(this));
                    });
                }
            }

            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                if ($("#hdnRelatedContracts").text().indexOf(item.RowKey) > -1) {

                } else {
                    if (arr.indexOf(item.ContractTitle.trim()) >= 0) {
                        var article = '<tr><td>';
                        article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" checked class="css1-checkbox" value="' + item.ContractTitle + '" />';
                        article += '<label for="' + item.RowKey + '" class="css1-label"><a href="/Contracts/ContractDetails?ContractID=' + item.RowKey + '" target="_blank">' + item.ContractTitle + '</a></label>'; //ENH487 Customer inhanc
                        article += '</td>';
                        article += '<td><label class="">' + item.ContractType + '</label></td>'
                        article += '<td><label class="">'
                        if (item.Counterparty != null && item.Counterparty != "") {
                            article += item.Counterparty
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="" style="word-break: break-all;">'
                        if (item.ContractNumber != null && item.ContractNumber != "") {
                            article += item.ContractNumber
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                        var relationtypefetch = "";
                        if (arrRelatedContractsSelected.length > 0) {
                            var indexvaluetake = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(';').indexOf(item.ContractTitle.trim());
                            relationtypefetch = RelatedRelationshipTypearr[indexvaluetake];
                        } else {
                            if (arr.indexOf(item.ContractTitle.trim()) >= 0) {
                                var indexvaluetake = arr.indexOf(item.ContractTitle.trim());
                                relationtypefetch = RelatedRelationshipTypearr[indexvaluetake];
                            }
                        }
                        article += "<td class='ddl'><select class='f_inpt width90' onchange='showallspans(this)'>";
                        var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                        switch (jsLang) {
                            case 'Master Agreement':
                                if (relationtypefetch == "Sub-Agreement") {
                                    article += '<option value="Sub-Agreement" selected>Sub-Agreement</option>';
                                    article += '<option value="SOW">SOW</option>';
                                } else {
                                    article += '<option value="Sub-Agreement" >Sub-Agreement</option>';
                                    article += '<option value="SOW" selected>SOW</option>';
                                }
                                break;
                            case 'Sub-Agreement':
                            case 'SOW':
                                article += '<option value="Master Agreement">Master Agreement</option>';
                                break;
                            case 'Prime Contractor Agreement':
                                article += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                break;
                            case 'Sub Contractor Agreement':
                                article += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                break;
                            case 'Blanket Agreement':
                                if (relationtypefetch == "Order") {
                                    article += '<option value="Order" selected>Order</option>';
                                    article += '<option value="Invoice">Invoice</option>';
                                } else {
                                    article += '<option value="Order">Order</option>';
                                    article += '<option value="Invoice" selected>Invoice</option>';
                                }

                                break;
                            case 'Order':
                            case 'Invoice':
                                article += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                break;
                            case 'Original':
                                if (relationtypefetch == "Duplicate") {
                                    article += '<option value="Duplicate" selected>Duplicate</option>';
                                    article += '<option value="Copy">Copy</option>';
                                } else {
                                    article += '<option value="Duplicate">Duplicate</option>';
                                    article += '<option value="Copy" selected>Copy</option>';
                                }
                                break;
                            case 'Duplicate':
                            case 'Copy':
                                article += '<option value="Original">Original</option>';
                                break;
                            case 'Past Contract':
                                article += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                break;
                            case 'Renegotiated Contract':
                                article += '<option value="Past Contract">Past Contract</option>';
                                break;
                            case 'Primary Contract':
                                if (relationtypefetch == "Amendment") {
                                    article += '<option value="Amendment" selected>Amendment</option>';
                                    article += '<option value="Modification">Modification</option>';
                                } else {
                                    article += '<option value="Amendment">Amendment</option>';
                                    article += '<option value="Modification" selected>Modification</option>';
                                }
                                break;
                            case 'Amendment':
                            case 'Modification':
                                article += '<option value="Primary Contract">Primary Contract</option>';
                                break;
                            case 'Other':
                                article += '<option value="Other">Other</option>';
                                break;
                        }

                        article += '</select></td></tr>';
                        $("#tblPopupContracts").append(article);

                        relatedContractsTag.push(item.ContractTitle.trim());
                    } else {
                        var article = '<tr><td>';
                        article += '<input id="' + item.RowKey + '" type="checkbox"  name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);"  class="css1-checkbox" value="' + item.ContractTitle + '" />';
                        article += '<label for="' + item.RowKey + '" class="css1-label"><a href="/Contracts/ContractDetails?ContractID=' + item.RowKey + '" target="_blank">' + item.ContractTitle + '</a></label>'; //ENH487 Customer inhanc
                        article += '</td>';
                        article += '<td><label class="">' + item.ContractType + '</label></td>'
                        article += '<td><label class="">'
                        if (item.Counterparty != null && item.Counterparty != "") {
                            article += item.Counterparty
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="" style="word-break: break-all;">'
                        if (item.ContractNumber != null && item.ContractNumber != "") {
                            article += item.ContractNumber
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                        article += '<td class="ddl"><td>';
                        article += '  </tr>'
                        relatedContractsTag.push(item.ContractTitle.trim());
                        $("#tblPopupContracts").append(article);
                    }
                }
                $("#" + item.RowKey).click(function () {
                    if (this.checked) {
                        if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                            var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                            var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                            var jsLangType = $("#ddlRelationshipType option:selected").val();
                            var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                return (a[1] === jsLang && a[0] === jsLangType);
                            });
                            var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                            });
                            if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                var Relationship = rela1[0];
                                $.each(Relationship[2], function (index, value) {
                                    var optRel2 = value.toString();
                                    vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                })
                                if ($(Relationship[2]).length == 0) {
                                    var optRel2 = Relationship[1].toString();
                                    vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                }
                            } else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                var Relationship = rela2[0];
                                vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                            } else {
                                switch (jsLang) {
                                    case 'Master Agreement':
                                        vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                        vOptions += '<option value="SOW">SOW</option>';
                                        break;
                                    case 'Sub-Agreement':
                                    case 'SOW':
                                        vOptions += '<option value="Master Agreement">Master Agreement</option>';
                                        break;
                                    case 'Prime Contractor Agreement':
                                        vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                        break;
                                    case 'Sub Contractor Agreement':
                                        vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                        break;
                                    case 'Blanket Agreement':
                                        vOptions += '<option value="Order">Order</option>';
                                        vOptions += '<option value="Invoice">Invoice</option>';
                                        break;
                                    case 'Order':
                                    case 'Invoice':
                                        vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                        break;
                                    case 'Original':
                                        vOptions += '<option value="Duplicate">Duplicate</option>';
                                        vOptions += '<option value="Copy">Copy</option>';
                                        break;
                                    case 'Duplicate':
                                    case 'Copy':
                                        vOptions += '<option value="Original">Original</option>';
                                        break;
                                    case 'Past Contract':
                                        vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                        break;
                                    case 'Renegotiated Contract':
                                        vOptions += '<option value="Past Contract">Past Contract</option>';
                                        break;
                                    case 'Primary Contract':
                                        vOptions += '<option value="Amendment">Amendment</option>';
                                        vOptions += '<option value="Modification">Modification</option>';
                                        break;
                                    case 'Amendment':
                                    case 'Modification':
                                        vOptions += '<option value="Primary Contract">Primary Contract</option>';
                                        break;
                                    case 'Other':
                                        vOptions += '<option value="Other">Other</option>';
                                        break;
                                }
                            }
                            vOptions += '</select>';
                            $(this).parent().parent().children(".ddl").append(vOptions);
                        }
                    } else {

                        $(this).parent().parent().children(".ddl").empty();
                    }
                    showallspans(this);

                });
            }
            collectrelatedcontractrowkey("");
            var vCount = $("#tblPopupContracts tr").length;
            if (vCount != 0) {
                $('#loadContract').html('');
                $("#tblPopupContracts tr td").attr('style', 'vertical-align: top');
                $('#compact-paginationRelatedContracts').css('display', '');
                $('#compact-paginationRelatedContracts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    type: 'tbody',
                    typeID: 'tblPopupContracts',
                    row: 'tr',
                    cssStyle: 'compact-theme'
                });
            } else {
                $('#loadContract').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $('#compact-paginationRelatedContracts').css('display', 'none');
            }

            if (selectedrows != null && selectedrows != "") {
                if (selectedrows != null && selectedrows != "") {
                    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
                        rowtext = $(this).parent().parent().children().find("input[type=checkbox]")[0].value;
                        if (rowtext != "") {
                            $(selectedrows).each(function (i, item) {
                                if (item.children[0].textContent.trim() == rowtext.trim()) {
                                    selectedrows.splice(i, 1);
                                }
                            });
                        }
                    });
                    $(selectedrows).each(function (i, item) {
                        $(item).hide();
                    });
                    $("#tblPopupContracts").append(selectedrows);
                }
            }
            $("#txtSearchBoxContract").autocomplete({
                source: relatedContractsTag,
                minLength: 2,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxContract").val(uidetails.item.label);
                    ViewContracts();
                }
            });
            $(".validelement").each(function (index, element) {
                $(element).removeClass("error");
                $("#errormsg_" + element.id).remove();
            });
            if ($('#dvfilter').is(':hidden')) { } else {
                $('#dvfilter').slideToggle();
            }
        },
        error: function () {
            collectrelatedcontractrowkey("");
            if ($('#dvfilter').is(':hidden')) { } else {
                $('#dvfilter').slideToggle();
            }
            $(".validelement").each(function (index, element) {
                $(element).removeClass("error");
                $("#errormsg_" + element.id).remove();
            });
            $('#compact-paginationRelatedContracts').css('display', 'none');
            $('#loadContract').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });

}

function CreateRelatedContracts() {
    var vRelatedContractID = "";
    var vRelatedContractTitle = "";
    var vChildRelation = "";
    var vParentRelationShip = "";

    //$('input:checkbox[name="RelatedContract"]:checked').each(function () {
    //    if (vRelatedContractID == "") {
    //        vRelatedContractID = this.id;
    //        vRelatedContractTitle = this.value;
    //        vChildRelation = $(this).parent().parent().children(".ddl").find('option:selected').text();
    //        vParentRelationShip = $("#ddlRelationshipTypeParent").find('option:selected').text();
    //    }
    //    else {
    //        vRelatedContractID += "; " + this.id;
    //        vRelatedContractTitle += "; " + this.value;
    //        vChildRelation += "; " + $(this).parent().parent().children(".ddl").find('option:selected').text();
    //        vParentRelationShip += "; " + $("#ddlRelationshipTypeParent").find('option:selected').text();
    //    }
    //});

    if (arrRelatedContractsSelected.length > 0) {
        vRelatedContractID = arrRelatedContractsSelected[0].RelatedContractID;
        vRelatedContractTitle = arrRelatedContractsSelected[0].RelatedContractTitle;
        vChildRelation = arrRelatedContractsSelected[0].RelatedRelationshipType;
        vParentRelationShip = arrRelatedContractsSelected[0].RelationshipType;
    }

    if (vRelatedContractID != "") {
        if (requiredValidator('popupContracts', false)) {
            if (addbuttonclick) {
                arrRelatedContracts.push({
                    ContractID: "",
                    ContractTitle: "",
                    RelatedContractID: vRelatedContractID,
                    RelatedContractTitle: vRelatedContractTitle,
                    RelationshipType: vParentRelationShip,
                    RelatedRelationshipType: vChildRelation,
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName
                });

                $("#popupContracts").dialog("close");
                if ($('#RelatedContracts').val() != "") {
                    var oldrelatedcontrct = $('#RelatedContracts').val();
                    if (oldrelatedcontrct.trim() != "") {
                        $('#RelatedContracts').val(oldrelatedcontrct + ";" + vRelatedContractTitle);
                    }
                }
                else {
                    $('#RelatedContracts').val(vRelatedContractTitle);
                }
            } else {
                $("#loadingPage").fadeIn();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName('ContractID') + '/relatedcontracts',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                    data: {
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblContractTitle").text(),
                        RelatedContractID: vRelatedContractID,
                        RelatedContractTitle: vRelatedContractTitle,
                        RelationshipType: vParentRelationShip,
                        RelatedRelationshipType: vChildRelation,
                        CreatedBy: localStorage.UserName,
                        ModifiedBy: localStorage.UserName,
                    },
                    cache: false,
                    success: function (person) {
                        arrRelatedContractsSelected = [];
                        arrRelatedcontractRowkey = [];
                        $("#popupContracts").dialog("close");
                        $("#loadingPage").fadeOut();
                        $('#liSelectedRelatedContract').empty();
                        BindRelatedContracts();
                    },
                    error: function (request) {
                        $("#loadingPage").fadeOut();
                    }
                });
            }
            return true;
        }
    } else {
        swal("", "No contract has been selected.");
        $("#popupContracts").dialog("close");
        return true;
    }
}

function BindRelatedContracts(contractid) {
    if (contractid == null || contractid == "") {
        contractid = vContractID;
    }
    $("#ulRelatedContracts").empty();
    $('#liSelected').empty();
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/relatedcontracts?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey, 'UserID': localStorage.UserID
        },
        cache: false,
        success: function (contactsJsonPayload) {
            $("#loadingPage").fadeOut();
            arrRelatedcontractRowkey = [];
            arrRelatedContractsSelected = [];
            $("#ulRelatedContracts").empty();
            var count = 0;
            $("#hdnRelatedContracts").text("");
            $(contactsJsonPayload).each(function (i, item) {
                OlRelatedContracts = contactsJsonPayload;
                var myUrl = '/Contracts/ContractDetails?ContractID=' + encodeURI(item.RelatedContractID);
                arrRelatedcontractRowkey.push(item.RelatedContractID);
                if (arrRelatedContractsSelected.length > 0) {
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID += ";" + item.RelatedContractID;
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle += ";" + item.RelatedContractTitle;
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType += ";" + item.RelatedRelationshipType;
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType += ";" + item.RelationshipType;
                }
                else {
                    arrRelatedContractsSelected.push({
                        ContractID: "",
                        ContractTitle: "",
                        RelatedContractID: item.RelatedContractID,
                        RelatedContractTitle: item.RelatedContractTitle,
                        RelationshipType: item.RelationshipType,
                        RelatedRelationshipType: item.RelatedRelationshipType,
                        CreatedBy: item.CreatedBy,
                        ModifiedBy: item.ModifiedBy
                    });
                }

                $("#hdnRelatedContracts").append(item.RelatedContractID + ';');
                if (item.Permission == "InRecycleBin") {
                    if ($("#ulRelatedContracts").html() == '')
                        $("#ulRelatedContracts").append('<li><span style="color: #ff4d4d" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')<li>');
                    else
                        $("#ulRelatedContracts").append('<li><span style="color: #ff4d4d" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')<li>');
                    $('#liSelected').append('<span style="font-size:11px;" id=' + item.RelatedContractID + '>' + item.RelatedContractTitle + ' (' + item.RelatedRelationshipType + ')</span>');
                }
                else {
                    if (item.Permission != "" && item.Permission != "No Access") {
                        $("#ulRelatedContracts").append('<li><a href="javascript:getRelatedContractDetails(\'' + item.RelatedContractID + '\');">' + item.RelatedContractTitle + '</a> (' + item.RelatedRelationshipType + ')</li>');
                        $('#liSelected').append('<span style="font-size:11px;" id=' + item.RelatedContractID + '>' + item.RelatedContractTitle + ' (' + item.RelatedRelationshipType + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationship(this);" style="float:right" /></span>');
                    } else {
                        if ($("#ulRelatedContracts").html() == '')
                            $("#ulRelatedContracts").append('<li><span class="disabled_item_link" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')<li>');
                        else
                            $("#ulRelatedContracts").append('<li><span class="disabled_item_link" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')<li>');

                        $('#liSelected').append('<span style="font-size:11px;" id=' + item.RelatedContractID + '>' + item.RelatedContractTitle + ' (' + item.RelatedRelationshipType + ')</span>');
                    }
                }
            });
        },
        error: function (contactsJsonPayload) {
            $("#hdnRelatedContracts").text("");
            $("#ulRelatedContracts").empty();
            arrRelatedcontractRowkey = [];
            arrRelatedContractsSelected = [];
            if (!$("#lblRelatedContractsCount").text().trim()) {
                $("#ulRelatedContracts").append('No items found.');
            }
            else {
                $("#ulRelatedContracts").append('No items found.');
            }
        }
    });
}

function BindRelatedContractsFilters() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getcontracttypesforrelatedcontracts',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: $("#lblBusinessAreaPath").text(), UserID: localStorage.UserID
        },
        cache: false,
        success: function (ContractTypes) {
            $("#ddlRelConFilterContractType").empty();
            var control = "";
            var datalenght = ContractTypes.length;
            for (var i = 0; i < datalenght; i++) {
                var item = ContractTypes[i];
                control += "<option value=" + encodeURI(item.ContractType) + ">" + item.ContractType + "</option>";
            }

            $("#ddlRelConFilterContractType").append(control);
            $("#ddlRelConFilterContractType").chosen().trigger("chosen:updated");
        },
        error: function (ContractTypes) {

        }
    });
    //Performance Optimization
    //$.ajax({
    //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
    //    type: 'GET',
    //    dataType: 'json',
    //    headers: {
    //        'eContracts-ApiKey': localStorage.APIKey
    //    },
    //    cache: false,
    //    success: function (Settings) {
    //        var IsSystem = false;
    //        if (Settings.CounterpartyRelationshipScope.trim() == "System Level") {
    //            IsSystem = true;
    //        }
    //        $.ajax({
    //            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty',
    //            type: 'GET',
    //            dataType: 'json',
    //            "Content-Type": "application/json",
    //            headers: {
    //                'eContracts-ApiKey': localStorage.APIKey
    //            },
    //            cache: false,
    //            success: function (Counterparties) {
    //                $("#ddlRelConFilterCounterparty").empty();
    //                var control = "";
    //                var datalenght = Counterparties.length;
    //                for (var i = 0; i < datalenght; i++) {
    //                    var item = Counterparties[i];
    //                    if (item.Status == "Active") {
    //                        if (IsSystem) {
    //                            control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                        }
    //                        else {
    //                            if (typeof item.BusinessAreasPath != 'undefined' && item.BusinessAreasPath != null && item.BusinessAreasPath != "") {
    //                                if (item.IsGlobal == "No") {
    //                                    if (businessAreaPath != "") {
    //                                        var isRelCounterpartyFilterAdd = false;
    //                                        $.each(item.BusinessAreasPath.split(";"), function () {
    //                                            if (businessAreaPath == $.trim(this)) {
    //                                                isRelCounterpartyFilterAdd = true;
    //                                            }
    //                                        });
    //                                        if (isRelCounterpartyFilterAdd) {
    //                                            control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                                        }
    //                                    }
    //                                }
    //                                else {
    //                                    control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                                }
    //                            }
    //                            else {
    //                                control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                            }

    //                        }
    //                    }
    //                }

    //                $("#ddlRelConFilterCounterparty").append(control);
    //                $("#ddlRelConFilterCounterparty").chosen().trigger("chosen:updated");
    //            },
    //            error: function (Counterparties) {

    //            }
    //        });


    //    },
    //    error: function (Settings) {
    //        var IsSystem = true;
    //        $.ajax({
    //            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty',
    //            type: 'GET',
    //            dataType: 'json',
    //            "Content-Type": "application/json",
    //            headers: {
    //                'eContracts-ApiKey': localStorage.APIKey
    //            },
    //            cache: false,
    //            success: function (Counterparties) {
    //                $("#ddlRelConFilterCounterparty").empty();
    //                var control = "";
    //                var datalenght = Counterparties.length;
    //                for (var i = 0; i < datalenght; i++) {
    //                    var item = Counterparties[i];
    //                    if (item.Status == "Active") {
    //                        if (IsSystem) {
    //                            control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                        }
    //                        else {
    //                            if (typeof item.BusinessAreasPath != 'undefined' && item.BusinessAreasPath != null && item.BusinessAreasPath != "") {
    //                                if (item.IsGlobal == "No") {
    //                                    if (businessAreaPath != "") {
    //                                        var isRelCounterpartyFilterAdd = false;
    //                                        $.each(item.BusinessAreasPath.split(";"), function () {
    //                                            if (businessAreaPath == $.trim(this)) {
    //                                                isRelCounterpartyFilterAdd = true;
    //                                            }
    //                                        });
    //                                        if (isRelCounterpartyFilterAdd) {
    //                                            control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                                        }
    //                                    }
    //                                }
    //                                else {
    //                                    control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                                }
    //                            }
    //                            else {
    //                                control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
    //                            }

    //                        }
    //                    }
    //                }

    //                $("#ddlRelConFilterCounterparty").append(control);
    //                $("#ddlRelConFilterCounterparty").chosen().trigger("chosen:updated");
    //            },
    //            error: function (Counterparties) {

    //            }
    //        });

    //    }
    //});
    //Performance Optimization
}

function BindContractRelationships() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractrelationships',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            var options = "";
            if (data == null || data == "") {
                var relationshipType = "Master Agreement-Sub-Agreement/SOW;Prime Contractor Agreement-Sub Contractor Agreement;Blanket Agreement-Order/Invoice;Original-Duplicate/Copy;Past Contract-Renegotiated Contract;Primary Contract-Amendment/Modification;Other";
                var relationship1 = "Master Agreement;Prime Contractor Agreement;Blanket Agreement;Original;Past Contract;Primary Contract;Other";
                var relationship2 = "Sub-Agreement/SOW;Sub Contractor Agreement;Order/Invoice;Duplicate/Copy;Renegotiated Contract;Amendment/Modification;Other";
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/addrelationshipsettings?relationshiptypes=' + relationshipType + '&rel1=' + relationship1 + '&rel2=' + relationship2,
                    type: 'PUT',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                    },
                    cache: false,
                    success: function (data) {
                        $(data).each(function (i, item) {

                            var Relationship2 = [];
                            //Get all the relationship2 names
                            $(item.Relationship2).find('RelationshipName').each(function () {
                                var Relationship2each = $(this).text();
                                if (Relationship2each != null && typeof (Relationship2each) != "undefined" && Relationship2each != "")
                                    Relationship2.push(Relationship2each)
                            });
                            RelationshipTypes.push([item.RelationshipType, item.Relationship1, Relationship2]);
                            options += '<option value="' + item.RelationshipType + '">' + item.RelationshipType + '</option>';
                        });
                        $("#ddlRelationshipType").append(options);
                    },
                    error: function (person) {
                        RelationshipTypes = [];
                    }
                });
            }
            else {
                $(data).each(function (i, item) {

                    var Relationship2 = [];
                    //Get all the relationship2 names
                    $(item.Relationship2).find('RelationshipName').each(function () {
                        var Relationship2each = $(this).text();
                        if (Relationship2each != null && typeof (Relationship2each) != "undefined" && Relationship2each != "")
                            Relationship2.push(Relationship2each)
                    });
                    RelationshipTypes.push([item.RelationshipType, item.Relationship1, Relationship2]);
                    options += '<option value="' + item.RelationshipType + '">' + item.RelationshipType + '</option>';
                });
                $("#ddlRelationshipType").append(options);
            }
        },
        error: function (data) {
            var options = "";
            var relationshipType = "Master Agreement-Sub-Agreement/SOW;Prime Contractor Agreement-Sub Contractor Agreement;Blanket Agreement-Order/Invoice;Original-Duplicate/Copy;Past Contract-Renegotiated Contract;Primary Contract-Amendment/Modification;Other";
            var relationship1 = "Master Agreement;Prime Contractor Agreement;Blanket Agreement;Original;Past Contract;Primary Contract;Other";
            var relationship2 = "Sub-Agreement/SOW;Sub Contractor Agreement;Order/Invoice;Duplicate/Copy;Renegotiated Contract;Amendment/Modification;Other";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/addrelationshipsettings?relationshiptypes=' + relationshipType + '&rel1=' + relationship1 + '&rel2=' + relationship2,
                type: 'PUT',
                dataType: 'json',
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                },
                cache: false,
                success: function (data) {
                    $(data).each(function (i, item) {

                        var Relationship2 = [];
                        //Get all the relationship2 names
                        $(item.Relationship2).find('RelationshipName').each(function () {
                            var Relationship2each = $(this).text();
                            if (Relationship2each != null && typeof (Relationship2each) != "undefined" && Relationship2each != "")
                                Relationship2.push(Relationship2each)
                        });
                        RelationshipTypes.push([item.RelationshipType, item.Relationship1, Relationship2]);
                        options += '<option value="' + item.RelationshipType + '">' + item.RelationshipType + '</option>';
                    });
                    $("#ddlRelationshipType").append(options);
                },
                error: function (person) {
                    RelationshipTypes = [];
                }
            });
        }
    });
}

$("#ddlRelationshipType").change(function () {
    $("#ddlRelationshipTypeParent").empty();
    var jsLang = this.value;
    var rowK = jQuery.grep(RelationshipTypes, function (a) {
        return a[0] === jsLang;
    });
    if (rowK != null && typeof (rowK) != "undefined" && rowK.length != 0) {
        var Relationship = rowK[0];
        $("#ddlRelationshipTypeParent").append("<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>");
        $.each(Relationship[2], function (index, value) {
            var optRel2 = value.toString();
            $("#ddlRelationshipTypeParent").append("<option value='" + optRel2 + "'>" + optRel2 + "</option>");
        })
        //if ($(Relationship[2]).length == 0) {
        //    var optRel2 = Relationship[1].toString();
        //    $("#ddlRelationshipTypeParent").append("<option value='" + optRel2 + "'>" + optRel2 + "</option>");
        //}
    }
    else {
        switch (jsLang) {
            case 'Master Agreement':
                $("#ddlRelationshipTypeParent").append("<option value='Master Agreement'>Master Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Sub-Agreement'>Sub-Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='SOW'>SOW</option>");
                break;
            case 'Prime Contractor Agreement':
                $("#ddlRelationshipTypeParent").append("<option value='Prime Contractor Agreement'>Prime Contractor Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Sub Contractor Agreement'>Sub Contractor Agreement</option>");
                break;
            case 'Blanket Agreement':
                $("#ddlRelationshipTypeParent").append("<option value='Blanket Agreement'>Blanket Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Order'>Order</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Invoice'>Invoice</option>");
                break;
            case 'Original':
                $("#ddlRelationshipTypeParent").append("<option value='Original'>Original</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Duplicate'>Duplicate</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Copy'>Copy</option>");
                break;
            case 'Past Contract':
                $("#ddlRelationshipTypeParent").append("<option value='Past Contract'>Past Contract</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Renegotiated Contract'>Renegotiated Contract</option>");
                break;
            case 'Primary Contract':
                $("#ddlRelationshipTypeParent").append("<option value='Primary Contract'>Primary Contract</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Amendment'>Amendment</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Modification'>Modification</option>");
                break;
            case 'Other':
                $("#ddlRelationshipTypeParent").append("<option value='Other'>Other</option>");
                break;
        }
    }

    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
        $(this).parent().parent().children(".ddl").empty();
        var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
        var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
        RelatedContractRelationShipTypeparent = jsLang;
        var jsLangType = $("#ddlRelationshipType option:selected").val();
        var rela1 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[1] === jsLang && a[0] === jsLangType);
        });
        var rela2 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
        });
        if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
            var Relationship = rela1[0];
            $.each(Relationship[2], function (index, value) {
                var optRel2 = value.toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            });
            //$(Relationship[2]).each(function () {
            //    var optRel2 = value.toString();
            //    vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            //})
            if ($(Relationship[2]).length == 0) {
                var optRel2 = Relationship[1].toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            }
        }
        else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
            var Relationship = rela2[0];
            vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
        }
        else {
            switch (jsLang) {
                case 'Master Agreement':
                    vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                    vOptions += '<option value="SOW">SOW</option>';
                    break;
                case 'Sub-Agreement':
                case 'SOW':
                    vOptions += '<option value="Master Agreement">Master Agreement</option>';
                    break;
                case 'Prime Contractor Agreement':
                    vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                    break;
                case 'Sub Contractor Agreement':
                    vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                    break;
                case 'Blanket Agreement':
                    vOptions += '<option value="Order">Order</option>';
                    vOptions += '<option value="Invoice">Invoice</option>';
                    break;
                case 'Order':
                case 'Invoice':
                    vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                    break;
                case 'Original':
                    vOptions += '<option value="Duplicate">Duplicate</option>';
                    vOptions += '<option value="Copy">Copy</option>';
                    break;
                case 'Duplicate':
                case 'Copy':
                    vOptions += '<option value="Original">Original</option>';
                    break;
                case 'Past Contract':
                    vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                    break;
                case 'Renegotiated Contract':
                    vOptions += '<option value="Past Contract">Past Contract</option>';
                    break;
                case 'Primary Contract':
                    vOptions += '<option value="Amendment">Amendment</option>';
                    vOptions += '<option value="Modification">Modification</option>';
                    break;
                case 'Amendment':
                case 'Modification':
                    vOptions += '<option value="Primary Contract">Primary Contract</option>';
                    break;
                case 'Other':
                    vOptions += '<option value="Other">Other</option>';
                    break;
            }
        }

        vOptions += '</select>';
        $(this).parent().parent().children(".ddl").append(vOptions);
    });
    showallspans("");
});

$("#ddlRelationshipTypeParent").change(function () {

    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
        $(this).parent().parent().children(".ddl").empty();
        var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
        var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
        RelatedContractRelationShipTypeparent = jsLang;
        var jsLangType = $("#ddlRelationshipType option:selected").val();
        var rela1 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[1] === jsLang && a[0] === jsLangType);
        });
        var rela2 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
        });
        if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
            var Relationship = rela1[0];
            $.each(Relationship[2], function (index, value) {
                var optRel2 = value.toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            });
            //$.each(Relationship[2], function (index, value) {
            //    var optRel2 = value.toString();
            //    vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            //})
            if ($(Relationship[2]).length == 0) {
                var optRel2 = Relationship[1].toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            }
        }
        else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
            var Relationship = rela2[0];
            vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
        }
        else {
            switch (jsLang) {
                case 'Master Agreement':
                    vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                    vOptions += '<option value="SOW">SOW</option>';
                    break;
                case 'Sub-Agreement':
                case 'SOW':
                    vOptions += '<option value="Master Agreement">Master Agreement</option>';
                    break;
                case 'Prime Contractor Agreement':
                    vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                    break;
                case 'Sub Contractor Agreement':
                    vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                    break;
                case 'Blanket Agreement':
                    vOptions += '<option value="Order">Order</option>';
                    vOptions += '<option value="Invoice">Invoice</option>';
                    break;
                case 'Order':
                case 'Invoice':
                    vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                    break;
                case 'Original':
                    vOptions += '<option value="Duplicate">Duplicate</option>';
                    vOptions += '<option value="Copy">Copy</option>';
                    break;
                case 'Duplicate':
                case 'Copy':
                    vOptions += '<option value="Original">Original</option>';
                    break;
                case 'Past Contract':
                    vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                    break;
                case 'Renegotiated Contract':
                    vOptions += '<option value="Past Contract">Past Contract</option>';
                    break;
                case 'Primary Contract':
                    vOptions += '<option value="Amendment">Amendment</option>';
                    vOptions += '<option value="Modification">Modification</option>';
                    break;
                case 'Amendment':
                case 'Modification':
                    vOptions += '<option value="Primary Contract">Primary Contract</option>';
                    break;
                case 'Other':
                    vOptions += '<option value="Other">Other</option>';
                    break;
            }
        }

        vOptions += '</select>';
        $(this).parent().parent().children(".ddl").append(vOptions);
    });
    showallspans("");
});

function ClearShareForm() {
    $("#hdDocumentID").val('');
    $("#txtShareNotes").val('');
    //$("#txtShareExpIn").val('3');
    $("#txtShareExpIn").val('');
    $('#tblShareDocument').empty();
    $('#tblShareDocument').empty();
    GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
    $('#chkAutoUpdateStatusShareDoc').attr('checked', false);
    if (contractItem.IsFinalized == 'Yes') {
        $("#trAutoUpdateStatusShareDoc").css('display', 'none');
    } else {
        $("#trAutoUpdateStatusShareDoc").css('display', 'none');
    }
    $('#chkDisclose').attr('checked', false);
    var vSignee = '<tr>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareDocument1" name="ShareDocumentName1" maxlength="42" title="Name" placeholder="Name" type="text" class="f_inpt width90 validelement" />';
    vSignee += '</td>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareDocumentEmail1" name="ShareDocumentEmail1" maxlength="50" title="Email ID" placeholder="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">&nbsp;</td>';
    vSignee += '</tr>';
    $('#tblShareDocument').html(vSignee);
}

function AddRenewalTerm(isMultiple, isRenew) {
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    RenewalAddFlag = true;
    var length = $("#renewalViewHistoryTerm tr").length;
    $("#txtRenewStartDate").prop('disabled', false);
    $("#txtRenewStartDate").addClass('form-contro-Date');
    $("#txtRenewStartDate").removeClass('form-contro-NoDate');
    $('input[type="radio"][name="rdRenewTermEndDate"][value="EndDate"]').prop('disabled', false);
    $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('disabled', false);
    GetValuesAndAutoPopulate("ddlRenewalNotfInternalNew", "");
    $("#txtRenewalNotesNew").val('');
    $("#rdRenewTermEndDate").val('');
    $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('checked', true);
    $("#ContractTermRenewNew").val(1);
    $("#ContractTermRenewChoicesNew").val('days');
    $("#txtRenewStatus").html('<b title="Not Started" class="" style="padding: 5px 0px; display: inline-block;width: 88px;vertical-align: middle;text-align: left;height: 15px;">Not Started</b>');

    if (!isMultiple) {
        $('input[type="checkbox"][name="checkboxNotifyNew"]').prop('checked', false);
        $('input[type="radio"][name="TermsSingleMultiple"][value="Yes"]').prop('checked', true);
        $(".trSingle").css('display', '');
        $(".trMultiple").css('display', 'none');
        $('#txtRenewStartDate').datepicker('destroy');
        $('#txtRenewStartDate').datepicker({
            changeMonth: true,
            changeYear: true,
            dateFormat: DatepickerFormat,
            onSelect: function (selected) {
                var dt2 = $('#txtRenewEndDate');
                var startDate = $(this).datepicker('getDate');
                startDate.setDate(startDate.getDate() + 1);
                dt2.datepicker('option', 'minDate', startDate);
                calculateenddateRenew('txtRenewStartDate', 'ContractTermRenewChoicesNew', 'ContractTermRenewNew', 'txtRenewEndDate');
            }
        }).click(function () {
            $(this).focus()
        });

        $("#RenewalTermNew").dialog("option", "title", "Add New Term(s)");
        $("#btnAddNewTerm").html('<span class="pop_up_Content_Green">Ok</span>');
        isRenewTermClick = false;
        $("#RenewalTermNew").dialog("open");
    }
    else {
        $(".trSingle").css('display', 'none');
        $(".trMultiple").css('display', '');
        $('#txtRenewStartDate').datepicker('destroy');
        $('#txtRenewStartDate').datepicker({
            changeMonth: true,
            changeYear: true,
            dateFormat: DatepickerFormat,
            onSelect: function (selected) {
                var dt2 = $('#txtRenewEndDate');
                var startDate = $(this).datepicker('getDate');
                startDate.setDate(startDate.getDate() + 1);
                dt2.datepicker('option', 'minDate', startDate);
                calculateenddateRenew('txtRenewStartDate', 'ddlTermPeriodSetMulti', 'txtContractTermRenewSetMulti', 'txtRenewEndDate');
            }
        }).click(function () {
            $(this).focus()
        });

    }
    if (length != 0) {
        var lastStatus = $('#renewalViewHistoryTerm tr:last').find('td:eq(5)').text();
        var el = '', TermNameLast = '';
        if (lastStatus != "Expired") {
            el = $('#renewalViewHistoryTerm tr:last').find('td:eq(3)');
            TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
        }
        else {
            el = $('#renewalViewHistoryTerm tr').find('td:contains(Expired)').first().parent().prev().find('td:eq(3)');
            TermNameLast = $('#renewalViewHistoryTerm tr').find('td:contains(Expired)').first().parent().prev().find('td:first').text();
        }
        //var el = $('#renewalViewHistoryTerm tr:last').find('td:eq(3)');
        //var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
        var countTerm = TermNameLast.replace("Renewal ", "");
        var valdate = el != null && typeof (el) != "undefined" ? $(el).text() : "";
        if (valdate != "") {
            var parts = valdate.split("/");
            var lastdate = new Date(parts[2], parts[0] - 1, parts[1]);
            renewalPrevDate = new Date(lastdate.setDate(lastdate.getDate() + 1));
            var temend = new Date(renewalPrevDate);
            $("#txtRenewStartDate").datepicker("option", "minDate", renewalPrevDate);
            $("#txtRenewStartDate").datepicker("setDate", renewalPrevDate);
            $("#txtRenewEndDate").datepicker("option", "minDate", new Date(temend.setDate(temend.getDate() + 1)));
        }
        else {
            $("#txtRenewStartDate").datepicker("option", "minDate", null);
            $("#txtRenewEndDate").datepicker("option", "minDate", null);
            $("#txtRenewStartDate").val('');
            $("#txtRenewEndDate").val('');
        }

        if (TermNameLast == "Initial Term") {
            $("#tdNameofTerms").html("Renewal 1");
            $("#ddlTermPeriodSetRenewal").val('Renewal 1');
        }
        else {
            $("#tdNameofTerms").html("Renewal " + (parseInt(countTerm) + 1));
            $("#ddlTermPeriodSetRenewal").val("Renewal " + (parseInt(countTerm) + 1));
        }

        if (!isRenew) {
            $("#SendRenewalNotificationNew").css("display", "none");
            $("#RenewalChecklistNew").css("display", "none");
        }
        else {
            $("#SendRenewalNotificationNew").css("display", "");
            $("#RenewalChecklistNew").css("display", "");
        }
    }
    else {

        $("#txtRenewStartDate").datepicker("option", "minDate", null);
        $("#txtRenewEndDate").datepicker("option", "minDate", null);

        $("#txtRenewStartDate").val('');
        $("#txtRenewEndDate").val('');
        if (!isRenew) {
            $("#SendRenewalNotificationNew").css("display", "none");
            $("#RenewalChecklistNew").css("display", "none");
        }
        else {
            $("#SendRenewalNotificationNew").css("display", "");
            $("#RenewalChecklistNew").css("display", "");
        }
        if (isMultiple) {
            $("#tdNameofTerms").html('Initial Term, Renewal 1');
        }
        else
            $("#tdNameofTerms").html('Initial Term');
        $("#ddlTermPeriodSetRenewal").val('Renewal 1');
    }
    $("#txtRenewStartDate").datepicker("option", "maxDate", null);
    $("#txtRenewEndDate").datepicker("option", "maxDate", null);
    EnableContractTermRenewEndChoice(false, isMultiple);
    $("#trNumberOfTerms").css('display', '');

}

// Manage permissions
function GetValueAndPopulateManagerNew(contractItem, item) {
    var GBCOwners = [];
    contractAccessUsers = [];
    var users = [];
    if (contractItem.ProjectManager != null && contractItem.ProjectManager != "" && contractItem.ProjectManager != "Not Assigned") {
        users = contractItem.ProjectManager.split(';');
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });
    }

    if (contractItem.BusinessAreaOwners != null && contractItem.BusinessAreaOwners != "" && contractItem.BusinessAreaOwners != "Not Assigned") {
        users = contractItem.BusinessAreaOwners.split(';');
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });
    }

    if (contractItem.ContractAreaAdministrators != null && contractItem.ContractAreaAdministrators != "" && contractItem.ContractAreaAdministrators != "Not Assigned") {
        users = contractItem.ContractAreaAdministrators.split(';');
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });
    }

    users = $.map(contractItem.Approvers.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.Reviewers.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.ContractManagers.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.Requestor.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.SharedWith.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.Requestor.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });
    $(ContractRoles).each(function () {
        var itemfield = $(this)[0];
        var itemfieldPerm = $(this)[1];
        if ($(RecvMetadatavaluetofinalize).find(itemfield).text() != "undefined" && $(RecvMetadatavaluetofinalize).find(itemfield).text() != null && $(RecvMetadatavaluetofinalize).find(itemfield).text() != "") {
            users = $.map($(RecvMetadatavaluetofinalize).find(itemfield).text().split(";"), $.trim);
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }
    });
    if (item != null && item != "") {
        users = $.map(item.FullControl.split(";"), $.trim);
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });

        users = $.map(item.Contribute.split(";"), $.trim);
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });

        users = $.map(item.Readonly.split(";"), $.trim);
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });

    } else {

        if (contractItem.FullControlPermissions != null && contractItem.FullControlPermissions != "") {
            users = contractItem.FullControlPermissions.split(';');
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }

        if (contractItem.ReadWritePermissions != null && contractItem.ReadWritePermissions != "") {
            users = contractItem.ReadWritePermissions.split(';');
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }


        if (contractItem.ReadOnlyPermissions != null && contractItem.ReadOnlyPermissions != "") {
            users = contractItem.ReadOnlyPermissions.split(';');
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }
    }
    //Rahul
    if (allUsersList != [] && allUsersList.length > 0 && typeof allUsersList != 'undefined') {
        var allGlobalContractOwners = $.grep(allUsersList, function (item, i) {
            return item.UserType.indexOf('Global Contract Owner') > -1;
        });
        if (allGlobalContractOwners.length > 0) {
            GBCOwners = allGlobalContractOwners.map(function (p) { return p.UserName; });
            contractAccessUsers = contractAccessUsers.concat(GBCOwners);
        }
    }
    //Rahul
    contractAccessUsers = contractAccessUsers.filter(function (e) {
        return e
    });
    contractAccessUsers = contractAccessUsers.sort();
    contractAccessUsers = stringArrayUnique(contractAccessUsers).sort();

    arrPermsnUser = contractAccessUsers;
    //var vLastRow = $("#newPopup li:last").attr('id');

    //var totalPermissionCount = "1";
    //if (typeof vLastRow == "undefined") {
    //    totalPermissionCount = "1";
    //}
    //else {
    //    vLastRow = $("#newPopup li").length;
    //    totalPermissionCount = vLastRow;
    //    totalPermissionCount = parseInt(totalPermissionCount) + 1;
    //}

    var string = "";
    //ENH-472 (In Contract, People & Permission tab displaying all the Global Contract Owners.)
    //var allGlobalContractOwners = $.grep(allUsersList, function (item, i) {
    //    return item.UserType.indexOf('Global Contract Owner') > -1;
    //});

    //if (allGlobalContractOwners.length > 0) {
    //    var vUserClass = '';
    //    var userTitle = '';
    //    $.each(allGlobalContractOwners, function (i, user) {
    //        var pValue = i + 1;
    //        if (vActiveUsers.indexOf(user.UserName.trim()) < 0 && vActiveUsers.length > 0) {
    //            vUserClass = 'disabled_item_link';
    //            usertitle = "title='This user is no longer available.'";
    //        }

    //        string += "<li id='PermissionList" + pValue + "'><div class='share-pop-up-Middle'><div class='Link_UserProfile'><p id='PermissionUser" + pValue + "' class='" + vUserClass + "' " + usertitle + ">" + user.UserName.trim() + "</p>";
    //        string += "<span id='UserRole" + pValue + "'>" + "(Global Contract Owner)" + "</span></div></div>";
    //        string += "<div class='share-pop-up-Right'><span class='sortSpanUserPermission' id='UserPermission" + pValue + "'><label>Full Control</label></span></div></li>";

    //    });

    //    $('#newPopup').append(string);
    //}
    //    string = '';
    //ENH-472 (In Contract, People & Permission tab displaying all the Global Contract Owners.)


    //manoj
    var vLastRow = $("#newPopup li:last").attr('id');

    var totalPermissionCount = "1";
    if (typeof vLastRow == "undefined") {
        totalPermissionCount = "1";
    }
    else {
        vLastRow = $("#newPopup li").length;
        totalPermissionCount = vLastRow;
        totalPermissionCount = parseInt(totalPermissionCount) + 1;
    }
    //manoj

    $.each(contractAccessUsers, function (index, value) {
        var vUserClass = '';
        var userTitle = '';
        var fullpermission = false;
        var strUserRole = "";
        var strPermission = "";
        if ($.inArray(value, $.map(contractItem.BusinessAreaOwners.split(";"), $.trim)) > -1) {
            strUserRole = "Business Area Owner";
            strPermission = "Full Control";
            fullpermission = true;
        }

        //Rahul Added on 9th March 2018 
        var GlobalContractOwners = jQuery.grep(allGlobalContractOwners, function (user) {
            return (user.UserName == value);
        });

        if (GlobalContractOwners.length > 0) {
            strPermission = "Full Control";
            fullpermission = true;
            if (strUserRole != "") {
                strUserRole += ",Global Contract owner";
            }
            else {
                strUserRole = "Global Contract owner";
            }
        }
        //Rahul Added on 9th March 2018

        if ($.inArray(value, $.map(contractItem.ProjectManager.split(";"), $.trim)) > -1) {
            strPermission = "Full Control";
            fullpermission = true;
            if (strUserRole != "") {
                strUserRole += ",Project Manager";
            }
            else {
                strUserRole = "Project Manager";
            }
        }


        if ($.inArray(value, $.map(contractItem.ContractAreaAdministrators.split(";"), $.trim)) > -1) {
            if (strPermission == "") {
                strPermission = "Read Only";
            }
            if (strUserRole != "") {
                strUserRole += ",Contract Area Administrator";
            }
            else {
                strUserRole = "Contract Area Administrator";
            }
        }

        if ($.inArray(value, $.map(contractItem.Approvers.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Approver";
            }
            else {
                strUserRole = "Approver";
            }
        }

        if ($.inArray(value, $.map(contractItem.Reviewers.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Reviewer";
            }
            else {
                strUserRole = "Reviewer";
            }
        }

        if ($.inArray(value, $.map(contractItem.ContractManagers.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Contract Owner";
            }
            else {
                strUserRole = "Contract Owner";
            }
        }
        if ($.inArray(value, $.map(contractItem.Requestor.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Requestor";
            }
            else {
                strUserRole = "Requestor";
            }
        }

        $(ContractRoles).each(function () {
            var itemfield = $(this)[0];
            var itemfieldPerm = $(this)[1];
            var itemfieldDis = $(this)[2];
            if ($(RecvMetadatavaluetofinalize).find(itemfield).text() != "undefined" && $(RecvMetadatavaluetofinalize).find(itemfield).text() != null && $(RecvMetadatavaluetofinalize).find(itemfield).text() != "") {
                if ($.inArray(value, $.map($(RecvMetadatavaluetofinalize).find(itemfield).text().split(";"), $.trim)) > -1) {
                    if (strUserRole != "") {
                        strUserRole += "," + itemfieldDis;
                    }
                    else {
                        strUserRole = itemfieldDis;
                    }
                }
            }
        });


        if (item != null && item != "") {
            if ($.inArray(value, $.map(item.FullControl.split(";"), $.trim)) > -1) {
                strPermission = "Full Control";
            }

            if ($.inArray(value, $.map(item.Contribute.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read/Write";
                }
            }

            if ($.inArray(value, $.map(item.Readonly.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read Only";
                }
            }
        } else {
            if ($.inArray(value, $.map(contractItem.FullControlPermissions.split(";"), $.trim)) > -1) {
                strPermission = "Full Control";
            }

            if ($.inArray(value, $.map(contractItem.ReadWritePermissions.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read/Write";
                }
            }

            if ($.inArray(value, $.map(contractItem.ReadOnlyPermissions.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read Only";
                }
            }
        }

        if ($.inArray(value, $.map(contractItem.SharedWith.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += "";
                strPermission = "Share";
                vUserClass = "Share"
            }
            else {
                strUserRole = "";
                strPermission = "Share";
                vUserClass = "Share";
            }
        }

        if (item != null && item != "") {

            if ($.inArray(value, $.map(item.FullControl.split(";"), $.trim)) > -1) {
                strPermission = "Full Control";
            }

            if ($.inArray(value, $.map(item.Contribute.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read/Write";
                }
            }

            if ($.inArray(value, $.map(item.Readonly.split(";"), $.trim)) > -1) {
                if (strPermission == "") {
                    strPermission = "Read Only";
                }
            }

        }

        if (vUserClass == '') {
            if (vActiveUsers.indexOf(value.trim()) < 0 && vActiveUsers.length > 0) {
                vUserClass = 'disabled_item_link';
                usertitle = "title='This user is no longer available.'";
            }
        }
        else {
            vUserClass = '';
            usertitle = '';
        }

        string += "<li id='PermissionList" + totalPermissionCount + "'><div class='share-pop-up-Middle'><div class='Link_UserProfile'><p id='PermissionUser" + totalPermissionCount + "' class='" + vUserClass + "' " + usertitle + ">" + value.trim() + "</p>";

        if (strUserRole != "") {
            string += "<span id='UserRole" + totalPermissionCount + "'>" + "(" + strUserRole + ")" + "</span></div></div>";

        }
        else {
            string += "<span id='UserRole" + totalPermissionCount + "'>" + "" + strUserRole + "" + "</span></div></div>";
        }

        if (fullpermission) {
            strPermission = "Full Control";
            string += "<div class='share-pop-up-Right'><span class='sortSpanUserPermission' id='UserPermission" + totalPermissionCount + "'><label>" + strPermission + "</label></span></div></li>";

        }
        else {
            string += "<div class='share-pop-up-Right'><span class='sortSpanUserPermission' id='UserPermission" + totalPermissionCount + "'>";
            if (strPermission == "Full Control" || strPermission == "Read/Write" || strPermission == "Read Only") {
                string += "<select id='PermissionOption" + totalPermissionCount + "'>";
                if (strPermission == "Full Control") {
                    string += "<option value='FullControl' selected >Full Control</option>";
                    string += "<option value='Read/Write'>Read/Write</option>";
                    string += "<option value='ReadOnly'>Read Only</option>";
                }
                else if (strPermission == "Read/Write") {
                    string += "<option value='FullControl'  >Full Control</option>";
                    string += "<option value='Read/Write' selected >Read/Write</option>";
                    string += "<option value='ReadOnly'>Read Only</option>";
                }
                else if (strPermission == "Read Only") {
                    string += "<option value='FullControl'>Full Control</option>";
                    string += "<option value='Read/Write'>Read/Write</option>";
                    string += "<option value='ReadOnly' selected>Read Only</option>";
                }
                string += "</select>";
            }
            else {
                if (strPermission == "") {
                    strPermission = "Read Only";
                    string += "<label>" + strPermission + "</label>";
                }
                else if (strPermission == "Share") {
                    strPermission = "Shared As Link";
                    string += "<label>" + strPermission + "</label>";
                }
            }

            if (strUserRole == "" && strPermission != "Share" && strPermission != "Shared As Link") {
                string += "<img id=" + totalPermissionCount + " src='/Content/Images/close.png' onclick='Remove(this)'/>";
            }
            string += "</span></div></li>";
        }

        strPermission = "";
        totalPermissionCount = parseInt(totalPermissionCount) + 1;
    });

    $('#newPopup').append(string);
    var nonEditLI = $('#newPopup li').has('span.sortSpanUserPermission label');
    var editLI = $('#newPopup li').has('span.sortSpanUserPermission select');

    $('#newPopup').empty();

    $(nonEditLI).each(function () {
        $('#newPopup').append($(this));
    });

    $(editLI).each(function () {
        $('#newPopup').append($(this));
    });
    GBCOwners = [];
}

function stringArrayUnique(array) {
    return $.grep(array, function (el, index) {
        return index === $.inArray(el, array);
    });
}

function GetArrayUserList() {
    // var vUserList = '';
    var arrUsers = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (dataUser) {
            $(dataUser).each(function (i, item) {
                var sRowKey = item.RowKey;
                var sUserName = item.UserName;
                // vUserList += '<option value="' + sUserName + '">' + sUserName + '</option>';
                arrUsers.push(sUserName);
            });
        },
        error:
            function (dataUser) {
            }
    });
    return arrUsers;
}

// View history
function CreateContractActivityList(obj) {
    $("#loadingPage").fadeIn();
    var vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities/contracts/' + getParameterByName("ContractID") + '?actiontype=';
    if (obj !== undefined) {
        vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities/contracts/' + getParameterByName("ContractID") + '?actiontype=&objectname=' + obj;
    }
    $.ajax({
        url: vUrl,
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $("#contractLogs").empty();
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var sObject = item.Object;
                var sActivity = item.Activity;
                var sUserID = item.UserID;
                var sTimestamp;

                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { sTimestamp = moment(new Date(item.Timestamp)).format('MM/DD/YYYY h:mm A'); }
                else {
                    sTimestamp = moment(new Date(item.Timestamp)).format(localStorage.AppDateFormat + " h:mm A");
                }

                var article = '<tr><td><span class="logHis_Datetime">' + sTimestamp + '</span></td><td><b>' + sObject + '</b></td><td><span class="logHis_Activity">' + sActivity + '</span></td><td><span class="logHis_Datetime">' + sUserID + '</span></td></tr>';
                $("#contractLogs").append(article);
            }
            $('#compact-pagination-Activity').css('display', '');
            $('#compact-pagination-Activity').pagination({
                items: data.length,
                itemsOnPage: 15,
                type: 'tbody',
                typeID: 'contractLogs',
                row: 'tr',
                cssStyle: 'compact-theme'
            });
            $("#loadingPage").fadeOut();
            $('#contractLogsPopup').dialog('open');
        },
        error: function () {
            $("#loadingPage").fadeOut();

            $("#contractLogs").html('No items found.');
            $('#compact-pagination-Activity').css('display', 'none');
        }
    });
}

// Properties
function updatedefaultproperties() {
    if (requiredValidator('popupDefaultProperties', false)) {
        var amendablevaluetopass = $("#aNavContracts").hasClass("actNav") ? "Yes" : "No";
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName('ContractID') + '/defaultproperties',
            type: 'PUT',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
            },
            data: {
                RowKey: getParameterByName('ContractID'),
                ContractType: $("#ddlDPContractTypes").find('option:selected').val(),
                TransactionType: $("#ddlDPTransactionType").find('option:selected').val(),
                ContractClass: $("#ddlDPContractClass").find('option:selected').val(),
                Extendable: ($("#chkDPExtendable").is(':checked') ? 'Yes' : 'No'),
                NeedApprovalForExtension: ($("#chkDPExtensionApproval").is(':checked') ? 'Yes' : 'No'),
                Renewable: ($("#chkDPRenewable").is(':checked') ? 'Yes' : 'No'),
                NeedApprovalForRenewal: ($("#chkDPRenewalApproval").is(':checked') ? 'Yes' : 'No'),
                Amendable: amendablevaluetopass,
                NeedApprovalForAmendment: 'Yes',
                ModifiedBy: localStorage.User,
            },
            cache: false,
            success: function (result) {
                $("#loadingPage").fadeOut();
                contractItem.ContractType = $("#ddlDPContractTypes").find('option:selected').val();
                contractItem.TransactionType = $("#ddlDPTransactionType").find('option:selected').val();
                contractItem.ContractClass = $("#ddlDPContractClass").find('option:selected').val();
                contractItem.Renewable = $("#chkDPRenewable").is(':checked') ? 'Yes' : 'No';
                contractItem.Extendable = ($("#chkDPExtendable").is(':checked') ? 'Yes' : 'No');
                contractItem.NeedApprovalForRenewal = ($("#chkDPRenewalApproval").is(':checked') ? 'Yes' : 'No');
                contractItem.NeedApprovalForExtension = ($("#chkDPExtensionApproval").is(':checked') ? 'Yes' : 'No');
                contractItem.Amendable = amendablevaluetopass;
                contractItem.NeedApprovalForAmendment = ($("#chkDPAmendmentApproval").is(':checked') ? 'Yes' : 'No');
                if (amendablevaluetopass == "Yes") {
                    BindAmendments(vContractID); $("#artAmendment").css('display', '');
                }
                if ($("#chkDPRenewalApproval").is(':checked')) {
                    $("#hdnRenewApprovalRequired").text("Yes");
                } else {
                    $("#hdnRenewApprovalRequired").text("No");
                }

                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#popupDefaultProperties").dialog("close");

                //Sridhar
                if (contractItem.TransactionType == "Legal/General Agreement") {
                    $("#artFinancials").css('display', 'none');
                }
                else {
                    $("#artFinancials").css('display', '');
                }

            }
        });
    }
}

function BindContractTypes() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes',
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        async: true,
        success: function (contracttypes) {
            $("#ddlDPContractTypes").empty();
            $(contracttypes).each(function (i, item) {
                var find = " ";
                var re = new RegExp(find, 'g');
                var str = item.ContractType + '~' + item.TransactionType + '~' + item.ContractClass + '~' + item.Description;
                if (contractItem.ContractType == item.ContractType) {
                    if (contractItem.ContractType != "") {
                        if (thisContractAreaSettings.ContractType.split(';').indexOf(item.ContractType) > -1) {
                            $("#ddlDPContractTypes").append('<option value="' + item.ContractType + '" selected>' + item.ContractType + '</option>');
                        }
                    }
                } else {
                    if (thisContractAreaSettings.ContractType.split(';').indexOf(item.ContractType) > -1) {
                        $("#ddlDPContractTypes").append('<option value="' + item.ContractType + '">' + item.ContractType + '</option>')
                    }
                }
            });
        }
    });
}

function getcontractareasettings(contractareaname) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=' + encodeURIComponent(contractareaname),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            thisContractAreaSettings = data;
            //if (!(thisContractAreaSettings.DocumentTypes.indexOf("Primary Agreement") > -1)) {
            //    thisContractAreaSettings.DocumentTypes = thisContractAreaSettings.DocumentTypes + ";Primary Agreement";
            //}
            //BindContractTypes()//Performance Optimization

            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "14" && n.Status == "ON");
            });
            if (vDocLibFeat.length > 0) {
                if (data.DocLibName != '' && data.DocLibCreation != "BusinessArea")//Business Area Level Library Creation
                    $('#hdContAreaDocLibName').val(data.DocLibName);
                else if (data.DocLibCreation == "BusinessArea")//Business Area Level Library Creation
                    getbusinessareasettings(contractareaname);
                else
                    $('#hdContAreaDocLibName').val('Contract Documents');
            }
            else {
                $('#hdContAreaDocLibName').val('Contract Documents');
            }
            //BindDocumentTypeandTemplate();//Performance Optimization
        },
        error: function (data) {
            var vv = '';
        }
    });
}

function getbusinessareasettings(caname) {
    var vBAName = $("#lblBusinessArea").text();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/detailsbyname?businessareaname=' + encodeURIComponent(vBAName)
            + '&contractareaname=' + encodeURIComponent(caname),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $('#hdContAreaDocLibName').val(data.DocEntityName);
        },
        error: function (data) {
            var vv = '';
        }
    });
}
//---------------------------------ContextMenu Ends-----------------------------------------------//

// Edit Title
function MakeTitleEditable() {
    $("#iStandardIcon").css('display', 'none');
    $("#aTitleEdit").css('display', 'none');
    $("#LabelEdit").css('display', 'none');
    $("#tblDescriptionMissing").parent().hide();
    $("#aTitleCancel").css('display', '');
    $("#aTitleSave").css('display', '');
    lblcontracttitle = $("#lblContractTitle").text();
    lblcontracttitledescription = $("#lblContractDescription").text();

    $("#lblContractTitle").css('display', 'none');
    $("#lblContractDescription").css('display', 'none');
    $("#txtContractTitle").val(lblcontracttitle);
    //$("#txtContractTitle").trigger("input");    
    if (lblcontracttitledescription.trim() == "Description not available")
        $("#txtContractDescription").val("");
    else
        $("#txtContractDescription").val(lblcontracttitledescription);

    //$("#txtContractDescription").trigger("input");
    $("#txtContractTitle").css('display', '');
    $("#txtContractDescription").css('display', '');


    //$("#lblContractTitle").attr('contentEditable', true);
    //$("#lblContractDescription").attr('contentEditable', true);

    //var excempt = [37, 38, 39, 40, 46, 8, 36, 35];
    //$("[contenteditable='true']").each(function (index, elem) {
    //    var $elem = $(elem);
    //    //var length = $elem.data('maxlength');
    //    var remaining = $elem.data('maxlength') - $elem.html().length;
    //    if (!isNaN(length)) {
    //        $elem.on('input', function (evt) {
    //            if (excempt.indexOf(evt.which) === -1 && remaining <= 0) {
    //                //$elem.text($elem.text().substring(0, length));
    //                //evt.preventDefault();
    //                return false;
    //            }
    //        });

    //    }
    //});
    //$("#lblContractTitle").css({
    //    "border-color": "#a2a2a2",
    //    "border-width": "1px",
    //    "border-style": "solid",
    //    "background-color": "#ffffff",
    //    //  "max-width": "600px"
    //    "min-height": "27px",
    //}).focus();
    //$("#lblContractDescription").css({
    //    "border-color": "#a2a2a2",
    //    "border-width": "1px",
    //    "border-style": "solid",
    //    "background-color": "#ffffff",
    //    "margin-top": "5px",
    //    "min-height": "50px",
    //    //   "max-width": "600px"
    //});
    //if ($("#lblContractDescription").hasClass("cntdetails-NA")) {
    //    $("#lblContractDescription").text('');
    //}
}

function MakeTitleCancel() {
    var applyDescription = false;
    if ($('#iStandardIcon').css('display') == 'none' && $("#hdnPermission").val() != 'View' && typeof ($("#iStandardIcon").html()) != "undefined" && $("#iStandardIcon").html() != null && $("#iStandardIcon").html() != "") {
        $("#iStandardIcon").css('display', '');
    }
    $("#aTitleEdit").css('display', '');
    if ($('#LabelsAdd').is(":hidden") && $("#hdnPermission").val() != 'View')
        $("#LabelEdit").css('display', '');
    $("#aTitleCancel").css('display', 'none');
    $("#aTitleSave").css('display', 'none');

    $("#lblContractTitle").text(contractItem.ContractTitle);
    if (contractItem.Description == "") {
        $("#lblContractDescription").text("");
        $("#lblContractDescription").addClass('cntdetails-NA');
        $("#tblDescriptionMissing").parent().show();
        applyDescription = false;
    }
    else {
        $("#lblContractDescription").text(contractItem.Description);
        $("#lblContractDescription").removeClass('cntdetails-NA');
        $("#tblDescriptionMissing").parent().hide();
        applyDescription = true;
    }

    $("#lblContractTitle").css('display', '');
    $("#lblContractDescription").css('display', '');
    $("#txtContractTitle").css('display', 'none');
    $("#txtContractDescription").css('display', 'none');

    //$("#lblContractTitle").attr('contentEditable', false);
    // $("#lblContractDescription").attr('contentEditable', false);
    lblcontracttitle = "";
    lblcontracttitledescription = "";
    $("#lblContractTitle").css({
        "border": "",
        "background-color": "",
        "min-height": "0px"
    }).focus();
    $("#lblContractDescription").css({
        "border": "",
        "background-color": "",
        "margin-top": "0px",
        "min-height": "0px"
    });
    if (applyDescription) {
        $("#lblContractDescription").css("display", "");
    } else {
        $("#lblContractDescription").css("display", "none");
    }
}

function MakeTitleSave() {
    $("#loadingPage").fadeIn();
    $("#txtContractTitle").val($("#txtContractTitle").val().trim());
    $("#txtContractDescription").val($("#txtContractDescription").val().trim());
    if (!isContainsTwoAlphabets($("#txtContractTitle").val())) {
        swal("", "Contract Record title should have a minimum of 2 alphabets.");
        $("#loadingPage").fadeOut();
    } else {
        checkcontracttitle($("#txtContractTitle").val().trim());
    }
}

function checkcontracttitle(contracttitle) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/contracttitleexist?contracttitle=' + encodeURIComponent(contracttitle),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contractdetails) {
            if (typeof contractdetails != 'undefined' && contractdetails.length > 0) {//NoContent HttpStatusCode Update
                if (contractdetails[0].RowKey != getParameterByName("ContractID")) {
                    swal("", "Contract Record exists with the title <span style=\"font-weight:700\">" + $("#txtContractTitle").val() + "</span>");
                    $("#loadingPage").fadeOut();
                } else {
                    SaveContractTitle();
                }
            } else {
                SaveContractTitle();
            }
        },
        error: function () {
            SaveContractTitle();
        }
    });
}

function SaveContractTitle() {
    var applyDescription = false;
    var contractID = getParameterByName("ContractID");
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/title?contractid=' + contractID,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        cache: false,
        data: {
            RowKey: contractID,
            ContractTitle: $("#txtContractTitle").val(),
            Description: $("#txtContractDescription").val(),
            ModifiedBy: localStorage.UserName
        },
        success: function (data) {
            //$("#iStandardIcon").css('display', '');
            $("#aTitleEdit").css('display', '');
            if ($('#LabelsAdd').is(":hidden") && $("#hdnPermission").val() != 'View')
                $("#LabelEdit").css('display', '');

            if ($('#iStandardIcon').css('display') == 'none' && $("#hdnPermission").val() != 'View' && typeof ($("#iStandardIcon").html()) != "undefined" && $("#iStandardIcon").html() != null && $("#iStandardIcon").html() != "") {
                $("#iStandardIcon").css('display', '');
            }
            $("#aTitleCancel").css('display', 'none');
            $("#aTitleSave").css('display', 'none');
            $("#lblContractTitle").css('display', '');
            $("#lblContractDescription").css('display', '');
            $("#txtContractDescription").css('display', 'none');
            $("#txtContractTitle").css('display', 'none');

            $("#lblContractTitle").text($("#txtContractTitle").val());
            $("#lblContractDescription").text($("#txtContractDescription").val());


            contractItem.Description = $("#txtContractDescription").val();
            contractItem.ContractTitle = $("#txtContractTitle").val();
            //$("#lblContractTitle").attr('contentEditable', false);
            //$("#lblContractDescription").attr('contentEditable', false);
            if (contractItem.Description == "") {
                //$("#lblContractDescription").text("Description not available");
                //$("#lblContractDescription").addClass('cntdetails-NA');
                //$("#lblContractDescription").css("display", "none");
                $("#tblDescriptionMissing").parent().show();
                applyDescription = false;
            }
            else {
                $("#lblContractDescription").text(contractItem.Description);
                $("#lblContractDescription").removeClass('cntdetails-NA');
                $("#lblContractDescription").css("display", ""); //Bug id:eO37557
                $("#tblDescriptionMissing").parent().hide();
                applyDescription = true;
            }

            $("#lblContractTitle").css({
                "border": "",
                "background-color": "",
                "min-height": "0px",
            }).focus();
            $("#lblContractDescription").css({
                "border": "",
                "background-color": "",
                "margin-top": "0px",
                "min-height": "0px"
            });
            if (applyDescription) {
                $("#lblContractDescription").css("display", "");
            } else {
                $("#lblContractDescription").css("display", "none");
            }
            $("#loadingPage").fadeOut();
        },
        error: function () {
            $("#loadingPage").fadeOut();
        }
    });
}
//----------------------------------------------------------------------------------------------------//

function Loading_View_trigger() {
    if (contractItem != null) {
        if (((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute')) {
            $('#ulPinDocument li b').css({
                cursor: 'default'
            });
            $('#ulPinDocument li b img').css({
                cursor: 'default'
            });
        }
        else {
            $('#ulPinDocument li b').css({
                cursor: 'pointer'
            });
            $('#ulPinDocument li b img').css({
                cursor: 'pointer'
            });
        }
        //getcontractareasettings(contractItem.ContractArea);
        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
        var vCoverSheet = $.grep(veContractFeatures, function (n, i) {
            return (n.RowKey == "23" && n.Status == "ON");
        });
        if (vCoverSheet.length > 0) {
            if (typeof (contractItem.SummeryBlobURL) != "undefined" && contractItem.SummeryBlobURL != null && contractItem.SummeryBlobURL != "") {
                getcontractsummerytemplate(contractItem.ContractType, contractItem.SummeryBlobURL, true);
            } else {
                getcontractsummerytemplate(contractItem.ContractType, contractItem.SummeryBlobURL, false);
            }
        } else {
            $("#iStandardIcon").empty();
            $("#hdnsummeryTempDocu").text("No");
            $("#lisummarydocument").css("display", "none");
        }

        var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];

        vAccFeat = $.grep(veContractFeatures, function (n, i) {
            return (n.RowKey == "2" && n.Status == "ON");
        });
        if (vAccFeat.length > 0 && $.inArray(contractItem.Status, vContractStatus) > -1) {
            $(".FL_Obligations").css('display', '');
            //GetObligationCatalogs();//Performance Optimization
        }
        else {
            $(".FL_Obligations").css('display', 'none');
        }
        //if (IsPipeline == true)
        //    BindGeneralSettings();
        //BindContractRoles(contractItem);
        //BindUserRoles();
        BindRelatedContracts(vContractID);
        GetContractPendingAction(false);

        //BindO365LibrarySettings();
        BindPeople();
        //BindMilestoneTypes();//Performance Optimization
        //BindObligationTypes();//Performance Optimization
        //BindAmendmentTypes(vContractID);//Performance Optimization
        BindCurrencies();
        //BindUnitTypes();//Performance Optimization
        BindDataContractDropdownSettings(oGeneralSettings);//Performance Optimization
        //BindTermTypes();//Performance Optimization
        BindContractRelationships();
        //Performance Optimization
        //var vTab = getParameterByName("Tab");
        //if (vTab != 'Activity')
        //    GetContractActivities(vContractID);
        //if (vTab != 'TermsClause')
        //    TermsAndClauseDocument(vContractID);
        //if (vTab != 'Notes')
        //    BindNotes(vContractID);
        //Performance Optimization

        DefaultGlobalsettingsDP();
        //BindCounterpartyType();//Performance Optimization
        //BindContractTermTypeddl();//Performance Optimization
        //BindRelatedContractsFilters();
        //BindBusinessAreaPicker11();//Performance Optimization
        setTimeout('Loading_View_trigger1()', 10000);
    } else {
        //BindUserRoles();
        BindRelatedContracts(vContractID);
        GetContractPendingAction(false);

        //BindO365LibrarySettings();
        BindPeople();
        //BindMilestoneTypes();//Performance Optimization
        //BindObligationTypes();//Performance Optimization
        //BindAmendmentTypes(vContractID);//Performance Optimization
        BindCurrencies();
        //BindUnitTypes();//Performance Optimization
        //BindDataContractDropdownSettings();//Performance Optimization
        //BindTermTypes();//Performance Optimization
        BindContractRelationships();
        var vTab = getParameterByName("Tab");
        if (vTab != 'Activity') {
            GetContractActivities(vContractID);
        }
        if (vTab != 'TermsClause')
            TermsAndClauseDocument(vContractID);
        if (vTab != 'Notes')
            BindNotes(vContractID);

        DefaultGlobalsettingsDP();
        //BindCounterpartyType();//Performance Optimization
        //BindContractTermTypeddl();//Performance Optimization
        //BindRelatedContractsFilters();
        //BindBusinessAreaPicker11();//Performance Optimization
        //if (IsPipeline == true)
        //    BindGeneralSettings();
        setTimeout('Loading_View_trigger1()', 10000);
    }


}

function Loading_View_trigger1() {
    if (((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute')) {
        $('#ulPinDocument li b').css({
            cursor: 'default'
        });
        $('#ulPinDocument li b img').css({
            cursor: 'default'
        });
    }
    else {
        $('#ulPinDocument li b').css({
            cursor: 'pointer'
        });
        $('#ulPinDocument li b img').css({
            cursor: 'pointer'
        });
    }
    if ((contractItem.FullControlPermissions.indexOf(localStorage.UserName) > -1) || (localStorage.UserType.indexOf("Global Contract Owner") >= 0) || (contractItem.BusinessAreaOwners.indexOf(localStorage.UserName) > -1)) {
        $('#fullControlLink').css({
            cursor: 'pointer'
        });

    }
    else {
        $('#fullControlLink').css({
            cursor: 'default'
        });

    }

    //getcontractareasettings(contractItem.ContractArea);
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vCoverSheet = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "23" && n.Status == "ON");
    });
    if (vCoverSheet.length > 0) {
        if (typeof (contractItem.SummeryBlobURL) != "undefined" && contractItem.SummeryBlobURL != null && contractItem.SummeryBlobURL != "") {
            //getcontractsummerytemplate(contractItem.ContractType, contractItem.SummeryBlobURL, true);
        } else {
            //getcontractsummerytemplate(contractItem.ContractType, contractItem.SummeryBlobURL, false);
        }
    } else {
        $("#iStandardIcon").empty();
        $("#hdnsummeryTempDocu").text("No");
        $("#lisummarydocument").css("display", "none");
    }

    var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "2" && n.Status == "ON");
    });
    if (vAccFeat.length > 0 && $.inArray(contractItem.Status, vContractStatus) > -1) {
        $(".FL_Obligations").css('display', '');
        GetObligationCatalogs();
    }
    else {
        $(".FL_Obligations").css('display', 'none');
    }
    bindAuthoriseUsers(contractItem);
    BindContractRoles(contractItem);
    //suren      
    BindWorkflow(); //bug fixing for slider inhancment 
    //suren
}


//-------------------------------------------Refresh Contract-----------------------------------------//
function ReloadContracts() {
    if (!inrefreshState) {
        inrefreshState = true;
        setTimeout(function () {
            inrefreshState = false;
        }, 5000);
        vContractID = getParameterByName("ContractID");
        try {

            //[Bug id - eO36418] [Refresh Button: App navigating to Summary section whenever user click on In-App Refresh button]
            if ($("#tabSummary").hasClass("active")) {
                ShowTabDetail('Summary');
            }
            else if ($("#tabDocumentView").hasClass("active")) {
                ShowTabDetail('DocumentView');
            }
            else if ($("#tabDocuments").hasClass("active")) {
                ShowTabDetail('Documents');
            }
            else if ($("#tabTermsClause").hasClass("active")) {
                ShowTabDetail('TermsClause');
            }
            else if ($("#tabNotes").hasClass("active")) {
                ShowTabDetail('Notes');
            }
            else if ($("#tabObligation").hasClass("active")) {
                ShowTabDetail('Obligation');
            }
            else if ($("#tabTransactions").hasClass("active")) {
                ShowTabDetail('Transactions');
            }
            else if ($("#tabCatalog").hasClass("active")) {
                ShowTabDetail('Catalog');
            }
            else if ($("#tabActivity").hasClass("active")) {
                ShowTabDetail('Activity');
            }
            else
                ShowTabDetail('Summary');

            BindContractDetails(vContractID);
            //getAllCategoriesandLabels();
            //EnableDisableOCR();
            icontractdetails();   //ENH485  Featured metadata
            BindRelatedContracts(vContractID);
            //CreateContractAlertList(vContractID);
            $("#hdnShowAllTextValueheader").html($("#showAll")[0].innerHTML)
            //var showalltextvalue = $("#showAll").text();

            //manoj
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "20" && n.Status == "ON");
            });
            var details = "";
            if (vDocLibFeat.length > 0) {
                //Tab width decrease
                if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
                    $(".borderTop_Right_none").addClass('newdocview');
                }
                //Tab width decrease
                details += '<div class="row-group"><div class="col11 no-pad"><div class="col7"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a><a href="javascript:void(0);" id="documentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder"><img src="/Content/Images/add-icon.png">Manage Folder</a><a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="../Content/Images/icon/drop.png" style="height:14px !important;"></a></div>'
            + '<div class="col2" style="width: 12%;padding: 0;"><ul id="ulFolderDocumentView" class="tab"><li style="display:inline-block;"><a href="javascript:void(0);" id="listfolderdocumentview" class="tablinks group-wit-btn active" data-value="folder" onclick="DisplayDocument(\'folder\')"><img src="/Content/Images/folder-view.png" title="Displays Folder(s) and Documents(s) associated with Contract Record"></a></li><li style="display:inline-block; margin-left:-1px;"><a href="javascript:void(0);" id="listdocumentview" data-value="document" class="tablinks group-wit-btn" onclick="DisplayDocument(\'document\')"><img src="/Content/Images/list-view.png" title="Displays Documents(s) associated with Contract Record"></a></li></ul></div><div id="dvdocumentkeyword" style="width: 29%; float:left;"><input style="width: 72%;float: left;padding: 5px 27px 5px 5px; border: 1px solid #ccc!important;" id="txtdocumentkeyword" name="keyword" placeholder="Document(s) Search" class="topSearchBox validelement" type="text"><img class="poPSear" style="    cursor: pointer;position: relative;left: -62px;top: 1px;padding: 4px 0px 5px 5px;" onclick="javascript:SearchDocumentKeyword();" src="/Content/Images/search1.png"><a href="javascript:void(0)" class="linkPickerClear" style="float: left;display: block;margin-left: 4px!important;margin-top: 7px!important;" onclick="ClearDocumentKeyword();">Clear</a></div></div>'
            + '<div class="col1 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2><div class="row-group"><div class="col12"> <div id="holder" style="width:100%;"><div id="iddropfile" class="dropfiles" style="display:none;">Drop files here.</div><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
                $("#dvtabDocumentView").html(details);
                //$("#dvtabSummaryDocumentView").html('<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Primary and Pinned Document(s)associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');">Primary and Pinned Document(s) (<i id="lblPinDocumentsCount"></i>)</a><a href="javascript:void(0);" id="pindocumentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a></div><div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');"><img id="imgPindoc" src="/Content/Images/e-open.png"></a></div></div><div class="row-group"><div class="col12"><div style="width:100%;"><div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissing"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Documents\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div><ul class="ul-data" id="ulPinDocumentLoading"></ul><ul class="ul-data" id="ulPinDocument"></ul></div></div><div id="dvPinDocument" class="col12 pad-top"></div></div>');
                $("#dvtabSummaryDocumentView").html('<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Primary and Pinned Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');">Primary and Pinned Document(s) (<i id="lblPinDocumentsCount"></i>)</a><a href="javascript:void(0);" id="pindocumentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a></div><div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');"><img id="imgPindoc" src="/Content/Images/e-open.png"></a></div></div><div class="row-group pad-top"><div class="col12"><div style="width:100%;"><div class="wmessage clearfix clpendingaction" style="display:none;margin-left:35%;margin-top:-26px;margin-bottom:39px;"><table id="tblDocumentMissing"></table></div><ul class="ul-data" id="ulPinDocumentLoading"></ul><ul class="ul-data" id="ulPinDocument"></ul></div></div><div id="dvPinDocument" class="col12 pad-top"></div></div>'); //ENH 23  Minor Enhancement Specs-Rahul
                $("#hdnnewdocumentfeature").text("Yes");
                $("#litabDocumentView").css("display", "");
                $('#txtdocumentkeyword').keypress(function (e) {
                    if (e.keyCode == 13) {
                        SearchDocumentKeyword();
                    }
                });
            } else {
                //Tab width increase
                if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
                    $(".borderTop_Right_none").removeClass('newdocview');
                }
                if ($("#tabDocumentView").hasClass("active")) {
                    $('.info-box-main-body').css("display", "none");
                    $('#tabSummaryDetail').css("display", "");

                    $(".contracttab").removeClass("active");
                    $("#tabSummary").addClass("active");
                }
                //Tab width increase
                details += '<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv( \'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument" style="display:none;"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument" style="display:none;">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder"style="display:none;" ><img src="/Content/Images/add-icon.png">Manage Folder</a><a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="../Content/Images/icon/drop.png" style="height:14px !important;"></a></div>'
                + '<div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissingNormal"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Missing\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2>'
                + '<div class="row-group"><div class="col12"><div id="holder" style="width:100%;"><div id="iddropfile" class="dropfiles" style="display:none;">Drop files here.</div><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
                $("#dvtabSummaryDocumentView").html(details);
                $("#hdnnewdocumentfeature").text("No");
                $("#litabDocumentView").css("display", "none");
                documentview = "";
            }
            details = "";
            $(".openmenuDocumentMultiActions").contextMenu({ menu: 'dropdownMenuDocumentMultiActions', leftButton: true }, function (action, el, pos) {
                contextMenuDocumentMultiActions(action, el, pos);
            });
            $(".openmenuDocumentSort").contextMenu({ menu: 'dropdownMenuDocumentSort', leftButton: true }, function (action, el, pos) {
                contextMenuDocumentSort(action, el.parent("a"), pos);
            });
            //dynamic holder binding value
            holder = document.getElementById('holder');
            holder.ondragover = function (e) {
                if (document.getElementById("btnAddContractDocument").style.display != "none") {
                    e.preventDefault();
                    document.getElementById("holder").style.border = "2px dashed blue ";
                    $("#holder").css("min-height", "100px");
                    document.getElementById("holder").style.opacity = "0.5";
                    e.dataTransfer.setData('text/html', "You dragged the image!");
                    document.getElementById("iddropfile").style.display = "block";
                }
            };
            holder.ondragend = function () {
                this.className = ''; return false;
            };
            holder.ondragleave = function () {
                document.getElementById("holder").style.border = "2px dashed white";
                $("#holder").css("min-height", "0px");
                $('#holder').css("opacity", "1");
                $('#holder').css("pointer-events", "auto");
                document.getElementById("iddropfile").style.display = "none";
            };
            var totalfiles = "";
            holder.ondrop = function (e) {
                if (contractItem.Permission != 'View' && contractItem.Permission != '' && contractItem.Permission != null) {
                    $("#loadingPage").fadeIn();
                    this.className = '';
                    e.preventDefault();
                    var files = e.dataTransfer.files;
                    var fileslength = files.length;
                    //if (document.getElementById("tbBulkControls").rows.length < 6) {
                    //    if (fileslength <= 5) {
                    for (var i = 0; i < fileslength; i++) {
                        droppedfiles.push(files[i]);
                    }
                    totalfiles = files;
                    removedItems = [];
                    ReturnFolderSelection_New();
                    readfiles(files);
                    if ($("#tbBulkControls tbody").find("tr").length > 0) {
                        $(".cldraganddrop").css('display', 'none');
                        $('#btnBulkUploadSave').css('display', '');
                        $('#btnBulkUploadCancel').css('display', '');
                        $("#bulkuploaddoc").dialog("option", "title", "Bulk Document Upload");
                        $("#bulkuploaddoc").dialog("open");
                        $("#bulkuploaddoc").height("auto");
                        applybulkdocumetdraganddrop();
                    }
                    else {
                        dropexitfilename = [];
                        droppedfiles = [];
                        droppedControls = 0;
                        parentfolderidtopass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        document.getElementById("holder").style.border = "2px dashed white";
                        $("#holder").css("min-height", "0px");
                        $('#holder').css("opacity", "1");
                        $('#holder').css("pointer-events", "auto");
                        document.getElementById("iddropfile").style.display = "none";
                    }
                    $("#loadingPage").fadeOut();
                    //    }
                    //    else {
                    //        $("#loadingPage").fadeOut();
                    //        swal("", "Maximum 5 file(s) only allowed at a time....!");
                    //        document.getElementById("holder").style.border = "1px solid white";
                    //        $('#holder').css("opacity", "1");
                    //        $('#holder').css("pointer-events", "auto");
                    //    }
                    //}
                    //else {
                    //    $("#loadingPage").fadeOut();
                    //    swal("", "Maximum 5 file(s) only allowed at a time....!");
                    //    document.getElementById("holder").style.border = "1px solid white";
                    //    $('#holder').css("opacity", "1");
                    //    $('#holder').css("pointer-events", "auto");
                    //}
                }
            }
            $('#btnAddContractDocument').click(function () {
                Updatedocumenttap = false;
                $("#lblTemplateDescription").text("");
                $('#addNewDocument').css("pointer-events", "auto");
                $("#btnManagesubfolder").css("display", "none");
                AddContractDocument();
                addbuttonclick = true;
            });


            //$('#btnaddnewsubfolder').click(function () {
            //    $.ajax({
            //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/UpdateDocCache?itemid=qmoCesGu',
            //        type: 'POST',
            //        dataType: 'json',
            //        headers: {
            //            'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName
            //        },
            //        cache: false,
            //        success: function (data) {
            //            alert("Success");
            //        },
            //        error: function (data) {
            //            alert("Fail");
            //        }
            //    });
            //});

            $('#btnaddnewsubfolder').click(function () {
                Updatedocumenttap = false;
                AddContractDocument("ManageFolder");
                //manoj
                //if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
                //    $("#txtnewfoldervalue").attr("placeholder", "Enter New sub-folder name");
                //    $("#dvfoldercreation").dialog("option", "title", "Create Sub-folder");
                //    //manoj
                //    var fldratrical = "";
                //    var arrShowallTesxt = $.map($('#showAll').text().split('/'), $.trim);
                //    arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
                //    //var arrShowallTesxt = $('#showAll').text().split('/').filter(function (vFolder) { return vFolder !== '' });
                //    if (arrShowallTesxt.length == 1) {
                //        fldratrical = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt.toString() + '</span>';
                //    } else {
                //        for (var fldr = 0; fldr < arrShowallTesxt.length; fldr++) {
                //            if (arrShowallTesxt.length - 1 == fldr) {
                //                fldratrical += '/<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
                //            } else {
                //                fldratrical += '/<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
                //            }
                //        }
                //    }
                //    if (fldratrical.charAt(0) == '/') {
                //        fldratrical = fldratrical.substr(1);
                //    }
                //    $("#showAllFolder").html(fldratrical);
                //    //manoj
                //} else {
                //    $(this).attr("placeholder", "Enter folder name");
                //    $("#dvfoldercreation").dialog("option", "title", "Create Folder");
                //    $("#showAllFolder").html('');
                //}

                //var selectedparentdocument = "";
                //var headerid = $("#lblContractTitle").text();
                //headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                //selectedparentdocument = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                //selectedparentdocument = (selectedparentdocument.charAt(0) != '/') ? '/' + selectedparentdocument : selectedparentdocument;
                //selectedparentdocument = ((selectedparentdocument.substr(selectedparentdocument.length - 1)) != "/") ? selectedparentdocument + "/" : selectedparentdocument;
                ////if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
                //selectedparentdocument = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? selectedparentdocument + $('#showAll').text().replace(/ \/ /g, '/') + '/' : selectedparentdocument + headerid + '/';
                //$("#hdnnewfolderurl").val(selectedparentdocument);
                //$("#hdnnewfoldercreatedfrom").val("detailspage");
                //$("#txtnewfoldervalue").removeClass('error');
                //$("#errormsg_txtnewfoldervalue").remove();
                ////$("#dvfoldercreation").dialog("option", "title", "Create Folder");
                //$("#dvfoldercreation").dialog("open");
            });
            //dynamic holder binding value
            $("#showAll").html($("#hdnShowAllTextValueheader")[0].innerHTML);
            $("#hdnShowAllTextValueheader").html('');
            if (documentview == null || documentview == "" || documentview == 'folder') {
                if ($("#showAll").text().indexOf("/") >= 0) {
                    showfolderdocuments($("#showAll").find("a:last")[0])
                } else {
                    BindDocument(vContractID);
                }
            } else {
                DisplayDocument(documentview);
            }
            //GetContractPendingAction(true, "BindPeoples");
            $("#hdnFolderDocumentView").text('');
            $("#hdnShowAllTextValue").html('');
            PrvFolderselection = '';
            //Bind primary and pined document based on new feature
            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                CreateDocumentListPinView(vContractID);
            }
            //manoj
            BindMilestone(vContractID);
            GetContractActivities(vContractID);

            TermsAndClauseDocument(vContractID);
            BindNotes(vContractID);
            GetInnerFeatures();
            BindMetaData(contractItem, true);
            if (!pendingStarted) {
                $("#tblContractSettingMetadata").empty()
                $("#tblStartApprovalMetadata").empty()
                $("#tblEditcontractMetadata").empty()
                $("#tblActivitiesMetadata").empty()
                $("#tblJustInfoMetadata").empty()
            }

        } catch (e) {
            $("#loadingPage").fadeOut();
        }

        //pendingStarted = false;
        $("#tblContractSettingMetadata").empty();
        //GetContractPendingAction(false);

    }
    //vSliderCounter = 0;
    // Check Upcoming Task Slider    Added 2.4final to 2.4
    //suren
    GetRenewalChecklistAndNotes(vContractID, 0);
}

function contextMenuDocumentMultiActions(action, el, pos) {
    switch (action) {
        case "review":
            {
                MultipleDocumentReview();
                break;
            }
        case "final":
            {
                MultipleDocumentFinal();
                break;
            }
        case "remove":
            {
                if (selectedamnddoc == true && selectedamnddocname.length > 0) {
                    var documentnamevalues = "";
                    $(selectedamnddocname).each(function (idoc, amnddocname) {
                        documentnamevalues += "," + amnddocname;
                    });
                    documentnamevalues = (documentnamevalues.charAt(0) != ',') ? documentnamevalues : documentnamevalues.substr(1);
                    var n = documentnamevalues.lastIndexOf(",");
                    if (n > -1) {
                        documentnamevalues = documentnamevalues.substr(0, n) + 'and' + documentnamevalues.substr(n + 1);
                    }
                    swal("", "You can not untag following Amendment document(s) <span style='font-weight:700'>" + documentnamevalues + "</span> .");
                } else {
                    MultipleDocumentRemove();
                }
                break;
            }
        case "delete":
            {
                MultipleDocumentDelete();
                break;
            }
        case "move":
            {
                $('#load').empty();
                //if (typeof ($("#hdnContractDocumentsUrlFixed").text()) != "undefined" && $("#hdnContractDocumentsUrlFixed").text() != null && $("#hdnContractDocumentsUrlFixed").text() != "") {

                //}
                var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                finalurl = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;

                //manoj
                var documenturltopass = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? $('#showAll').text().replace(/ \/ /g, '/') : "";
                if (documenturltopass != "") {
                    documenturltopass = documenturltopass.trim();
                    documenturltopass = (documenturltopass.charAt(0) == '/') ? documenturltopass.substring(1) : documenturltopass;
                    var arrdocumenturltopass = documenturltopass.split('/');
                    finalurl += "/" + arrdocumenturltopass[0];
                }
                //manoj

                var ContarctName = $("#lblContractTitle").text().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                urldetailsforcontact = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;
                CreateFolderToMove(finalurl, ContarctName);
                $("#hdntreeviewFolderMove").val('move');
                $("#treeviewFolderMove").dialog("option", "title", "Move to Folder");
                $("#treeviewFolderMove").dialog("open");
                break;
            }
        case "createcopy":
            {
                $('#load').empty();

                var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                finalurl = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;
                var documenturltopass = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? $('#showAll').text().replace(/ \/ /g, '/') : "";
                if (documenturltopass != "") {
                    documenturltopass = documenturltopass.trim();
                    documenturltopass = (documenturltopass.charAt(0) == '/') ? documenturltopass.substring(1) : documenturltopass;
                    var arrdocumenturltopass = documenturltopass.split('/');
                    finalurl += "/" + arrdocumenturltopass[0];
                }
                var ContarctName = $("#lblContractTitle").text().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                urldetailsforcontact = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;
                CreateFolderToMove(finalurl, ContarctName);

                $("#hdntreeviewFolderMove").val('copy');
                $("#treeviewFolderMove").dialog("option", "title", "Create Copy");
                $("#treeviewFolderMove").dialog("open");
                break;
            }
        case "signature":
            {
                MultipleDocumentSignature(el);
                break;
            }
    }
}

function MultipleDocumentReview() {
    $("#loadingPage").fadeIn();
    $(".FL_ApprovalSheetContract").css('display', 'none');
    if ($("#contractDetailsSummaryConfiguration").css('display') != 'none') {
        $("#contractDetailsSummaryConfiguration").css('display', 'none');
    }
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;
    var title = multipleChecksDocumentReviewTitle;
    var businessArea = $("#lblBusinessArea").text();
    var contractArea = $("#lblContractArea").text();
    $("#tblStage").empty();
    $("#ddlRule").empty();
    //manoj
    //New
    var arrDocumentName = multipleChecksDocumentName.split('~');
    var WrkflwTitle = "";
    $(arrDocumentName).each(function (idocname, ndocname) {
        WrkflwTitle += "~" + "Review for " + ndocname;
    });
    WrkflwTitle = (WrkflwTitle.charAt(0) == '~') ? WrkflwTitle.substring(1) : WrkflwTitle;
    //New
    //manoj
    $("#txtWorkflowTitle").val(WrkflwTitle);
    //manoj
    $("#txtWorkflowTitle").prop('readonly', true);
    //manoj
    $("#lblAutoUpdateStatus").text('Auto update Document status based on this Workflow.');
    $("#txtDuration").val("");
    //*Harshitha
    var nicInstance = nicEditors.findEditor('txtComment');
    nicInstance.setContent('');
    $("#hdWorkflowType").val("Document Review");
    $("#hdWorkflowObjectID").val(documentID);
    $("#hdWorkflowObjectTitle").val(documentName);
    GetValuesAndAutoPopulate("ddlWorkflowCC", "");

    var vWorkflowSettings = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Document Review&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + documentID,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        processData: false,
        success: function (item) {
            vWorkflowSettings = item.WorkflowSettings;
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "8" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                vWorkflowRules = item.WorkflowRules;
            }
            if (contractItem.IsFinalized == "Yes") {
                $("#liAutoUpdateStatus").css('display', 'none');
            } else {
                $("#liAutoUpdateStatus").css('display', '');
            }
            if (item.WorkflowSettings != null) {
                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                        $("#spAddStage").css("display", "none");
                    }
                }
                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                if ($("#txtDuration").val() != "") {
                    $("#txtDuration").trigger("onchange");
                } else {
                    $("#lblDurationDate").empty();
                }
                //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
            }
            if (vWorkflowRules.length > 0) {
                $(vWorkflowRules).each(function (i, rule) {
                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                });

                var workflowRules = vWorkflowRules[0];
                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                if (vWorkflowRules.length == 1) {
                    $("#lblddlRule").css("display", "");
                    $("#ddlRule").css("display", "none");
                    $("#lblddlRule").text(workflowRules.RuleName);
                    $("#ddlRule").attr('disabled', 'disabled');
                }
                else {
                    $("#lblddlRule").text("");
                    $("#lblddlRule").css("display", "none");
                    $("#ddlRule").css("display", "");
                    $("#ddlRule").removeAttr("disabled");
                }
                var participantsInXML = workflowRules.ParticipantsInXML;
                var totalFileCount = 0;
                var multipleDocnames = "";
                if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                    if (documentName.indexOf('~') >= 0) {
                        var docnames = documentName.split('~');
                        docnames.forEach(function (val, i) {
                            if (multipleDocnames == "") {
                                multipleDocnames = workflowRules.WorkflowTitle + ' for ' + val;
                            } else {
                                multipleDocnames = multipleDocnames + '~' + workflowRules.WorkflowTitle + ' for ' + val
                            }
                        })
                    }
                }
                if (workflowRules.RuleName == "Default") {
                    if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                        if (documentName.indexOf('~') < 0)
                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for' + documentName);
                        else
                            $("#txtWorkflowTitle").val(multipleDocnames);
                    } else {
                        $("#txtWorkflowTitle").val("Review for " + documentName);
                    }
                }
                else {
                    if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                        if (documentName.indexOf('~') < 0)
                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + documentName);
                        else
                            $("#txtWorkflowTitle").val(multipleDocnames);
                    } else {
                        $("#txtWorkflowTitle").val('Conditional Review Workflow for ' + documentName);
                    }
                }
                //If the rule is ad-hoc 
                if (participantsInXML != "") {
                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                        var StageTitle = $(this).find('StageTitle').text();
                        var Participants = $(this).find('Participants').text();
                        var Order = $(this).find('Order').text();
                        totalFileCount++;
                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width40 start_workflow">';
                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                        if (Order == "Serial")
                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                        else
                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                        if (totalFileCount > 1)
                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                        else
                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '</tr>';

                        $("#tblStage").append(htmlFormatFile);
                        var $options = $("#ddlApprovers > option").clone();
                        $('#ddlAssignTo' + totalFileCount).append($options);
                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                            if ($(this).val() != null) {
                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                }
                                else {
                                    $("#ddlOrder" + vasstoid).val("Serial");
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                }
                            }
                            else {
                                $("#ddlOrder" + vasstoid).val("Serial");
                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                            }
                        });
                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);

                        if (item.WorkflowSettings != null) {
                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                }
                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                            }
                        }
                    });
                }
                else {
                    if ($("#ddlRule").html() == "") {
                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                        $("#lblddlRule").css("display", "");
                        $("#ddlRule").css("display", "none");
                        $("#lblddlRule").text("Ad-hoc");
                    }
                    if (!workflowAdHoc)
                        $("#ddlRule").attr('disabled', 'disabled');
                    var totalFileCount = 1;
                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width40 start_workflow">';
                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '</tr>';

                    $("#tblStage").append(htmlFormatFile);
                    var $options = $("#ddlApprovers > option").clone();
                    $('#ddlAssignTo' + totalFileCount).append($options);
                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                        if ($(this).val() != null) {
                            if ($(this).val().length > 1) {
                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                            }
                            else {
                                $("#ddlOrder" + vasstoid).val("Serial");
                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                            }
                        }
                        else {
                            $("#ddlOrder" + vasstoid).val("Serial");
                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                        }
                    });
                }
            }
            else {
                if ($("#ddlRule").html() == "") {
                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                    $("#lblddlRule").css("display", "");
                    $("#ddlRule").css("display", "none");
                    $("#lblddlRule").text("Ad-hoc");
                }
                if (!workflowAdHoc)
                    $("#ddlRule").attr('disabled', 'disabled');
                var totalFileCount = 1;
                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width40 start_workflow">';
                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                htmlFormatFile += '</td>';
                htmlFormatFile += '</tr>';

                $("#tblStage").append(htmlFormatFile);
                var $options = $("#ddlApprovers > option").clone();
                $('#ddlAssignTo' + totalFileCount).append($options);
                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                    if ($(this).val() != null) {
                        if ($(this).val().length > 1) {
                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                        }
                        else {
                            $("#ddlOrder" + vasstoid).val("Serial");
                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                        }
                    }
                    else {
                        $("#ddlOrder" + vasstoid).val("Serial");
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                    }
                });
            }
            //ENH492 - Workflow Cycle time Report & default naming of stages.
            $("#txtStage" + totalFileCount).autocomplete({
                source: StageName,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtStage" + totalFileCount).val(uidetails.item.label);

                }
            });
            $("#loadingPage").fadeOut();
            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
            $("#dvWorkflow").dialog("open");
            $("#dvWorkflow").height("auto");
        },
        error: function () {
            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
            $("#lblddlRule").css("display", "");
            $("#ddlRule").css("display", "none");
            $("#lblddlRule").text("Ad-hoc");
            if (!workflowAdHoc)
                $("#ddlRule").attr('disabled', 'disabled');
            var totalFileCount = 1;
            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width40 start_workflow">';
            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
            htmlFormatFile += '</td>';
            htmlFormatFile += '</tr>';

            $("#tblStage").append(htmlFormatFile);
            var $options = $("#ddlApprovers > option").clone();
            $('#ddlAssignTo' + totalFileCount).append($options);
            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                if ($(this).val() != null) {
                    if ($(this).val().length > 1) {
                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                    }
                    else {
                        $("#ddlOrder" + vasstoid).val("Serial");
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                    }
                }
                else {
                    $("#ddlOrder" + vasstoid).val("Serial");
                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                }
            });
            //ENH492 - Workflow Cycle time Report & default naming of stages.
            $("#txtStage" + totalFileCount).autocomplete({
                source: StageName,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtStage" + totalFileCount).val(uidetails.item.label);

                }
            });
            $("#loadingPage").fadeOut();
            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
            $("#dvWorkflow").dialog("open");
            $("#dvWorkflow").height("auto");
        }
    });
}

function MultipleDocumentFinal() {
    swal({
        title: '',
        text: "Before finalization of word documents(.doc or .docx) if any selected, make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
                       function (confirmed) {
                           if (confirmed) {
                               $("#loadingPage").fadeIn();
                               var entityid = multipleChecksDocumentID;
                               $.ajax({
                                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                                   type: 'PUT',
                                   cache: false,
                                   contentType: false,
                                   headers: {
                                       'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                   },
                                   processData: false,
                                   success: function (document) {
                                       $("#loadingPage").fadeOut();
                                       //manoj
                                       if (documentview == null || documentview == "" || documentview == 'folder') {
                                           if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                               var selectedfoldervalue = $('#showAll').find("a");
                                               var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                               var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                               var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                               showfolderdocuments(parentdocumentdetails);
                                           }
                                           else {
                                               BindDocument(vContractID);
                                           }
                                       } else {
                                           DisplayDocument(documentview);
                                       }
                                       //GetContractPendingAction(true, "BindPeoples");
                                       $("#hdnFolderDocumentView").text('');
                                       $("#hdnShowAllTextValue").html('');
                                       PrvFolderselection = '';
                                       //Bind primary and pined document based on new feature
                                       if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                           CreateDocumentListPinView(vContractID);
                                       }
                                       //manoj
                                   },
                                   error: function () {
                                       $("#loadingPage").fadeOut();
                                   }
                               });
                           }
                           return;
                       });
}

function MultipleDocumentRemove() {
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;

    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>remove</span> selected Documents from this Contract Record?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
           function (confirmed) {
               if (confirmed) {
                   $("#loadingPage").fadeIn();
                   $.ajax({
                       url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/untag?contractid=' + getParameterByName('ContractID') + '&documentid=' + documentID,
                       type: 'PUT',
                       dataType: 'json',
                       "Content-Type": "application/json",
                       headers: {
                           'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken
                       },
                       cache: false,
                       success: function (data) {
                           $("#loadingPage").fadeOut();
                           //manoj
                           if (documentview == null || documentview == "" || documentview == 'folder') {
                               if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                   var selectedfoldervalue = $('#showAll').find("a");
                                   var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                   var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                   var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                   showfolderdocuments(parentdocumentdetails);
                               }
                               else {
                                   BindDocument(vContractID);
                               }
                           } else {
                               DisplayDocument(documentview);
                           }
                           pendingStarted = false;
                           GetContractPendingAction(true, "BindPeoples");
                           $("#hdnFolderDocumentView").text('');
                           $("#hdnShowAllTextValue").html('');
                           PrvFolderselection = '';
                           //Bind primary and pined document based on new feature
                           if ($("#hdnnewdocumentfeature").text() == "Yes") {
                               CreateDocumentListPinView(vContractID);
                           }
                           //manoj
                       },
                       error: function () {
                           $("#loadingPage").fadeOut();
                       }
                   });
               }
               return;
           });
}

function MultipleDocumentDelete() {
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span> selected documents?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
         function (confirmed) {
             if (confirmed) {
                 $("#loadingPage").fadeIn();
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                     type: 'DELETE',
                     dataType: 'json',
                     "Content-Type": "application/json",
                     headers: {
                         'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName
                     },
                     cache: false,
                     success: function (data) {
                         //manoj
                         $("#loadingPage").fadeOut();
                         if (documentview == null || documentview == "" || documentview == 'folder') {
                             if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                 var selectedfoldervalue = $('#showAll').find("a");
                                 var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                 var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                 var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                 showfolderdocuments(parentdocumentdetails);
                             }
                             else {
                                 BindDocument(vContractID);
                             }
                         } else {
                             DisplayDocument(documentview);
                         }
                         pendingStarted = false;
                         GetContractPendingAction(true, "BindPeoples");
                         $("#hdnFolderDocumentView").text('');
                         $("#hdnShowAllTextValue").html('');
                         PrvFolderselection = '';
                         //Bind primary and pined document based on new feature
                         if ($("#hdnnewdocumentfeature").text() == "Yes") {
                             CreateDocumentListPinView(vContractID);
                         }
                         //manoj
                     },
                     error: function () {
                         $("#loadingPage").fadeOut();
                     }
                 });
             }
             return;
         });
}

function CreateFolderToMove(parentFolderName, ContarctNameselection) {
    $("#browseFolderMove").html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    newurl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?documentlibrary=' + parentFolderName;
    $.ajax({
        url: newurl,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (folder) {
            try {
                $("#btnaddsubfolder").css("display", "");
                $("#browseFolderMove").html('<div id="treeviewFolderMoveOption" class="demo-section"></div><input id="txtFolder" type="hidden" /><input id="txtFolderURL" type="hidden" />');
                $('#treeviewFolderMoveOption').empty();
                $('#treeviewFolderMoveOption').tree({
                    data: folder,
                    autoOpen: 0
                });
            } catch (ex) {
                // alert(ex);
            }
        },
        error:
        function (data) {
            $("#btnaddsubfolder").css("display", "none");
            $("#browseFolderMove").html('No items found.');
        }
    });
}

function MultipleDocumentSignature(el) {
    // var Stage = "";
    var requiredavalible = false;
    //  Stage = getParameterByName("Stage");
    if (Stage == 'pipeline') {
        if ($("#spanstatus").text() != "") {
            var arrstatus = ['Ready for Signature', 'Awaiting Signatures', 'Signed', 'Active', 'Expired', 'Replaced', 'Archived', 'On Hold', 'Cancelled'];
            if (arrstatus.indexOf($("#spanstatus").text().trim()) > -1) {
                Stage = '';
            }
        }
    }
    var documentName = '';
    var documentNameArr = multipleChecksDocumentName.split('~');
    var documentIDArr = multipleChecksDocumentID.split(';');
    var DocumentUrlArr = multipleChecksDocumentURL.split('|');

    var DocumentUrlArr = multipleChecksDocumentURL.split('|');
    var vOptions = '';
    var doccount = 1;

    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    if (veContractFeatures == null) {
        GetFeaturesInDetailPage();
    }
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "26" && n.Status == "ON");
    });

    if (vAccFeat.length > 0 && documentNameArr.length > 1) {  //thilo advanved docusign

        for (i = 1; i <= documentNameArr.length; i++) {
            if (vOptions == '')
                vOptions = "<option value='" + i + "'>" + i + "</option>";
            else
                vOptions += "<option value='" + i + "'>" + i + "</option>";

        }
        $.each(documentNameArr, function (index, value) {
            if (documentName == '')
                documentName = "<b class='width90 float_left'>" + value + " <select id=ddlorder" + doccount + " class='f_inpt width5 DocOrder' onclick='ClickedDocOrder(this)' onchange='SelectedDocOrder(this)'>" + vOptions + " </select><img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDocOrder(this,\"" + documentIDArr[doccount - 1] + "\",\"" + DocumentUrlArr[doccount - 1] + "\");'></b>";
            else
                documentName += "<b class='width90 float_left'>" + value + " <select id=ddlorder" + doccount + " class='f_inpt width5 DocOrder' onclick='ClickedDocOrder(this)' onchange='SelectedDocOrder(this)'>" + vOptions + " </select><img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDocOrder(this,\"" + documentIDArr[doccount - 1] + "\",\"" + DocumentUrlArr[doccount - 1] + "\");'></b>";
            doccount++;
        });
    }
    else {
        $.each(documentNameArr, function (index, value) {
            if (documentName == '')
                documentName = "<b class='width90 float_left'>" + value + " <img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDoc(this,\"" + documentIDArr[index] + "\",\"" + DocumentUrlArr[index] + "\");'></b>";
            else
                documentName += "<b class='width90 float_left'>" + value + " <img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDoc(this,\"" + documentIDArr[index] + "\",\"" + DocumentUrlArr[index] + "\");'></b>";
        });
    }

    var documentID = multipleChecksDocumentID;
    var DocumentUrl = multipleChecksDocumentURL;
    var PrimaryDocumentCheck = multipleChecksDocumentIsPrimaryDoc;

    $("#hdIsPrimaryDoc").val(PrimaryDocumentCheck);
    if (PrimaryDocumentCheck.indexOf('Yes') > -1)
        $("#lblAutoUpdateStatusSignDoc").html("Auto update Document & Contract Record status based on this Workflow.");
    else
        $("#lblAutoUpdateStatusSignDoc").html("Auto update Document status based on this Workflow.");
    if (Stage == 'pipeline') {
        var vMetadatavaluetofinalize;
        var metadataFields = [];
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
            type: 'GET',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            cache: false,
            async: false,
            success: function (mainmetadataFields) {
                vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
            },
        });
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + strSelectedContractType.trim(),
            type: 'GET',
            dataType: 'json',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            cache: false,
            async: false,
            success: function (metadataFieldsvalue) {
                if (getParameterByName("Stage") == "pipeline") {
                    metadataFields = $.grep(metadataFieldsvalue, function (n, i) {
                        return (n.Finalizingfrom == "Required");
                    });
                }
            },
        });

        $(metadataFields).each(function (i, item) {
            if ($(vMetadatavaluetofinalize).find(item.FieldName).text() == null || $(vMetadatavaluetofinalize).find(item.FieldName).text() == "") {
                requiredavalible = true;
            }
        });
        if (!requiredavalible) {
            ClearSignatureForm();
            DisableCCUsers();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                cache: false,
                success: function (settings) {
                    $("#txtExpIn").val(settings.TaskDuration);
                    $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(), "days").format('MM/DD/YYYY'));
                    $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration, "days").format('MM/DD/YYYY'));
                },
                error: function () {

                }
            });

            $("#hdMarkAsFinal").val("Y");
            $("#hdDocumentID").val(documentID);
            $("#hdDocumentURL").val(DocumentUrl);
            $("#tdDocument").html(documentName);

            for (i = 1; i <= documentNameArr.length; i++) {
                $('#ddlorder' + i).val(i);
            }
            getNameAndEmailSignDocument();
            $("#sendForSignature").dialog("open");
        } else {
            swal({
                title: '',
                text: "Some fields required for Contract Record finalization are not filled. Do you want to edit now?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                html: true
            },
                function (confirmed) {
                    if (confirmed) {
                        if (Stage == 'pipeline') {
                            location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true";
                        }
                    } else {
                        $("#loadingPage").fadeOut();
                    }
                });
        }

    } else {
        ClearSignatureForm();
        DisableCCUsers();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            cache: false,
            success: function (settings) {
                $("#txtExpIn").val(settings.TaskDuration);
                $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(), "days").format('MM/DD/YYYY'));
                $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration, "days").format('MM/DD/YYYY'));
            },
            error: function () {

            }
        });

        $("#hdMarkAsFinal").val("Y");
        $("#hdDocumentID").val(documentID);
        $("#hdDocumentURL").val(DocumentUrl);
        $("#tdDocument").html(documentName);
        for (i = 1; i <= documentNameArr.length; i++) {
            $('#ddlorder' + i).val(i);
        }
        getNameAndEmailSignDocument();
        $("#sendForSignature").dialog("open");
    }
}

function GetFeaturesInDetailPage() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/feature',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            localStorage.setItem("eContractFeatures", JSON.stringify(data));
            var vAccFeat = $.grep(data, function (n, i) {
                return (n.RowKey == "29" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                if (typeof localStorage.CompanyBrandingLogo === "undefined") {
                    $.ajax({
                        url: '/Accounts/GetAccountSetting?accountid=' + localStorage.AccountID,
                        type: 'GET',
                        dataType: 'json',
                        cache: false,
                        success: function (AccountSetting) {
                            if (AccountSetting.CompanyLogo != "") {
                                localStorage.setItem("CompanyBrandingLogo", AccountSetting.CompanyLogo);
                                $(".FL_CompanyBrandingLogo").attr("src", AccountSetting.CompanyLogo);
                                $(".FL_CompanyBrandingLogo").css('display', '');
                            }
                            else {
                                $(".FL_CompanyBrandingLogo").css('display', '');
                                localStorage.setItem("CompanyBrandingLogo", '/Content/Images/logo.png');
                            }
                        }
                    });
                }
                else {
                    if (localStorage.CompanyBrandingLogo != "/Content/Images/logo.png") {
                        $(".FL_CompanyBrandingLogo").attr("src", localStorage.CompanyBrandingLogo);
                        $(".FL_CompanyBrandingLogo").css('display', '');
                    }
                    else {
                        $(".FL_CompanyBrandingLogo").css('display', '');
                    }

                }
            }
            else {
                $(".FL_CompanyBrandingLogo").css('display', '');
            }
        },
        error: function (data) {

        }
    });
}

function ClearSignatureForm() {
    $("#hdDocumentID").val('');
    $("#hdDocumentURL").val('');
    $("#hdMarkAsFinal").val('');
    $("#txtSubject").val('');
    $("#txtSigneeMsg").val('');
    $("#txtExpIn").val('');
    $("#spAddSignee").css("display", "");
    $("#spAddInternalSignee").css("display", "");
    GetValuesAndAutoPopulate("ddlCC", "");
    $('#chkAutoUpdateStatusSignDoc').attr('checked', false);
    $('#tblSignees').empty();
    var vSignee = '<tr>';
    vSignee += '<td class="width40">';
    vSignee += '<input id="txtSignee1" name="SigneeName1" title="Signee" placeholder="Signee Name" type="text" class="f_inpt width90" />';
    vSignee += '</td>';
    vSignee += '<td class="width40">';
    vSignee += '<input id="txtEmail1" name="SigneeEmail1" title="Email" placeholder="Signee Email" type="text" class="f_inpt width90 validemail" />';
    vSignee += '</td>';
    vSignee += '<td class="width20">';
    vSignee += '<select id="ddlSigneeOrder1" name="SigneeOrder1" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder">';
    vSignee += '<option value="1" selected="selected">1</option>';
    vSignee += '<option value="2">2</option>';
    vSignee += '<option value="3">3</option>';
    vSignee += '<option value="4">4</option>';
    vSignee += '<option value="5">5</option>';
    vSignee += '</select>';
    vSignee += '</td>';
    vSignee += '<td style="width:20px"><img src="../Content/Images/icon/delete.png" style="visibility:hidden; width: 20px" /></td>';
    vSignee += '</tr>';
    $('#tblSignees').html(vSignee);
    $('#tblInternalSignees').empty();
    vSignee = '<tr>';
    vSignee += '<td class="width80">';
    vSignee += '<input id="txtInternalSignee1" name="InternalSigneeName1" placeholder="Signee Name" title="Signee" type="text" class="f_inpt width80"  readonly="readonly" />';
    vSignee += '<span class="right-float"><a href="javascript:void(0)" class="linkText" onclick="BrowseInternalSignee(\'txtInternalSignee1\', \'txtInternalEmail1\')">Browse</a></span>';
    vSignee += '</td>';
    vSignee += '<td style="display:none;">';
    vSignee += '<input id="txtInternalEmail1" name="InternalSigneeEmail1" placeholder="Signee Email" title="Email" type="text" class="f_inpt width90" />';
    vSignee += '</td>';
    vSignee += '<td class="width20">';
    vSignee += '<select id="ddlInternalSigneeOrder1" name="InternalSigneeOrder1" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder validelement">';
    vSignee += '<option value="1">1</option>';
    vSignee += '<option value="2" selected="selected">2</option>';
    vSignee += '<option value="3">3</option>';
    vSignee += '<option value="4">4</option>';
    vSignee += '<option value="5">5</option>';
    vSignee += '</select>';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">';
    vSignee += '<img src="../Content/Images/icon/delete.png" style="visibility:hidden; width: 20px" />';
    vSignee += '</td>';
    vSignee += '</tr>';
    $("#tblInternalSignees").append(vSignee);
}

function DisableCCUsers() {
    var globalConOwners = getGlobalContractOwners();
    var contractPeople = (contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees
                    + ";" + contractItem.ContractAreaAdministrators + ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadOnlyPermissions
                    + ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager + ";" + globalConOwners).split(';');
    contractPeople = $.map(contractPeople, $.trim);
    contractPeople = contractPeople.filter(function (people) {
        return people.trim() != '';
    });
    var myArray = $("#ddlCC>option").map(function () { return $(this).val(); }).get();
    if (myArray == null)
        myArray = [];
    $.each(myArray, function (i, item) {
        if (contractPeople.indexOf(item) < 0)
            $('#ddlCC option[value= "' + item + '"]').attr('disabled', 'disabled');
        else
            $('#ddlCC option[value= "' + item + '"]').removeAttr('disabled');
    });
    $("#ddlCC").trigger('chosen:updated');
}

function getNameAndEmailSignDocument() {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + getParameterByName("ContractID") + '/contacts',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data != null) {
                var datalenght = data.length;
                var allInternal = ''
                var iex = 0;
                var iIn = 1;
                var totalFileCount = 0;
                var totalFileCountTaken = 0;
                var uiTakenCount = 2;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    totalFileCount++;
                    if (item.InternalOrExternal == "External") {
                        if (iex == 0 && totalFileCountTaken < 5) {
                            iex = 1;
                            totalFileCountTaken += 1;
                            $('#txtSignee1').val(item.ContactName);
                            $('#txtEmail1').val(item.EmailID);
                        }
                        else if (totalFileCountTaken < 5 && iex < 4) {
                            totalFileCountTaken += 1;
                            uiTakenCount += 1;
                            iex += 1;
                            var htmlFormatFile = '<tr id="trSignee' + totalFileCount + '">';
                            htmlFormatFile += '<td class="width40">';
                            htmlFormatFile += '<input id="txtSignee' + totalFileCount + '" value="' + item.ContactName + '" name="SigneeName' + totalFileCount + '" placeholder="Signee Name" title="Signee Name" type="text" class="f_inpt width90" value="' + item.ContactName + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width40">';
                            htmlFormatFile += '<input id="txtEmail' + totalFileCount + '" value="' + item.EmailID + '" name="SigneeEmail' + totalFileCount + '" placeholder="Signee Email" title="Signee Email" type="text" class="f_inpt width90 validelement validemail" value="' + item.EmailID + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width20">';
                            htmlFormatFile += '<select id="ddlSigneeOrder' + totalFileCount + '" name="SigneeOrder' + totalFileCount + '" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder">';
                            htmlFormatFile += '<option value="1">1</option>';
                            htmlFormatFile += '<option value="2">2</option>';
                            htmlFormatFile += '<option value="3">3</option>';
                            htmlFormatFile += '<option value="4">4</option>';
                            htmlFormatFile += '<option value="5">5</option>';
                            htmlFormatFile += '</select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td style="width:20px">';
                            htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteSignee(this)"><img src="../Content/Images/icon/delete.png" /></a>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';
                            $("#tblSignees").append(htmlFormatFile);
                            $("#ddlSigneeOrder" + totalFileCount).val(uiTakenCount);
                        }
                    }
                    else {
                        if ($("#tblSigneeUser").find('li').length > 0) {
                            $("#tblSigneeUser").find('li').each(function () {
                                var inputval = ($(this).find('input').length > 0 ? $(this).find('input').val() : "");
                                if (inputval != "" && inputval == item.ContactName) {
                                    if (iIn == 1 && totalFileCountTaken < 5 && iIn < 5) {
                                        iIn = 2;
                                        totalFileCountTaken += 1;
                                        $("#txtInternalSignee1").val(item.ContactName);
                                        $("#txtInternalEmail1").val(item.EmailID);
                                    }
                                    else if (totalFileCountTaken < 5 && iIn < 5) {
                                        AddInternalSignee();
                                        uiTakenCount += 1;
                                        totalFileCountTaken += 1;
                                        $("#txtInternalSignee" + iIn).val(item.ContactName);
                                        $("#txtInternalEmail" + iIn).val(item.EmailID);
                                        iIn += 1;
                                    }
                                }
                            })

                        }
                        else {
                            var GetAuthorizedsignatory = '';
                            if (contractItem != "" && contractItem.CompanyProfile != "" && contractItem.CompanyProfile != "" && contractItem.CompanyProfile != "undefined")
                                GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=' + getParameterByName("ContractID") + '&contractareaname=';
                            else
                                GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=&contractareaname=' + encodeURIComponent($("#lblContractArea").text());
                            $.ajax({
                                url: GetAuthorizedsignatory,
                                type: 'GET',
                                dataType: 'json',
                                'Content-Type': 'application/json',
                                cache: false,
                                async: false,
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                success: function (data) {
                                    var v = $(data).length;
                                    var datalenght = data.length;
                                    for (var i = 0; i < datalenght; i++) {
                                        var itemin = data[i];
                                        var sRowKey = itemin.RowKey;
                                        var sUserName = itemin.UserName;
                                        var sEmail = itemin.EmailID;
                                        var nospaceUserName = sUserName.replace(/ /g, "_");
                                        var sUser = '<li>';
                                        sUser += '<input id="' + sEmail + '_' + nospaceUserName + '" title="' + sEmail + '" type="radio" name="SigneeUser" class="css-checkbox" value="' + sUserName + '" />';
                                        sUser += '<label for="' + sEmail + '_' + nospaceUserName + '" class="css-label">' + sUserName + '</label>';

                                        sUser += '</li>';
                                        $("#tblSigneeUser").append(sUser);
                                    }
                                    $("#tblSigneeUser").find('li').each(function () {
                                        var inputval = ($(this).find('input').length > 0 ? $(this).find('input').val() : "");
                                        if (inputval != "" && inputval == item.ContactName) {
                                            if (iIn == 1 && totalFileCountTaken < 5 && iIn < 5) {
                                                iIn = 2;
                                                totalFileCountTaken += 1;
                                                $("#txtInternalSignee1").val(item.ContactName);
                                                $("#txtInternalEmail1").val(item.EmailID);
                                            }
                                            else if (totalFileCountTaken < 5 && iIn < 5) {
                                                AddInternalSignee();
                                                uiTakenCount += 1;
                                                totalFileCountTaken += 1;
                                                $("#txtInternalSignee" + iIn).val(item.ContactName);
                                                $("#txtInternalEmail" + iIn).val(item.EmailID);
                                                iIn += 1;
                                            }
                                        }
                                    })
                                },
                                error:
                                    function (data) {

                                    }
                            });
                        }
                    }
                }
                if (uiTakenCount >= 5) {
                    $("#spAddSignee").css("display", "none");
                    $("#spAddInternalSignee").css("display", "none");
                }
                else {
                    $("#spAddSignee").css("display", "");
                    $("#spAddInternalSignee").css("display", "");
                }
            }
        },
        error: function () {
        },
        complete: function () {
            $("#loadingPage").fadeOut();
        }

    });
}

function AddInternalSignee() {
    var vLastRow = $("#tblInternalSignees tr:last").attr('id');
    var totalFileCount = "2";
    if (typeof vLastRow == "undefined") {
        totalFileCount = "2";
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trInternalSignee", ""));
        totalFileCount += 1;
    }
    var vLastRowC = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
    var totalFileCountC = 2;
    if (typeof vLastRowC == "undefined") {
        totalFileCountC = 2;
    }
    else {

        totalFileCountC = vLastRowC;
    }
    if (totalFileCountC < 5) {
        var htmlFormatFile = '<tr id="trInternalSignee' + totalFileCount + '">';
        htmlFormatFile += '<td class="width80">';
        htmlFormatFile += '<input id="txtInternalSignee' + totalFileCount + '" name="InternalSigneeName' + totalFileCount + '" readonly="readonly" placeholder="Signee Name" title="Signee" type="text" class="f_inpt width80"  readonly="readonly" />';
        htmlFormatFile += '<span class="right-float"><a href="javascript:void(0)" onclick="BrowseInternalSignee(\'txtInternalSignee' + totalFileCount + '\', \'txtInternalEmail' + totalFileCount + '\')" class="linkText">Browse</a></span>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="display:none;">';
        htmlFormatFile += '<input id="txtInternalEmail' + totalFileCount + '" name="InternalSigneeEmail' + totalFileCount + '" placeholder="Signee Email" title="Email" type="text" class="f_inpt width90 validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width20">';
        htmlFormatFile += '<select id="ddlInternalSigneeOrder' + totalFileCount + '" name="InternalSigneeOrder' + totalFileCount + '" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder validelement">';
        htmlFormatFile += '<option value="1" selected="selected">1</option>';
        htmlFormatFile += '<option value="2">2</option>';
        htmlFormatFile += '<option value="3">3</option>';
        htmlFormatFile += '<option value="4">4</option>';
        htmlFormatFile += '<option value="5">5</option>';
        htmlFormatFile += '</select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteInternalSignee(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblInternalSignees").append(htmlFormatFile);

        var rowCount = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
        $("#ddlInternalSigneeOrder" + totalFileCount).val(rowCount);
        if (rowCount >= 5) {
            $("#spAddSignee").css("display", "none");
            $("#spAddInternalSignee").css("display", "none");
        }
        else {
            $("#spAddSignee").css("display", "");
            $("#spAddInternalSignee").css("display", "");
        }
    }
    else {
        $("#spAddSignee").css("display", "");
        $("#spAddInternalSignee").css("display", "");
    }
}

function DeleteInternalSignee(n) {
    var vv = $(n.parentNode.parentNode).find('select');
    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $("#spAddSignee").css("display", "");
    $("#spAddInternalSignee").css("display", "");
    $(".SigneeOrder").each(function (index, data) {
        var curVal2 = parseInt($(data).val());
        if (curVal2 > curVal) {
            $(data).val(curVal2 - 1);
        }
    });
}

function BrowseInternalSignee(objName, objEmail) {
    $("#hdUserName").val(objName);
    $("#hdUserEmail").val(objEmail);
    var selectedID = $("#" + $("#hdUserEmail").val()).val();
    if ($("#tblSigneeUser li").length > 0) {
        $("#browseSigneeUser").dialog("option", "title", "Select Signee");
        if (selectedID != "") {
            var nospaceUserName = $("#" + $("#hdUserName").val()).val().replace(/ /g, "_");
            $('input:radio[name=SigneeUser][id="' + selectedID + '_' + nospaceUserName + '"]').attr('checked', 'checked');
        }
        else
            $('input:radio[name=SigneeUser]').attr('checked', false);
        $("#browseSigneeUser").dialog("open");
    } else {

        BindAuthorizedSignatory(vContractID, $("#lblContractArea").text(), $("#lblContractType").text());//Authorize Signatory Enhancment

    }
}

function BindAuthorizedSignatory(contractid, contractareaname, contracttype) {
    $("#loadingPage").fadeIn();
    //Authorize Signatory Enhancment
    var GetAuthorizedsignatory = '';
    if (setting_AuthorizeSign == "By Contract Type") {
        GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=&contractareaname=&contracttype=' + encodeURIComponent(contracttype);
    }
    else if (setting_AuthorizeSign == "None") {
        GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=&contractareaname=&contracttype=';
    }//Authorize Signatory Enhancment
    else {
        if (contractItem != "" && contractItem.CompanyProfile != "" && contractItem.CompanyProfile != "undefined")
            GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=' + contractid + '&contractareaname=&contracttype=';
        else
            GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=&contractareaname=' + encodeURIComponent(contractareaname) + '&contracttype=';
    }

    $.ajax({
        url: GetAuthorizedsignatory,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var v = $(data).length;
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var sRowKey = item.RowKey;
                var sUserName = item.UserName;
                var sEmail = item.EmailID;
                var nospaceUserName = sUserName.replace(/ /g, "_");
                var sUser = '<li>';
                sUser += '<input id="' + sEmail + '_' + nospaceUserName + '" title="' + sEmail + '" type="radio" name="SigneeUser" class="css-checkbox" value="' + sUserName + '" />';
                sUser += '<label for="' + sEmail + '_' + nospaceUserName + '" class="css-label">' + sUserName + '</label>';

                sUser += '</li>';
                $("#tblSigneeUser").append(sUser);
            }
            //Authorize Signatory Enhancment
            if (setting_AuthorizeSignRestriction == "No") {
                var sUser = '<li>';
                sUser += '<input id="rad_AuthorizeSignRestriction" type="radio" name="SigneeUser" class="css-checkbox" onclick="ShowInternalSigneeOther()" value="AuthorizeSignRestriction" />';
                sUser += '<label for="rad_AuthorizeSignRestriction" class="css-label" onclick="ShowInternalSigneeOther()">Other</label><br/>';
                sUser += '<select id="ddlAuthorizeSignRestriction" name="Status" class="f_inpt" style="display: none;"></select>';
                sUser += '</li>';
                $("#tblSigneeUser").append(sUser);
                var $options = $("#ddlDocumentShareInternal > option").clone();
                $('#ddlAuthorizeSignRestriction').append($options);
            }
            //Authorize Signatory Enhancment

            $("#loadingPage").fadeOut();
            $("#browseSigneeUser").dialog("option", "title", "Select Signee");
            $("#browseSigneeUser").dialog("open");
        },
        error:
            function (data) {
                //Authorize Signatory Enhancment
                if (setting_AuthorizeSignRestriction == "No") {
                    var sUser = '<li>';
                    sUser += '<input id="rad_AuthorizeSignRestriction" type="radio" name="SigneeUser" class="css-checkbox" onclick="ShowInternalSigneeOther()" value="AuthorizeSignRestriction" />';
                    sUser += '<label for="rad_AuthorizeSignRestriction" class="css-label" onclick="ShowInternalSigneeOther()">Other</label><br/>';
                    sUser += '<select id="ddlAuthorizeSignRestriction" name="Status" class="f_inpt" style="display: none;"></select>';
                    sUser += '</li>';
                    $("#tblSigneeUser").append(sUser);
                    var $options = $("#ddlDocumentShareInternal > option").clone();
                    $('#ddlAuthorizeSignRestriction').append($options);
                }//Authorize Signatory Enhancment
                else {
                    var sUser = '<li>';
                    sUser += 'No items found.';
                    sUser += '</li>';
                    $("#tblSigneeUser").append(sUser);
                }
                $("#loadingPage").fadeOut();
                $("#browseSigneeUser").dialog("option", "title", "Select Signee");
                $("#browseSigneeUser").dialog("open");
            }
    });
}

function ShowInternalSigneeOther() {
    if ($('#rad_AuthorizeSignRestriction').prop('checked'))
        $('#ddlAuthorizeSignRestriction').css('display', '')
    else
        $('#ddlAuthorizeSignRestriction').css('display', 'none')
}

function SelectedOrder(obj) {
    var curVal = $(obj).val();
    var curID = $(obj).attr('id');
    $(".SigneeOrder").each(function (index, data) {
        var curVal2 = $(data).val();
        var curID2 = $(data).attr('id');
        if (curVal == curVal2 && previousID != curID2) {
            $(data).val(previousVal);
        }
    });
}

var previousVal;
var previousID;
function ClickedOrder(obj) {
    previousVal = $(obj).val();
    previousID = $(obj).attr('id');
}

function SendForSignature() {
    //manoj
    var Collectemail = "";
    $('#tblSignees input[title="Email"]').each(function (i, item) {
        if ($.trim(item.value) != "") {
            Collectemail += ";" + $.trim(item.value);
        }
    });
    if ($.trim($("#txtInternalSignee1").val()) != "" || $.trim(Collectemail) != "") {
        //manoj
        var vValid = requiredValidator('sendForSignature', true);
        if ($("#hdDocumentID").val() == '') {
            vValid = false;
            swal({ html: true, title: '<i>Error</i>', text: '<b>Select document. </b>' });
        }

        if (vValid) {
            var emailvalue = "";
            arremail = [];
            $('#sendForSignature .validemail').each(function (i, item) {
                if (emailvalue == '') {
                    emailvalue = item.value;
                    if (emailvalue != "")
                        arremail.push(emailvalue.toLowerCase());
                    emailvalue = '';
                }
            });
            recipientsArray = arremail.sort();
            reportRecipientsDuplicate = [];
            for (var j = 0; j < recipientsArray.length - 1; j++) {
                if (recipientsArray[j + 1] == recipientsArray[j]) {
                    reportRecipientsDuplicate.push(recipientsArray[j]);
                    if (reportRecipientsDuplicate.length > 0) {
                        vValid = false;
                    }

                }
            }


            if (vValid && $("#hdDocumentID").val() != '') {
                $("#loadingPage").fadeIn();
                var contractForm = $("#frmSignees *, #frmInternalSignees *").serialize();

                var vAutoStatusChange = $("#chkAutoUpdateStatusSignDoc").is(':checked') ? 'Yes' : 'No';
                contractForm += "&SigneeMsg=" + encodeURIComponent($("#txtSigneeMsg").val());
                contractForm += "&Subject=" + encodeURIComponent($("#txtSubject").val());
                if (RightSignatureFlag) {
                    contractForm += "&ExpIn=" + $("#ddltxtExpIn").val();
                }
                else {
                    contractForm += "&ExpIn=" + $("#txtExpIn").val();
                }

                contractForm += "&DocumentURL=" + encodeURIComponent($("#hdDocumentURL").val());
                contractForm += "&AutoUpdateStatus=" + vAutoStatusChange;
                var ccUsers = $("#ddlCC").val();
                var internalSigneeUsers = '';
                var cc = '';
                var ins = '';
                $(ccUsers).each(function (i, item) {
                    if (cc == '') {
                        cc = item;
                    }
                    else {
                        cc += "; " + item;
                    }
                });
                contractForm += "&CC=" + cc;
                contractForm += "&InternalSignee=" + ins;
                contractForm += "&ConID=" + getParameterByName("ContractID");
                var vDocID = $("#hdDocumentID").val();
                $("#inprocessSendForSignature").css('visibility', 'visible');


                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + vDocID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'UserName': localStorage.UserName },
                    data: contractForm,
                    cache: false,
                    success: function (person) {
                        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                        var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                            return (n.RowKey == "26" && n.Status == "ON");
                        });
                        if (vDocLibFeat != null) {
                            if (vDocLibFeat.length > 0) {
                                if (person.split('~')[0] == "AdvancedDocusign") {
                                    window.open(person.split('~')[1]);
                                }
                            }
                        }

                        $("#sendForSignature").dialog("close");
                        ClearSignatureForm();
                        if (vAutoStatusChange == "Yes" && $("#hdIsPrimaryDoc").val() == "Yes") {
                            contractItem.Status = "Awaiting Signatures";
                            contractItem.IsFinalized = "Yes";
                            contractItem.FinalizedBy = localStorage.UserName;
                            ContractTopActions();
                            EnableAllMilestones(getParameterByName("ContractID"));
                        }


                        //manoj
                        if (documentview == null || documentview == "" || documentview == 'folder') {
                            if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                var selectedfoldervalue = $('#showAll').find("a");
                                var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                showfolderdocuments(parentdocumentdetails);
                            }
                            else {
                                BindDocument(vContractID);
                            }
                        } else {
                            DisplayDocument(documentview);
                        }
                        BindUpdatedContractDetails(vContractID);
                        //GetContractPendingAction(true, "BindPeoples");
                        $("#hdnFolderDocumentView").text('');
                        $("#hdnShowAllTextValue").html('');
                        PrvFolderselection = '';
                        //Bind primary and pined document based on new feature
                        if ($("#hdnnewdocumentfeature").text() == "Yes") {
                            CreateDocumentListPinView(vContractID);
                        }
                        //manoj
                        GetContractActivities(vContractID);
                        $("#loadingPage").fadeOut();
                    },
                    error: function (person) {
                        swal("", person.responseText);
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {
                        $("#inprocessSendForSignature").css('visibility', 'hidden');
                        $("#loadingPage").fadeOut();
                    }
                });


            }
            else {
                $('#sendForSignature .validemail').each(function (i, item) {
                    for (i = 0; i <= reportRecipientsDuplicate.length; i++) {
                        if (item.value.toLowerCase() == reportRecipientsDuplicate[i]) {
                            var id = item.id;
                            $('#' + id).addClass('error')
                        }
                    }

                });
            }
        }
        //manoj
    } else {
        swal("", "Please add <span style='font-weight:700'>External/Internal signee(s)</span> to send Document for Signature.");
    }
    //manoj
}

$(document).on('click', '#btnAddContractDocument', function () {
    Updatedocumenttap = false;
    $("#lblTemplateDescription").text("");
    $('#addNewDocument').css("pointer-events", "auto");
    $("#btnManagesubfolder").css("display", "none");
    AddContractDocument();
    addbuttonclick = true;
});

function AddContractDocument(objmanagefolder) {
    //manoj
    $("#btnManagesubfolder").css("display", "none");
    if (typeof ($("#hdnContractDocumentsUrl").text()) != "undefined" && $("#hdnContractDocumentsUrl").text() != null && $("#hdnContractDocumentsUrl").text() != "") {
        MangeContractFolder($("#hdnContractDocumentsUrl").text().substring(1));
        $("#liRelatedAction").html('Other Action(s)');
        $("#liManageFolders").css("display", "");
    } else {
        $("#dvManageFolder").html('No items found.');
        $("#liManageFolders").css("display", "none");
        $("#liRelatedAction").html('Other Action');
    }
    ClearManageDoc();
    $("#btnDocAdd").css("display", "");
    //manoj
    $("#btnDocCancel").html('<span class="pop_up_Content_Green pop_up_Content_White margin-0px">Cancel</span>');
    //manoj
    document.getElementById('docManageBulk').addEventListener('change', handleFileSelect, false);
    $('#lblTemplateDescription').text("");
    $('#dtValidFrom').removeClass('error')
    $('#dtValidTill').removeClass('error')
    $('#errormsg_dtValidFrom').text('');
    $('#errormsg_dtValidTill').text('');
    $('#dtValidFrom').val('');
    $('#dtValidTill').val('');
    $('#ddlDocumentStatus').val("New");
    //$("#formValidity").css("display", "none");
    $("#formValidityForm").css("display", "none");
    $("#tabUpload").addClass("document_active");
    $("#tabTemplate").removeClass("document_active");
    $("#tabExistingDocument").removeClass("document_active");
    $("#tabBulkUpload").removeClass('document_active');
    $("#tabManageFolder").removeClass('document_active');
    $("#btnDocAdd").html('<span class="ui-button-text">Upload</span>')
    //manoj
    $("#btnDocCancel").html('<span class="pop_up_Content_Green pop_up_Content_White margin-0px">Cancel</span>');
    //manoj

    if (document.getElementById("trdesc").style.display != "none") {
        //$(".clmoreinfo").toggle();
        $("#linkMoreInfo").click();
    }

    if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
        $("#dtValidFrom").val("");
        $("#dtValidTill").val("");
        if (document.getElementById("formValidityForm").style.display != "none") {
            $("#linkAddValidity").click();
        }
        $("#linkAddValidity").css('display', 'none');
        //if ($("#linkAddValidity").text() == "Track document expiration date") {
        //    $("#linkAddValidity").css('display', 'none');
        //}
        //else {
        //    $("#linkAddValidity").click();
        //    $("#linkAddValidity").css('display', 'none');
        //}
    }
    else {
        $("#linkAddValidity").css('display', 'block');
    }

    $("#tblContentControls").empty();
    selectUploadFromComputer();

    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "16" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $('input[type="radio"][name="IsFinalized"][value="No"]').prop('checked', true);
    } else {
        $('input[type="radio"][name="IsFinalized"][value="Yes"]').prop('checked', true);
    }
    if (contractItem.IsStandard == "Yes")
        $('input[type="radio"][name="IsStandard"][value="Yes"]').prop('checked', true);
    else
        $('input[type="radio"][name="IsStandard"][value="No"]').prop('checked', true);
    //$('input[type="radio"][name="IsPrimary"][value="No"]').prop('checked', true);
    $("#radioPrimaryNo").prop("checked", true);
    $("#txtDocumentID").val("");
    $("#txtDocumentName").val("");
    $("#docContract").replaceWith($("#docContract").val('').clone(true));
    $("#txtDescriptionDoc").val("");
    $("#txtDocumentLanguageCreate").val("");
    $("#txtHardCopyPhysicalLocationCreate").val("");

    $("#lblCTitleDoc").text($("#lblContractTitle").text());
    $("#trFileUpload").css("display", "");
    $("#trDocumentType").css("display", "");
    $("#ddlDocumentTemplate").val("0");
    $("#ddlDocumentTemplate").removeClass('validelement');
    $("#txtDocumentNameCreate").val("");
    $("#txtDocumentNameCreate").removeClass('validelement');
    $("#docContract").replaceWith($("#docContract").val('').clone(true));

    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    $(".specialchar").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    $(".filecorevo").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });


    if ($('#tblExistingDocument tr').length <= 0) {
        BindDocumentNotTagToContract();
    }
    $("#btnNewFolder").text('Create Sub Folder');
    setDocumentUrl();

    $("#ddlDocumentTypeCreate").val("0");

    if ($('#showAll').text() == null || $('#showAll').text() == "" || typeof ($('#showAll').text()) == "undefined") {
        $('#txtNewFolderName').addClass('validelement');
    }
    else {
        $('#txtNewFolderName').removeClass('validelement');
    }
    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var documentreminders = defaultGlobalSettings.DocumentReminders;
        var xmlDoc = $.parseXML(documentreminders);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "New").val(remSplit[0]);
            $("#txtReminder" + j + "New").val(remSplit[1]);
            j = j + 1;
        });
    }

    //manoj
    $("#fileUploadOCR").prop('checked', false);
    $("#trfileUploadOCR").css('display', 'none');

    if (typeof (objmanagefolder) != "undefined" && objmanagefolder != null && objmanagefolder != "") {
        Manage_Folder();
    }
    //manoj

    //$("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
    $("#addEditDocument").dialog("option", "title", "Manage Document");
    $("#addEditDocument").dialog("open");
}

function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object
    var fileslength = files.length;
    for (var i = 0; i < fileslength; i++) {
        droppedfiles.push(files[i]);
    }

    removedItems = [];
    //ReturnFolderSelection_New();
    readfiles(files);
}

function MangeContractFolder(parentFolderName) {
    $("#dvManageFolder").html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    //manoj
    $("#browseFolder").html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    $("#browseFolderMove").html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    //manoj
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?documentlibrary=' + parentFolderName,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (folder) {
            try {
                $("#btnManagesubfolder").css("display", "");
                $("#dvManageFolder").html('<div id="treeviewManageFolderOption" class="demo-section"></div><input id="txtManageFolder" type="hidden" /><input id="txtManageFolderURL" type="hidden" />');
                $('#treeviewManageFolderOption').empty();
                $('#treeviewManageFolderOption').tree({
                    data: folder,
                    autoOpen: 0
                });
            } catch (ex) {
                //alert(ex);
            }
        },
        error:
            function (data) {
                $("#btnManagesubfolder").css("display", "none");
                //$("#btnaddsubfolder").css("display", "none");
                $("#dvManageFolder").html('No items found.');
            }
    });
}

function ClearManageDoc(obj) {
    $("#tblManageBulkControls").empty();
    $("#docManageBulk").empty();
    Managedroppedfiles = [];
    Managedropexitfilename = [];
    //opmlFile = null;
    ManagedroppedControls = 0;
    Managedropcontrolifdelete = 0;
    Collectcontractdocument = false;
    ContractDocumentDetails = [];
    $("#lblManageFilesCount").text("");
    $('#tblManageBulkControls').css("pointer-events", "auto");
    ManageBulkDocumentUpload();
    parentfolderidtopass = "";
    if (obj != true) {
        ReturnFolderSelection();
        $(".clManageDrop").css("display", "none");
        $(".clManageDropFldr").css("display", "none");
        $(".clManageDrag").css("display", "");
    } else {

    }
}

function ReturnFolderSelection() {
    var arrShowallTesxt = [];
    var fldratrical = "";
    var spnfldratrical = "";
    if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
        //manoj
        arrShowallTesxt = $.map($('#showAll').text().split('/'), $.trim);
        arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
        var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
        finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
        $("#spnDocFolderURL").text(finalurl + arrShowallTesxt.join('/') + '/');
        $("#spnmanagebtn").css("display", "");
        //manoj
    } else {
        if (typeof (contractItem) != "undefined" && contractItem != null && contractItem != "" && contractItem.ContractDocumentsUrl != null && contractItem.ContractDocumentsUrl != "") {
            arrShowallTesxt = $.map(contractItem.ContractDocumentsUrl.split('/'), $.trim);
            arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
            arrShowallTesxt = arrShowallTesxt.slice(1);
            $("#spnDocFolderURL").text(contractItem.ContractDocumentsUrl);
            $("#spnmanagebtn").css("display", "");
        } else {
            //arrShowallTesxt = [];
            var headerid = $("#lblContractTitle").text();
            headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
            var finalurl = "";
            finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
            finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
            finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
            finalurl = finalurl + headerid + '/';
            $("#spnDocFolderURL").text(finalurl);
            $("#spnmanagebtn").css("display", "none");
            arrShowallTesxt = $.map(headerid.split('/'), $.trim);
            arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
        }
    }
    if (arrShowallTesxt.length == 0) {

    }
    else if (arrShowallTesxt.length == 1) {
        fldratrical = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt.toString() + '</span>';
        spnfldratrical = "/" + arrShowallTesxt.toString() + "/";
    } else {
        for (var fldr = 0; fldr < arrShowallTesxt.length; fldr++) {
            if (arrShowallTesxt.length - 1 == fldr) {
                fldratrical += '/<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
            } else {
                fldratrical += '/<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
            }
            spnfldratrical += "/" + arrShowallTesxt[fldr].toString();
        }
        spnfldratrical += "/";
    }
    if (fldratrical != "" && fldratrical.charAt(0) == '/') {
        fldratrical = fldratrical.substr(1);
    }
    $("#dvDocFolderURL").html(fldratrical);
}

function selectUploadFromComputer() {
    $("#tblNewDocument").css('display', '');
    $("#tblExistingDocument").css('display', 'none');
    $("#tblExistingDocumentSearch").css('display', 'none');
    $("#tblExistingDocumentPaging").css('display', 'none');
    $("#tblBulkUploadFolders").css('display', 'none');
    $("#tblManageFolders").css('display', 'none');
    $("#tabUpload").addClass('form-active');
    $("#tabTemplate").removeClass('form-active');
    $("#tabExistingDocument").removeClass('form-active');
    $("#tabBulkUpload").removeClass('form-active');
    $("#tabManageFolder").removeClass('form-active');
    $("#docContract").addClass('validelement');
    $("#docContract").addClass('validfilename');
    $("#ddlDocumentTemplate").removeClass('validelement');
    $("#trTemplate").css('display', 'none');
    $("#trTemplate1").css('display', 'none');
    $("#trFileUpload").css('display', '');
    $("#trDocumentType").css("display", "");
    $('input:checkbox[name=NotTaggedContract]').attr('checked', false);
    $("#hdnIsDocumentTag").text('');
    $("#formTitle").text('Upload from Computer');
}

function BindDocumentNotTagToContract() {
    $('#tblExistingDocument').html('<img src="../Content/Images/icon/loading.gif"> Loading...');
    $('#compact-paginationDocument').css("display", "none");
    try {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/NotTaggedToContract?searchkeyword=' + encodeURIComponent($("#txtSearchDocument").val()),
            type: 'GET',
            cache: false,
            contentType: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            processData: false,
            success: function (datacollection) {
                var data = datacollection;
                //    $.grep(datacollection, function (n, i) {
                //    return (n.ContractArea == $("#lblContractArea").text().trim());
                //});
                if (data.length > 0) {
                    var settings = {
                        pattern: /\.[0-9a-z]+$/i,
                        knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
                        WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
                    };
                    var article = '';
                    var datalenght = data.length;
                    for (var i = 0; i < datalenght; i++) {
                        var item = data[i];
                        var vURL = encodeURI(item.DocumentUrl);
                        var ext = vURL.match(settings.pattern);
                        var vFileType = '<dd class="file-icon none"></dd>';
                        if (ext != null) {
                            if (ext.length > 0) { ext = ext[0].slice(1); }
                            if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                                vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                            }
                        }

                        article += '<tr><td class="labelleft">';
                        article += '<input id="' + item.RowKey + '" type="checkbox" class="margin-right-5" name="NotTaggedContract" value="' + item.DocumentName + '" />';

                        article += vFileType + '<label for="' + item.RowKey + '" class="">' + item.DocumentName + '</label>';
                        article += '</td></tr>';
                    }
                    $("#tblExistingDocument").html(article);
                    article = '';
                    $('#compact-paginationDocument').css("display", "");
                    var vCount = $("#tblExistingDocument tr").length;
                    $('#compact-paginationDocument').pagination({
                        items: vCount,
                        itemsOnPage: 5,
                        typeID: 'tblExistingDocument',
                        cssStyle: 'compact-theme'
                    });
                } else {
                    $("#tblExistingDocument").html('<tr><td class="f_p-error det_metadata_notavailble">No items found.</td></tr>');
                }
            },
            error: function () {
                $("#tblExistingDocument").html('<tr><td class="f_p-error det_metadata_notavailble">No items found.</td></tr>');
            }
        });
    } catch (e) {

    }
}

function setDocumentUrl() {
    var headerid = $("#lblContractTitle").text();
    headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
    var finalurl = "";
    //var newurl = "";
    //if ($('#hdnContractDocumentsUrl').text() != "") {
    //if (typeof ($('#hdnContractDocumentsUrl').text()) != "undefined"  && $("#hdnContractDocumentsUrl").text() != null && $("#hdnContractDocumentsUrl").text()!="") {

    //}
    finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl.trim() : finalurl.trim();
    finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
    //manoj
    if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text() != null && $('#showAll').text() != "") {
        $("#txtNewFolderName").val("");
        $("#txtNewFolderName").css('display', 'none');
        //var lastcharfind = finalurl;
        //lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
        //if (lastcharfind == "/") {
        $("#lblFolderUrl").text(finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/');
        // }
        //else {
        //$("#lblFolderUrl").text($("#hdnContractDocumentsUrl").text() + "/");
        // }
        $("#btnNewFolder").css('display', '');
        //$("#lblFolderUrl").css('cursor', 'pointer');

        //$("#lblFolderUrl").click(function () {
        //    CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
        //    $("#treeviewFolder").dialog("option", "title", "Select Folder");
        //    $("#treeviewFolder").dialog("open");
        //});
        //$("#btnBrowseSubFolders").css('display', '');
        $("#btnBrowseSubFolders").parent().css("display", "")
        $("#btnBrowseSubFolders").click(function () {
            ManageFolderAction = "";
            //CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
            $("#treeviewFolder").dialog("option", "title", "Select Folder");
            $("#treeviewFolder").dialog("open");
        });
    } else {
        //$("#btnBrowseSubFolders").css('display', 'none');
        $("#btnBrowseSubFolders").parent().css("display", "none")
        $("#txtNewFolderName").css('display', '');
        $("#lblFolderUrl").text(finalurl);
        //$("#lblFolderUrl").css('cursor', 'default');
        $("#btnNewFolder").css('display', 'none');
        $("#txtNewFolderName").val(headerid);
    }
    //manoj
    //if ($("#hdnContractDocumentsUrl").text() != "") {
    //    $("#txtNewFolderName").val("");
    //    $("#txtNewFolderName").css('display', 'none');
    //    var lastcharfind = $("#hdnContractDocumentsUrl").text();
    //    lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
    //    if (lastcharfind == "/") {
    //        $("#lblFolderUrl").text($("#hdnContractDocumentsUrl").text());
    //    }
    //    else {
    //        $("#lblFolderUrl").text($("#hdnContractDocumentsUrl").text() + "/");
    //    }
    //    $("#btnNewFolder").css('display', '');
    //    $("#lblFolderUrl").css('cursor', 'pointer');

    //    $("#lblFolderUrl").click(function () {
    //        CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
    //        $("#treeviewFolder").dialog("option", "title", "Select Folder");
    //        $("#treeviewFolder").dialog("open");
    //    });
    //    $("#btnBrowseSubFolders").css('display', '');
    //    $("#btnBrowseSubFolders").click(function () {
    //        CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
    //        $("#treeviewFolder").dialog("option", "title", "Select Folder");
    //        $("#treeviewFolder").dialog("open");
    //    });

    //} else {
    //    $("#btnBrowseSubFolders").css('display', 'none');
    //    $("#txtNewFolderName").css('display', '');
    //    $("#lblFolderUrl").text('/' + $('#hdContAreaDocLibName').val() + '/');
    //    $("#lblFolderUrl").css('cursor', 'default');
    //    $("#btnNewFolder").css('display', 'none');
    //    if (typeof $("#ddlContracts").find('option:selected').val() != 'undefined' && $("#ddlContracts").find('option:selected').val() != "0") {
    //        $("#txtNewFolderName").val($("#ddlContracts").find('option:selected').text().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
    //    }
    //    else {
    //        $("#txtNewFolderName").val($("#lblContractTitle").text().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
    //    }
    //}
    if (AllowSaveDraftInCloud == "on") {
        $("#AllowSaveDraftCloud").css('display', '');
        if (SaveDraftInCloud == "on") {
            $("#rad_CopyLibraryAndAzure").attr('checked', 'checked');
        }
        else {
            $("#rad_CopyLibrary").attr('checked', 'checked');
        }
    }
    else {
        $("#AllowSaveDraftCloud").css('display', 'none');
        $("#rad_CopyLibrary").attr('checked', 'checked');
    }
    if (typeof ($('#showAll').text().replace(/ \/ /g, '/')) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
        var n = $('#lblFolderUrl').text().split('/');
        var newurl = n[0] + "/" + n[1];
        $('#lblFolderUrl').text(newurl + "/" + $('#showAll').text().replace(/ \/ /g, '/') + '/')
    }
}

function Manage_Folder() {
    $("#liManageFolders a").trigger("click");
}

function ManageBulkDocumentUpload() {
    holderManagebulk = document.getElementById('holderManagebulk');
    holderManagebulk.ondragover = function (e) {
        //if (document.getElementById("btnAddContractDocument").style.display != "none") {
        e.preventDefault();
        document.getElementById("holderManagebulk").style.border = "2px dashed blue ";
        //$("#holderManagebulk").css("min-height", "100px");
        document.getElementById("holderManagebulk").style.opacity = "0.5";
        e.dataTransfer.setData('text/html', "You dragged the image!");
        //document.getElementById("idManagedropfile").style.display = "block";
        // }
    };
    holderManagebulk.ondragend = function () {
        this.className = ''; return false;
    };
    holderManagebulk.ondragleave = function () {
        document.getElementById("holderManagebulk").style.border = "2px dashed #ccc";
        //$("#holderManagebulk").css("min-height", "0px");
        $('#holderManagebulk').css("opacity", "1");
        $('#holderManagebulk').css("pointer-events", "auto");
        //document.getElementById("idManagedropfile").style.display = "none";
    };
    var totalfiles = "";
    holderManagebulk.ondrop = function (e) {
        if (contractItem.Permission != 'View' && contractItem.Permission != '' && contractItem.Permission != null) {
            $("#loadingPage").fadeIn();
            this.className = '';
            e.preventDefault();
            var files = e.dataTransfer.files;
            var fileslength = files.length;
            //if (document.getElementById("tbBulkControls").rows.length < 6) {
            //    if (fileslength <= 5) {
            for (var i = 0; i < fileslength; i++) {
                Managedroppedfiles.push(files[i]);
            }
            totalfiles = files;
            ManageremovedItems = [];
            readManagefiles(files);
            //readfiles(files);
            if (Managedroppedfiles.length > 0) {
                $(".cldraganddrop").css('display', '');
                //$('#btnBulkUploadSave').css('display', '');
                //$('#btnBulkUploadCancel').css('display', '');
                //$("#bulkuploaddoc").dialog("option", "title", "Bulk Document Upload");
                //$("#bulkuploaddoc").dialog("open");
                //$("#bulkuploaddoc").height("auto");
                //applybulkdocumetdraganddrop();
            }
            else {
                document.getElementById("holderManagebulk").style.border = "2px dashed #ccc";
                //$("#holderManagebulk").css("min-height", "0px");
                $('#holderManagebulk').css("opacity", "1");
                $('#holderManagebulk').css("pointer-events", "auto");
                //document.getElementById("idManagedropfile").style.display = "none";
            }
            $("#loadingPage").fadeOut();
            //    }
            //    else {
            //        $("#loadingPage").fadeOut();
            //        swal("", "Maximum 5 file(s) only allowed at a time....!");
            //        document.getElementById("holder").style.border = "1px solid white";
            //        $('#holder').css("opacity", "1");
            //        $('#holder').css("pointer-events", "auto");
            //    }
            //}
            //else {
            //    $("#loadingPage").fadeOut();
            //    swal("", "Maximum 5 file(s) only allowed at a time....!");
            //    document.getElementById("holder").style.border = "1px solid white";
            //    $('#holder').css("opacity", "1");
            //    $('#holder').css("pointer-events", "auto");
            //}
        }
    }
}

var ManagedroppedControls = 0;
var Managedropcontrolifdelete = 0;
function readManagefiles(files) {
    var documentidcount = "";
    var filelistexit = "";
    var unvalidfile = "";
    var FileList = "";
    var rejectedfile = '';
    var vControl = "";
    var controluploadsetion = "";
    var uploingsectionid = 1;
    var lesscharfilename = "";
    var dropexitfilenamevalue = "";
    var fileslength = files.length;
    if (document.getElementById("tblManageBulkControls").rows.length > 0) {
        droppedControls = document.getElementById("tbBulkControls").rows.length - 1;
        uploingsectionid = document.getElementById("tbBulkControls").rows.length;
    }

    //manoj
    //var headerid = $("#lblContractTitle").text();
    //headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
    //var finalurl = "";
    //finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    //finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
    //finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
    //finalurl = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurl + headerid + '/';

    //manoj
    for (var i = 0; i < fileslength; i++) {
        var file = files[i];
        var acceptExtension = ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'dotx', 'xps', 'rtf', 'odt', 'dotm', 'docm', 'msg', 'tif', 'tiff', 'TIF', 'TIFF'];
        var ext = file.name.split('.').pop().toString();
        if (acceptExtension.indexOf(ext.trim().toLowerCase()) > -1) {
            if ('size' in file) {
                var Filelengthcol = Math.round(((file.size / 1024) / 1024) * 10) / 10;
                if (Filelengthcol > (Math.round(parseInt(localStorage.MaxRequestLength) / 1024))) {
                    //swal("", "The maximum permissible size is " + Math.round(((localStorage.MaxRequestLength / 1024) / 1024) * 10) / 10 + " MB, Please upload a file which is less than " + Math.round(((localStorage.MaxRequestLength / 1024) / 1024) * 10) / 10 + " MB");
                    if (FileList == "") {
                        FileList = files[i].name;
                    } else {
                        FileList += "," + files[i].name;
                    }
                    var index = Managedroppedfiles.indexOf(files[i]);
                    if (index > -1) {
                        Managedroppedfiles.splice(index, 1);
                    }
                } else if (Managedropexitfilename.indexOf(files[i].name) > -1) {
                    if (dropexitfilenamevalue == "") {
                        dropexitfilenamevalue = files[i].name;
                    } else {
                        dropexitfilenamevalue += "," + files[i].name;
                    }
                    var index = Managedroppedfiles.lastIndexOf(files[i]);
                    if (index > -1) {
                        Managedroppedfiles.splice(index, 1);
                    }
                }
                else {
                    if (IsFileValid(files[i].name)) {
                        var ValidateFileName = files[i].name.substr(0, files[i].name.lastIndexOf('.'));
                        if ((isContainsThreeAlphabets(ValidateFileName)) && isSpecialCharacterFileName(ValidateFileName)) {
                            //var isNameValid = isSpecialCharacterFileName(files[i].name.substr(0, files[i].name.lastIndexOf('.')));
                            var isExists = CheckDocumentExist($("#spnDocFolderURL").text(), files[i].name)
                            if (ManagedroppedControls == 0) {
                                vControl += "<thead><tr class='bulknocolor'>";
                                vControl += "<th style='width:250px'> Document Name";
                                vControl += "</th>";
                                vControl += "<th style='width:150px'> Document Type";
                                vControl += "</th>";
                                vControl += "<th style='width:150px'> Document Status";
                                vControl += "</th>";
                                if (OCRDocEnabled) {
                                    vControl += "<th style='width: 100px; text-align: center!important'> Enable OCR";
                                    vControl += "</th>";
                                } else {
                                    vControl += "<th style='width: 100px; text-align: center!important;display:none'> Enable OCR";
                                    vControl += "</th>";
                                }
                                vControl += "<th  width='25%' style='display:none;'> Document Path";
                                vControl += "</th>";
                                vControl += "<th  style='width:200px'>Upload Status";
                                vControl += "</th>";
                                vControl += "<th style='width:50px'> Action";
                                vControl += "</th>";
                                //vControl += "<th style='display:none;'></th></tr></thead>";
                                vControl += "</thead>";
                            }
                            if (ManagedroppedControls == Managedropcontrolifdelete) {
                                var trid = 'tr_' + ManagedroppedControls;
                                var vContractTitle = 'ContractTitle_' + ManagedroppedControls;
                                var docid = 'ddlDocumentType_' + ManagedroppedControls;
                                var vDocumentPath = 'PathContractTitle_' + ManagedroppedControls;
                                var vDocumentPathLabel = 'LabelPathContractTitle_' + ManagedroppedControls;
                                var checkboxid = 'chkbx_' + ManagedroppedControls;
                                var checkboxidocr = 'chkbkocr_' + ManagedroppedControls;

                                if (isExists) {
                                    vControl += "<tr id='" + trid + "' style='color:red'>";
                                } else {
                                    vControl += "<tr id=" + trid + ">";
                                }

                                vControl += "<td width='30%'><span title=" + files[i].name + " class='upload_lab'>" + files[i].name + "</span>";
                                vControl += "</td>";
                                vControl += "<td width='30%'>";
                                vControl += "<select id=" + docid + " name=" + docid + " class='f_inpt width60'>";
                                vControl += "<option value='0'>--Select--</option></td>";
                                vControl += "<td width='30%'><select id='ddlDocumentStatus" + ManagedroppedControls + "' name='ddlDocumentStatus" + ManagedroppedControls + "' class='f_inpt width60 validelement'>";
                                vControl += "<option value='0'>--Select--</option>";
                                vControl += "<option value='New' selected='selected'>New</option>";
                                vControl += "<option value='Awaiting Review'>Awaiting Review</option>";
                                vControl += "<option value='Reviewed'>Reviewed</option>";
                                vControl += "<option value='In Negotiation'>In Negotiation</option>";
                                vControl += "<option value='Negotiation Complete'>Negotiation Complete</option>";
                                vControl += "<option value='Ready for Signature'>Ready for Signature</option>";
                                vControl += "<option value='Awaiting Signatures'>Awaiting Signatures</option>";
                                vControl += "<option value='Signed'>Signed</option>";
                                vControl += "<option value='Active'>Active</option>";
                                vControl += "<option value='Expired'>Expired</option>";
                                vControl += "</select></td>";
                                if (OCRDocEnabled) {
                                    vControl += "<td style='text-align: center!important;'>";
                                } else {
                                    vControl += "<td style='text-align: center!important; display:none'>";
                                }
                                //manoj
                                var FileExt = files[i].name.split('.').pop().toString();
                                if (FileExt == 'tif' || FileExt == 'TIF' || FileExt == 'tiff' || FileExt == 'TIFF') {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + " onchange='ChangeDocumentBulkMange(this)'><p>";
                                } else {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + " disabled ><p>";
                                }
                                vControl += "</td>";
                                //manoj
                                vControl += "<td width='25%' style='display:none;'>";
                                vControl += "<input id=" + vDocumentPath + " style='display:none;' class='width60' readonly type='text' value='" + $("#spnDocFolderURL").text() + "' name=" + vDocumentPath + ">";
                                vControl += "<label id=" + vDocumentPathLabel + "> " + $("#spnDocFolderURL").text() + " </label>";
                                vControl += "</td>";
                                vControl += '<td><label id="uploadprogresslbl' + ManagedroppedControls + '"></label><span id="idLoading' + ManagedroppedControls + '" style="font-size:14px; margin-right:10px;display:none;"><img src="../Content/Images/loading.gif" /> Uploading Documents...</span><span id="idLoadingstart' + ManagedroppedControls + '" style="font-size:14px; margin-right:10px;">Start</span><span id="idLoadingcomplete' + ManagedroppedControls + '" style="font-size:14px; margin-right:10px;display:none;">Uploaded</span></td>';
                                vControl += "<td><img src='../Content/Images/Manage_close_red.png' title='Remove' onclick='deleteManageDoc(\"" + trid + "\");' style='float:right; padding-top:7px; cursor:pointer;'></td></tr>"
                                documentidcount += ";" + docid;
                                Managedropcontrolifdelete++;
                                ManagedroppedControls++;
                                Managedropexitfilename.push(files[i].name);
                            }
                            else {
                                var trid = 'tr_' + Managedropcontrolifdelete;
                                var vContractTitle = 'ContractTitle_' + Managedropcontrolifdelete;
                                var docid = 'ddlDocumentType_' + Managedropcontrolifdelete;
                                var vDocumentPath = 'PathContractTitle_' + Managedropcontrolifdelete;
                                var vDocumentPathLabel = 'LabelPathContractTitle_' + Managedropcontrolifdelete;
                                var checkboxid = 'chkbx_' + Managedropcontrolifdelete;
                                var checkboxidocr = 'chkbkocr_' + Managedropcontrolifdelete;

                                if (isExists) {
                                    vControl += "<tr id='" + trid + "' style='color:red'>";
                                } else {
                                    vControl += "<tr id=" + trid + ">";
                                }

                                //vControl += "<tr id=" + trid + ">";
                                vControl += "<td width='30%'><span title=" + files[i].name + " class='upload_lab'>" + files[i].name + "</span>";
                                vControl += "</td>";
                                vControl += "<td width='30%'>";
                                vControl += "<select id=" + docid + " name=" + docid + " class='f_inpt width60'>";
                                vControl += "<option value='0'>--Select--</option></td>";
                                vControl += "<td width='30%'><select id='ddlDocumentStatus" + Managedropcontrolifdelete + "' name='ddlDocumentStatus" + Managedropcontrolifdelete + "' class='f_inpt width60 validelement'>";
                                vControl += "<option value='0'>--Select--</option>";
                                vControl += "<option value='New' selected='selected'>New</option>";
                                vControl += "<option value='Awaiting Review'>Awaiting Review</option>";
                                vControl += "<option value='Reviewed'>Reviewed</option>";
                                vControl += "<option value='In Negotiation'>In Negotiation</option>";
                                vControl += "<option value='Negotiation Complete'>Negotiation Complete</option>";
                                vControl += "<option value='Ready for Signature'>Ready for Signature</option>";
                                vControl += "<option value='Awaiting Signatures'>Awaiting Signatures</option>";
                                vControl += "<option value='Signed'>Signed</option>";
                                vControl += "<option value='Active'>Active</option>";
                                vControl += "<option value='Expired'>Expired</option>";
                                vControl += "</select></td>";
                                if (OCRDocEnabled) {
                                    vControl += "<td style='text-align: center!important;'>";
                                } else {
                                    vControl += "<td style='text-align: center!important; display:none'>";
                                }
                                //manoj
                                var FileExt = files[i].name.split('.').pop().toString();
                                if (FileExt == 'tif' || FileExt == 'TIF' || FileExt == 'tiff' || FileExt == 'TIFF') {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + "  onchange='ChangeDocumentBulkMange(this)'><p>";
                                } else {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + " disabled ><p>";
                                }
                                vControl += "</td>";
                                //manoj
                                vControl += "<td width='25%' style='display:none;'>";
                                vControl += "<input id=" + vDocumentPath + " style='display:none;' class='width60' readonly type='text' value='" + $("#spnDocFolderURL").text() + "' name=" + vDocumentPath + ">";
                                vControl += "<label id=" + vDocumentPathLabel + "> " + $("#spnDocFolderURL").text() + " </label>";
                                vControl += "</td>";
                                vControl += '<td><label id="uploadprogresslbl' + Managedropcontrolifdelete + '"></label><span id="idLoading' + Managedropcontrolifdelete + '" style="font-size:14px; margin-right:10px;display:none;"><img src="../Content/Images/loading.gif" /> Uploading Documents...</span><span id="idLoadingstart' + Managedropcontrolifdelete + '" style="font-size:14px; margin-right:10px;">Start</span><span id="idLoadingcomplete' + Managedropcontrolifdelete + '" style="font-size:14px; margin-right:10px;display:none;">Uploaded</span></td>';
                                vControl += "<td><img src='../Content/Images/Manage_close_red.png' title='Remove' onclick='deleteManageDoc(\"" + trid + "\");' style='float:right; padding-top:7px; cursor:pointer;'></td></tr>"
                                documentidcount += ";" + docid;
                                ManagedroppedControls++;
                                Managedropcontrolifdelete++;
                                Managedropexitfilename.push(files[i].name);
                            }
                        }
                        else {
                            if (unvalidfile == "") {
                                unvalidfile = files[i].name;
                            }
                            else {
                                unvalidfile += "," + files[i].name;
                            }
                            var index = Managedroppedfiles.indexOf(files[i]);
                            if (index > -1) {
                                Managedroppedfiles.splice(index, 1);
                            }
                        }
                    }
                }
            }
        }
        else {
            if (rejectedfile == "") {
                rejectedfile = files[i].name;
            } else {
                rejectedfile += "," + files[i].name;
            }
            var index = Managedroppedfiles.indexOf(files[i]);
            if (index > -1) {
                Managedroppedfiles.splice(index, 1);
            }
        }
    }
    //Collectcontractdocument = true;
    //ContractDocumentDetails = [];
    if (FileList != null && FileList != "") {
        //swal("", "The maximum permissible size is 50MB, Please upload files which is less than 50MB");
        swal("", "The maximum permissible size is " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB, Please upload a file which is less than " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB");
        if (Managedroppedfiles.length <= 0) {
            $("#tblManageBulkControls").empty();
            $("#docManageBulk").empty();
            Managedroppedfiles = [];
            Managedropexitfilename = [];
            //opmlFile = null;
            ManagedroppedControls = 0;
            $("#lblManageFilesCount").text("0 file selected.")
            //loadinffdfdsf = 1;
        }
        FileList = "";
    } else {
        var alertvalue = "";
        if (filelistexit != null && filelistexit != "") {
            alertvalue = filelistexit + " already exists";
        }
        if (unvalidfile != null && unvalidfile != "") {
            if ((rejectedfile == null || rejectedfile == "") && (lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            else if ((rejectedfile == null || rejectedfile == "") && (lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            } else {
                alertvalue += ", " + unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            }
        }

        if (rejectedfile != null && rejectedfile != "") {
            if ((lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = rejectedfile + " File(s) are not allowed";
            else if ((lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + rejectedfile + " File(s) are not allowed";
            } else {
                alertvalue += ", " + rejectedfile + " File(s) are not allowed";
            }
        }

        if (lesscharfilename != null && lesscharfilename != "") {
            if ((dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            else if ((dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            } else {
                alertvalue += ", " + lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            }
        }

        if (dropexitfilenamevalue != null && dropexitfilenamevalue != "") {
            if ((alertvalue == null || alertvalue == ""))
                alertvalue = dropexitfilenamevalue + " File(s)  are already selected";
            else {
                alertvalue += " and " + dropexitfilenamevalue + " File(s) are already selected";
            }
        }

        if (alertvalue != null && alertvalue != "") {
            if (alertvalue.trim().indexOf('and') == 0) {
                alertvalue = alertvalue.replace('and', "");
                alertvalue = alertvalue.trim();
            }

            if (alertvalue.indexOf(',') == 0) {
                alertvalue = alertvalue.replace(',', "");
                alertvalue = alertvalue.trim();
            }
            alertvalue = alertvalue + ".";
            swal("", " '" + alertvalue.trim() + "'");
        }
        alertvalue = "";
    }
    $("#tblManageBulkControls").append(vControl);
    var tblfilecount = $("#tblManageBulkControls tbody").find("tr").length;
    if (tblfilecount == 0) {
        document.getElementById('docManageBulk').addEventListener('change', handleFileSelect, false);
        $("#tblManageBulkControls").empty();
        $("#lblManageFilesCount").text((x) + " file(s) selected.");
        $(".clManageDrop").css("display", "none");
        $(".clManageDrag").css("display", "");
    } else {
        $("#lblManageFilesCount").text(ManagedroppedControls + " file(s) selected.")
        getdocumenttypes(documentidcount);
        document.getElementById("holderManagebulk").style.border = "2px dashed #ccc";
        $('#holderManagebulk').css("opacity", "1");
        $('#holderManagebulk').css("pointer-events", "auto");
        $(".clManageDrop").css("display", "");
        $(".clManageDropFldr").css("display", "");
        $(".clManageDrag").css("display", "none");
    }
    //document.getElementById("iddropfile").style.display = "none";
}

function getdocumenttypes(obj) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=' + encodeURIComponent(connamechecking),
        type: 'GET',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (documenttypes) {
            var datalenght = documenttypes.DocumentTypes.split(';');
            datalenght = stringArrayUnique(datalenght);
            if (obj.indexOf(';') > -1) {
                var objsplit = obj.split(';');
                for (var m = 0; m < objsplit.length; m++) {
                    if (objsplit[m] != "") {
                        if (datalenght.length > 0) {
                            for (var i = 0; i < datalenght.length; i++) { //Bug:eO311012 - 'Primary Agreement' not visible in Document Type Dropdown
                                if (datalenght[i] != null && datalenght[i] != "") { // && datalenght[i] != "Primary Agreement"
                                    $("#" + objsplit[m]).append("<option value='" + datalenght[i] + "'>" + datalenght[i] + "</option>")
                                }
                            }
                        }
                        //else {
                        //    $("#" + objsplit[m]).append("<option value='Primary Agreement'>Primary Agreement</option>")
                        //}
                        if ($("#" + objsplit[m] + " option[value='Others']").length == 0) {
                            $("#" + objsplit[m]).append("<option value='Others'>Others</option>");
                        }
                        //$("#" + objsplit[m]).find('option[value="Primary Agreement"]').prop("selected", true);
                    }
                }
            }
            else {
                //$("#" + obj).append("<option value='Primary Agreement'>Primary Agreement</option>")
                $("#" + obj).append("<option value='Others'>Others</option>")
                //$("#" + obj).find('option[value="Primary Agreement"]').prop("selected", true);
            }
        },
        error:
            function (data) {
            }
    });
}

function deleteManageDoc(obj) {
    //var deletedfilename = document.getElementById(obj).nextSibling.innerHTML;
    var deletedfilename = $("#" + obj).children('td').first()[0].textContent;
    var deletedfilenameindex_exist = Managedropexitfilename.indexOf(deletedfilename);
    var deletedfilenameindex = Managedroppedfiles.indexOf(deletedfilename);
    Managedropexitfilename.splice(deletedfilenameindex_exist, 1);
    Managedroppedfiles.splice(deletedfilenameindex, 1);
    $("#" + obj).remove();
    ManageremovedItems.push(obj.split(/[_ ]+/).pop());
    ManagedroppedControls--;
    document.getElementById('docManageBulk').addEventListener('change', handleFileSelect, false);
    var x = $("#tblManageBulkControls tbody").find("tr").length;

    if (x == 0) {
        document.getElementById('docManageBulk').addEventListener('change', handleFileSelect, false);
        $("#tblManageBulkControls").empty();
        //$("#lblManageFilesCount").empty();
        $("#lblManageFilesCount").text((x) + " file(s) selected.");
        $(".clManageDrop").css("display", "none");
        $(".clManageDrag").css("display", "");
        //$("#btnMultipleAction").css('display', 'none');
    }
    else {
        $("#lblManageFilesCount").text((x) + " file(s) selected.");
    }
}

function ChangeDocumentBulkMange(obj) {
    var ChangedRowValue = obj.id.split(/[_ ]+/).pop();
    var seletedfilename = $("#tr_" + ChangedRowValue).children('td').first()[0].textContent;
    var ResultToAction = false;
    if (obj.checked) {
        var seletedfile_newname = seletedfilename.split('.').slice(0, -1).join(".") + ".pdf";
        ResultToAction = CheckDocumentExist($("#spnDocFolderURL").text(), seletedfile_newname);
    } else {
        ResultToAction = CheckDocumentExist($("#spnDocFolderURL").text(), seletedfilename);
    }
    if (ResultToAction) {
        $("#tr_" + ChangedRowValue).css("color", "red");
    } else {
        $("#tr_" + ChangedRowValue).css("color", "");
    }
}

function ReturnFolderSelection_New() {
    var arrShowallTesxt = [];
    var fldratrical = "";
    var spnfldratrical = "";
    if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
        //manoj
        arrShowallTesxt = $.map($('#showAll').text().split('/'), $.trim);
        arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
        var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
        finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
        $("#spnDocFolderURL_New").text(finalurl + arrShowallTesxt.join('/') + '/');
        $("#spnmanagebtn_New").css("display", "");
        //manoj
    } else {
        if (typeof (contractItem) != "undefined" && contractItem != null && contractItem != "" && contractItem.ContractDocumentsUrl != null && contractItem.ContractDocumentsUrl != "") {
            arrShowallTesxt = $.map(contractItem.ContractDocumentsUrl.split('/'), $.trim);
            arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
            arrShowallTesxt = arrShowallTesxt.slice(1);
            $("#spnDocFolderURL_New").text(contractItem.ContractDocumentsUrl);
            $("#spnmanagebtn_New").css("display", "");
        } else {
            //arrShowallTesxt = [];
            var headerid = $("#lblContractTitle").text();
            headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
            var finalurl = "";
            finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
            finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
            finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
            finalurl = finalurl + headerid + '/';
            $("#spnDocFolderURL_New").text(finalurl);
            $("#spnmanagebtn_New").css("display", "none");
            arrShowallTesxt = $.map(headerid.split('/'), $.trim);
            arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
        }
    }
    if (arrShowallTesxt.length == 0) {

    }
    else if (arrShowallTesxt.length == 1) {
        fldratrical = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt.toString() + '</span>';
        spnfldratrical = "/" + arrShowallTesxt.toString() + "/";
    } else {
        for (var fldr = 0; fldr < arrShowallTesxt.length; fldr++) {
            if (arrShowallTesxt.length - 1 == fldr) {
                fldratrical += '/<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
            } else {
                fldratrical += '/<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
            }
            spnfldratrical += "/" + arrShowallTesxt[fldr].toString();
        }
        spnfldratrical += "/";
    }
    if (fldratrical != "" && fldratrical.charAt(0) == '/') {
        fldratrical = fldratrical.substr(1);
    }
    $("#dvDocFolderURL_New").html(fldratrical);
}

var droppedControls = 0;
var dropcontrolifdelete = 0;
function readfiles(files) {
    var documentidcount = "";
    var filelistexit = "";
    var unvalidfile = "";
    var FileList = "";
    var rejectedfile = '';
    var vControl = "";
    var controluploadsetion = "";
    var uploingsectionid = 1;
    var lesscharfilename = "";
    var dropexitfilenamevalue = "";
    var fileslength = files.length;
    if (document.getElementById("tbBulkControls").rows.length > 0) {
        droppedControls = document.getElementById("tbBulkControls").rows.length - 1;
        uploingsectionid = document.getElementById("tbBulkControls").rows.length;
    }

    ////manoj
    //var headerid = $("#lblContractTitle").text();
    //headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
    //var finalurl = "";
    ////var newurl = "";
    ////if ($('#hdnContractDocumentsUrl').text() != "") {
    //finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    //finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
    //finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
    //finalurl = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurl + headerid + '/';
    ////if ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
    ////    $('#hdnContractDocumentsUrl').text(newurl + "/" + $('#showAll').text().replace(/ \/ /g, '/') + '/')
    ////} else {
    ////    $('#hdnContractDocumentsUrl').text(newurl + "/");
    ////}
    ////} else {
    ////    finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    ////    //finalurl = $('#hdContAreaDocLibName').val();
    ////    finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
    ////    finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
    ////    finalurl = (headerid != "" && (!$.isEmptyObject(headerid))) ? finalurl + headerid + '/' : finalurl;
    ////    $("#hdnContractDocumentsUrl").text(finalurl)
    ////}
    ////if ($("#hdnContractDocumentsUrl").text() != "") {
    ////    var lastcharfind = $("#hdnContractDocumentsUrl").text();
    ////    finalurl = (lastcharfind.substr(lastcharfind.length - 1) != "/") ? $("#hdnContractDocumentsUrl").text() + "/" : $("#hdnContractDocumentsUrl").text();
    ////    //lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
    ////    //if (lastcharfind == "/") {
    ////    //    finalurl = $("#hdnContractDocumentsUrl").text();
    ////    //}
    ////    //else {
    ////    //    finalurl = $("#hdnContractDocumentsUrl").text() + "/";
    ////    //}
    ////}
    ////else {

    ////}
    ////manoj

    for (var i = 0; i < fileslength; i++) {
        var file = files[i];
        var acceptExtension = ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'dotx', 'xps', 'rtf', 'odt', 'msg', 'dotm', 'docm', 'tif', 'tiff', 'TIF', 'TIFF'];
        var ext = file.name.split('.').pop().toString();
        if (acceptExtension.indexOf(ext.trim().toLowerCase()) > -1) {
            if ('size' in file) {
                var Filelengthcol = Math.round(((file.size / 1024) / 1024) * 10) / 10;
                if (Filelengthcol > (Math.round(parseInt(localStorage.MaxRequestLength) / 1024))) {
                    //swal("", "The maximum permissible size is " + Math.round(((localStorage.MaxRequestLength / 1024) / 1024) * 10) / 10 + " MB, Please upload a file which is less than " + Math.round(((localStorage.MaxRequestLength / 1024) / 1024) * 10) / 10 + " MB");
                    if (FileList == "") {
                        FileList = files[i].name;
                    } else {
                        FileList += "," + files[i].name;
                    }
                    var index = droppedfiles.indexOf(files[i]);
                    if (index > -1) {
                        droppedfiles.splice(index, 1);
                    }
                } else if (dropexitfilename.indexOf(files[i].name) > -1) {
                    if (dropexitfilenamevalue == "") {
                        dropexitfilenamevalue = files[i].name;
                    } else {
                        dropexitfilenamevalue += "," + files[i].name;
                    }
                    var index = droppedfiles.lastIndexOf(files[i]);
                    if (index > -1) {
                        droppedfiles.splice(index, 1);
                    }
                }
                else {
                    if (IsFileValid(files[i].name)) {
                        var ValidateFileName = files[i].name.substr(0, files[i].name.lastIndexOf('.'));
                        if ((isContainsThreeAlphabets(ValidateFileName)) && isSpecialCharacterFileName(ValidateFileName)) {
                            //if ((isContainsThreeAlphabets(files[i].name.substr(0, files[i].name.lastIndexOf('.'))))) {
                            //var isNameValid = isSpecialCharacterFileName(files[i].name.substr(0, files[i].name.lastIndexOf('.')));
                            var isExists = CheckDocumentExist($("#spnDocFolderURL_New").text(), files[i].name)
                            if (droppedControls == 0) {
                                vControl += "<thead><tr>";
                                vControl += "<th style='width:50px'> Document Name";
                                vControl += "</th>";
                                vControl += "<th style='width:200px'> Document Type";
                                vControl += "</th>";
                                vControl += "<th style='width:200px'> Document Status";
                                vControl += "</th>";
                                if (OCRDocEnabled) {
                                    vControl += "<th style='width:100px; text-align: center!important' > Enable OCR";
                                    vControl += "</th>";
                                } else {
                                    vControl += "<th style='width:100px; text-align: center!important;display:none'> Enable OCR";
                                    vControl += "</th>";
                                }
                                vControl += "<th style='display:none;width:25%'> Document Path";
                                vControl += "</th>";
                                vControl += "<th style='width:100px'>Upload Status";
                                vControl += "</th>";
                                vControl += "<th style='width:50px'> Action";
                                vControl += "</th>";
                                //vControl += "<th style='display:none;'></th></tr></thead>";
                                vControl += "</thead>";
                            }
                            if (droppedControls == dropcontrolifdelete) {
                                var trid = 'tr_' + droppedControls;
                                var vContractTitle = 'ContractTitle_' + droppedControls;
                                var docid = 'ddlDocumentType_' + droppedControls;
                                var vDocumentPath = 'PathContractTitle_' + droppedControls;
                                var vDocumentPathLabel = 'LabelPathContractTitle_' + droppedControls;
                                var checkboxid = 'chkbx_' + droppedControls;
                                var checkboxidocr = 'chkbkocr_' + droppedControls;

                                if (isExists) {
                                    vControl += "<tr id='" + trid + "' style='color:red'>";
                                } else {
                                    vControl += "<tr id=" + trid + ">";
                                }

                                vControl += "<td ><span title=" + files[i].name + " class='upload_lab' style='max-width: none !important;width: 250px!important;'>" + files[i].name + "</span>";
                                vControl += "</td>";
                                vControl += "<td >";
                                vControl += "<select id=" + docid + " name=" + docid + " class='f_inpt width60'>";
                                vControl += "<option value='0'>--Select--</option></td>";
                                vControl += "<td><select id='ddlDocumentStatus" + droppedControls + "' name='ddlDocumentStatus" + droppedControls + "' class='f_inpt width60 validelement'>";
                                vControl += "<option value='0'>--Select--</option>";
                                vControl += "<option value='New' selected='selected'>New</option>";
                                vControl += "<option value='Awaiting Review'>Awaiting Review</option>";
                                vControl += "<option value='Reviewed'>Reviewed</option>";
                                vControl += "<option value='In Negotiation'>In Negotiation</option>";
                                vControl += "<option value='Negotiation Complete'>Negotiation Complete</option>";
                                vControl += "<option value='Ready for Signature'>Ready for Signature</option>";
                                vControl += "<option value='Awaiting Signatures'>Awaiting Signatures</option>";
                                vControl += "<option value='Signed'>Signed</option>";
                                vControl += "<option value='Active'>Active</option>";
                                vControl += "<option value='Expired'>Expired</option>";
                                vControl += "</select></td>";
                                if (OCRDocEnabled) {
                                    vControl += "<td style='text-align: center!important;'>";
                                } else {
                                    vControl += "<td style='text-align: center!important; display:none'>";
                                }
                                //manoj
                                var FileExt = files[i].name.split('.').pop().toString();
                                if (FileExt == 'tif' || FileExt == 'TIF' || FileExt == 'tiff' || FileExt == 'TIFF') {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + " onchange='ChangeDocumentBulk_New(this)'><p>";
                                } else {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + " disabled ><p>";
                                }
                                vControl += "</td>";
                                //manoj
                                vControl += "<td width='25%' style='display:none;'>";
                                vControl += "<input id=" + vDocumentPath + " style='display:none;' class='width60' readonly type='text' value='" + $("#spnDocFolderURL_New").text() + "' name=" + vDocumentPath + ">";
                                vControl += "<label id=" + vDocumentPathLabel + "> " + $("#spnDocFolderURL_New").text() + " </label>";
                                vControl += "</td>";
                                vControl += '<td><label id="uploadprogresslbl' + droppedControls + '"></label><span id="idLoading' + droppedControls + '" style="font-size:14px; margin-right:10px;display:none;"><img src="../Content/Images/loading.gif" /> Uploading Documents...</span><span id="idLoadingstart' + droppedControls + '" style="font-size:14px; margin-right:10px;">Start</span><span id="idLoadingcomplete' + droppedControls + '" style="font-size:14px; margin-right:10px;display:none;">Uploaded</span></td>';
                                vControl += "<td><img src='../Content/Images/Manage_close_red.png' title='Remove' onclick='deleteDoc(\"" + trid + "\");' style='float:left; padding-top:7px; cursor:pointer;'></td></tr>"
                                documentidcount += ";" + docid;
                                dropcontrolifdelete++;
                                droppedControls++;
                                dropexitfilename.push(files[i].name);
                            }
                            else {
                                var trid = 'tr_' + dropcontrolifdelete;
                                var vContractTitle = 'ContractTitle_' + dropcontrolifdelete;
                                var docid = 'ddlDocumentType_' + dropcontrolifdelete;
                                var vDocumentPath = 'PathContractTitle_' + dropcontrolifdelete;
                                var vDocumentPathLabel = 'LabelPathContractTitle_' + dropcontrolifdelete;
                                var checkboxid = 'chkbx_' + dropcontrolifdelete;
                                var checkboxidocr = 'chkbkocr_' + dropcontrolifdelete;

                                if (isExists) {
                                    vControl += "<tr id='" + trid + "' style='color:red'>";
                                } else {
                                    vControl += "<tr id=" + trid + ">";
                                }

                                //vControl += "<tr id=" + trid + ">";
                                vControl += "<td ><span title=" + files[i].name + " class='upload_lab' style='max-width: none !important;width: 250px!important;'>" + files[i].name + "</span>";
                                vControl += "</td>";
                                vControl += "<td >";
                                vControl += "<select id=" + docid + " name=" + docid + " class='f_inpt width60'>";
                                vControl += "<option value='0'>--Select--</option></td>";
                                vControl += "<td ><select id='ddlDocumentStatus" + dropcontrolifdelete + "' name='ddlDocumentStatus" + dropcontrolifdelete + "' class='f_inpt width60 validelement'>";
                                vControl += "<option value='0'>--Select--</option>";
                                vControl += "<option value='New' selected='selected'>New</option>";
                                vControl += "<option value='Awaiting Review'>Awaiting Review</option>";
                                vControl += "<option value='Reviewed'>Reviewed</option>";
                                vControl += "<option value='In Negotiation'>In Negotiation</option>";
                                vControl += "<option value='Negotiation Complete'>Negotiation Complete</option>";
                                vControl += "<option value='Ready for Signature'>Ready for Signature</option>";
                                vControl += "<option value='Awaiting Signatures'>Awaiting Signatures</option>";
                                vControl += "<option value='Signed'>Signed</option>";
                                vControl += "<option value='Active'>Active</option>";
                                vControl += "<option value='Expired'>Expired</option>";
                                vControl += "</select></td>";
                                if (OCRDocEnabled) {
                                    vControl += "<td style='text-align: center!important;'>";
                                } else {
                                    vControl += "<tdstyle='text-align: center!important;display:none'>";
                                }
                                //manoj
                                var FileExt = files[i].name.split('.').pop().toString();
                                if (FileExt == 'tif' || FileExt == 'TIF' || FileExt == 'tiff' || FileExt == 'TIFF') {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + "  onchange='ChangeDocumentBulk_New(this)'><p>";
                                } else {
                                    vControl += "<p style='margin-top: 8px; font-size:13px;'><input type='checkbox' name='convert' id=" + checkboxidocr + " disabled ><p>";
                                }
                                vControl += "</td>";
                                //manoj
                                vControl += "<td width='25%' style='display:none;'>";
                                vControl += "<input id=" + vDocumentPath + " style='display:none;' class='width60' readonly type='text' value='" + $("#spnDocFolderURL_New").text() + "' name=" + vDocumentPath + ">";
                                vControl += "<label id=" + vDocumentPathLabel + "> " + $("#spnDocFolderURL_New").text() + " </label>";
                                vControl += "</td>";
                                vControl += '<td><label id="uploadprogresslbl' + dropcontrolifdelete + '"></label><span id="idLoading' + dropcontrolifdelete + '" style="font-size:14px; margin-right:10px;display:none;"><img src="../Content/Images/loading.gif" /> Uploading Documents...</span><span id="idLoadingstart' + dropcontrolifdelete + '" style="font-size:14px; margin-right:10px;">Start</span><span id="idLoadingcomplete' + dropcontrolifdelete + '" style="font-size:14px; margin-right:10px;display:none;">Uploaded</span></td>';
                                vControl += "<td><img src='../Content/Images/Manage_close_red.png' title='Remove' onclick='deleteDoc(\"" + trid + "\");' style='float:right; padding-top:7px; cursor:pointer;'></td></tr>"
                                documentidcount += ";" + docid;
                                droppedControls++;
                                dropcontrolifdelete++;
                                dropexitfilename.push(files[i].name);
                            }
                        }
                        else {
                            if (unvalidfile == "") {
                                unvalidfile = files[i].name;
                            }
                            else {
                                unvalidfile += "," + files[i].name;
                            }
                            var index = droppedfiles.indexOf(files[i]);
                            if (index > -1) {
                                droppedfiles.splice(index, 1);
                            }
                        }
                    }
                }
            }
        }
        else {
            if (rejectedfile == "") {
                rejectedfile = files[i].name;
            } else {
                rejectedfile += "," + files[i].name;
            }
            var index = droppedfiles.indexOf(files[i]);
            if (index > -1) {
                droppedfiles.splice(index, 1);
            }
        }
    }
    //Collectcontractdocument = false;
    //ContractDocumentDetails = [];
    if (FileList != null && FileList != "") {
        //swal("", "The maximum permissible size is 50MB, Please upload files which is less than 50MB");
        swal("", "The maximum permissible size is " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB, Please upload a file which is less than " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB");
        if (droppedfiles.length <= 0) {
            $("#tbBulkControls").empty();
            $("#file").empty();
            droppedfiles = [];
            dropexitfilename = [];
            opmlFile = null;
            droppedControls = 0;
            $("#lblFilesCount").text(droppedfiles + " file(s) uploaded.")
            loadinffdfdsf = 1;
        }
        FileList = "";
    } else {
        var alertvalue = "";
        if (filelistexit != null && filelistexit != "") {
            alertvalue = filelistexit + " already exists";
        }
        if (unvalidfile != null && unvalidfile != "") {
            if ((rejectedfile == null || rejectedfile == "") && (lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            else if ((rejectedfile == null || rejectedfile == "") && (lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            } else {
                alertvalue += ", " + unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            }
        }

        if (rejectedfile != null && rejectedfile != "") {
            if ((lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = rejectedfile + " File(s) are not allowed";
            else if ((lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + rejectedfile + " File(s) are not allowed";
            } else {
                alertvalue += ", " + rejectedfile + " File(s) are not allowed";
            }
        }

        if (lesscharfilename != null && lesscharfilename != "") {
            if ((dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            else if ((dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            } else {
                alertvalue += ", " + lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            }
        }

        if (dropexitfilenamevalue != null && dropexitfilenamevalue != "") {
            if ((alertvalue == null || alertvalue == ""))
                alertvalue = dropexitfilenamevalue + " File(s)  are already selected";
            else {
                alertvalue += " and " + dropexitfilenamevalue + " File(s) are already selected";
            }
        }

        if (alertvalue != null && alertvalue != "") {
            if (alertvalue.trim().indexOf('and') == 0) {
                alertvalue = alertvalue.replace('and', "");
                alertvalue = alertvalue.trim();
            }

            if (alertvalue.indexOf(',') == 0) {
                alertvalue = alertvalue.replace(',', "");
                alertvalue = alertvalue.trim();
            }
            alertvalue = alertvalue + ".";
            swal("", " '" + alertvalue.trim() + "'");
        }
        alertvalue = "";
    }

    $("#lblFilesCount").text(droppedControls + " file(s) selected.")
    $("#tbBulkControls").append(vControl);
    var xVlaueCount = $("#tbBulkControls tbody").find("tr").length;

    if (xVlaueCount == 0) {
        $("#tbBulkControls").empty();
        $("#lblFilesCount").text((xVlaueCount) + " file(s) selected.");
    } else {
        $('#tbBulkControls').css("pointer-events", "auto");
        getdocumenttypes(documentidcount);
        document.getElementById("holderbulk").style.border = "2px dashed #ccc";
        $('#holderbulk').css("opacity", "1");
        $('#holderbulk').css("pointer-events", "auto");
        document.getElementById("iddropfile").style.display = "none";
        $(".clManageDrop_New").css("display", "");
        // $(".clManageDropFldr_New").css("display", "");
        $(".clManageDrag_New").css("display", "none");
    }
    return xVlaueCount;
}

function CheckDocumentExist(folderurl, documentname) {
    var isExist = false;
    if (DocumentCount > 0) {
        var vDocURL = localStorage.SPHostUrl + folderurl + documentname;
        if (Collectcontractdocument == false) {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + vContractID,
                type: 'GET',
                dataType: 'json',
                'Content-Type': 'application/json',
                cache: false,
                async: false,
                headers: {
                    'eContracts-ApiKey': localStorage.APIKey
                },
                success: function (folder) {
                    Collectcontractdocument = true;
                    ContractDocumentDetails = folder;
                    var Exit = $.grep(ContractDocumentDetails, function (n, i) {
                        return (n.DocumentUrl.toLowerCase() == vDocURL.toLowerCase());
                    });
                    if (Exit.length > 0) {
                        isExist = true;
                    } else {
                        Exit = $.grep(ContractDocumentDetails, function (n, i) {
                            return (n.DocumentName.toLowerCase() == documentname.toLowerCase() && n.IsActive == "No");
                        });
                        if (Exit.length > 0) {
                            isExist = true;
                        }
                    }
                },
                error:
                    function (data) {
                        Collectcontractdocument = true;
                        isExist = false;
                    }
            });
        }
        else {
            var Exit = $.grep(ContractDocumentDetails, function (n, i) {
                return (n.DocumentUrl.toLowerCase() == vDocURL.toLowerCase());
            });
            if (Exit.length > 0) {
                isExist = true;
            } else {
                Exit = $.grep(ContractDocumentDetails, function (n, i) {
                    return (n.DocumentName.toLowerCase() == documentname.toLowerCase() && n.IsActive == "No");
                });
                if (Exit.length > 0) {
                    isExist = true;
                }
            }
        }
    }
    return isExist;
}

var holderbulk;
function applybulkdocumetdraganddrop() {
    holderbulk = document.getElementById('holderbulk');
    holderbulk.ondragover = function (e) {
        e.preventDefault();
        document.getElementById("holderbulk").style.border = "2px dashed blue ";
        document.getElementById("holderbulk").style.opacity = "0.5";
        e.dataTransfer.setData('text/html', "You dragged the image!");
    };
    holderbulk.ondragend = function () {
        this.className = ''; return false;
    };
    holderbulk.ondragleave = function () {
        document.getElementById("holderbulk").style.border = "2px dashed #ccc";
        $('#holderbulk').css("opacity", "1");
        $('#holderbulk').css("pointer-events", "auto");
        document.getElementById("iddropfile").style.display = "none";
    };

    var totalfiles = "";
    holderbulk.ondrop = function (e) {

        if (contractItem.Permission != 'View' && contractItem.Permission != '' && contractItem.Permission != null) {
            $("#loadingPage").fadeIn();
            this.className = '';
            e.preventDefault();
            var files = e.dataTransfer.files;
            var fileslength = files.length;
            //if (document.getElementById("tbBulkControls").rows.length < 6) {
            //    if (((document.getElementById("tbBulkControls").rows.length - 1) + fileslength) <= 5) {
            for (var i = 0; i < fileslength; i++) {
                droppedfiles.push(files[i]);
            }
            totalfiles = files;
            removedItems = [];
            readfiles(files);
            if (droppedfiles.length > 0) {
                $(".cldraganddrop").css('display', 'none');
                $('#btnBulkUploadSave').css('display', '');
                $('#btnBulkUploadCancel').css('display', '');
                $("#bulkuploaddoc").dialog("option", "title", "Bulk Document Upload");
                $("#bulkuploaddoc").dialog("open");
                $("#bulkuploaddoc").height("auto");
                //applybulkdocumetdraganddrop();
            }
            else {
                document.getElementById("holderbulk").style.border = "2px dashed #ccc";
                $('#holderbulk').css("opacity", "1");
                $('#holderbulk').css("pointer-events", "auto");
                document.getElementById("iddropfile").style.display = "none";
            }
            $("#loadingPage").fadeOut();
            //    }
            //    else {
            //        $("#loadingPage").fadeOut();
            //        swal("", "Maximum 5 file(s) only allowed at a time....!");
            //        document.getElementById("holderbulk").style.border = "2px dashed white";
            //        $('#holderbulk').css("opacity", "1");
            //        $('#holderbulk').css("pointer-events", "auto");
            //    }
            //}
            //else {
            //    $("#loadingPage").fadeOut();
            //    swal("", "Maximum 5 file(s) only allowed at a time....!");
            //    document.getElementById("holderbulk").style.border = "2px dashed white";
            //    $('#holderbulk').css("opacity", "1");
            //    $('#holderbulk').css("pointer-events", "auto");
            //}
        }
    }
}

function GetInnerFeatures() {
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "10" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_Catalog").css('display', '');
    }
    //vAccFeat = $.grep(veContractFeatures, function (n, i) {
    //    return (n.RowKey == "2" && n.Status == "ON");
    //});
    //if (vAccFeat.length > 0) {
    //    $(".FL_Obligations").css('display', '');
    //    GetObligationCatalogs();

    //}

    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "9" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_Share").css('display', '');
        $(".FL_Share").addClass('Contribute');
    } else {
        $(".FL_Share").css('display', 'none');
        $(".FL_Share").removeClass('Contribute');
    }

    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "17" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_TermsClauses").css('display', '');
    } else {
        $(".FL_TermsClauses").css('display', 'none');
    }
}

$(document).on('click', '#btnaddnewsubfolder', function () {
    Updatedocumenttap = false;
    AddContractDocument("ManageFolder");
    //manoj
    //if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
    //    $("#txtnewfoldervalue").attr("placeholder", "Enter New sub-folder name");
    //    $("#dvfoldercreation").dialog("option", "title", "Create Sub-folder");

    //    //manoj
    //    var fldratrical = "";
    //    var arrShowallTesxt = $.map($('#showAll').text().split('/'), $.trim);
    //    arrShowallTesxt = arrShowallTesxt.filter(function (vFolder) { return vFolder !== '' });
    //    //var arrShowallTesxt = $('#showAll').text().split('/').filter(function (vFolder) { return vFolder !== '' });
    //    if (arrShowallTesxt.length == 1) {
    //        fldratrical = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt.toString() + '</span>';
    //    } else {
    //        for (var fldr = 0; fldr < arrShowallTesxt.length; fldr++) {
    //            if (arrShowallTesxt.length - 1 == fldr) {
    //                fldratrical += '/<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
    //            } else {
    //                fldratrical += '/<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><span>' + arrShowallTesxt[fldr].toString() + '</a>';
    //            }
    //        }
    //    }
    //    if (fldratrical.charAt(0) == '/') {
    //        fldratrical = fldratrical.substr(1);
    //    }
    //    $("#showAllFolder").html(fldratrical);
    //    //manoj
    //} else {
    //    $(this).attr("placeholder", "Enter folder name");
    //    $("#dvfoldercreation").dialog("option", "title", "Create Folder");
    //    $("#showAllFolder").html('');
    //}

    //var selectedparentdocument = "";
    //var headerid = $("#lblContractTitle").text();
    //headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
    //selectedparentdocument = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    //selectedparentdocument = (selectedparentdocument.charAt(0) != '/') ? '/' + selectedparentdocument : selectedparentdocument;
    //selectedparentdocument = ((selectedparentdocument.substr(selectedparentdocument.length - 1)) != "/") ? selectedparentdocument + "/" : selectedparentdocument;
    //selectedparentdocument = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? selectedparentdocument + $('#showAll').text().replace(/ \/ /g, '/') + '/' : selectedparentdocument + headerid + '/';
    //$("#hdnnewfolderurl").val(selectedparentdocument);
    //$("#hdnnewfoldercreatedfrom").val("detailspage");
    //$("#txtnewfoldervalue").removeClass('error');
    //$("#errormsg_txtnewfoldervalue").remove();
    ////$("#dvfoldercreation").dialog("option", "title", "Create Folder");
    //$("#dvfoldercreation").dialog("open");
});

function GetRenewalChecklistAndNotes(contractid, checkFromStart) {
    if (contractid == null || contractid == "") { contractid = vContractID; }

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + contractid + '/contractrenewalhistory',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            vContractRenewalHistory = data;
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractid,
                type: 'GET',
                cache: false,
                contentType: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
                processData: false,
                success: function (vItemContract) {
                    checkUpcoming(vItemContract, checkFromStart);
                    $(data).each(function (i, item) {
                        if (vItemContract.NextTermStartDate != null && vItemContract.NextTermEndDate != null && item.RenewedDate != null && item.TermEndDate != null) {
                            if (item.RenewedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1') == vItemContract.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1') && item.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1') == vItemContract.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1')) {
                                UpComingNotes = item.RenewalNotes;
                                UpcomingChecklist = item.RenewalChecklist;
                                TermName = item.RenewableTermName;
                            }
                        }
                    });
                },
            });

        },
        error:
            function (data) {

            }
    });
}

function checkUpcoming(contractItem, checkFromStart) {
    var vtodaydate = moment(new Date()).format("YYYY-MM-DD")
    var vRenewStatus = null;
    var vRenewDate = null;
    var vRenewText = "";
    var vFromDate = moment(new Date());
    var vDiff = "";
    var vDiffAuth = "";
    var vMetaAuth = "";
    var vMetaRenew = "";
    vRenewalConfirmParticipantsXML = "";

    if (contractItem.ContractTermType == "Renewable") {
        var vMetadata = "";
        if (contractItem.NextTermStartDate != null && contractItem.NextTermStartDate != null) {
            $(vContractRenewalHistory).each(function (i, item) {
                if (item.RenewedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1') == contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1') && item.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1') == contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1')) {
                    vRenewDate = item.RenewedOn;
                    vRenewStatus = item.Status;
                    vRenewalConfirmParticipantsXML = item.RenewalConfirmParticipantsXML;
                }
            });
        }
        ConfirmParticipationCollection = [];
        if (vRenewalConfirmParticipantsXML != null) {
            $(vRenewalConfirmParticipantsXML).find('participant').each(function () {
                var authName = $(this).find('name').text();
                var authStatus = $(this).find('status').text();
                var person = { Participation: authName, status: authStatus };
                ConfirmParticipationCollection.push(person);
            });
        }

        var ConfirmDate = moment(new Date()).format("YYYY-MM-DD");
        if (contractItem.ContractConfirmSendDate != null) {
            ConfirmDate = moment(new Date(contractItem.ContractConfirmSendDate)).format("YYYY-MM-DD");
        }
        var authorizationStatus = "";
        if (ConfirmParticipationCollection != null) {
            $(ConfirmParticipationCollection).each(function (i, item) {
                if (item.Participation.trim() == localStorage.UserName) {
                    authorizationStatus = item.status;
                }
            });
        }


        //suren bug fixing slider
        var RenewalConfirmDate = moment(new Date()).format("YYYY-MM-DD");
        if (contractItem.CounterpartyNoticesRenewalDate != null) {
            RenewalConfirmDate = moment(new Date(contractItem.CounterpartyNoticesRenewalDate)).format("YYYY-MM-DD");
        }
        if ((contractItem.FullControlPermissions.indexOf(localStorage.UserName) > -1) && contractItem.AutoRenew != "Yes" && contractItem.CounterpartyNoticesRenewalDate !== "undefined" && contractItem.CounterpartyNoticesRenewalDate !== null && contractItem.NextTermStartDate != null && contractItem.NextTermStartDate != null && vRenewDate == null && (vRenewStatus == null || vRenewStatus == "") && (RenewalConfirmDate <= vtodaydate) && authorizationStatus != "Rejected") {

            vMetadata += '<small>';
            if (contractItem.NextTermStartDate != null)
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
            vMetadata += '</small>';
            vMetadata += '<small>-</small>';
            vMetadata += '<small>';
            if (contractItem.NextTermEndDate != null)
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
            vMetadata += '</small>';


            vMetaRenew = vMetadata;

            vDiff = DiffBetDate(vFromDate, contractItem.CounterpartyNoticesRenewalDate);
            if (vDiff != '') {
                vMetaRenew += "(" + vDiff + " Left )"
            }
            if ($("ul#UpcomingTaskSlider").has("li#RenewLI").length === 0) {
                var renewLI = '<li id="RenewLI">' +
                       '<div class="renewal-new-sec" id="Renew" style="display:none">' +
                           '<div class="renewal-new-text"> <a href="javascript:void(0);" onclick="OpenManageTerm();">Renewal Upcoming Term </a> <span id="UpcomingText"></span></div>' +
                           '<div class="renewal-new-button">' +
                           '<button class="authorize" type="button" onclick="checkAwaiting();" value="">Renew Now</button>' +
                           '<button class="authorize" type="button" onclick="expireRenewalTerm();" value="" style="background-color: #d72303;">Expire</button>' +
                           '</div>' +
                       '</div>' +
                   '</li>';
                $('#UpcomingTaskSlider').append(renewLI);
                $('#UpcomingText').html(vMetaRenew);
                $("#RenewLI").css("display", "");
                $('#Renew').css("display", "");
                $("#SliderCount").html(++vSliderCounter);
                CheckSlider();
            }
            if (checkFromStart == "PageLoad") {
                $('#UpcomingText').html(vMetaRenew);
                $("#RenewLI").css("display", "");
                $('#Renew').css("display", "");
                $("#SliderCount").html(++vSliderCounter);
                CheckSlider();
            }


        }
        else {
            if (checkFromStart == "PageLoad") {
                $("#RenewLI").remove();
            }
            else {
                if ($("ul#UpcomingTaskSlider").has("li#RenewLI").length != 0) {
                    $("#RenewLI").remove();
                    if (vSliderCounter != 0) {
                        --vSliderCounter;
                        $("#SliderCount").html(vSliderCounter);
                    }
                }
            }

            CheckSlider();
        }

        if (contractItem.ContractConfirmSendDate !== "undefined" && contractItem.ContractConfirmSendDate !== null && contractItem.NextTermStartDate != null && contractItem.RequiresAuth == "Yes" && contractItem.RenewalConfirmParticipants.indexOf(localStorage.UserName) > -1 && (authorizationStatus != "Renewed" && authorizationStatus != "Rejected") && (ConfirmDate <= vtodaydate) && vRenewDate == null && (vRenewStatus != "Renewed" || vRenewStatus != "Renewed")) {
            vMetaAuth += '<small>';
            if (contractItem.NextTermStartDate != null)
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { vMetaAuth += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetaAuth += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetaAuth += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
            vMetaAuth += '</small>';
            vMetaAuth += '<small>-</small>';
            vMetaAuth += '<small>';
            if (contractItem.NextTermEndDate != null)
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { vMetaAuth += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetaAuth += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetaAuth += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
            vMetaAuth += '</small>';

            vDiffAuth = DiffBetDate(vFromDate, contractItem.ContractConfirmSendDate);
            if (vDiffAuth != '') {
                vMetaAuth += "(" + vDiffAuth + " Left )"
            }
            if ($("ul#UpcomingTaskSlider").has("li#AuthoriseLI").length === 0) {
                var authoriseLI = '<li id="AuthoriseLI">' +
                        '<div class="renewal-new-sec" id="Authorize" style="display:none">' +
                        '<div class="renewal-new-text"> <a id="fullControlLink" href="javascript:void(0);" onclick="OpenManage();">Authorize upcoming term</a> <span id="AuthorizeTermText"></span> </div>' +
                        '<div class="renewal-new-button">' +
                            '<button class="authorize" type="button" onclick="sliderAuthorize(Authorize);" value="">Authorize</button>' +
                            '<button class="stop_renewal" type="button" onclick="sliderAuthorize(Reject);" value="">Stop Renewal</button>' +
                        '</div>' +
                    '</div>' +
                    '</li>';
                $('#UpcomingTaskSlider').append(authoriseLI);
                $('#Authorize').css("display", "");
                $('#AuthorizeTermText').html(vMetaAuth);
                $("#SliderCount").html(++vSliderCounter);
                CheckSlider();
            }
            if (checkFromStart == "PageLoad") {
                $('#Authorize').css("display", "");
                $('#AuthorizeTermText').html(vMetaAuth);
                $("#SliderCount").html(++vSliderCounter);
                CheckSlider();
            }
        }
        else {
            if (checkFromStart == "PageLoad") {
                $("#AuthoriseLI").remove();
            }
            else {
                if ($("ul#UpcomingTaskSlider").has("li#AuthoriseLI").length != 0) {
                    $("#AuthoriseLI").remove();
                    if (vSliderCounter != 0) {
                        --vSliderCounter;
                        $("#SliderCount").html(vSliderCounter);
                    }
                }
            }
            CheckSlider();
        }

    }
    else {
        if ($("ul#UpcomingTaskSlider").has("li#RenewLI").length != 0) {
            if (checkFromStart == "PageLoad") {
                $("#RenewLI").remove();
            }
            else {
                $("#RenewLI").remove();
                if (vSliderCounter != 0) {
                    --vSliderCounter;
                    $("#SliderCount").html(vSliderCounter);
                }
            }
        }
        if ($("ul#UpcomingTaskSlider").has("li#AuthoriseLI").length != 0) {
            if (checkFromStart == "PageLoad") {
                $("#AuthoriseLI").remove();
            }
            else {
                $("#AuthoriseLI").remove();
                if (vSliderCounter != 0) {
                    --vSliderCounter;
                    $("#SliderCount").html(vSliderCounter);
                }
            }

        }
        CheckSlider();
    }
    if (checkFromStart == "0") {
        CheckSlider();
    }

}

function contextMenuDocumentSort(action, el, pos) {
    switch (action) {
        case 'ascorder': {
            if (typeof (el.prevObject[0].id) != "undefined" && el.prevObject[0].id != null && el.prevObject[0].id != "") {
                if (el.prevObject[0].id == "pindocumentsort") {
                    orderinglist('ulPinDocument', 'lblPinDocumentsCount', 'asc');
                } else {
                    orderinglist('ulDocument', 'lblDocumentsCount', 'asc')
                }
            }
            break;
        }
        case 'descorder': {
            if (typeof (el.prevObject[0].id) != "undefined" && el.prevObject[0].id != null && el.prevObject[0].id != "") {
                if (el.prevObject[0].id == "pindocumentsort") {
                    orderinglist('ulPinDocument', 'lblPinDocumentsCount', 'desc');
                } else {
                    orderinglist('ulDocument', 'lblDocumentsCount', 'desc')
                }
            }
            break;
        }
    }
}

function orderinglist(objvalue, objcountvalue, actionvalue) {
    var DefaultDocumentList = $("#hdnnewdocumentfeature").text() == "Yes" && objvalue == "ulDocument" ? 20 : 10;
    var ul = document.getElementById(objvalue)
    var arr = $.makeArray(ul.children);
    if ((documentview == null || documentview == "" || documentview == "folder") && objvalue == "ulDocument") {
        var arr1 = [];
        var arr2 = [];
        if (actionvalue == "asc") {
            $.each(arr, function () {
                if ($(this).find('b').text() == "Folder") {
                    arr1.push(this);
                } else {
                    arr2.push(this);
                }
            })
            arr1.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return -1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return 1;
                return 0;
            });
            arr2.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return -1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return 1;
                return 0;
            });
            arr = arr1;
            $.each(arr2, function () {
                arr.push(this);
            });
        } else {
            $.each(arr, function () {
                if ($(this).find('b').text() == "Folder") {
                    arr1.push(this);
                } else {
                    arr2.push(this);
                }
            })
            arr1.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return 1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return -1;
                return 0;
            });
            arr2.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return 1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return -1;
                return 0;
            });
            arr = arr1;
            $.each(arr2, function () {
                arr.push(this);
            });
        }
    } else {
        if (actionvalue == "asc") {
            arr.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return -1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return 1;
                return 0;
            });
        } else {
            arr.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return 1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return -1;
                return 0;
            });
        }
    }

    $("#" + objvalue).empty();
    var appendcount = 1;
    var addclassvalue = (objvalue == "ulDocument") ? "ShowMoreDocuments" : "ShowMorePinDocuments";
    var oppclassvalue = (addclassvalue == 'ShowMoreDocuments') ? 'ShowLessDocuments' : 'ShowLessPinDocuments';
    $.each(arr, function () {
        $(this).removeClass("ShowMoreDocuments");
        $(this).removeClass("ShowLessDocuments");
        $(this).removeClass("ShowMorePinDocuments");
        $(this).removeClass("ShowLessPinDocuments");
        $(this).css("display", "")
        if (appendcount >= DefaultDocumentList + 1) {
            $(this).addClass(addclassvalue);
            $(this).css("display", "none")
        }
        $("#" + objvalue).append(this);
        appendcount++;
    });
    if (arr.length > DefaultDocumentList) {
        var objvaluetobind = addclassvalue == "ShowMoreDocuments" ? "dvDocument" : "dvPinDocument";
        $("#" + objvaluetobind).html('<a id="' + addclassvalue + '" href="javascript:void(0);" class="pad-all close1" onclick="' + addclassvalue + '()">More Document(s) </a>' +
                                '<a id="' + oppclassvalue + '" href="javascript:void(0);" class="pad-all close1" onclick="' + oppclassvalue + '()" style="display:none;">Show less</a>');
    } else {
        $('.' + addclassvalue).css("display", "none");
        $('#' + addclassvalue).css("display", "none");
        $('#' + oppclassvalue).css("display", "none");
    }

    $("#" + objcountvalue).text(arr.length);
    if (!$("#" + objcountvalue).text().trim()) {
        $("#" + objvalue).empty();
        $("#" + objvalue).append('No items found.');
    }
    if (DocVersion == "No") {
        $('li.history').hide();
    }
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        vFinalSignature = "dropdownMenuFinalSignature";
        vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
        $("#dropdownMenuAmendment .signature").show();
        $("#dropdownMenuAmendmentFinal .signature").show();
    }
    else {
        $("#dropdownMenuAmendment .signature").hide();
        $("#dropdownMenuAmendmentFinal .signature").hide();
    }
    $(".openmenuDocument").contextMenu({
        menu: vFinalSignature, leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuDocumentFinal").contextMenu({
        menu: vMarkFinalSignature, leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuAmendmentDocument").contextMenu({
        menu: "dropdownMenuAmendment", leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    $(".openmenuAmendmentDocumentFinal").contextMenu({
        menu: "dropdownMenuAmendmentFinal", leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //Un Pin Document
    $(".openmenuDocumentUnPin").contextMenu({
        menu: vFinalSignature + "UnPin", leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuDocumentFinalUnPin").contextMenu({
        menu: vMarkFinalSignature + "UnPin", leftButton: true
    }, function (action, el, pos) {
        contextMenuDocument(action, el.parent("li"), pos);
    });
    $(".openmenuAmendmentDocumentUnPin").contextMenu({
        menu: "dropdownMenuAmendmentUnPin", leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    $(".openmenuAmendmentDocumentFinalUnPin").contextMenu({
        menu: "dropdownMenuAmendmentFinalUnPin", leftButton: true
    }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    $(".openmenuFolder").contextMenu({
        menu: 'myMenuFolder', leftButton: true
    }, function (action, el, pos) {
        contextMenuWorkFolder(action, el.parent("li"), pos);
    });
    //manoj
    $(".hideItem").click(function () {
        if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $(".unpindocument").hide();
            $(".pindocument").hide();
            $(".primary").show();
        }
    })
    $(".showitem").click(function () {
        if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $(".unpindocument").show();
            $(".pindocument").show();
            $(".primary").show();
        }
    })
    $(".primarydocument").click(function () {
        $(".primary").hide();
    })
    //manoj
    $("#contractLogs").empty();
}

function contextMenuDocument(action, el, pos) {

    switch (action) {
        case "view":
            {

                $("#loadingPage").fadeIn();
                ShowMetadata();
                var documentID = $(el).find("#DocumentID").text();
                $("#tblMetadataDetailDocument").empty();
                $('#tblMetadataDetailDocument').append('<tr><td><img src="../Content/Images/icon/loading.gif"/> Loading...</td></tr>');
                $("#documentLogs").html('<tr><td colspan="4"><img src="../Content/Images/icon/loading.gif"/> Loading...</td></tr>');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities?objecttype=Document&objectid=' + documentID + '&actiontype=',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (activities) {

                        $("#documentLogs").empty();
                        var datalenght = activities.length;
                        var article = '';
                        for (var i = 0; i < datalenght; i++) {
                            var item = activities[i];
                            var sObject = item.Object;
                            var sActivity = item.Activity;
                            var sUserID = item.UserID;
                            var sTimestamp = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { sTimestamp = moment(new Date(item.Timestamp)).format('MM/DD/YYYY h:mm A'); }
                            else { sTimestamp = moment(new Date(item.Timestamp)).format(localStorage.AppDateFormat + " h:mm A"); }
                            article += '<tr><td><span class="logHis_Datetime">' + sTimestamp + '</span></td><td><b>' + sObject + '</b></td><td><span class="logHis_Activity">' + sActivity + '</span></td><td><span class="logHis_Datetime">' + sUserID + '</span></td></tr>';

                        }
                        $("#documentLogs").html(article);
                        $('#compact-pagination-documentLogs').pagination({
                            items: activities.length,
                            itemsOnPage: 15,
                            type: 'tbody',
                            typeID: 'documentLogs',
                            row: 'tr',
                            cssStyle: 'compact-theme'
                        });


                    },
                    error: function () {
                    }
                });


                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities?objecttype=Document&objectid=' + documentID + '&actiontype=',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (activities) {

                        $("#documentLogs").empty();
                        var datalenght = activities.length;
                        var article = '';
                        for (var i = 0; i < datalenght; i++) {
                            var item = activities[i];
                            var sObject = item.Object;
                            var sActivity = item.Activity;
                            var sUserID = item.UserID;
                            // var sTimestamp = moment(new Date(item.Timestamp)).format('Do MMM, h:mm A');
                            var sTimestamp = "";

                            //var article = '<article class="box1">';
                            //article += '<div>';
                            //article += '<p class="text">' + sTimestamp;
                            //article += '  ' + sActivity + '</p>';
                            //article += '</div>';
                            //article += '</article>';
                            //$("#documentLogs").append(article);
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { sTimestamp = moment(new Date(item.Timestamp)).format('MM/DD/YYYY h:mm A'); }
                            else { sTimestamp = moment(new Date(item.Timestamp)).format(localStorage.AppDateFormat + " h:mm A"); }

                            article += '<tr><td><span class="logHis_Datetime">' + sTimestamp + '</span></td><td><b>' + sObject + '</b></td><td><span class="logHis_Activity">' + sActivity + '</span></td><td><span class="logHis_Datetime">' + sUserID + '</span></td></tr>';

                        }
                        $("#documentLogs").html(article);
                        $('#compact-pagination-documentLogs').pagination({
                            items: activities.length,
                            itemsOnPage: 15,
                            type: 'tbody',
                            typeID: 'documentLogs',
                            row: 'tr',
                            cssStyle: 'compact-theme'
                        });


                    },
                    error: function () {
                    }
                });





                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (documententity) {
                        var vMetadata = '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Name</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentName + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Description</td>';
                        vMetadata += '<td class="text width60">' + documententity.Description + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Type</td>';
                        if (documententity.DocumentType == "0")
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + documententity.DocumentType + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Author</td>';
                        if (documententity.DocumentAuthor == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + documententity.DocumentAuthor + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Language</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentLanguage + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Hard-copy Physical Location</td>';
                        vMetadata += '<td class="text width60">' + documententity.HardCopyPhysicalLocation + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Folder (show path)</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentUrl + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Business Area</td>';
                        vMetadata += '<td class="text width60">' + documententity.BusinessArea + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Is Finalized/Ready for Signature?</td>';
                        vMetadata += '<td class="text width60">' + documententity.IsFinalized + '</td>';
                        vMetadata += '</tr>';
                        if (documententity.IsFinalized == "Yes") {
                            vMetadata += '<tr>';
                            vMetadata += '<td class="text_label width40 meta_titles">Finalized/Ready for Signature By</td>';
                            vMetadata += '<td class="text width60">' + documententity.FinalizedBy + ' on ' + moment(new Date(documententity.FinalizedDate)).format('Do MMM YYYY') + '</td>';
                            vMetadata += '</tr>';
                        }
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Is Standard?</td>';
                        vMetadata += '<td class="text width60">' + documententity.IsStandard + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Is Primary?</td>';
                        vMetadata += '<td class="text width60">' + documententity.IsPrimary + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Status</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentStatus + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Version</td>';
                        vMetadata += '<td class="text width60">' + documententity.VersionNo + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Created by</td>';
                        vMetadata += '<td class="text width60">' + documententity.CreatedBy + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Created Date</td>';
                        vMetadata += '<td class="text width60">' + moment(new Date(documententity.Created)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Last Updated</td>';
                        vMetadata += '<td class="text width60">' + moment(new Date(documententity.Modified)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Shared with</td>';
                        vMetadata += '<td class="text width60">' + documententity.SharedWith + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Reviewer(s)</td>';
                        vMetadata += '<td class="text width60">' + documententity.Reviewers + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Signee</td>';
                        vMetadata += '<td class="text width60">' + documententity.Signee + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document File Size</td>';
                        vMetadata += '<td class="text width60">' + documententity.FileSize + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Format</td>';
                        vMetadata += '<td class="text">' + documententity.DocumentFormat + '</td>';
                        vMetadata += '</tr>';



                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Creation Mode</td>';
                        vMetadata += '<td class="text width60">' + documententity.CreationMode + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Valid From</td>';
                        if (documententity.ValidFrom == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + moment(new Date(documententity.ValidFrom)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Valid Till</td>';
                        if (documententity.ValidTill == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + moment(new Date(documententity.ValidTill)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Send Reminder To</td>';
                        if (documententity.SendReminderTo == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else {
                            if (documententity.SendReminderTo == "null")
                                vMetadata += '<td class="text width60">-</td>';
                            else
                                vMetadata += '<td class="text width60">' + documententity.SendReminderTo + '</td>';
                        }
                        vMetadata += '</tr>';

                        $("#tblMetadataDetailDocument").html(vMetadata);
                        setBlankValueToHyphen("tblMetadataDetailDocument");
                        $("#loadingPage").fadeOut();
                        $("#viewMetadataDetailDocument").dialog("option", "title", "Document Details");
                        $("#viewMetadataDetailDocument").dialog("open");

                    },
                    error: function () {
                    }
                });
                $('#documentLogs').css("display", "none");
                $('#compact-pagination-documentLogs').css("display", "none");
                $('#idDocumentPopup').css("display", "none");

                break;
            }
        case "replace":
            {
                ClearReplaceDocFrom();
                var documentID = $(el).find("#DocumentID").text();
                var documentName = $(el).find("#DocumentName").text();
                $("#txtdocumentToReplaceName").val(documentName.substring(0, documentName.lastIndexOf('.')));
                $('#lblDocumentExtension').val(documentName.split('.').pop());
                $("#lblReplaceTemplateDescription").text("");
                //addbuttonclick = true;
                $('#hdnDocumentID').val(documentID);
                $("#trTop").css('display', '');
                $("#divReplaceDocument").dialog("option", "title", "Replace Document");
                $("#divReplaceDocument").dialog("open");
                break;
            }
        case "delete":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to <span style='font-weight:700'>delete '" + documentName + "'</span>?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                 type: 'DELETE',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     //manoj
                     var ulDocumentlist = $("#ulDocument li");
                     if (ulDocumentlist.length > 0) {
                         var documentexist = $(ulDocumentlist).find("input[id=" + documentID + "]");
                         if (documentexist.length > 0) {
                             $(ulDocumentlist).find("input[id=" + documentID + "]").parent().remove();

                         }
                     }

                     ulDocumentlist = $("#ulPinDocument li");
                     if (ulDocumentlist.length > 0) {
                         var documentexist = $(ulDocumentlist).find("b[id=" + documentID + "]");
                         if (documentexist.length > 0) {
                             $(ulDocumentlist).find("b[id=" + documentID + "]").parent().remove();
                             $("#hdnPinDocumentCount").text("No");
                         }
                     }

                     ulDocumentlist = $("#ulPinDocument li");
                     if (ulDocumentlist.length == 0) {
                         $("#ulPinDocument").html('No items found.');
                     }

                     ulDocumentlist = $("#ulDocument li");
                     if (ulDocumentlist.length == 0) {
                         $("#ulDocument").html('No items found.');
                     }
                     //if (documentview == null || documentview == "" || documentview == 'folder') {
                     //    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                     //        var selectedfoldervalue = $('#showAll').find("a");
                     //        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                     //        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                     //        var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                     //        showfolderdocuments(parentdocumentdetails);
                     //    }
                     //    else {
                     //        BindDocument(vContractID);
                     //    }
                     //} else {
                     //    DisplayDocument(documentview);
                     //}
                     //pendingStarted = false;
                     //GetContractPendingAction(true, "BindPeoples");
                     //$("#hdnFolderDocumentView").text('');
                     //$("#hdnShowAllTextValue").html('');
                     //PrvFolderselection = '';
                     ////Bind primary and pined document based on new feature
                     //if ($("#hdnnewdocumentfeature").text() == "Yes") {
                     //    CreateDocumentListPinView(vContractID);
                     //}
                     ////manoj
                     //*Harshitha
                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     //$("#ddlDocumentList").trigger('chosen:updated');
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });
                break;
            }
        case "remove":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to remove '<span style=\"font-weight:700\">" + documentName + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/untag?contractid=' + getParameterByName('ContractID') + '&documentid=' + documentID,
                 type: 'PUT',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                 cache: false,
                 success: function (data) {
                     $("#loadingPage").fadeOut();
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     //*Harshitha
                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     $("#ddlDocumentList").trigger('chosen:updated');
                     BindMilestone();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "edit":
            {
                var documentID = $(el).find("#DocumentID").text();
                $("#hdIsPrimaryDoc").val($(el).find("#IsPrimaryDoc").text());
                EditDocumentMetadata(documentID);

                break;
            }
        case "final":
            {
                //Check if document is having any revisions
                //var isrevisionexists = true;
                //var LinkURL = $(el).find("a").attr('href');
                //if (LinkURL == "#") {
                //    LinkURL = $(el).find("a").attr('seqe')
                //} else {
                //    LinkURL = $(el).find("a").attr('data-value')
                //}
                //var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                //$.ajax({
                //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + DocumentUrl,
                //    type: 'GET',
                //    dataType: 'json',
                //    async: false,
                //    "Content-Type": "application/json",
                //    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //    cache: false,
                //    success: function (revisiondata) {
                //        if (revisiondata) {
                //            isrevisionexists = true;
                //        }
                //    },
                //    error: function () {

                //    }
                //});

                var CanSend = false;
                var ext = $(el).find("dd").attr("class");
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1)
                        CanSend = true;
                if (CanSend) {
                    swal({
                        title: '',
                        text: "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                 function (confirmed) {
                     if (confirmed) {
                         $("#loadingPage").fadeIn();
                         var entityid = $(el).find("#DocumentID").text();
                         $.ajax({
                             url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                             type: 'PUT',
                             cache: false,
                             contentType: false,
                             headers: {
                                 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                             },
                             processData: false,
                             success: function (document) {
                                 //manoj
                                 $("#loadingPage").fadeOut();
                                 if (documentview == null || documentview == "" || documentview == 'folder') {
                                     if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                         var selectedfoldervalue = $('#showAll').find("a");
                                         var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                         var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                         var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                         showfolderdocuments(parentdocumentdetails);
                                     }
                                     else {
                                         BindDocument(vContractID);
                                     }
                                 } else {
                                     DisplayDocument(documentview);
                                 }
                                 //GetContractPendingAction(true, "BindPeoples");
                                 $("#hdnFolderDocumentView").text('');
                                 $("#hdnShowAllTextValue").html('');
                                 PrvFolderselection = '';
                                 //Bind primary and pined document based on new feature
                                 if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                     CreateDocumentListPinView(vContractID);
                                 }
                                 //manoj
                             },
                             error: function () {
                                 $("#loadingPage").fadeOut();
                             }
                         });

                     }
                     return;
                 });
                } else {
                    swal({
                        title: '',
                        text: "Do you really want to mark this document as Finalized/Ready for Signature?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var entityid = $(el).find("#DocumentID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                                type: 'PUT',
                                cache: false,
                                contentType: false,
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                },
                                processData: false,
                                success: function (document) {
                                    //manoj
                                    $("#loadingPage").fadeOut();
                                    if (documentview == null || documentview == "" || documentview == 'folder') {
                                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                            var selectedfoldervalue = $('#showAll').find("a");
                                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                            showfolderdocuments(parentdocumentdetails);
                                        }
                                        else {
                                            BindDocument(vContractID);
                                        }
                                    } else {
                                        DisplayDocument(documentview);
                                    }
                                    //GetContractPendingAction(true, "BindPeoples");
                                    $("#hdnFolderDocumentView").text('');
                                    $("#hdnShowAllTextValue").html('');
                                    PrvFolderselection = '';
                                    //Bind primary and pined document based on new feature
                                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                        CreateDocumentListPinView(vContractID);
                                    }
                                    //manoj
                                },
                                error: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                }

                break;
            }
        case "download":
            {
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                    LinkURL = $(el).find("a").attr('seqe')
                    if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                        LinkURL = $(el).find("a").attr('data-value');
                    }
                } else {
                    LinkURL = $(el).find("a").attr('data-value');
                }
                //var LinkURL = $(el).find("a").attr('href');
                //var SourceUrl = "";
                //if (LinkURL == "#") {
                //    SourceUrl = $(el).find("a").attr('seqe')
                //} else {
                //    SourceUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                //    //SourceUrl = encodeURIComponent(SourceUrl);
                //    var formatarray = "doc,xls,ppt,docx,xlsx,pptx,dotx";
                //    var filename = SourceUrl;
                //    filename = filename.split("/").pop().split(".").pop();
                //    if ($.inArray(filename, formatarray.split(',')) > -1) {
                //        SourceUrl = encodeURIComponent(SourceUrl);
                //    }
                //    else {
                //        SourceUrl = decodeURIComponent(SourceUrl);
                //        SourceUrl = encodeURIComponent(SourceUrl);
                //    }
                //}
                location = localStorage.SPHostUrl + "/_layouts/15/download.aspx?SourceUrl=" + LinkURL;
                break;
            }
        case "signature":
            {
                // var Stage = "";
                var requiredavalible = false;
                //  Stage = getParameterByName("Stage");
                if (Stage == 'pipeline') {
                    if ($("#spanstatus").text() != "") {
                        var arrstatus = ['Ready for Signature', 'Awaiting Signatures', 'Signed', 'Active', 'Expired', 'Replaced', 'Archived', 'On Hold', 'Cancelled'];
                        if (arrstatus.indexOf($("#spanstatus").text().trim()) > -1) {
                            Stage = '';
                        }
                    }
                }
                var documentName = $(el).find("#DocumentName").text();
                var sentForSign = $(el).find("#SentForSign").text();
                var documentID = $(el).find("#DocumentID").text();
                var isFinalized = $(el).find("#IsFinalized").text();
                var PrimaryDocumentCheck = $(el).find("#IsPrimaryDoc").text();
                var ext = $(el).find("dd").attr("class");
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                    var rawUrl = $(el).find("a").attr('seqe');
                    if (typeof (rawUrl) == "undefined" || rawUrl == "undefined") {
                        LinkURL = $(el).find("a").attr('data-value');
                    }
                    //viewdocinword(rawUrl);
                } else {
                    LinkURL = $(el).find("a").attr('data-value');
                }
                var CanSend = false;
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1 || ext.indexOf("pdf") > -1)
                        CanSend = true;
                if (CanSend) {
                    if (sentForSign == '') {
                        $("#hdIsPrimaryDoc").val(PrimaryDocumentCheck);
                        if (PrimaryDocumentCheck == 'Yes')
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document & Contract Record status based on this Workflow.");
                        else
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document status based on this Workflow.");
                        if (Stage == 'pipeline') {
                            var vMetadatavaluetofinalize;
                            var metadataFields = [];
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
                                type: 'GET',
                                dataType: 'json',
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                cache: false,
                                async: false,
                                success: function (mainmetadataFields) {
                                    vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
                                },
                            });
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + strSelectedContractType.trim(),
                                type: 'GET',
                                dataType: 'json',
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                cache: false,
                                async: false,
                                success: function (metadataFieldsvalue) {
                                    if (getParameterByName("Stage") == "pipeline") {
                                        metadataFields = $.grep(metadataFieldsvalue, function (n, i) {
                                            return (n.Finalizingfrom == "Required");
                                        });
                                    }
                                },
                            });

                            $(metadataFields).each(function (i, item) {
                                if ($(vMetadatavaluetofinalize).find(item.FieldName).text() == null || $(vMetadatavaluetofinalize).find(item.FieldName).text() == "") {
                                    requiredavalible = true;
                                }
                            });
                            if (!requiredavalible) {
                                ClearSignatureForm();
                                //Disable ddlCC Users not related to contract
                                DisableCCUsers();
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                    type: 'GET',
                                    dataType: 'json',
                                    "Content-Type": "application/json",
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    cache: false,
                                    success: function (settings) {
                                        $("#txtExpIn").val(settings.TaskDuration);
                                        $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(), "days").format('MM/DD/YYYY'));
                                        $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration, "days").format('MM/DD/YYYY'));
                                    },
                                    error: function () {

                                    }
                                });

                                if (isFinalized != 'Yes') {
                                    var finaltext = "Only <span style='font-weight:700'>Finalized/Ready for Signature</span> documents can be sent out for <span style='font-weight:700'>eSignature</span>. Do you want to mark this document as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1) {
                                        finaltext = "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                    }
                                    swal({
                                        title: '',
                                        text: finaltext,
                                        type: 'warning',
                                        showCancelButton: true,
                                        confirmButtonText: 'Yes',
                                        cancelButtonText: 'No',
                                        html: true
                                    },
                                        function (confirmed) {
                                            if (confirmed) {
                                                $(el).find("#IsFinalized").text('Yes');
                                                isFinalized = 'Yes';
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + documentID,
                                                    type: 'PUT',
                                                    cache: false,
                                                    contentType: false,
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                                    },
                                                    processData: false,
                                                    success: function (document) {
                                                    }
                                                });
                                            }
                                            if (isFinalized == 'Yes') {
                                                $("#hdMarkAsFinal").val("Y");
                                                if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                                                    LinkURL = $(el).find("a").attr('seqe')
                                                    if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                                                        LinkURL = $(el).find("a").attr('data-value');
                                                    }
                                                } else {
                                                    LinkURL = $(el).find("a").attr('data-value')
                                                }
                                                $("#hdDocumentID").val(documentID);
                                                $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                                $("#tdDocument").html("<b>" + documentName + "</b>");
                                                getNameAndEmailSignDocument();
                                                $("#sendForSignature").dialog("open");
                                            }
                                            return;
                                        });

                                }
                                else {
                                    if (isFinalized == 'Yes') {
                                        $("#hdMarkAsFinal").val("Y");
                                        if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                                            LinkURL = $(el).find("a").attr('seqe')
                                            if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                                                LinkURL = $(el).find("a").attr('data-value');
                                            }
                                        } else {
                                            LinkURL = $(el).find("a").attr('data-value')
                                        }
                                        $("#hdDocumentID").val(documentID);
                                        $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                        $("#tdDocument").html("<b>" + documentName + "</b>");
                                        getNameAndEmailSignDocument();
                                        $("#sendForSignature").dialog("open");
                                    }
                                }
                            } else {
                                swal({
                                    title: '',
                                    text: "Some fields required for Contract Record finalization are not filled. Do you want to edit now?",
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonText: 'Yes',
                                    cancelButtonText: 'No',
                                    html: true
                                },
                                function (confirmed) {
                                    if (confirmed) {
                                        if (Stage == 'pipeline') {
                                            location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true";
                                        }
                                    } else {
                                        $("#loadingPage").fadeOut();
                                    }
                                });
                            }

                        } else {
                            ClearSignatureForm();
                            //Disable ddlCC Users not related to contract
                            DisableCCUsers();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                type: 'GET',
                                dataType: 'json',
                                "Content-Type": "application/json",
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                cache: false,
                                success: function (settings) {
                                    $("#txtExpIn").val(settings.TaskDuration);
                                    $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(), "days").format('MM/DD/YYYY'));
                                    $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration, "days").format('MM/DD/YYYY'));
                                },
                                error: function () {

                                }
                            });
                            if (isFinalized != 'Yes') {
                                var finaltext = "Only <span style='font-weight:700'>Finalized/Ready for Signature</span> documents can be sent out for <span style='font-weight:700'>eSignature</span>. Do you want to mark this document as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1) {
                                    finaltext = "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                }
                                swal({
                                    title: '',
                                    text: finaltext,
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonText: 'Yes',
                                    cancelButtonText: 'No',
                                    html: true
                                },
                                    function (confirmed) {
                                        if (confirmed) {
                                            $(el).find("#IsFinalized").text('Yes');
                                            isFinalized = 'Yes';
                                            $.ajax({
                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + documentID,
                                                type: 'PUT',
                                                cache: false,
                                                contentType: false,
                                                headers: {
                                                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                                },
                                                processData: false,
                                                success: function (document) {
                                                }
                                            });
                                        }
                                        if (isFinalized == 'Yes') {
                                            $("#hdMarkAsFinal").val("Y");
                                            if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                                                LinkURL = $(el).find("a").attr('seqe')
                                                if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                                                    LinkURL = $(el).find("a").attr('data-value');
                                                }
                                            } else {
                                                LinkURL = $(el).find("a").attr('data-value')
                                            }
                                            $("#hdDocumentID").val(documentID);
                                            $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                            $("#tdDocument").html("<b>" + documentName + "</b>");
                                            getNameAndEmailSignDocument();
                                            $("#sendForSignature").dialog("open");
                                        }
                                        return;
                                    });

                            }
                            else {
                                if (isFinalized == 'Yes') {
                                    $("#hdMarkAsFinal").val("Y");
                                    if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                                        LinkURL = $(el).find("a").attr('seqe')
                                        if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                                            LinkURL = $(el).find("a").attr('data-value');
                                        }
                                    } else {
                                        LinkURL = $(el).find("a").attr('data-value')
                                    }
                                    $("#hdDocumentID").val(documentID);
                                    $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                    $("#tdDocument").html("<b>" + documentName + "</b>");
                                    getNameAndEmailSignDocument();
                                    $("#sendForSignature").dialog("open");
                                }
                            }
                        }
                    } else {
                        swal("", "This document has already been sent for signature: " + sentForSign);
                    }
                } else {
                    swal("", "This document cannot be sent for eSignature: Only <span style='font-weight:700'>doc,docx</span> and <span style='font-weight:700'>pdf</span> type files can be sent for eSignature.");
                }
                break;
            }
        case "editO365":
            {
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                    var rawUrl = $(el).find("a").attr('seqe');
                    if (typeof (rawUrl) == "undefined" || rawUrl == "undefined") {
                        rawUrl = $(el).find("a").attr('data-value');
                    }
                    if (typeof rawUrl != 'undefined')
                        viewdocinword(rawUrl);
                    else {
                        LinkURL = $(el).find("a").attr('data-value');
                        Opendocinbrowser(LinkURL);
                        //window.open(LinkURL);
                    }
                } else {
                    LinkURL = $(el).find("a").attr('data-value');
                    Opendocinbrowser(LinkURL);
                    //window.open(LinkURL);
                }
                break;
            }
        case "sharelink":
            {
                var DocumentNameToCheck = $(el).find("#DocumentName").text();
                var DocumentExtFormat = ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx', 'pdf'];
                if (DocumentExtFormat.indexOf(DocumentNameToCheck.split('.').pop()) > -1) {
                    var documentStatus = $(el).find("b").attr('title');
                    var shareWorkflow = $(el).find("#ShareWorkflow").text();
                    var primarydocchecking = $(el).find("#IsPrimaryDoc").text();
                    //if (shareWorkflow == "In Progress") {
                    //    swal("", "Document negotiation/ External review is in progress for this document.");
                    //}
                    //else {
                    //if (primarydocchecking == 'Yes')
                    //    $("#lblAutoUpdateStatusShareDoc").html("Auto update Document & Contract Record status to 'Negotiation Complete' when this External Share is completed.");
                    //else
                    $("#lblAutoUpdateStatusShareDoc").html("Auto update Document status to 'Negotiation Complete' when this External Share is completed.");
                    //Check if document is having any comments
                    var iscommentexits = false;
                    var LinkURL = $(el).find("a").attr('href');
                    if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                        LinkURL = $(el).find("a").attr('seqe')
                        if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                            LinkURL = $(el).find("a").attr('data-value');
                        }
                    } else {
                        LinkURL = $(el).find("a").attr('data-value')
                    }
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/commentexists?docurl=' + LinkURL,
                        //url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + DocumentUrl,
                        type: 'GET',
                        dataType: 'json',
                        async: false,
                        "Content-Type": "application/json",
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        success: function (commentdata) {
                            if (commentdata) {
                                iscommentexits = true;
                            }
                            //success: function (revisiondata) {
                            //    if (revisiondata) {
                            //        isrevisionexists = true;
                            //    }
                        },
                        error: function () {

                        }
                    });
                    if (iscommentexits) {
                        swal({
                            title: '',
                            text: "Comments/ redlining found in this document. Do you want to share this to external users for External Share?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                         function (confirmed) {
                             if (confirmed) {
                                 $.ajax({
                                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                     type: 'GET',
                                     dataType: 'json',
                                     "Content-Type": "application/json",
                                     headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                     cache: false,
                                     success: function (settings) {
                                         $("#txtShareExpIn").val(settings.TaskDuration);
                                         if ($("#txtShareExpIn").val() != "") {
                                             $("#txtShareExpIn").trigger("onchange");
                                         } else {
                                             $("#lblValidLinkDate").empty();
                                         }
                                         //$("#lblValidLinkDate").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                                     },
                                     error: function () {

                                     }
                                 });
                                 ClearShareForm();

                                 var documentName = $(el).find("#DocumentName").text();
                                 var documentID = $(el).find("#DocumentID").text();
                                 $("#hdDocumentID").val(documentID);
                                 $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                 $("#hdIsPrimaryDoc").val(primarydocchecking);
                                 $("#tdShareDocument").html("<b>" + documentName + "</b>");
                                 getNameAndEmailShareDocument();
                                 GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                                 //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                                 $("#shareDocument").dialog("open");
                             }
                             return;
                         });
                    } else {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                            type: 'GET',
                            dataType: 'json',
                            "Content-Type": "application/json",
                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                            cache: false,
                            success: function (settings) {
                                $("#txtShareExpIn").val(settings.TaskDuration);
                                if ($("#txtShareExpIn").val() != "") {
                                    $("#txtShareExpIn").trigger("onchange");
                                } else {
                                    $("#lblValidLinkDate").empty();
                                }
                                //$("#lblValidLinkDate").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                            },
                            error: function () {

                            }
                        });
                        ClearShareForm();
                        var documentName = $(el).find("#DocumentName").text();
                        var documentID = $(el).find("#DocumentID").text();
                        $("#hdDocumentID").val(documentID);
                        $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                        $("#hdIsPrimaryDoc").val(primarydocchecking);
                        $("#tdShareDocument").html("<b>" + documentName + "</b>");
                        getNameAndEmailShareDocument();
                        GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                        //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                        $("#shareDocument").dialog("open");
                    }
                    //if (isrevisionexists) {
                    //    swal({
                    //        title: '',
                    //        text: "Revisions (comments or track changes) exists inside the document, do you really want to share this as a link?",
                    //        type: 'warning',
                    //        showCancelButton: true,
                    //        confirmButtonText: 'Yes',
                    //        cancelButtonText: 'No',
                    //        html: true
                    //    },
                    //     function (confirmed) {
                    //         if (confirmed) {
                    //             $.ajax({
                    //                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    //                 type: 'GET',
                    //                 dataType: 'json',
                    //                 "Content-Type": "application/json",
                    //                 headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    //                 cache: false,
                    //                 success: function (settings) {
                    //                     $("#txtShareExpIn").val(settings.TaskDuration);
                    //                     $("#lblValidLinkDate").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                    //                 },
                    //                 error: function () {

                    //                 }
                    //             });
                    //             ClearShareForm();

                    //             var documentName = $(el).find("#DocumentName").text();
                    //             var documentID = $(el).find("#DocumentID").text();
                    //             $("#hdDocumentID").val(documentID);
                    //             $("#hdDocumentURL").val(DocumentUrl);
                    //             $("#hdIsPrimaryDoc").val(primarydocchecking);
                    //             $("#tdShareDocument").html("<b>" + documentName + "</b>");
                    //             getNameAndEmailShareDocument();
                    //             $("#shareDocument").dialog("open");
                    //         }
                    //         return;
                    //     });
                    //} else {
                    //    $.ajax({
                    //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    //        type: 'GET',
                    //        dataType: 'json',
                    //        "Content-Type": "application/json",
                    //        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    //        cache: false,
                    //        success: function (settings) {
                    //            $("#txtShareExpIn").val(settings.TaskDuration);
                    //            $("#lblValidLinkDate").html(moment(new Date()).add(settings.TaskDuration, "days").format('MM/DD/YYYY'));
                    //        },
                    //        error: function () {

                    //        }
                    //    });
                    //    ClearShareForm();
                    //    var documentName = $(el).find("#DocumentName").text();
                    //    var documentID = $(el).find("#DocumentID").text();
                    //    $("#hdDocumentID").val(documentID);
                    //    $("#hdDocumentURL").val(DocumentUrl);
                    //    $("#hdIsPrimaryDoc").val(primarydocchecking);
                    //    $("#tdShareDocument").html("<b>" + documentName + "</b>");
                    //    getNameAndEmailShareDocument();
                    //    $("#shareDocument").dialog("open");
                    //}
                    //}
                } else {
                    swal("", "This document cannot be Shared: Only<span style='font-weight:700'> doc, xls, ppt, docx, xlsx, pptx, dotx and pdf </span> type files are allowed.");
                }
                break;
            }
        case "approve":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                $("#txtTodoTitle").val('Approval for ' + documentName.split('.')[0]);
                $("#ddlTodoType option").filter(function (index) { return $(this).text() === "Document Approval"; }).prop('selected', true);
                $("#txtBrowseElement").val(documentName);
                $("#txtBrowseElementID").val(documentID);
                $("#trBrowse").css("display", "");
                $("#browse").css("display", "none");
                $("#tdBrowseElement").html("Documents");
                $('#ddlTodoType').attr('disabled', 'disabled');
                GetValuesAndAutoPopulate("ddlApprovers", "");
                $("#txtDueDate").val("");
                //*Harshitha
                var nicInstance = nicEditors.findEditor('txtNotes');
                nicInstance.setContent('');

                $("#chkNotifyMe").prop('checked', false);
                $("#dvTodo").dialog("open");
                break;
            }
        case "review":
            {
                $(".FL_ApprovalSheetContract").css('display', 'none');
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var reviewWorkflow = $(el).find("#ReviewWorkflow").text();
                var PrimaryDocChecking = $(el).find("#IsPrimaryDoc").text();
                //manoj
                $("#txtWorkflowTitle").prop('readonly', false);
                //manoj
                if (reviewWorkflow == "In Progress") {
                    var oWorkflowID = "";
                    var relatedcon = $.grep(ArrayofDocumentWorkflows, function (itemR) {
                        return itemR.DocumentID == documentID
                    });
                    //swal("", "Document Review is in progress for this document.");
                    $("#alertText1").html("Document Review is in progress for this document.");
                    $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=/Activity/TaskDetails?TaskID=&WorkflowID=' + relatedcon[0].id + '><font color="#44A6D8">View Workflow Details</font></a>');
                    $("#dvAlertDetails1").dialog("open");
                }
                else {
                    var relatedcon = $.grep(ArrayofDocumentWorkflows, function (itemR) {
                        return itemR.DocumentID == documentID
                    });
                    if (relatedcon.length > 0) {
                        $("#alertText1").html("Document Review is in progress for this document.");
                        $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=/Activity/TaskDetails?TaskID=&WorkflowID=' + relatedcon[0].id + '><font color="#44A6D8">View Workflow Details</font></a>');
                        $("#dvAlertDetails1").dialog("open");
                    }
                    else {
                        if ($("#contractDetailsSummaryConfiguration").css('display') != 'none') {
                            $("#contractDetailsSummaryConfiguration").css('display', 'none');
                        }
                        $("#loadingPage").fadeIn();
                        var businessArea = $("#lblBusinessArea").text();
                        var contractArea = $("#lblContractArea").text();
                        $("#tblStage").empty();
                        $("#ddlRule").empty();
                        if (contractItem.IsFinalized == 'Yes') {
                            $("#liAutoUpdateStatus").css('display', 'none');
                        } else {
                            $("#liAutoUpdateStatus").css('display', '');
                        }
                        $("#txtWorkflowTitle").val('Review for ' + documentName);
                        if (PrimaryDocChecking == 'Yes')
                            $("#lblAutoUpdateStatus").text('Auto update Document & Contract Record status based on this Workflow.');
                        else
                            $("#lblAutoUpdateStatus").text('Auto update Document status based on this Workflow.');

                        $("#txtDuration").val("");
                        //*Harshitha
                        var nicInstance = nicEditors.findEditor('txtComment');
                        nicInstance.setContent('');
                        $("#hdWorkflowType").val("Document Review");
                        $("#hdWorkflowObjectID").val(documentID);
                        $("#hdWorkflowObjectTitle").val(documentName);
                        $("#hdIsPrimaryDoc").val(PrimaryDocChecking);
                        GetValuesAndAutoPopulate("ddlWorkflowCC", "");

                        var vWorkflowSettings = [];
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Document Review&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + documentID,
                            type: 'GET',
                            cache: false,
                            contentType: false,
                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                            processData: false,
                            success: function (item) {
                                vWorkflowSettings = item.WorkflowSettings;

                                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                    return (n.RowKey == "8" && n.Status == "ON");
                                });
                                if (vAccFeat.length > 0) {
                                    vWorkflowRules = item.WorkflowRules;
                                }
                                if (item.WorkflowSettings != null) {
                                    workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                    workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                    if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                        if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                            $("#spAddStage").css("display", "none");
                                        }
                                    }
                                    $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                    if ($("#txtDuration").val() != "") {
                                        $("#txtDuration").trigger("onchange");
                                    } else {
                                        $("#lblDurationDate").empty();
                                    }
                                    //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                    //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                    workflowAdHoc = vWorkflowSettings.WorkflowAdHoc;
                                }
                                if (vWorkflowRules.length > 0) {
                                    $(vWorkflowRules).each(function (i, rule) {
                                        $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                    });
                                    if (workflowAdHoc == "on") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    }
                                    var workflowRules = vWorkflowRules[0];
                                    $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                                    if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text(workflowRules.RuleName);
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    }
                                    else {
                                        $("#lblddlRule").text("");
                                        $("#lblddlRule").css("display", "none");
                                        $("#ddlRule").css("display", "");
                                        $("#ddlRule").removeAttr("disabled");
                                    }
                                    var participantsInXML = workflowRules.ParticipantsInXML;
                                    var totalFileCount = 0;
                                    if (workflowRules.RuleName == "Default") {
                                        if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + documentName);
                                        } else {
                                            $("#txtWorkflowTitle").val("Review for " + documentName);
                                        }
                                    } else {
                                        if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                            $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + documentName);
                                        }
                                        else {
                                            $("#txtWorkflowTitle").val('Conditional Review Workflow for ' + documentName);
                                        }
                                    }
                                    //If the rule is ad-hoc 
                                    if (participantsInXML != "") {
                                        $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                            var StageTitle = $(this).find('StageTitle').text();
                                            var Participants = $(this).find('Participants').text();
                                            var Order = $(this).find('Order').text();
                                            totalFileCount++;
                                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width46 start_workflow">';
                                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                            if (Order == "Serial")
                                                htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                            else
                                                htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '<td class="width4 start_workflow">';
                                            if (totalFileCount > 1)
                                                htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                            else
                                                htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                            htmlFormatFile += '</td>';
                                            htmlFormatFile += '</tr>';

                                            $("#tblStage").append(htmlFormatFile);
                                            var $options = $("#ddlApprovers > option").clone();
                                            $('#ddlAssignTo' + totalFileCount).append($options);
                                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                                if ($(this).val() != null) {
                                                    if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                        workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                    }
                                                    else {
                                                        $("#ddlOrder" + vasstoid).val("Serial");
                                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    }
                                                }
                                                else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            });
                                            GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                            var vParticipantsArr = Participants.split(";");
                                            if (vParticipantsArr.length > 1)
                                                $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                            else
                                                $("#ddlOrder" + totalFileCount).prop('disabled', true);


                                            if (item.WorkflowSettings != null) {
                                                if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                    if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                        $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                        $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                    }
                                                    $("#txtStage" + totalFileCount).prop('disabled', true);
                                                    $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                                }
                                            }
                                        });
                                    }
                                    else {
                                        if ($("#ddlRule").html() == "") {
                                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                            $("#lblddlRule").css("display", "");
                                            $("#ddlRule").css("display", "none");
                                            $("#lblddlRule").text("Ad-hoc");
                                        }
                                        if (!workflowAdHoc)
                                            $("#ddlRule").attr('disabled', 'disabled');
                                        var totalFileCount = 1;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4">';
                                        htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);

                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1) {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                }
                                                else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            }
                                            else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        });
                                    }
                                }
                                else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1) {
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            }
                                            else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        }
                                        else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    });
                                }
                                //ENH492 - Workflow Cycle time Report & default naming of stages.
                                $("#txtStage" + totalFileCount).autocomplete({
                                    source: StageName,
                                    minLength: 1,
                                    focus: function (event, ui) {
                                        return false;
                                    },
                                    select: function (evn, uidetails) {
                                        $("#txtStage" + totalFileCount).val(uidetails.item.label);

                                    }
                                });
                                $("#loadingPage").fadeOut();
                                $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                                $("#dvWorkflow").dialog("open");
                                $("#dvWorkflow").height("auto");
                            },
                            error: function () {
                                $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                $("#lblddlRule").css("display", "");
                                $("#ddlRule").css("display", "none");
                                $("#lblddlRule").text("Ad-hoc");
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 start_workflow">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);
                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1) {
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        }
                                        else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    }
                                    else {
                                        $("#ddlOrder" + vasstoid).val("Serial");
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    }
                                });
                                //ENH492 - Workflow Cycle time Report & default naming of stages.
                                $("#txtStage" + totalFileCount).autocomplete({
                                    source: StageName,
                                    minLength: 1,
                                    focus: function (event, ui) {
                                        return false;
                                    },
                                    select: function (evn, uidetails) {
                                        $("#txtStage" + totalFileCount).val(uidetails.item.label);

                                    }
                                });
                                $("#loadingPage").fadeOut();
                                $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                                $("#dvWorkflow").dialog("open");
                                $("#dvWorkflow").height("auto");
                            }
                        });
                    }

                }

                break;
            }
        case "version": {
            $("#tblVersionHistory").empty();
            $("#loadingPage").fadeIn();
            var documentID = $(el).find("#DocumentID").text();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/' + documentID + '/versions',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'RefreshToken': localStorage.RefreshToken },
                cache: false,
                success: function (data) {
                    var datalenght = data.length;
                    for (var i = datalenght - 1 ; i >= 0; i--) {
                        var item = data[i];
                        var formatModifiedDate
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { formatModifiedDate = moment(new Date(item.Modified)).utc().format('MM/DD/YYYY'); }
                        else { formatModifiedDate = moment(new Date(item.Modified)).utc().format(localStorage.AppDateFormat); }
                        var article = "";
                        article += '<tr>';
                        article += '<td>' + item.VersionNo + '</td>';
                        article += '<td>' + item.Size + '</td>';
                        article += '<td>' + formatModifiedDate + '</td>';
                        article += '<td>' + item.ModifiedBy + '</td>';
                        article += '</tr>';
                        $("#tblVersionHistory").append(article);
                    }

                    var vCount = data.length;
                    $("#loadingPage").fadeOut();
                    $("#dvVersionHistory").dialog("open");
                },
                error: function () {
                    $("#loadingPage").fadeOut();
                }
            });
            break;
        }
        case "primary":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to mark this document as primary?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var entityid = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkPrimary?documentid=' + entityid,
                 type: 'PUT',
                 cache: false,
                 contentType: false,
                 headers: {
                     'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                 },
                 processData: false,
                 success: function (document) {
                     BindContractDetails(vContractID, "allow");
                     //manoj
                     //GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
            //manoj
        case 'pin':
            {
                //Check pinning document restriction and allow
                if ($("#hdnPinDocumentCount").text() == "Yes") {
                    swal("", "Contract will allow only 5 document(s) to pin,5 document(s) already pinned");
                } else {
                    swal({
                        title: '',
                        //text: "Are you sure you want to mark this document as <span style=\"font-weight:700\">Pin Document</span>?",
                        text: "Are you sure you want to <span style=\"font-weight:700\">pin</span> this document into summary?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
         function (confirmed) {
             if (confirmed) {
                 $("#loadingPage").fadeIn();
                 var entityid = $(el).find("#DocumentID").text();
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkPinorUnpin?documentid=' + entityid + '&action=pin',
                     type: 'PUT',
                     cache: false,
                     contentType: false,
                     headers: {
                         'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                     },
                     processData: false,
                     success: function (document) {
                         //BindContractDetails(vContractID);
                         //manoj
                         if (documentview == null || documentview == "" || documentview == 'folder') {
                             if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                 var selectedfoldervalue = $('#showAll').find("a");
                                 var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                 var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                 var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                 showfolderdocuments(parentdocumentdetails);
                             }
                             else {
                                 BindDocument(vContractID);
                             }
                         } else {
                             DisplayDocument(documentview);
                         }
                         //GetContractPendingAction(true, "BindPeoples");
                         $("#hdnFolderDocumentView").text('');
                         $("#hdnShowAllTextValue").html('');
                         PrvFolderselection = '';
                         //Bind primary and pined document based on new feature
                         if ($("#hdnnewdocumentfeature").text() == "Yes") {
                             CreateDocumentListPinView(vContractID);
                         }
                         //manoj
                         $("#loadingPage").fadeOut();
                     },
                     error: function () {
                         $("#loadingPage").fadeOut();
                     }
                 });
             }
             return;
         });
                }

                break;
            }

        case 'unpin':
            {
                swal({
                    title: '',
                    //text: "Are you sure you want to mark this document as <span style=\"font-weight:700\">UnPin</span>?",
                    text: "Are you sure you want to <span style=\"font-weight:700\">unpin</span> this document from summary?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var entityid = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkPinorUnpin?documentid=' + entityid + '&action=unpin',
                 type: 'PUT',
                 cache: false,
                 contentType: false,
                 headers: {
                     'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                 },
                 processData: false,
                 success: function (document) {
                     //BindContractDetails(vContractID);
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     //GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
            //manoj
    }
}

function ClearReplaceDocFrom() {
    $('#hdnDocumentID').val("");
    $("#docToReplace").replaceWith($("#docToReplace").val('').clone(true));
    $("#txtDocumentNameReplace").val('');
    $("#ddlReplaceTemplate").val("0");
    $('input[type="radio"][name="rad_Replace"][value="Computer"]').prop('checked', true);
    $("#trFileUploadBrowse").css('display', '');
    $("#trFileUploadBrowse1").css('display', '');
    $("#trTemplateBrowse").css('display', 'none');
    $("#trTemplateBrowse1").css('display', 'none');
    $("#tblReplaceControls").css('display', 'none');
    $("#docToReplace").addClass('validelement');
    $("#docToReplace").addClass('validfilename');
    $("#ddlReplaceTemplate").removeClass('validelement');
    $("#tblReplaceControls").empty();
    $("#txtdocumentToReplaceName").empty();
    removeValidations('tblReplaceControls');
}

function ShowMetadata() {
    $("#docMetadata").addClass('pop_up_Harizondal_meta_active');
    $("#docActivities").removeClass('pop_up_Harizondal_meta_active');
    $('#tblMetadataDetailDocument').css("display", "");
    $('#documentLogs').css("display", "none");
    $('#compact-pagination-documentLogs').css("display", "none");
    $('#idDocumentPopup').css("display", "none");
}

function EditDocumentMetadata(documentID) {
    $("#loadingPage").fadeIn();
    //manoj
    $("#spnfolderurl").text('');
    //manoj
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documententity) {
            $("#loadingPage").fadeOut();
            $("#txtDocumentID").val(documententity.RowKey);
            var vDocName = documententity.DocumentName.split('.');
            $("#txtDocumentName").val(vDocName.slice(0, -1).join('.'));
            $("#spExt").html(vDocName[vDocName.length - 1]);
            $("#lblDocumentUrl").val(documententity.DocumentUrl);
            //manoj
            var FolderURLToReplace = $("#hdnContractDocumentsUrlFixed").text().slice(0, -1);
            var arrspnDocURL = documententity.DocumentUrl.replace(FolderURLToReplace, ";").split(';').filter(function (vfld) { return vfld !== '' });
            var spnDocURL = arrspnDocURL.pop();
            var arrspnDocURL = spnDocURL.split('/').filter(function (vfldr) { return vfldr !== '' });
            if (arrspnDocURL.length > 1) {
                arrspnDocURL = arrspnDocURL.slice(0, -1);
                $("#spnfolderurl").text($("#hdnContractDocumentsUrlFixed").text() + arrspnDocURL.join("/") + '/');
            } else {
                $("#spnfolderurl").text($("#hdnContractDocumentsUrlFixed").text());
            }
            //if (spnDocURL == '/') {
            //    spnDocURL = spnDocURL.substr(1);
            //}
            //$("#spnfolderurl").text(spnDocURL);
            //if (spnDocURL.charAt(0) == '/') {
            //    spnDocURL = spnDocURL.substr(1);
            //}
            //$("#spnfolderurl").text(spnDocURL);
            //manoj
            $("#ddlDocumentType option").filter(function (index) { return $(this).text() === ((documententity.DocumentType != "0") ? documententity.DocumentType : "--Select--"); }).prop('selected', true);
            $("#txtDocumentDescriptionEdit").val(documententity.Description);
            GetValuesAndAutoPopulate("ddlAuthorEdit", documententity.DocumentAuthor);
            $("#txtDocumentLanguageEdit").val(documententity.DocumentLanguage);
            $("#txtHardCopyPhysicalLocationEdit").val(documententity.HardCopyPhysicalLocation);
            if (documententity.IsFinalized == "Yes") {
                $('input[type="radio"][name="IsFinalizedEdit"][value="Yes"]').prop('checked', true);
                //$("#liFinalizedBy").css("display", "");
                $("#liFinalizedBy").removeClass("finalizedDoc");
                var fFinalizedDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fFinalizedDate = moment(new Date(documententity.FinalizedDate)).format('MM/DD/YYYY'); }
                else { fFinalizedDate = moment(new Date(documententity.FinalizedDate)).format(localStorage.AppDateFormat); }
                $("#dvFinalizedBy").html(documententity.FinalizedBy + ' on ' + fFinalizedDate);
            }
            else {
                //$("#liFinalizedBy").css("display", "none");
                $("#liFinalizedBy").addClass("finalizedDoc");
                $("#dvFinalizedBy").html('');
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "16" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $('input[type="radio"][name="IsFinalizedEdit"][value="No"]').prop('checked', true);
                } else {
                    $('input[type="radio"][name="IsFinalizedEdit"][value="Yes"]').prop('checked', true);
                }
            }

            if ($('#linkMoreInfo1').text().indexOf("Less Information") > -1) {
                $("#linkMoreInfo1").click();
            }

            if (documententity.IsStandard == "Yes")
                $('input[type="radio"][name="IsStandardEdit"][value="Yes"]').prop('checked', true);
            else
                $('input[type="radio"][name="IsStandardEdit"][value="No"]').prop('checked', true);

            if (documententity.IsPrimary == "Yes")
                $('input[type="radio"][name="IsPrimaryEdit"][value="Yes"]').prop('checked', true);
            else
                $('input[type="radio"][name="IsPrimaryEdit"][value="No"]').prop('checked', true);

            if (documententity.DocumentStatus.trim() == 'Expired') {
                $("#dtValidFromEdit").val("");
                $("#dtValidTillEdit").val("");

                if (document.getElementById("ulvalidity1").style.display != "none") {
                    $("#linkAddValidity1").click();
                }
                $("#linkAddValidity1").css('display', 'none');

                //if ($("#linkAddValidity1").text() == "Track document expiration date") {
                //    $("#linkAddValidity1").css('display', 'none');
                //}
                //else {
                //    $("#linkAddValidity1").click();
                //    $("#linkAddValidity1").css('display', 'none');
                //}
            }
            else {
                $("#dtValidFromEdit").val("");
                $("#dtValidTillEdit").val("");

                if (document.getElementById("ulvalidity1").style.display != "none") {
                    $("#linkAddValidity1").click();
                }
                $("#linkAddValidity1").css('display', 'block');
                //if ($("#linkAddValidity1").text() == "Track document expiration date") {
                //    $("#linkAddValidity1").css('display', 'block');
                //}
                //else {
                //    $("#linkAddValidity1").click();
                //    $("#linkAddValidity1").css('display', 'block');
                //}
            }
            $("#ddlDocumentStatusEdit option").filter(function (index) { return $(this).text() === documententity.DocumentStatus; }).prop('selected', true);
            //*Harshitha
            var fvalidfrom = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                if (documententity.ValidFrom != null) {
                    var docvalidfrom = new Date(documententity.ValidFrom)
                    var docvalidfrom1 = (docvalidfrom.getUTCMonth() + 1) + '/' + docvalidfrom.getUTCDate() + '/' + docvalidfrom.getUTCFullYear();
                    fvalidfrom = moment(docvalidfrom1).format('MM/DD/YYYY');
                }
            }
            else {
                if (documententity.ValidFrom != null) {
                    var docvalidfrom = new Date(documententity.ValidFrom)
                    var docvalidfrom1 = (docvalidfrom.getUTCMonth() + 1) + '/' + docvalidfrom.getUTCDate() + '/' + docvalidfrom.getUTCFullYear();
                    fvalidfrom = moment(docvalidfrom1).format(localStorage.AppDateFormat);
                }
            }

            var fValidTill = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                if (documententity.ValidTill != null) {
                    var docvalidtill = new Date(documententity.ValidTill)
                    var docvalidtill1 = (docvalidtill.getUTCMonth() + 1) + '/' + docvalidtill.getUTCDate() + '/' + docvalidtill.getUTCFullYear();
                    fValidTill = moment(docvalidtill1).format('MM/DD/YYYY');
                }
            }
            else {
                if (documententity.ValidTill != null) {
                    var docvalidtill = new Date(documententity.ValidTill)
                    var docvalidtill1 = (docvalidtill.getUTCMonth() + 1) + '/' + docvalidtill.getUTCDate() + '/' + docvalidtill.getUTCFullYear();
                    fValidTill = moment(docvalidtill1).format(localStorage.AppDateFormat);
                }
            }
            $("#dtValidFromEdit").val(fvalidfrom);
            $("#dtValidTillEdit").val(fValidTill);
            //
            GetValuesAndAutoPopulate("ddlDocRemindToEdit", documententity.SendReminderTo);
            $("#txtReminder1Edit").val(documententity.Reminder1);
            $("#txtReminder2Edit").val(documententity.Reminder2);
            $("#txtReminder3Edit").val(documententity.Reminder3);
            if (documententity.Reminder1Condition != '') {
                $("#ddlReminder1Edit option").filter(function (index) { return $(this).text() === documententity.Reminder1Condition; }).prop('selected', true);
            }
            else {
                $("#ddlReminder1Edit").val('before')
            }
            if (documententity.Reminder2Condition != '') {
                $("#ddlReminder2Edit option").filter(function (index) { return $(this).text() === documententity.Reminder2Condition; }).prop('selected', true);
            }
            else {
                $("#ddlReminder2Edit").val('before')
            }
            if (documententity.Reminder3Condition != '') {
                $("#ddlReminder3Edit option").filter(function (index) { return $(this).text() === documententity.Reminder3Condition; }).prop('selected', true);
            }
            else {
                $("#ddlReminder3Edit").val('before')
            }
        },
        error: function () {
            $("#loadingPage").fadeOut();
        },
        complete: function () {
            $("#loadingPage").fadeOut();
            $("#trFileUpload").css("display", "none");
            $("#lblCTitleDoc").text($("#lblContractTitle").text());
            $(".validelement").each(function (index, element) {
                $(element).removeClass("error");
                $("#errormsg_" + element.id).remove();
            });
            $("#EditDocument").dialog("option", "title", "Edit Document Metadata");
            $("#EditDocument").dialog("open");
        }
    });
}

function viewdocinword(docurl) {
    var fileextension = docurl.split('.').pop();
    if (fileextension == 'docx' || fileextension == 'doc') {
        window.open("ms-word:ofe|u|" + decodeURIComponent(docurl), "_self");
        $("#showMSWordPopup_head").html("We're opening your document in Microsoft Word...");
        $("#showMSWordPopup_head").removeClass("red-text");
        $("#showMSWordPopup_head").removeClass("green-text");
        $("#showMSWordPopup_head").addClass("blue-text");
        $("#editwordlink").removeClass("redbg");
        $("#editwordlink").removeClass("greenbg");
        $("#editwordlink").addClass("bluebg");
        $("#linkEditInWordOnline").html('<p><img src="../Content/Images/wordonline.png" alt=""></p><p>Edit in Word Online</p>')

    } else if (fileextension == 'pptx' || fileextension == 'ppt') {
        window.open("ms-powerpoint:ofe|u|" + decodeURIComponent(docurl), "_self");
        $("#showMSWordPopup_head").html("We're opening your document in Microsoft PowerPoint...");
        $("#showMSWordPopup_head").removeClass("blue-text");
        $("#showMSWordPopup_head").removeClass("green-text");
        $("#showMSWordPopup_head").addClass("red-text");

        $("#editwordlink").removeClass("greenbg");
        $("#editwordlink").removeClass("bluebg");
        $("#editwordlink").addClass("redbg");
        $("#linkEditInWordOnline").html('<p><img src="../Content/Images/powerpointonline.png" alt=""></p><p>Edit in PowerPoint Online</p>')

    } else if (fileextension == 'xlsx' || fileextension == 'xls') {
        window.open("ms-excel:ofe|u|" + decodeURIComponent(docurl), "_self");
        $("#showMSWordPopup_head").html("We're opening your document in Microsoft Excel...");
        $("#showMSWordPopup_head").removeClass("blue-text");
        $("#showMSWordPopup_head").removeClass("red-text");
        $("#showMSWordPopup_head").addClass("green-text");
        $("#editwordlink").removeClass("bluebg");
        $("#editwordlink").removeClass("redbg");
        $("#editwordlink").addClass("greenbg");
        $("#linkEditInWordOnline").html('<p><img src="../Content/Images/excelonline.png" alt=""></p><p>Edit in Excel Online</p>')

    }
    if (Checkbrowsernameandversion()) {
        var settings = {
            pattern: /\.[0-9a-z]+$/i,
            knownfiletypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
            wopiframefiletypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
        };

        var ext = docurl.match(settings.pattern);
        if (ext != null) {
            if (ext.length > 0) {
                ext = ext[0].slice(1);
            }
            if (decodeURIComponent(docurl).toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                if (jQuery.inArray(ext, settings.wopiframefiletypes) > -1) {
                    $("#linkEditInWordOnline").attr('href', localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + docurl + "&action=default")
                    $("#showMSWordPopup").dialog("option", "title", "");
                    $("#showMSWordPopup").dialog("open");
                } else {
                    docurl = decodeURIComponent(docurl);
                }
                window.open(docurl);
            }
        }
        //$("#linkEditInWordOnline").attr('href', localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + docurl + "&action=default")
        //$("#showMSWordPopup").dialog("option", "title", "");
        //$("#showMSWordPopup").dialog("open");
    }
    else {
        location = localStorage.SPHostUrl + "/_layouts/15/download.aspx?SourceUrl=" + docurl;
    }
}

function Checkbrowsernameandversion() {
    var Openinbrowser = true;
    //if (bowser.msie) {
    //    if (bowser.version == 10) {
    //        Openinbrowser = false;
    //    }
    //}
    return Openinbrowser;
}

function Opendocinbrowser(docurl) {
    if (docurl != '') {
        if (typeof docurl === "string") {
        }
        else {
            docurl = $(docurl).attr('data-value');
        }
    }

    if (Checkbrowsernameandversion()) {
        var settings = {
            pattern: /\.[0-9a-z]+$/i,
            knownfiletypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
            wopiframefiletypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
        };
        var ext = docurl.match(settings.pattern);
        if (ext != null) {
            if (ext.length > 0) {
                ext = ext[0].slice(1);
            }
            if (decodeURIComponent(docurl).toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                if (jQuery.inArray(ext, settings.wopiframefiletypes) > -1) {
                    docurl = localStorage.SPHostUrl + "/_layouts/wopiframe.aspx?sourcedoc=" + docurl + "&action=default";
                } else {
                    docurl = decodeURIComponent(docurl);
                }
                window.open(docurl);
            }
        }
    } else {
        location = localStorage.SPHostUrl + "/_layouts/15/download.aspx?SourceUrl=" + docurl;
    }
}

function ShareDocument() {
    var vValid = requiredValidator('shareDocument');
    if (vValid) {
        var emailvalue = "";
        arremail = [];
        $('#shareDocument .validemail').each(function (i, item) {
            if (emailvalue == '') {
                emailvalue = item.value;
                if (emailvalue != "")
                    arremail.push(emailvalue.toLowerCase());
                emailvalue = '';
            }
        });

        recipientsArray = arremail.sort();
        reportRecipientsDuplicate = [];
        for (var j = 0; j < recipientsArray.length - 1; j++) {
            if (recipientsArray[j + 1] == recipientsArray[j]) {
                reportRecipientsDuplicate.push(recipientsArray[j]);
                if (reportRecipientsDuplicate.length > 0) {
                    vValid = false;
                }
            }
        }

        var notify = $("#ddlDocumentShareInternal").chosen().find("option:selected");
        var notyEmail = "";
        var InternalEmail = [];
        $(notify).each(function (i, item) {
            var email = $(item).attr("data-emailvalue");
            if (email != null && email.trim() != "") {
                InternalEmail.push(email.toLowerCase());
                var name = item.text;
                notyEmail += name + "~" + email.trim() + ";";
            }
        });
        var commonEmail = $.grep(arremail, function (element) {
            return $.inArray(element.toLowerCase(), InternalEmail) !== -1;
        });

        if (vValid && commonEmail.length == 0) {
            $("#loadingPage").fadeIn();
            var vAutoStatusChange = $("#chkAutoUpdateStatusShareDoc").is(':checked') ? 'Yes' : 'No';
            var contractForm = $("#frmShareDocument *").serialize();
            contractForm += "&SendBy=" + localStorage.UserName;
            contractForm += "&Notes=" + encodeURIComponent($("#txtShareNotes").val());
            contractForm += "&ExpIn=" + $("#txtShareExpIn").val();
            contractForm += "&AllowComment=" + 'Yes';
            contractForm += "&AllowDownload=" + 'Yes';
            contractForm += "&AllowUpload=" + 'Yes';
            contractForm += "&AutoUpdateStatus=" + vAutoStatusChange;
            var notify = $("#ddlDocumentShareInternal").chosen().find("option:selected");
            var notyEmail = "";

            $(notify).each(function (i, item) {
                var email = $(item).attr("data-emailvalue");
                if (email != null && email.trim() != "") {

                    var name = item.text;
                    notyEmail += name + "~" + email.trim() + ";";
                }
            });

            contractForm += "&InternalUsers=" + notyEmail;
            if ($("#chkDisclose").is(':checked')) {
                contractForm += "&Disclose=Yes";
            } else {
                contractForm += "&Disclose=No";
            }
            var vDocID = $("#hdDocumentID").val();
            //$("#inprocessShareDocument").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/Share?documentid=' + vDocID,
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: contractForm,
                cache: false,
                success: function (person) {
                    $("#shareDocument").dialog("close");
                    $("#loadingPage").fadeOut();
                    if ((vAutoStatusChange == "Yes" && $("#hdIsPrimaryDoc").val() == "Yes") && contractItem.IsFinalized != "Yes") {
                        contractItem.Status = "In Negotiation";
                    }
                    ContractTopActions();
                    //manoj
                    if (documentview == null || documentview == "" || documentview == 'folder') {
                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                            var selectedfoldervalue = $('#showAll').find("a");
                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                            showfolderdocuments(parentdocumentdetails);
                        }
                        else {
                            BindDocument(vContractID);
                        }
                    } else {
                        DisplayDocument(documentview);
                    }
                    //GetContractPendingAction(true, "BindPeoples");
                    $("#hdnFolderDocumentView").text('');
                    $("#hdnShowAllTextValue").html('');
                    PrvFolderselection = '';
                    //Bind primary and pined document based on new feature
                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                        CreateDocumentListPinView(vContractID);
                    }
                    //manoj
                    ClearShareForm();
                    GetContractActivities(vContractID);
                },
                error: function (person) {
                    $("#loadingPage").fadeOut();
                },
                complete: function () {
                    //$("#inprocessShareDocument").css('visibility', 'hidden');
                }
            });
        }
        else {
            if (commonEmail.length > 0) {
                swal("", commonEmail.toString().trim() + " are same with internal user.");
            }
            $('#shareDocument .validemail').each(function (i, item) {
                for (i = 0; i <= reportRecipientsDuplicate.length; i++) {
                    if (item.value.toLowerCase() == reportRecipientsDuplicate[i]) {
                        var id = item.id;
                        $('#' + id).addClass('error')
                    }
                }
            });
        }
    }
}

var overwritedocument = false;
var DuplicateDocId = "";
function modalOnOpenDocument(dialog) {
    //manoj
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var ActiveTab = $("#leftTab");
    var ActiveTabContrtol = $(ActiveTab).find(".form-active");
    var ActiveTabID = "";
    if (typeof (ActiveTabContrtol) != "undefined" && ActiveTabContrtol != null && ActiveTabContrtol != "" && ActiveTabContrtol.length > 0) {
        ActiveTabID = ActiveTabContrtol[0].id;
    }
    //manoj
    if (ActiveTabID != null && ActiveTabID == "tabBulkUpload") {
        var selected_Doc_Count = $("#tblManageBulkControls tbody").find("tr").length;
        if (selected_Doc_Count > 0) {
            bulkdocumentManageupload();
        } else {
            swal("", "Please select the one or more document to upload.");
            $('.ui-button-green-text').parent().removeAttr('disabled');
        }
    } else if ($("#hdnIsDocumentTag").text() == "Yes") {
        //manoj
        document.getElementById("addNewDocument").style.pointerEvents = "default";
        document.getElementById("editNewDocument").style.pointerEvents = "default";
        //manoj
        var isExists = true;
        var headerid = $("#lblContractTitle").text();
        headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
        var finalurl = "";
        finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
        finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
        finalurl = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurl + headerid + '/';
        //manoj
        var vDocuments = "";
        var VDocumentNameList = "";
        ContractDocumentDetails = [];
        Collectcontractdocument = false;
        $('input:checkbox[name="NotTaggedContract"]:checked').each(function () {
            if (!CheckDocumentExist(finalurl, this.value)) {
                if (vDocuments == "") {
                    vDocuments = this.id;
                }
                else {
                    vDocuments += ";" + this.id;
                }
            } else {
                VDocumentNameList += "," + this.value;
            }
        });
        //manoj
        if (VDocumentNameList != "") {
            VDocumentNameList = (VDocumentNameList.charAt(0) == ',') ? VDocumentNameList.substr(1) : VDocumentNameList;
            var nVDocumentNameList = VDocumentNameList.lastIndexOf(",");
            if (nVDocumentNameList > -1) {
                VDocumentNameList = VDocumentNameList.substr(0, nVDocumentNameList) + 'and' + VDocumentNameList.substr(nVDocumentNameList + 1);
            }
            swal("", " '" + VDocumentNameList + "' already exist");
        }
        //manoj
        if (vDocuments != "") {
            $("#loadingPage").fadeIn();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentids=' + vDocuments + '&contractid=' + getParameterByName('ContractID') + '&username=' + localStorage.UserName + '&path=' + encodeURIComponent(finalurl),
                type: 'PUT',
                //data: formData,
                cache: false,
                contentType: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken },
                processData: false,
                success: function (document) {
                    $("#addEditDocument").dialog("close");
                    //manoj
                    if (documentview == null || documentview == "" || documentview == 'folder') {
                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                            var selectedfoldervalue = $('#showAll').find("a");
                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                            showfolderdocuments(parentdocumentdetails);
                        }
                        else {
                            BindDocument(vContractID);
                        }
                    } else {
                        DisplayDocument(documentview);
                    }
                    pendingStarted = false;
                    GetContractPendingAction(true, "BindPeoples");
                    $("#hdnFolderDocumentView").text('');
                    $("#hdnShowAllTextValue").html('');
                    PrvFolderselection = '';
                    //Bind primary and pined document based on new feature
                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                        CreateDocumentListPinView(vContractID);
                    }
                    //manoj
                    $("#tblExistingDocument").empty();
                    $("#hdnIsDocumentTag").text('');
                    $("#tblNewDocument").css('display', '');
                    $("#tblExistingDocument").css('display', 'none');
                    $("#tblExistingDocumentSearch").css('display', 'none');
                    $("#tblExistingDocumentPaging").css('display', 'none');
                    $("#tabTemplate").addClass('form-active');
                    $("#tabUpload").removeClass('form-active');
                    $("#trTemplate").css('display', '');
                    $("#trTemplate1").css('display', '');
                    $("#trFileUpload").css('display', 'none');
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#loadingPage").fadeOut();
                },
                error: function (document) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#loadingPage").fadeOut();
                }
            });
        } else {
            if (VDocumentNameList == "") {
                swal("", "Please select atleast any one document.");
                $('.ui-button-green-text').parent().removeAttr('disabled');
            }
        }
    }
    else {
        var DocumentID = $("#txtDocumentID").val()
        if (DocumentID != "") {
            if (requiredValidator("EditDocument")) {

                var vDocUrl = $("#lblDocumentUrl").val().trim();
                if (CheckDocumentNameExistForEdit(vDocUrl, DocumentID)) {

                    swal("", "Document already exists with the same name.");
                }
                else {
                    if ($("#dtValidFromEdit").val() != '' && $("#dtValidTillEdit").val() != '') {
                        if (comparedates("dtValidFromEdit", "dtValidTillEdit")) {

                            EditnewDocument(DocumentID);
                        } else {
                            swal("", "Expires On date should be greater that Valid From date.");
                        }
                    }
                    else {

                        EditnewDocument(DocumentID);
                    }
                }

            }
        }
        else {
            if (requiredValidator('addNewDocument')) {
                $('.ui-button-green-text').parent().attr('disabled', 'disabled');
                CheckFolderExist(DocumentID);
            } else {

                autoscroll();

                $("#addNewDocument").animate({
                    scrollTop: $(".error").offset().top
                }, 2000);

                try {
                    $("#addNewDocument").animate({
                        scrollTop: $("#errormsg_docContract").offset().top
                    }, 2000);
                }
                catch (ex) {
                }


                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#uploaddocumentprocess").css('display', 'none');
            }
        }
    }
}

function BindDocumentTypeandTemplate() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/templatedocuments',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (templates) {
            $("#ddlReplaceTemplate").empty();
            $("#ddlReplaceTemplate").append("<option value='0'>--Select--</option>");
            $("#ddlDocumentTemplate").html("<option value='0'>--Select--</option>");
            var datalenght = templates.length;
            hashtable = {};
            for (var i = 0; i < datalenght; i++) {
                var item = templates[i];
                if (thisContractAreaSettings.DocumentTemplates.split(';').indexOf(item.TemplateName) > -1) {
                    $("#ddlReplaceTemplate").append("<option value='" + item.TemplateName + "~" + item.DocumentType + "'>" + item.TemplateName + "</option>");
                    $("#ddlDocumentTemplate").append("<option value='" + item.TemplateName + "~" + item.DocumentType + "'>" + item.TemplateName + "</option>");
                    hashtable[item.TemplateName.replace(/ /g, '')] = item.Description;
                }
            }
        }
    });

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documenttypes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $("#ddlDocumentType").html("<option value='0'>--Select--</option>");
            $("#ddlDocumentTypeCreate").html("<option value='0'>--Select--</option>");
            var datalenght = documenttypes.length;
            for (var i = 0; i < datalenght; i++) {
                var item = documenttypes[i];
                if (typeof thisContractAreaSettings === 'undefined') {
                    $("#ddlDocumentType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                    $("#ddlDocumentTypeCreate").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                } else {
                    if (thisContractAreaSettings.DocumentTypes.split(';').indexOf(item.TypeName) > -1) {
                        $("#ddlDocumentType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                        $("#ddlDocumentTypeCreate").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                    }
                }
            }
            $("#ddlDocumentTypeCreate option[value='Primary Agreement']").remove();
            $("#ddlDocumentType option[value='Primary Agreement']").remove();
            //if (typeof thisContractAreaSettings === 'undefined') {
            //    $("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
            //}
            if ($("#ddlDocumentTypeCreate option[value='Others']").length == 0) {
                $("#ddlDocumentType").append("<option value='Others'>Others</option>");
                $("#ddlDocumentTypeCreate").append("<option value='Others'>Others</option>");
            }

            //if ($("#ddlDocumentTypeCreate option[value='Primary Agreement']").length > 0) {
            //    $("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
            //}


            //if ($("#ddlDocumentTypeCreate option[value='Primary Agreement']").length > 0) {
            //    $("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
            //}

        },
        error:
            function (data) {
                $("#ddlDocumentType").html("<option value='0'>--Select--</option>");
                $("#ddlDocumentTypeCreate").html("<option value='0'>--Select--</option>");
                $("#ddlDocumentType").append("<option value='Others'>Others</option>");
                $("#ddlDocumentTypeCreate").append("<option value='Others'>Others</option>");
            }
    });
}

function bulkdocumentManageupload() {
    if (requiredValidator('formManageBulkControls', false)) {
        //holderManagebulk.ondragover = function (e) {
        //    return false;
        //}
        //holderManagebulk.ondragend = function () {
        //    return false;
        //}
        //holderManagebulk.ondragleave = function () {
        //    return false;
        //}
        //holderManagebulk.ondrop = function (ev) {
        //    return false;
        //}
        var createdParentFolder = false;
        document.getElementById("tblManageBulkControls").style.pointerEvents = "none";
        $("#tblManageBulkControls tbody").find("tr").each(function (tblmanage) {
            var Row_id = this.id.split(/[_ ]+/).pop();
            $('#idLoading' + Row_id).css('display', '');
            $('#idLoadingstart' + Row_id).css('display', 'none');
            $('#idLoadingcomplete' + Row_id).css('display', 'none');
        });
        //$('#btnManageBulkUploadSave').css('display', 'none');
        //$('#btnManageBulkUploadCancel').css('display', 'none');
        $(".clManageupload").css('display', '');
        $('.clManageDrop').css('display', 'none');
        parentfolderidtopass = "";
        dropdownlength = 0;
        uploadedfilecount = 0;
        if (document.getElementById("spnmanagebtn").style.display == "none") {
            createdParentFolder = true;
        } else {
            createdParentFolder = false;
        }

        //if ((documentview == 'folder' || documentview == "" || documentview == null)) {
        //    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
        //        var valuetocheck = $("#showAll")[0].lastChild;
        //        parentfolderidtopass = valuetocheck.id;
        //    } else {
        //        createdParentFolder = true;
        //    }
        //} else {
        //    if (contractparentfolderid != null && contractparentfolderid != "" && typeof (contractparentfolderid) != "undefined") {
        //        parentfolderidtopass = contractparentfolderid;
        //    } else {
        //        parentfolderidtopass = "";
        //        createdParentFolder = true;
        //    }

        //}
        if (!createdParentFolder) {
            //manoj
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderurl?contractid=' + getParameterByName("ContractID") + '&foldeurl=' + $("#spnDocFolderURL").text(),
                type: 'GET',
                dataType: 'json',
                'Content-Type': 'application/json',
                cache: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                success: function (Parent_Folder) {
                    if (Parent_Folder != null) {
                        //parentFoldeIDtoPass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        parentfolderidtopass = Parent_Folder.RowKey;
                        FromManage = true;
                        bulkdocumentuploadchunk();
                    } else {
                        parentfolderidtopass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        return false;
                    }

                },
                error:
                    function (data) {
                        parentfolderidtopass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        return false;
                    }
            });
            //manoj
        }
        else {
            var formDataFolder = new FormData();
            formDataFolder.append("AccountID", localStorage.AccountID);
            formDataFolder.append("ContractID", getParameterByName("ContractID"))
            formDataFolder.append("CreatedBy", localStorage.UserName);
            formDataFolder.append("ModifiedBy", localStorage.UserName);
            formDataFolder.append("DocumentAuthor", localStorage.UserName);

            //var headeridst = $("#lblContractTitle").text();
            //headeridst = headeridst.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
            //var finalurlst = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
            //finalurlst = (finalurlst.charAt(0) != '/') ? '/' + finalurlst : finalurlst;
            //finalurlst = ((finalurlst.substr(finalurlst.length - 1)) != "/") ? finalurlst + "/" : finalurlst;
            //finalurlst = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurlst + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurlst + headeridst + '/';
            formDataFolder.append("FolderPathFinal", $("#spnDocFolderURL").text());
            if (typeof (formDataFolder) != 'undefined' && formDataFolder != null) {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/foldercreation',
                    type: 'POST',
                    data: formDataFolder,
                    cache: false,
                    contentType: false,
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken
                    },
                    processData: false,
                    success: function (ParentFolderdata) {
                        //parentFoldeIDtoPass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        parentfolderidtopass = ParentFolderdata;
                        FromManage = true;
                        bulkdocumentuploadchunk();
                    },
                    error: function (ex2) {
                        parentfolderidtopass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        return false;
                    }
                });
            }
        }
    }
}

function CheckDocumentNameExistForEdit(FolderUrl, documentID) {
    var isExist = false;
    var vDocURL = "";
    var folderurltobind = "";
    vDocURL = FolderUrl.substring(0, FolderUrl.lastIndexOf("/") + 1) + encodeURIComponent($('#txtDocumentName').val()) + "." + $("#spExt").text().trim();
    folderurltobind = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + getParameterByName("ContractID") + '&docurl=' + vDocURL,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (data) {
            if (data == null) {
                isExist = false;
            }
            else {
                if (data.RowKey == documentID) {
                    isExist = false;
                }
                else {
                    isExist = true;

                }
            }
        },
        error: function (data) {
            isExist = false;
        }
    });
    return isExist;
}

function EditnewDocument(DocumentID) {
    var formData = new FormData();
    var opmlFile = $('#docContract')[0];
    var vDocumentType = "";

    formData.append("opmlFile", opmlFile.files[0]);
    formData.append("AccountID", localStorage.AccountID);
    formData.append("DocumentID", DocumentID);
    formData.append("ContractID", getParameterByName('ContractID'));
    formData.append("Description", $("#txtDocumentDescriptionEdit").val());

    var arrAuthorEdit = $("#ddlAuthorEdit").val();
    var vAuthorEdit = '';
    $(arrAuthorEdit).each(function (i, item) {
        if (vAuthorEdit == '') {
            vAuthorEdit = item;
        }
        else {
            vAuthorEdit += "; " + item;
        }
    });
    formData.append("DocumentAuthor", vAuthorEdit);
    formData.append("DocumentLanguage", $("#txtDocumentLanguageEdit").val());
    formData.append("HardCopyPhysicalLocation", $("#txtHardCopyPhysicalLocationEdit").val());
    formData.append("ContractTitle", $("#lblCTitleDoc").text());
    formData.append("DocumentName", $("#txtDocumentName").val());
    formData.append("Counterparty", "");

    if ($("#ddlDocumentType").val() != "0") {
        vDocumentType = $("#ddlDocumentType").val();
    }
    formData.append("DocumentType", vDocumentType);
    formData.append("ModifiedBy", localStorage.UserName);
    formData.append("DocumentExt", $("#spExt").html());
    formData.append("IsFolder", 'False');
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "14" && n.Status == "ON");
    });
    if (vDocLibFeat.length > 0) {
        formData.append("DocumentLibraryName", $('#hdContAreaDocLibName').val());
    }
    else {
        formData.append("DocumentLibraryName", "Contract Documents");
    }
    if ($("input:radio[name=IsFinalizedEdit]:checked").val() == "Yes") {
        formData.append("IsFinalized", "Yes");
    } else {
        formData.append("IsFinalized", "No");
    }
    if ($("input:radio[name=IsStandardEdit]:checked").val() == "Yes") {
        formData.append("IsStandard", "Yes");
    } else {
        formData.append("IsStandard", "No");
    }
    if ($("input:radio[name=IsPrimaryEdit]:checked").val() == "Yes") {
        formData.append("IsPrimary", "Yes");
    } else {
        formData.append("IsPrimary", "No");
    }
    formData.append("DocumentStatus", $("#ddlDocumentStatusEdit").val());
    formData.append("ValidFrom", $.datepicker.formatDate('mm/dd/yy', $("#dtValidFromEdit").datepicker('getDate')));
    formData.append("ValidTill", $.datepicker.formatDate('mm/dd/yy', $("#dtValidTillEdit").datepicker('getDate')));
    formData.append("Reminder1", $("#txtReminder1Edit").val());
    formData.append("Reminder1Condition", $("#ddlReminder1Edit").find('option:selected').text());
    formData.append("Reminder2", $("#txtReminder2Edit").val());
    formData.append("Reminder2Condition", $("#ddlReminder2Edit").find('option:selected').text());
    formData.append("Reminder3", $("#txtReminder3Edit").val());
    formData.append("Reminder3Condition", $("#ddlReminder3Edit").find('option:selected').text());
    var arrSendReminderTo = $("#ddlDocRemindToEdit").val();
    var vSendReminderTo = '';
    $(arrSendReminderTo).each(function (i, item) {
        if (vSendReminderTo == '') {
            vSendReminderTo = item;
        }
        else {
            vSendReminderTo += "; " + item;
        }
    });
    formData.append("SendReminderTo", vSendReminderTo);

    $("#inprocessDocumentMetadata").css('visibility', 'visible');
    //manoj
    $('#editNewDocument').css("pointer-events", "none");
    //manoj
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + DocumentID,
        type: 'PUT',
        data: formData,
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
        processData: false,
        success: function (document) {
            $('.ui-button-green-text').parent().removeAttr('disabled');
            $("#EditDocument").dialog("close");
            $("#ulDocument").empty();
            $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
            //manoj
            if (documentview == null || documentview == "" || documentview == 'folder') {
                GetdocumentIsStandard(vContractID);
            } else {
                DisplayDocument(documentview);
            }
            pendingStarted = false;
            GetContractPendingAction(true, "BindPeoples");
            $("#hdnFolderDocumentView").text('');
            $("#hdnShowAllTextValue").html('');
            PrvFolderselection = '';
            //Bind primary and pined document based on new feature
            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                CreateDocumentListPinView(vContractID);
            }
            //manoj
            if ($("#hdIsPrimaryDoc").val() == "Yes") {
                var Finalizedcontractstatus = ["Ready for Signature", "Awaiting Signatures", "Active", "Signed", "Expired"];
                var notFinalizedcontractstatus = ["New", "Awaiting Review", "Reviewed", "In Negotiation", "Negotiation Complete"];
                if (contractItem.IsFinalized == "Yes" && (Finalizedcontractstatus.indexOf($("#ddlDocumentStatusEdit").val()) > -1)) {
                    contractItem.Status = $("#ddlDocumentStatusEdit").val();
                    ContractTopActions();
                }
                else if (contractItem.IsFinalized != "Yes" && (notFinalizedcontractstatus.indexOf($("#ddlDocumentStatusEdit").val()) > -1)) {
                    contractItem.Status = $("#ddlDocumentStatusEdit").val();
                    ContractTopActions();
                } else if (contractItem.IsFinalized != "Yes" && (Finalizedcontractstatus.indexOf($("#ddlDocumentStatusEdit").val()) > -1)) {
                    contractItem.IsFinalized = "Yes";
                    contractItem.FinalizedBy = localStorage.UserName;
                    ContractTopActions();
                }
            }
            $("#inprocessDocumentMetadata").css('visibility', 'hidden');
            //manoj
            $('#editNewDocument').css("pointer-events", "auto");
            //manoj
        },
        error: function (Message) {
            $("#inprocessDocumentMetadata").css('visibility', 'hidden');
            //manoj
            $('#editNewDocument').css("pointer-events", "auto");
            //manoj
            swal(Message.responseText);
        }
        //complete: function () {
        //    $("#inprocessDocumentMetadata").css('visibility', 'hidden');
        //}

    });
}

function CheckFolderExist(DocumentID) {
    if ($("#txtNewFolderName").val() != "") {
        if ($("#txtNewFolderName").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "new folder" && $("#txtNewFolderName").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "amendments") {
            if (($('#lblFolderUrl').text().match(/\//g) || []).length > 2) {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/childdocuments?contractid=' + vContractID + '&folderurl=' + $('#lblFolderUrl').text(),
                    type: 'GET',
                    cache: false,
                    contentType: false,
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey
                    },
                    success: function (childdocument) {
                        var documentresult = $.grep(childdocument, function (n, i) {
                            return (n.DocumentName.toLowerCase() == $("#txtNewFolderName").val().replace(/\s\s+/g, " ").toLowerCase().trim());
                        });
                        if (documentresult.length > 0) {
                            $("#uploaddocumentprocess").css('display', 'none');
                            swal("", "Folder name <span style='font-weight:700'>" + $("#txtNewFolderName").val().replace(/\s\s+/g, " ").trim() + "</span> already exists (or) Reserved.");
                        } else {
                            allowuploadDocument(DocumentID);
                        }
                    },
                    error: function (childdocument) {
                        allowuploadDocument(DocumentID);
                    }
                });
            } else {
                allowuploadDocument(DocumentID);
            }
        } else {
            $("#uploaddocumentprocess").css('display', 'none');
            swal("", "Folder name <span style='font-weight:700'>" + $("#txtNewFolderName").val().replace(/\s\s+/g, " ").trim() + "</span> already exists (or) Reserved.");
        }
    } else {
        allowuploadDocument(DocumentID);
    }
}

var bulkdocumentuploadchunk = function () {
    if (FromManage) {
        if (Managedroppedfiles.length > 0) {
            dropdownlength = Managedroppedfiles.length;
            var fileControl = Managedroppedfiles;
            if (fileControl.length > 0) {
                uploaders.uploaderCollection.removeAll();
                for (var i = 0; i < fileControl.length; i++) {
                    cful = Object.create(chunkedFileUploader);
                    cful.init(fileControl[i], i);
                    uploaders.uploaderCollection.push(cful);
                }
                //$(".progressBar").progressbar(0);
                uploaders.uploadAll();
            }
        }

    } else {
        if (droppedfiles.length > 0) {
            dropdownlength = droppedfiles.length;
            var fileControl = droppedfiles;
            if (fileControl.length > 0) {
                uploaders.uploaderCollection.removeAll();
                for (var i = 0; i < fileControl.length; i++) {
                    cful = Object.create(chunkedFileUploader);
                    cful.init(fileControl[i], i);
                    uploaders.uploaderCollection.push(cful);
                }
                //$(".progressBar").progressbar(0);
                uploaders.uploadAll();
            }
        }
    }
}

var uploaders = {
    uploaderCollection: ko.observableArray([]),
    uploadAll: function () {
        for (var i = 0; i < this.uploaderCollection().length; i++) {
            var cful = this.uploaderCollection()[i];
            cful.uploadMetaData();
        }
    }
}

function GetdocumentIsStandard(contractid) {
    articleDocumentMileStone = '';
    multipleChecksDocumentID = '';
    multipleChecksDocumentName = '';
    $("#documentMultiActions").css('display', 'none');
    if (contractid == null || contractid == "") { contractid = vContractID; }
    var vGetTime = new Date();
    $.ajax({
        url: '/Documents/GetTime',
        type: 'GET',
        dataType: 'json',
        cache: false,
        success: function (data) {
            var jsObject = JSON.parse(data);
            vGetTime = new Date(jsObject);
        }
    });
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";

    vFinalSignature = "dropdownMenuFinalSignature";
    vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
    $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $("#ddlDocumentList").empty();
    $("#alertsListUpcomingDocument").empty();
    try {
        var article = '';
        DocumentCount = 0;
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + contractid,
            type: 'GET',
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            processData: false,
            success: function (data) {
                $("#ulDocument").empty();
                var count = 0;
                var countStandard = 0;
                var vPermission = $("#hdnPermission").val();

                var settings = {
                    pattern: /\.[0-9a-z]+$/i,
                    knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
                    WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
                };

                var datalenght = data.length;

                if (datalenght > 0) {
                    for (var vi = 0; vi < datalenght; vi++) {
                        if (data[vi].ContractArea != "") {
                            docdefaultview(data[vi].ContractArea);
                            break;
                        }
                    }
                }
                var DocDefaultView = ""
                if (thisDocumentLibrarySettings != '' && thisDocumentLibrarySettings != 'undefined' && typeof thisDocumentLibrarySettings != "undefined") {
                    DocDefaultView = thisDocumentLibrarySettings.DocDefaultView;
                    DocVersion = thisDocumentLibrarySettings.DocVersion;
                }
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    count++
                    if (item.IsStandard == "Yes") {
                        countStandard++;
                    }
                    var vClass = "openmenuDocumentFinal";
                    var vv = moment(new Date(item.Modified));
                    var vTime = vv.fromNow();
                    vTime = vv.from(vGetTime);
                    var vDocIcon = "";//'<img src="../Content/Images/Doc_draft.png" class="doc_type margin-left-5" alt="Draft Document" title="Draft Document" />';
                    if (item.IsFinalized == "Yes") {
                        vClass = "openmenuDocument";
                        vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized/Ready for Signature" title="Finalized/Ready for Signature" />';
                        if (item.CreationMode == "Amendment") {
                            vClass = "openmenuAmendmentDocumentFinal";
                            vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                        }
                    } else if (item.CreationMode == "Amendment") {
                        vClass = "openmenuAmendmentDocument";
                        vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';

                    }

                    if (item.IsPrimary == "Yes") {
                        vDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                    }
                    vURLDoc = encodeURI(item.DocumentUrl);
                    var ext = vURLDoc.match(settings.pattern);
                    var vFileType = '<dd class="file-icon none"></dd>';
                    if (ext != null) {
                        if (ext.length > 0) { ext = ext[0].slice(1); }
                        if (vURLDoc.toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                            if (jQuery.inArray(ext, settings.WopiFrameFileTypes) > -1) {
                                vRawURLDoc = vURLDoc;
                                vURLDoc = localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + vURLDoc + "&action=default";
                            } else {
                                vRawURLDoc = "";
                            }
                        }

                        if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                            vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                        }
                    }

                    if (count <= 5)
                        article += '<li class=" margin-bottom-5" active=' + item.IsActive + '>';
                    else
                        article += '<li class="ShowMoreDocuments margin-bottom-5" style="display:none;">';

                    article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
                    article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
                    article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
                    article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
                    article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
                    article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
                    article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
                    var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
                    article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';
                    if ($("#hdnPermission").val() != "View" && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                        article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';
                    }


                    switch (item.DocumentStatus) {
                        case "New":
                            article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                            break;
                        case "Ready for Signature":
                            article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                            break;
                        case "Awaiting Signatures":
                            article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                            break;
                        case "Active":
                            article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                            break;
                        case "Signed":
                            article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                            break;
                        case "Expired":
                            article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                            break;
                        case "Awaiting Review":
                            article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                            break;
                        case "Reviewed":
                            article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                            break;
                        case "In Negotiation":
                            article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                            break;
                        case "Negotiation Complete":
                            article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                            break;
                    }

                    if (vRawURLDoc != "") {
                        if (DocDefaultView == "WordClient") {
                            article += vFileType + '<a href="javascript:void(0);" seqe ="' + vRawURLDoc + '" onclick="viewdocinword(\'' + vRawURLDoc + '\')">' + item.DocumentName + '</a>';
                        } else {
                            article += vFileType + '<a href="' + vURLDoc + '" target="_blank">' + item.DocumentName + '</a>';
                        }
                    } else {
                        article += vFileType + '<a href="' + vURLDoc + '" target="_blank">' + item.DocumentName + '</a>';
                    }

                    article += '<span class="sub-text"> ' + vTime + '</span>';
                    article += '';
                    article += '';
                    article += vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
                    article += '</li>';
                    DocumentCount++;
                    articleDocMiletstone = BindDocumentMilestones(item);
                    var doclist = '<option value="' + item.RowKey + '">' + item.DocumentName + '</option>';
                    $("#ddlDocumentList").append(doclist);
                    $("#ddlDocumentList").trigger('chosen:updated');
                    articleDocumentMileStone += articleDocMiletstone;
                    //BindDocumentAlert(item);

                }
                //$("#ulDocument").html(article);
                if (DocVersion == "No") {
                    $('li.history').hide();
                }
                //         if (datalenght == countStandard) {
                //             if (contractItem.IsStandard != "Yes") {
                //                 swal({
                //                     title: '',
                //                     text: "Marking the document as standard will make the contract as standard. Are you sure you want to make this Contract as standard?",
                //                     type: 'warning',
                //                     showCancelButton: true,
                //                     confirmButtonText: 'Yes',
                //                     cancelButtonText: 'No',
                //                     html: true
                //                 },
                //function (confirmed) {
                //    if (confirmed) {
                //        SetStandardFlag("Yes");
                //    }
                //    return;
                //});

                //             }
                //         }


                //$("#lblDocumentsCount").text(count);

                //if (!$("#lblDocumentsCount").text().trim()) {
                //    $("#ulDocument").empty();
                //    $("#ulDocument").append('<li>No items found.</li>');
                //}

                $(".openmenuDocument").contextMenu({ menu: vFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                $(".openmenuDocumentFinal").contextMenu({ menu: vMarkFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                $(".openmenuAmendmentDocument").contextMenu({ menu: "dropdownMenuAmendment", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });

            },
            error: function (request) {
                $("#ulDocument").empty();
                $("#lblDocumentsCount").text('0');
                $("#ulDocument").html('<li>No items found.</li>');
                //$("#btnAddContractDocument").css('display', '');
                //$("#lblAddContractDocument").css('display', '');
            },
            complete: function () {

                //*Harshitha
                //manoj
                if (documentview == null || documentview == "" || documentview == 'folder') {
                    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                        var selectedfoldervalue = $('#showAll').find("a");
                        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                        var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                        showfolderdocuments(parentdocumentdetails);
                    }
                    else {
                        // $("#ulDocument").html(article);
                        BindDocument(vContractID);
                    }
                } else {
                    DisplayDocument(documentview);
                }
                //GetContractPendingAction(true, "BindPeoples");
                $("#hdnFolderDocumentView").text('');
                $("#hdnShowAllTextValue").html('');
                PrvFolderselection = '';
                //Bind primary and pined document based on new feature
                if ($("#hdnnewdocumentfeature").text() == "Yes") {
                    CreateDocumentListPinView(vContractID);
                }
                //manoj
                BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
            }

        });
    } catch (e) {

    }

}

function allowuploadDocument(DocumentID) {
    DuplicateDocId = CheckDocumentExistwithoutparameter();
    if (DuplicateDocId != "False") {
        swal({
            title: '',
            text: "Document already exists, do you want to <span style='font-weight:700'>overwrite</span> the existing document?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true,
            closeOnConfirm: true
        },
             function (confirmed) {
                 if (confirmed) {
                     $("#uploaddocumentprocess").css('display', '');
                     overwritedocument = true;
                     if ($("#dtValidFrom").val() != '' && $("#dtValidTill").val() != '') {
                         if (comparedates("dtValidFrom", "dtValidTill")) {
                             $("#addEditDocument").dialog("close");
                             newDocument(DocumentID);
                         } else {
                             $("#uploaddocumentprocess").css('display', 'none');
                             swal("", "Valid Till date should be greater than Valid From date.");
                         }
                     } else {
                         $("#addEditDocument").dialog("close");
                         newDocument(DocumentID);
                     }
                     $("#uploaddocumentprocess").css('display', 'none');
                 }
                 else {
                     $('.ui-button-green-text').parent().removeAttr('disabled');
                     $("#uploaddocumentprocess").css('display', 'none');
                 }
                 return;
             });

    }
    else {
        overwritedocument = false;
        $("#uploaddocumentprocess").css('display', '');
        DuplicateDocId = "";
        if ($("#dtValidFrom").val() != '' && $("#dtValidTill").val() != '') {
            if (comparedates("dtValidFrom", "dtValidTill")) {
                $("#addEditDocument").dialog("close");
                newDocument(DocumentID);
            } else {
                $("#uploaddocumentprocess").css('display', 'none');
                swal("", "Valid Till date should be greater than Valid From date.");
            }
        } else {
            $("#addEditDocument").dialog("close");
            newDocument(DocumentID);
        }
        // $("#uploaddocumentprocess").css('display', 'none');
    }
}

var multipleChecksDocumentID = "";
var multipleChecksDocumentName = "";
var multipleChecksDocumentReview = "";
var multipleChecksDocumentReviewTitle = "";
var multipleChecksDocumentSentForSign = "";
var multipleChecksDocumentIsFinalized = "";
var multipleChecksDocumentIsPrimaryDoc = "";
var multipleChecksDocumentURL = "";
var multiplechecksDocStatus = "";

function checkMultipleDocuments(object) {
    $(".openmenuDocumentMultiActions").contextMenu({ menu: 'dropdownMenuDocumentMultiActions', leftButton: true }, function (action, el, pos) { contextMenuDocumentMultiActions(action, el, pos); });
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    multipleChecksDocumentSentForSign = "";
    multipleChecksDocumentIsFinalized = "";
    multipleChecksDocumentIsPrimaryDoc = "";
    multipleChecksDocumentURL = "";
    multiplechecksDocStatus = "";
    var CanSendForSign = false;
    var IsExcelDoc = false;
    var IsDocuSign = false;
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        var vConfig = vAccFeat[0].Configuration;
        var vProvider = $(vConfig).find('Provider').text();
        if (vProvider == "Docu Sign")
            IsDocuSign = true;
    }
    selectedamnddoc = false;
    selectedamnddocname = [];
    $('input[type=checkbox][name="MultipleDocuments"]:checked').each(function () {
        var DocumentID = this.id;
        var isChecked = this.checked;
        var DocumentName = $(this).parent("li").find("#DocumentName").text();
        var ReviewWorkflow = $(this).parent("li").find("#ReviewWorkflow").text();
        var SentForSign = $(this).parent("li").find("#SentForSign").text();

        //manoj
        var DocStatusTag = $(this).parent("li").find("b")[0].title;
        //manoj

        var IsFinalized = $(this).parent("li").find("#IsFinalized").text();
        var IsPrimaryDoc = $(this).parent("li").find("#IsPrimaryDoc").text();

        var LinkURL = $(this).parent("li").find("a").attr('href');
        if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
            LinkURL = $(this).parent("li").find("a").attr('seqe')
            if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                LinkURL = $(this).parent("li").find("a").attr('data-value');
            }
        } else {
            LinkURL = $(this).parent("li").find("a").attr('data-value');
        }

        var amnmantdocument = $(this).parent("li").find("#FolderCreationMode").text();
        if (isChecked) {
            if (contractItem.Status != 'Expired' && contractItem.Status != 'Archived')
                $("#documentMultiActions").css('display', '');
            if (multipleChecksDocumentID == "") {
                multipleChecksDocumentID = DocumentID;
                multipleChecksDocumentName = DocumentName;
                multipleChecksDocumentReview = ReviewWorkflow;
                if (SentForSign != '')
                    multipleChecksDocumentSentForSign = SentForSign;

                //manoj
                multiplechecksDocStatus = DocStatusTag;
                //manoj

                multipleChecksDocumentIsFinalized = IsFinalized;
                multipleChecksDocumentIsPrimaryDoc = IsPrimaryDoc;
                multipleChecksDocumentURL = decodeURIComponent(LinkURL);
                multipleChecksDocumentReviewTitle = "Review for " + DocumentName;
            }
            else {
                multipleChecksDocumentID = multipleChecksDocumentID + ';' + DocumentID;
                //multipleChecksDocumentName = multipleChecksDocumentName + ';' + DocumentName;
                multipleChecksDocumentName = multipleChecksDocumentName + '~' + DocumentName;
                multipleChecksDocumentReview = multipleChecksDocumentReview + ";" + ReviewWorkflow;
                if (SentForSign != '')
                    multipleChecksDocumentSentForSign += ";" + SentForSign;

                //manoj
                multiplechecksDocStatus += ";" + DocStatusTag;
                //manoj

                multipleChecksDocumentIsFinalized += ";" + IsFinalized;
                multipleChecksDocumentIsPrimaryDoc += ";" + IsPrimaryDoc;
                multipleChecksDocumentURL += "|" + decodeURIComponent(LinkURL);
                multipleChecksDocumentReviewTitle = multipleChecksDocumentReviewTitle + ";Review for " + +DocumentName;
            }
            var ext = DocumentName.split('.').pop();
            CanSendForSign = false;
            if (typeof (ext) != "undefined" && ext != "" && !IsExcelDoc)
                if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1 || ext.indexOf("pdf") > -1) {
                    CanSendForSign = true;
                }
                else
                    IsExcelDoc = true;
            if (amnmantdocument == "Amendment") {
                selectedamnddocname.push(DocumentName);
                selectedamnddoc = true;
            }
        }
    });

    if (multipleChecksDocumentID.trim() == "") {
        $("#documentMultiActions").css('display', 'none');
    }
    else {
        if (multiplechecksDocStatus.indexOf('Expired') >= 0) {
            $("#dropdownMenuDocumentMultiActions .review").hide();
            $("#dropdownMenuDocumentMultiActions .final").hide();
            $("#dropdownMenuDocumentMultiActions .signature").hide();
            $("#dropdownMenuDocumentMultiActions .clexpire").hide();
        } else {
            $("#dropdownMenuDocumentMultiActions .review").show();
            $("#dropdownMenuDocumentMultiActions .final").show();
            $("#dropdownMenuDocumentMultiActions .signature").show();
            $("#dropdownMenuDocumentMultiActions .clexpire").show();

            if (multipleChecksDocumentReview.indexOf('In Progress') >= 0) {
                $("#dropdownMenuDocumentMultiActions .review").hide();
            }
            else if (contractItem.IsDraft != "Yes") {
                $("#dropdownMenuDocumentMultiActions .review").show();
            }
            //if (multipleChecksDocumentSentForSign != "") {
            //    $("#dropdownMenuDocumentMultiActions .final").hide();
            //}
            //else if (contractItem.IsDraft != "Yes") {
            //    $("#dropdownMenuDocumentMultiActions .final").show();
            //}
            if (multipleChecksDocumentIsFinalized.indexOf('Yes') >= 0) {
                $("#dropdownMenuDocumentMultiActions .final").hide();
            }
            else if (contractItem.IsDraft != "Yes") {
                $("#dropdownMenuDocumentMultiActions .final").show();
            }
            if (multipleChecksDocumentSentForSign != "" || multipleChecksDocumentIsFinalized.indexOf('No') >= 0
                || !CanSendForSign || !IsDocuSign) {
                $("#dropdownMenuDocumentMultiActions .signature").hide();
            }
            else if (contractItem.IsDraft != "Yes") {
                $("#dropdownMenuDocumentMultiActions .signature").show();
            }
        }
    }
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}

function ChangeDocumentStatus(obj) {
    if (((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) || !(contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute')) {
        return;
    } else if (contractItem.Status == "Cancelled" || contractItem.Status == "Expired") {
        return;
    }

    var primarydocumentcheck = $(obj).parent();
    var primarydocumentcheckdetails = $(primarydocumentcheck).find("#IsPrimaryDoc").text();
    $("#hdIsPrimaryDoc").val(primarydocumentcheckdetails);
    var CheckBindDocumentData = parseInt($("#tdDocumentList").children().length)
    var Parentnodetitle = obj.title;
    changedocumentstatusbyid = obj.id;
    if (CheckBindDocumentData != 0) {
        $("#dvManageDocumentStatus").dialog("open");
    }
    else {
        var ctrl = "<input id='rdDocumentNew' type='radio' name='DocumentStatus' value='New' class='css-checkbox' /><b title='New' class='status_green_another details_documentstatus'><img src='../Content/Images/status/new.png'>new</b><label for='rdDocumentNew' class='css-label'>New</label><br />";
        ctrl += "<input id='rdDocumentAwaitingReview' type='radio' name='DocumentStatus' value='Awaiting Review' class='css-checkbox' /><b title='Awaiting Review' class='status_yellow details_documentstatus'><img src='../Content/Images/status/renew.png'>Rev</b><label for='rdDocumentAwaitingReview' class='css-label'>Awaiting Review</label><br />";
        ctrl += "<input id='rdDocumentReviewed' type='radio' name='DocumentStatus' value='Reviewed' class='css-checkbox' /><b title='Reviewed' class='status_blue details_documentstatus'><img src='../Content/Images/status/tick.png'>Rev</b><label for='rdDocumentReviewed' class='css-label'>Reviewed</label><br />";
        ctrl += "<input id='rdDocumentInNegotiation' type='radio' name='DocumentStatus' value='In Negotiation' class='css-checkbox' /><b title='In Negotiation' class='status_yellow details_documentstatus'><img src='../Content/Images/status/renew.png'>nego</b><label for='rdDocumentInNegotiation' class='css-label'>In Negotiation</label><br />";
        ctrl += "<input id='rdDocumentNegotiationComplete' type='radio' name='DocumentStatus' value='Negotiation Complete' class='css-checkbox' /><b title='Negotiation Complete' class='status_blue details_documentstatus'><img src='../Content/Images/status/tick.png'>nego</b><label for='rdDocumentNegotiationComplete' class='css-label'>Negotiation Complete</label><br />";
        ctrl += "<input id='rdDocumentReadySignature' type='radio' name='DocumentStatus' value='Ready for Signature' class='css-checkbox' /><b title='Ready for Signature' class='status_green details_documentstatus'><img src='../Content/Images/status/active.png'>sign</b><label for='rdDocumentReadySignature' class='css-label'>Ready for Signature</label><br />";
        ctrl += "<input id='rdDocumentAwaitingSignatures' type='radio' name='DocumentStatus' value='Awaiting Signatures' class='css-checkbox' /><b title='Awaiting Signatures' class='status_yellow details_documentstatus'><img src='../Content/Images/status/renew.png'>sign</b><label for='rdDocumentAwaitingSignatures' class='css-label'>Awaiting Signatures</label><br />";
        ctrl += "<input id='rdDocumentSigned' type='radio' name='DocumentStatus' value='Signed' class='css-checkbox' /><b title='Signed' class='status_blue details_documentstatus'><img src='../Content/Images/status/tick.png'>Sign</b><label for='rdPipelineSigned' class='css-label'>Signed</label><br />";
        ctrl += "<input id='rdDocumentActive' type='radio' name='DocumentStatus' value='Active' class='css-checkbox' /><b title='Active' class='status_green details_documentstatus'><img src='../Content/Images/status/active.png'>actv</b><label for='rdDocumentActive' class='css-label'>Active</label><br />";
        ctrl += "<input id='rdDocumentExpired' type='radio' name='DocumentStatus' value='Expired' class='css-checkbox' /><b title='Expired' class='status_Gray details_documentstatus'><img src='../Content/Images/status/expried.png'>exp</b><label for='rdDocumentExpired' class='css-label'>Expired</label><br />";
        $("#tdDocumentList").append(ctrl);
    }
    $('input:radio[name="DocumentStatus"][value="' + Parentnodetitle + '"]').prop('checked', true);
    $("#dvManageDocumentStatus").dialog("open");
}

function ChangeDocumentStatusByID() {
    if (requiredValidator("dvManageDocumentStatus", false)) {
        $("#loadingPage").fadeIn();
        var stat = '';
        stat = decodeURI($("input:radio[name=DocumentStatus]:checked").val());
        if (stat != "" && changedocumentstatusbyid != '') {
            if (stat.trim() != '' && changedocumentstatusbyid.trim() != '') {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/changestatus?documentid=' + changedocumentstatusbyid.trim() + '&status=' + stat,
                    type: 'PUT',
                    dataType: 'json',
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName
                    },
                    contentType: false,
                    cache: false,
                    success: function (result) {
                        $("#dvManageDocumentStatus").dialog("close");
                        if ($("#hdIsPrimaryDoc").val() == "Yes") {
                            try {
                                BindContractDetails(vContractID, "allow");
                            } catch (ex) {
                            }
                        } else {
                            //BindDocument(vContractID);
                            refreshdocuemnt();
                        }
                        changedocumentstatusbyid = '';
                        $("#loadingPage").fadeOut();
                    },
                    error: function (person) {
                        $("#loadingPage").fadeOut();
                    },
                });
            }
        }
    }
}

function BindDocumentMilestones(item) {
    var completeArticle = '';
    var sbcount = 0;
    var vDocValidDate = '';
    if (item.ValidTill != null) {
        sbcount++;
        var Validdate;

        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { Validdate = item.ValidTill.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
        else {
            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { Validdate = item.ValidTill.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { Validdate = item.ValidTill.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
        }
        vDocValidDate = '' + Validdate + '';
        var article = '';
        if (sbcount <= 5)
            article = '<li class=" margin-bottom-8 WrapText_h2">';
        else
            article = '<li class="ShowMoreMilestones margin-bottom-8 WrapText_h2" style="display:none;">';
        article += ' <img src="../Content/Images/sand.png" style="width: 15px;pointer-events: none;">';
        if (vDocValidDate != '') {
            article += '<span class="DateToSort" style="color: black;"> ' + vDocValidDate + ': </span>';
        }
        article += '<span style="color:#555555;">' + item.DocumentName + '</span>';


        var beforeDaysSort = [];
        var afterDaysSort = [];
        var beforeDays = '';
        var afterDays = '';

        if (item.Reminder1 != null && item.Reminder1 != "" && item.Reminder1 != 0) {
            if (item.Reminder1Condition == 'before') {
                beforeDaysSort.push(item.Reminder1);
            }
            else if (item.Reminder1Condition == 'after') {
                afterDaysSort.push(item.Reminder1);
            }
        }
        if (item.Reminder2 != null && item.Reminder2 != "" && item.Reminder2 != 0) {
            if (item.Reminder2Condition == 'before') {
                beforeDaysSort.push(item.Reminder2);
            }
            else if (item.Reminder2Condition == 'after') {
                afterDaysSort.push(item.Reminder2);
            }
        }
        if (item.Reminder3 != null && item.Reminder3 != "" && item.Reminder3 != 0) {
            if (item.Reminder3Condition == 'before') {
                beforeDaysSort.push(item.Reminder3);
            }
            else if (item.Reminder3Condition == 'after') {
                afterDaysSort.push(item.Reminder3);
            }
        }

        beforeDays = beforeDaysSort.sort(function (a, b) { return a - b });
        afterDays = afterDaysSort.sort(function (a, b) { return a - b });

        if (beforeDays != '' || afterDays != '') {
            article += '<span class="sub-text-head"> (Reminders ' + (beforeDays != '' ? beforeDays + ' day(s) before' : '') + (afterDays != '' ? (beforeDays != '' ? ' & ' + afterDays + ' day(s) after )' : afterDays + ' day(s) after ) ') : ')') + '</span>';
        }
        article += '</li>';
        completeArticle += article;
    }
    return completeArticle;

}

function CheckDocumentExistwithoutparameter() {
    var DuplicateDocumentID = false;
    var vDocURL = "";
    var folderurltobind = "";

    if ($('#lblFolderUrl').text().slice(-1) != "/") {
        folderurltobind = $('#lblFolderUrl').text() + "/";
    } else {
        folderurltobind = $('#lblFolderUrl').text();
    }
    if ($("#ddlDocumentTemplate").is(":visible")) {
        if ($("#txtNewFolderName").val() != "") {
            var newfolderadd = encodeURIComponent($("#txtNewFolderName").val().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
            if (newfolderadd.trim() != "") {

                vDocURL = localStorage.SPHostUrl + folderurltobind + newfolderadd.trim() + "/" + encodeURIComponent($('#txtDocumentNameCreate').val()) + ".docx";
            } else {
                vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent($('#txtDocumentNameCreate').val()) + ".docx";
            }
        }
        else {
            vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent($('#txtDocumentNameCreate').val()) + ".docx";
        }
    }
    else {
        //manoj
        var DocumentName = $('#docContract')[0].files[0].name;
        if (document.getElementById("fileUploadOCR").style.display != "none") {
            if ($("#fileUploadOCR").is(':checked')) {
                DocumentName = $('#docContract')[0].files[0].name.split('.').slice(0, -1).join(".") + ".pdf";
            }
        }
        //manoj
        if ($("#txtNewFolderName").val() != "") {
            var newfolderadd = encodeURIComponent($("#txtNewFolderName").val().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
            if (newfolderadd.trim() != "") {
                vDocURL = localStorage.SPHostUrl + folderurltobind + newfolderadd.trim() + "/" + encodeURIComponent(DocumentName);
            } else {
                vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent(DocumentName);
            }
        }
        else {
            vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent(DocumentName);
        }
    }
    folderurltobind = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + getParameterByName("ContractID") + '&docurl=' + vDocURL,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (folder) {
            if (folder != null) {
                DuplicateDocumentID = folder.RowKey;
            } else {
                DuplicateDocumentID = "False";
            }
        },
        error:
            function (data) {
                DuplicateDocumentID = "False";
            }
    });
    return DuplicateDocumentID;
}

function newDocument(DocumentID) {
    var tblContentControls = null;
    var formData = new FormData();
    var opmlFile = $('#docContract')[0];
    var vDocumentType = "";

    if (opmlFile.files.length > 0) {
        formData.append("opmlFile", opmlFile.files[0]);
    }

    if (overwritedocument) { //if overwrite is yes
        formData.append("OverWrite", "Yes");
        formData.append("DuplicateDocId", DuplicateDocId);
    }

    var contractformappend = "DocumentID=" + DocumentID;
    contractformappend += "&~DocDescription=" + $("#txtDescriptionDoc").val();

    var arrAuthorCreate = $("#ddlAuthorCreate").val();

    var vAuthorCreate = '';
    $(arrAuthorCreate).each(function (i, item) {
        if (vAuthorCreate == '') {
            vAuthorCreate = item;
        }
        else {
            vAuthorCreate += "; " + item;
        }
    });
    contractformappend += "&~DocumentAuthor=" + vAuthorCreate;
    contractformappend += "&~DocumentLanguage=" + $("#txtDocumentLanguageCreate").val();
    contractformappend += "&~HardCopyPhysicalLocation=" + $("#txtHardCopyPhysicalLocationCreate").val();
    contractformappend += "&~ContractID=" + getParameterByName('ContractID');
    contractformappend += "&~ContractTitle=" + $("#lblCTitleDoc").text();

    if ($("#ddlDocumentTypeCreate").val() != "0") {
        vDocumentType = $("#ddlDocumentTypeCreate").val();
    }
    contractformappend += "&~DocumentType=" + vDocumentType;
    contractformappend += "&~Counterparty=" + $("#lblCounterparty").text();
    if ($("#trTemplate").css('display') == 'none') {
        contractformappend += "&~DocumentName=";
        if ($('#fileUploadOCR').prop('checked') == true) {
            contractformappend += "&~MakeReadable=Yes";
        } else {
            contractformappend += "&~MakeReadable=No";
        }
    }
    else {
        contractformappend += "&~TemplateName=" + $("#ddlDocumentTemplate").find('option:selected').text();
        contractformappend += "&~DocumentName=" + $("#txtDocumentNameCreate").val();
        contractformappend += "&~MakeReadable=No";
        tblContentControls = $("#formtblContentControls *").serializeArray();

        //$.ajax({
        //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/automation',
        //    type: 'POST',
        //    dataType: 'json',
        //    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        //    async: false,
        //    data: {
        //        TemplateName: "",
        //        DocumentName: $("#txtDocumentNameCreate").val(),
        //        ContractID: getParameterByName('ContractID'),
        //        Status: "",
        //        SendBy: "",
        //        RemindLater: "",
        //    },
        //    cache: false,
        //    success: function (rowKey) {
        //        formData.append("DocumentInAutomation", rowKey);
        //        if (!$.isEmptyObject(arrRelatedContracts)) {
        //            CreateRelatedContracttemplate();
        //        }
        //    },
        //    error: function (rowKey) {

        //    }
        //});
    }
    if ($("input:radio[name=IsFinalized]:checked").val() == "Yes") {
        contractformappend += "&~IsFinalized=Yes";
    } else {
        contractformappend += "&~IsFinalized=No";
    }

    if ($("input:radio[name=IsStandard]:checked").val() == "Yes") {
        contractformappend += "&~IsStandard=Yes";
    } else {
        contractformappend += "&~IsStandard=No";
    }
    //@*enh 528*@
    //enh 528
    if ($("input:radio[name=IsPrimary]:checked").val() == "Yes") {
        contractformappend += "&~IsPrimary=Yes";
    } else {
        contractformappend += "&~IsPrimary=No";
    }
    //enh 528
    if ($("#ddlDocumentStatus").val() != "0") {
        contractformappend += "&~DocumentStatus=" + $("#ddlDocumentStatus").val();
    }
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "14" && n.Status == "ON");
    });
    if (vDocLibFeat.length > 0) {
        contractformappend += "&~DocumentLibraryName=" + $('#hdContAreaDocLibName').val();
    }
    else {
        contractformappend += "&~DocumentLibraryName=Contract Documents";
    }
    var contractiledetails = $("#lblCTitleDoc").text();
    contractformappend += "&~LocationURL=" + $('#lblFolderUrl').text();
    if ($("#ddlContracts").find('option:selected').val() != "0") {
        //if ($('#txtNewFolderName').val() != "") {

        //}
    }
    else {
        contractformappend += "&~FolderName=";
    }
    contractformappend += "&~NewFolderName=" + $('#txtNewFolderName').val().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();

    if ($("input:radio[name=rad_Copy]:checked").val() == "Library") {
        contractformappend += "&~DocumentLocation=Office 365 Document Library";
    } else {
        contractformappend += "&~DocumentLocation=Office 365 Document Library & eContracts Cloud";
    }
    contractformappend += "&~CreatedBy=" + localStorage.UserName;
    contractformappend += "&~ModifiedBy=" + localStorage.UserName;
    if (tblContentControls != null) {
        var tblContentControlslength = tblContentControls.length;
        for (var i = 0; i < tblContentControlslength; i++) {
            var checkingvar = "&~" + tblContentControls[i].name + "=";
            if (contractformappend.indexOf(checkingvar) > 0) {
                var nextvar = contractformappend.substring(contractformappend.indexOf(checkingvar) + 1, contractformappend.length);
                var valuevar = contractformappend.substring(contractformappend.indexOf(checkingvar), nextvar.indexOf("&~") + contractformappend.indexOf(checkingvar) + 1);
                contractformappend = contractformappend.replace(valuevar, "&~" + tblContentControls[i].name + "=" + tblContentControls[i].value)
                nextvar = "";
                valuevar = "";
                checkingvar = "";
            }
            else {
                contractformappend += "&~" + tblContentControls[i].name + "=" + tblContentControls[i].value;
            }
        }
    }
    formData.append("AccountID", localStorage.AccountID);
    var splitcontractformappend = contractformappend.split('&~');

    $(splitcontractformappend).each(function (i, item) {
        var splititem = item.split('=');
        formData.append(splititem[0].trim(), splititem[1]);
    });
    splitcontractformappend = [];
    contractformappend = '';
    if ($("#txtBusinessArea").val() != "") {
        formData.append("BusinessArea", $("#txtBusinessArea").val().trim());
    } else {
        formData.append("BusinessArea", $("#lblBusinessArea").text().trim());
    }
    formData.append("BusinessAreaPath", $("#lblBusinessAreaPath").text());
    formData.append("ContractArea", $("#lblContractArea").text().trim());
    formData.append("ContractAreaAdministrators", $("#lblContractAreaAdmins").text().trim());
    formData.append("BusinessAreaOwners", $("#lblBusinessAreaOwners").text().trim());

    formData.append("ValidFrom", $.datepicker.formatDate('mm/dd/yy', $("#dtValidFrom").datepicker('getDate')));
    formData.append("ValidTill", $.datepicker.formatDate('mm/dd/yy', $("#dtValidTill").datepicker('getDate')));
    formData.append("Reminder1", $("#txtReminder1New").val());
    formData.append("Reminder1Condition", $("#ddlReminder1New").find('option:selected').text());
    formData.append("Reminder2", $("#txtReminder2New").val());
    formData.append("Reminder2Condition", $("#ddlReminder2New").find('option:selected').text());
    formData.append("Reminder3", $("#txtReminder3New").val());
    formData.append("Reminder3Condition", $("#ddlReminder3New").find('option:selected').text());
    formData.append("CreatingFromContractForm", "No");

    var arrSendReminderTo = $("#ddlDocRemindTo").val();

    var vSendReminderTo = '';
    $(arrSendReminderTo).each(function (i, item) {
        if (vSendReminderTo == '') {
            vSendReminderTo = item;
        }
        else {
            vSendReminderTo += "; " + item;
        }
    });
    formData.append("SendReminderTo", vSendReminderTo);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/uploaddocument',
        type: 'POST',
        data: formData,
        cache: false,
        contentType: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken
        },
        processData: false,
        async: true,
        success: function (data) {
            //if ($("#ddlDocumentTemplate").attr("class").indexOf('validelement') >= 0) {
            //    setTimeout(funcMessageAfterDocGeneration, 10000);
            //    overwritedocument = false;
            //    DuplicateDocId = false;
            //}
            //else {
            $("#uploaddocumentprocess").css('display', 'none');
            $('.ui-button-green-text').parent().removeAttr('disabled');

            //manoj
            if (data.IsOCRDoc == "Yes") {
                data.DocumentName = data.DocumentName.split('.').slice(0, -1).join('.') + ".pdf";
            }
            //manoj

            var vURL = encodeURI(data.DocumentUrl);
            var ext = data.DocumentName.split('.').pop();
            if ($("#ulDocument").html() == "No items found.") {
                $("#ulDocument").empty();
            }
            if (overwritedocument) { //if overwrite is yes
                var ulDocumentlist = $("#ulDocument li");
                if (ulDocumentlist.length > 0) {
                    var documentexist = $(ulDocumentlist).find("input[id=" + data.RowKey + "]");
                    if (documentexist.length > 0) {
                        $(ulDocumentlist).find("input[id=" + data.RowKey + "]").parent().remove();
                    }
                }
                overwritedocument = false;
                DuplicateDocId = false;
            } else {
                var documentCount = Number($("#lblDocumentsCount").html()) + 1;
                $("#lblDocumentsCount").text(documentCount);
            }
            if (documentview == null || documentview == "" || documentview == 'folder') {
                if (data.CreationMode == "Template") {
                    $("#ulDocument").prepend('<li class=" margin-bottom-5" active=' + data.IsActive + '><label id="FolderCreationMode" style="display:none;"></label><label id="DocumentID" style="display:none;">' + data.RowKey + '</label><label id="SentForSign" style="display:none;"></label><label id="DocumentName" style="display:none;">' + data.DocumentName + '</label><label id="ShareWorkflow" style="display:none;"></label><label id="ReviewWorkflow" style="display:none;"></label><label id="BusinessArea" style="display:none;"></label><label id="IsFinalized" style="display:none;">No</label><label id="IsPrimaryDoc" style="display:none;">No</label>  <input type="checkbox" id="' + data.RowKey + '" name="MultipleDocuments" class="Contribute" style="visibility:hidden;" onclick="checkMultipleDocuments(this);" value="' + data.RowKey + '"><b title="New" style="cursor:pointer" id="' + data.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b><dd class="file-icon ' + ext + '"></dd><a href="javascript:void(0);" onclick="ViewDocument(\'' + vURL + '\')"  title="' + data.DocumentName + '" style="pointer-events: none;">' + data.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New"><span class="sub-text"> few seconds ago</span>&nbsp;</li>');//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuDocumentFinal showitem margin-left-5">
                } else {
                    $("#ulDocument").prepend('<li class=" margin-bottom-5" active=' + data.IsActive + '><label id="FolderCreationMode" style="display:none;"></label><label id="DocumentID" style="display:none;">' + data.RowKey + '</label><label id="SentForSign" style="display:none;"></label><label id="DocumentName" style="display:none;">' + data.DocumentName + '</label><label id="ShareWorkflow" style="display:none;"></label><label id="ReviewWorkflow" style="display:none;"></label><label id="BusinessArea" style="display:none;"></label><label id="IsFinalized" style="display:none;">No</label><label id="IsPrimaryDoc" style="display:none;">No</label>  <input type="checkbox" id="' + data.RowKey + '" name="MultipleDocuments" class="Contribute" style="visibility:hidden;" onclick="checkMultipleDocuments(this);" value="' + data.RowKey + '"><b title="New" style="cursor:pointer" id="' + data.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b><dd class="file-icon ' + ext + '"></dd><a href="javascript:void(0);" onclick="ViewDocument(\'' + vURL + '\')"  title="' + data.DocumentName + '">' + data.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New"><span class="sub-text"> few seconds ago</span>&nbsp;</li>');//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuDocumentFinal showitem margin-left-5">
                }
            } else {
                if (data.CreationMode == "Template") {
                    $("#ulDocument").prepend('<li class=" margin-bottom-5" active=' + data.IsActive + '><label id="FolderCreationMode" style="display:none;"></label><label id="DocumentID" style="display:none;">' + data.RowKey + '</label><label id="SentForSign" style="display:none;"></label><label id="DocumentName" style="display:none;">' + data.DocumentName + '</label><label id="ShareWorkflow" style="display:none;"></label><label id="ReviewWorkflow" style="display:none;"></label><label id="BusinessArea" style="display:none;"></label><label id="IsFinalized" style="display:none;">No</label><label id="IsPrimaryDoc" style="display:none;">No</label>  <input type="checkbox" id="' + data.RowKey + '" name="MultipleDocuments" class="Contribute" style="visibility:hidden;" onclick="checkMultipleDocuments(this);" value="' + data.RowKey + '"><b title="New" style="cursor:pointer" id="' + data.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b><dd class="file-icon ' + ext + '"></dd><a href="javascript:void(0);" onclick="ViewDocument(\'' + vURL + '\')"  title="' + data.DocumentName + '" style="pointer-events: none;">' + data.DocumentName + '</a><span class="sub-text"> few seconds ago</span>&nbsp;<div class="documenturlclass" style="margin-left:0px"><label title="' + data.DocumentUrl + '"><img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;">' + data.DocumentUrl + '</label></div></li>');//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuDocumentFinal showitem margin-left-5">
                } else {
                    $("#ulDocument").prepend('<li class=" margin-bottom-5" active=' + data.IsActive + '><label id="FolderCreationMode" style="display:none;"></label><label id="DocumentID" style="display:none;">' + data.RowKey + '</label><label id="SentForSign" style="display:none;"></label><label id="DocumentName" style="display:none;">' + data.DocumentName + '</label><label id="ShareWorkflow" style="display:none;"></label><label id="ReviewWorkflow" style="display:none;"></label><label id="BusinessArea" style="display:none;"></label><label id="IsFinalized" style="display:none;">No</label><label id="IsPrimaryDoc" style="display:none;">No</label>  <input type="checkbox" id="' + data.RowKey + '" name="MultipleDocuments" class="Contribute" style="visibility:hidden;" onclick="checkMultipleDocuments(this);" value="' + data.RowKey + '"><b title="New" style="cursor:pointer" id="' + data.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b><dd class="file-icon ' + ext + '"></dd><a href="javascript:void(0);" onclick="ViewDocument(\'' + vURL + '\')"  title="' + data.DocumentName + '">' + data.DocumentName + '</a><span class="sub-text"> few seconds ago</span>&nbsp;<div class="documenturlclass" style="margin-left:0px"><label title="' + data.DocumentUrl + '"><img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;">' + data.DocumentUrl + '</label></div></li>');//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuDocumentFinal showitem margin-left-5">
                }
            }
            $("#general-notification").css("visibility", "visible");
            $("#general-notification").html("Document uploaded successfully. All the options to perform action on document will be enabled once it is ready for use.");
            //setTimeout(function () { $("#general-notification").css("visibility", "hidden"); }, 10000);
            clearTimeout(cleartimevalue);
            cleartimevalue = setTimeout(refreshdocuemnt, 10000);
            //}
            afterPost();
            icontractdetails();
        },
        error: function (data) {
        },
        complete: function (data) {
            $("#uploaddocumentprocess").css('display', 'none');
        }

    });
}

function refreshdocuemnt() {
    if (documentview == null || documentview == "" || documentview == 'folder') {
        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
            var selectedfoldervalue = $('#showAll').find("a");
            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
            var parentdocumentdetails = {
                id: idvalueselected, text: textvalueselected
            };
            showfolderdocuments(parentdocumentdetails);
        }
        else {
            BindDocument(vContractID);
        }
    } else {
        DisplayDocument(documentview);
    }
}

function afterPost() {
    $('.ui-button-green-text').parent().removeAttr('disabled');
    $("#addEditDocument").dialog("close");
    $("#ddlDocumentTypeCreate").val("0");
    //$("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
    $("#ddlDocumentTemplate").val("0");
    $("#txtDocumentNameCreate").val("");
    if ($('#txtNewFolderName').val() != "") {
        if ($("input:radio[name=IsFinalized]:checked").val() == "Yes") {
            $("#hdnFinalizedDocumentsUrl").text($('#lblFolderUrl').text() + $('#txtNewFolderName').val().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
        } else {
            $("#hdnDraftDocumentsUrl").text($('#lblFolderUrl').text() + $('#txtNewFolderName').val().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
        }
        var checkingtest = $('#lblFolderUrl').text();
        var spiltcheckingtest = checkingtest.split('/');
        if (spiltcheckingtest.length < 4) {
            $("#hdnContractDocumentsUrl").text(checkingtest + $('#txtNewFolderName').val().replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim() + "/");
            $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
        }
    }
    $('#txtFolderName').val("");
    $('#txtNewFolderName').val("");
    $('#dtValidFrom').val("");
    $('#dtValidTill').val("");
    $('#txtReminder1New').val("");
    $('#txtReminder2New').val("");
    $('#txtReminder3New').val("");
    $("#ddlReminder1New").find('option[value="before"]').prop("selected", true);
    $("#ddlReminder2New").find('option[value="before"]').prop("selected", true);
    $("#ddlReminder3New").find('option[value="before"]').prop("selected", true);
}

function contextMenuWorkFolder(action, el, pos) {

    switch (action) {
        case "open":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var LinkURL = $("#" + documentID)[0];
                showfolderdocuments(LinkURL);
                break;
            }
        case "delete":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var FolderCreationMode = $(el).find("#FolderCreationMode").text();
                swal({
                    title: '',
                    text: "Are you sure you want to <span style=\"font-weight:700\">delete</span> the folder <span style=\"font-weight:700\">'" + documentName + "'</span>? All its documents will be deleted.",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                 function (confirmed) {
                     if (confirmed) {
                         $("#loadingPage").fadeIn();
                         var documentID = $(el).find("#DocumentID").text();
                         var contractIDToPass = getParameterByName("ContractID");
                         $.ajax({
                             url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folder?contractid=' + contractIDToPass + '&folderid=' + documentID,
                             type: 'DELETE',
                             dataType: 'json',
                             "Content-Type": "application/json",
                             headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                             cache: false,
                             success: function (data) {
                                 //manoj
                                 var FolderID = $(el).find("#DocumentID").text();
                                 var ulDocumentlist = $("#ulDocument li");
                                 if (ulDocumentlist.length > 0) {
                                     var documentexist = $(ulDocumentlist).find("a[id=" + FolderID + "]");
                                     if (documentexist.length > 0) {
                                         $(ulDocumentlist).find("a[id=" + FolderID + "]").parent().remove();
                                     }
                                 }
                                 ulDocumentlist = $("#ulDocument li");
                                 if (ulDocumentlist.length == 0) {
                                     $("#ulDocument").html('No items found.');
                                 }
                                 //if (documentview == null || documentview == "" || documentview == 'folder') {
                                 //    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                 //        var selectedfoldervalue = $('#showAll').find("a");
                                 //        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                 //        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                 //        var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                 //        showfolderdocuments(parentdocumentdetails);
                                 //    }
                                 //    else {
                                 //        BindDocument(vContractID);
                                 //    }
                                 //} else {
                                 //    DisplayDocument(documentview);
                                 //}
                                 //pendingStarted = false;
                                 //GetContractPendingAction(true, "BindPeoples");
                                 //$("#hdnFolderDocumentView").text('');
                                 //$("#hdnShowAllTextValue").html('');
                                 //PrvFolderselection = '';
                                 ////Bind primary and pined document based on new feature
                                 //if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                 //    CreateDocumentListPinView(vContractID);
                                 //}
                                 ////manoj
                                 //if (typeof FolderCreationMode != "undefined" && FolderCreationMode != null && FolderCreationMode != "") {
                                 //    if (FolderCreationMode.trim() == "Amendment") {
                                 //        if (contractItem.ContractDocumentsUrl == "") {
                                 //            $('#lblFolderUrlAmend').text("/" + $('#hdContAreaDocLibName').val() + "/" + contractItem.ContractTitle.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim() + "/");
                                 //            $('#txtNewFolderNameAmend').val("Amendments");
                                 //        } else {
                                 //            $('#lblFolderUrlAmend').text(((contractItem.ContractDocumentsUrl.charAt(contractItem.ContractDocumentsUrl.length - 1)) != "/") ? contractItem.ContractDocumentsUrl + "/" : contractItem.ContractDocumentsUrl);
                                 //            //if ((contractItem.ContractDocumentsUrl.charAt(contractItem.ContractDocumentsUrl.length - 1)) != "/") {
                                 //            //    $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl + "/");
                                 //            //} else {
                                 //            //    $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl);
                                 //            //}
                                 //            $('#txtNewFolderNameAmend').val("Amendments");
                                 //        }
                                 //        $('#txtNewFolderNameAmend').css('display', '');
                                 //        $('#txtNewFolderNameAmend').addClass('validelement');
                                 //    }
                                 //}
                                 $("#ddlDocumentList option[value='" + documentID + "']").remove();
                                 //$("#ddlDocumentList").trigger('chosen:updated');
                                 $("#loadingPage").fadeOut();
                             },
                             error: function () {
                                 $("#loadingPage").fadeOut();
                             }
                         });
                     }
                     return;
                 });
                break;
            }
    }
}

function contextMenuAmendmentDocument(action, el, pos) {

    switch (action) {
        case "view":
            {
                var amendmentID = $(el).find("#AmendmentID").text();
                ViewAmendment(amendmentID);
                break;
            }
        case "replace":
            {
                ClearReplaceDocFrom();
                var documentID = $(el).find("#DocumentID").text();
                var documentName = $(el).find("#DocumentName").text();
                $("#txtdocumentToReplaceName").val(documentName.substring(0, documentName.lastIndexOf('.')));
                $('#lblDocumentExtension').val(documentName.split('.').pop());
                $("#lblReplaceTemplateDescription").text("");
                //addbuttonclick = true;
                $('#hdnDocumentID').val(documentID);
                $("#trTop").css('display', 'none');
                $("#divReplaceDocument").dialog("option", "title", "Replace Document");
                $("#divReplaceDocument").dialog("open");
                break;
            }
        case "delete":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + documentName + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                 type: 'DELETE',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     //manoj                         
                     var ulDocumentlist = $("#ulDocument li");
                     if (ulDocumentlist.length > 0) {
                         var documentexist = $(ulDocumentlist).find("input[id=" + documentID + "]");
                         if (documentexist.length > 0) {
                             $(ulDocumentlist).find("input[id=" + documentID + "]").parent().remove();

                         }
                     }

                     ulDocumentlist = $("#ulPinDocument li");
                     if (ulDocumentlist.length > 0) {
                         var documentexist = $(ulDocumentlist).find("b[id=" + documentID + "]");
                         if (documentexist.length > 0) {
                             $(ulDocumentlist).find("b[id=" + documentID + "]").parent().remove();
                             $("#hdnPinDocumentCount").text("No");
                         }
                     }

                     ulDocumentlist = $("#ulPinDocument li");
                     if (ulDocumentlist.length == 0) {
                         $("#ulPinDocument").html('No items found.');
                     }

                     ulDocumentlist = $("#ulDocument li");
                     if (ulDocumentlist.length == 0) {
                         $("#ulDocument").html('No items found.');
                     }

                     //if (documentview == null || documentview == "" || documentview == 'folder') {
                     //    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                     //        var selectedfoldervalue = $('#showAll').find("a");
                     //        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                     //        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                     //        var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                     //        showfolderdocuments(parentdocumentdetails);
                     //    }
                     //    else {
                     //        BindDocument(vContractID);
                     //    }
                     //} else {
                     //    DisplayDocument(documentview);
                     //}
                     //pendingStarted = false;
                     //GetContractPendingAction(true, "BindPeoples");
                     //$("#hdnFolderDocumentView").text('');
                     //$("#hdnShowAllTextValue").html('');
                     //PrvFolderselection = '';
                     ////Bind primary and pined document based on new feature
                     //if ($("#hdnnewdocumentfeature").text() == "Yes") {
                     //    CreateDocumentListPinView(vContractID);
                     //}
                     //manoj
                     //*Harshitha

                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     //$("#ddlDocumentList").trigger('chosen:updated');
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "remove":
            {
                //manoj
                var ContractLibUrl = "";
                //manoj
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to remove '<span style=\"font-weight:700\">" + documentName + "</span>' from this Contract?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/untag?contractid=' + getParameterByName('ContractID') + '&documentid=' + documentID,
                 type: 'PUT',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                 cache: false,
                 success: function (data) {
                     $("#loadingPage").fadeOut();
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj

                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     $("#ddlDocumentList").trigger('chosen:updated');
                     //*Harshitha
                     BindMilestone();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });


                break;
            }
        case "edit":
            {
                $('#editNewDocument').css("pointer-events", "auto");
                var documentID = $(el).find("#DocumentID").text();
                $("#hdIsPrimaryDoc").val($(el).find("#IsPrimaryDoc").text());
                EditDocumentMetadata(documentID);
                break;
            }
        case "final":
            {
                //Check if document is having any revisions
                //var isrevisionexists = true;
                //var LinkURL = $(el).find("a").attr('href');
                //if (LinkURL == "#") {
                //    LinkURL = $(el).find("a").attr('seqe')
                //}
                //var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                //$.ajax({
                //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + DocumentUrl,
                //    type: 'GET',
                //    dataType: 'json',
                //    async: false,
                //    "Content-Type": "application/json",
                //    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //    cache: false,
                //    success: function (revisiondata) {
                //        if (revisiondata) {
                //            isrevisionexists = true;
                //        }
                //    },
                //    error: function () {

                //    }
                //});
                var CanSend = false;
                var ext = $(el).find("dd").attr("class");
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1)
                        CanSend = true;
                if (CanSend) {
                    swal({
                        title: '',
                        text: "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                 function (confirmed) {
                     if (confirmed) {
                         $("#loadingPage").fadeIn();
                         var entityid = $(el).find("#DocumentID").text();
                         $.ajax({
                             url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                             type: 'PUT',
                             cache: false,
                             contentType: false,
                             headers: {
                                 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                             },
                             processData: false,
                             success: function (document) {
                                 //manoj
                                 $("#loadingPage").fadeOut();
                                 if (documentview == null || documentview == "" || documentview == 'folder') {
                                     if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                         var selectedfoldervalue = $('#showAll').find("a");
                                         var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                         var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                         var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                         showfolderdocuments(parentdocumentdetails);
                                     }
                                     else {
                                         BindDocument(vContractID);
                                     }
                                 } else {
                                     DisplayDocument(documentview);
                                 }
                                 pendingStarted = false;
                                 GetContractPendingAction(true, "BindPeoples");
                                 $("#hdnFolderDocumentView").text('');
                                 $("#hdnShowAllTextValue").html('');
                                 PrvFolderselection = '';
                                 //Bind primary and pined document based on new feature
                                 if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                     CreateDocumentListPinView(vContractID);
                                 }
                                 //manoj      

                             },
                             error: function () {
                                 $("#loadingPage").fadeOut();
                             }
                         });
                     }
                     return;
                 });
                } else {
                    swal({
                        title: '',
                        text: "Do you want to mark this document as Finalized/Ready for Signature?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var entityid = $(el).find("#DocumentID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                                type: 'PUT',
                                cache: false,
                                contentType: false,
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                },
                                processData: false,
                                success: function (document) {
                                    //manoj
                                    $("#loadingPage").fadeOut();
                                    if (documentview == null || documentview == "" || documentview == 'folder') {
                                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                            var selectedfoldervalue = $('#showAll').find("a");
                                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                            showfolderdocuments(parentdocumentdetails);
                                        }
                                        else {
                                            BindDocument(vContractID);
                                        }
                                    } else {
                                        DisplayDocument(documentview);
                                    }
                                    pendingStarted = false;
                                    GetContractPendingAction(true, "BindPeoples");
                                    $("#hdnFolderDocumentView").text('');
                                    $("#hdnShowAllTextValue").html('');
                                    PrvFolderselection = '';
                                    //Bind primary and pined document based on new feature
                                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                        CreateDocumentListPinView(vContractID);
                                    }
                                    //manoj

                                },
                                error: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                }

                break;
            }
        case "download":
            {
                var LinkURL = $(el).find("a").attr('href');
                var SourceUrl = "";
                if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                    LinkURL = $(el).find("a").attr('seqe')
                    if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                        LinkURL = $(el).find("a").attr('data-value');
                    }
                } else {
                    LinkURL = $(el).find("a").attr('data-value');
                }
                location = localStorage.SPHostUrl + "/_layouts/15/download.aspx?SourceUrl=" + LinkURL;
                break;
            }
        case "signature":
            {
                ClearSignatureForm();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (settings) {
                        $("#txtExpIn").val(settings.TaskDuration);
                    },
                    error: function () {

                    }
                });
                var documentName = $(el).find("#DocumentName").text();
                var sentForSign = $(el).find("#SentForSign").text();
                var documentID = $(el).find("#DocumentID").text();
                var isFinalized = $(el).find("#IsFinalized").text();
                var PrimaryDocumentCheck = $(el).find("#IsPrimaryDoc").text();
                var CanSend = false;
                var ext = $(el).find("dd").attr("class");
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1 || ext.indexOf("pdf") > -1)
                        CanSend = true;
                if (CanSend) {
                    if (sentForSign == '') {
                        if (PrimaryDocumentCheck == 'Yes')
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document & Contract Record status based on this Workflow.");
                        else
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document status based on this Workflow.");
                        if (isFinalized != 'Yes') {
                            var finaltext = "Only <span style='font-weight:700'>Finalized/Ready for Signature</span> documents can be sent out for <span style='font-weight:700'>eSignature</span>. Do you want to mark this document as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                            if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1) {
                                finaltext = "Are you sure all edit/ redlines have been accepted and the document is cleaned up. Mark this document as Finalized/Ready for Signature now?";
                            }
                            swal({
                                title: '',
                                text: finaltext,
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes',
                                cancelButtonText: 'No',
                                html: true
                            },
                                  function (confirmed) {
                                      if (confirmed) {
                                          $(el).find("#IsFinalized").text('Yes');
                                          isFinalized = 'Yes';
                                          $.ajax({
                                              url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + documentID,
                                              type: 'PUT',
                                              cache: false,
                                              contentType: false,
                                              headers: {
                                                  'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                              },
                                              processData: false,
                                              success: function (document) {
                                              }
                                          });
                                      }
                                      if (isFinalized == 'Yes') {
                                          $("#hdMarkAsFinal").val("Y");
                                          var LinkURL = $(el).find("a").attr('href');
                                          if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                                              LinkURL = $(el).find("a").attr('seqe')
                                              if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                                                  LinkURL = $(el).find("a").attr('data-value');
                                              }
                                          } else {
                                              LinkURL = $(el).find("a").attr('data-value')
                                          }
                                          $("#hdDocumentID").val(documentID);
                                          $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                          $("#tdDocument").html("<b>" + documentName + "</b>");
                                          getNameAndEmailSignDocument();
                                          $("#sendForSignature").dialog("open");
                                      }
                                      return;
                                  });

                        }
                        else {
                            if (isFinalized == 'Yes') {
                                $("#hdMarkAsFinal").val("Y");
                                var LinkURL = $(el).find("a").attr('href');
                                if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                                    LinkURL = $(el).find("a").attr('seqe')
                                    if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                                        LinkURL = $(el).find("a").attr('data-value');
                                    }
                                } else {
                                    LinkURL = $(el).find("a").attr('data-value')
                                }
                                $("#hdDocumentID").val(documentID);
                                $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                $("#tdDocument").html("<b>" + documentName + "</b>");
                                getNameAndEmailSignDocument();
                                $("#sendForSignature").dialog("open");
                            }
                        }
                    }
                    else {

                        swal("", "This document has already been sent for signature: " + sentForSign);

                    }
                }
                else {
                    swal("", "This document cannot be sent for signature: Only <span style='font-weight:700'>doc,docx</span> and <span style='font-weight:700'>pdf</span> type files can be sent for signature.");
                }
                break;
            }
        case "editO365":
            {
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                    var rawUrl = $(el).find("a").attr('seqe');
                    if (typeof (rawUrl) == "undefined" || rawUrl == "undefined") {
                        rawUrl = $(el).find("a").attr('data-value');
                    }
                    if (typeof rawUrl != 'undefined')
                        viewdocinword(rawUrl);
                    else {
                        LinkURL = $(el).find("a").attr('data-value');
                        Opendocinbrowser(LinkURL);
                        //window.open(LinkURL);
                    }
                } else {
                    LinkURL = $(el).find("a").attr('data-value');
                    Opendocinbrowser(LinkURL);
                    //window.open(LinkURL);
                }
                break;
            }
        case "sharelink":
            {
                //manoj
                var DocumentNameToCheck = $(el).find("#DocumentName").text();
                var DocumentExtFormat = ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx', 'pdf'];
                if (DocumentExtFormat.indexOf(DocumentNameToCheck.split('.').pop()) > -1) {
                    //var documentStatus = $(el).find("b").attr('title');
                    //var shareWorkflow = $(el).find("#ShareWorkflow").text();
                    //if (shareWorkflow == "In Progress") {
                    //    swal("", "Negotiation/External Review is in progress for this document.");
                    //}
                    //else {
                    //if (primarydocchecking == 'Yes')
                    //    $("#lblAutoUpdateStatus").html("Auto update Document & Contract Record status to 'Negotiation Complete' when this Negotiation/External Review is completed.");
                    //else
                    $("#lblAutoUpdateStatusShareDoc").html("Auto update Document status to 'Negotiation Complete' when this External Share is completed.");
                    //Check if document is having any revisions
                    var isrevisionexists = false;
                    var LinkURL = $(el).find("a").attr('href');
                    if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                        LinkURL = $(el).find("a").attr('seqe')
                        if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                            LinkURL = $(el).find("a").attr('data-value');
                        }
                    } else {
                        LinkURL = $(el).find("a").attr('data-value')
                    }
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + LinkURL,
                        type: 'GET',
                        dataType: 'json',
                        async: false,
                        "Content-Type": "application/json",
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        success: function (revisiondata) {
                            if (revisiondata) {
                                isrevisionexists = true;
                            }
                        },
                        error: function () {

                        }
                    });
                    if (isrevisionexists) {
                        swal({
                            title: '',
                            text: "Revisions (comments or track changes) exists inside the document, do you really want to share this as a link?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                         function (confirmed) {
                             if (confirmed) {
                                 $.ajax({
                                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                     type: 'GET',
                                     dataType: 'json',
                                     "Content-Type": "application/json",
                                     headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                     cache: false,
                                     success: function (settings) {
                                         $("#txtShareExpIn").val(settings.TaskDuration);
                                         if ($("#txtShareExpIn").val() != "") {
                                             $("#txtShareExpIn").trigger("onchange");
                                         } else {
                                             $("#lblValidLinkDate").empty();
                                         }
                                     },
                                     error: function () {

                                     }
                                 });
                                 ClearShareForm();
                                 var documentName = $(el).find("#DocumentName").text();
                                 var documentID = $(el).find("#DocumentID").text();
                                 $("#hdDocumentID").val(documentID);
                                 $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                                 $("#tdShareDocument").html("<b>" + documentName + "</b>");
                                 getNameAndEmailShareDocument();
                                 GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                                 //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                                 $("#shareDocument").dialog("open");
                             }
                             return;
                         });
                    } else {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                            type: 'GET',
                            dataType: 'json',
                            "Content-Type": "application/json",
                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                            cache: false,
                            success: function (settings) {
                                $("#txtShareExpIn").val(settings.TaskDuration);
                                if ($("#txtShareExpIn").val() != "") {
                                    $("#txtShareExpIn").trigger("onchange");
                                } else {
                                    $("#lblValidLinkDate").empty();
                                }
                            },
                            error: function () {

                            }
                        });
                        ClearShareForm();
                        var LinkURL = $(el).find("a").attr('href');
                        if (LinkURL == "#" || LinkURL == "javascript:void(0);") {
                            LinkURL = $(el).find("a").attr('seqe')
                            if (typeof (LinkURL) == "undefined" || LinkURL == "undefined") {
                                LinkURL = $(el).find("a").attr('data-value');
                            }
                        } else {
                            LinkURL = $(el).find("a").attr('data-value')
                        }
                        var documentName = $(el).find("#DocumentName").text();
                        var documentID = $(el).find("#DocumentID").text();
                        $("#hdDocumentID").val(documentID);
                        $("#hdDocumentURL").val(decodeURIComponent(LinkURL));
                        $("#tdShareDocument").html("<b>" + documentName + "</b>");
                        getNameAndEmailShareDocument();
                        GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                        //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                        $("#shareDocument").dialog("open");
                    }
                } else {
                    swal("", "This document cannot be Shared: Only<span style='font-weight:700'> doc, xls, ppt, docx, xlsx, pptx, dotx and pdf </span> type files are allowed.");
                }
                //}

                //if (documentStatus != "In Negotiation") {

                //}
                //else {
                //    swal("", "Negotiation/External Review is in progress for this document.");
                //}
                break;
            }
        case "approve":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                $("#txtTodoTitle").val('Approval for ' + documentName.split('.')[0]);
                $("#ddlTodoType option").filter(function (index) { return $(this).text() === "Document Approval"; }).prop('selected', true);
                $("#txtBrowseElement").val(documentName);
                $("#txtBrowseElementID").val(documentID);
                $("#trBrowse").css("display", "");
                $("#browse").css("display", "none");
                $("#tdBrowseElement").html("Documents");
                $('#ddlTodoType').attr('disabled', 'disabled');

                GetValuesAndAutoPopulate("ddlApprovers", "");
                $("#txtDueDate").val("");
                //*Harshitha
                var nicInstance = nicEditors.findEditor('txtNotes');
                nicInstance.setContent('');

                $("#chkNotifyMe").prop('checked', false);
                $("#dvTodo").dialog("open");
                break;
            }
        case "review":
            {
                $(".FL_ApprovalSheetContract").css('display', 'none');
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var reviewWorkflow = $(el).find("#ReviewWorkflow").text();
                if (reviewWorkflow == "In Progress") {
                    //swal("", "Document Review is in progress for this document.");
                    $("#alertText1").html("Document Review is in progress for this document.");
                    $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=' + workflowurltoshowDOCUMENT + '><font color="#44A6D8">View Workflow Details</font></a>');
                    $("#dvAlertDetails1").dialog("open");
                }
                else {
                    $("#loadingPage").fadeIn();
                    if ($("#contractDetailsSummaryConfiguration").css('display') != 'none') {
                        $("#contractDetailsSummaryConfiguration").css('display', 'none');
                    }
                    var businessArea = $("#lblBusinessArea").text();
                    var contractArea = $("#lblContractArea").text();
                    $("#tblStage").empty();
                    $("#ddlRule").empty();
                    if (contractItem.IsFinalized == 'Yes') {
                        $("#liAutoUpdateStatus").css('display', 'none');
                    } else {
                        $("#liAutoUpdateStatus").css('display', '');
                    }
                    $("#txtWorkflowTitle").val('Review for ' + documentName);
                    //manoj
                    $("#txtWorkflowTitle").prop('readonly', false);
                    //manoj
                    $("#lblAutoUpdateStatus").text('Auto update Document status based on this Workflow.');
                    $("#txtDuration").val("");
                    //*Harshitha
                    var nicInstance = nicEditors.findEditor('txtComment');
                    nicInstance.setContent('');

                    $("#hdWorkflowType").val("Document Review");
                    $("#hdWorkflowObjectID").val(documentID);
                    $("#hdWorkflowObjectTitle").val(documentName);
                    GetValuesAndAutoPopulate("ddlWorkflowCC", "");

                    var vWorkflowSettings = [];
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Document Review&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + documentID,
                        type: 'GET',
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        processData: false,
                        success: function (item) {
                            vWorkflowSettings = item.WorkflowSettings;

                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "8" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                vWorkflowRules = item.WorkflowRules;
                            }
                            if (item.WorkflowSettings != null) {
                                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                        $("#spAddStage").css("display", "none");
                                    }
                                }
                                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                if ($("#txtDuration").val() != "") {
                                    $("#txtDuration").trigger("onchange");
                                } else {
                                    $("#lblDurationDate").empty();
                                }
                            }
                            if (vWorkflowRules.length > 0) {
                                $(vWorkflowRules).each(function (i, rule) {
                                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                });
                                var workflowRules = vWorkflowRules[0];
                                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                                if (vWorkflowRules.length == 1) {
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text(workflowRules.RuleName);
                                    $("#ddlRule").attr('disabled', 'disabled');
                                }
                                else {
                                    $("#lblddlRule").text("");
                                    $("#lblddlRule").css("display", "none");
                                    $("#ddlRule").css("display", "");
                                    $("#ddlRule").removeAttr("disabled");
                                }
                                var participantsInXML = workflowRules.ParticipantsInXML;
                                var totalFileCount = 0;
                                if (workflowRules.RuleName == "Default") {
                                    if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                        $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + documentName);
                                    } else {
                                        $("#txtWorkflowTitle").val('Review for ' + documentName);
                                    }
                                }
                                else {
                                    if (typeof workflowRules.WorkflowTitle != 'undefined' && workflowRules.WorkflowTitle != "") {
                                        $("#txtWorkflowTitle").val(workflowRules.WorkflowTitle + ' for ' + documentName);
                                    } else {
                                        $("#txtWorkflowTitle").val('Conditional Review Workflow for ' + documentName);
                                    }
                                }
                                //If the rule is ad-hoc 
                                if (participantsInXML != "") {
                                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                        var StageTitle = $(this).find('StageTitle').text();
                                        var Participants = $(this).find('Participants').text();
                                        var Order = $(this).find('Order').text();
                                        totalFileCount++;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30 wf_approval">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                        if (Order == "Serial")
                                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                        else
                                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4">';
                                        if (totalFileCount > 1)
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                        else
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);
                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0)) {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                }
                                                else {
                                                    $("#ddlOrder" + vasstoid).val("Serial");
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                }
                                            }
                                            else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        });
                                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                        var vParticipantsArr = Participants.split(";");
                                        if (vParticipantsArr.length > 1)
                                            $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                        else
                                            $("#ddlOrder" + totalFileCount).prop('disabled', true);


                                        if (item.WorkflowSettings != null) {
                                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                }
                                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                            }
                                        }
                                    });
                                }
                                else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1) {
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            }
                                            else {
                                                $("#ddlOrder" + vasstoid).val("Serial");
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            }
                                        }
                                        else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    });
                                }
                            }
                            else {
                                if ($("#ddlRule").html() == "") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text("Ad-hoc");
                                }
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);

                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1) {
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        }
                                        else {
                                            $("#ddlOrder" + vasstoid).val("Serial");
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        }
                                    }
                                    else {
                                        $("#ddlOrder" + vasstoid).val("Serial");
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    }
                                });
                            }
                            //ENH492 - Workflow Cycle time Report & default naming of stages.
                            $("#txtStage" + totalFileCount).autocomplete({
                                source: StageName,
                                minLength: 1,
                                focus: function (event, ui) {
                                    return false;
                                },
                                select: function (evn, uidetails) {
                                    $("#txtStage" + totalFileCount).val(uidetails.item.label);

                                }
                            });
                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        },
                        error: function () {
                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                            $("#lblddlRule").css("display", "");
                            $("#ddlRule").css("display", "none");
                            $("#lblddlRule").text("Ad-hoc");
                            if (!workflowAdHoc)
                                $("#ddlRule").attr('disabled', 'disabled');
                            var totalFileCount = 1;
                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                            htmlFormatFile += '<td class="width30 wf_approval">';
                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width46">';
                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top">';
                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width4 padding_top_10px v_align_top">';
                            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';

                            $("#tblStage").append(htmlFormatFile);
                            var $options = $("#ddlApprovers > option").clone();
                            $('#ddlAssignTo' + totalFileCount).append($options);
                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                if ($(this).val() != null) {
                                    if ($(this).val().length > 1) {
                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                    }
                                    else {
                                        $("#ddlOrder" + vasstoid).val("Serial");
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    }
                                }
                                else {
                                    $("#ddlOrder" + vasstoid).val("Serial");
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                }
                            });
                            $("#txtStage" + totalFileCount).autocomplete({
                                source: StageName,
                                minLength: 1,
                                focus: function (event, ui) {
                                    return false;
                                },
                                select: function (evn, uidetails) {
                                    $("#txtStage" + totalFileCount).val(uidetails.item.label);

                                }
                            });
                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        }
                    });
                }
                break;
            }
        case "version": {
            $("#tblVersionHistory").empty();
            $("#loadingPage").fadeIn();
            var documentID = $(el).find("#DocumentID").text();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/' + documentID + '/versions',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'RefreshToken': localStorage.RefreshToken },
                cache: false,
                success: function (data) {
                    var datalenght = data.length;
                    for (var i = datalenght - 1 ; i >= 0; i--) {
                        var item = data[i];
                        var formatModifiedDate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { formatModifiedDate = moment(new Date(item.Modified)).format('MM/DD/YYYY'); }
                        else { formatModifiedDate = moment(new Date(item.Modified)).format(localStorage.AppDateFormat); }

                        var article = "";
                        article += '<tr>';
                        article += '<td>' + item.VersionNo + '</td>';
                        article += '<td>' + item.Size + '</td>';
                        article += '<td>' + formatModifiedDate + '</td>';
                        article += '<td>' + item.ModifiedBy + '</td>';
                        article += '</tr>';
                        $("#tblVersionHistory").append(article);
                    }

                    $("#loadingPage").fadeOut();
                    $("#dvVersionHistory").dialog("open");
                },
                error: function () {
                    $("#loadingPage").fadeOut();
                }
            });
            break;
        }
    }
}

//--------------------------------------Correspondence begins-------------------------------------//

$('#btnNewCorrespondence').click(function () {
    AddCorrespondenceMore();
});

function AddCorrespondenceMore() {
    $("#lblCTitleCorrespondence").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $("#txtCorrespondenceTitle").val("");
    $("#txtCorrespondenceNote").val("");
    $("#docCorrespondence").replaceWith($("#docCorrespondence").val('').clone(true));
    $("#addEditCorrespondence").dialog("option", "title", "New Correspondence");
    $("#addEditCorrespondence").dialog("open");
}

function modalOnOpenCorrespondence(dialog) {
    var isformvalid = false;
    if (requiredValidator('addNewCorrespondence')) {
        $("#loadingPage").fadeIn();
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var formData1 = new FormData();
        var opmlFile = $('#docCorrespondence')[0];
        formData1.append("opmlFile", opmlFile.files[0]);
        formData1.append("AccountID", localStorage.AccountID);
        formData1.append("ContractID", getParameterByName('ContractID'));
        formData1.append("ContractTitle", $("#lblCTitleCorrespondence").text());
        formData1.append("Subject", encodeURIComponent($("#txtCorrespondenceTitle").val()))
        formData1.append("Body", "");
        formData1.append("FromSite", "Yes");
        formData1.append("Comment", $("#txtCorrespondenceNote").val());
        formData1.append("CreatedBy", localStorage.UserName);
        formData1.append("ModifiedBy", localStorage.UserName);
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence',
            type: 'POST',
            data: formData1,
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
            processData: false,
            success: function (person) {
                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#addEditCorrespondence").dialog("close");
                BindCorrespondence(vContractID);
            },
            error: function (person) {
                $("#loadingPage").fadeOut();
            },
            complete: function () {
                $("#loadingPage").fadeOut();
            }
        });
    }
    else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}

function BindCorrespondence(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#ulCorrespondence").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence/Contracts/' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            var count = 0;
            $(contactsJsonPayload).each(function (i, item) {
                count++;

                var article = '';
                if (count <= 5)
                    article = '<li class="margin-bottom-8 WrapText_h2">';
                else
                    article = '<li class="ShowMoreCorrespondence margin-bottom-8 WrapText_h2" style="display:none;">';
                article += '<label id="RowKey" style="display:none;">' + item.RowKey + '</label>';
                article += '<label id="ContractID" style="display:none;">' + item.ContractID + '</label>';
                article += '<label id="ContractTitle" style="display:none;" class="PreserveSpace">' + item.ContractTitle + '</label>';
                article += '<label id="Subject" style="display:none;">' + item.Subject + '</label>';
                article += '<label id="URLLink" style="display:none;">' + item.BodyUrlOrigin + '</label>';
                article += '<a href="javascript:void(0)" onclick="ViewCorrespondenceDetail(\'' + item.RowKey + '\')">' + item.Subject + '</a>';

                article += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuCorrespondence"/>';
                article += '</li>';
                $("#ulCorrespondence").append(article);


            });

            if (count > 5) {
                var more = count - 5;
                $("#dvCorrespondence").html('<a id="ShowMoreCorrespondence" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreCorrespondence()">' + more + ' More Correspondence </a>' +
                                     '<a id="ShowLessCorrespondence" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessCorrespondence()" style="display:none;">Show less</a>');
            }

            $("#lblCorrespondenceCount").text(count);
            if (count == 0) {
                $("#ulCorrespondence").append('No items found.');
            }
            $(".openmenuCorrespondence").contextMenu({ menu: 'dropdownMenuCorrespondence', leftButton: true }, function (action, el, pos) { contextMenuCorrespondence(action, el.parent("li"), pos); });

        },
        error: function (request) {
            $("#lblCorrespondenceCount").text('0');
            $("#ulCorrespondence").append('No items found.');
        }

    });
}

function ShowMoreCorrespondence() {
    $('.ShowMoreCorrespondence').css("display", "");
    $('#ShowMoreCorrespondence').css("display", "none");
    $('#ShowLessCorrespondence').css("display", "");
}

function ShowLessCorrespondence() {
    $('.ShowMoreCorrespondence').css("display", "none");
    $('#ShowMoreCorrespondence').css("display", "");
    $('#ShowLessCorrespondence').css("display", "none");
}

function ViewCorrespondenceDetail(entityid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence?correspondenceid=' + entityid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (item) {
            if (item.FromSite == "Yes") {
                $("#CorresSubject").html(item.Subject);
                $("#CorresComment").html(item.Comment);
                $("#SavedBy").html(item.CreatedBy);
                $("#SavedOn").html(moment(new Date(item.Timestamp)).format('Do MMM'));
                $("#CorrespondenceFile").html('<a class="linkText Manage" href="' + item.BodyUrl + '">' + item.BodyUrl + '</a>');
                $("#trEmailText3").css('display', '');
                $("#trEmailText1").css('display', 'none');
                $("#trEmailText2").css('display', 'none');


                $("#dvCorrespondenceDetails").dialog("option", "title", "Correspondence Details");
                $("#dvCorrespondenceDetails").dialog("open");
            }
            else {
                $("#trEmailText3").css('display', 'none');
                $("#trEmailText1").css('display', '');
                $("#trEmailText2").css('display', '');

                if (item.BodyUrl != null && item.BodyUrl != "") {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/textfromblobfile?fileurl=' + encodeURIComponent(item.BodyUrl),
                        type: 'GET',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        success: function (blobdata) {
                            var div = document.createElement('div');
                            div.innerHTML = blobdata;
                            $("#CorresSubject").html(item.Subject);
                            $("#CorresComment").html(item.Comment);
                            $("#SavedBy").html(item.CreatedBy);
                            $("#SavedOn").html(moment(new Date(item.Timestamp)).format('Do MMM'));
                            var attc = GetTheAttachments(item.BodyUrl, item.Attachments, item.RowKey);
                            if (attc != "")
                                $("#Attachments").html(attc);
                            else
                                $("#Attachments").html("No attachments found.");

                            $('body', $("#CorresBody2")[0].contentWindow.document).html(div.textContent);
                            $($("#CorresBody2")[0].contentWindow.document).find('head').append('<base target="_blank">');
                            $("#dvCorrespondenceDetails").dialog("option", "title", "Correspondence Details");
                            $("#dvCorrespondenceDetails").dialog("open");
                        },
                        error: function (blobdata) {

                        }
                    });
                }
                else {
                    $("#CorresSubject").html(item.Subject);
                    $("#CorresComment").html(item.Comment);
                    $("#SavedBy").html(item.CreatedBy);
                    $("#SavedOn").html(moment(new Date(item.Timestamp)).format('Do MMM'));

                    $('body', $("#CorresBody2")[0].contentWindow.document).html(item.Body)
                    $($("#CorresBody2")[0].contentWindow.document).find('head').append('<base target="_blank">');
                    $("#dvCorrespondenceDetails").dialog("option", "title", "Correspondence Details");
                    $("#dvCorrespondenceDetails").dialog("open");
                }
            }

        },
        error: function (request) {

        }

    });
}

function GetTheAttachments(URI, lsFilenames, CorrespondanceRowKey) {
    var articleattc = '';
    if (lsFilenames != "") {
        var settings = {
            pattern: /\.[0-9a-z]+$/i,
            knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
            WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
        };
        var URIStart = URI.substring(0, URI.lastIndexOf("_"));
        var URIRequire = URIStart + "_" + CorrespondanceRowKey + "_";
        var FilenamesSplit = [];
        if (lsFilenames.split('|').length == 1)
            FilenamesSplit.push(lsFilenames.split('|'));
        else
            FilenamesSplit = lsFilenames.split('|');
        $(FilenamesSplit).each(function (i, item) {
            var vRawURLDoc = '';
            var filen = "";
            if (item instanceof Array)
                filen = item[0];
            else
                filen = item;
            var DocumentUrl = URIRequire + filen;
            vURLDoc = encodeURIComponent(DocumentUrl);
            var ext = vURLDoc.match(settings.pattern);
            var vFileType = '<dd class="file-icon none"></dd>';
            if (ext != null) {
                if (ext.length > 0) { ext = ext[0].slice(1); }
                if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                    vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                }
            }
            var filenameOriginal = "";
            //if (filen.split('_343TQpMcWg_').length > 1) {
            //    filenameOriginal = filen.split('_343TQpMcWg_').pop();
            //} else if (filen.split('_').length > 1) {
            //    filenameOriginal = filen.split('_').pop();
            //}
            //else {
            filenameOriginal = filen;
            //}
            articleattc += vFileType + '<a data-value="' + vURLDoc + '" href="javascript:void(0);" onclick="ViewCorrespondenceDocument(this)">' + filenameOriginal + '</a><br/>';

            //if (vURLDoc.indexOf(".doc") >= 0 || vURLDoc.indexOf(".ppt") >= 0 || vURLDoc.indexOf(".xls") >= 0 || vURLDoc.indexOf(".dotx") >= 0) {
            //articleattc += vFileType + '<a data-value="' + vURLDoc + '" href="javascript:void(0);" onclick="ViewCorrespondenceDocument(this)">' + filen + '</a><br/>';
            //}
            //else {
            //    articleattc += vFileType + '<a href="' + vURLDoc + '" target="_blank">' + filen + '</a><br/>';
            //}
        });

    }
    return articleattc;

}

function ViewCorrespondenceDocument(docurl) {
    if (docurl != '') {
        if (typeof docurl === "string") {
            docurl = decodeURIComponent(docurl);
        }
        else {
            docurl = decodeURIComponent($(docurl).attr('data-value'));
        }
        var srcurl = docurl;
        var IsView = true;
        if (srcurl.indexOf("%") >= 0) {
            var fileName = srcurl.split('/').pop();
            fileName = encodeURIComponent(fileName);
            srcurl = srcurl.substring(0, srcurl.lastIndexOf('/')) + "/" + fileName;
            docurl = srcurl;
            IsView = false;
        }
        if ((docurl.indexOf(".doc") >= 0 || docurl.indexOf(".ppt") >= 0 || docurl.indexOf(".xls") >= 0 || docurl.indexOf(".dotx") >= 0) && IsView) {
            srcurl = "https://view.officeapps.live.com/op/embed.aspx?src=" + docurl + "?" + randomString() + "=" + randomString() + "&wdStartOn=1";
        }
        if (docurl.indexOf(".pdf") >= 0 && IsView) {
            window.open("http://docs.google.com/gview?url=" + srcurl + "?" + randomString() + "=" + randomString(), '_blank');
        } else {
            window.open(srcurl);
        }
    }
}

function contextMenuCorrespondence(action, el, pos) {

    switch (action) {
        case "view":
            {
                var entityid = $(el).find("#RowKey").text();
                ViewCorrespondenceDetail(entityid);
                break;
            }
        case "download":
            {
                var LinkURL = $(el).find("#URLLink").text();
                var arr = LinkURL.split('/');
                var fileName = arr[arr.length - 1];

                var URIStart = fileName.substring(fileName.lastIndexOf("_") + 1);
                newWindow = window.open(LinkURL, URIStart);
                //$.ajax({
                //    url: '/General/DownloadFileFromBlob',
                //    type: 'GET',
                //    data: { fileName: fileName, containerName: "correspondence" },
                //    cache: false,
                //    async: false,
                //    success: function (contractfieldentity) {

                //    },
                //    error: function (data) {

                //    }
                //});
                break;
            }
        case "delete":
            {
                var Subject = $(el).find("#Subject").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + Subject + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
       function (confirmed) {
           if (confirmed) {
               var entityid = $(el).find("#RowKey").text();
               $.ajax({
                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence?correspondenceid=' + entityid,
                   type: 'DELETE',
                   dataType: 'json',
                   headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                   "Content-Type": "application/json",
                   cache: false,
                   success: function (data) {
                       BindCorrespondence();
                   }
               });
           }
           return;
       });

                break;
            }
    }
}
//--------------------------------------Correspondence ends-------------------------------------//

function sortDescending(a, b) {
    var date1 = $(a).find("span.DateToSort").text();
    date1 = date1.replace('(', '');
    date1 = date1.replace(')', '');
    date1 = date1.replace(':', '');
    date1 = date1.replace(/ /g, '');
    date1 = date1.split('/');

    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { date1 = new Date(date1[2], date1[1] - 1, date1[0]); }
    else { date1 = new Date(date1[2], date1[0] - 1, date1[1]); }
    var date2 = $(b).find("span.DateToSort").text();
    date2 = date2.replace('(', '');
    date2 = date2.replace(')', '');
    date2 = date2.replace(':', '');
    date2 = date2.replace(/ /g, '');
    date2 = date2.split('/');

    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { date2 = new Date(date2[2], date2[1] - 1, date2[0]); }
    else { date2 = new Date(date2[2], date2[0] - 1, date2[1]); }
    return date1 > date2 ? 1 : -1;
}

function viewDetailsTerm() {
    contextMenuTerm('view', '', '');
    if (contractItem.ContractTermType == "Renewable")
        GetRenewalHistory();
}

function GetRenewalHistory(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#renewalViewHistoryNew").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + contractid + '/contractrenewalhistory',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#renewalHistory").empty();
            $("#renewalViewHistory").empty();
            $("#tblRenewalHistory").empty();
            //Sridhar
            $("#renewalViewHistoryNew").empty();
            var str = "";
            var strHist = "";
            var commentArr = [];
            $("#ulActivityComment").empty();
            var allTerms = [];
            var endedTerms = $.grep(data, function (itemR, i) {
                return itemR.TermStatus == "Ended"
            })

            var currentTerm = $.grep(data, function (itemR, i) {
                return itemR.TermStatus == "Current"
            })
            var expiredTerms = $.grep(data, function (itemR, i) {
                return itemR.TermStatus == "Expired" && itemR.RenewableTermName != "Initial Term"
            })

            var notStartedTerms = $.grep(data, function (itemR, i) {
                return itemR.TermStatus == "Not Started"
            })

            allTerms = allTerms.concat(endedTerms, currentTerm, expiredTerms, notStartedTerms);
            $(allTerms).each(function (i, item) {
                str += '<tr>';
                if (item.RenewableTermName != null && item.RenewableTermName != "") {
                    str += '<td style="width: 10%;">' + item.RenewableTermName + '</td>';
                }
                else {
                    str += '<td>-</td>';
                }
                if (item.RenewedDate != null) {
                    var fRenewedDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fRenewedDate = moment(new Date(item.RenewedDate)).format('MM/DD/YYYY'); }
                    else { fRenewedDate = moment(new Date(item.RenewedDate)).format(localStorage.AppDateFormat); }
                    str += '<td>' + fRenewedDate + '</td>';
                } else {
                    str += '<td>-</td>';
                }
                if (item.TermEndDate != null) {
                    var fTermEndDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fTermEndDate = moment(new Date(item.TermEndDate)).format('MM/DD/YYYY'); }
                    else { fTermEndDate = moment(new Date(item.TermEndDate)).format(localStorage.AppDateFormat); }
                    str += '<td>' + fTermEndDate + '</td>';
                } else {
                    str += '<td>-</td>';
                }

                if (item.TermStatus != null && item.TermStatus != "") {
                    str += '<td>' + item.TermStatus + '</td>';
                }
                else {
                    str += '<td>-</td>';
                }


                if (item.RenewedOn != null && item.RenewedOn != "") {
                    var fRenewedOn = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fRenewedOn = moment(new Date(item.RenewedOn)).format('MM/DD/YYYY'); }
                    else { fRenewedOn = moment(new Date(item.RenewedOn)).format(localStorage.AppDateFormat); }
                    str += '<td>' + fRenewedOn + '</td>';
                }
                else {
                    str += '<td>-</td>';
                }

                if (item.RenewedBy != null && item.RenewedBy != "") {
                    str += '<td>' + item.RenewedBy + '</td>';
                }
                else {
                    str += '<td>-</td>';
                }

                if (item.RenewalChecklist != null && item.RenewalChecklist != "") {
                    str += '<td title="' + item.RenewalChecklist + '" style="line-height: 20px;"><span style="overflow: hidden;text-overflow: ellipsis;width: 175px;white-space: nowrap;float: left;">' + item.RenewalChecklist + '</span></td>';
                }
                else {
                    str += '<td>-</td>';
                }

                if (item.RenewalNotes != null && item.RenewalNotes != "") {
                    str += '<td title="' + item.RenewalNotes + '" style="line-height: 20px;"><span style="overflow: hidden;text-overflow: ellipsis;width: 175px;white-space: nowrap;float: left;">' + item.RenewalNotes + '</span></td>';
                }
                else {
                    str += '<td>-</td>';
                }

                str += '</tr>';

                if (item.RenewalCommentsXML == "" || item.RenewalCommentsXML == null) {
                }
                else {
                    var commentsxML = decodeURIComponent(item.RenewalCommentsXML);
                    $(commentsxML).find("RenewalComment").each(function () {
                        var dateText = $(this).find("Created").text()

                        var item = {
                            activity: $(this).find('Activity').text(),
                            comment: $(this).find('Comments').text(),
                            sendto: $(this).find('SendTo').text(),
                            created: new Date(dateText)
                            /* other properties*/
                        }
                        /* push object to array*/
                        commentArr.push(item);

                    });
                }

            });

            /* sort data*/
            if (commentArr.length > 0) {
                commentArr.sort(function (a, b) {
                    return a.created < b.created;
                });
                var htmlComment = '';
                $.each(commentArr, function (index, item) {
                    if (index < 3) {
                        htmlComment += '<li><b class="color_lightgrey"><span class="color_dark" style="float: left;width: 9%;">Activity: </span><span style="float: left;width: 88%;">' + item.activity + '</span></b><br><br><b class="color_dark float_left" style="float: left;width: 9%;">Comment: </b><div class="taskcomment"><span style="float: left;width: 88%;"> ' + item.comment + '</span></div></li>';
                    }
                    else {
                        htmlComment += '<li class="moreComments" style="display:none;"><b class="color_lightgrey"><span class="color_dark" style="margin-right: 20px;">Activity: </span><span style="float: left;width: 88%;">' + item.activity + '</span></b><br><br><b class="color_dark float_left" style="float: left;width: 9%;">Comment: </b><div class="taskcomment"><span style="float: left;width: 88%;"> ' + item.comment + '</span></div></li>';

                    }
                });
                if (commentArr.length > 3) {
                    htmlComment += '<li style="border: none;"><a href="javascript:void(0);" onclick="showAllActivities(this)" style="color: #44a6d8;">Show Older</a></li>';
                }

                $("#ulActivityComment").append(htmlComment);
            }
            else {
                $("#ulActivityComment").empty();
                $("#ulActivityComment").append('<li style="border: none;"><b class="color_lightgrey"><span class="color_dark" style="margin-right: 20px;">No Activities found</span></b></li>');
            }
            //$("#renewalHistory").append(str);
            //*Harshitha
            $("#renewalViewHistoryNew").append(str);
            //$("#tblRenewalHistory").append(strHist);
            if (str != "") {
                $("#CurrentTermName").val('Initial Term');
                CurrentTermDetails = "";
            }
            else {
                $("#AddInitialTerm").css("display", "");
                $("#AddRenewalTerm").css("display", "none");
                var len = data.length;
                $(data).each(function (i, item) {
                    str += '<tr>';
                    if (len - 1 == i) {
                        $("#CurrentTermName").val(item.RenewableTermName);
                        CurrentTermDetails = item;
                    }
                    str += '<td>' + item.RenewableTermName + '</td>';

                    if (item.RenewedDate != null) {
                        var fRenewedDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fRenewedDate = moment(new Date(item.RenewedDate)).format('MM/DD/YYYY'); }
                        else { fRenewedDate = moment(new Date(item.RenewedDate)).format(localStorage.AppDateFormat); }
                        if (len - 1 == i)
                            str += '<td  style="width: 20%;" id="CurrentRenewalTermStart">' + fRenewedDate + '</td>';
                        else
                            str += '<td style="width: 20%;">' + fRenewedDate + '</td>';
                    } else {
                        str += '<td style="width: 20%;"></td>';
                    }
                    if (item.TermEndDate != null) {
                        var fTermEndDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fTermEndDate = moment(new Date(item.TermEndDate)).format('MM/DD/YYYY'); }
                        else { fTermEndDate = moment(new Date(item.TermEndDate)).format(localStorage.AppDateFormat); }
                        if (len - 1 == i)
                            str += '<td style="width: 20%;" id="CurrentRenewalTermEnd">' + fRenewedDate + '</td>';
                        else
                            str += '<td style="width: 20%;">' + fTermEndDate + '</td>';
                    } else {
                        str += '<td style="width: 20%;"></td>';
                    }
                    str += '<td style="width: 20%;">' + item.Status + '</td>';
                    str += '<td style="width: 20%;"> <a href="javascript:void(0)" class="linkPickerClear" onclick="GetRenewalEachDetails(' + item.RenewableTermName + ')">View Details</a>';
                    str += '</tr>';
                });
                if (str != '')
                    $("#renewalViewHistoryTerm").append(str);
                else
                    $("#renewalViewHistoryTerm").append('No History found.');

            }
            //$("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                //$("#loadingPage").fadeOut();
                $("#renewalViewHistoryTerm").empty();
                $("#renewalViewHistoryTerm").append('No History found.');
            }
    });
}

function BindCurrencies() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/currencies',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];

                $("#ddlProductCurrency").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlTransactionCurrency").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlContractCurrencypopup").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlCatalogCurrency").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlPriceBreakDownCurrencypopup").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlCatalogCurrencyedit").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                if (item.BaseCurrency == "Yes")
                    $("#hdnBaseCurrency").val(item.Abbreviation);
            }
        }
    });
}

function bindAuthoriseUsers(contractItem) {
    $("#ddlSendUserToRenewalConfirmUsers").empty();
    $("#ddlSendUserToRenewalConfirmUsersCC").empty();
    var article = '';
    var authorisedUsersusers = [];
    if (contractItem.FullControlPermissions != null && contractItem.FullControlPermissions != "") {
        if (contractItem.FullControlPermissions.indexOf(';') > -1) {
            var users = contractItem.FullControlPermissions.split(';');
            $.each(users, function (index, value) {
                authorisedUsersusers.push(value.trim());
            });
        }
        else {
            authorisedUsersusers.push(contractItem.FullControlPermissions);
        }
    }

    if (contractItem.ReadWritePermissions != null && contractItem.ReadWritePermissions != "") {
        if (contractItem.ReadWritePermissions.indexOf(';') > -1) {
            var users = contractItem.ReadWritePermissions.split(';');
            $.each(users, function (index, value) {
                authorisedUsersusers.push(value.trim());
            });
        }
        else {
            authorisedUsersusers.push(contractItem.ReadWritePermissions);
        }
    }
    if (contractItem.BusinessAreaOwners != null && contractItem.BusinessAreaOwners != "") {
        if (contractItem.BusinessAreaOwners.indexOf(';') > -1) {
            var users = contractItem.BusinessAreaOwners.split(';');
            $.each(users, function (index, value) {
                authorisedUsersusers.push(value.trim());
            });
        }
        else {
            authorisedUsersusers.push(contractItem.BusinessAreaOwners);
        }
    }
    if (allUsersList.length == 0) {
        GetUserList();
    }
    var allGlobalContractOwners = $.grep(allUsersList, function (item, i) {
        return item.UserType.indexOf('Global Contract Owner') > -1;
    });
    var allBusinessAreaFullControl = $.grep(allUsersList, function (item, i) {
        return item.BusinessArea.indexOf(contractItem.BusinessArea) > -1;
    });
    var allBusinessAreaReadWrite = $.grep(allUsersList, function (item, i) {
        return item.BusinessAreaContribute.indexOf(contractItem.BusinessArea) > -1;
    });

    authorisedUsersusers.push(localStorage.UserName);

    if (contractItem.ContractManagers != "" && contractItem.ContractManagers != null) {
        if (contractItem.ContractManagers.indexOf(';') > -1) {
            var users = contractItem.ContractManagers.split(';');
            $.each(users, function (index, value) {
                authorisedUsersusers.push(value.trim());
            });
        }
        else {
            authorisedUsersusers.push(contractItem.ContractManagers);
        }
    }
    $.each(allGlobalContractOwners, function (index, value) {
        authorisedUsersusers.push(value.UserName.trim());
    });
    $.each(allBusinessAreaFullControl, function (index, value) {
        authorisedUsersusers.push(value.UserName.trim());
    });
    $.each(allBusinessAreaReadWrite, function (index, value) {
        authorisedUsersusers.push(value.UserName.trim());
    });

    authorisedUsersusers = $.grep(authorisedUsersusers, function (n) { return (n); });

    authorisedUsersusers = authorisedUsersusers.filter(function (elem, index, self) {
        return index == self.indexOf(elem);
    });

    $.each(authorisedUsersusers, function (index, value) {
        article += '<option value="' + value.trim() + '">' + value.trim() + '</option>';
    });
    $("#ddlSendUserToRenewalConfirmUsers").append(article);
    $("#ddlSendUserToRenewalConfirmUsersCC").append(article);
    $("#ddlSendUserToRenewalConfirmUsers").chosen();
    $("#ddlSendUserToRenewalConfirmUsersCC").chosen();
}


// Manage Term
function OpenManageTerm() {
    OpenManageContractTerm(contractItem);
}

function SaveAsTableRow(TermName, isRenew) {
    if (requiredValidator("RenewalTermNew")) {

        var valcheckauth = $(':input[type=radio][name=TermsSingleMultiple]:checked').val();
        var vRenewalChecklist = "";
        if ($("#chkRenewalModificationsNew").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Renewal without any modifications";
            }
            else {
                vRenewalChecklist += "; Renewal without any modifications";
            }
        }
        if ($("#chkRenewalPriceAdjustmentsNew").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Renewal with Price Adjustments (minor)";
            }
            else {
                vRenewalChecklist += "; Renewal with Price Adjustments (minor)";
            }
        }
        if ($("#chkRenewalRepricingNew").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Renewal with Repricing (major)";
            }
            else {
                vRenewalChecklist += "; Renewal with Repricing (major)";
            }
        }
        if ($("#chkRenewalOtherNew").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Other Amendments";
            }
            else {
                vRenewalChecklist += "; Other Amendments";
            }
        }

        if (vRenewalChecklist == "" && isRenew) {
            swal("", "Select Renewal Checklist.");
            return false;
        }

        else {

            var vRenewalNotes = "";
            var vRenewalChecklistAmendments = "";
            var vRenewalNotificationInternal = "";
            var vRenewalNotificationExternal = "";
            vRenewalNotes = $("#txtRenewalNotesNew").val();
            vRenewalChecklistAmendments = "";
            var RenewalNotfInternal = $("#ddlRenewalNotfInternalNew").val();
            $(RenewalNotfInternal).each(function (i, item) {
                if (vRenewalNotificationInternal == '') {
                    vRenewalNotificationInternal = item;
                }
                else {
                    vRenewalNotificationInternal += "; " + item;
                }
            });



            var count = $("#renewalViewHistoryTerm tr").length;
            var vLastRow = $("#renewalViewHistoryTerm tr:not(.termExpired):last").attr('id');

            var totalFileCount = 1;
            if (typeof vLastRow == "undefined") {
                totalFileCount = 1;
            }
            else {
                totalFileCount = parseInt(vLastRow.replace("renewalViewHistoryTerm", ""));
                // totalFileCount += 1;
                totalFileCount = parseInt(totalFileCount) + 1;
            }
            var length = $("#renewalViewHistoryTerm tr").length;
            var TermStartDate = $.datepicker.formatDate('mm/dd/yy', $("#txtRenewStartDate").datepicker('getDate'));
            var TermEndDate = $.datepicker.formatDate('mm/dd/yy', $("#txtRenewEndDate").datepicker('getDate'));
            var TermRenewStatushtml = $("#txtRenewStatus").html();
            var TermRenewStatus = $("#txtRenewStatus").text();
            if (TermRenewStatus == "Current") {
                $("#hdCurrentTermName").val(TermName);
                $("#hdCurrentRenewalTermEnd").val(TermEndDate).trigger('change');
                $("#hdCurrentRenewalTermStart").val(TermStartDate);

            }

            var TermChoice = "";
            var TermDays = "";
            if ($(':input[type=radio][name=rdRenewTermEndDate]:checked').val() == "Term") {
                if (valcheckauth == "No") {
                    TermDays = $("#txtContractTermRenewSetMulti").val();
                    TermChoice = $("#ddlTermPeriodSetMulti").val();
                }
                else {
                    TermDays = $("#ContractTermRenewNew").val();
                    TermChoice = $("#ContractTermRenewChoicesNew").val();
                }
            }


            else {
                TermDays = "";
            }
            var vRenewedBy = '';
            var vRenewedType = '';
            var vStatus = '';
            var vRenewedOn = '';
            var newdate = new Date(TermStartDate);
            if (TermRenewStatus == "Current" || TermRenewStatus == "Ended") {
                vStatus = "Renewed";
                vRenewedBy = localStorage.UserName;
                vRenewedType = "Manual";
                vRenewedOn = $.datepicker.formatDate('mm/dd/yy', new Date(newdate.setDate(newdate.getDate() - 1)));
            }
            else if (TermRenewStatus == "Expired") {
                vStatus = "Expired";
                vRenewedBy = localStorage.UserName;
                vRenewedType = "Manual";
                vRenewedOn = "";
            }
            else {
                vStatus = "";
                vRenewedBy = "";
                vRenewedType = "";
                vRenewedOn = "";
            }
            if (TermName == "Initial Term") {
                vStatus = "";
                vRenewedBy = "";
                vRenewedType = "";
                vRenewedOn = "";
            }
            var vAction = "";
            var str = "";

            if (RenewalAddFlag) {
                if (TermRenewStatus == "Current")
                    vAction = "openmenuRenewalDel";
                else if (TermRenewStatus == "Ended") {
                    vAction = "openmenuRenewalDel";
                }
                else if (TermRenewStatus == "Expired") {
                    vAction = "openmenuRenewalDel";
                }
                else if (TermRenewStatus == "Not Started") {
                    vAction = "openmenuRenewalDel";
                }
                str += '<tr id="renewalViewHistoryTerm' + totalFileCount + '">';
                str += '<td id="RenewableTermName' + totalFileCount + '">' + TermName + '<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu"  class="' + vAction + ' margin-left-5"></td>';
                str += '<td id="RenewedDate' + totalFileCount + '" style="display:none;">' + TermStartDate + '</td>';
                var fRenewedDateDisplay = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    fRenewedDateDisplay = moment(new Date(TermStartDate)).format('MM/DD/YYYY');
                }
                else {
                    fRenewedDateDisplay = moment(new Date(TermStartDate)).format(localStorage.AppDateFormat);
                }
                str += ' <td id="RenewedDateDisplay' + totalFileCount + '" >' + fRenewedDateDisplay + '</td>';
                str += '<td id="TermEndDate' + totalFileCount + '" style="display:none;">' + TermEndDate + '</td>';
                var fTermEndDateDisplay = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                    fTermEndDateDisplay = moment(new Date(TermEndDate)).format('MM/DD/YYYY');
                }
                else {
                    fTermEndDateDisplay = moment(new Date(TermEndDate)).format(localStorage.AppDateFormat);
                }
                str += ' <td id="TermEndDateDisplay' + totalFileCount + '" >' + fTermEndDateDisplay + '</td>';
                str += '<td id="TermStatus' + totalFileCount + '">' + TermRenewStatus + '</td>';
                str += '<td id="RenewalNotes' + totalFileCount + '" style="display:none;">' + vRenewalNotes + '</td>';
                if ($("#hdCurrentRenewalTermEnd").val() != null && typeof ($("#hdCurrentRenewalTermEnd")) != "undefined" && $("#hdCurrentRenewalTermEnd").val() != "") {
                    var nextDate = new Date($("#hdCurrentRenewalTermEnd").val());
                    nextDate = new Date(nextDate.setDate(nextDate.getDate() + 1));
                    if ($.datepicker.formatDate('mm/dd/yy', new Date(TermStartDate)) == $.datepicker.formatDate('mm/dd/yy', nextDate)) {
                        RenewalName = TermName;
                        var html = $("#RenewTerm").html();
                        str += ' <td id="RenewedOnDisplay' + totalFileCount + '">' + html + '</td>';
                        str += ' <td id="RenewedOn' + totalFileCount + '" style="display:none;"></td>';
                    }
                    else {
                        str += ' <td id="RenewedOn' + totalFileCount + '" style="display:none;">' + vRenewedOn + '</td>';
                        var fRenewedDisplay = "";
                        if (vRenewedOn != "") {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                                fRenewedDisplay = moment(new Date(vRenewedOn)).format('MM/DD/YYYY');
                            }
                            else {
                                fRenewedDisplay = moment(new Date(vRenewedOn)).format(localStorage.AppDateFormat);
                            }
                        }
                        str += ' <td id="RenewedOnDisplay' + totalFileCount + '">' + fRenewedDisplay + '</td>';
                    }
                }
                else {
                    str += ' <td id="RenewedOn' + totalFileCount + '" style="display:none;">' + vRenewedOn + '</td>';
                    var fRenewedDisplay = "";
                    if (vRenewedOn != "") {
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                            fRenewedDisplay = moment(new Date(vRenewedOn)).format('MM/DD/YYYY');
                        }
                        else {
                            fRenewedDisplay = moment(new Date(vRenewedOn)).format(localStorage.AppDateFormat);
                        }
                    }
                    str += ' <td id="RenewedOnDisplay' + totalFileCount + '">' + fRenewedDisplay + '</td>';
                }
                str += '<td id="RenewedBy' + totalFileCount + '">' + vRenewedBy + '</td>';
                str += '<td id="RenewalConfirmParticipants' + totalFileCount + '" style="display:none;"></td>';
                str += '<td id="RenewalChecklist' + totalFileCount + '"  style="display:none;">' + vRenewalChecklist + '</td>';
                str += '<td id="Status' + totalFileCount + '" style="display:none;">' + vStatus + '</td>';
                str += '<td id="RenewalNotificationInternal' + totalFileCount + '"  style="display:none;">' + vRenewalNotificationInternal + '</td>';
                str += '<td id="ContractTermEach' + totalFileCount + '"  style="display:none;">' + TermDays + '</td>';
                str += '<td id="RenewalType' + totalFileCount + '"  style="display:none;">' + vRenewedType + '</td>';
                str += '<td id="ContractTermChoicesEach' + totalFileCount + '"  style="display:none;">' + TermChoice + '</td>';
                str += '<td id="CreatedBy' + totalFileCount + '"  style="display:none;">' + localStorage.UserName + '</td>';
                str += '<td id="ModifiedBy' + totalFileCount + '"  style="display:none;">' + localStorage.UserName + '</td>';
                str += '<td id="Created' + totalFileCount + '"  style="display:none;">' + $.datepicker.formatDate('mm/dd/yy', new Date()) + '</td>';
                str += '<td id="Modified' + totalFileCount + '"  style="display:none;">' + $.datepicker.formatDate('mm/dd/yy', new Date()) + '</td>';
                str += '<td id="RenewalCommentsXML' + totalFileCount + '"  style="display:none;"></td>';
                str += '</tr>';
                if (str != "")
                    $("#renewalViewHistoryTerm").append(str);

                if ($(':input[type=radio][name=RenewalConfirmAuto]:checked').val() == "Yes") {
                    $(".ManRenewal").css('display', 'none');
                    $(".autoRenewal").css('display', 'none');
                    // $("#RenewTerm").css('display', '');
                }

                else {
                    $(".ManRenewal").css('display', '');
                    $(".autoRenewal").css('display', '');
                }
            }
            else {
                if (RenewalItemEdit != "") {
                    var indexedit = "1";
                    if (TermRenewStatus == "Current")
                        vAction = "openmenuRenewalExp";
                    else if (TermRenewStatus == "Ended") {
                        vAction = "openmenuRenewalAll";
                    }
                    else if (TermRenewStatus == "Expired") {
                        vAction = "openmenuRenewalAll";
                    }
                    else if (TermRenewStatus == "Not Started") {
                        vAction = "openmenuRenewalDel";
                    }
                    if (RenewalItemEdit != "Initial Term") {
                        var countTerm = TermName.replace("Renewal ", "");
                        indexedit = parseInt(countTerm) + 1;
                    }
                    $('#RenewedDate' + indexedit).text(TermStartDate);
                    var fRenewedDateDisplay = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        fRenewedDateDisplay = moment(new Date(TermStartDate)).format('MM/DD/YYYY');
                    }
                    else {
                        fRenewedDateDisplay = moment(new Date(TermStartDate)).format(localStorage.AppDateFormat);
                    }
                    $('#RenewedDateDisplay' + indexedit).text(fRenewedDateDisplay);
                    $('#TermEndDate' + indexedit).text(TermEndDate);
                    var fTermEndDateDisplay = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                        fTermEndDateDisplay = moment(new Date(TermEndDate)).format('MM/DD/YYYY');
                    }
                    else {
                        fTermEndDateDisplay = moment(new Date(TermEndDate)).format(localStorage.AppDateFormat);
                    }
                    $('#TermEndDateDisplay' + indexedit).text(fTermEndDateDisplay);
                    $('#TermStatus' + indexedit).html(TermRenewStatushtml);
                    $('#Status' + indexedit).text(vStatus);
                    $('#RenewedBy' + indexedit).text(vRenewedBy);
                    $('#RenewalType' + indexedit).text(vRenewedType);

                    $('#RenewalNotes' + indexedit).text(vRenewalNotes);
                    $('#RenewalChecklist' + indexedit).text(vRenewalChecklist);
                    $('#RenewalNotificationInternal' + indexedit).text(vRenewalNotificationInternal);
                    $('#ContractTermEach' + indexedit).text(TermDays);
                    $('#ContractTermChoicesEach' + indexedit).text(TermChoice);
                    $('#Modified' + indexedit).text($.datepicker.formatDate('mm/dd/yy', new Date()));

                    $('#ModifiedBy' + indexedit).text(localStorage.UserName);
                }
            }


            $(".openmenuRenewalAll").contextMenu({
                menu: 'menuRenewalAll', leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("td").parent("tr"), pos);
            });
            $(".openmenuRenewalDel").contextMenu({
                menu: 'menuRenewalDel', leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("td").parent("tr"), pos);
            });

            $(".openmenuRenewalExp").contextMenu({
                menu: 'menuRenewalExp', leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("b").parent("td").parent("tr"), pos);
            });
            $(".openmenuRenewalCur").contextMenu({
                menu: 'menuRenewalCur', leftButton: true
            }, function (action, el, pos) {
                contextMenuRenewal(action, el.parent("b").parent("td").parent("tr"), pos);
            });



        }
        if (valcheckauth == "No") {
            AddRenewalTerm(true);
        }
    }
    return true;
}

function addRenewalComment(TermName, isMultiple) {
    var user = localStorage.UserName;
    var vtime = moment(new Date()).format('MMMM Do YYYY, h:mm A');
    var existRenewalCommentsXML = '';
    if (!isMultiple) {
        if (TermName != "Initial Term") {
            var digit = parseInt(TermName.replace("Renewal", "")) + 1;
            existRenewalCommentsXML = $("#RenewalCommentsXML" + digit).html();
        }

        var existingXML = '';
        existingXML += '<RenewalComments>';
        if (existRenewalCommentsXML != null && existRenewalCommentsXML != '') {
            $(existRenewalCommentsXML).find('RenewalComment').each(function () {
                var activity = $(this).find('Activity').text();
                var comment = $(this).find('Comments').text();
                var sendton = $(this).find('SendTo').text();
                var created = $(this).find('Created').text();
                existingXML += '<RenewalComment>';
                existingXML += '<Activity>';
                existingXML += activity;
                existingXML += '</Activity>';

                existingXML += '<Comments>';
                existingXML += comment;
                existingXML += '</Comments>';

                existingXML += '<SendTo>';
                existingXML += sendton;
                existingXML += '</SendTo>';

                existingXML += '<Created>';
                existingXML += created;
                existingXML += '</Created>';
                existingXML += '</RenewalComment>';

            });
        }
        existingXML += '<RenewalComment>';
        existingXML += '<Activity>';
        if (!isRenewTermClick) {
            if (RenewalAddFlag) {
                if (TermName == "Initial Term") {
                    existingXML += user + ' has setup the terms and ' + ' added ' + TermName + ' on ' + vtime;
                }
                else {
                    existingXML += user + ' has added ' + TermName + ' on ' + vtime;
                }
            }
            else {
                existingXML += user + ' has updated ' + TermName + ' on ' + vtime;
            }
        }
        else {
            existingXML += user + ' has renewed the term ' + TermName + ' on ' + vtime;
        }
        existingXML += '</Activity>';

        existingXML += '<Comments>';
        if (isRenewTermClick) {
            existingXML += $("#txtRenewalNotesNew").val();
        }
        existingXML += '</Comments>';

        existingXML += '<SendTo>';
        existingXML += '</SendTo>';

        existingXML += '<Created>';
        existingXML += new Date();
        existingXML += '</Created>';

        existingXML += '</RenewalComment>';
        existingXML += '</RenewalComments>';



        if (TermName == "Initial Term") {
            $("#RenewalCommentsXML1").html(existingXML);
        }
        else {
            var digit = parseInt(TermName.replace("Renewal", "")) + 1;
            $("#RenewalCommentsXML" + digit).html(existingXML);
        }
    }
    else {
        var existingXML = '';
        if (TermName.indexOf("Initial Term") > -1) {
            existRenewalCommentsXML = $("#RenewalCommentsXML1").html();
        }
        else {
            var firstTerm = TermName[0];
            var digit = parseInt(firstTerm.replace("Renewal", "")) + 1;
            existRenewalCommentsXML = $("#RenewalCommentsXML" + digit).html();
        }
        existingXML += '<RenewalComments>';
        if (existRenewalCommentsXML != null && existRenewalCommentsXML != '') {
            $(existRenewalCommentsXML).find('RenewalComment').each(function () {
                var activity = $(this).find('Activity').text();
                var comment = $(this).find('Comments').text();
                var sendton = $(this).find('SendTo').text();
                var created = $(this).find('Created').text();
                existingXML += '<RenewalComment>';

                existingXML += '<Activity>';
                existingXML += activity;
                existingXML += '</Activity>';

                existingXML += '<Comments>';
                existingXML += comment;
                existingXML += '</Comments>';

                existingXML += '<SendTo>';
                existingXML += sendton;
                existingXML += '</SendTo>';

                existingXML += '<Created>';
                existingXML += created;
                existingXML += '</Created>';
                existingXML += '</RenewalComment>';

            });
        }
        existingXML += '<RenewalComment>';
        existingXML += '<Activity>';
        existingXML += user + ' has added ' + TermName.join(', ') + ' on ' + vtime;
        existingXML += '</Activity>';

        existingXML += '<Comments>';
        existingXML += '</Comments>';

        existingXML += '<SendTo>';
        existingXML += '</SendTo>';

        existingXML += '<Created>';
        existingXML += moment(new Date());
        existingXML += '</Created>';

        existingXML += '</RenewalComment>';
        existingXML += '</RenewalComments>';


        if (TermName.indexOf("Initial Term") > -1) {
            $("#RenewalCommentsXML1").html(existingXML);
        }
        else {
            var digit = parseInt(TermName[0].replace("Renewal", "")) + 1;
            $("#RenewalCommentsXML" + digit).html(existingXML);
        }
    }
}

function SaveRowClearForm() {
    $("#chkRenewalModificationsNew").prop('checked', false);
    $("#chkRenewalPriceAdjustmentsNew").prop('checked', false);
    $("#chkRenewalRepricingNew").prop('checked', false);
    $("#chkRenewalOtherNew").prop('checked', false);
    $("#txtRenewStartDate").val("");
    $("#txtRenewEndDate").val("");
    $("#txtRenewalNotesNew").val("");
    $("#txtRenewStatus").text("");

    GetValuesAndAutoPopulate("ddlRenewalNotfInternalNew", "");
    var TermNameLast = $("#renewalViewHistoryTerm tr:last td:first").text();
    if (TermNameLast == "Initial Term") {
        //$("#AddInitialTerm").css("display", "none");
        //$("#AddRenewalTerm").css("display", "");
        //$("#AddRenewalTerm").text("+Add Renewal 1");
        $("#ddlTermPeriodSetRenewal").find("option").show();
        $("#ddlTermPeriodSetRenewal").find("option:lt(1)").hide();
        if (contrcatItem.AutoContractRenewTermCount == "") {
            // $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', 2);
            $("#ddlTermPeriodSetRenewal").val("Unlimited");
        }
        else {
            var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
            if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
            }
            else {
                $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', 2);
            }
        }
    }
    else {
        //$("#AddInitialTerm").css("display", "none");
        //$("#AddRenewalTerm").css("display", "");

        var countTerm = TermNameLast.replace("Renewal ", "");
        //$("#AddRenewalTerm").text("+Add Renewal " + (parseInt(countTerm) + 1));
        $("#ddlTermPeriodSetRenewal").find("option").show();
        if ((parseInt(countTerm)) <= 15)
            $("#ddlTermPeriodSetRenewal").find("option:lt(" + (parseInt(countTerm)) + ")").hide();
        else
            $("#ddlTermPeriodSetRenewal").find("option:lt(15)").hide();
        if (contrcatItem.AutoContractRenewTermCount == "")
            $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
        else {
            var elmop = $("#ddlTermPeriodSetRenewal option[value='" + contrcatItem.AutoContractRenewTermCount + "']");
            if ($(elmop).length > 0 && $(elmop).css('display') != 'none') {
                $("#ddlTermPeriodSetRenewal").val(contrcatItem.AutoContractRenewTermCount);
            }
            else {
                $("select#ddlTermPeriodSetRenewal").prop('selectedIndex', (parseInt(countTerm) <= 15 ? parseInt(countTerm) : 15));
            }
        }

    }
    //manoj
    if (document.getElementById("RequiresAuthorizationYes").style.display != "none" && TermName != "Initial Term") {
        $("#txtSendRenewReminderDayRenewalConfirm").trigger('change');
    }
    //manoj
}

function RenewInTermPopup() {
    var term = (RenewalName != null && RenewalName != "" && typeof (RenewalName) != "undefined") ? RenewalName : "";
    if (term != "") {
        var indexedit = term.replace("Renewal ", "");
        indexedit = parseInt(indexedit) + 1;
        $('#Status' + indexedit).text("Renewed");
        //Sridhar
        isRenewedManual = "Yes";
        $('#RenewedBy' + indexedit).text(localStorage.UserName);
        $('#RenewalType' + indexedit).text("Manual");
        $('#RenewedOn' + indexedit).text($.datepicker.formatDate('mm/dd/yy', new Date()));
        var fRenewedDisplay = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            fRenewedDisplay = moment(new Date()).format('MM/DD/YYYY');
        }
        else {
            fRenewedDisplay = moment(new Date()).format(localStorage.AppDateFormat);
        }
        $('#RenewedOnDisplay' + indexedit).text(fRenewedDisplay);
        $('#Modified' + indexedit).text($.datepicker.formatDate('mm/dd/yy', new Date()));
        $('#ModifiedBy' + indexedit).text(localStorage.UserName);
        $('#RenewalNotes' + indexedit).text($("#txtRenewalNotesNew").val());
    }

    //$("#RenewTerm").css('display', 'none');
}

function getTimeZone() {
    var offset = new Date().getTimezoneOffset(), o = Math.abs(offset);
    return (offset < 0 ? "+" : "-") + ("00" + Math.floor(o / 60)).slice(-2) + ":" + ("00" + (o % 60)).slice(-2);
}

$('#btnContractTermExpire').click(function () {    //Added 2.4final to 2.4
    ExpireContract();
    //swal({
    //    title: '',
    //    text: "Are you sure you want to <span style=\"font-weight:700\">expire</span> this Contract Record?",
    //    type: 'warning',
    //    showCancelButton: true,
    //    confirmButtonText: 'Yes',
    //    cancelButtonText: 'No',
    //    html: true
    //},
    // function (confirmed) {
    //     if (confirmed) {
    //         $("#loadingPage").fadeIn();
    //         var vCancelNote = '';
    //         $.ajax({
    //             url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=Expired',
    //             type: 'PUT',
    //             dataType: 'json',
    //             headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
    //             data: vCancelNote,
    //             cache: false,
    //             success: function (result) {
    //                 $("#loadingPage").fadeOut();
    //                 $("#dvContractTerm").dialog("close");
    //                 contrcatItem.Status = "Expired";
    //                 ContractTopActions();
    //             },
    //             error: function (data) {
    //                 $("#loadingPage").fadeOut();
    //             }
    //         });
    //     }
    //     return;
    //});
    //if (confirm('Are you sure you want to expire this contract?')) {
    //    $("#loadingPage").fadeIn();
    //    var vCancelNote = '';
    //    $.ajax({
    //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=Expired',
    //        type: 'PUT',
    //        dataType: 'json',
    //        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
    //        data: vCancelNote,
    //        cache: false,
    //        success: function (result) {
    //            $("#loadingPage").fadeOut();
    //            $("#dvContractTerm").dialog("close");
    //            contrcatItem.Status = "Expired";
    //            ContractTopActions();
    //        },
    //        error: function (data) {
    //            $("#loadingPage").fadeOut();
    //        }
    //    });
    //}
});

$('#btnContractTermCancel').click(function () {
    $("#txtReasonOfCancel").val("");
    $("#ddlSendToCancel").val('');
    $("#dvCancelContract").dialog("open");
});

function CancelContract() {
    if (requiredValidator('dvCancelContract', false)) {
        swal({
            title: '',
            text: "Are you sure you want to <span style=\"font-weight:700\">cancel</span> this Contract?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true
        },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var notify = $("#ddlSendToCancel").val();
             var noty = '';
             $(notify).each(function (i, item) {
                 if (noty == '') {
                     noty = item;
                 }
                 else {
                     noty += ";" + item;
                 }
             });
             var vCancelNote = "CancelledReason=" + $("#txtReasonOfCancel").val() + "&UsersToNotify=" + noty;
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=Cancelled',
                 type: 'PUT',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                 data: vCancelNote,
                 cache: false,
                 success: function (result) {
                     $("#loadingPage").fadeOut();
                     $("#dvCancelContract").dialog("close");
                     $("#dvContractTerm").dialog("close");
                     $("#dvManageContractStatus").dialog("close");
                     contractItem = result;
                     $("#iStandardIcon").empty();
                     $("#hdnsummeryTempDocu").text("No");
                     $("#lisummarydocument").css("display", "none");
                     ReloadContracts();
                     //ContractTopActions();
                 },
                 error: function (data) {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

    }
}


//Documents Context menu
function ShowActivities() {

    $("#docMetadata").removeClass('pop_up_Harizondal_meta_active');
    $("#docActivities").addClass('pop_up_Harizondal_meta_active');
    $('#tblMetadataDetailDocument').css("display", "none");
    $('#documentLogs').css("display", "");
    $('#compact-pagination-documentLogs').css("display", "none");
    $('#idDocumentPopup').css("display", "");
}

function getNameAndEmailShareDocument() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + getParameterByName("ContractID") + '/contacts',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data != null) {
                var allInternal = '';
                var datalenght = data.length;
                var totalFileCount = 0;
                var iex = 0;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];

                    totalFileCount++;
                    if (item.InternalOrExternal == "External") {
                        if (iex == 0) {
                            iex = 1;
                            $('#txtShareDocument1').val(item.ContactName);
                            $('#txtShareDocumentEmail1').val(item.EmailID);
                        }
                        else {
                            var htmlFormatFile = '<tr id="trShareDocument' + totalFileCount + '">';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareDocument' + totalFileCount + '" value="' + item.ContactName + '" maxlength="42" name="ShareDocumentName' + totalFileCount + '" placeholder="Name" title="Name" type="text" class="f_inpt width90" value="' + item.ContactName + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareDocumentEmail' + totalFileCount + '" value="' + item.EmailID + '" maxlength="50" name="ShareDocumentEmail' + totalFileCount + '" placeholder="Email ID" title="Email ID" type="text" class="f_inpt width90 validelement validemail" value="' + item.EmailID + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td style="width:20px">';
                            htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareDocument(this)"><img src="../Content/Images/icon/delete.png" /></a>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';
                            $("#tblShareDocument").append(htmlFormatFile);
                        }

                    }
                    else {
                        allInternal += item.ContactName + ";";
                    }
                }
                GetTextAndAutoPopulateNotHidden("ddlDocumentShareInternal", allInternal);
            }
        },
        error: function () {
        }

    });
}

function DeleteShareDocument(n) {
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $(".addmorelinks").show();
}

function AddShareDocument() {
    var vLastRow = $("#tblShareDocument tr:last").attr('id');
    var count = $("#tblShareDocument tr").length;
    var totalFileCount = 2;
    if (typeof vLastRow == "undefined") {
        totalFileCount = 2;
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trShareDocument", ""));
        totalFileCount = parseInt(totalFileCount) + 1;
    }
    if (count <= 9) {
        var htmlFormatFile = '<tr id="trShareDocument' + totalFileCount + '">';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtShareDocument' + totalFileCount + '" maxlength="42" name="ShareDocumentName' + totalFileCount + '" placeholder="Name" maxlength="50" title="Name" type="text" class="f_inpt width90 validelement" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtShareDocumentEmail' + totalFileCount + '" maxlength="50" name="ShareDocumentEmail' + totalFileCount + '" placeholder="Email ID" maxlength="100" title="Email Id" type="text" class="f_inpt width90 validelement validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareDocument(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblShareDocument").append(htmlFormatFile);
        if (count == 9) {
            $(".addmorelinks").hide();
        }
    }

}

function Managenewnode(objvalue) {
    $("#showAllManageFolder").html('');
    var arrCollectionDocumentFolder = [];
    var $tree = $('#treeviewManageFolderOption');
    var nodeselected = $tree.tree('getSelectedNode');
    if (nodeselected == false) {
        nodeselected = $tree.tree('getTree');
        var parent_node = $tree.tree('getNodeById', nodeselected.children[0].id);

        $tree.tree(
         'appendNode',
         {
             name: 'New folder',
             id: nodeselected.children[0].id + '/New folder'
         },
         parent_node

     );
        var nodeexpand = $tree.tree('getNodeById', nodeselected.children[0].id);
        $tree.tree('openNode', nodeexpand);
        var nodeselect = $tree.tree('getNodeById', nodeselected.children[0].id + '/New folder');
        $tree.tree('selectNode', nodeselect);
        $("#hdnManagefolderurl").val(nodeselected.children[0].id + '/New folder');

        //manoj
        var strReplace = contractItem.ContractDocumentsUrl.substring(0, contractItem.ContractDocumentsUrl.length - 1);
        var arrDocumentFolder = nodeselected.children[0].id.replace(strReplace, ";").split(';').filter(function (vfld) { return vfld !== '' });
        if (arrDocumentFolder.length > 1) {
            arrCollectionDocumentFolder = (contractItem.ContractDocumentsUrl + arrDocumentFolder.pop()).split('/').filter(function (vflds) { return vflds !== '' });
        } else {
            arrCollectionDocumentFolder = (contractItem.ContractDocumentsUrl).split('/').filter(function (vflds) { return vflds !== '' });
        }
        arrCollectionDocumentFolder = arrCollectionDocumentFolder.slice(1);
        //manoj

    } else {
        var parent_node = $tree.tree('getNodeById', nodeselected.id);
        $tree.tree(
         'appendNode',
         {
             name: 'New folder',
             id: nodeselected.id + '/New folder'
         },
         parent_node
     );
        var nodeexpand = $tree.tree('getNodeById', nodeselected.id);
        $tree.tree('openNode', nodeexpand);
        var nodeselect = $tree.tree('getNodeById', nodeselected.id + '/New folder');
        $tree.tree('selectNode', nodeselect);
        $("#hdnManagefolderurl").val(nodeselected.id + '/New folder');

        //manoj
        var strReplace = contractItem.ContractDocumentsUrl.substring(0, contractItem.ContractDocumentsUrl.length - 1);
        var arrDocumentFolder = nodeselected.id.replace(strReplace, ";").split(';').filter(function (vfld) { return vfld !== '' });
        if (arrDocumentFolder.length > 1) {
            arrCollectionDocumentFolder = (contractItem.ContractDocumentsUrl + arrDocumentFolder.pop()).split('/').filter(function (vflds) { return vflds !== '' });
        } else {
            arrCollectionDocumentFolder = (contractItem.ContractDocumentsUrl).split('/').filter(function (vflds) { return vflds !== '' });
        }
        arrCollectionDocumentFolder = arrCollectionDocumentFolder.slice(1);
    }

    //manoj
    var fldratrical = "";
    if (arrCollectionDocumentFolder.length == 1) {
        fldratrical = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrCollectionDocumentFolder.toString() + '</span>';
    } else {
        for (var fldr = 0; fldr < arrCollectionDocumentFolder.length; fldr++) {
            if (arrCollectionDocumentFolder.length - 1 == fldr) {
                fldratrical += '/<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><span>' + arrCollectionDocumentFolder[fldr].toString() + '</a>';
            } else {
                fldratrical += '/<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><span>' + arrCollectionDocumentFolder[fldr].toString() + '</a>';
            }
        }
    }
    if (fldratrical.charAt(0) == '/') {
        fldratrical = fldratrical.substr(1);
    }
    $("#showAllManageFolder").html(fldratrical);

    $("#txtManagefoldervalue").removeClass('error');
    $("#errormsg_txtManagefoldervalue").remove();
    $("#dvManagefoldercreation").dialog("option", "title", "Create sub-folder");
    $("#dvManagefoldercreation").dialog("open");
}

function Managenewfoldermove() {
    if (requiredValidator('dvManagefoldercreationvalidate', false)) {
        if ($("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "new folder" && $("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "amendments" && $("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "summary documents") {
            $("#loadingPage").fadeIn();
            //if ($("#hdnnewfoldercreatedfrom").val() == "jqtree") {
            var $tree = $('#treeviewManageFolderOption');
            var nodeselect = $tree.tree('getNodeById', $("#hdnManagefolderurl").val());
            var parent_node = nodeselect.parent;
            var folderexit = false;
            $(parent_node.children).each(function (i, childrendata) {
                if (childrendata.name.toLowerCase() == $("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").trim().toLowerCase() && folderexit == false) {
                    folderexit = true;
                }
            });
            if (!folderexit) {
                var contractdocumenturl = "";
                if ($("#hdnContractDocumentsUrlFixed").text() == "") {
                    var headerid = $("#lblContractTitle").text();
                    headerid = headerid.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                    var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                    finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
                    finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
                    finalurl += headerid + "/";
                    contractdocumenturl = ($("#hdnContractDocumentsUrl").text() != null && $("#hdnContractDocumentsUrl").text() != "") ? $("#hdnContractDocumentsUrl").text() : finalurl;
                    //var contractdocumenturl = ($("#hdnContractDocumentsUrl").text() != null && $("#hdnContractDocumentsUrl").text() != "") ? $("#hdnContractDocumentsUrl").text() : finalurl;
                } else {
                    contractdocumenturl = $("#hdnContractDocumentsUrlFixed").text();
                    //var contractdocumenturl = $("#hdnContractDocumentsUrlFixed").text();
                }

                var nodetoupdate = $("#hdnManagefolderurl").val().replace('New folder', $("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").trim());
                if (contractdocumenturl != "") {
                    contractdocumenturl = contractdocumenturl.substring(1);
                    if (contractdocumenturl != "") {
                        contractdocumenturl = contractdocumenturl.trim();
                    } else {
                        contractdocumenturl = 'Contract Documents/';
                    }
                } else {
                    contractdocumenturl = 'Contract Documents/';
                }
                var splturl = nodetoupdate.split(contractdocumenturl);
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?locationurl=' + encodeURIComponent(contractdocumenturl) + '&newfolder=' + splturl[1],
                    type: 'POST',
                    cache: false,
                    contentType: false,
                    headers: {
                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, contractId: getParameterByName("ContractID")
                    },
                    processData: false,
                    success: function (folder) {
                        if (folder != null) {
                            $tree = $('#treeviewManageFolderOption');
                            nodeselect = $tree.tree('getNodeById', $("#hdnManagefolderurl").val());
                            $tree.tree(
                            'updateNode',
                            nodeselect,
                            {
                                name: $("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").trim(),
                                id: nodetoupdate
                            }
                        );
                            //manoj
                            if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "" && !Updatedocumenttap) {
                                var arrSpltFolderToReload = $("#hdnManagefolderurl").val().replace($("#hdContAreaDocLibName").val(), "~").split('~');
                                var SpltFolderToReload = arrSpltFolderToReload.pop();
                                SpltFolderToReload = (SpltFolderToReload.charAt(0) == '/') ? SpltFolderToReload.substring(1) : SpltFolderToReload;
                                var arrFolderToReload = SpltFolderToReload.split('/');
                                var arrshowAll = $("#showAll").text().split('/');
                                arrshowAll = $.map(arrshowAll, $.trim);
                                if (arrshowAll.length == arrFolderToReload.length - 1) {
                                    arrFolderToReload = arrFolderToReload.slice(0, -1);
                                    if (arrFolderToReload.join('/') == arrshowAll.join('/')) {
                                        Updatedocumenttap = true;
                                    }
                                }
                            }
                            //manoj
                            $("#hdnManagefolderurl").val('');
                            $("#txtManagefoldervalue").val("");
                            $("#hdnnewfoldercreatedfrom").val("");
                            $("#dvManagefoldercreation").dialog("close");
                            $("#loadingPage").fadeOut();
                        } else {
                            var $tree = $('#treeviewManageFolderOption');
                            var nodeselect = $tree.tree('getNodeById', $("#hdnManagefolderurl").val());
                            $('#treeviewManageFolderOption').tree('removeNode', nodeselect);
                            $("#hdnManagefolderurl").val("");
                            $("#txtManagefoldervalue").val("");
                            $("#hdnnewfoldercreatedfrom").val("");
                            $("#dvManagefoldercreation").dialog("close");
                            $("#loadingPage").fadeOut();
                        }
                        //$('input[type=checkbox][name="MultipleDocuments"]').prop('checked', false)
                    },
                    error: function (document) {
                        var $tree = $('#treeviewManageFolderOption');
                        var nodeselect = $tree.tree('getNodeById', $("#hdnManagefolderurl").val());
                        $('#treeviewManageFolderOption').tree('removeNode', nodeselect);
                        $("#hdnManagefolderurl").val("");
                        $("#txtManagefoldervalue").val("");
                        //$('input[type=checkbox][name="MultipleDocuments"]').prop('checked', false)
                    }
                });

            } else {
                swal("", "Folder name <span style='font-weight:700'>" + $("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").trim() + "</span> is already exist");
                $("#loadingPage").fadeOut();
            }
            //}
        } else {
            swal("", "Folder name <span style='font-weight:700'>" + $("#txtManagefoldervalue").val().replace(/\s\s+/g, " ").trim() + "</span> already exists (or) Reserved.");
        }
    }
}

function Close_ManageFolder() {
    if (typeof ($("#hdnManagefolderurl").val()) != "undefined" && $("#hdnManagefolderurl").val() != null && $("#hdnManagefolderurl").val() != "") {
        var $tree1 = $('#treeviewManageFolderOption');
        var nodeselect1 = $tree1.tree('getNodeById', $("#hdnManagefolderurl").val());
        $('#treeviewManageFolderOption').tree('removeNode', nodeselect1);
        $("#hdnManagefolderurl").val("");
        $("#txtManagefoldervalue").val("");
    }
}

function AddSignee() {
    var vLastRow = $("#tblSignees tr:last").attr('id');
    var totalFileCount = "2";
    if (typeof vLastRow == "undefined") {
        totalFileCount = "2";
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trSignee", ""));
        totalFileCount += 1;
    }
    var vLastRowC = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
    var totalFileCountC = 2;
    if (typeof vLastRowC == "undefined") {
        totalFileCountC = 2;
    }
    else {

        totalFileCountC = vLastRowC;
    }
    if (totalFileCountC < 5) {
        var htmlFormatFile = '<tr id="trSignee' + totalFileCount + '">';
        htmlFormatFile += '<td class="width40">';
        htmlFormatFile += '<input id="txtSignee' + totalFileCount + '" maxlength="42" name="SigneeName' + totalFileCount + '" placeholder="Signee Name" title="Signee Signee" type="text" class="f_inpt width90" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width40">';
        htmlFormatFile += '<input id="txtEmail' + totalFileCount + '" maxlength="50" name="SigneeEmail' + totalFileCount + '" placeholder="Signee Email" title="Signee Email" type="text" class="f_inpt width90 validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width20">';
        htmlFormatFile += '<select id="ddlSigneeOrder' + totalFileCount + '" name="SigneeOrder' + totalFileCount + '" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder">';
        htmlFormatFile += '<option value="1" selected="selected">1</option>';
        htmlFormatFile += '<option value="2">2</option>';
        htmlFormatFile += '<option value="3">3</option>';
        htmlFormatFile += '<option value="4">4</option>';
        htmlFormatFile += '<option value="5">5</option>';
        htmlFormatFile += '</select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteSignee(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblSignees").append(htmlFormatFile);

        var rowCount = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
        $("#ddlSigneeOrder" + totalFileCount).val(rowCount);
        if (rowCount >= 5) {
            $("#spAddSignee").css("display", "none");
            $("#spAddInternalSignee").css("display", "none");
        }
        else {
            $("#spAddSignee").css("display", "");
            $("#spAddInternalSignee").css("display", "");
        }
    }
    else {
        $("#spAddSignee").css("display", "");
        $("#spAddInternalSignee").css("display", "");
    }
}

function DeleteSignee(n) {
    var vv = $(n.parentNode.parentNode).find('select');
    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $("#spAddSignee").css("display", "");
    $("#spAddInternalSignee").css("display", "");
    $(".SigneeOrder").each(function (index, data) {
        var curVal2 = parseInt($(data).val());
        if (curVal2 > curVal) {
            $(data).val(curVal2 - 1);
        }
    });
}

function SelectedSignee() {
    var vSignee = $("input:radio[name=SigneeUser]:checked");
    var prevSignees = [];
    $('#tblInternalSignees tr td:first-child input').each(function () {
        if ($(this).val() != "")
            prevSignees.push($(this).val());
    });
    var userName = vSignee.val();
    var userEmail = vSignee.attr('title');
    if (userName == "AuthorizeSignRestriction") {
        userName = $('#ddlAuthorizeSignRestriction').val();
        userEmail = $('#ddlAuthorizeSignRestriction option:selected').attr("data-emailvalue");
    }
    if (prevSignees.indexOf(userName) > -1) {
        swal("", "Internal Signee already selected.");
    }
    else {
        $("#" + $("#hdUserEmail").val()).val(userEmail);
        $("#" + $("#hdUserName").val()).val(userName);
        $("#hdUserEmail").val('');
        $("#hdUserName").val('');
        $("#browseSigneeUser").dialog("close");
    }
}

function formatDate(date) {

    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');
}

function tabchange(object) {
    if (object.id == "tabTemplate") {
        if ($("#ddlDocumentTemplate option").length <= 1) {
            swal("", "No templates are assigned to business area.");
        }
        $('input[type="radio"][name="IsStandard"][value="Yes"]').prop('checked', true);
        $("#tblNewDocument").css('display', '');
        $("#tblExistingDocument").css('display', 'none');
        $("#tblExistingDocumentSearch").css('display', 'none');
        $("#tblExistingDocumentPaging").css('display', 'none');
        $("#tblBulkUploadFolders").css('display', 'none');
        $("#tblManageFolders").css('display', 'none');
        $("#tabTemplate").addClass('form-active');
        $("#tabUpload").removeClass('form-active');
        $("#tabExistingDocument").removeClass('form-active');
        $("#tabBulkUpload").removeClass('form-active');
        $("#tabManageFolder").removeClass('form-active');
        $("#docContract").removeClass('validelement');
        $("#docContract").removeClass('validfilename');
        $("#ddlDocumentTemplate").addClass('validelement');
        $("#txtDocumentNameCreate").addClass('validelement');

        $("#trTemplate").css('display', '');
        $("#trTemplate1").css('display', '');
        $("#trDocumentType").css("display", "");
        $("#trFileUpload").css('display', 'none');
        $("#fileUploadOCR").prop('checked', false);
        $("#trfileUploadOCR").css('display', 'none');
        $("#docContract").replaceWith($("#docContract").val('').clone(true));
        $('input:checkbox[name=NotTaggedContract]').attr('checked', false);
        $("#hdnIsDocumentTag").text('');
        $("#formTitle").text('Create from Document Template');
        $("#divDoc1").css('display', '');
        $("#divDoc2").css('display', '');

        if (document.getElementById("trdesc").style.display != "none") {
            //$(".clmoreinfo").toggle();
            $("#linkMoreInfo").click();
        }

        if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
            $("#dtValidFrom").val("");
            $("#dtValidTill").val("");

            if (document.getElementById("formValidityForm").style.display != "none") {
                $("#linkAddValidity").click();
            }
            $("#linkAddValidity").css('display', 'none');
            //if ($("#linkAddValidity").text() == "Track document expiration date") {
            //    $("#linkAddValidity").css('display', 'none');
            //}
            //else {
            //    $("#linkAddValidity").click();
            //    $("#linkAddValidity").css('display', 'none');
            //}
        }
        else {
            $("#linkAddValidity").css('display', 'block');
        }
        $("#tabTemplate").addClass("document_active");
        $("#tabUpload").removeClass("document_active");
        $("#tabExistingDocument").removeClass("document_active");
        $("#tabBulkUpload").removeClass('document_active');
        $("#tabManageFolder").removeClass('document_active');
        $("#btnDocAdd").html('<span class="ui-button-text">Create</span>')
        $("#btnDocAdd").css("display", "");
        //manoj
        $("#btnDocCancel").html('<span class="pop_up_Content_Green pop_up_Content_White margin-0px">Cancel</span>');
        //manoj
        if ($("#ddlDocumentTemplate").val() != '0') {
            var selectedtemplatevalue = $("#ddlDocumentTemplate").val().split('~').pop();
            $("#ddlDocumentTypeCreate").find("option[value='" + selectedtemplatevalue + "']").prop("selected", true);
        } else {
            $("#ddlDocumentTypeCreate").find('option[value="0"]').prop("selected", true);
        }
    } else if (object.id == "tabUpload") {
        $('input[type="radio"][name="IsStandard"][value="No"]').prop('checked', true);

        $("#tblNewDocument").css('display', '');
        $("#tblExistingDocument").css('display', 'none');
        $("#tblExistingDocumentSearch").css('display', 'none');
        $("#tblExistingDocumentPaging").css('display', 'none');
        $("#tblBulkUploadFolders").css('display', 'none');
        $("#tblManageFolders").css('display', 'none');
        $("#tabUpload").addClass('form-active');
        $("#tabTemplate").removeClass('form-active');
        $("#tabExistingDocument").removeClass('form-active');
        $("#tabBulkUpload").removeClass('form-active');
        $("#tabManageFolder").removeClass('form-active');
        $("#docContract").addClass('validelement');
        $("#docContract").addClass('validfilename');
        $("#ddlDocumentTemplate").removeClass('validelement');
        $("#txtDocumentNameCreate").removeClass('validelement');

        $("#trTemplate").css('display', 'none');
        $("#trTemplate1").css('display', 'none');
        $("#trDocumentType").css("display", "");
        $("#trFileUpload").css('display', '');
        $('input:checkbox[name=NotTaggedContract]').attr('checked', false);
        $("#hdnIsDocumentTag").text('');
        $("#tblContentControls").empty();
        $("#formTitle").text('Upload from Computer');
        $("#divDoc1").css('display', '');
        $("#divDoc2").css('display', '');

        if (document.getElementById("trdesc").style.display != "none") {
            //$(".clmoreinfo").toggle();
            $("#linkMoreInfo").click();
        }

        if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
            $("#dtValidFrom").val("");
            $("#dtValidTill").val("");

            if (document.getElementById("formValidityForm").style.display != "none") {
                $("#linkAddValidity").click();
            }
            $("#linkAddValidity").css('display', 'none');
            //if ($("#linkAddValidity").text() == "Track document expiration date") {
            //    $("#linkAddValidity").css('display', 'none');
            //}
            //else {
            //    $("#linkAddValidity").click();
            //    $("#linkAddValidity").css('display', 'none');
            //}
        }
        else {
            $("#linkAddValidity").css('display', 'block');
        }

        $("#tabUpload").addClass("document_active");
        $("#tabTemplate").removeClass("document_active");
        $("#tabExistingDocument").removeClass("document_active");
        $("#tabBulkUpload").removeClass('document_active');
        $("#tabManageFolder").removeClass('document_active');
        $("#btnDocAdd").html('<span class="ui-button-text">Upload</span>')
        $("#btnDocAdd").css("display", "");
        //manoj
        $("#btnDocCancel").html('<span class="pop_up_Content_Green pop_up_Content_White margin-0px">Cancel</span>');
        //manoj
    }
    else if (object.id == "tabExistingDocument") {
        $("#tblNewDocument").css('display', 'none');
        $("#tblExistingDocument").css('display', '');
        $("#tblExistingDocumentSearch").css('display', '');
        $("#tblBulkUploadFolders").css('display', 'none');
        $("#tblManageFolders").css('display', 'none');
        $("#hdnIsDocumentTag").text('Yes');
        $("#tabExistingDocument").addClass('form-active');
        $("#tabUpload").removeClass('form-active');
        $("#tabTemplate").removeClass('form-active');
        $("#tabBulkUpload").removeClass('form-active');
        $("#tabManageFolder").removeClass('form-active');
        $("#tblContentControls").empty();
        $("#formTitle").text('Add from Office 365 Library');
        $("#divDoc1").css('display', 'none');
        $("#divDoc2").css('display', 'none');
        // $("#formValidity").css('display', 'none');
        $("#formValidityForm").css('display', 'none');
        $("#linkAddValidity").css('display', 'none');

        $("#tabExistingDocument").addClass("document_active");
        $("#tabUpload").removeClass("document_active");
        $("#tabTemplate").removeClass("document_active");
        $("#tabBulkUpload").removeClass('document_active');
        $("#tabManageFolder").removeClass('document_active');
        $("#btnDocAdd").html('<span class="ui-button-text">Add</span>')
        $("#btnDocAdd").css("display", "");
        //manoj
        $("#fileUploadOCR").prop('checked', false);
        $("#trfileUploadOCR").css('display', 'none');
        $("#docContract").replaceWith($("#docContract").val('').clone(true));
        $("#btnDocCancel").html('<span class="pop_up_Content_Green pop_up_Content_White margin-0px">Cancel</span>');
        //manoj
        if ($("#tblExistingDocument tr").length == 1 && $("#tblExistingDocument tr")[0].textContent == "No items found.") {
            $("#txtSearchDocument").val("");
            BindDocumentNotTagToContract();
        }
    }

        //manoj
        //For Manage Folder
    else if (object.id == "tabManageFolder") {
        $("#tblNewDocument").css('display', 'none');
        $("#tblExistingDocument").css('display', 'none');
        $("#tblBulkUploadFolders").css('display', 'none');
        $("#tblManageFolders").css('display', '');
        $("#tblExistingDocumentSearch").css('display', 'none');
        $("#tblExistingDocumentPaging").css('display', 'none');
        $("#hdnIsDocumentTag").text('');
        $("#tabExistingDocument").removeClass('form-active');
        $("#tabUpload").removeClass('form-active');
        $("#tabTemplate").removeClass('form-active');
        $("#tabBulkUpload").removeClass('form-active');
        $("#tabManageFolder").addClass('form-active');
        $("#tblContentControls").empty();
        $("#formTitle").text('Manage  Folder(s)');
        $("#divDoc1").css('display', 'none');
        $("#divDoc2").css('display', 'none');
        //$("#formValidity").css('display', 'none');
        $("#formValidityForm").css('display', 'none');
        $("#linkAddValidity").css('display', 'none');

        $("#tabExistingDocument").removeClass("document_active");
        $("#tabUpload").removeClass("document_active");
        $("#tabTemplate").removeClass("document_active");
        $("#tabBulkUpload").removeClass('document_active');
        $("#tabManageFolder").addClass('document_active');

        $("#btnDocAdd").css("display", "none");
        //manoj
        $("#fileUploadOCR").prop('checked', false);
        $("#trfileUploadOCR").css('display', 'none');
        $("#docContract").replaceWith($("#docContract").val('').clone(true));
        $("#btnDocCancel").html('<span class="pop_up_Content_Green pop_up_Content_White margin-0px">Close</span>');
        //manoj
        $("#btnDocAdd").html('<span class="ui-button-text">Add</span>')
        //if ($("#tblExistingDocument tr").length == 1 && $("#tblExistingDocument tr")[0].textContent == "No items found.") {
        //    $("#txtSearchDocument").val("");
        //    BindDocumentNotTagToContract();
        //}
    }
        //For Manage Folder

        //For Bulk Document Upload
    else if (object.id == "tabBulkUpload") {
        $("#tblNewDocument").css('display', 'none');
        $("#tblExistingDocument").css('display', 'none');
        $("#tblManageFolders").css('display', 'none');
        $("#tblBulkUploadFolders").css('display', '');
        $("#tblExistingDocumentSearch").css('display', 'none');
        $("#tblExistingDocumentPaging").css('display', 'none');
        $("#hdnIsDocumentTag").text('');
        $("#tabExistingDocument").removeClass('form-active');
        $("#tabUpload").removeClass('form-active');
        $("#tabTemplate").removeClass('form-active');
        $("#tabManageFolder").removeClass('form-active');
        $("#tabBulkUpload").addClass('form-active');
        $("#tblContentControls").empty();
        $("#formTitle").text('Bulk document(s) upload');
        $("#divDoc1").css('display', 'none');
        $("#divDoc2").css('display', 'none');
        //$("#formValidity").css('display', 'none');
        $("#formValidityForm").css('display', 'none');
        $("#linkAddValidity").css('display', 'none');

        $("#tabExistingDocument").removeClass("document_active");
        $("#tabUpload").removeClass("document_active");
        $("#tabTemplate").removeClass("document_active");
        $("#tabManageFolder").removeClass('document_active');
        $("#tabBulkUpload").addClass('document_active');
        $("#btnDocAdd").css("display", "");
        $("#btnDocAdd").html('<span class="ui-button-text">Upload</span>')
        $("#fileUploadOCR").prop('checked', false);
        $("#trfileUploadOCR").css('display', 'none');
        $("#docContract").replaceWith($("#docContract").val('').clone(true));
        document.getElementById('docManageBulk').addEventListener('change', handleFileSelect, false);
        $(".clManageupload").css('display', 'none');
        //if ($("#tblExistingDocument tr").length == 1 && $("#tblExistingDocument tr")[0].textContent == "No items found.") {
        //    $("#txtSearchDocument").val("");
        //    BindDocumentNotTagToContract();
        //}
    }
    //For Bulk Document Upload
    //manoj

    $('#dtValidFrom').val("");
    $('#dtValidTill').val("");
    //*Harshitha
    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var milestoneReminder = defaultGlobalSettings.MilestoneReminders;
        var xmlDoc = $.parseXML(milestoneReminder);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "MilestoneNew").val(remSplit[0]);
            $("#txtReminder" + j + "MilestoneNew").val(remSplit[1]);
            j = j + 1;
        });
    }

    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var documentreminders = defaultGlobalSettings.DocumentReminders;
        var xmlDoc = $.parseXML(documentreminders);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "New").val(remSplit[0]);
            $("#txtReminder" + j + "New").val(remSplit[1]);
            j = j + 1;
        });
    }
}

//Labels
function BindContractLabels() {

    $("#LabelsAdd").hide();
    $('#LabelEdit').hide();
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = [];
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "18" && n.Status == "ON");
    });

    lstSelectedLabels = contractItem.Labels;
    var AutoLable = [];
    if (contractItem.AutoLabels != '' && contractItem.AutoLabels != null) {
        AutoLable = contractItem.AutoLabels.split(';');
    }
    if (contractItem.Labels != '') {
        var txtLabelSpans = "";
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/label?labelNames=' + encodeURIComponent(contractItem.Labels),
            type: 'GET',
            dataType: 'json',
            cache: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            success: function (data) {
                $('#dvLabelList').empty();
                var datalenght = data.length;
                if (datalenght > 0) {
                    for (var i = 0; i < datalenght; i++) {
                        var item = data[i];
                        txtLabelSpans += '<span class="label margin-right-5" style="font-size:12px;background-color:#' + item.LabelColor.trim() + ' !important;">';
                        txtLabelSpans += '<small style="float: left;">' + item.LabelTitle + '</small>';
                        if (!($.inArray(item.LabelTitle, AutoLable) > -1 && vAccFeat.length > 0))
                            txtLabelSpans += '<img src="/Content/Images/close_white.png" onclick="javascript:RemoveSelectedLabel(this);" style="float: right; margin: 2px 0px 0px 3px;">';
                        txtLabelSpans += '</span>';
                    }
                    $('#dvLabelList').append(txtLabelSpans);
                    if ($("#hdnPermission").val() != 'View')
                        $('#LabelEdit').show();
                    $("#LabelsAdd").hide();
                }
                else {

                    $('#dvLabelList').empty();
                    var clickEdit = "";
                    if ($("#hdnPermission").val() != 'View')
                        $("#LabelsAdd").show();
                    $('#LabelEdit').hide();
                    $('#dvLabelList').append(clickEdit);
                }

            }, error: function (data) {
                $('#dvLabelList').empty();
                var clickEdit = "";
                if ($("#hdnPermission").val() != 'View')
                    $("#LabelsAdd").show();
                $('#LabelEdit').hide();
                $('#dvLabelList').append(clickEdit);
            }
        });
    } else {
        //var clickEdit = "";
        //if ($("#hdnPermission").val() != 'View')
        //    $("#LabelsAdd").show();
        //$('#LabelEdit').hide();
        //$('#dvLabelList').append(clickEdit);
        $('#dvLabelList').empty();

        if ($('#dvLabelList').children().length == 0) {
            if ($("#hdnPermission").val() != 'View')
                $("#LabelsAdd").show();
            $('#LabelEdit').hide();
            $('#dvLabelList').append("");
        }
    }
}

function RemoveSelectedLabel(obj) {
    var child = obj.parentNode;
    var lblText = child.firstChild.textContent;
    swal({
        title: '',
        text: "Are you sure you want to remove '<span style=\"font-weight:700\">" + lblText + "</span>'?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
     function (confirmed) {
         if (confirmed) {
             child.parentNode.removeChild(child);
             ContractLabels = jQuery.grep(ContractLabels, function (value) {
                 return value != lblText;
             });
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/label?contractid=' + getParameterByName('ContractID') + '&label=' + encodeURIComponent(lblText),
                 type: 'DELETE',
                 dataType: 'json',
                 headers: {
                     'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName
                 },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {
                     contractItem = data;
                 }
             });
             if ($('#dvLabelList').children().length == 0) {
                 if ($("#hdnPermission").val() != 'View')
                     $("#LabelsAdd").show();
                 $('#LabelEdit').hide();

                 $('#dvLabelList').append("");
             }
         }
         return;
     });

}

$(".openAddLabel").click(function () {
    $('#liSelectedLabel').html("");
    $('[id^=row_]').remove();
    $('#txtSearchLabel').val("");
    $('#selCategoryFilter').val("All");
    contactsJsonPayload = [];
    $("#txtSearchLabel").val('');
    arrLabelCollection = [];
    bindLabelCategory('Add');
    //SearchLabels('Add');
});

function bindLabelCategory(action) {
    $("#loadingPage").fadeIn();
    $("#selCategoryFilter").html('<option value="All">All Category</option>')
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/alllabelcategories',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (contactsJsonPayload) {
            //manoj
            LabelsCategories = contactsJsonPayload;
            //manoj
            $(contactsJsonPayload).each(function (i, item) {
                $("#selCategoryFilter").append('<option value="' + escape(item.LabelCategory) + '">' + item.LabelCategory + '</option>');
            });
            searchLabelsNew(action);
        }, error: function (data) {
            searchLabelsNew(action);
        }
    });
}

function searchLabelsNew(action) {
    if (action == "Search") {
        if ($.trim($("#txtSearchLabel").val()) != "") {
            $("#tblLabelPopup").html('<img src="../Content/Images/icon/loading.gif"> Searching...');
        } else {
            $("#tblLabelPopup").html('<img src="../Content/Images/icon/loading.gif"> Loading...');
        }
    }
    //get all Labels
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/label',
        type: 'GET',
        dataType: 'json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        success: function (datalabel) {
            //manoj
            var data = $.grep(datalabel, function (ndata, idata) {
                return (ndata.LabelTitle != null && ndata.LabelTitle != "");
            });
            //manoj
            BindLabelTable(data, action);
        },
        error: function (data) {
            var labeldata = [];
            BindLabelTable(labeldata, action);
        }
    });
    //get all Labels
}

function BindLabelTable(labeldata, action) {
    var actionDetails = (action == "Search") ? $.trim($("#labelEditPopupaction").text()) : action;
    //manoj
    var Labels = [];
    var AutoLabels = [];
    var IsChecked = "";
    var IsDisabled = "";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = [];
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "18" && n.Status == "ON");
    });
    if (contractItem.Labels != null)
        Labels = $.map(contractItem.Labels.split(";"), $.trim);
    if (contractItem.AutoLabels != null)
        AutoLabels = $.map(contractItem.AutoLabels.split(";"), $.trim);
    var AllLabelCollection = Labels;
    $(AutoLabels).each(function (iAutoLabels, itemAutoLabels) {
        if ($.trim(itemAutoLabels) != "") {
            AllLabelCollection.push($.trim(itemAutoLabels));
        }
    });
    var obj1 = {
    };
    //manoj
    var FilterLabelCollection = [];
    $(AllLabelCollection).each(function (iAllLabel, itemAllLabel) {
        if (!(itemAllLabel in obj1)) {
            if ($.trim(itemAllLabel) != "") {
                FilterLabelCollection.push($.trim(itemAllLabel));
            }
        }
        obj1[itemAllLabel] = true;
    });
    $(FilterLabelCollection).each(function (iFilterLabel, itemFilterLabel) {
        var FilteredLabelsDetails = $.grep(labeldata, function (nFilteredLabel, iFilteredLabel) {
            return (nFilteredLabel.LabelTitle == itemFilterLabel);
        });
        if (FilteredLabelsDetails.length > 0) {
            if (AutoLabels.indexOf(FilteredLabelsDetails[0].LabelTitle) > -1 && vAccFeat.length > 0) {
                var arrLabelAvailable = $.grep(arrLabelCollection, function (nAvailable, iAvailable) {
                    return (nAvailable.Label == FilteredLabelsDetails[0].LabelTitle && nAvailable.Category == FilteredLabelsDetails[0].LabelCategory);
                });
                if (arrLabelAvailable.length == 0) {
                    var LabelDetails = {
                        Category: FilteredLabelsDetails[0].LabelCategory, Label: FilteredLabelsDetails[0].LabelTitle, Auto: true
                    };
                    arrLabelCollection.push(LabelDetails);
                }
            } else if (Labels.indexOf(FilteredLabelsDetails[0].LabelTitle) > -1 && (action == "Add" || action == "New")) {
                var arrLabelAvailable = $.grep(arrLabelCollection, function (nAvailable, iAvailable) {
                    return (nAvailable.Label == FilteredLabelsDetails[0].LabelTitle && nAvailable.Category == FilteredLabelsDetails[0].LabelCategory);
                });
                if (arrLabelAvailable.length == 0) {
                    var LabelDetails = {
                        Category: FilteredLabelsDetails[0].LabelCategory, Label: FilteredLabelsDetails[0].LabelTitle, Auto: false
                    };
                    arrLabelCollection.push(LabelDetails);
                }
            } else if (action != "Search") {
                var arrLabelAvailable = $.grep(arrLabelCollection, function (nAvailable, iAvailable) {
                    return (nAvailable.Label == FilteredLabelsDetails[0].LabelTitle && nAvailable.Category == FilteredLabelsDetails[0].LabelCategory);
                });
                if (arrLabelAvailable.length == 0) {
                    var LabelDetails = {
                        Category: FilteredLabelsDetails[0].LabelCategory, Label: FilteredLabelsDetails[0].LabelTitle, Auto: false
                    };
                    arrLabelCollection.push(LabelDetails);
                }
            }
        }
    });

    var FilteredLabels = [];
    if ($("#txtSearchLabel").val() != "") {
        FilteredLabels = $.grep(labeldata, function (nlabel, ilabel) {
            return (nlabel.LabelTitle.toLowerCase().indexOf($("#txtSearchLabel").val().toLowerCase()) > -1 || nlabel.LabelCategory.toLowerCase().indexOf($("#txtSearchLabel").val().toLowerCase()) > -1);
        });
    } else {
        FilteredLabels = labeldata;
    }
    if ($("#selCategoryFilter").val() != "All") {
        FilteredLabels = $.grep(FilteredLabels, function (nlabel, ilabel) {
            return (nlabel.LabelCategory == unescape($("#selCategoryFilter").val()));
        });
    }

    var lblRow = "";
    var relatedTag = [];
    $.each(FilteredLabels, function (key, row) {
        if (row.LabelTitle != "" && row.LabelTitle != null) {
            IsChecked = "";
            IsDisabled = "";
            if (Labels.length != 0 && $.inArray(row.LabelTitle, Labels) > -1) {

                if ($.inArray(row.LabelTitle, ContractLabels) == -1 && (action == "Add" || action == "New")) {
                    ContractLabels.push(row.LabelTitle);
                    IsChecked = "checked";
                }
                if (AutoLabels.length != 0 && $.inArray(row.LabelTitle, AutoLabels) > -1 && vAccFeat.length > 0) {
                    IsChecked = "checked";
                    IsDisabled = "disabled";
                }
            }
            if (ContractLabels.length != 0 && $.inArray(row.LabelTitle, ContractLabels) > -1) {
                IsChecked = "checked";
            }
            lblRow += "<tr><td ><input type='checkbox' " + IsChecked + "  id='chkLabel" + row.RowKey + "' name='chkLabel' value='" + row.LabelTitle + "' onchange='ChangeLableCheck(this)'";
            if (IsDisabled != "") {
                lblRow += "class='autodisabledlabel " + row.LabelCategory + "'";
                lblRow += "disabled='disabled'";
                lblRow += "data-category='" + row.LabelCategory + "'";
            } else {
                lblRow += "class='" + row.LabelCategory + "'";
                lblRow += "data-category='" + row.LabelCategory + "'";
            }
            lblRow += "'><label class='css-label margin-right8 lblSrchLabel'>" + row.LabelTitle + "</label></td><td><label class='css-label margin-right8 lblSrchLabel'>" + row.LabelCategory + "</label></td></tr>";
            relatedTag.push(row.LabelTitle);
        }
    });
    $("#txtSearchLabel").autocomplete({
        source: relatedTag,
        minLength: 1,
        focus: function (event, ui) {
            return false;
        },
        select: function (evn, uidetails) {
            $("#txtSearchLabel").val(uidetails.item.label);
            SearchLabels();
        }
    });
    $("#tblLabelPopup").html(lblRow);

    $('#compact-paginationLabel').pagination({
        items: $("#tblLabelPopup tr").length,
        itemsOnPage: 10,
        type: 'tbody',
        row: 'tr',
        typeID: 'tblLabelPopup',
        cssStyle: 'compact-theme'
    });

    if (action == 'New') {


        disablelabelbysearch();
        //manoj
        $("#loadingPage").fadeOut();
        $("#labelEditPopupaction").text("New");
        $("#labelEditPopup").dialog("option", "title", "Edit Label");
        $("#labelEditPopup").dialog("open");
        $("#labelEditPopup").height("auto");
    } else if (action == 'Add') {
        $("#loadingPage").fadeOut();
        $("#labelEditPopupaction").text("Add");
        $("#labelEditPopup").dialog("option", "title", "Add Label");
        $("#labelEditPopup").dialog("open");
        $("#labelEditPopup").height("auto");
    } else if (action == 'Search') {
        disablelabelbysearch();
    }
}

function ChangeLableCheck(item) {
    var LabelTitle = item.value;
    var CategoryName = $(item).attr('data-category');
    //manoj
    //var classList = $(item).attr('data-category');
    //$(LinkURL).attr('data-value')
    //manoj
    //var classList = item.className.split(' ');
    //$(classList).each(function (i, item) {
    //    if ($.trim(item) != "autodisabledlabel" && CategoryName == "") {
    //        CategoryName = $.trim(item);
    //    }
    //});
    //manoj
    var FilterdCategory = $.grep(LabelsCategories, function (nCategory, iCategory) {
        return (nCategory.LabelCategory == CategoryName && nCategory.Restrict == "Yes");
    });
    //manoj
    if ($(item).is(':checked')) {
        if ($.inArray(LabelTitle, ContractLabels) == -1) {
            ContractLabels.push(LabelTitle);
            var FinalizeDiable = $.grep(arrLabelCollection, function (ndisable, idisable) {
                return (ndisable.Category == CategoryName && ndisable.Label == LabelTitle);
            });
            if (FinalizeDiable.length == 0) {
                var LabelDetails = {
                    Category: CategoryName, Label: LabelTitle, Auto: false
                };
                arrLabelCollection.push(LabelDetails);
            }
        }
        if (FilterdCategory.length > 0) {
            if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length <= 1) {
                enbledisablelabel(LabelTitle, CategoryName, true);
            }
        }
    }
    else {
        ContractLabels = jQuery.grep(ContractLabels, function (value) {
            return value != LabelTitle;
        });
        arrLabelCollection = $.grep(arrLabelCollection, function (ndisable, idisable) {
            return ndisable.Label != LabelTitle;
        });
        if (FilterdCategory.length > 0) {
            if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length <= 1) {
                if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length == 1) {
                    var chaeckedlabel = "";
                    $('input:checkbox[data-category="' + CategoryName + '"]:checked').each(function () {
                        chaeckedlabel = this.value;
                    });
                    if (chaeckedlabel == LabelTitle) {
                        enbledisablelabel(LabelTitle, CategoryName, false);
                    } else {
                        enbledisablelabel(chaeckedlabel, CategoryName, true);
                    }
                } else if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length > 0) {
                    $(item).attr("disabled", "disabled");
                } else {
                    enbledisablelabel(chaeckedlabel, CategoryName, false);
                }
                //manoj
            } else {
                $('input:checkbox[data-category="' + CategoryName + '"]:not(:checked) ').attr("disabled", "disabled");
                $(".autodisabledlabel").attr("disabled", "disabled");
            }
        }
    }
}

function disablelabelbysearch() {
    var CategoriesCollection = [];
    $.each(arrLabelCollection, function (arrLabel) {
        if (arrLabel != null) {
            if ($.trim(arrLabelCollection[arrLabel].Category) != "") {
                CategoriesCollection.push($.trim(arrLabelCollection[arrLabel].Category));
            }
        }
    });
    var obj1 = {
    };
    //manoj
    var CategoriesList = [];
    $(CategoriesCollection).each(function (iCategories, itemCategories) {
        if (!(itemCategories in obj1)) {
            if ($.trim(itemCategories) != "") {
                CategoriesList.push($.trim(itemCategories));
            }
        }
        obj1[itemCategories] = true;
    });

    //manoj
    if (CategoriesList.length > 0) {
        $(CategoriesList).each(function (iCategoriesList, itemCategoriesList) {
            var SameCategoriesAutoLabel = $.grep(arrLabelCollection, function (narrSameLabel, iarrSameLabel) {
                return (narrSameLabel.Category == itemCategoriesList && narrSameLabel.Auto == true);
            });
            var SameCategoriesLabel = $.grep(arrLabelCollection, function (narrSameAutoLabel, iarrSameAutoLabel) {
                return (narrSameAutoLabel.Category == itemCategoriesList && narrSameAutoLabel.Auto == false);
            });
            if (SameCategoriesAutoLabel.length > 0 || SameCategoriesLabel.length > 0) {
                //if ((SameCategoriesLabel.length - SameCategoriesAutoLabel.length) >= 1) {
                //manoj
                var FilterdCategory = $.grep(LabelsCategories, function (nCategory, iCategory) {
                    return (nCategory.LabelCategory == itemCategoriesList && nCategory.Restrict == "Yes");
                });
                //manoj
                if (FilterdCategory.length > 0) {
                    //manoj
                    //$('input:checkbox[class=' + itemCategoriesList + ']').each(function () {
                    //manoj
                    $('input:checkbox[data-category="' + itemCategoriesList + '"]').each(function () {
                        //manoj
                        var selectedlabelvalue = this;
                        var enablelabeldetails = $.grep(arrLabelCollection, function (nenablelabel, ienablelabel) {
                            return (nenablelabel.Category == itemCategoriesList && nenablelabel.Auto == false && nenablelabel.Label == $.trim(selectedlabelvalue.value));
                        });
                        if (enablelabeldetails.length == 0) {
                            if (!this.checked) {
                                $(this).attr("disabled", "disabled");
                            }
                        } else if (SameCategoriesAutoLabel.length > 0) {
                            if (!this.checked)
                                $(this).attr("disabled", "disabled");
                        }
                    });
                    //manoj
                }
            }
        });
    }
    //manoj
}

function SearchLabels(isnew) {
    searchLabelsNew("Search");
}

function enbledisablelabel(labelvalue, CategoryName, action) {
    if (action) {
        //manoj
        $('input:checkbox[data-category="' + CategoryName + '"]').each(function () {
            //manoj
            if (labelvalue != $.trim(this.value)) {
                $(this).attr("disabled", "disabled");
            }
        });
    } else {
        //manoj
        $('input:checkbox[data-category="' + CategoryName + '"]').each(function () {
            $(this).removeAttr("disabled");
        });
        //manoj
        //$("." + CategoryName).removeAttr("disabled");
        $(".autodisabledlabel").attr("disabled", "disabled");
    }
}

function SaveLabel() {
    var allowtosave = false;
    var RestricedCategory = [];
    //manoj
    if ($("#labelEditPopupaction").text() == "New") {
        if (arrLabelCollection.length > 0) {
            var CategoriesCollection = [];
            $.each(arrLabelCollection, function (arrLabel) {
                if (arrLabel != null) {
                    if ($.trim(arrLabelCollection[arrLabel].Category) != "") {
                        CategoriesCollection.push($.trim(arrLabelCollection[arrLabel].Category));
                    }
                }
            });
            var obj1 = {
            };
            //manoj
            var CategoriesList = [];
            $(CategoriesCollection).each(function (iCategories, itemCategories) {
                if (!(itemCategories in obj1)) {
                    if ($.trim(itemCategories) != "") {
                        CategoriesList.push($.trim(itemCategories));
                    }
                }
                obj1[itemCategories] = true;
            });
            $(CategoriesList).each(function (iCategoriesList, itemCategoriesList) {
                //manoj
                var FilterdCategory = $.grep(LabelsCategories, function (nCategory, iCategory) {
                    return (nCategory.LabelCategory == itemCategoriesList && nCategory.Restrict == "Yes");
                });
                if (FilterdCategory.length > 0) {
                    var repeatedcategories = $.grep(arrLabelCollection, function (nrepeated, irepeated) {
                        return (nrepeated.Category == itemCategoriesList);
                    });
                    if (repeatedcategories.length > 1) {
                        var repeatedautocategories = $.grep(arrLabelCollection, function (nautorepeated, iautorepeated) {
                            return (nautorepeated.Category == itemCategoriesList && nautorepeated.Auto == true);
                        });
                        var repeatednormalcategories = $.grep(arrLabelCollection, function (nnormalrepeated, inormalrepeated) {
                            return (nnormalrepeated.Category == itemCategoriesList && nnormalrepeated.Auto == false);
                        });
                        if (repeatedautocategories.length > 0 && repeatednormalcategories.length > 0) {
                            RestricedCategory.push(itemCategoriesList);
                        } else if (repeatednormalcategories.length > 1) {
                            RestricedCategory.push(itemCategoriesList);
                        }
                    }
                }
            });
            if (RestricedCategory.length == 0) {
                allowtosave = true;
            }
        } else {
            allowtosave = true;
        }
        //manoj
    } else {
        allowtosave = true;
    }
    //manoj
    if (allowtosave) {
        var vLabels = "";
        $(ContractLabels).each(function () {
            if (vLabels == "") {
                vLabels = this.toString();
            }
            else {
                vLabels += "; " + this.toString();
            }
        });
        var contractRecord = "Labels=" + vLabels;
        contractRecord += "&ModifiedBy=" + localStorage.UserName;
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/label?contractid=' + vContractID,
            type: 'PUT',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
            },
            dataType: 'json',
            data:
                {
                    Labels: vLabels,
                    ModifiedBy: localStorage.UserName
                },
            cache: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            success: function (data) {
                $("#loadingPage").fadeOut();
                contractItem = data;
                BindContractLabels();
                $("#labelEditPopup").dialog("close");
            },
            error: function (data) {
            }
        });
    } else {
        var swalmessage = RestricedCategory.join(',');
        swalmessage = (swalmessage.trim().charAt(0) != ",") ? swalmessage.trim() : swalmessage.substr(1);
        swalmessage = swalmessage.trim();
        if (swalmessage.lastIndexOf(",") > -1) {
            swalmessage = swalmessage.substr(0, swalmessage.lastIndexOf(",")) + ' and ' + swalmessage.substr(swalmessage.lastIndexOf(",") + 1);
            $("#labelEditPopup").dialog("close");
            $("#loadingPage").fadeOut();
        }
        swal("", " '" + swalmessage.trim() + "' are restriced category.");
    }
}

// Contract Cover Sheet
function getcontractsummerytemplate(ContractType, SummeryBlobURL, action) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/summerytemplatebyctype?contype=' + encodeURIComponent(ContractType),
        type: 'GET',
        dataType: 'json',
        cache: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        //contentType: false,
        success: function (SummeryTemp) {
            if (action) {
                if (contractItem.Status != "Cancelled") {
                    var SummeryDocumentName = SummeryBlobURL.split('_');
                    $("#iStandardIcon").html('<label id="lblsummerydocumentpath" style="display:none"> ' + SummeryBlobURL + '</label><img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="openmenusummerydocument" />');
                    //manoj
                    $(".openmenusummerydocument").contextMenu({
                        menu: 'dropdownMenuSummery', leftButton: true
                    }, function (action, el, pos) {
                        contextMenuSummeryDocument(action, el.parent("i"), pos);
                    });
                    if (contractItem.Permission != "View" && contractItem.Status != "Archived" && contractItem.Status != "Expired") {
                        $(".clCoverSheet").css("display", "");
                        $("#hdnsummeryTempDocu").text("Yes");
                        $("#lisummarydocument").css("display", "");
                    } else {
                        $(".clCoverSheet").css("display", "none");
                        $("#hdnsummeryTempDocu").text("No");
                        $("#lisummarydocument").css("display", "none");
                    }
                }
            }
            else if (contractItem.Permission != "View" && contractItem.Status != "Cancelled" && contractItem.Status != "Archived" && contractItem.Status != "Expired") {
                $("#iStandardIcon").html('<img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="dropdownMenuGenerateSummery" />');
                $(".dropdownMenuGenerateSummery").contextMenu({
                    menu: 'dropdownMenuGenerateSummery', leftButton: true
                }, function (action, el, pos) {
                    contextMenuSummeryDocument(action, el.parent("i"), pos);
                });
                $("#hdnsummeryTempDocu").text("No");
                $("#lisummarydocument").css("display", "none");
            } else {
                $("#iStandardIcon").empty();
                $("#hdnsummeryTempDocu").text("No");
                $("#lisummarydocument").css("display", "none");
            }
        },
        error: function (SummeryTemp) {
            if (action) {
                var SummeryDocumentName = SummeryBlobURL.split('_');
                $("#iStandardIcon").html('<label id="lblsummerydocumentpath" style="display:none"> ' + SummeryBlobURL + '</label><img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="openmenusummerydocument" />');
                //manoj
                $(".openmenusummerydocument").contextMenu({
                    menu: 'dropdownMenuSummery', leftButton: true
                }, function (action, el, pos) {
                    contextMenuSummeryDocument(action, el.parent("i"), pos);
                });
                $(".clCoverSheet").css("display", "none");
                //manoj
                if (contractItem.Permission != "View") {
                    $("#hdnsummeryTempDocu").text("Yes");
                    $("#lisummarydocument").css("display", "");
                } else {
                    $("#hdnsummeryTempDocu").text("No");
                    $("#lisummarydocument").css("display", "none");
                }
                //manoj
            } else {
                $("#iStandardIcon").empty();
                $("#hdnsummeryTempDocu").text("No");
                $("#lisummarydocument").css("display", "none");
            }
        }
    });
}

function contextMenuSummeryDocument(action, el, pos) {
    switch (action) {
        case 'editO365': {
            ViewSummeryDocument($(el).find("#lblsummerydocumentpath").text());
            break;
        }
        case 'replace': {
            generatecoversheet('regenerate');
            break;
        }
        case 'genetarecover': {
            generatecoversheet('generate');
            break;
        }
        case 'download': {
            var LinkURL = decodeURIComponent($(el).find("#lblsummerydocumentpath").text());
            location = LinkURL;
            break;
        }
    }
}

function ViewSummeryDocument(docurl) {
    srcurl = "https://view.officeapps.live.com/op/embed.aspx?src=" + docurl + "?" + randomString() + "=" + randomString() + "&wdStartOn=1";
    window.open(srcurl);
}

function generatecoversheet(objvalue) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/summerytemplate?contractid=' + contractItem.RowKey + '&contracttype=' + encodeURIComponent(contractItem.ContractType),
        type: 'POST',
        dataType: 'json',
        headers: {
            'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName
        },
        cache: false,
        success: function (SumDocu) {
            //manoj
            coversheet_trigger(objvalue);
            //manoj
        },
        error: function (SumDocu) {
            $("#loadingPage").fadeOut();
        }
    });
}

function coversheet_trigger(objvaluetrigger) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/automationcoversheet?coversheetid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        //async: false,
        success: function (data) {
            if (data != null && data.length > 0) {
                coversheet_init(objvaluetrigger);
            } else {
                if (objvaluetrigger == 'generate') {
                    swal("", "Cover sheet document has been generated for this contract.");
                } else {
                    swal("", "Cover sheet document has been regenerated for this contract.");
                }
                GetSummeryDocument(contractItem.RowKey);
            }
        },
        error: function (SumDocu) {
            if (objvaluetrigger == 'generate') {
                swal("", "Cover sheet document has been generated for this contract.");
            } else {
                swal("", "Cover sheet document has been regenerated for this contract.");
            }
            GetSummeryDocument(contractItem.RowKey);
        }
    });
}

function GetSummeryDocument(vconid) {
    //manoj
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vCoverSheet = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "23" && n.Status == "ON");
    });
    if (vCoverSheet.length > 0) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + vconid,
            type: 'GET',
            cache: false,
            contentType: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID
            },
            processData: false,
            success: function (item) {
                vContractTile = item.ContractTitle;
                contractItem = item;
                if (contractItem.SummeryBlobURL != null && contractItem.SummeryBlobURL != "") {
                    var SummeryDocumentName = contractItem.SummeryBlobURL.split('_');
                    $("#iStandardIcon").html('<label id="lblsummerydocumentpath" style="display:none"> ' + contractItem.SummeryBlobURL + '</label><img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="openmenusummerydocument" />');
                    //manoj
                    $(".openmenusummerydocument").contextMenu({
                        menu: 'dropdownMenuSummery', leftButton: true
                    }, function (action, el, pos) {
                        contextMenuSummeryDocument(action, el.parent("i"), pos);
                    });
                    $(".clCoverSheet").css("display", "");
                    $("#hdnsummeryTempDocu").text("Yes");
                    $("#lisummarydocument").css("display", "");
                } else {
                    $("#iStandardIcon").html('<img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="dropdownMenuGenerateSummery" />');
                    $(".dropdownMenuGenerateSummery").contextMenu({
                        menu: 'dropdownMenuGenerateSummery', leftButton: true
                    }, function (action, el, pos) {
                        contextMenuSummeryDocument(action, el.parent("i"), pos);
                    });
                    $("#hdnsummeryTempDocu").text("No");
                    $("#lisummarydocument").css("display", "none");
                }
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        $("#loadingPage").fadeOut();
        $("#iStandardIcon").empty();
        $("#hdnsummeryTempDocu").text("No");
        $("#lisummarydocument").css("display", "none");
    }
}

function coversheet_init(objinit) {
    setTimeout('coversheet_trigger("' + objinit + '")', 5000);
}