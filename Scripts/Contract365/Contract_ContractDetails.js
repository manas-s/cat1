var articleSystemMileStone = '';
var articleDocumentMileStone = '';
var articleMileStone = '';
var articleObligationMileStone = '';
var flag = true;
var arrUser = [];
var delayedTermDates = "";
var arrGlobalUser = [];
var arrPermsnUser = [];
var arrAdminUser = [];
var vContractID = "";
var vContractTile = "";
var contractItem;
var SettingUserRole = "";
var strSelectedContractType = "";
var SaveDraftInCloud = "";
var SaveFinalInCloud = "";
var AllowSaveDraftInCloud = "";
var thisContractAreaSettings;
var businessAreaPath = "";
var settingRenewable = false;
var lstSelectedLabels = "";
var tmpSelectedLabels = "";
var vCurrencyDisplayStyle = "";
var projMgrs = '';
var listAllObligations = "";
var listObligationsGroup = "";
var listAllObligationCatalogs = "";
var inrefreshState = false;
var droppedfiles = [];
var cTitle = null;
var cFlag = null;
var removedItems = [];
var connamechecking = null;
var defaultGlobalSettings = "";
var vGlobalObjForGeneric = "";
var fileurldetails = "";
var urldetailsforcontact = "";
var ExitDocuemntName = "";
var contractAccessUsers = [];
var multipleChecksDocumentIDd = [];
var myArrayRU = [];
var arrprevRU = [];
var myCounterPartyArray = [];
var CounterPartyArrayprev = [];
var amendmentcompletedchecking = false;
var lblcontracttitle = "";
var lblcontracttitledescription = "";
var DocumentCount = 0;
var ContractDocumentDetails = [];
var Collectcontractdocument = false;
var projectManager = "";
var arrRelatedcontractRowkey = [];
var RelatedContractRelationShipTypeparent = "";
var docInAutomationList = "";
var changedocumentstatusbyid = "";
var pendingStarted = false;
//var counterpartydetailstofetch = [];
var legalentitydetailstofetch = [];
//var counterpartycollection = [];
var recipientsArray = [];
var reportRecipientsDuplicate = [];
var arremail = [];
var isTermSetting = false;
var ContractCurrencyType = "";
var PrvRelatedCounterparities = [];
var arrRelatedCounterparities = [];
var curRelatedCounterparities = [];
var arrClausegroup = [];
var arrClauseLangage = [];
var arrfinalclauselanguage = [];
var arrfinalclauselanguagesave = [];
var arrPrvwClause = [];
var arrChangestoSave = [];
var arrforeditandcancel = [];
var contrcttypeselection = [];
var areaforclause12 = null;
var countareaforclause = 1;
var GroupCollectionforclause = [];
var areaaa = null;
var DocumnetTemplateCollection = [];
var Taglanguagecollection = [];
var DatepickerFormat = '';
var AmendmentidtoPass = "";
var MakeFinalized = "No";
var workflowurltoshowDOCUMENT = "";
var workflowurltoshowCONTRACT = "";
var dropexitfilename = [];
var vURLDoc = "";
var vRawURLDoc = "";
var thisDocumentLibrarySettings;
var vDefaultAmendment = "";
var DocSignCompState = ["signed", "Completed"];
var vUserListG = '';
//Related Contract
var selecteddocumententity;
var addbuttonclick = false;
var oldRelatedcontract = '';
var SavedRelatedContract = [];
var arroldRelatedcontract = [];
var arrRelatedContracts = [];
var arrObligationCatelog = [];
var vProviderDocSign = '';
var RightSignatureFlag = false;
//Related Contract
var Folderselection = "";
var PrvFolderselection = "";
var parentdocid = "";
var parentdocname = "";
var ContractRoles = [];
var IsPipeline = true;
var articleDocuments = "";
var DocVersion = "";
var Stage = '';
var selectedamnddoc = false;
var selectedamnddocname = [];
var ContractLabels = [];
//manoj
var documentview = "";
var vMetadatavaluetobindcutomFinancial;
var cutomFinancialFields = [];
var thisBusinessAreaName = "";
var thisContractAreaName = "";
var thisBusinessAreaNameC = "";
var thisContractAreaNameC = "";
var thisBusinessAreaNameRowKey = "";
var thisContractAreaNameRowKey = "";
var thisBusinessAreaPath = '';
var FullContractroleUser = [];
var ReadContractroleUser = [];
var ReadWriteContractroleUser = [];
//manoj
//Sridhar
var ContractStatus = "";
var TermTypeDisplayName = {};
//manoj
//Bind Term Type
var TermTypeBinded = false;
//Bind Term Type
//manoj
var RelationshipTypes = [];
var currentPanel = "";
var OlRelatedContracts = [];
var arrRelatedContractsSelected = [];
//manoj
var LabelsCategories = [];
var arrLabelCollection = [];
//manoj
var hashtable = {};
//var isPermissionView = false;
var LeagalEntity;
var strSelCounterPartyField = "";
var obligationProducts = "";
var parentfolderidtopass = "";
var dropdownlength = 0;
var uploadedfilecount = 0;
var contractparentfolderid = "";
var listRelatedContracts = [];
//Added from 2.4final to 2.4
var UpComingNotes = '';
var UpcomingChecklist = '';
var TermName = "";
//suren
var vWorkflowItem = "";
var vTaskID = "";
var vContractRenewalHistory = [];
var vSliderCounter = 0;
// end
var setting_AuthorizeSign = "";//Authorize Signatory Enhancment

$(document).ready(function () {
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    if (veContractFeatures == null) {
        GetFeaturesInDetailPage();
    }
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "2" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        if ($("#ddlHistoryFilter option[value='Obligation']").length <= 0)

            $('ddlHistoryFilter').append('<option val="Obligation">Obligation</option>');

    } else {

        if ($("#ddlHistoryFilter option[value='Obligation']").length > 0)
            $("#ddlHistoryFilter option[value='Obligation']").remove();

    }
    $('#idDocumentPopup').css("display", "none");
    $("#divBtn").hide();
    $('#catalogAmountsumaryValue').autoNumeric('init');
    $('#catalogAmountsumaryValueEdit').autoNumeric('init');
    //$('#txtContractValuepopup').autoNumeric('init');
    $('#txtObligationProductAmountNew').autoNumeric('init');
    $('#txtObligationProductAmountNewActual').autoNumeric('init');
    $('#txtObligationProductAmountNewEdit').autoNumeric('init');
    $('#txtObligationProductAmountNewActualEdit').autoNumeric('init');

    $(".FL_Obligations").hide();
    $("#MilestoneEnable").hide();
    var vTab = getParameterByName("Tab");
    if (vTab == 'Activity')
        ShowTabDetail('Activity');
    else if (vTab == 'Notes')
        ShowTabDetail('Notes');
    else if (vTab == 'TermsClause')
        ShowTabDetail('TermsClause');

    vContractID = getParameterByName("ContractID");
    //manoj

    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "20" && n.Status == "ON");
    });
    var details = "";
    if (vDocLibFeat.length > 0) {
        //Tab width decrease
        if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
            $(".borderTop_Right_none").addClass('newdocview');
        }
        //Tab width decrease
        details += '<div class="row-group"><div class="col11 no-pad"><div class="col7"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a><a href="javascript:void(0);" id="documentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder" style="display:none"><img src="/Content/Images/add-icon.png">Add Folder</a><a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="../Content/Images/icon/drop.png" style="height:14px !important;"></a></div>'
               + '<div class="col2" style="width: 12%;padding: 0;"><ul id="ulFolderDocumentView" class="tab"><li style="display:inline-block;"><a href="javascript:void(0);" id="listfolderdocumentview" class="tablinks group-wit-btn active" data-value="folder" onclick="DisplayDocument(\'folder\')"><img src="/Content/Images/folder-view.png" title="Displays Folder(s) and Documents(s) associated with Contract Record"></a></li><li style="display:inline-block; margin-left:-1px;"><a href="javascript:void(0);" id="listdocumentview" data-value="document" class="tablinks group-wit-btn" onclick="DisplayDocument(\'document\')"><img src="/Content/Images/list-view.png" title="Displays Documents(s) associated with Contract Record"></a></li></ul></div><div id="dvdocumentkeyword" style="width: 29%; float:left"><input style="width: 72%;float: left;padding: 5px 27px 5px 5px; border: 1px solid #ccc!important;" id="txtdocumentkeyword" name="keyword" placeholder="Document(s) Search" class="topSearchBox validelement" type="text"><img class="poPSear" style="cursor: pointer;position: relative;left: -62px;top: 1px;padding: 4px 0px 5px 5px;" onclick="javascript:SearchDocumentKeyword();" src="/Content/Images/search1.png"><a href="javascript:void(0)" class="linkPickerClear" style="float: left;display: block;margin-left: 4px!important;margin-top: 7px!important;" onclick="ClearDocumentKeyword();">Clear</a></div></div>'
               + '<div class="col1 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2><div class="row-group"><div class="col12"><div id="holder" style="width:100%;"><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
        $("#dvtabDocumentView").html(details);
        //$("#dvtabSummaryDocumentView").html('<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Primary and Pinned Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');">Primary and Pinned Document(s) (<i id="lblPinDocumentsCount"></i>)</a><a href="javascript:void(0);" id="pindocumentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a></div><div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');"><img id="imgPindoc" src="/Content/Images/e-open.png"></a></div></div><div class="row-group pad-top"><div class="col12"><div style="width:100%;"><div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissing"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Documents\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div><ul class="ul-data" id="ulPinDocumentLoading"></ul><ul class="ul-data" id="ulPinDocument"></ul></div></div><div id="dvPinDocument" class="col12 pad-top"></div></div>');
        $("#dvtabSummaryDocumentView").html('<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Primary and Pinned Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');">Primary and Pinned Document(s) (<i id="lblPinDocumentsCount"></i>)</a><a href="javascript:void(0);" id="pindocumentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a></div><div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');"><img id="imgPindoc" src="/Content/Images/e-open.png"></a></div></div><div class="row-group pad-top"><div class="col12"><div style="width:100%;"><div class="wmessage clearfix clpendingaction" style="display:none;margin-left:35%;margin-top:-26px;margin-bottom:39px;"><table id="tblDocumentMissing"></table></div><ul class="ul-data" id="ulPinDocumentLoading"></ul><ul class="ul-data" id="ulPinDocument"></ul></div></div><div id="dvPinDocument" class="col12 pad-top"></div></div>'); //ENH 23  Minor Enhancement Specs-Rahul  
        $("#hdnnewdocumentfeature").text("Yes");
        $("#litabDocumentView").css("display", "");
        //manoj
        if (documentview == null || documentview == "" || documentview == 'folder') {
            $("#btnaddnewsubfolder").css("display", "");
        }
        $('#txtdocumentkeyword').keypress(function (e) {
            if (e.keyCode == 13) {
                SearchDocumentKeyword();
            }
        });
        //manoj
    } else {
        //Tab width increase
        if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
            $(".borderTop_Right_none").removeClass('newdocview');
        }
        //Tab width increase
        details += '<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv( \'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder"><img src="/Content/Images/add-icon.png">Add Folder</a><a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="../Content/Images/icon/drop.png" style="height:14px !important;"></a></div>'
        + '<div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissingNormal"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Missing\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2>'
        + '<div class="row-group"><div class="col12"><div id="holder" style="width:100%;"><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
        $("#dvtabSummaryDocumentView").html(details);
        $("#hdnnewdocumentfeature").text("No");
        $("#litabDocumentView").css("display", "none");
    }
    details = "";
    //dynamic holder binding value
    holder = document.getElementById('holder');
    holder.ondragover = function (e) {
        if (document.getElementById("btnAddContractDocument").style.display != "none") {
            e.preventDefault();
            document.getElementById("holder").style.border = "2px dashed #428bca ";
            $("#ulDocument").css("min-height", "100px");
            document.getElementById("holder").style.opacity = "0.5";
            e.dataTransfer.setData('text/html', "You dragged the image!");
        }
    };
    holder.ondragend = function () { this.className = ''; return false; };
    holder.ondragleave = function () {
        document.getElementById("holder").style.border = "2px dashed white";
        $("#ulDocument").css("min-height", "0px");
        $('#holder').css("opacity", "1");
        $('#holder').css("pointer-events", "auto");
    };
    var totalfiles = "";
    holder.ondrop = function (e) {
        if (contractItem.Permission != 'View' && contractItem.Permission != '' && contractItem.Permission != null) {
            $("#loadingPage").fadeIn();
            this.className = '';
            e.preventDefault();
            var files = e.dataTransfer.files;
            var fileslength = files.length;
            //if (document.getElementById("tbBulkControls").rows.length < 6) {
            //if (fileslength <= 5) {
            for (var i = 0; i < fileslength; i++) {
                droppedfiles.push(files[i]);
            }
            totalfiles = files;
            removedItems = [];
            readfiles(files);
            if (droppedfiles.length > 0) {
                $(".cldraganddrop").css('display', 'none');
                $('#btnBulkUploadSave').css('display', '');
                $('#btnBulkUploadCancel').css('display', '');
                $("#bulkuploaddoc").dialog("option", "title", "Bulk Document Upload");
                $("#bulkuploaddoc").dialog("open");
                $("#bulkuploaddoc").height("auto");
                applybulkdocumetdraganddrop();
            }
            else {
                document.getElementById("holder").style.border = "2px dashed white";
                $("#ulDocument").css("min-height", "100px");
                $('#holder').css("opacity", "1");
                $('#holder').css("pointer-events", "auto");
            }
            $("#loadingPage").fadeOut();
            //}
            //else {
            //    $("#loadingPage").fadeOut();
            //    swal("", "Maximum 5 file(s) only allowed at a time....!");
            //    document.getElementById("holder").style.border = "2px dashed white";
            //    $("#ulDocument").css("min-height", "0px");
            //    $('#holder').css("opacity", "1");
            //    $('#holder').css("pointer-events", "auto");
            //}
            // }
            //else {
            //    $("#loadingPage").fadeOut();
            //    swal("", "Maximum 5 file(s) only allowed at a time....!");
            //    document.getElementById("holder").style.border = "2px dashed white";
            //    $("#ulDocument").css("min-height", "0px");
            //    $('#holder').css("opacity", "1");
            //    $('#holder').css("pointer-events", "auto");
            //}
        }
    }
    $('#btnAddContractDocument').click(function () {
        $("#lblTemplateDescription").text("");
        $('#addNewDocument').css("pointer-events", "auto");
        AddContractDocument();
        addbuttonclick = true;
    });

    //manoj
    ko.applyBindings(uploaders);
    //manoj

    $('#btnaddnewsubfolder').click(function () {
        //manoj
        if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
            $(this).attr("placeholder", "Enter New sub-folder name");
            $("#dvfoldercreation").dialog("option", "title", "Create Sub-folder");
        } else {
            $(this).attr("placeholder", "Enter folder name");
            $("#dvfoldercreation").dialog("option", "title", "Create Folder");
        }

        var selectedparentdocument = "";
        var headerid = $("#lblContractTitle").text();
        headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
        selectedparentdocument = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        selectedparentdocument = (selectedparentdocument.charAt(0) != '/') ? '/' + selectedparentdocument : selectedparentdocument;
        selectedparentdocument = ((selectedparentdocument.substr(selectedparentdocument.length - 1)) != "/") ? selectedparentdocument + "/" : selectedparentdocument;
        selectedparentdocument = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? selectedparentdocument + $('#showAll').text().replace(/ \/ /g, '/') + '/' : selectedparentdocument + headerid + '/';
        $("#hdnnewfolderurl").val(selectedparentdocument);
        $("#hdnnewfoldercreatedfrom").val("detailspage");
        $("#txtnewfoldervalue").removeClass('error');
        $("#errormsg_txtnewfoldervalue").remove();
        //$("#dvfoldercreation").dialog("option", "title", "Create Folder");
        $("#dvfoldercreation").dialog("open");
    });
    //dynamic holder binding value
    //manoj

    BindUserRoles();
    try {

        BindContractDetails(vContractID);
    } catch (e) {
        $("#loadingPage").fadeOut();
    }
    BindRelatedContracts(vContractID);
    CreateContractAlertList(vContractID);
    BindDocument(vContractID);
    //manoj
    if (vDocLibFeat.length > 0) {
        CreateDocumentListPinView(vContractID);
    }

    GetContractPendingAction(false);
    //manoj

    TermsAndClauseDocument(vContractID);
    BindMilestone(vContractID);
    GetContractActivities(vContractID);
    BindNotes(vContractID);
    GetInnerFeatures();
    BindO365LibrarySettings();
    BindPeople();
    BindMilestoneTypes();
    BindObligationTypes();
    BindAmendmentTypes(vContractID);
    BindCurrencies();
    BindUnitTypes();
    //Sridhar 
    BindTermTypes();
    BindContractRelationships();
    $("#dvfileDisplay").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Cancel Contract Record",
        dialogClass: "popup_width100",
        modal: true
    });
    DefaultGlobalsettingsDP();
    var ContractDetailsTextarea = new nicEditor({ buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml'] }).panelInstance('txtNotes');
    var ContractApprovalTextarea = new nicEditor({ buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml'] }).panelInstance('txtComment');
    var ContractApprovalRenewTextarea = new nicEditor({ buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml'] }).panelInstance('txtCommentRenew');
    var SendCopyNotes = new nicEditor({ buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml'] }).panelInstance('txtSendCopyNotes');
    var TaskComment = new nicEditor({ buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'removeformat', 'hr', 'indent', 'outdent', 'link', 'unlink', 'forecolor', 'bgcolor', 'xhtml'] }).panelInstance('txtTaskComment');

    $('.nicEdit-panelContain').parent().width('100%');
    $('.nicEdit-panelContain').parent().next().width('100%');
    $('.nicEdit-main').width("99%");

    docInAutomationList = "";
    $('.AlertEnabled .Toggle').click(function () {
        //EnableSlider()
        var obj = jQuery(this).parent();
        $(obj).toggleClass('switch_enable').toggleClass('switch_disable');
        if ($(obj).hasClass('switch_enable')) {
            obj.children('input').val('Yes').change();
        }
        else {
            obj.children('input').val('No').change();
        }
    });
});
//*Harshitha
$(window).on('load', function () {
    $('.nicEdit-panelContain').parent().width('100%');
    $('.nicEdit-panelContain').parent().next().width('100%');
    $('.nicEdit-main').width("99%");
    // $('.NotesNicedit .nicEdit-main').parent("div").css('max-width', $('.nicEdit-panelContain').parent().width());

    if ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) {
        $('#ulPinDocument li b').css({ cursor: 'default' });
        $('#ulPinDocument li b img').css({ cursor: 'default' });
    }

});

function BindO365LibrarySettings() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/getdocumentsettings',
        type: 'GET',
        dataType: 'json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (librarysettings) {
            if (librarysettings.AllowSaveDraftInCloud == "on") {
                AllowSaveDraftInCloud = "on";
                if ($("input:radio[name=IsFinalized]:checked").val() == "Yes") {
                    if (librarysettings.SaveFinalInCloud == "on") {
                        SaveFinalInCloud = "on";
                    } else {
                        SaveFinalInCloud = "off";
                    }
                }
                else {
                    if (librarysettings.SaveDraftInCloud == "on") {
                        SaveDraftInCloud = "on";
                    }
                    else {
                        SaveDraftInCloud = "off";
                    }
                }
            }
            else {
                AllowSaveDraftInCloud = "off";
                SaveFinalInCloud = "off";
                SaveDraftInCloud = "off";
            }
        },
        error: function () {

        }
    });
}
function BindSettings() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/userrolesetting',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            if (data.length != 0) {
                SettingUserRole = data[0].UserRoleSetting;
            }
        },
        error: function (data) {
        }
    });
}
function AddRolesddl(controlname) {

    var roleoption = "";
    if (SettingUserRole == "")
        BindSettings();
    var rolestype = SettingUserRole;
    $(SettingUserRole).find('Roles').each(function () {
        var role = $(this).find('Role').text();
        if ($("#" + controlname + " option[value='[" + role + "]']").length == 0) {
            roleoption += '<option value="[' + role + ']">[' + role + ']</option>';
        }
    })
    var html = $("#" + controlname).html();
    html = roleoption + html;
    $("#" + controlname).html(html);
}
function BindUserRoles() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/userrolesetting',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            if (data.length != 0) {
                SettingUserRole = data[0].UserRoleSetting;
                vDefaultAmendment = data[0].DefaultAmendment;
            }
        },
        error: function (data) {
        }
    });
}
function GetInnerFeatures() {
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "10" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_Catalog").css('display', '');
    }
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "2" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_Obligations").css('display', '');
        GetObligationCatalogs();

    }
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "13" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_Correspondence").css('display', '');
        BindCorrespondence(vContractID);
    }
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "9" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_Share").css('display', '');
        $(".FL_Share").addClass('Contribute');
    } else {
        $(".FL_Share").css('display', 'none');
        $(".FL_Share").removeClass('Contribute');
    }

    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "17" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $(".FL_TermsClauses").css('display', '');
    } else {
        $(".FL_TermsClauses").css('display', 'none');
    }
}

$(document).ready(function () {

    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1");
    });
    if (vAccFeat.length > 0) {
        var vConfig = vAccFeat[0].Configuration;
        vProviderDocSign = $(vConfig).find('Provider').text();
        if (vProviderDocSign == "Right Signature")
            RightSignatureFlag = true;
        else
            RightSignatureFlag = false;
    }

    DatepickerFormat = '';
    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
    { DatepickerFormat = 'mm/dd/yy'; }
    else { DatepickerFormat = localStorage.AppDateFormat.toLowerCase().slice(0, -2); }
    $(".openmenuValue").contextMenu({ menu: 'dropdownMenuEdit', leftButton: true }, function (action, el, pos) { contextMenuValue(action, el, pos); });
    $(".openmenuPeople").contextMenu({ menu: 'dropdownMenuEdit', leftButton: true }, function (action, el, pos) { contextMenuPeople(action, el, pos); });
    $(".openmenuCatalogMul").contextMenu({ menu: 'dropdownMenuRelatedCatalogsMulAction', leftButton: true }, function (action, el, pos) { contextMenuCatalogMul(action, el.parent("tr"), pos); });
    $(".openmenuObligationCatalogSettings").contextMenu({ menu: 'dropdownMenuObligationCatalogSettings', leftButton: true }, function (action, el, pos) {

        contextMenuObligationCatalogMul(action, el.parent("tr"), pos);
        action.preventDefault();
    });
    $(".openmenuObligationFinancialsSettings").contextMenu({ menu: 'dropdownMenuObligationCatalogSettings', leftButton: true }, function (action, el, pos) { contextMenuObligationFinancialsMul(action, el.parent("tr"), pos); action.preventDefault(); });
    $(".openmenuObligationNewMul").contextMenu({ menu: 'dropdownMenuObligationNewSettings', leftButton: true }, function (action, el, pos) { contextMenuObligationNewMul(action, el.parent("tr"), pos); });
    $(".openmenuMilestoneNewMul").contextMenu({ menu: 'dropdownMenuMilestoneNewSettings', leftButton: true }, function (action, el, pos) { contextMenuMilestoneNewMul(action, el.parent("tr"), pos); });
    $(".openmenuDocumentMultiActions").contextMenu({ menu: 'dropdownMenuDocumentMultiActions', leftButton: true }, function (action, el, pos) { contextMenuDocumentMultiActions(action, el, pos); });
    $(".openmenuDocumentSort").contextMenu({ menu: 'dropdownMenuDocumentSort', leftButton: true }, function (action, el, pos) { contextMenuDocumentSort(action, el.parent("a"), pos); });


    allowOnlyNumberInInputBox("txtOccurrenceCount");

    allowOnlyNumberInInputBox("txtReminder1");
    allowOnlyNumberInInputBox("txtReminder2");
    allowOnlyNumberInInputBox("txtReminder3");

    allowOnlyNumberInInputBox("txtReminder1New");
    allowOnlyNumberInInputBox("txtReminder2New");
    allowOnlyNumberInInputBox("txtReminder3New");

    allowOnlyNumberInInputBox("txtSendRenewReminderDay1");
    allowOnlyNumberInInputBox("txtSendRenewReminderDay2");
    allowOnlyNumberInInputBox("txtSendRenewReminderDay3");

    allowOnlyNumberInInputBox("txtReminder1MilestoneNew");
    allowOnlyNumberInInputBox("txtReminder2MilestoneNew");
    allowOnlyNumberInInputBox("txtReminder3MilestoneNew");


    allowOnlyNumberInInputBox("txtReminder1Edit");
    allowOnlyNumberInInputBox("txtReminder2Edit");
    allowOnlyNumberInInputBox("txtReminder3Edit");
    allowOnlyNumberInInputBox("txtCommitmentsMinQtyUnitsEdit");
    allowOnlyNumberInInputBox("txtCommitmentsMaxQtyUnitsEdit");
    allowOnlyNumberInInputBox("txtCommitmentsMinAmountUnitPriceEdit");
    allowOnlyNumberInInputBox("txtCommitmentsMaxAmountUnitPriceEdit");

    allowOnlyNumberInInputBox("txtCommitmentsMinQtyUnits");
    allowOnlyNumberInInputBox("txtCommitmentsMaxQtyUnits");
    allowOnlyNumberInInputBox("txtCommitmentsMinAmountUnitPrice");
    allowOnlyNumberInInputBox("txtCommitmentsMaxAmountUnitPrice");


    allowOnlyNumberInInputBox("txtTransactionID");
    allowOnlyNumberInInputBox("txtTransItems");
    allowOnlyNumberInInputBox("txtTransAmount");


    allowOnlyNumberInInputBox("txtObligationCatalogQtyEdit");
    allowOnlyNumberInInputBox("txtObligationCatalogQtyNewEdit");
    allowOnlyNumberInInputBox("txtObligationCatalogQtyNew");
    allowOnlyNumberInInputBox("txtObligationCatalogQty");

    //manoj
    allowOnlyNumberInInputBox("txtShareExpInContract");
    allowOnlyNumberInInputBox("txtDuration");
    allowOnlyNumberInInputBox("txtShareExpIn");
    //manoj

    allowOnlyNumberInInputBox("txtExpIn");
    $('#dtObligationNewDueDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        onSelect: function (dateText, inst) {
            GetObligationdynamicRecurrenceCount();
            ObligationDueDateSlectedEvent(this);
        },
    });

    allowOnlyNumberInInputBox("txtProductUnitPrice");
    $('#dtObligationNewCompletedDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $("#dvCancelContract").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Cancel Contract Record",
        dialogClass: "popup_width100",
        buttons: {
            "OK": function () {
                CancelContract();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        modal: true
    });
    $('#dtObligationProductCompletedDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });


    $('#dtObligationProductCompletedDateEdit').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });



    $("#txtContractEndDateAfterAmend").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $("#txtContractEndDateCurrent").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });
    $("#dtAmendmentEffectiveDate").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $('#lblNextRenewalDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        minDate: -1,
    }).click(function () { $(this).focus() });

    $('#lblTermEndDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        minDate: -1,
    }).click(function () { $(this).focus() });

    $("#popupPriceBreakDown").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Manage Contract Price Breakdown",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { if (modalOnOpenPriceBreakdown()) { } },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#RenewalTermNew").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Renewal Term",
        dialogClass: "popup_width100",

        buttons: {
            "Save": function () { },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#browseGeneric").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        modal: true,
        dialogClass: "popup_width100",
        buttons: {
            "OK": function () {
                var s = false;
                var vCoounterparty = "";

                var my_data = $(this).data('param_1')
                var listgenricselection = "";
                if (multipleChecksDocumentIDd != null) {
                    listgenricselection = "";
                    $(multipleChecksDocumentIDd).each(function (i, rule) {
                        listgenricselection += ";" + rule;
                    });
                    if (listgenricselection.charAt(0) == ";") {
                        listgenricselection = listgenricselection.substr(1);
                    }
                    $('#' + my_data).val(listgenricselection);
                    listgenricselection = "";
                    multipleChecksDocumentIDd = [];
                    $('#liSelectedRU').empty();
                    s = true;
                    $(this).dialog("close");
                } else {
                    swal({
                        title: '',
                        text: "No item has been selected,Do you want to continue?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                function (confirmed) {
                    if (confirmed) {
                        listgenricselection = '';
                        $('#' + my_data).val('');

                        s = false;
                        $("#browseGeneric").dialog("close");
                    }
                    else {
                        $("#browseGeneric").dialog("open");
                    }
                });
                }


            },
            Cancel: function () {
                multipleChecksDocumentIDd = [];
                $('#liSelectedRU').empty();
                $(this).dialog("close");
            }
        }
    });

    //$("#PopulatePendingActionsPopup").dialog({
    //    autoOpen: false,
    //    width: "70%",
    //    title: "Contract Delayed Tasks",
    //    dialogClass: "popup_width100",
    //    modal: true,
    //    buttons: {
    //        "ok": function () { $(this).dialog("close"); },
    //    }
    //});

    $("#browseGeneric").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        modal: true,
        dialogClass: "popup_width100",
        buttons: {
            "OK": function () {
                var s = false;
                var vCoounterparty = "";

                var my_data = $(this).data('param_1')
                var listgenricselection = "";
                if (multipleChecksDocumentIDd != null) {
                    listgenricselection = "";
                    $(multipleChecksDocumentIDd).each(function (i, rule) {
                        listgenricselection += ";" + rule;
                    });
                    if (listgenricselection.charAt(0) == ";") {
                        listgenricselection = listgenricselection.substr(1);
                    }
                    $('#' + my_data).val(listgenricselection);
                    listgenricselection = "";
                    multipleChecksDocumentIDd = [];
                    $('#liSelectedRU').empty();
                    s = true;
                    $(this).dialog("close");
                } else {
                    swal({
                        title: '',
                        text: "No item has been selected,Do you want to continue?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                function (confirmed) {
                    if (confirmed) {
                        listgenricselection = '';
                        $('#' + my_data).val('');

                        s = false;
                        $("#browseGeneric").dialog("close");
                    }
                    else {
                        $("#browseGeneric").dialog("open");
                    }
                });
                }


            },
            Cancel: function () {
                multipleChecksDocumentIDd = [];
                $('#liSelectedRU').empty();
                $(this).dialog("close");
            }
        }
    });

    $("#dialogDelay").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Missing Information",
        dialogClass: "popup_width100",
        modal: true,
        buttons: [
        {
            text: "Update",
            "id": "btnPendingUpdate",
            "class": "Contribute",
            click: function () {
                //manoj
                var idSelected = $("#dialogDelay .pop_up__Acti").attr("id");
                idSelected = idSelected.replace('li', '');
                switch (idSelected) {
                    case 'Required':
                        {
                            $(this).dialog("close");
                            contextMenuContractSettings('edit', '', '')
                            break;
                        }
                    case 'Documents':
                        {
                            $(this).dialog("close");
                            $("#btnAddContractDocument").trigger("click");
                            $("#tabTemplate").trigger("click");
                            break;
                        }
                    case 'Peoples':
                        {
                            $(this).dialog("close");
                            MangePeople();
                            break;
                        }
                    case 'Milestones':
                        {
                            $(this).dialog("close");
                            AddMilestoneMoreNew();
                            break;
                        }
                }
                //manoj

                //var idSelected = $("#dialogDelay .pop_up__Acti").attr("id");
                //if (idSelected == "ContractSetting") {
                //    if ($("#hdnPermission").val() == 'Manage')
                //        contextMenuTerm("manage");
                //    $(this).dialog("close");
                //}
                //else if (idSelected == "StartApproval") {
                //    $(this).dialog("close");
                //}
                //else if (idSelected == "Editcontract") {
                //    contextMenuContractSettings("edit", "", "");
                //    $(this).dialog("close");
                //}
                //else if (idSelected == "Activities") {
                //    $(this).dialog("close");
                //}
                //else {
                //    $(this).dialog("close");
                //}

            }
        },
        {
            text: "Close",
            "id": "btnPendingClose",
            click: function () {
                $(this).dialog("close");
            }
        }

        ],
        //open: function (event, ui) {
        //    var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];

        //    //Sridhar
        //    //Get the Contract Status
        //    ContractStatus = $("#idNewStatus").text().trim();

        //    if ($.inArray(contractItem.Status, vContractStatus) > -1 && ($("#hdnPermission").val() == "Manage" || $("#hdnPermission").val() == "Contribute")) {
        //        $("#ContractSetting").show();
        //        ContractSettingPending();

        //        //Sridhar
        //        if ($("#hdnPermission").val() == "Manage") {
        //            if (ContractStatus == "Expired" || ContractStatus == "Replaced" || ContractStatus == "Cancelled") {
        //                $("#btnPendingUpdate").hide();
        //            }
        //            else {
        //                $("#btnPendingUpdate").show();
        //            }
        //        }
        //        //Sridhar
        //    }
        //    else {
        //        $("#ContractSetting").hide();
        //        StartApprovalPending();
        //    }

        //    if (currentPanel == "Missing") {
        //        JustInfoPending();
        //        currentPanel = "";
        //    } else if (currentPanel == "Contract Fields") {
        //        EditcontractPending();
        //        currentPanel = "";
        //    }

        //}
    });

    $("#browseBA").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Users",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { $('#BusinessArea').val($('#txtBA').val()); $(this).dialog("close"); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#browse_treeviewFolder").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Select Folder",
        modal: true,
        buttons: {
            "OK": function () {
                selectfolder();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#bulkuploaddoc").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        title: "Users",
        dialogClass: "popup_width100",
        modal: true,
        close: function () {
            $("#tbBulkControls").empty();
            dropexitfilename = [];
            $("#file").empty();
            droppedfiles.splice(0, droppedfiles.length)
            droppedControls = 0;
            $(this).dialog("close");
            document.getElementById("holder").style.border = "2px dashed white";
            $("#ulDocument").css("min-height", "0px");
            $('#holder').css("opacity", "1");
            $('#holder').css("pointer-events", "auto");
        }
    });
    $("#browseCounterparty").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Counterparty",
        resizable: false,
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { AddCounterparty(); },
            Cancel: function () {
                strSelCounterPartyField = "";
                $(this).dialog("close"); $("#txtSearchBox").val("");
                ClearAddCounterparty();
                $('#chkCounterpartyNotInList').prop('checked', false);

                $('#dvCPExistingCounterparty').css("display", "");
                $('#dvCPAddCounterparty').css("display", "none");
                $('#rdCPAddCounterparty').attr('checked', false);
                $('#rdCPExistingCounterparty').attr('checked', true);

                $('.CP_Det').remove();
                $('.CP_Det1').css('display', 'none');
                $("#ddlCounterpartyType").removeClass('validelement');
                $("#txtEmailID").removeClass('validemail');
                BAOwnersselecteditems = [];
                $('#liSelectedBAOwners').empty();
                $('#txtBAOwnerofPath').val('');
                $('#txtBAOwnerof').val('');
                selectedBusinessAreaID11 = [];
            }
        }, close: function () {
            PrvRelatedCounterparities = [];
            arrRelatedCounterparities = [];
            curRelatedCounterparities = [];
            strSelCounterPartyField = "";
            ClearAddCounterparty();
            $('#chkCounterpartyNotInList').prop('checked', false);

            $('#dvCPExistingCounterparty').css("display", "");
            $('#dvCPAddCounterparty').css("display", "none");
            $('#rdCPAddCounterparty').attr('checked', false);
            $('#rdCPExistingCounterparty').attr('checked', true);

            $('.CP_Det').remove();
            $('.CP_Det1').css('display', 'none');
            $("#ddlCounterpartyType").removeClass('validelement');
            $("#txtEmailID").removeClass('validemail');
            BAOwnersselecteditems = [];
            $('#liSelectedBAOwners').empty();
            $('#txtBAOwnerofPath').val('');
            $('#txtBAOwnerof').val('');


            selectedBusinessAreaID11 = [];

        }
    });
    //$("#browseCounterparty").dialog({
    //    autoOpen: false,
    //    width: "50%",
    //    title: "Counterparty",
    //    dialogClass: "popup_width100",
    //    modal: true,
    //    buttons: {
    //        "OK": function () { var s = AddCounterparty(); if (s) { $(this).dialog("close"); } },
    //        Cancel: function () {
    //            $(this).dialog("close");
    //        }
    //    }
    //});

    $("#browseMasterAgreements").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Master Agreements",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                var s = AddMasterAgreement();
                $(this).dialog("close");
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#browseOriginatingParty").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Originating Party",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                var s = AddOriginatingParty();
                $(this).dialog("close");
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#browseLegalEntity").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "CompanyProfile",
        dialogClass: "popup_width100",
        resizable: false,
        modal: true,
        buttons: {
            "OK": function () { AddLE(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }, close: function () {

        }
    });
    $("#dvCorrespondenceDetails").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Correspondence Details",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () { $(this).dialog("close"); }
        }
    });

    $("#addEditCounterparty").dialog({
        autoOpen: false,
        width: "50%",
        title: "Counterparty",
        dialogClass: "popup_width100",
        modal: true,
        resizable: true,
        buttons: {
            "Save": function () {
                if (SaveCounterparty()) {
                }
            },
            Cancel: function () {
                $('.CP_Det').remove();
                $('.CP_Det1').css('display', 'none');
                $(this).dialog("close");
            }
        }
    });



    $("#browseBAOwners").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Users",
        height: "auto",
        modal: true,
        draggable: true,
        drag: function (event, ui) {
            var fixPix = $(document).scrollTop();
            iObj = ui.position;
            iObj.top = iObj.top - fixPix;
            $(this).closest(".ui-dialog").css("top", iObj.top + "px");
        },
        buttons: {
            "Save": function () {
                $('#lblBusinessAreaOwners').text("");
                $('#txtOwnerofBusinessArea').text("");
                $('#txtNewCpBusinessArea').text("");
                var selecteditemslength = BAOwnersselecteditems.length;

                if (selecteditemslength > 0) {
                    for (var i = 0; i < selecteditemslength; i++) {
                        //if (i != selecteditemslength - 1) { $('#lblBusinessAreaOwners').append(BAOwnersselecteditems[i] + ";"); }
                        //else { $('#lblBusinessAreaOwners').append(BAOwnersselecteditems[i]); }
                        if (i != selecteditemslength - 1) { $('#lblBusinessAreaOwners').append(BAOwnersselecteditems[i].trim().substring(BAOwnersselecteditems[i].trim().lastIndexOf(">") + 1, BAOwnersselecteditems[i].trim().length).trim() + ";"); }
                        else { $('#lblBusinessAreaOwners').append(BAOwnersselecteditems[i].trim().substring(BAOwnersselecteditems[i].trim().lastIndexOf(">") + 1, BAOwnersselecteditems[i].trim().length).trim()); }
                    }
                    $('#txtBAOwnerof').val($('#lblBusinessAreaOwners').text());
                }
                else {
                    $('#txtBAOwnerof').val("");
                }
                $('#txtNewCpBusinessArea').val($('#txtBAOwnerof').val());
                $('#txtOwnerofBusinessArea').val($('#txtBAOwnerof').val());
                selectedBusinessAreaID11 = [];
                $(selectedBusinessAreaID11Temp).each(function (i, item) {
                    selectedBusinessAreaID11.push(item);
                })

                selectedBusinessAreaID11Temp = [];
                $(this).dialog("close");
            },
            Cancel: function () {
                $(this).dialog("close");
                BAOwnersselecteditems = [];
                $(selectedBusinessAreaID11).each(function (i, item) {
                    BAOwnersselecteditems.push(item[0]);
                })
                selectedBusinessAreaID11Temp = [];
            }
        }, close: function () {
            BAOwnersselecteditems = [];
            $(selectedBusinessAreaID11).each(function (i, item) {
                BAOwnersselecteditems.push(item[0]);
            })
            selectedBusinessAreaID11Temp = [];
        }
    });


    $("#obligationcatalogsRecurrenceEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditObligationNew").dialog("close");
            }
        }
    });

    $("#obligationRecurrenceEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditObligationNew").dialog("close");
            }
        }
    });

    $("#milestonesRecurrenceNewEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditMilestoneNew").dialog("close");
            }
        }
    });

    $("#addEditStatusMultiple").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        minHeight: "80%",
        title: "Change Status",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { changestatusmultiple(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#addEditMilestoneStatusMultiple").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        minHeight: "80%",
        title: "Change Status",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { changemilestonestatusmultiple(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });


    $("#milestonesRecurrenceEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
                $("#addEditMilestoneNew").dialog("close");
            }
        }
    });


    $("#obligationRecurrenceStatusEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 150,
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });


    //Obligation Newly Added Start
    $("#obligationcatalogsAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: 500,

        modal: true,
        buttons: {
            "Add": function () { SaveObligationcatalog(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    BindCounterpartyType();
    //bindcountry();
    $("#popupCounterparties").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: "auto",
        title: "Related Counterparties",
        modal: true,
        buttons: {
            "OK": function () { RelatedCounterpartiesPush(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#obligationfinancialsAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Add": function () { SaveObligationfinancials(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    //Obligation Newly Added End


    $("#obligationcatalogseditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: 500,

        modal: true,
        buttons: {
            "Update": function () { UpdateObligationcatalog(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });


    $("#obligationfinancialseditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Edit Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Update": function () { UpdateObligationfinancials(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });


    $("#obligationcatalogsViewPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "View Catalog",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#obligationFinancialsViewPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "View Financials",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });



    $("#catalogsAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "ADD": function () { Savecatalog(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#transactionAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Transaction",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { Savecatalog(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#AddNewProductsPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Add Product",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { CreateProduct(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });



    $("#viewProductsPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Manage Products",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                var s = AddObligationProduct();
                $(this).dialog("close");
                $("#txtSearchBoxProduct").val("");
            },
            //"Clear": function () {
            //    $('#txtSearchBoxProduct').val('');
            //    $('input:radio[name=ExtProducts]').attr('checked', false);
            //    $('#txtCatalogUnitPrice').val("");
            //    $('#txtCatalogUnits').val("");
            //    $('#txtCatalogNameedit').val("");
            //    $('#txtCatalogUnitsedit').val("");
            //    $('#txtCatalogUnitPriceedit').val("");
            //    $("#txtTransProductName").val("");
            //    $("#txtCatalogName").val("");

            //},
            Cancel: function () {
                $('#txtSearchBoxProduct').val('');
                $(this).dialog("close");
            }
        }
    });


    $("#viewProductsMulPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Manage Products",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "ADD": function () {
                SaveMulObligationCatalogsProducts();
                $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
                $("#txtSearchBoxProductMul").val(""); $(this).dialog("close");
            },
            "Clear": function () {
                $('#txtSearchBoxProductMul').val('');
                $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
            },
            Cancel: function () {
                $('#txtSearchBoxProductMul').val('');
                $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
                $(this).dialog("close");
            }
        }
    });
    $("#catalogsViewPopup").dialog({
        autoOpen: false,
        closeText: "",
        closeText: "",
        width: "50%",
        title: "View Catalog",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#commitmentViewPopup").dialog({
        autoOpen: false,
        width: "50%",
        title: "View Commitments",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Close: function () {

                $(this).dialog("close");
            }
        }
    });

    $("#catalogseditPopup").dialog({
        autoOpen: false,
        width: "50%",
        height: 500,
        title: "Edit Item",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Update": function () { Updatecatalog(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });


    $("#CommitmentAddPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Manage Commitment",
        title: "Commitment Configuration",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { SaveCommitments(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#commitmenteditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Manage Commitment",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Update": function () { UpdateCommitments(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#allAlerts").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Alerts",
        dialogClass: "popup_width100",
        modal: true,
        resizable: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });


    $("#dvNotificationDetail").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Notification Detail",
        dialogClass: "popup_width100",
        modal: true,
        resizable: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });


    $("#addEditPeople").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: "auto",
        resizable: false,
        title: "People",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                if (savePeople()) {
                    $(this).dialog("close");
                    RemoveErrors();
                }
            },
            Cancel: function () {
                $(this).dialog("close");
                RemoveErrors();
            }
        },
        close: function () {
            RemoveErrors();
        }
    });

    $("#addViewPeople").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        height: "auto",
        resizable: false,
        title: "People",
        modal: true,
        buttons: {
            "Close": function () {

                $(this).dialog("close");

            },

        }
    });

    $("#addEditPermission").dialog({
        autoOpen: false,
        closeText: "",
        width: "65%",
        title: "Permissions",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                if (savePermission()) {
                    $(this).dialog("close");
                }
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#addEditStatus").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        minHeight: "80%",
        resizable: false,
        title: "Change Status",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { if (imgcheckgeneral()) { $(this).dialog("close"); } },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        open: function (event, ui) {
        }
    });
    $("#addEditContractValue").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Financials",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
        }
    });
    $('#dialogSummary').dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: 'Metadata',
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");
            }
        }
    });

    $("#contractLogsPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Contract History",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () { $(this).dialog("close"); }
        }
    });


    //manoj
    $("#dvfoldercreation").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        title: "Create Folder",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Create": function () { createnewfoldermove(); },
            Cancel: function () {
                if ($("#hdnnewfoldercreatedfrom").val() == "jqtree") {
                    removecreatedfolder();
                }
                $("#hdnnewfolderurl").val("");
                $("#txtnewfoldervalue").val("");
                $(this).dialog("close");
            },
        }, close: function (event, ui) {
            if ($("#hdnnewfoldercreatedfrom").val() == "jqtree") {
                removecreatedfolder();
            }
            $("#hdnnewfolderurl").val("");
            $("#txtnewfoldervalue").val("");
            $(this).dialog("close");
        }
    });
    //manoj

    $("#contractRenewal").dialog({
        autoOpen: false,
        closeText: "",
        width: "100%",
        minHeight: "100%",
        title: "Contract Renewal",
        dialogClass: "popup_width100",
        modal: true,
        draggable: false,
        buttons: {
            "Save": function () { ManageContractRenewal(); },
            Close: function () {
                $(this).dialog("close");
            }
        },
        close: function (event, ui) {
            if ($("#hdChangeStatusClick").val() == 'Y') {
                $('#addEditStatus').dialog('open');
                $("#hdChangeStatusClick").val("");
            }
        }
    });

    //*Harshitha
    $("#RenewalHistoryView").dialog({
        autoOpen: false,
        closeText: "",
        width: "90%",
        minHeight: "100%",
        title: "Contract Renewal",
        dialogClass: "popup_width90",
        modal: true,
        draggable: false,
        buttons: {

            Close: function () {
                $(this).dialog("close");
            }
        },
        close: function (event, ui) {
        }
    });

    $("#manualRenewal").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Manual Renewal",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { ManualRenewal(); },
            Close: function () {
                $(this).dialog("close");
            }
        },

    });
    //??????????
    $("#viewMetadataDetail").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Detail",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");
                $("#MetaRenewalViewHistoryLink").css("display", "none");
            }
        },
        close: function (event, ui) {
            $("#MetaRenewalViewHistoryLink").css("display", "none");

        }
    });

    $("#viewMetadataDetailForOwner").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Detail",
        modal: true,
        dialogClass: "popup_width100",
        buttons: [
        {
            text: "Mark As Completed",
            "id": "btnMarkComplete",
            click: function () {
                MarkAsCompleted();
                $(this).dialog("close");
            }
        },
        {
            text: "Close",
            click: function () {
                $(this).dialog("close");
            }
        }
        ]
    });


    $("#viewMetadataDetailDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Detail",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () {
                $(this).dialog("close");
            }
        }
    });

    $("#popupContracts").dialog({
        autoOpen: false,
        closeText: "",
        width: "85%",
        height: "auto",
        title: "Related Contract Record(s)",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                CreateRelatedContracts();
                $("#ddlRelConFilterContractType option:selected").prop('selected', false).trigger('chosen:updated');
                $("#ddlRelConFilterCounterparty option:selected").prop('selected', false).trigger('chosen:updated');
            },
            Cancel: function () {
                $("#liSelectedRelatedContract").empty();
                $("#ddlRelConFilterContractType option:selected").prop('selected', false).trigger('chosen:updated');
                $("#ddlRelConFilterCounterparty option:selected").prop('selected', false).trigger('chosen:updated');
                $(this).dialog("close");
            }
        }
    });
    $("#popupContractsEdit").dialog({
        autoOpen: false,
        closeText: "",
        width: "85%",
        title: "Related Contract Record(s)",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { updaterelatedcontract(); $(this).dialog("close"); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $('#txtSearchBox').keypress(function (e) {
        if (e.keyCode == 13) {
            $(".ui-autocomplete").css('display', 'none');
            ViewContracts();
        }
    });

    $('#txtSearchBoxProduct').keypress(function (e) {
        if (e.keyCode == 13) {
            $(".ui-autocomplete").css('display', 'none');
            SearchProducts();
        }
    });

    $('#txtSearchLabel').keypress(function (e) {
        if (e.keyCode == 13) {
            $(".ui-autocomplete").css('display', 'none');
            SearchLabels();
        }
    });

    $('#txtSearchBoxProductMul').keypress(function (e) {
        if (e.keyCode == 13) {
            $(".ui-autocomplete").css('display', 'none');
            SearchProductsMul();
        }
    });

    $("#popupDefaultProperties").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Default Properties",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { updatedefaultproperties(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#divReplaceDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Replace Document",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { replacedocument(); },
            Cancel: function () {
                ClearReplaceDocFrom();
                $(this).dialog("close");
            }
        }
    });

    $("#dvVersionHistory").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Version History",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Close": function () { $(this).dialog("close"); }
        }
    }); $("#addEditDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        title: "Document",
        dialogClass: "popup_width100",
        height: 600,
        modal: true,
        buttons: [{
            text: "Save",
            "id": "btnDocAdd",
            click: function () { $("#liSelectedRelatedContract").empty(); modalOnOpenDocument(); }
        },
           {
               text: "Cancel",
               "id": "btnDocCancel",
               click: function () {
                   $("#liSelectedRelatedContract").empty();
                   $(this).dialog("close");
               }
           }
        ],
        close: function (event, ui) {
        }
    });

    $("#treeviewFolder").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Select Folder",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { selectfolder(); },
            Cancel: function () {
                fileurldetails = "";
                $(this).dialog("close");
            }
        }
    });

    $("#treeviewFolderMove").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Select Folder",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () { selectfoldertomove(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#EditDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Document",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { modalOnOpenDocument(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        close: function () {
            $('#dtValidFromEdit').val("");
            $('#dtValidTillEdit').val("");
            $('#txtReminder1Edit').val("");
            $('#txtReminder2Edit').val("");
            $('#txtReminder3Edit').val("");
            $("#ddlReminder1Edit").find('option[value="before"]').prop("selected", true);
            $("#ddlReminder2Edit").find('option[value="before"]').prop("selected", true);
            $("#ddlReminder3Edit").find('option[value="before"]').prop("selected", true);
        }
    });

    $("#templateCnfrmMsg").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Document Exist",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save as New": function () {
                $("#txtDocumentNameCreate").val($("#ddlDocumentTemplate").find('option:selected').text() + "_Copy");
                $(this).dialog("close");
            },
            Cancel: function () {
                $("#ddlDocumentTemplate").val("0");
                $(this).dialog("close");
            }
        }
    });

    $("#sendForSignature").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        minHeight: "80%",
        title: "Send for Signature",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Send": function () {
                SendForSignature();
            },
            Cancel: function () {
                $(this).dialog("close");
                ClearSignatureForm();
            }
        },
        close: function (event, ui) {

        },
        open: function (event, ui) {
            if (RightSignatureFlag) {
                $("#RightSignDropDown").show();
                $("#SignDocExptxt").hide();
            }
            else {
                $("#RightSignDropDown").hide();
                $("#SignDocExptxt").show();
            }
        }
    });

    $("#docSignatureDetail").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        minHeight: "80%",
        title: "Signature Details",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        close: function (event, ui) {

        }
    });
    $("#shareContract").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        title: "Share Contract Record",
        dialogClass: "Popup_WarningMsg",
        modal: true,
        minHeight: "80%",
        buttons: {
            "Share": function () {
                ShareContract();
            },
            Cancel: function () {
                $(this).dialog("close");
                ClearShareForm();
            }
        },
        close: function (event, ui) {
            $(".addmorelinks").show();
        },
        open: function (event, ui) {
            if (!($('.smalltextcontract').length)) {
                $("div[aria-describedby='shareContract'].Popup_WarningMsg div span:first").append("<br /><span style='background-color:yellow;font-size:small;' class='smalltextcontract'>A secured view of this Contract Record will be temporarily shared with external contact(s) & users in eContracts as a link in their email.</span>");
            }
            $("div[aria-describedby='shareContract'].Popup_WarningMsg div span:first").attr('style', 'padding-bottom: 0px !important');
        }

    });

    $("#shareDocument").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        title: "Share Document",
        dialogClass: "Popup_WarningMsg",
        modal: true,
        minHeight: "80%",
        buttons: {
            "Share": function () {
                ShareDocument();
            },
            Cancel: function () {
                $(this).dialog("close");
                ClearShareForm();
            }
        },
        close: function (event, ui) {
            $(".addmorelinks").show();
        },
        open: function (event, ui) {
            if (!($('.smalltext').length)) {
                $("div[aria-describedby='shareDocument'].Popup_WarningMsg div span:first").append("<br /><span style='background-color:yellow;font-size:small;' class='smalltext'>A secured view of this Contract Document will be temporarily shared with external contact(s) & users in eContracts as a link in their email.</span>");
            }
            $("div[aria-describedby='shareDocument'].Popup_WarningMsg div span:first").attr('style', 'padding-bottom: 0px !important');
        }
    });

    $("#sendCopyPopUp").dialog({
        autoOpen: false,
        closeText: "",
        width: "85%",
        title: "Send Contract Copy",
        dialogClass: "popup_width100",
        modal: true,
        minHeight: "80%",
        buttons: {
            "Send": function () {
                SendCopy();
            },
            Cancel: function () {
                $(this).dialog("close");
                ClearSendCopyForm();
            }
        },
        close: function (event, ui) {
            $("#ddlDocumentList").val('').trigger('chosen:updated');
            $(".addmorelinks").show();
        }
    });


    $("#browseSigneeUser").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        title: "User",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "OK": function () {
                SelectedSignee();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        close: function (event, ui) {

        }
    });

    $("#dvWorkflow").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Workflow",
        dialogClass: "popup_width100",
        modal: true,
        height: "auto",
        buttons: {
            "Start": function () { StartWorkflow(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#dvWorkflowRenew").dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: "Manage Approval",
        dialogClass: "popup_width100",
        modal: true,
        height: "auto",
        buttons: {
            "Start": function () { SaveWorkflowRenew(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#addEditMilestone").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: "auto",
        resizable: false,
        title: "Milestone",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { if (modalOnOpenMilestone()) { } },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#addEditObligation").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Obligation",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () {
                if (modalOnOpenObligation()) { }
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });
    $("#addEditAmendment").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        height: "700",
        title: "Amendment",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { modalOnOpenAmendment(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });


    $("#addEditCorrespondence").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        height: "400",
        title: "Amendment",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () { modalOnOpenCorrespondence(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    //Obligation New 
    $("#addEditObligationNew").dialog({
        autoOpen: false,
        closeText: "",
        width: "80%",
        height: "auto",
        title: "Amendment",
        dialogClass: "popup_width100",
        modal: true,
        buttons: {
            "Save": function () {

                if (modalOnOpenObligationNew()) {

                }
            },
            Cancel: function () {
                if ($("#obligationnewheading").text() != "Edit Obligation") {
                    if ($('#txtObligationProductsCount').val() == "Yes") {

                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Catalog",
                            type: 'DELETE',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName, contractId: getParameterByName("ContractID") },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                $("#addEditObligationNew").dialog("close");
                            }
                        });
                    }

                    if ($('#txtObligationFinancialsCount').val() == "Yes") {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Financials",
                            type: 'DELETE',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName, contractId: getParameterByName("ContractID") },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                $("#addEditObligationNew").dialog("close");
                            }
                        });
                    }
                    if ($('#txtObligationFinancialsCount').val() != "Yes" && $('#txtObligationProductsCount').val() != "Yes") {
                        $("#addEditObligationNew").dialog("close");
                    }
                }
                else {
                    $("#addEditObligationNew").dialog("close");
                }

            }

        },
        close: function () {
            if ($("#obligationnewheading").text() != "Edit Obligation") {
                if ($('#txtObligationProductsCount').val() == "Yes") {

                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Catalog",
                        type: 'DELETE',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName, contractId: getParameterByName("ContractID") },
                        "Content-Type": "application/json",
                        cache: false,
                        success: function (data) {
                            $("#addEditObligationNew").dialog("close");
                        }
                    });
                }

                if ($('#txtObligationFinancialsCount').val() == "Yes") {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Financials",
                        type: 'DELETE',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName, contractId: getParameterByName("ContractID") },
                        "Content-Type": "application/json",
                        cache: false,
                        success: function (data) {
                            $("#addEditObligationNew").dialog("close");
                        }
                    });
                }
                if ($('#txtObligationFinancialsCount').val() != "Yes" && $('#txtObligationProductsCount').val() != "Yes") {
                    $("#addEditObligationNew").dialog("close");
                }
            }
            else {
                $("#addEditObligationNew").dialog("close");
            }
            BindMilestone();
        }


    });

    $("#browseProjects").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Project",
        modal: true,
        buttons: {
            "OK": function () {
                var s = AddProject();
                $(this).dialog("close");
                $("#txtSearchBoxProjects").val("");
            },
            Cancel: function () {
                arrRelatedCounterparities = [];
                $(this).dialog("close");
                $("#txtSearchBoxProjects").val("");
            }
        }
    });
    $("#browseProjectTasks").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Project Tasks",
        modal: true,
        buttons: {
            "OK": function () {
                var s = AddProjectTask();
                $(this).dialog("close");
                $("#txtSearchBoxProjectTasks").val("");
            },
            "Clear": function () {
                $('#txtSearchBoxProjectTasks').val('');
                $('input:checkbox[name=ProjectTask]').attr('checked', false);
                $("#ProjectTask").val("");
            },
            Cancel: function () {
                $(this).dialog("close");
                $("#txtSearchBoxProjectTasks").val("");
                $('input:checkbox[name=ProjectTask]').attr('checked', false);
            }
        }
    });

    $("#browseRequest").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Contract",
        modal: true,
        buttons: {
            "OK": function () {
                var s = AddRequest();
                $(this).dialog("close"); $("#txtSearchBoxRequest").val("");
            },
            Cancel: function () {
                $(this).dialog("close");
                $("#txtSearchBoxRequest").val("");
            }
        }
    });

    $("#addViewclanguaheCommnetpopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        height: "200",
        title: " Add New Clause Language",
        dialogClass: "popup_width100",
        height: 600,
        modal: true,
        buttons: {
            //"Save": function () {
            //    addnewclasslanguage();
            //},
            Close: function () {
                usercommnetadded = false;
                $("#ViewCommnetlanguagecollection").empty();
                $("#txtlanguagecommnet").val("");
                $('.ui-button-green-text').parent().removeAttr('disabled');
                $(this).dialog("close");
            }
        },
        close: function (event, ui) {
            usercommnetadded = false;
            $("#ViewCommnetlanguagecollection").empty();
            $("#txtlanguagecommnet").val("");
            $('.ui-button-green-text').parent().removeAttr('disabled');
            $(this).dialog("close");
        }
    });

    $("#addEditMilestoneNew").dialog({
        autoOpen: false,
        closeText: "",
        width: "75%",
        height: "auto",
        resizable: false,
        title: "Milestone",
        dialogClass: "popup_width100",
        modal: true, buttons: [
        {
            text: "Save",
            "id": "btnPopupMilestoneSave",
            click: function () {
                if (milestonevalidate()) {

                }
            }
        },
        {
            text: "Cancel",
            click: function () {
                $(this).dialog("close");
            }
        }
        ]
    });

    allowOnlyNumericInInputBox("txtPriceBreakDownNumberOfUnits");
    allowOnlyNumericInInputBox("txtPriceBreakDownUnitPrice");
    allowOnlyNumberInInputBox("txtRenewableFor");
    allowOnlyNumberInInputBox("txtStandardRenewalTerm");
    allowOnlyNumberInInputBox("txtApprovalTask");



    $('#dtDueDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        /* fix buggy IE focus functionality */
        fixFocusIE: false,
        onSelect: function (dateText, inst) {
            this.fixFocusIE = true;
        },
    }).click(function () { $(this).focus() });
    $("#dtDueDateInline").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });
    $("#dtMilestoneDateInline").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });
    $('#dtMilestoneDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        /* fix buggy IE focus functionality */
        fixFocusIE: false,
        onSelect: function (dateText, inst) {
            this.fixFocusIE = true;
        },
    }).click(function () { $(this).focus() });


    $("#dtMilestoneDateNew").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        onSelect: function (dateText, inst) {
            GetMilestonedynamicRecurrenceCount();
            MilestoneDateSlectedEvent(this);
        },
    });

    $("#dtMilestoneNewCompletedDate").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $('#dtTransactionDueDate').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        /* fix buggy IE focus functionality */
        fixFocusIE: false,
        onSelect: function (dateText, inst) {
            this.fixFocusIE = true;
        },
    }).click(function () { $(this).focus() });
    $("#dtTransactionCompletedDate").datepicker({
        changeMonth: true,
        changeYear: true, dateFormat: DatepickerFormat
    });
    $("#dtMilestoneCompletedDate").datepicker({
        changeMonth: true,
        changeYear: true, dateFormat: DatepickerFormat
    });
    $("#dtAmendmentFinalizedDate").datepicker({
        changeMonth: true,
        changeYear: true, dateFormat: DatepickerFormat
    });

    // To Hide Datepicker and blur Focus in Admendment popup during the
    // Window scroll - Bug(eO36926)- Start
    var amendmentCompletedDatePicker = $('#dtAmendmentFinalizedDate').datepicker();
    var amendmentEffectiveDatePicker = $('#dtAmendmentEffectiveDate').datepicker();
    var contractEndDateAfterAmend = $('#txtContractEndDateAfterAmend').datepicker();
    $("#addEditAmendment").scroll(function () {
        amendmentCompletedDatePicker.datepicker('hide');
        amendmentEffectiveDatePicker.datepicker('hide');
        contractEndDateAfterAmend.datepicker('hide');
        $('#dtAmendmentFinalizedDate').blur();
        $('#dtAmendmentEffectiveDate').blur();
        $('#txtContractEndDateAfterAmend').blur();
    });

    $(window).resize(function () {
        amendmentCompletedDatePicker.datepicker('hide');
        amendmentEffectiveDatePicker.datepicker('hide');
        contractEndDateAfterAmend.datepicker('hide');
        $('#dtAmendmentFinalizedDate').blur();
        $('#dtAmendmentEffectiveDate').blur();
        $('#txtContractEndDateAfterAmend').blur();
    });
    // Window scroll- End


    $('#txtNewEndDate').datepicker({
        changeMonth: true,
        changeYear: true,
        minDate: 1,
        dateFormat: DatepickerFormat,
        /* fix buggy IE focus functionality */
        onSelect: function (dateText, inst) {
            $(".ui-datepicker").css('display', 'none');
        },

    }).click(function () { $(this).focus() });

    $('#txtNextRenewalDate').datepicker({
        changeMonth: true,
        changeYear: true,
        minDate: 1,
        /* fix buggy IE focus functionality */
        fixFocusIE: false,
        dateFormat: DatepickerFormat,
        onSelect: function (dateText, inst) {
            $(".ui-datepicker").css('display', 'none');
        },
    }).click(function () { $(this).focus() });
    $('#dtCatalogValidTill').datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat,
        /* fix buggy IE focus functionality */
        fixFocusIE: false,
        onSelect: function (dateText, inst) {
            this.fixFocusIE = true;
        },
    }).click(function () { $(this).focus() });

    $('#dtCatalogValidTilledit').datepicker({
        changeMonth: true,
        changeYear: true,
        /* fix buggy IE focus functionality */
        fixFocusIE: false,
        dateFormat: DatepickerFormat,
        onSelect: function (dateText, inst) {
            this.fixFocusIE = true;
        },
    }).click(function () { $(this).focus() });


    $(".openEditLabel").click(function () {
        $('#liSelectedLabel').html("");
        $('[id^=row_]').remove();
        $('#txtSearchLabel').val("");
        $('#selCategoryFilter').val("All");
        contactsJsonPayload = [];
        $("#txtSearchLabel").val('');
        arrLabelCollection = [];
        bindLabelCategory('New');
        //SearchLabels('New');
    });
    $(".openAddLabel").click(function () {
        $('#liSelectedLabel').html("");
        $('[id^=row_]').remove();
        $('#txtSearchLabel').val("");
        $('#selCategoryFilter').val("All");
        contactsJsonPayload = [];
        $("#txtSearchLabel").val('');
        arrLabelCollection = [];
        bindLabelCategory('Add');
        //SearchLabels('Add');
    });
    $("#labelEditPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        height: 500,
        title: "Add Label",
        modal: true,
        buttons: {
            "Save": function () { SaveLabel(); },
            Cancel: function () {
                $(this).dialog("close");
                LabelsCategories = [];
            }
        },
        close: function () {
            ContractLabels = [];
            LabelsCategories = [];
        }
    });


    $('#dtTransDate').datepicker({
        changeMonth: true,
        changeYear: true,
        /* fix buggy IE focus functionality */
        fixFocusIE: false,
        dateFormat: DatepickerFormat,
        onSelect: function (dateText, inst) {
            this.fixFocusIE = true;
            $(this).change().focus();
        },
        onClose: function (dateText, inst) {
            this.fixFocusIE = true;
            this.focus();
            //},
            //beforeShow: function (input, inst) {
            //    var result = $.browser.msie ? !this.fixFocusIE : true;
            //    this.fixFocusIE = false;
            //    return result;
        }
    }).click(function () { $(this).focus() });




    $("#dtValidFrom").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });
    $("#dtValidTill").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });
    $("#dtValidFromEdit").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });
    $("#dtValidTillEdit").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: DatepickerFormat
    });

    $("#dvViewProject").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Project",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#dvViewProjectTask").dialog({
        autoOpen: false,
        closeText: "",
        width: "50%",
        title: "Project Task",
        modal: true,
        buttons: {
            Close: function () {
                $(this).dialog("close");
            }
        }
    });



    $("#dvAddNotes").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Add Notes",
        modal: true,
        buttons: {
            "OK": function () { AddNotes(); },
            Cancel: function () {
                $(this).dialog("close");
            }
        }
    });

    $("#dvContractNotAvail").dialog({
        autoOpen: false,
        closeText: "",
        width: "100%",
        height: "1000",
        dialogClass: "popup_width100",
        modal: true,
        resizable: false,
        closeOnEscape: false,
        close: function (event, ui) {
            $("#dvContractNotAvail").dialog("open");
        }
    });

    $("#dvAlertDetails1").dialog({
        autoOpen: false,
        closeText: "",
        width: "45%",
        title: "Alert",
        modal: true,

    });

    $("#showMSWordPopup").dialog({
        autoOpen: false,
        closeText: "",
        width: "40%",
        height: "auto",
        modal: true
    });

    $('#dialogMismatched').dialog({
        autoOpen: false,
        closeText: "",
        width: "70%",
        title: 'Mismatched Document and Contract Record Metadata',
        dialogClass: "popup_width100",
        modal: true,
        buttons: [
        {
            text: "Edit Document",
            "class": 'Contribute',
            click: function () {
                $(this).dialog("close");
                if (currentHref == "") {
                    viewdocinword(currentNav)
                } else {
                    window.open(currentHref, "_blank")
                }
            }
        },
            {
                text: "Edit Contract Record",
                "class": 'Contribute StatusPermission',
                click: function () {
                    $(this).dialog("close");
                    contextMenuContractSettings('edit', '', '')
                }
            },
            {
                text: "Close",
                click: function () {
                    $(this).dialog("close");
                }
            }
        ]
    });
});

$('#btnContractTermCancel').click(function () {
    $("#txtReasonOfCancel").val("");
    GetValuesAndAutoPopulate("ddlSendToCancel", "");
    $("#dvCancelContract").dialog("open");
});

function CancelContract() {
    if (requiredValidator('dvCancelContract', false)) {
        swal({
            title: '',
            text: "Are you sure you want to <span style=\"font-weight:700\">cancel</span> this Contract?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true
        },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var notify = $("#ddlSendToCancel").val();
             var noty = '';
             $(notify).each(function (i, item) {
                 if (noty == '') {
                     noty = item;
                 }
                 else {
                     noty += ";" + item;
                 }
             });
             var vCancelNote = "CancelledReason=" + $("#txtReasonOfCancel").val() + "&UsersToNotify=" + noty;
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=Cancelled',
                 type: 'PUT',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                 data: vCancelNote,
                 cache: false,
                 success: function (result) {
                     $("#loadingPage").fadeOut();
                     $("#dvCancelContract").dialog("close");
                     $("#dvContractTerm").dialog("close");
                     $("#dvManageContractStatus").dialog("close");
                     contractItem = result;
                     ContractTopActions();
                 },
                 error: function (data) {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

    }
}

function liRemoveSelected(obj) {

    var child = obj.parentNode;

    child.parentNode.removeChild(child);
    var lstLbl = lstSelectedLabels.split(";");
    $.each(lstLbl, function (key, value) {
        if (value == obj.parentElement.textContent) {
            lstLbl.splice(lstLbl.indexOf(value), 1);
            $('#row_' + obj.parentElement.textContent).attr("style", "visibility: visible");
            return;
        }
    });
    lstSelectedLabels = lstLbl.join(";");
}

function BindContractDetails(contractid) {
    articleDocumentMileStone = '';
    contrcttypeselection = [];
    $(".FL_Obligations").hide();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
        processData: false,
        success: function (item) {
            //manoj
            var allowtoshow = false;
            if (item.IsDraft != "Yes") {
                allowtoshow = true;
            } else if (localStorage.UserName == item.CreatedBy) {
                allowtoshow = true;
            }
            if (!allowtoshow) {
                $("#dvContractNotAvail").dialog("open");
                $("#loadingPage").fadeOut();
            } else {
                //manoj
                vContractTile = item.ContractTitle;
                contractItem = item;
                //manoj
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vCoverSheet = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "23" && n.Status == "ON");
                });
                if (vCoverSheet.length > 0) {
                    if (typeof (contractItem.SummeryBlobURL) != "undefined" && contractItem.SummeryBlobURL != null && contractItem.SummeryBlobURL != "") {
                        getcontractsummerytemplate(contractItem.ContractType, contractItem.SummeryBlobURL, true);
                    } else {
                        getcontractsummerytemplate(contractItem.ContractType, contractItem.SummeryBlobURL, false);
                    }
                } else {
                    $("#iStandardIcon").empty();
                    $("#hdnsummeryTempDocu").text("No");
                    $("#lisummarydocument").css("display", "none");
                }
                //manoj
                var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                if ($.inArray(item.Status, vContractStatus) > -1) {
                    $(".AlertEnabled").removeClass("disabled_slider");
                    IsPipeline = false;
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    vAccFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "2" && n.Status == "ON");
                    });
                    if (vAccFeat.length > 0) {
                        $(".FL_Obligations").css('display', '');

                    }
                    $("#MilestoneEnable").show();
                }
                else {
                    IsPipeline = true;
                    BindGeneralSettings();
                    $(".AlertEnabled").removeClass("disabled_slider");
                }

                var IsFullControlUser = false;
                if (item.FullControlPermissions != "") {
                    var FullControlUsers = item.FullControlPermissions;

                    var FullControlUsersarr = $.map(FullControlUsers.trim().split(';'), function (value) { return value.trim(); })
                    if (FullControlUsersarr.indexOf(localStorage.UserName.trim()) > -1)
                        IsFullControlUser = true;
                    else {
                        if (localStorage.UserType.indexOf("Global Contract Owner") >= 0) {
                            IsFullControlUser = true;
                        } else {
                            IsFullControlUser = false;
                        }
                    }

                }
                else {
                    if (localStorage.UserType.indexOf("Global Contract Owner") >= 0) {
                        IsFullControlUser = true;
                    } else {
                        IsFullControlUser = false;
                    }
                }

                if (item.IsFinalized == 'Yes' && !IsFullControlUser) {
                    $("#txtContractTitle").attr('disabled', 'disabled');
                    $("#ddlDPContractTypes").attr('disabled', 'disabled');
                    $("#ddlDPTransactionType").attr('disabled', 'disabled');
                    $("#ddlDPContractClass").attr('disabled', 'disabled');
                }
                else {
                    $("#txtContractTitle").removeAttr('disabled');
                    $("#ddlDPContractTypes").removeAttr("disabled");
                    $("#ddlDPTransactionType").removeAttr("disabled");
                    $("#ddlDPContractClass").removeAttr("disabled");
                }

                if (item.InRecycleBin == "Yes") {
                    $("#hdnPermission").val('View');
                    $("#liContractstatus").hide()
                    $("#dvRecyclebinMessage").css('display', '');
                    $("#topActionMore").removeClass('openmenuContractSettings');
                    $("#topActionMore").addClass('openmenuContractSettingsRecycleBin');
                }
                else {
                    $("#topActionMore").removeClass('openmenuContractSettingsRecycleBin');
                    $("#topActionMore").addClass('openmenuContractSettings');
                    $("#hdnPermission").val(item.Permission);
                }
                $(".openmenuContractSettings").contextMenu({ menu: 'dropdownMenuContractSettings', leftButton: true }, function (action, el, pos) { contextMenuContractSettings(action, el.parent("tr"), pos); });
                $(".openmenuContractSettingsRecycleBin").contextMenu({ menu: 'dropdownMenuContractSettingsRecycleBin', leftButton: true }, function (action, el, pos) { contextMenuContractSettingsRecycleBin(action, el.parent("tr"), pos); });

                if ((item.ContractManagers + ";" + item.CreatedBy + ";" + item.Approvers + ";" + item.Reviewers + ";" + item.Signees).indexOf(localStorage.UserName) < 0) {
                    SetBADashboard(item.BusinessAreaPath, item.BusinessArea);
                }
                //BindDocument(contractid);
                BindContractRoles(contractItem);
                BindContractTermDetail(contractItem);
                thisContractAreaNameC = item.ContractArea;
                thisBusinessAreaNameC = item.BusinessArea;
                thisBusinessAreaPath = item.BusinessAreaPath;
                BindBusinessAreaPicker11();
                //*Harshitha contract System milestone
                BindSystemMilestones(contractItem);
                $("#spancloseout").html(item.CloseOut);
                $("#hdnContractID").text(item.RowKey);
                $("#hdnContractValue").text(item.ContractValue);
                $("#hdnContractCurrency").text(item.ContractCurrency);
                $("#hdnContractPricingType").text(item.ContractPricingType);
                $("#hdnTransactionType").text(item.TransactionType);
                $("#hdnPaymentType").text(item.PaymentType);
                $("#hdnBillingFrequency").text(item.BillingFrequency);
                $("#hdnOldEndDate").text(item.EndDate);
                $("#hdnTermEndDate").text(item.TermEndDate);
                $("#hdnBaseContractValue").text(item.BaseContractValue);
                $("#hdnBaseContractCurrency").text(item.BaseContractValueCurrency);
                $("#hdnFinalizedDocumentsUrl").text(item.FinalizedDocumentsUrl);
                $("#hdnDraftDocumentsUrl").text(item.DraftDocumentsUrl);
                $("#hdnContractDocumentsUrl").text(item.ContractDocumentsUrl);
                $("#hdnContractDocumentsUrlFixed").text(item.ContractDocumentsUrl);
                $("#lblContractArea").text(item.ContractArea);
                $("#lblBusinessArea").text(item.BusinessArea);
                $("#lblBusinessAreaPath").text(item.BusinessAreaPath);
                $("#lblContractAreaAdmins").text(item.ContractAreaAdministrators);
                $("#lblApprovalWorkflow").text(item.ApprovalWorkflow);
                $("#lblBusinessAreaOwners").text(item.BusinessAreaOwners);
                $("#lblCounterparty").text(item.Counterparty);
                //Added For Obligation New
                $("#lblCompanyProfile").text(item.CompanyProfile);
                //Added End
                $("#lblContractType").text(item.ContractType);
                getcontracttypemetadata(item.ContractType);
                BindRelatedContractsFilters();
                if (item.StartDate != null) {
                    $("#hdnStartDate").text(item.StartDate);
                }
                $("#lblContractTitle").text(item.ContractTitle);
                $("#lblContractTitleHeading").html(item.ContractTitle.replace("  ", "&nbsp;&nbsp;"));
                $("#lblRelatedPopup_ContractTitle").text("Select Relationship for " + item.ContractTitle)
                if (item.Description == "") {
                    $("#lblContractDescription").text("Description not available");
                    $("#lblContractDescription").addClass('cntdetails-NA');
                }
                else {
                    $("#lblContractDescription").text(item.Description);
                    $("#lblContractDescription").removeClass('cntdetails-NA');
                }
                $("#summCNumber").text(item.ContractNumber);
                $("#summCBusArea").text(item.BusinessAreaPath);
                var formatcreatedDate = '';
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { formatcreatedDate = moment(new Date(item.Created)).format('MM/DD/YYYY'); }
                else { formatcreatedDate = moment(new Date(item.Created)).format(localStorage.AppDateFormat); }
                $("#summCreated").text(formatcreatedDate);
                if (vActiveUsers.indexOf(item.CreatedBy.trim()) < 0 && vActiveUsers.length > 0)
                    $("#summCreatedBy").html('<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + item.CreatedBy.trim() + '\')" class="Link_UserProfile disabled_item_link" title="This user is no longer available.">' + item.CreatedBy.trim() + '</a>');
                else
                    $("#summCreatedBy").html('<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + item.CreatedBy.trim() + '\')" class="Link_UserProfile">' + item.CreatedBy.trim() + '</a>');

                $("#summContractType").text(item.ContractType);

                if (item.CompanyProfile == null || item.CompanyProfile == "" || item.CompanyProfile == "--Select--") {
                    $("#summCompyLegalEntity").text("Not Available");
                }
                else {
                    $("#summCompyLegalEntity").text(item.CompanyProfile);
                }

                var usersarr = [];
                if (item.Counterparty == null || item.Counterparty == "") {
                    $("#summCounterparty").text("Not Available");
                }
                else {
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "6" && n.Status == "ON");
                    });
                    var vreadonly = "";
                    var vbrowse = "";
                    if (vAccFeat.length > 0) {
                        usersarr = item.Counterparty.split(";");
                        var reslength = usersarr.length;
                        var vUsers = '';
                        for (var i = 0; i < reslength; i++) {
                            if (vUsers == '') {
                                vUsers = '<a href="javascript:void(0);" onclick="RedirectToCounterparty(\'' + escape(usersarr[i].trim()) + '\')">' + usersarr[i].trim() + '</a>';
                            }
                            else {
                                vUsers += '; <a href="javascript:void(0);" onclick="RedirectToCounterparty(\'' + escape(usersarr[i].trim()) + '\')">' + usersarr[i].trim() + '</a>';
                            }
                        }
                        $("#summCounterparty").html(vUsers);
                    } else {
                        $("#summCounterparty").text(item.Counterparty);
                    }
                }

                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "11" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    try {
                        if (item.ProjectManager == null || item.ProjectManager == "") {
                            $("#spProjectManager").html("Not Available");
                            $("#spProjectManagerView").html("Not Available");
                            $("#liProjectManager").html("Not Available");
                        } else {
                            var vUsers = '';
                            var userDisable = '';
                            var usertitle = '';
                            projMgrs = item.ProjectManager;
                            if (projMgrs.indexOf(';') >= 0) {
                                $.each(item.ProjectManager.split(";"), function (a, itemname) {
                                    userDisable = '';
                                    usertitle = '';
                                    if (vActiveUsers.indexOf(itemname.trim()) < 0 && vActiveUsers.length > 0) {
                                        userDisable = ' disabled_item_link';
                                        usertitle = 'title="This user is no longer available."';
                                    }
                                    if (vUsers == '') {
                                        vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + itemname + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + itemname + '</a>';
                                    } else {
                                        vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + itemname + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + itemname + '</a>';
                                    }
                                });
                            } else {
                                if (vActiveUsers.indexOf(item.ProjectManager.trim()) < 0 && vActiveUsers.length > 0) {
                                    userDisable = ' disabled_item_link';
                                    usertitle = 'title="This User no longer available"';
                                }
                                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + item.ProjectManager + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + item.ProjectManager + '</a>';
                            }

                            $("#spProjectManager").html(vUsers);
                            $("#spProjectManagerView").html(vUsers);
                            $("#liProjectManager").html(vUsers);
                        }

                        //Related Projects
                        if (item.ProjectTask == null || item.ProjectTask == "") {
                            $("#tblRelatedProjects").html('No items found.');

                        } else {
                            BindProjects(item.ProjectTask);
                        }
                    } catch (e) {
                        $("#loadingPage").fadeOut();
                    }
                }
                BindContractPeopleMetadata(item);
                BindContractRolesMetadata();

                if (item.RelatedRequestID == null) {
                    $("#FL_Requestor").css('display', 'none');
                    $("#trRelatedRequest").css('display', 'none');
                } else if (item.RelatedRequestID == "") {
                    $("#FL_Requestor").css('display', 'none');
                    $("#trRelatedRequest").css('display', 'none');
                    $("#spRequestor").html("Not Available");
                    $("#spRequestorr").html("Not Available");
                } else {
                    $("#FL_Requestor").css('display', '');
                    $("#trRelatedRequest").css('display', '');
                    BindRequestDetails(item.RelatedRequestID)
                }
                lstSelectedLabels = item.Labels;
                tmpSelectedLabels = item.Labels;
                BindContractLabels();
                $("#txtBusinessArea").val(item.BusinessArea);
                getcontractareasettings(item.ContractArea);
                connamechecking = item.ContractArea;

                if (item.Renewable == "Yes") {
                    settingRenewable = true;
                } else {
                    settingRenewable = false;
                }

                if (item.Extendable != null && item.Extendable == "Yes") {
                    $("#hdnIsExtendable").text("Yes");
                    $("#hdnIsExtendableContract").text("Yes");
                    $("#chkDPExtendable").prop('checked', true);
                    $("#chkDPExtensionApproval").removeAttr("disabled");
                } else {
                    $("#hdnIsExtendable").text("No");
                }
                if (item.NeedApprovalForRenewal != null && item.NeedApprovalForRenewal == "Yes") {
                    $("#hdnRenewApprovalRequired").text("Yes");
                } else {
                    $("#hdnRenewApprovalRequired").text("No");
                }


                if (item.IsStandard == "Yes") {
                    // $("#iStandardCont").css('display', '');
                    //$("#iNonStandardCont").css('display', 'none');

                    $("#liContractStandard").css('display', 'none');
                    $("#liContractNonStandard").css('display', '');
                } else {
                    // $("#iStandardCont").css('display', 'none');
                    //$("#iNonStandardCont").css('display', '');
                    $("#liContractStandard").css('display', '');
                    $("#liContractNonStandard").css('display', 'none');
                }
                if (contractItem.IsDraft == "Yes") {
                    $(".draft").css('display', 'none');
                }
                //Default properties form values
                strSelectedContractType = item.ContractType;
                $("#ddlDPTransactionType").find('option[value="' + item.TransactionType + '"]').prop("selected", true);
                $("#ddlDPContractClass").find('option[value="' + item.ContractClass + '"]').prop("selected", true);
                if (item.NeedApprovalForRenewal != null && item.NeedApprovalForRenewal == "Yes") {
                    $("#chkDPRenewalApproval").prop('checked', true);
                }
                if (item.NeedApprovalForExtension != null && item.NeedApprovalForExtension == "Yes") {
                    $("#chkDPExtensionApproval").prop('checked', true);
                }
                if (item.IsFinalized == "Yes") {
                    $("#artAmendment").css('display', '');
                    $("#chkDPAmendmentApproval").removeAttr("disabled");
                    BindAmendments(contractid);
                } else {
                    $("#artAmendment").css('display', 'none');
                }
                if (item.TransactionType == "Legal/General Agreement") {
                    $("#artFinancials").css('display', 'none');
                }
                else {
                    $("#artFinancials").css('display', '');
                }

                //if (item.ContractValue != "0") {
                //    $("#lblContractValue").text("Not available");
                //    $("#txtContractValueCurrent").val("Not Available");
                //    $("#lblContractCurrency").text("");
                //    $.ajax({
                //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
                //        type: 'GET',
                //        dataType: 'json',
                //        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //        cache: false,
                //        success: function (data) {
                //            vContractValueSetting = data.IsContractValueInBaseCurrency;
                //            if (vContractValueSetting == "Display Contract Values in Base Currency") {
                //                ContractCurrencyType = 'base';
                //            } else {
                //                ContractCurrencyType = 'actual';
                //            }
                //            if (data.CurrencyDisplayStyle == "UK") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init');
                //                vCurrencyDisplayStyle = "UK";
                //            } else if (data.CurrencyDisplayStyle == "CAN") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: ' ', aDec: '.' });
                //                vCurrencyDisplayStyle = "CAN";
                //            } else if (data.CurrencyDisplayStyle == "EU") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: '.', aDec: ',' });
                //                vCurrencyDisplayStyle = "EU";
                //            }
                //        }
                //    });

                //} else {
                GetContractValueSetting(item);
                // }


                if (item.EndDate != null) {
                    var FEndDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { FEndDate = moment(new Date(item.EndDate)).utc().format('MM/DD/YYYY'); }
                    else { FEndDate = moment(new Date(item.EndDate)).utc().format(localStorage.AppDateFormat); }
                    $("#txtContractEndDateCurrent").val(FEndDate);
                } else {
                    $("#txtContractEndDateCurrent").val("Not Available");
                }

                if (item.ApprovalWorkflow != "In Progress") {
                    if (item.Permission != "View" && item.Permission != "") {
                        $("#addActivityApproval").css('display', '');
                    }
                }
                ContractTopActions();

                BindStatus();
                if (item.InRecycleBin == "Yes") {
                    $("#hdnPermission").val('View');
                    $("#liContractstatus").hide()
                    $("#dvRecyclebinMessage").css('display', '');
                }
                else {
                    $("#hdnPermission").val(item.Permission);
                }
                ApplyPermissionToMenu($("#hdnPermission").val());
                if (item.InRecycleBin == "Yes" && item.Permission == "Manage") {
                    $("#DeleteContract").show();
                    $("#DeleteContractRecycle").show();
                }
                if (localStorage.UserType.indexOf("Global Contract Owner") >= 0) {
                    $(".GlobalManage").css('display', '');
                } else {
                    $(".GlobalManage").css('display', 'none');
                }
                if (item.IsDraft == "Yes") {
                    $("#dvDraftMessage").css('display', '');
                    $("#addActivityApproval").css('display', 'none');
                    $("#RelatedContractEdit").css('display', 'none');
                    $(".draft").css('display', 'none');
                    //   var Stage = "";
                    //  Stage = getParameterByName("Stage");
                    if (Stage == "") {
                        var loca = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text());
                        $('#lnkDraftToUpdate').attr('href', loca);
                    } else {
                        var loca = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage;
                        $('#lnkDraftToUpdate').attr('href', loca);
                    }
                }
                if (item.IsStandard == "Yes") {
                    $("#liContractStandard").css('display', 'none');
                    $("#liContractNonStandard").css('display', '');
                } else {
                    $("#liContractStandard").css('display', '');
                    $("#liContractNonStandard").css('display', 'none');
                }
                if (contractItem.IsDraft == "Yes") {
                    $(".draft").css('display', 'none');
                }
                $("#loadingPage").fadeOut();
            }
        },
        error: function () {
            $("#dvContractNotAvail").dialog("open");
            $("#loadingPage").fadeOut();
        },
        complete: function () {
            BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
        }

    });


}

function BindContractPeopleMetadata(item) {
    var usersarr = [];
    var userDisable = '';
    var userTitle = '';
    if (item.ContractAreaAdministrators == null || item.ContractAreaAdministrators == "") {
        $("#liContractAreaAdminNA").css('display', '');
        $("#spContractAreaAdminView").text("Not Available");
    }
    else {
        usersarr = item.ContractAreaAdministrators.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            usertitle = '';
            userDisable = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#liContractAreaAdmin").html(vUsers);
        $("#spContractAreaAdminView").html(vUsers);
    }
    if (item.BusinessAreaOwners == null || item.BusinessAreaOwners == "") {
        $("#liBusinessAreaOwnerNA").css('display', '');
        $("#spBusinessAreaOwnerView").text("Not Available");
    }
    else {
        usersarr = item.BusinessAreaOwners.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#liBusinessAreaOwner").html(vUsers);
        $("#spBusinessAreaOwnerView").html(vUsers);
    }
    if (item.ContractManagers == null || item.ContractManagers == "") {
        $("#licontractmanagers").text("Not Available");
        $("#spContractOwner").html("Not Available");
        $("#spContractOwnerView").html("Not Available");

    }
    else {
        $("#licontractmanagers").text(item.ContractManagers);
        usersarr = item.ContractManagers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spContractOwner").html(vUsers);
        $("#spContractOwnerView").html(vUsers);

    }


    if (item.Reviewers == null || item.Reviewers == "") {
        $("#lireviewers").text("Not Available");
        $("#spReviewers").html("Not Available");
        $("#spReviewersView").html("Not Available");

    }
    else {
        $("#lireviewers").text(item.Reviewers);
        usersarr = item.Reviewers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
        }
        $("#spReviewers").html(vUsers);
        $("#spReviewersView").html(vUsers);
    }


    if (item.Approvers == null || item.Approvers == "") {
        $("#liapprovers").text("Not Available");
        $("#spApprovers").html("Not Available");
        $("#spApproversView").html("Not Available");
    }
    else {
        $("#liapprovers").text(item.Approvers);
        usersarr = item.Approvers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spApprovers").html(vUsers);
        $("#spApproversView").html(vUsers);
    }


    if (item.ApprovedBy == null || item.ApprovedBy == "") {
        $("#spApprovedBy").html("Not Available");
        $("#spApprovedByView").html("Not Available");
        $("#tdApprovedBy").html("Not Available");
    }
    else {
        usersarr = item.ApprovedBy.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spApprovedBy").html(vUsers);
        $("#spApprovedByView").html(vUsers);
        $("#tdApprovedBy").html(vUsers);
    }


    if (item.ReviewedBy == null || item.ReviewedBy == "") {
        $("#spReviewedBy").html("Not Available");
        $("#spReviewedByView").html("Not Available");
        $("#tdReviewedBy").html("Not Available");
    }
    else {
        usersarr = item.ReviewedBy.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spReviewedBy").html(vUsers);
        $("#spReviewedByView").html(vUsers);
        $("#tdReviewedBy").html(vUsers);
    }



    if (item.Signees == null || item.Signees == "") {
        $("#lisignees").text("Not Available");
        $("#spInternalSignees").html("Not Available");
        $("#spInternalSigneesView").html("Not Available");
    }
    else {
        $("#lisignees").text(item.Signees);
        usersarr = item.Signees.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spInternalSignees").html(vUsers);
        $("#spInternalSigneesView").html(vUsers);
    }



    if (item.SignedBy == null || item.SignedBy == "") {
        $("#liSignedBy").text("Not Available");
        $("#tdSignedBy").html("Not Available");
        $("#liSignedByView").text("Not Available");
    }
    else {
        $("#tdSignedBy").html(item.SignedBy);
        var vExternal = item.SignedBy.split(';');
        var reslength = vExternal.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            if (vExternal[i].trim() != '') {
                if (vUsers == '')
                    vUsers = vExternal[i].split('(')[0].trim();
                else
                    vUsers += '; ' + vExternal[i].split('(')[0].trim();
            }
        }
        $("#liSignedBy").text(vUsers);
        $("#liSignedByView").text(vUsers);
    }


    if (item.ExternalSignees == null || item.ExternalSignees == "") {
        $("#lisigneesExternal").html("Not Available");
        $("#lisigneesExternalView").html("Not Available");
    }
    else {
        var vExternal = item.ExternalSignees.split(';');
        var reslength = vExternal.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            if (vUsers == '')
                vUsers = vExternal[i].split('(')[0].trim();
            else
                vUsers += '; ' + vExternal[i].split('(')[0].trim();;
        }
        $("#lisigneesExternal").html(vUsers);
        $("#lisigneesExternalView").html(item.ExternalSignees);
        $('#txtExternalSignee').val($('#lisigneesExternalView').text());
    }



    if (item.ExternalSignedBy == null || item.ExternalSignedBy == "") {
        $("#liExternalSignedBy").text("Not Available");
        $("#tdExternalSignedBy").html("Not Available");
        $("#liExternalSignedByView").text("Not Available");
    }
    else {
        $("#liExternalSignedBy").html(item.ExternalSignedBy);
        $("#tdExternalSignedBy").html(item.ExternalSignedBy);
        $("#tdExternalSignedBy").html(item.ExternalSignedBy);
    }

    if (item.SharedWith == null || item.SharedWith == "") {
        $("#lisharedWith").text("Not Available");
        $("#lisharedWithView").text("Not Available");
        $("#tdSharedWith").html("Not Available");
    }
    else {
        $("#tdSharedWith").html(item.SharedWith);
        var vExternal = item.SharedWith.split(';');
        var reslength = vExternal.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            if (vExternal[i].trim() != '') {
                if (vUsers == '')
                    vUsers = vExternal[i].split('(')[0].trim();
                else
                    vUsers += '; ' + vExternal[i].split('(')[0].trim();
            }
        }
        $("#lisharedWith").text(vUsers);
        $("#lisharedWithView").text(vUsers);
    }


    if (item.ContractManagers == null || item.ContractManagers == "") {
        $("#licontractmanagers").text("Not Available");
        $("#spContractOwner").html("Not Available");
        $("#spContractOwnerView").html("Not Available");

    }
    else {
        $("#licontractmanagers").text(item.ContractManagers);
        usersarr = item.ContractManagers.split(";");
        var reslength = usersarr.length;
        var vUsers = '';
        for (var i = 0; i < reslength; i++) {
            userDisable = '';
            usertitle = '';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0) {
                userDisable = ' disabled_item_link';
                usertitle = 'title="This user is no longer available."';
            }
            if (vUsers == '')
                vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            else
                vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + usersarr[i].trim() + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + usersarr[i].trim() + '</a>';
            if (vActiveUsers.indexOf(usersarr[i].trim()) < 0 && vActiveUsers.length > 0)
                vUsers += '';
        }
        $("#spContractOwner").html(vUsers);
        $("#spContractOwnerView").html(vUsers);

    }
    if (item.Requestor == null || item.Requestor == "") {
        $("#spRequestor").text("Not Available");
        $("#spRequestorView").text("Not Available");
    }
    else {
        $("#spRequestor").html(item.ExternalSignedBy);
        $("#spRequestorView").html(item.ExternalSignedBy);
    }

}
function ApplyPermissionToMenu(vPermission) {
    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
        $('.Manage').css("display", "none");
        $('.Contribute').css("display", "none");
        //isPermissionView = true;
        if (vPermission == 'Contribute') {
            $('.StatusPermission').css("display", "");
        }
        else if (vPermission == 'View' || vPermission == '' || vPermission == null) {
            $('.Manage').css("display", "none");
            $('.Contribute').css("display", "none");
            //isPermissionView = true;
        }
        else if (vPermission == 'Manage') {
            $('.StatusPermission').css("display", "");
            if (contractItem.Status == "Archived" && localStorage.UserType.indexOf("Global Contract Owner") > -1)
                $('.StatusContributePermission').css("display", "");
            else
                $('.StatusContributePermission').css("display", "none");
        }
        if (document.getElementById("lisummarydocument").style.display != "none") {
            $(".clCoverSheet").css("display", "none")
        } else {
            $("#iStandardIcon").css("display", "none")
        }
    }
    else {
        if (vPermission == 'Contribute') {
            $('.Manage').css("display", "none");
        }
        else if (vPermission == 'Manage') {
            $('.Manage').css("display", "");
            //manoj
            if (documentview == null || documentview == "" || documentview == 'folder') {
                $('.Contribute').css("display", "");
            } else {
                $('.Contribute:not(#btnaddnewsubfolder)').css("display", "");
            }
            //manoj
        }
        else if (vPermission == 'View' || vPermission == '') {
            $('.Manage').css("display", "none");
            $('.Contribute').css("display", "none");
            //isPermissionView = true;
        }
    }
    if (!(contractItem.Status == "Expired" || contractItem.Status == "Archived" || contractItem.Status == "On Hold" || contractItem.Status == "Abort" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced")) {
        $('.DeleteRecord').css("display", "none");
    }
    if ((contractItem.IsDraft == "Yes" && contractItem.Permission == 'Manage' && contractItem.CreatedBy == localStorage.UserName)) {
        $('.DeleteRecord').css("display", "");
    }
    if (contractItem.IsDraft == "Yes") {
        $('.drafthide').css("display", "none");
    }
}


var workflowRoutingOptions = [];
var vWorkflowRules = [];
var workflowAdHoc = "";
$("#ddlRule").change(function (obj) {
    var vFilterRule = $.grep(vWorkflowRules, function (n, i) {
        return (n.RuleName == $("#ddlRule option:selected").text());
    });
    if (vFilterRule.length > 0) {
        $("#tblStage").empty();
        var workflowRules = vFilterRule[0];
        var participantsInXML = workflowRules.ParticipantsInXML;
        var totalFileCount = 0;
        if (workflowRules.RuleName == "Default") {
            if ($("#hdWorkflowType").val() == "Document Review")
                $("#txtWorkflowTitle").val('Review for ' + $("#hdWorkflowObjectTitle").val());
            else
                $("#txtWorkflowTitle").val('Approval for ' + $("#hdWorkflowObjectTitle").val());
        }
        else
            $("#txtWorkflowTitle").val(workflowRules.RuleName);
        if (participantsInXML != "") {
            $(participantsInXML).find('WorkflowPaticipant').each(function () {
                var StageTitle = $(this).find('StageTitle').text();
                var Participants = $(this).find('Participants').text();
                var Order = $(this).find('Order').text();
                totalFileCount++;
                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width46 start_workflow">';
                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                if (Order == "Serial")
                    htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                else
                    htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                if (totalFileCount > 1)
                    htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                else
                    htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                htmlFormatFile += '</td>';
                htmlFormatFile += '</tr>';

                $("#tblStage").append(htmlFormatFile);
                var $options = $("#ddlApprovers > option").clone();
                $('#ddlAssignTo' + totalFileCount).append($options);

                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                    if ($(this).val() != null) {
                        if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                            workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                        else {
                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                            $("#ddlOrder" + vasstoid).val('Serial');
                        }
                    }
                    else {
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                        $("#ddlOrder" + vasstoid).val('Serial');
                    }
                });
                GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                var vParticipantsArr = Participants.split(";");
                if (vParticipantsArr.length > 1)
                    $("#ddlOrder" + totalFileCount).prop('disabled', false);
                else
                    $("#ddlOrder" + totalFileCount).prop('disabled', true);

                //if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                //    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                //        $("#txtStage" + totalFileCount).prop('disabled', true);
                //        $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                //        $("#ddlOrder" + totalFileCount).prop('disabled', true);
                //        $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                //    }
                //}

                if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                    if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                        $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                        $("#ddlOrder" + totalFileCount).prop('disabled', true);
                    }
                    $("#txtStage" + totalFileCount).prop('disabled', true);
                    $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                }
            });
        }
        else {
            $("#txtWorkflowTitle").val('Approval for ' + $("#lblContractTitle").text());
            if ($("#ddlRule").html() == "") {
                $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                $("#lblddlRule").css("display", "");
                $("#ddlRule").css("display", "none");
                $("#lblddlRule").text("Ad-hoc");
            }
            if (!workflowAdHoc)
                $("#ddlRule").attr('disabled', 'disabled');
            var totalFileCount = 1;
            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width46 start_workflow">';
            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
            htmlFormatFile += '</td>';
            htmlFormatFile += '</tr>';

            $("#tblStage").append(htmlFormatFile);
            var $options = $("#ddlApprovers > option").clone();
            $('#ddlAssignTo' + totalFileCount).append($options);

            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                if ($(this).val() != null) {
                    if ($(this).val().length > 1)
                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                    else {
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                        $("#ddlOrder" + vasstoid).val("Serial");
                    }
                }
                else {
                    $("#ddlOrder" + vasstoid).val('Serial');
                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                }
            });
        }
    } else if ($("#ddlRule option:selected").text() == "Ad-hoc") {
        $("#txtWorkflowTitle").val('Ad-hoc workflow for ' + $("#hdWorkflowObjectTitle").val());
        $("#tblStage").empty();
        var totalFileCount = 1;
        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width46 start_workflow">';
        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
        htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblStage").append(htmlFormatFile);
        var $options = $("#ddlApprovers > option").clone();
        $('#ddlAssignTo' + totalFileCount).append($options);
        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
            if ($(this).val() != null) {
                if ($(this).val().length > 1)
                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                else {
                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                    $("#ddlOrder" + vasstoid).val("Serial");
                }
            }
            else {
                $("#ddlOrder" + vasstoid).val('Serial');
                $("#ddlOrder" + vasstoid).prop('disabled', true);
            }
        });
    }
});

// Document Related Methods 
function BindDocument1(contractid) {
    multipleChecksDocumentID = '';
    multipleChecksDocumentName = '';
    articleDocumentMileStone = '';
    $("#documentMultiActions").css('display', 'none');
    if (contractid == null || contractid == "") { contractid = vContractID; }
    var vGetTime = new Date();
    $.ajax({
        url: '/Documents/GetTime',
        type: 'GET',
        dataType: 'json',
        cache: false,
        success: function (data) {
            var jsObject = JSON.parse(data);
            vGetTime = new Date(jsObject);
        }
    });
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        vFinalSignature = "dropdownMenuFinalSignature";
        vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
        $("#dropdownMenuAmendment .signature").show();
        $("#dropdownMenuAmendmentFinal .signature").show();
    }
    else {
        $("#dropdownMenuAmendment .signature").hide();
        $("#dropdownMenuAmendmentFinal .signature").hide();
    }

    $("#ulDocument").empty();
    $("#alertsListUpcomingDocument").empty();
    $("#ddlDocumentList").empty();
    $("#dvDocument").empty();
    DocumentCount = 0;
    $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data == null) {//NoContent HttpStatusCode Update
                $("#ulDocument").empty();
                $("#lblDocumentsCount").text('0');
                $("#ulDocumentLoading").css('display', 'none');
                $("#ulDocument").append('No items found.');
                $("#ddlTemplateAndClauses").append('<option value="-1">No Document Available</option>');
            } else {//NoContent HttpStatusCode Update
                var count = 0;
                var vPermission = $("#hdnPermission").val();

                var settings = {
                    pattern: /\.[0-9a-z]+$/i,
                    knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
                    WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
                };
                var datalenght = data.length;
                //clause
                $("#ddlTemplateAndClauses").empty();
                $("#ddlTemplateAndClauses").append('<option value="0">--Select--</option>');
                $("#docversion").css("display", "none");
                $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
                $("#ulDocument").empty();
                var vTitle = '';
                var article = '';
                if (datalenght > 0) {
                    var vdocitem = data[0];
                    docdefaultview(vdocitem.ContractArea);
                }
                var DocDefaultView = ""
                if (thisDocumentLibrarySettings != '' && thisDocumentLibrarySettings != 'undefined' && typeof thisDocumentLibrarySettings != "undefined") {
                    DocDefaultView = thisDocumentLibrarySettings.DocDefaultView;
                }
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    count++
                    var vClass = "openmenuDocumentFinal";
                    var vv = moment(new Date(item.Modified));
                    var vTime = vv.fromNow();
                    vTime = vv.from(vGetTime);
                    var vDocIcon = '<img src="../Content/Images/Doc_draft.png" class="doc_type margin-left-5" alt="Draft Document" title="Draft Document" />';
                    var vPrimDocIcon = '';
                    if (item.IsFinalized == "Yes") {
                        vClass = "openmenuDocument";
                        vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized Document" title="Finalized Document" />';
                        if (item.CreationMode == "Amendment") {
                            vClass = "openmenuAmendmentDocumentFinal";
                            vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                        }
                    } else if (item.CreationMode == "Amendment") {
                        vClass = "openmenuAmendmentDocument";
                        vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                    }
                    if (item.IsPrimary == "Yes") {
                        vPrimDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                    }
                    vURLDoc = encodeURI(item.DocumentUrl);
                    var ext = vURLDoc.match(settings.pattern);
                    var vFileType = '<dd class="file-icon none"></dd>';
                    if (ext != null) {
                        if (ext.length > 0) { ext = ext[0].slice(1); }
                        if (vURLDoc.toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                            if (jQuery.inArray(ext, settings.WopiFrameFileTypes) > -1) {
                                vRawURLDoc = encodeURIComponent(item.DocumentUrl);
                                vURLDoc = localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + vRawURLDoc + "&action=default";
                            } else {
                                vRawURLDoc = "";
                            }
                        }

                        if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                            vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                        }
                    }

                    if (count <= 5)
                        article += '<li class=" margin-bottom-5">';
                    else
                        article += '<li class="ShowMoreDocuments margin-bottom-5" style="display:none;">';

                    article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
                    article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
                    article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
                    article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
                    article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
                    article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
                    article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
                    var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
                    article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';

                    if (item.CreationMode == "Amendment") {
                        article += '<label id="AmendmentID" style="display:none;">' + item.AmendmentID + '</label>';
                    }
                    article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" class="Contribute" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';

                    switch (item.DocumentStatus) {
                        case "New":
                            article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                            break;
                        case "Ready for Signature":
                            article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                            break;
                        case "Awaiting Signatures":
                            article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                            break;
                        case "Active":
                            article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                            break;
                        case "Signed":
                            article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                            break;
                        case "Expired":
                            article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                            break;
                        case "Awaiting Review":
                            article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                            break;
                        case "Reviewed":
                            article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                            break;
                        case "In Negotiation":
                            article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                            break;
                        case "Negotiation Complete":
                            article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                            break;
                    }

                    vTitle = item.DocumentName;
                    if (vTitle.length > 61)
                    { vTitle = vTitle.substring(0, 60) + '...'; }

                    if (vRawURLDoc != "") {
                        if (DocDefaultView == "WordClient") {
                            article += vFileType + '<a href="javascript:void(0);" onclick="viewdocinword(\'' + vRawURLDoc + '\')" title="' + item.DocumentName + '">' + vTitle + '</a>';
                        } else {
                            article += vFileType + '<a href="' + vURLDoc + '" target="_blank" title="' + item.DocumentName + '">' + vTitle + '</a>';
                        }
                    } else {
                        article += vFileType + '<a href="' + vURLDoc + '" target="_blank" title="' + item.DocumentName + '">' + vTitle + '</a>';
                    }

                    article += '<span class="sub-text"> ' + vTime + '</span>';
                    article += '';
                    article += '';
                    article += vPrimDocIcon + vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
                    if (item.IsMetadataMismatch == "Yes") {
                        article += '<a href="javascript:void(0);" data="' + item.ContractAndDocumentMetadata + '" onclick="javascript: openmismatched(this)"><img src="../Content/Images/icon/mismatch_icon.png"  style="cursor:pointer;" title="Mismatched Document and Contract Record Metadata." class="margin-left-5" /></a>';
                    }
                    article += '</li>';
                    DocumentCount++;

                    articleDocMiletstone = BindDocumentMilestones(item);
                    var doclist = '<option value="' + item.RowKey + '">' + item.DocumentName + '</option>';
                    $("#ddlDocumentList").append(doclist);
                    articleDocumentMileStone += articleDocMiletstone;
                    //BindDocumentAlert(item);
                    //Clause
                    $("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
                }
                $("#ulDocument").html(article);
                if (count > 5) {
                    var more = count - 5;
                    $("#dvDocument").html('<a id="ShowMoreDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreDocuments()">' + more + ' More Document(s) </a>' +
                                            '<a id="ShowLessDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessDocuments()" style="display:none;">Show less</a>');
                }

                $("#lblDocumentsCount").text(count);

                if (!$("#lblDocumentsCount").text().trim()) {
                    $("#ulDocument").empty();
                    $("#ulDocument").append('No items found.');
                }
                $(".openmenuDocument").contextMenu({ menu: vFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                $(".openmenuDocumentFinal").contextMenu({ menu: vMarkFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                $(".openmenuAmendmentDocument").contextMenu({ menu: "dropdownMenuAmendment", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
                $(".openmenuAmendmentDocumentFinal").contextMenu({ menu: "dropdownMenuAmendmentFinal", leftButton: true }, function (action, el, pos) {
                    contextMenuAmendmentDocument(action, el.parent("li"), pos);
                });
                $("#contractLogs").empty();
            }
        },
        error: function (request) {
            $("#ulDocument").empty();
            $("#lblDocumentsCount").text('0');
            $("#ulDocumentLoading").css('display', 'none');
            $("#ulDocument").append('No items found.');
            $("#ddlTemplateAndClauses").append('<option value="-1">No Document Available</option>');
        },
        complete: function () {
            BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
        }
    });
}

function BindDocumentAlert(item) {
    if (item.ValidTill != null) {
        var sRowKey = item.RowKey;
        var sAlertTitle = item.DocumentName;
        var sPriority = "";

        var curDate = moment(new Date());
        var vDate = item.ValidTill;
        var start = moment(vDate);
        var beforealert = start.diff(curDate, "days");
        if (beforealert > 0 && ((beforealert <= item.Reminder1 + 60 && item.Reminder1Condition == "before") ||
            (beforealert <= item.Reminder2 + 60 && item.Reminder2Condition == "before") ||
            (beforealert <= item.Reminder3 + 60 && item.Reminder3Condition == "before"))) {
            var alert = "";
            alert += "<img src='../Content/Images/waitng-approval.png' />" + sAlertTitle;
            alert += " <small class='sub-text'>(reminder due in " + beforealert + " days)</small><br/>";
            $("#alertsListUpcomingDocument").append(alert);

            $("#spNoUpcomingAlert").css('display', 'none');
        }

        if (item.Reminder1Condition == "after" && item.Reminder1 > 0) {
            var nextDate = moment(vDate).add(item.Reminder1,"days");
            var afteralert = nextDate.diff(curDate, "days");
            if (afteralert > 0 && afteralert <= 60) {
                var alert = "";
                alert += "<img src='../Content/Images/waitng-approval.png' />" + sAlertTitle;
                alert += " <small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
                $("#alertsListUpcomingDocument").append(alert);

                $("#spNoUpcomingAlert").css('display', 'none');
            }
        }
        if (item.Reminder2Condition == "after" && item.Reminder2 > 0) {
            var nextDate = moment(vDate).add(item.Reminder2,"days");
            var afteralert = nextDate.diff(curDate, "days");
            if (afteralert > 0 && afteralert <= 60) {
                var alert = "";
                alert += "<img src='../Content/Images/waitng-approval.png' />" + sAlertTitle;
                alert += " <small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
                $("#alertsListUpcomingDocument").append(alert);

                $("#spNoUpcomingAlert").css('display', 'none');
            }

        }
        if (item.Reminder3Condition == "after" && item.Reminder3 > 0) {
            var nextDate = moment(vDate).add(item.Reminder3,"days");
            var afteralert = nextDate.diff(curDate, "days");
            if (afteralert > 0 && afteralert <= 60) {
                var alert = "";
                alert += "<img src='../Content/Images/waitng-approval.png' />" + sAlertTitle;
                alert += " <small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
                $("#alertsListUpcomingDocument").append(alert);

                $("#spNoUpcomingAlert").css('display', 'none');
            }
        }
    }
}

var multipleChecksDocumentID = "";
var multipleChecksDocumentName = "";
var multipleChecksDocumentReview = "";
var multipleChecksDocumentReviewTitle = "";
var multipleChecksDocumentSentForSign = "";
var multipleChecksDocumentIsFinalized = "";
var multipleChecksDocumentIsPrimaryDoc = "";
var multipleChecksDocumentURL = "";
function checkMultipleDocuments(object) {
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    multipleChecksDocumentSentForSign = "";
    multipleChecksDocumentIsFinalized = "";
    multipleChecksDocumentIsPrimaryDoc = "";
    multipleChecksDocumentURL = "";
    var CanSendForSign = true; // Bug(eO37115)
    var ValidDocumentForSign = true;
    var canShowReview = true;
    var IsDocuSign = false;
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        var vConfig = vAccFeat[0].Configuration;
        var vProvider = $(vConfig).find('Provider').text();
        if (vProvider == "Docu Sign")
            IsDocuSign = true;
    }
    selectedamnddoc = false;
    selectedamnddocname = [];
    $('input[type=checkbox][name="MultipleDocuments"]:checked').each(function () {
        var DocumentID = this.id;
        var isChecked = this.checked;
        var DocumentName = $(this).parent("li").find("#DocumentName").text();
        var ReviewWorkflow = $(this).parent("li").find("#ReviewWorkflow").text();
        var SentForSign = $(this).parent("li").find("#SentForSign").text();
        var IsFinalized = $(this).parent("li").find("#IsFinalized").text();
        var IsPrimaryDoc = $(this).parent("li").find("#IsPrimaryDoc").text();
        var LinkURL = $(this).parent("li").find("a").attr('href');
        var documentStatus = $(this).parent("li").find("b").attr('title');
        if (LinkURL == "#") {
            LinkURL = $(this).parent("li").find("a").attr('seqe')
        }
        var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
        var amnmantdocument = $(this).parent("li").find("#FolderCreationMode").text();
        if (isChecked) {
            if (contractItem.Status != 'Expired' && contractItem.Status != 'Archived')
                $("#documentMultiActions").css('display', '');
            if (multipleChecksDocumentID == "") {
                multipleChecksDocumentID = DocumentID;
                multipleChecksDocumentName = DocumentName;
                multipleChecksDocumentReview = ReviewWorkflow;
                if (SentForSign != '')
                    multipleChecksDocumentSentForSign = SentForSign;
                multipleChecksDocumentIsFinalized = IsFinalized;
                multipleChecksDocumentIsPrimaryDoc = IsPrimaryDoc;
                multipleChecksDocumentURL = DocumentUrl;
                multipleChecksDocumentReviewTitle = "Review for " + DocumentName;
            }
            else {
                multipleChecksDocumentID = multipleChecksDocumentID + ';' + DocumentID;
                //multipleChecksDocumentName = multipleChecksDocumentName + ';' + DocumentName;
                multipleChecksDocumentName = multipleChecksDocumentName + '~' + DocumentName;
                multipleChecksDocumentReview = multipleChecksDocumentReview + ";" + ReviewWorkflow;
                if (SentForSign != '')
                    multipleChecksDocumentSentForSign += ";" + SentForSign;
                multipleChecksDocumentIsFinalized += ";" + IsFinalized;
                multipleChecksDocumentIsPrimaryDoc += ";" + IsPrimaryDoc;
                multipleChecksDocumentURL += "|" + DocumentUrl;
                multipleChecksDocumentReviewTitle = multipleChecksDocumentReviewTitle + ";Review for " + +DocumentName;
            }
            var ext = DocumentName.split('.').pop();

            // Not Displaying Send for Signature option when Unsupported doc is present - Bug(eO37115)
            ValidDocumentForSign = true;
            if (typeof (ext) != "undefined" && ext != "") {
                if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1 || ext.indexOf("pdf") > -1) {
                    ValidDocumentForSign = true;
                } else {
                    ValidDocumentForSign = false;
                }
            } else {
                ValidDocumentForSign = false;
            }

            CanSendForSign = CanSendForSign && ValidDocumentForSign;

            if (amnmantdocument == "Amendment") {
                selectedamnddocname.push(DocumentName);
                selectedamnddoc = true;
            }

            // Bug(eO37265)
            if (documentStatus == "Expired") {
                canShowReview = canShowReview && false;
            }
        }
    });

    if (multipleChecksDocumentID.trim() == "") {
        $("#documentMultiActions").css('display', 'none');
    }
    else {
        if (multipleChecksDocumentReview.indexOf('In Progress') >= 0) {
            $("#dropdownMenuDocumentMultiActions .review").hide();
        }
        else if (contractItem.IsDraft != "Yes") {
            $("#dropdownMenuDocumentMultiActions .review").show();
        }
        //if (multipleChecksDocumentSentForSign != "") {
        //    $("#dropdownMenuDocumentMultiActions .final").hide();
        //}
        //else if (contractItem.IsDraft != "Yes") {
        //    $("#dropdownMenuDocumentMultiActions .final").show();
        //}
        if (multipleChecksDocumentIsFinalized.indexOf('Yes') >= 0) {
            $("#dropdownMenuDocumentMultiActions .final").hide();
        }
        else if (contractItem.IsDraft != "Yes") {
            $("#dropdownMenuDocumentMultiActions .final").show();
        }
        if (multipleChecksDocumentSentForSign != "" || multipleChecksDocumentIsFinalized.indexOf('No') >= 0
            || !CanSendForSign || !IsDocuSign) {
            $("#dropdownMenuDocumentMultiActions .signature").hide();
        }
        else if (contractItem.IsDraft != "Yes") {
            $("#dropdownMenuDocumentMultiActions .signature").show();
        }

        if (contractItem.IsDraft == "Yes" || !canShowReview) { // Bug(eO37265)
            $("#dropdownMenuDocumentMultiActions .signature").hide();
            $("#dropdownMenuDocumentMultiActions .review").hide();
            $("#dropdownMenuDocumentMultiActions .separator.Contribute").hide();
        }
    }
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}

function contextMenuDocumentMultiActions(action, el, pos) {
    switch (action) {
        case "review":
            {
                MultipleDocumentReview();
                break;
            }
        case "final":
            {
                MultipleDocumentFinal();
                break;
            }
        case "remove":
            {
                if (selectedamnddoc == true && selectedamnddocname.length > 0) {
                    var documentnamevalues = "";
                    $(selectedamnddocname).each(function (idoc, amnddocname) {
                        documentnamevalues += "," + amnddocname;
                    });
                    documentnamevalues = (documentnamevalues.charAt(0) != ',') ? documentnamevalues : documentnamevalues.substr(1);
                    var n = documentnamevalues.lastIndexOf(",");
                    if (n > -1) {
                        documentnamevalues = documentnamevalues.substr(0, n) + 'and' + documentnamevalues.substr(n + 1);
                    }
                    swal("", "You can not untag following Amendment document(s) <span style='font-weight:700'>" + documentnamevalues + "</span> .");
                } else {
                    MultipleDocumentRemove();
                }
                break;
            }
        case "delete":
            {
                MultipleDocumentDelete();
                break;
            }
        case "move":
            {
                $('#load').empty();
                //if (typeof ($("#hdnContractDocumentsUrlFixed").text()) != "undefined" && $("#hdnContractDocumentsUrlFixed").text() != null && $("#hdnContractDocumentsUrlFixed").text() != "") {

                //}
                var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                finalurl = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;

                //manoj
                var documenturltopass = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? $('#showAll').text().replace(/ \/ /g, '/') : "";
                if (documenturltopass != "") {
                    documenturltopass = documenturltopass.trim();
                    documenturltopass = (documenturltopass.charAt(0) == '/') ? documenturltopass.substring(1) : documenturltopass;
                    var arrdocumenturltopass = documenturltopass.split('/');
                    finalurl += "/" + arrdocumenturltopass[0];
                }
                //manoj

                var ContarctName = $("#lblContractTitle").text().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                urldetailsforcontact = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;
                CreateFolderToMove(finalurl, ContarctName);
                $("#hdntreeviewFolderMove").val('move');
                $("#treeviewFolderMove").dialog("option", "title", "Move to Folder");
                $("#treeviewFolderMove").dialog("open");
                break;
            }
        case "createcopy":
            {
                $('#load').empty();

                var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                finalurl = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;
                var documenturltopass = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? $('#showAll').text().replace(/ \/ /g, '/') : "";
                if (documenturltopass != "") {
                    documenturltopass = documenturltopass.trim();
                    documenturltopass = (documenturltopass.charAt(0) == '/') ? documenturltopass.substring(1) : documenturltopass;
                    var arrdocumenturltopass = documenturltopass.split('/');
                    finalurl += "/" + arrdocumenturltopass[0];
                }
                var ContarctName = $("#lblContractTitle").text().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                urldetailsforcontact = (finalurl.charAt(0) == '/') ? finalurl.substring(1) : finalurl;
                CreateFolderToMove(finalurl, ContarctName);

                $("#hdntreeviewFolderMove").val('copy');
                $("#treeviewFolderMove").dialog("option", "title", "Create Copy");
                $("#treeviewFolderMove").dialog("open");
                break;
            }
        case "signature":
            {
                MultipleDocumentSignature(el);
                break;
            }
    }
}

//manoj
//ContextMenu for asc/desc order contract folder(s)/document(s)
function contextMenuDocumentSort(action, el, pos) {
    switch (action) {
        case 'ascorder': {
            if (typeof (el.prevObject[0].id) != "undefined" && el.prevObject[0].id != null && el.prevObject[0].id != "") {
                if (el.prevObject[0].id == "pindocumentsort") {
                    orderinglist('ulPinDocument', 'lblPinDocumentsCount', 'asc');
                } else {
                    orderinglist('ulDocument', 'lblDocumentsCount', 'asc')
                }
            }
            break;
        }
        case 'descorder': {
            if (typeof (el.prevObject[0].id) != "undefined" && el.prevObject[0].id != null && el.prevObject[0].id != "") {
                if (el.prevObject[0].id == "pindocumentsort") {
                    orderinglist('ulPinDocument', 'lblPinDocumentsCount', 'desc');
                } else {
                    orderinglist('ulDocument', 'lblDocumentsCount', 'desc')
                }
            }
            break;
        }
    }
}
//manoj
function RemoveErrors() {
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validuser").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validmultiselect").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validdate").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validnumspec").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validNicEdit").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validemail").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".specialchar").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validnumber").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".error").removeClass("error");
}
function GetContractPendingAction(open, tabname) {
    //if (typeof tabname != "undefined") {
    //    if (tabname == "Missing") {
    //        currentPanel = "Missing";
    //    } else if (tabname == "Contract Fields") {
    //        currentPanel = "Contract Fields";
    //    }
    //}
    if (!pendingStarted) {
        pendingStarted = true;
        if (open == true)
            $("#loadingPage").fadeIn();
        //if ($("#tblRequired").text() == "") {
        //var ContractSettings = "";
        //var StartApproval = "";
        //var EditContract = "";
        //var JustInfo = "";
        //var Activities = "";
        //var OnlyDocuments = "";
        //var OnlyTerms = "";
        //var OnlyMilestonesObli = "";
        //var OnlyMetadata = "";
        //var OnlyPeople = "";
        var DisplayMissingData = [];
        //$("#tblContractSettingMetadata").empty()
        //$("#tblStartApprovalMetadata").empty()
        $("#tblRequired").html('<img src="../Content/Images/icon/loading.gif"> ');
        $("#tblPeoples").html('<img src="../Content/Images/icon/loading.gif"> ');
        $("#tblDocuments").html('<img src="../Content/Images/icon/loading.gif"> ');
        $("#tblMilestones").html('<img src="../Content/Images/icon/loading.gif"> ');
        $("#tblMilestones").html('<img src="../Content/Images/icon/loading.gif"> ');
        //$("#tblActivitiesMetadata").empty()
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/PendingAction',
            type: 'GET',
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            processData: false,
            success: function (item) {
                //manoj
                if (item != null) {
                    for (keyvalue in item) {
                        switch (keyvalue) {
                            case "OnlyDocuments":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblDocumentMissing").html(item[keyvalue]);
                                        $("#tblDocumentMissing").html('<a href="javascript:void(0);" data-title="' + $(item[keyvalue]).text() + '" onclick="GetContractPendingAction(true, \'Documents\')"><img src="/Content/Images/missing-exc.png"/></a>'); // Added 2.4final to 2.4
                                        DisplayMissingData.push("tblDocumentMissing");
                                        $("#tblDocuments").html(item[keyvalue]);
                                    } else {
                                        $("#tblDocumentMissing").html('');
                                        $("#tblDocuments").html("<tr><td class='f_head'>No Required Document Template(s) and Document Type(s) are missing.</td></tr>");
                                    }
                                    //$("#tblDocumentMissing").parent().show();
                                    break;
                                }
                            case "OnlyTerms":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        $("#tblTermsMissing").html(item[keyvalue]);
                                        //DisplayMissingData.push("tblTermsMissing");
                                    } else {
                                        // $("#tblTermsMissing").html("<tr><td class='f_head'>No item found.</td></tr>");
                                    }
                                    //$("#tblTermsMissing").parent().show();
                                    break;
                                    //$("#tblDocumentMissing").parent().show();

                                }
                            case "OnlyMilestonesObli":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblMilestoneMissing").html(item[keyvalue]);
                                        $("#tblMilestoneMissing").html('<a href="javascript:void(0);" data-title="' + $(item[keyvalue]).text() + '" onclick="GetContractPendingAction(true, \'Milestones\')"><img src="/Content/Images/missing-exc.png"/></a>'); //Added from 2.4final to 2.4
                                        $("#tblMilestones").html(item[keyvalue]);
                                        DisplayMissingData.push("tblMilestoneMissing");
                                    } else {
                                        $("#tblMilestones").html("<tr><td class='f_head'>No Required Milestone(s) is missing.</td></tr>");
                                        $("#tblMilestoneMissing").html('');
                                    }
                                    break;
                                }
                            case "OnlyMetadata":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblMetadataMissing").html(item[keyvalue]);
                                        $("#tblMetadataMissing").html('<a href="javascript:void(0);"  onclick="GetContractPendingAction(true, \'Required\')" data-title="' + $(item[keyvalue]).text() + '"><img src="/Content/Images/missing-exc.png"></a>'); //Added from 2.4final to 2.4
                                        $("#tblRequired").html(item[keyvalue]);
                                        DisplayMissingData.push("tblMetadataMissing");
                                    } else {
                                        $("#tblRequired").html("<tr><td class='f_head'>No Required Metadata is missing.</td></tr>");
                                        $("#tblMetadataMissing").html("<tr><td class='f_head'>No item found.</td></tr>");
                                    }
                                    break;
                                }
                            case "OnlyPeople":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblPeopleMissing").html(item[keyvalue]);
                                        $("#tblPeopleMissing").html('<a href="javascript:void(0);" onclick="GetContractPendingAction(true, \'Peoples\')"  data-title="' + $(item[keyvalue]).text() + '"><img src="/Content/Images/missing-exc.png"/></a>'); //Added from 2.4final to 2.4
                                        $("#tblPeoples").html(item[keyvalue]);
                                        DisplayMissingData.push("tblPeopleMissing");
                                    } else {
                                        $("#tblPeoples").html("<tr><td class='f_head'>No Required People(s) are missing.</td></tr>");
                                        $("#tblPeopleMissing").html("<tr><td class='f_head'>No item found.</td></tr>");
                                    }
                                    break;
                                }
                            case "Activities":
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "<tr><td class='f_head'>No item found.</td></tr>") {
                                        $("#tblActivity").html(item[keyvalue]);
                                    } else {
                                        $("#tblActivity").html("<tr><td class='f_head'>No Pending Tasks.</td></tr>");
                                    }
                                    break;
                                }
                            case "OnlyDescription": //ENH 23  Minor Enhancement Specs-Rahul
                                {
                                    if (item[keyvalue] != null && item[keyvalue] != "" && item[keyvalue] != "No item found.") {
                                        //$("#tblDescriptionMissing").html(item[keyvalue]);
                                        $("#tblDescriptionMissing").html('<tr><td><a href="javascript:void(0);" data-title="' + $(item[keyvalue]).text() + '"><img src="/Content/Images/missing-exc.png" style="cursor: default !important;"/></a></td></tr>');
                                        DisplayMissingData.push("tblDescriptionMissing");
                                    } else {
                                        $("#tblDescriptionMissing").html("<tr><td class='f_head'><a href='javascript:void(0);' data-title='Missing Contract Record Description.'><img src='/Content/Images/missing-exc.png'/></a></td></tr>");
                                        //$("#tblDescriptionMissing").html("<tr><td class='f_head'><label title='Missing Contract Record Description.'>Missing Contract Record Description.</label></td></tr>");
                                        //$("#lblContractDescription").css("display", "");
                                    }
                                    break;
                                }
                        }
                    }
                    if (DisplayMissingData.length > 0) {
                        $(DisplayMissingData).each(function (iDisplayMissingData, itemDisplayMissingData) {
                            $("#" + itemDisplayMissingData).parent().show();
                        });
                    } else {
                        $(".clpendingaction").css("display", "none");
                    }

                    ////manoj
                    //var vActions = '';
                    //ContractSettings += delayedTermDates;
                    //ContractSettings += item["ContractSettings"];
                    //StartApproval = item["StartApproval"];
                    //EditContract = item["EditContract"];
                    //JustInfo = item["JustInfo"];
                    //Activities = item["Activities"];
                    //OnlyDocuments = item["OnlyDocuments"];
                    //OnlyTerms = item["OnlyTerms"];
                    //OnlyMilestonesObli = item["OnlyMilestonesObli"];
                    //OnlyMetadata = item["OnlyMetadata"];
                    //OnlyPeople = item["OnlyPeople"];



                    //if (ContractSettings != '' && ContractSettings != 'undefined' && typeof ContractSettings != "undefined") {
                    //    $("#tblContractSettingMetadata").append(ContractSettings);
                    //} else {
                    //    $("#tblContractSettingMetadata").append("<tr><td>No pending contract settings.</td></tr>");
                    //}
                    //if (StartApproval != '' && typeof StartApproval != "undefined") {
                    //    $("#tblStartApprovalMetadata").append(StartApproval);
                    //    var DocId = $("#tblStartApprovalMetadata .DocumentRowId");
                    //    $(DocId).each(function (i, docid) {
                    //        var documId = docid.id;
                    //        if (typeof documId != "undefined") {
                    //            documId = documId.replace('DocSignMiss-', '');
                    //            if (typeof documId != "undefined" && documId != "") {
                    //                var article = "";
                    //                $.ajax({
                    //                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/SignatureDetail?documentid=' + documId,
                    //                    type: 'GET',
                    //                    dataType: 'json',
                    //                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    //                    cache: false,
                    //                    async: false,
                    //                    success: function (data) {
                    //                        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    //                        var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    //                            return (n.RowKey == "1" && n.Status == "ON");
                    //                        });
                    //                        if (vAccFeat.length > 0) {
                    //                            var num = 1;
                    //                            var vConfig = vAccFeat[0].Configuration;
                    //                            var vProvider = $(vConfig).find('Provider').text();
                    //                            if (vProvider == "Right Signature") {
                    //                                $(data).find('recipient').each(function () {
                    //                                    var issender = $(this).find('is-sender').text();
                    //                                    if (issender != 'true') {
                    //                                        var username = $(this).find('name').text();
                    //                                        var mustsign = $(this).find('must-sign').text();
                    //                                        var email = $(this).find('email').text();
                    //                                        var state = $(this).find('state').text();
                    //                                        article += '<tr>' + num + '.';
                    //                                        article += '<b>' + username + ' - ' + email + '</b> ';
                    //                                        article += '<small>(' + state + ')</small>';
                    //                                        article += '</tr>';
                    //                                        num += 1;
                    //                                    }
                    //                                });
                    //                            }
                    //                            else if (vProvider == "Echo Sign") {
                    //                                $(data).find('participants').each(function () {
                    //                                    var mustsign = $(this).find('ParticipantInfo').text();
                    //                                    var email = $(this).find('email:first').text();
                    //                                    var name = $(this).find('name:first').text();
                    //                                    article += '<tr>' + num + '.';
                    //                                    article += '<b>' + email + '</b> ';
                    //                                    article += '<small>(' + name + ')</small>';
                    //                                    article += '</tr>';
                    //                                    num += 1;
                    //                                });
                    //                            }
                    //                            else if (vProvider == "Docu Sign") {
                    //                                $(data).find('Recipients').each(function () {
                    //                                    var email = $(this).find('Email').text();
                    //                                    var name = $(this).find('UserName').text();
                    //                                    article += '<tr>' + num + '.';
                    //                                    article += '<b>' + email + '</b> ';
                    //                                    article += '<small>(' + name + ')</small>';
                    //                                    article += '</tr>';
                    //                                    num += 1;
                    //                                });
                    //                            }
                    //                        }
                    //                        var DocTd = document.getElementById('DocSignMiss-' + documId);
                    //                        if (typeof article != "undefined") {
                    //                            $(DocTd).append(article);
                    //                        }
                    //                        pendingStarted = false;
                    //                    },
                    //                    error: function (data) {
                    //                        var DocTd = document.getElementById('DocSignMiss-' + documId);
                    //                        if (typeof article != "undefined") {
                    //                            $(DocTd).append(article);
                    //                        }
                    //                        pendingStarted = false;
                    //                    }

                    //                });
                    //            }
                    //        }

                    //    });

                    //}
                    //else {
                    //    $("#tblStartApprovalMetadata").append("<tr><td>No pending/missing signee.</td></tr>");
                    //}
                    //if (EditContract != '' && typeof EditContract != "undefined") {
                    //    $("#tblEditcontractMetadata").append(EditContract);
                    //} else {
                    //    $("#tblEditcontractMetadata").append("<tr><td>No pending required fields.</td></tr>");
                    //}
                    //if (JustInfo != '' && typeof JustInfo != "undefined") {
                    //    $("#tblJustInfoMetadata").append(JustInfo);
                    //} else {
                    //    $("#tblJustInfoMetadata").append("<tr><td>No pending actions required.</td></tr>");
                    //}
                    //if (Activities != '' && typeof Activities != "undefined") {
                    //    //$("#tblActivitiesMetadata").append(Activities);
                    //    $("#tblActivity").html(Activities);
                    //} else {
                    //    //$("#tblActivitiesMetadata").append("<tr><td>No pending tasks.</td></tr>");
                    //    $("#tblActivity").html("<tr><td>No pending tasks.</td></tr>");
                    //}

                    //if (OnlyDocuments != '' && typeof OnlyDocuments != "undefined") {
                    //    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    //    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                    //        return (n.RowKey == "20" && n.Status == "ON");
                    //    });
                    //    var details = "";
                    //    if (vDocLibFeat.length > 0) {
                    //        $("#tblDocumentMissing").empty();
                    //        $("#tblDocumentMissing").append(OnlyDocuments);
                    //        $("#tblDocumentMissing").parent().show();
                    //    } else {
                    //        $("#tblDocumentMissingNormal").empty();
                    //        $("#tblDocumentMissingNormal").append(OnlyDocuments);
                    //        $("#tblDocumentMissingNormal").parent().show();
                    //    }
                    //} else {
                    //    $("#tblDocumentMissing").empty();
                    //    $("#tblDocumentMissing").parent().hide();

                    //    $("#tblDocumentMissingNormal").empty();
                    //    $("#tblDocumentMissingNormal").parent().hide();
                    //}

                    //if (OnlyTerms != '' && typeof OnlyTerms != "undefined") {
                    //    $("#tblTermsMissing").empty();
                    //    $("#tblTermsMissing").append(OnlyTerms);
                    //    $("#tblTermsMissing").parent().show();
                    //} else {
                    //    $("#tblTermsMissing").empty();
                    //    $("#tblTermsMissing").parent().hide();
                    //}

                    //if (OnlyMilestonesObli != '' && typeof OnlyMilestonesObli != "undefined") {
                    //    $("#tblMilestoneMissing").empty();
                    //    $("#tblMilestoneMissing").append(OnlyMilestonesObli);
                    //    $("#tblMilestoneMissing").parent().show();
                    //} else {
                    //    $("#tblMilestoneMissing").empty();
                    //    $("#tblMilestoneMissing").parent().hide();
                    //}

                    //if (OnlyMetadata != '' && typeof OnlyMetadata != "undefined") {
                    //    $("#tblMetadataMissing").empty();
                    //    $("#tblMetadataMissing").append(OnlyMetadata);
                    //    $("#tblMetadataMissing").parent().show();
                    //} else {
                    //    $("#tblMetadataMissing").empty();
                    //    $("#tblMetadataMissing").parent().hide();
                    //}

                    //if (OnlyPeople != '' && typeof OnlyPeople != "undefined") {
                    //    $("#tblPeopleMissing").empty();
                    //    $("#tblPeopleMissing").append(OnlyPeople);
                    //    $("#tblPeopleMissing").parent().show();
                    //} else {
                    //    $("#tblPeopleMissing").empty();
                    //    $("#tblPeopleMissing").parent().hide();
                    //}

                    if (open == true && tabname != "BindPeoples") {
                        var passdispalyid = "";
                        $(".cltabrequired").removeClass('pop_up__Acti');
                        $('.cltblrequired').css("display", "none");
                        if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
                            $("#li" + tabname).addClass('pop_up__Acti');
                            $("#tbl" + tabname).css("display", "");
                            passdispalyid = 'tbl' + tabname;
                        } else {
                            $("#liRequired").addClass('pop_up__Acti');
                            $("#tblRequired").css("display", "");
                            passdispalyid = 'tblRequired';
                        }
                        allowtoupdate(passdispalyid);
                        $("#loadingPage").fadeOut();
                        $("#dialogDelay").dialog("open");
                    } else {
                        $("#loadingPage").fadeOut();
                    }
                } else {
                    $("#loadingPage").fadeOut();
                }
            },
            error: function () {
                pendingStarted = false;
                //manoj
                $("#tblRequired").html('<tr><td>No item found.</td></tr>');
                $("#tblPeoples").html('<tr><td>No item found.</td></tr>');
                $("#tblDocuments").html('<tr><td>No item found.</td></tr>');
                $("#tblMilestones").html('<tr><td>No item found.</td></tr>');
                $("#tblActivity").html('<tr><td>No item found.</td></tr>');
                $("#tblDescription").html('<tr><td>No item found.</td></tr>');
                $("#lblContractDescription").css("display", "");
                $(".clpendingaction").css("display", "none");
                //manoj
                //$("#tblContractSettingMetadata").append("<tr><td>No pending contract settings</td></tr>");
                //$("#tblStartApprovalMetadata").append("<tr><td>no pending/missing signee.</td></tr>");
                //$("#tblEditcontractMetadata").append("<tr><td>No pending required fields.</td></tr>");
                //$("#tblJustInfoMetadata").append("<tr><td>No pending actions required.</td></tr>");
                //$("#tblActivitiesMetadata").append("<tr><td>No pending tasks.</td></tr>");
                //$("#tblDescriptionMissing").html("<tr><td>No pending tasks.</td></tr>");
                if (open == true && tabname != "BindPeoples") {
                    var passdispalyid = "";
                    $(".cltabrequired").removeClass('pop_up__Acti');
                    $('.cltblrequired').css("display", "none");
                    if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
                        $("#li" + tabname).addClass('pop_up__Acti');
                        $("#tbl" + tabname).css("display", "");
                        passdispalyid = 'tbl' + tabname;
                    } else {
                        $("#liRequired").addClass('pop_up__Acti');
                        $("#tblRequired").css("display", "");
                        passdispalyid = 'tblRequired';
                    }
                    allowtoupdate(passdispalyid);
                    $("#loadingPage").fadeOut();
                    $("#dialogDelay").dialog("open");
                } else {
                    $("#loadingPage").fadeOut();
                }
            }
        });
        //}
        //else {
        //    if (open == true) {
        //        var passdispalyid = "";
        //        $(".cltabrequired").removeClass('pop_up__Acti');
        //        $('.cltblrequired').css("display", "none");
        //        if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
        //            $("#li" + tabname).addClass('pop_up__Acti');
        //            $("#tbl" + tabname).css("display", "");
        //            passdispalyid = 'tbl' + tabname;
        //        } else {
        //            $("#liRequired").addClass('pop_up__Acti');
        //            $("#tblRequired").css("display", "");
        //            passdispalyid = 'tblRequired';
        //        }
        //        allowtoupdate(passdispalyid);
        //        $("#loadingPage").fadeOut();
        //        $("#dialogDelay").dialog("open");
        //    }
        //}
    }
    else {
        if (open == true && tabname != "BindPeoples") {
            var passdispalyid = "";
            $(".cltabrequired").removeClass('pop_up__Acti');
            $('.cltblrequired').css("display", "none");
            if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
                $("#li" + tabname).addClass('pop_up__Acti');
                $("#tbl" + tabname).css("display", "");
                passdispalyid = 'tbl' + tabname;
            } else {
                $("#liRequired").addClass('pop_up__Acti');
                $("#tblRequired").css("display", "");
                passdispalyid = 'tblRequired';
            }
            allowtoupdate(passdispalyid);
            $("#loadingPage").fadeOut();
            $("#dialogDelay").dialog("open");
        } else {
            $("#loadingPage").fadeOut();
        }
    }
}

function MultipleDocumentReview() {
    $("#loadingPage").fadeIn();
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;
    var title = multipleChecksDocumentReviewTitle;
    var businessArea = $("#lblBusinessArea").text();
    var contractArea = $("#lblContractArea").text();
    $("#tblStage").empty();
    $("#ddlRule").empty();
    //manoj
    var replacetil = new RegExp("~", 'g');
    var strFinalValue = documentName.replace(replacetil, ';');
    //manoj
    $("#txtWorkflowTitle").val("Review for " + strFinalValue);
    //manoj
    $("#txtWorkflowTitle").prop('readonly', true);
    //manoj
    $("#lblAutoUpdateStatus").text('Auto update Document status based on this Workflow.');
    $("#txtDuration").val("");
    //*Harshitha
    var nicInstance = nicEditors.findEditor('txtComment');
    nicInstance.setContent('');
    NicEditorPasteEvent();
    $("#hdWorkflowType").val("Document Review");
    $("#hdWorkflowObjectID").val(documentID);
    $("#hdWorkflowObjectTitle").val(documentName);
    GetValuesAndAutoPopulate("ddlWorkflowCC", "");

    var vWorkflowSettings = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Document Review&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + documentID,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        processData: false,
        success: function (item) {
            vWorkflowSettings = item.WorkflowSettings;
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "8" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                vWorkflowRules = item.WorkflowRules;
            }
            if (contractItem.IsFinalized == "Yes") {
                $("#liAutoUpdateStatus").css('display', 'none');
            } else {
                $("#liAutoUpdateStatus").css('display', '');
            }
            if (item.WorkflowSettings != null) {
                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                        $("#spAddStage").css("display", "none");
                    }
                }
                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                if ($("#txtDuration").val() != "") {
                    $("#txtDuration").trigger("onchange");
                } else {
                    $("#lblDurationDate").empty();
                }
                //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
            }
            if (vWorkflowRules.length > 0) {
                $(vWorkflowRules).each(function (i, rule) {
                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                });

                var workflowRules = vWorkflowRules[0];
                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                if (vWorkflowRules.length == 1) {
                    $("#lblddlRule").css("display", "");
                    $("#ddlRule").css("display", "none");
                    $("#lblddlRule").text(workflowRules.RuleName);
                    $("#ddlRule").attr('disabled', 'disabled');
                }
                else {
                    $("#lblddlRule").text("");
                    $("#lblddlRule").css("display", "none");
                    $("#ddlRule").css("display", "");
                    $("#ddlRule").removeAttr("disabled");
                }
                var participantsInXML = workflowRules.ParticipantsInXML;
                var totalFileCount = 0;
                if (workflowRules.RuleName == "Default")
                    $("#txtWorkflowTitle").val("Review for " + documentName);
                else
                    $("#txtWorkflowTitle").val(workflowRules.RuleName);
                //If the rule is ad-hoc 
                if (participantsInXML != "") {
                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                        var StageTitle = $(this).find('StageTitle').text();
                        var Participants = $(this).find('Participants').text();
                        var Order = $(this).find('Order').text();
                        totalFileCount++;
                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width40 start_workflow">';
                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                        if (Order == "Serial")
                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                        else
                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                        if (totalFileCount > 1)
                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                        else
                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '</tr>';

                        $("#tblStage").append(htmlFormatFile);
                        var $options = $("#ddlApprovers > option").clone();
                        $('#ddlAssignTo' + totalFileCount).append($options);
                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                            if ($(this).val() != null) {
                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                else {
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    $("#ddlOrder" + vasstoid).val('Serial');
                                }
                            }
                            else {
                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                $("#ddlOrder" + vasstoid).val('Serial');
                            }
                        });
                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);

                        if (item.WorkflowSettings != null) {
                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                }
                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                            }
                        }
                    });
                }
                else {
                    if ($("#ddlRule").html() == "") {
                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                        $("#lblddlRule").css("display", "");
                        $("#ddlRule").css("display", "none");
                        $("#lblddlRule").text("Ad-hoc");
                    }
                    if (!workflowAdHoc)
                        $("#ddlRule").attr('disabled', 'disabled');
                    var totalFileCount = 1;
                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width40 start_workflow">';
                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '</tr>';

                    $("#tblStage").append(htmlFormatFile);
                    var $options = $("#ddlApprovers > option").clone();
                    $('#ddlAssignTo' + totalFileCount).append($options);
                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                        if ($(this).val() != null) {
                            if ($(this).val().length > 1)
                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                            else {
                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                $("#ddlOrder" + vasstoid).val('Serial');
                            }
                        }
                        else {
                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                            $("#ddlOrder" + vasstoid).val('Serial');
                        }
                    });
                }
            }
            else {
                if ($("#ddlRule").html() == "") {
                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                    $("#lblddlRule").css("display", "");
                    $("#ddlRule").css("display", "none");
                    $("#lblddlRule").text("Ad-hoc");
                }
                if (!workflowAdHoc)
                    $("#ddlRule").attr('disabled', 'disabled');
                var totalFileCount = 1;
                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width40 start_workflow">';
                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                htmlFormatFile += '</td>';
                htmlFormatFile += '</tr>';

                $("#tblStage").append(htmlFormatFile);
                var $options = $("#ddlApprovers > option").clone();
                $('#ddlAssignTo' + totalFileCount).append($options);
                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                    if ($(this).val() != null) {
                        if ($(this).val().length > 1)
                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                        else {
                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                            $("#ddlOrder" + vasstoid).val('Serial');
                        }
                    }
                    else {
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                        $("#ddlOrder" + vasstoid).val('Serial');
                    }
                });
            }
            $("#loadingPage").fadeOut();
            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
            $("#dvWorkflow").dialog("open");
            $("#dvWorkflow").height("auto");
        },
        error: function () {
            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
            $("#lblddlRule").css("display", "");
            $("#ddlRule").css("display", "none");
            $("#lblddlRule").text("Ad-hoc");
            if (!workflowAdHoc)
                $("#ddlRule").attr('disabled', 'disabled');
            var totalFileCount = 1;
            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width40 start_workflow">';
            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
            htmlFormatFile += '</td>';
            htmlFormatFile += '</tr>';

            $("#tblStage").append(htmlFormatFile);
            var $options = $("#ddlApprovers > option").clone();
            $('#ddlAssignTo' + totalFileCount).append($options);
            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                if ($(this).val() != null) {
                    if ($(this).val().length > 1)
                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                    else {
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                        $("#ddlOrder" + vasstoid).val('Serial');
                    }
                }
                else {
                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                    $("#ddlOrder" + vasstoid).val('Serial');
                }
            });

            $("#loadingPage").fadeOut();
            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
            $("#dvWorkflow").dialog("open");
            $("#dvWorkflow").height("auto");
        }
    });
}

function MultipleDocumentFinal() {
    swal({
        title: '',
        text: "Before finalization of word documents(.doc or .docx) if any selected, make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
                       function (confirmed) {
                           if (confirmed) {
                               $("#loadingPage").fadeIn();
                               var entityid = multipleChecksDocumentID;
                               $.ajax({
                                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                                   type: 'PUT',
                                   cache: false,
                                   contentType: false,
                                   headers: {
                                       'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                   },
                                   processData: false,
                                   success: function (document) {
                                       $("#loadingPage").fadeOut();
                                       //manoj
                                       if (documentview == null || documentview == "" || documentview == 'folder') {
                                           if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                               var selectedfoldervalue = $('#showAll').find("a");
                                               var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                               var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                               var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                               showfolderdocuments(parentdocumentdetails);
                                           }
                                           else {
                                               BindDocument(vContractID);
                                           }
                                       } else {
                                           DisplayDocument(documentview);
                                       }
                                       //GetContractPendingAction(true, "BindPeoples");
                                       $("#hdnFolderDocumentView").text('');
                                       $("#hdnShowAllTextValue").html('');
                                       PrvFolderselection = '';
                                       //Bind primary and pined document based on new feature
                                       if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                           CreateDocumentListPinView(vContractID);
                                       }
                                       //manoj
                                   },
                                   error: function () {
                                       $("#loadingPage").fadeOut();
                                   }
                               });
                           }
                           return;
                       });
}

function MultipleDocumentRemove() {
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;

    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>remove</span> selected Documents from this Contract Record?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
           function (confirmed) {
               if (confirmed) {
                   $("#loadingPage").fadeIn();
                   $.ajax({
                       url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/untag?contractid=' + getParameterByName('ContractID') + '&documentid=' + documentID,
                       type: 'PUT',
                       dataType: 'json',
                       "Content-Type": "application/json",
                       headers: {
                           'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken
                       },
                       cache: false,
                       success: function (data) {
                           $("#loadingPage").fadeOut();
                           //manoj
                           if (documentview == null || documentview == "" || documentview == 'folder') {
                               if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                   var selectedfoldervalue = $('#showAll').find("a");
                                   var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                   var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                   var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                   showfolderdocuments(parentdocumentdetails);
                               }
                               else {
                                   BindDocument(vContractID);
                               }
                           } else {
                               DisplayDocument(documentview);
                           }
                           pendingStarted = false;
                           GetContractPendingAction(true, "BindPeoples");
                           $("#hdnFolderDocumentView").text('');
                           $("#hdnShowAllTextValue").html('');
                           PrvFolderselection = '';
                           //Bind primary and pined document based on new feature
                           if ($("#hdnnewdocumentfeature").text() == "Yes") {
                               CreateDocumentListPinView(vContractID);
                           }
                           //manoj
                       },
                       error: function () {
                           $("#loadingPage").fadeOut();
                       }
                   });
               }
               return;
           });
}

function MultipleDocumentDelete() {
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span> selected documents?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
         function (confirmed) {
             if (confirmed) {
                 $("#loadingPage").fadeIn();
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                     type: 'DELETE',
                     dataType: 'json',
                     "Content-Type": "application/json",
                     headers: {
                         'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName
                     },
                     cache: false,
                     success: function (data) {
                         //manoj
                         $("#loadingPage").fadeOut();
                         if (documentview == null || documentview == "" || documentview == 'folder') {
                             if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                 var selectedfoldervalue = $('#showAll').find("a");
                                 var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                 var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                 var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                 showfolderdocuments(parentdocumentdetails);
                             }
                             else {
                                 BindDocument(vContractID);
                             }
                         } else {
                             DisplayDocument(documentview);
                         }
                         pendingStarted = false;
                         GetContractPendingAction(true, "BindPeoples");
                         $("#hdnFolderDocumentView").text('');
                         $("#hdnShowAllTextValue").html('');
                         PrvFolderselection = '';
                         //Bind primary and pined document based on new feature
                         if ($("#hdnnewdocumentfeature").text() == "Yes") {
                             CreateDocumentListPinView(vContractID);
                         }
                         //manoj
                     },
                     error: function () {
                         $("#loadingPage").fadeOut();
                     }
                 });
             }
             return;
         });
}

$('#btnDocumentReview').click(function () {
    $("#loadingPage").fadeIn();
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;
    var title = multipleChecksDocumentReviewTitle;
    var businessArea = $("#lblBusinessArea").text();
    var contractArea = $("#lblContractArea").text();
    $("#tblStage").empty();
    $("#ddlRule").empty();

    $("#txtWorkflowTitle").val("Review for " + documentName);
    $("#lblAutoUpdateStatus").text('Auto update Document status based on this Workflow.');
    $("#txtDuration").val("");
    //*Harshitha
    var nicInstance = nicEditors.findEditor('txtComment');
    nicInstance.setContent('');
    NicEditorPasteEvent();
    $("#hdWorkflowType").val("Document Review");
    $("#hdWorkflowObjectID").val(documentID);
    $("#hdWorkflowObjectTitle").val(documentName);
    GetValuesAndAutoPopulate("ddlWorkflowCC", "");
    var vWorkflowSettings = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Document Review&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + getParameterByName('ContractID'),
        type: 'GET',
        cache: false,
        contentType: false,
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        processData: false,
        success: function (item) {
            vWorkflowSettings = item.WorkflowSettings;
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "8" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                vWorkflowRules = item.WorkflowRules;
            }
            if (contractItem.IsFinalized == 'Yes') {
                $("#liAutoUpdateStatus").css('display', 'none');
            } else {
                $("#liAutoUpdateStatus").css('display', '');
            }
            if (item.WorkflowSettings != null) {
                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                        $("#spAddStage").css("display", "none");
                    }
                }
                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                if ($("#txtDuration").val() != "") {
                    $("#txtDuration").trigger("onchange");
                } else {
                    $("#lblDurationDate").empty();
                }
            }
            if (vWorkflowRules.length > 0) {
                $(vWorkflowRules).each(function (i, rule) {
                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                });

                var workflowRules = vWorkflowRules[0];
                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                if (vWorkflowRules.length == 1) {
                    $("#lblddlRule").css("display", "");
                    $("#ddlRule").css("display", "none");
                    $("#lblddlRule").text(workflowRules.RuleName);
                    $("#ddlRule").attr('disabled', 'disabled');
                }
                else {
                    $("#lblddlRule").text("");
                    $("#lblddlRule").css("display", "none");
                    $("#ddlRule").css("display", "");
                    $("#ddlRule").removeAttr("disabled");
                }
                var participantsInXML = workflowRules.ParticipantsInXML;
                var totalFileCount = 0;
                if (workflowRules.RuleName == "Default")
                    $("#txtWorkflowTitle").val("Review for " + documentName);
                else
                    $("#txtWorkflowTitle").val(workflowRules.RuleName);
                //If the rule is ad-hoc 
                if (participantsInXML != "") {
                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                        var StageTitle = $(this).find('StageTitle').text();
                        var Participants = $(this).find('Participants').text();
                        var Order = $(this).find('Order').text();
                        totalFileCount++;
                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width40 start_workflow">';
                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                        if (Order == "Serial")
                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                        else
                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                        if (totalFileCount > 1)
                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                        else
                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                        htmlFormatFile += '</td>';
                        htmlFormatFile += '</tr>';

                        $("#tblStage").append(htmlFormatFile);
                        var $options = $("#ddlApprovers > option").clone();
                        $('#ddlAssignTo' + totalFileCount).append($options);
                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                            if ($(this).val() != null) {
                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                else {
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    $("#ddlOrder" + vasstoid).val('Serial');
                                }
                            }
                            else {
                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                $("#ddlOrder" + vasstoid).val('Serial');
                            }
                        });
                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);

                        if (item.WorkflowSettings != null) {
                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                }
                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                            }
                        }
                    });
                }
                else {
                    if ($("#ddlRule").html() == "") {
                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                        $("#lblddlRule").css("display", "");
                        $("#ddlRule").css("display", "none");
                        $("#lblddlRule").text("Ad-hoc");
                    }
                    if (!workflowAdHoc)
                        $("#ddlRule").attr('disabled', 'disabled');
                    var totalFileCount = 1;
                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width40 start_workflow">';
                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                    htmlFormatFile += '</td>';
                    htmlFormatFile += '</tr>';

                    $("#tblStage").append(htmlFormatFile);
                    var $options = $("#ddlApprovers > option").clone();
                    $('#ddlAssignTo' + totalFileCount).append($options);
                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                        if ($(this).val() != null) {
                            if ($(this).val().length > 1)
                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                            else {
                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                $("#ddlOrder" + vasstoid).val('Serial');
                            }
                        }
                        else {
                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                            $("#ddlOrder" + vasstoid).val('Serial');
                        }
                    });
                }
            }
            else {
                if ($("#ddlRule").html() == "") {
                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                    $("#lblddlRule").css("display", "");
                    $("#ddlRule").css("display", "none");
                    $("#lblddlRule").text("Ad-hoc");
                }
                if (!workflowAdHoc)
                    $("#ddlRule").attr('disabled', 'disabled');
                var totalFileCount = 1;
                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width40 start_workflow">';
                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                htmlFormatFile += '</td>';
                htmlFormatFile += '</tr>';

                $("#tblStage").append(htmlFormatFile);
                var $options = $("#ddlApprovers > option").clone();
                $('#ddlAssignTo' + totalFileCount).append($options);
                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                    if ($(this).val() != null) {
                        if ($(this).val().length > 1)
                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                        else {
                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                            $("#ddlOrder" + vasstoid).val('Serial');
                        }
                    }
                    else {
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                        $("#ddlOrder" + vasstoid).val('Serial');
                    }
                });
            }
            $("#loadingPage").fadeOut();
            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
            $("#dvWorkflow").dialog("open");
            $("#dvWorkflow").height("auto");
        },
        error: function () {
            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
            $("#lblddlRule").css("display", "");
            $("#ddlRule").css("display", "none");
            $("#lblddlRule").text("Ad-hoc");
            if (!workflowAdHoc)
                $("#ddlRule").attr('disabled', 'disabled');
            var totalFileCount = 1;
            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width40 start_workflow">';
            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width10 padding_top_10px v_align_top start_workflow">';
            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
            htmlFormatFile += '</td>';
            htmlFormatFile += '</tr>';

            $("#tblStage").append(htmlFormatFile);
            var $options = $("#ddlApprovers > option").clone();
            $('#ddlAssignTo' + totalFileCount).append($options);
            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                if ($(this).val() != null) {
                    if ($(this).val().length > 1)
                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                    else {
                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                        $("#ddlOrder" + vasstoid).val('Serial');
                    }
                }
                else {
                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                    $("#ddlOrder" + vasstoid).val('Serial');
                }
            });

            $("#loadingPage").fadeOut();
            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
            $("#dvWorkflow").dialog("open");
            $("#dvWorkflow").height("auto");
        }
    });

});

function BindDocumentNotTagToContract() {
    $('#tblExistingDocument').html('<img src="../Content/Images/icon/loading.gif">');
    $('#compact-paginationDocument').css("display", "none");
    try {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/NotTaggedToContract?searchkeyword=' + encodeURIComponent($("#txtSearchDocument").val()),
            type: 'GET',
            cache: false,
            contentType: false,
            headers: {
                'eContracts-ApiKey': localStorage.APIKey
            },
            processData: false,
            success: function (datacollection) {
                var data = $.grep(datacollection, function (n, i) {
                    return (n.ContractArea == $("#lblContractArea").text().trim());
                });
                if (data.length > 0) {
                    var settings = {
                        pattern: /\.[0-9a-z]+$/i,
                        knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
                        WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
                    };
                    var article = '';
                    var datalenght = data.length;
                    for (var i = 0; i < datalenght; i++) {
                        var item = data[i];
                        var vURL = encodeURI(item.DocumentUrl);
                        var ext = vURL.match(settings.pattern);
                        var vFileType = '<dd class="file-icon none"></dd>';
                        if (ext != null) {
                            if (ext.length > 0) { ext = ext[0].slice(1); }
                            if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                                vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                            }
                        }

                        article += '<tr><td class="labelleft">';
                        article += '<input id="' + item.RowKey + '" type="checkbox" class="margin-right-5" name="NotTaggedContract" value="' + item.DocumentName + '" />';

                        article += vFileType + '<label for="' + item.RowKey + '" class="">' + item.DocumentName + '</label>';
                        article += '</td></tr>';
                    }
                    $("#tblExistingDocument").html(article);
                    article = '';
                    $('#compact-paginationDocument').css("display", "");
                    var vCount = $("#tblExistingDocument tr").length;
                    $('#compact-paginationDocument').pagination({
                        items: vCount,
                        itemsOnPage: 5,
                        typeID: 'tblExistingDocument',
                        cssStyle: 'compact-theme'
                    });
                } else {
                    $("#tblExistingDocument").html('<tr><td class="f_p-error det_metadata_notavailble">No items found.</td></tr>');
                }
            },
            error: function () {
                $("#tblExistingDocument").html('<tr><td class="f_p-error det_metadata_notavailble">No items found.</td></tr>');
            }
        });
    } catch (e) {

    }
}

$('#txtSearchDocument').keypress(function (event) {
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if (keycode == '13') {
        $(".ui-autocomplete").css('display', 'none');
        BindDocumentNotTagToContract();
    }
});

function contextMenuDocument(action, el, pos) {

    switch (action) {
        case "view":
            {

                $("#loadingPage").fadeIn();
                ShowMetadata();
                var documentID = $(el).find("#DocumentID").text();
                $("#tblMetadataDetailDocument").empty();
                $('#tblMetadataDetailDocument').append('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');
                $("#documentLogs").html('<tr><td colspan="4"><img src="../Content/Images/icon/loading.gif"/> </td></tr>');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities?objecttype=Document&objectid=' + documentID + '&actiontype=',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (activities) {

                        $("#documentLogs").empty();
                        var datalenght = activities.length;
                        var article = '';
                        for (var i = 0; i < datalenght; i++) {
                            var item = activities[i];
                            var sObject = item.Object;
                            var sActivity = item.Activity;
                            var sUserID = item.UserID;
                            var sTimestamp = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { sTimestamp = moment(new Date(item.Timestamp)).format('MM/DD/YYYY h:mm A'); }
                            else { sTimestamp = moment(new Date(item.Timestamp)).format(localStorage.AppDateFormat + " h:mm"); }
                            article += '<tr><td><span class="logHis_Datetime">' + sTimestamp + '</span></td><td><b>' + sObject + '</b></td><td><span class="logHis_Activity">' + sActivity + '</span></td><td><span class="logHis_Datetime">' + sUserID + '</span></td></tr>';

                        }
                        $("#documentLogs").html(article);
                        $('#compact-pagination-documentLogs').pagination({
                            items: activities.length,
                            itemsOnPage: 15,
                            type: 'tbody',
                            typeID: 'documentLogs',
                            row: 'tr',
                            cssStyle: 'compact-theme'
                        });


                    },
                    error: function () {
                    }
                });


                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities?objecttype=Document&objectid=' + documentID + '&actiontype=',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (activities) {

                        $("#documentLogs").empty();
                        var datalenght = activities.length;
                        var article = '';
                        for (var i = 0; i < datalenght; i++) {
                            var item = activities[i];
                            var sObject = item.Object;
                            var sActivity = item.Activity;
                            var sUserID = item.UserID;
                            // var sTimestamp = moment(new Date(item.Timestamp)).format('Do MMM, h:mm A');
                            var sTimestamp = "";

                            //var article = '<article class="box1">';
                            //article += '<div>';
                            //article += '<p class="text">' + sTimestamp;
                            //article += '  ' + sActivity + '</p>';
                            //article += '</div>';
                            //article += '</article>';
                            //$("#documentLogs").append(article);
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { sTimestamp = moment(new Date(item.Timestamp)).format('MM/DD/YYYY h:mm A'); }
                            else { sTimestamp = moment(new Date(item.Timestamp)).format(localStorage.AppDateFormat + " h:mm"); }

                            article += '<tr><td><span class="logHis_Datetime">' + sTimestamp + '</span></td><td><b>' + sObject + '</b></td><td><span class="logHis_Activity">' + sActivity + '</span></td><td><span class="logHis_Datetime">' + sUserID + '</span></td></tr>';

                        }
                        $("#documentLogs").html(article);
                        $('#compact-pagination-documentLogs').pagination({
                            items: activities.length,
                            itemsOnPage: 15,
                            type: 'tbody',
                            typeID: 'documentLogs',
                            row: 'tr',
                            cssStyle: 'compact-theme'
                        });


                    },
                    error: function () {
                    }
                });





                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (documententity) {
                        var vMetadata = '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Name</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentName + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Description</td>';
                        vMetadata += '<td class="text width60">' + documententity.Description + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Type</td>';
                        if (documententity.DocumentType == "0")
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + documententity.DocumentType + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Author</td>';
                        if (documententity.DocumentAuthor == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + documententity.DocumentAuthor + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Language</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentLanguage + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Hard-copy Physical Location</td>';
                        vMetadata += '<td class="text width60">' + documententity.HardCopyPhysicalLocation + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Folder (show path)</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentUrl + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Business Area</td>';
                        vMetadata += '<td class="text width60">' + documententity.BusinessArea + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Is Finalized/Ready for Signature?</td>';
                        vMetadata += '<td class="text width60">' + documententity.IsFinalized + '</td>';
                        vMetadata += '</tr>';
                        if (documententity.IsFinalized == "Yes") {
                            vMetadata += '<tr>';
                            vMetadata += '<td class="text_label width40 meta_titles">Finalized/Ready for Signature By</td>';
                            vMetadata += '<td class="text width60">' + documententity.FinalizedBy + ' on ' + moment(new Date(documententity.FinalizedDate)).format('Do MMM YYYY') + '</td>';
                            vMetadata += '</tr>';
                        }
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Is Standard?</td>';
                        vMetadata += '<td class="text width60">' + documententity.IsStandard + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Status</td>';
                        vMetadata += '<td class="text width60">' + documententity.DocumentStatus + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Version</td>';
                        vMetadata += '<td class="text width60">' + documententity.VersionNo + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Created by</td>';
                        vMetadata += '<td class="text width60">' + documententity.CreatedBy + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Created Date</td>';
                        vMetadata += '<td class="text width60">' + moment(new Date(documententity.Created)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Last Updated</td>';
                        vMetadata += '<td class="text width60">' + moment(new Date(documententity.Modified)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Shared with</td>';
                        vMetadata += '<td class="text width60">' + documententity.SharedWith + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Reviewer(s)</td>';
                        vMetadata += '<td class="text width60">' + documententity.Reviewers + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Signee</td>';
                        vMetadata += '<td class="text width60">' + documententity.Signee + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document File Size</td>';
                        vMetadata += '<td class="text width60">' + documententity.FileSize + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Document Format</td>';
                        vMetadata += '<td class="text">' + documententity.DocumentFormat + '</td>';
                        vMetadata += '</tr>';



                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Creation Mode</td>';
                        vMetadata += '<td class="text width60">' + documententity.CreationMode + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Valid From</td>';
                        if (documententity.ValidFrom == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + moment(new Date(documententity.ValidFrom)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Valid Till</td>';
                        if (documententity.ValidTill == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else
                            vMetadata += '<td class="text width60">' + moment(new Date(documententity.ValidTill)).utc().format('Do MMM YYYY') + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40 meta_titles">Send Reminder To</td>';
                        if (documententity.SendReminderTo == null)
                            vMetadata += '<td class="text width60">-</td>';
                        else {
                            if (documententity.SendReminderTo == "null")
                                vMetadata += '<td class="text width60">-</td>';
                            else
                                vMetadata += '<td class="text width60">' + documententity.SendReminderTo + '</td>';
                        }
                        vMetadata += '</tr>';

                        $("#tblMetadataDetailDocument").html(vMetadata);
                        setBlankValueToHyphen("tblMetadataDetailDocument");
                        $("#loadingPage").fadeOut();
                        $("#viewMetadataDetailDocument").dialog("option", "title", "Document Details");
                        $("#viewMetadataDetailDocument").dialog("open");

                    },
                    error: function () {
                    }
                });
                $('#documentLogs').css("display", "none");
                $('#compact-pagination-documentLogs').css("display", "none");
                $('#idDocumentPopup').css("display", "none");

                break;
            }
        case "replace":
            {
                ClearReplaceDocFrom();
                var documentID = $(el).find("#DocumentID").text();
                var documentName = $(el).find("#DocumentName").text();
                $("#txtdocumentToReplaceName").val(documentName.substring(0, documentName.lastIndexOf('.')));
                $("#docToReplaceName").val(""); // Bug (eO37111)
                $('#lblDocumentExtension').val(documentName.split('.').pop());
                $("#lblReplaceTemplateDescription").text("");
                //addbuttonclick = true;
                $('#hdnDocumentID').val(documentID);
                $("#trTop").css('display', '');
                $("#divReplaceDocument").dialog("option", "title", "Replace Document");
                $("#divReplaceDocument").dialog("open");
                break;
            }
        case "delete":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to <span style='font-weight:700'>delete '" + documentName + "'</span>?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                 type: 'DELETE',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     //*Harshitha
                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     $("#ddlDocumentList").trigger('chosen:updated');
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });
                break;
            }
        case "remove":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to remove '<span style=\"font-weight:700\">" + documentName + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/untag?contractid=' + getParameterByName('ContractID') + '&documentid=' + documentID,
                 type: 'PUT',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                 cache: false,
                 success: function (data) {
                     $("#loadingPage").fadeOut();
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     //*Harshitha
                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     $("#ddlDocumentList").trigger('chosen:updated');
                     BindMilestone();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "edit":
            {
                var documentID = $(el).find("#DocumentID").text();
                $("#hdIsPrimaryDoc").val($(el).find("#IsPrimaryDoc").text());
                EditDocumentMetadata(documentID);

                break;
            }
        case "final":
            {
                //Check if document is having any revisions
                //var isrevisionexists = true;
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#") {
                    LinkURL = $(el).find("a").attr('seqe')
                }
                var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                //$.ajax({
                //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + DocumentUrl,
                //    type: 'GET',
                //    dataType: 'json',
                //    async: false,
                //    "Content-Type": "application/json",
                //    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //    cache: false,
                //    success: function (revisiondata) {
                //        if (revisiondata) {
                //            isrevisionexists = true;
                //        }
                //    },
                //    error: function () {

                //    }
                //});

                var CanSend = false;
                var ext = $(el).find("dd").attr("class");
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1)
                        CanSend = true;
                if (CanSend) {
                    swal({
                        title: '',
                        text: "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                 function (confirmed) {
                     if (confirmed) {
                         $("#loadingPage").fadeIn();
                         var entityid = $(el).find("#DocumentID").text();
                         $.ajax({
                             url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                             type: 'PUT',
                             cache: false,
                             contentType: false,
                             headers: {
                                 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                             },
                             processData: false,
                             success: function (document) {
                                 //manoj
                                 $("#loadingPage").fadeOut();
                                 if (documentview == null || documentview == "" || documentview == 'folder') {
                                     if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                         var selectedfoldervalue = $('#showAll').find("a");
                                         var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                         var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                         var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                         showfolderdocuments(parentdocumentdetails);
                                     }
                                     else {
                                         BindDocument(vContractID);
                                     }
                                 } else {
                                     DisplayDocument(documentview);
                                 }
                                 //GetContractPendingAction(true, "BindPeoples");
                                 $("#hdnFolderDocumentView").text('');
                                 $("#hdnShowAllTextValue").html('');
                                 PrvFolderselection = '';
                                 //Bind primary and pined document based on new feature
                                 if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                     CreateDocumentListPinView(vContractID);
                                 }
                                 //manoj
                             },
                             error: function () {
                                 $("#loadingPage").fadeOut();
                             }
                         });

                     }
                     return;
                 });
                } else {
                    swal({
                        title: '',
                        text: "Do you really want to mark this document as Finalized/Ready for Signature?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var entityid = $(el).find("#DocumentID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                                type: 'PUT',
                                cache: false,
                                contentType: false,
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                },
                                processData: false,
                                success: function (document) {
                                    //manoj
                                    $("#loadingPage").fadeOut();
                                    if (documentview == null || documentview == "" || documentview == 'folder') {
                                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                            var selectedfoldervalue = $('#showAll').find("a");
                                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                            showfolderdocuments(parentdocumentdetails);
                                        }
                                        else {
                                            BindDocument(vContractID);
                                        }
                                    } else {
                                        DisplayDocument(documentview);
                                    }
                                    //GetContractPendingAction(true, "BindPeoples");
                                    $("#hdnFolderDocumentView").text('');
                                    $("#hdnShowAllTextValue").html('');
                                    PrvFolderselection = '';
                                    //Bind primary and pined document based on new feature
                                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                        CreateDocumentListPinView(vContractID);
                                    }
                                    //manoj
                                },
                                error: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                }

                break;
            }
        case "download":
            {
                var LinkURL = $(el).find("a").attr('href');
                var SourceUrl = "";
                if (LinkURL == "#") {
                    SourceUrl = $(el).find("a").attr('seqe')
                } else {
                    SourceUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                    //SourceUrl = encodeURIComponent(SourceUrl);
                    var formatarray = "doc,xls,ppt,docx,xlsx,pptx,dotx";
                    var filename = SourceUrl;
                    filename = filename.split("/").pop().split(".").pop();
                    if ($.inArray(filename, formatarray.split(',')) > -1) {
                        SourceUrl = encodeURIComponent(SourceUrl);
                    }
                    else {
                        SourceUrl = decodeURIComponent(SourceUrl);
                        SourceUrl = encodeURIComponent(SourceUrl);
                    }
                }
                location = localStorage.SPHostUrl + "/_layouts/15/download.aspx?SourceUrl=" + SourceUrl;
                break;
            }
        case "signature":
            {

                // var Stage = "";
                var requiredavalible = false;
                //  Stage = getParameterByName("Stage");
                if (Stage == 'pipeline') {
                    if ($("#spanstatus").text() != "") {
                        var arrstatus = ['Ready for Signature', 'Awaiting Signatures', 'Signed', 'Active', 'Expired', 'Replaced', 'Archived', 'On Hold', 'Cancelled'];
                        if (arrstatus.indexOf($("#spanstatus").text().trim()) > -1) {
                            Stage = '';
                        }
                    }
                }
                var documentName = $(el).find("#DocumentName").text();
                var sentForSign = $(el).find("#SentForSign").text();
                var documentID = $(el).find("#DocumentID").text();
                var isFinalized = $(el).find("#IsFinalized").text();
                var PrimaryDocumentCheck = $(el).find("#IsPrimaryDoc").text();
                var ext = $(el).find("dd").attr("class");
                var LinkURL = $(el).find("a").attr('href');
                var CanSend = false;
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1 || ext.indexOf("pdf") > -1)
                        CanSend = true;
                if (CanSend) {
                    if (sentForSign == '') {
                        $("#hdIsPrimaryDoc").val(PrimaryDocumentCheck);
                        if (PrimaryDocumentCheck == 'Yes')
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document & Contract Record status based on this Workflow.");
                        else
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document status based on this Workflow.");
                        if (Stage == 'pipeline') {
                            var vMetadatavaluetofinalize;
                            var metadataFields = [];
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
                                type: 'GET',
                                dataType: 'json',
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                cache: false,
                                async: false,
                                success: function (mainmetadataFields) {
                                    vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
                                },
                            });
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + strSelectedContractType.trim(),
                                type: 'GET',
                                dataType: 'json',
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                cache: false,
                                async: false,
                                success: function (metadataFieldsvalue) {
                                    if (getParameterByName("Stage") == "pipeline") {
                                        metadataFields = $.grep(metadataFieldsvalue, function (n, i) {
                                            return (n.Finalizingfrom == "Required");
                                        });
                                    }
                                },
                            });

                            $(metadataFields).each(function (i, item) {
                                if ($(vMetadatavaluetofinalize).find(item.FieldName).text() == null || $(vMetadatavaluetofinalize).find(item.FieldName).text() == "") {
                                    requiredavalible = true;
                                }
                            });
                            if (!requiredavalible) {
                                ClearSignatureForm();
                                //Disable ddlCC Users not related to contract
                                DisableCCUsers();
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                    type: 'GET',
                                    dataType: 'json',
                                    "Content-Type": "application/json",
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    cache: false,
                                    success: function (settings) {
                                        $("#txtExpIn").val(settings.TaskDuration);
                                        $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(),"days").format('MM/DD/YYYY'));
                                        $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration,"days").format('MM/DD/YYYY'));
                                    },
                                    error: function () {

                                    }
                                });

                                if (isFinalized != 'Yes') {
                                    var finaltext = "Only <span style='font-weight:700'>Finalized/Ready for Signature</span> documents can be sent out for <span style='font-weight:700'>eSignature</span>. Do you want to mark this document as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1) {
                                        finaltext = "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                    }
                                    swal({
                                        title: '',
                                        text: finaltext,
                                        type: 'warning',
                                        showCancelButton: true,
                                        confirmButtonText: 'Yes',
                                        cancelButtonText: 'No',
                                        html: true
                                    },
                                        function (confirmed) {
                                            if (confirmed) {
                                                $(el).find("#IsFinalized").text('Yes');
                                                isFinalized = 'Yes';
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + documentID,
                                                    type: 'PUT',
                                                    cache: false,
                                                    contentType: false,
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                                    },
                                                    processData: false,
                                                    success: function (document) {
                                                    }
                                                });
                                            }
                                            if (isFinalized == 'Yes') {
                                                $("#hdMarkAsFinal").val("Y");
                                                if (LinkURL == "#") {
                                                    LinkURL = $(el).find("a").attr('seqe')
                                                }
                                                var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                                                $("#hdDocumentID").val(documentID);
                                                $("#hdDocumentURL").val(DocumentUrl);
                                                $("#tdDocument").html("<b>" + documentName + "</b>");
                                                getNameAndEmailSignDocument();
                                                $("#sendForSignature").dialog("open");
                                            }
                                            return;
                                        });

                                }
                                else {
                                    if (isFinalized == 'Yes') {
                                        $("#hdMarkAsFinal").val("Y");
                                        if (LinkURL == "#") {
                                            LinkURL = $(el).find("a").attr('seqe')
                                        }
                                        var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                                        $("#hdDocumentID").val(documentID);
                                        $("#hdDocumentURL").val(DocumentUrl);
                                        $("#tdDocument").html("<b>" + documentName + "</b>");
                                        getNameAndEmailSignDocument();
                                        $("#sendForSignature").dialog("open");
                                    }
                                }
                            } else {
                                swal({
                                    title: '',
                                    text: "Some fields required for Contract Record finalization are not filled. Do you want to edit now?",
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonText: 'Yes',
                                    cancelButtonText: 'No',
                                    html: true
                                },
                                function (confirmed) {
                                    if (confirmed) {
                                        if (Stage == 'pipeline') {
                                            location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true";
                                        }
                                    } else {
                                        $("#loadingPage").fadeOut();
                                    }
                                });
                            }

                        } else {
                            ClearSignatureForm();
                            //Disable ddlCC Users not related to contract
                            DisableCCUsers();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                type: 'GET',
                                dataType: 'json',
                                "Content-Type": "application/json",
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                cache: false,
                                success: function (settings) {
                                    $("#txtExpIn").val(settings.TaskDuration);
                                    $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(),"days").format('MM/DD/YYYY'));
                                    $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration,"days").format('MM/DD/YYYY'));
                                },
                                error: function () {

                                }
                            });
                            if (isFinalized != 'Yes') {
                                var finaltext = "Only <span style='font-weight:700'>Finalized/Ready for Signature</span> documents can be sent out for <span style='font-weight:700'>eSignature</span>. Do you want to mark this document as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1) {
                                    finaltext = "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                                }
                                swal({
                                    title: '',
                                    text: finaltext,
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonText: 'Yes',
                                    cancelButtonText: 'No',
                                    html: true
                                },
                                    function (confirmed) {
                                        if (confirmed) {
                                            $(el).find("#IsFinalized").text('Yes');
                                            isFinalized = 'Yes';
                                            $.ajax({
                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + documentID,
                                                type: 'PUT',
                                                cache: false,
                                                contentType: false,
                                                headers: {
                                                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                                },
                                                processData: false,
                                                success: function (document) {
                                                }
                                            });
                                        }
                                        if (isFinalized == 'Yes') {
                                            $("#hdMarkAsFinal").val("Y");
                                            if (LinkURL == "#") {
                                                LinkURL = $(el).find("a").attr('seqe')
                                            }
                                            var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                                            $("#hdDocumentID").val(documentID);
                                            $("#hdDocumentURL").val(DocumentUrl);
                                            $("#tdDocument").html("<b>" + documentName + "</b>");
                                            getNameAndEmailSignDocument();
                                            $("#sendForSignature").dialog("open");
                                        }
                                        return;
                                    });

                            }
                            else {
                                if (isFinalized == 'Yes') {
                                    $("#hdMarkAsFinal").val("Y");
                                    if (LinkURL == "#") {
                                        LinkURL = $(el).find("a").attr('seqe')
                                    }
                                    var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                                    $("#hdDocumentID").val(documentID);
                                    $("#hdDocumentURL").val(DocumentUrl);
                                    $("#tdDocument").html("<b>" + documentName + "</b>");
                                    getNameAndEmailSignDocument();
                                    $("#sendForSignature").dialog("open");
                                }
                            }
                        }
                    } else {
                        swal("", "This document has already been sent for signature: " + sentForSign);
                    }
                } else {
                    swal("", "This document cannot be sent for eSignature: Only <span style='font-weight:700'>doc,docx</span> and <span style='font-weight:700'>pdf</span> type files can be sent for eSignature.");
                }
                break;
            }
        case "editO365":
            {
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#") {
                    var rawUrl = $(el).find("a").attr('seqe');
                    viewdocinword(rawUrl);
                } else {
                    window.open(LinkURL);
                }
                break;
            }
        case "sharelink":
            {
                var DocumentNameToCheck = $(el).find("#DocumentName").text();
                var DocumentExtFormat = ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx', 'pdf'];
                if (DocumentExtFormat.indexOf(DocumentNameToCheck.split('.').pop()) > -1) {
                    var documentStatus = $(el).find("b").attr('title');
                    var shareWorkflow = $(el).find("#ShareWorkflow").text();
                    var primarydocchecking = $(el).find("#IsPrimaryDoc").text();
                    //if (shareWorkflow == "In Progress") {
                    //    swal("", "Document negotiation/ External review is in progress for this document.");
                    //}
                    //else {
                    //if (primarydocchecking == 'Yes')
                    //    $("#lblAutoUpdateStatusShareDoc").html("Auto update Document & Contract Record status to 'Negotiation Complete' when this External Share is completed.");
                    //else
                    $("#lblAutoUpdateStatusShareDoc").html("Auto update Document status to 'Negotiation Complete' when this External Share is completed.");
                    //Check if document is having any comments
                    var iscommentexits = false;
                    var LinkURL = $(el).find("a").attr('href');
                    if (LinkURL == "#") {
                        LinkURL = $(el).find("a").attr('seqe')
                    }
                    var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/commentexists?docurl=' + DocumentUrl,
                        //url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + DocumentUrl,
                        type: 'GET',
                        dataType: 'json',
                        async: false,
                        "Content-Type": "application/json",
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        success: function (commentdata) {
                            if (commentdata) {
                                iscommentexits = true;
                            }
                            //success: function (revisiondata) {
                            //    if (revisiondata) {
                            //        isrevisionexists = true;
                            //    }
                        },
                        error: function () {

                        }
                    });
                    if (iscommentexits) {
                        swal({
                            title: '',
                            text: "Comments/ redlining found in this document. Do you want to share this to external users for External Share?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                         function (confirmed) {
                             if (confirmed) {
                                 $.ajax({
                                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                     type: 'GET',
                                     dataType: 'json',
                                     "Content-Type": "application/json",
                                     headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                     cache: false,
                                     success: function (settings) {
                                         $("#txtShareExpIn").val(settings.TaskDuration);
                                         if ($("#txtShareExpIn").val() != "") {
                                             $("#txtShareExpIn").trigger("onchange");
                                         } else {
                                             $("#lblValidLinkDate").empty();
                                         }
                                         //$("#lblValidLinkDate").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                                     },
                                     error: function () {

                                     }
                                 });
                                 ClearShareForm();

                                 var documentName = $(el).find("#DocumentName").text();
                                 var documentID = $(el).find("#DocumentID").text();
                                 $("#hdDocumentID").val(documentID);
                                 $("#hdDocumentURL").val(DocumentUrl);
                                 $("#hdIsPrimaryDoc").val(primarydocchecking);
                                 $("#tdShareDocument").html("<b>" + documentName + "</b>");
                                 getNameAndEmailShareDocument();
                                 GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                                 //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                                 $("#shareDocument").dialog("open");
                             }
                             return;
                         });
                    } else {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                            type: 'GET',
                            dataType: 'json',
                            "Content-Type": "application/json",
                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                            cache: false,
                            success: function (settings) {
                                $("#txtShareExpIn").val(settings.TaskDuration);
                                if ($("#txtShareExpIn").val() != "") {
                                    $("#txtShareExpIn").trigger("onchange");
                                } else {
                                    $("#lblValidLinkDate").empty();
                                }
                                //$("#lblValidLinkDate").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                            },
                            error: function () {

                            }
                        });
                        ClearShareForm();
                        var documentName = $(el).find("#DocumentName").text();
                        var documentID = $(el).find("#DocumentID").text();
                        $("#hdDocumentID").val(documentID);
                        $("#hdDocumentURL").val(DocumentUrl);
                        $("#hdIsPrimaryDoc").val(primarydocchecking);
                        $("#tdShareDocument").html("<b>" + documentName + "</b>");
                        getNameAndEmailShareDocument();
                        GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                        //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                        $("#shareDocument").dialog("open");
                    }
                    //if (isrevisionexists) {
                    //    swal({
                    //        title: '',
                    //        text: "Revisions (comments or track changes) exists inside the document, do you really want to share this as a link?",
                    //        type: 'warning',
                    //        showCancelButton: true,
                    //        confirmButtonText: 'Yes',
                    //        cancelButtonText: 'No',
                    //        html: true
                    //    },
                    //     function (confirmed) {
                    //         if (confirmed) {
                    //             $.ajax({
                    //                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    //                 type: 'GET',
                    //                 dataType: 'json',
                    //                 "Content-Type": "application/json",
                    //                 headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    //                 cache: false,
                    //                 success: function (settings) {
                    //                     $("#txtShareExpIn").val(settings.TaskDuration);
                    //                     $("#lblValidLinkDate").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                    //                 },
                    //                 error: function () {

                    //                 }
                    //             });
                    //             ClearShareForm();

                    //             var documentName = $(el).find("#DocumentName").text();
                    //             var documentID = $(el).find("#DocumentID").text();
                    //             $("#hdDocumentID").val(documentID);
                    //             $("#hdDocumentURL").val(DocumentUrl);
                    //             $("#hdIsPrimaryDoc").val(primarydocchecking);
                    //             $("#tdShareDocument").html("<b>" + documentName + "</b>");
                    //             getNameAndEmailShareDocument();
                    //             $("#shareDocument").dialog("open");
                    //         }
                    //         return;
                    //     });
                    //} else {
                    //    $.ajax({
                    //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    //        type: 'GET',
                    //        dataType: 'json',
                    //        "Content-Type": "application/json",
                    //        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    //        cache: false,
                    //        success: function (settings) {
                    //            $("#txtShareExpIn").val(settings.TaskDuration);
                    //            $("#lblValidLinkDate").html(moment(new Date()).add(settings.TaskDuration, "days").format('MM/DD/YYYY'));
                    //        },
                    //        error: function () {

                    //        }
                    //    });
                    //    ClearShareForm();
                    //    var documentName = $(el).find("#DocumentName").text();
                    //    var documentID = $(el).find("#DocumentID").text();
                    //    $("#hdDocumentID").val(documentID);
                    //    $("#hdDocumentURL").val(DocumentUrl);
                    //    $("#hdIsPrimaryDoc").val(primarydocchecking);
                    //    $("#tdShareDocument").html("<b>" + documentName + "</b>");
                    //    getNameAndEmailShareDocument();
                    //    $("#shareDocument").dialog("open");
                    //}
                    //}
                } else {
                    swal("", "This document cannot be Shared: Only<span style='font-weight:700'> doc, xls, ppt, docx, xlsx, pptx, dotx and pdf </span> type files are allowed.");
                }
                break;
            }
        case "approve":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                $("#txtTodoTitle").val('Approval for ' + documentName.split('.')[0]);
                $("#ddlTodoType option").filter(function (index) { return $(this).text() === "Document Approval"; }).prop('selected', true);
                $("#txtBrowseElement").val(documentName);
                $("#txtBrowseElementID").val(documentID);
                $("#trBrowse").css("display", "");
                $("#browse").css("display", "none");
                $("#tdBrowseElement").html("Documents");
                $('#ddlTodoType').attr('disabled', 'disabled');
                GetValuesAndAutoPopulate("ddlApprovers", "");
                $("#txtDueDate").val("");
                //*Harshitha
                var nicInstance = nicEditors.findEditor('txtNotes');
                nicInstance.setContent('');
                NicEditorPasteEvent();
                $("#chkNotifyMe").prop('checked', false);
                $("#dvTodo").dialog("open");
                break;
            }
        case "review":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var reviewWorkflow = $(el).find("#ReviewWorkflow").text();
                var PrimaryDocChecking = $(el).find("#IsPrimaryDoc").text();
                //manoj
                $("#txtWorkflowTitle").prop('readonly', false);
                //manoj
                if (reviewWorkflow == "In Progress") {
                    //swal("", "Document Review is in progress for this document.");
                    $("#alertText1").html("Document Review is in progress for this document.");
                    $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=' + workflowurltoshowDOCUMENT + '><font color="#44A6D8">View Workflow Details</font></a>');
                    $("#dvAlertDetails1").dialog("open");
                }
                else {
                    $("#loadingPage").fadeIn();

                    var businessArea = $("#lblBusinessArea").text();
                    var contractArea = $("#lblContractArea").text();
                    $("#tblStage").empty();
                    $("#ddlRule").empty();
                    if (contractItem.IsFinalized == 'Yes') {
                        $("#liAutoUpdateStatus").css('display', 'none');
                    } else {
                        $("#liAutoUpdateStatus").css('display', '');
                    }
                    $("#txtWorkflowTitle").val('Review for ' + documentName);
                    if (PrimaryDocChecking == 'Yes')
                        $("#lblAutoUpdateStatus").text('Auto update Document & Contract Record status based on this Workflow.');
                    else
                        $("#lblAutoUpdateStatus").text('Auto update Document status based on this Workflow.');

                    $("#txtDuration").val("");
                    //*Harshitha
                    var nicInstance = nicEditors.findEditor('txtComment');
                    nicInstance.setContent('');
                    NicEditorPasteEvent();
                    $("#hdWorkflowType").val("Document Review");
                    $("#hdWorkflowObjectID").val(documentID);
                    $("#hdWorkflowObjectTitle").val(documentName);
                    $("#hdIsPrimaryDoc").val(PrimaryDocChecking);
                    GetValuesAndAutoPopulate("ddlWorkflowCC", "");

                    var vWorkflowSettings = [];
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Document Review&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + documentID,
                        type: 'GET',
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        processData: false,
                        success: function (item) {
                            vWorkflowSettings = item.WorkflowSettings;

                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "8" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                vWorkflowRules = item.WorkflowRules;
                            }
                            if (item.WorkflowSettings != null) {
                                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                        $("#spAddStage").css("display", "none");
                                    }
                                }
                                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                if ($("#txtDuration").val() != "") {
                                    $("#txtDuration").trigger("onchange");
                                } else {
                                    $("#lblDurationDate").empty();
                                }
                                //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                workflowAdHoc = vWorkflowSettings.WorkflowAdHoc;
                            }
                            if (vWorkflowRules.length > 0) {
                                $(vWorkflowRules).each(function (i, rule) {
                                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                });
                                if (workflowAdHoc == "on") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                }
                                var workflowRules = vWorkflowRules[0];
                                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                                if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text(workflowRules.RuleName);
                                    $("#ddlRule").attr('disabled', 'disabled');
                                }
                                else {
                                    $("#lblddlRule").text("");
                                    $("#lblddlRule").css("display", "none");
                                    $("#ddlRule").css("display", "");
                                    $("#ddlRule").removeAttr("disabled");
                                }
                                var participantsInXML = workflowRules.ParticipantsInXML;
                                var totalFileCount = 0;
                                if (workflowRules.RuleName == "Default")
                                    $("#txtWorkflowTitle").val("Review for " + documentName);
                                else
                                    $("#txtWorkflowTitle").val(workflowRules.RuleName);
                                //If the rule is ad-hoc 
                                if (participantsInXML != "") {
                                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                        var StageTitle = $(this).find('StageTitle').text();
                                        var Participants = $(this).find('Participants').text();
                                        var Order = $(this).find('Order').text();
                                        totalFileCount++;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 start_workflow">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                        if (Order == "Serial")
                                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                        else
                                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4 start_workflow">';
                                        if (totalFileCount > 1)
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                        else
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);
                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                else {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    $("#ddlOrder" + vasstoid).val('Serial');
                                                }
                                            }
                                            else {
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                $("#ddlOrder" + vasstoid).val('Serial');
                                            }
                                        });
                                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                        var vParticipantsArr = Participants.split(";");
                                        if (vParticipantsArr.length > 1)
                                            $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                        else
                                            $("#ddlOrder" + totalFileCount).prop('disabled', true);




                                        if (item.WorkflowSettings != null) {
                                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                }
                                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                            }
                                        }
                                    });
                                }
                                else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1)
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            else {
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                $("#ddlOrder" + vasstoid).val('Serial');
                                            }
                                        }
                                        else {
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            $("#ddlOrder" + vasstoid).val('Serial');
                                        }
                                    });
                                }
                            }
                            else {
                                if ($("#ddlRule").html() == "") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text("Ad-hoc");
                                }
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);

                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1)
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        else {
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            $("#ddlOrder" + vasstoid).val('Serial');
                                        }
                                    }
                                    else {
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        $("#ddlOrder" + vasstoid).val('Serial');
                                    }
                                });
                            }
                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        },
                        error: function () {
                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                            $("#lblddlRule").css("display", "");
                            $("#ddlRule").css("display", "none");
                            $("#lblddlRule").text("Ad-hoc");
                            if (!workflowAdHoc)
                                $("#ddlRule").attr('disabled', 'disabled');
                            var totalFileCount = 1;
                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width46 start_workflow">';
                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';

                            $("#tblStage").append(htmlFormatFile);
                            var $options = $("#ddlApprovers > option").clone();
                            $('#ddlAssignTo' + totalFileCount).append($options);
                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                if ($(this).val() != null) {
                                    if ($(this).val().length > 1)
                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                    else {
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        $("#ddlOrder" + vasstoid).val('Serial');
                                    }
                                }
                                else {
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    $("#ddlOrder" + vasstoid).val('Serial');
                                }
                            });

                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        }
                    });


                }

                break;
            }
        case "version": {
            $("#tblVersionHistory").empty();
            $("#loadingPage").fadeIn();
            var documentID = $(el).find("#DocumentID").text();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/' + documentID + '/versions',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'RefreshToken': localStorage.RefreshToken },
                cache: false,
                success: function (data) {
                    var datalenght = data.length;
                    for (var i = datalenght - 1 ; i >= 0; i--) {
                        var item = data[i];
                        var formatModifiedDate
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { formatModifiedDate = moment(new Date(item.Modified)).utc().format('MM/DD/YYYY'); }
                        else { formatModifiedDate = moment(new Date(item.Modified)).utc().format(localStorage.AppDateFormat); }
                        var article = "";
                        article += '<tr>';
                        article += '<td>' + item.VersionNo + '</td>';
                        article += '<td>' + item.Size + '</td>';
                        article += '<td>' + formatModifiedDate + '</td>';
                        article += '<td>' + item.ModifiedBy + '</td>';
                        article += '</tr>';
                        $("#tblVersionHistory").append(article);
                    }

                    var vCount = data.length;
                    $("#loadingPage").fadeOut();
                    $("#dvVersionHistory").dialog("open");
                },
                error: function () {
                    $("#loadingPage").fadeOut();
                }
            });
            break;
        }
        case "primary":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to mark this document as primary?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var entityid = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkPrimary?documentid=' + entityid,
                 type: 'PUT',
                 cache: false,
                 contentType: false,
                 headers: {
                     'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                 },
                 processData: false,
                 success: function (document) {
                     BindContractDetails(vContractID);
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     //GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
            //manoj
        case 'pin':
            {
                //Check pinning document restriction and allow
                if ($("#hdnPinDocumentCount").text() == "Yes") {
                    swal("", "Contract will allow only 5 document(s) to pin,5 document(s) already pinned");
                } else {
                    swal({
                        title: '',
                        //text: "Are you sure you want to mark this document as <span style=\"font-weight:700\">Pin Document</span>?",
                        text: "Are you sure you want to <span style=\"font-weight:700\">pin</span> this document into summary?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
         function (confirmed) {
             if (confirmed) {
                 $("#loadingPage").fadeIn();
                 var entityid = $(el).find("#DocumentID").text();
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkPinorUnpin?documentid=' + entityid + '&action=pin',
                     type: 'PUT',
                     cache: false,
                     contentType: false,
                     headers: {
                         'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                     },
                     processData: false,
                     success: function (document) {
                         //BindContractDetails(vContractID);
                         //manoj
                         if (documentview == null || documentview == "" || documentview == 'folder') {
                             if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                 var selectedfoldervalue = $('#showAll').find("a");
                                 var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                 var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                 var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                 showfolderdocuments(parentdocumentdetails);
                             }
                             else {
                                 BindDocument(vContractID);
                             }
                         } else {
                             DisplayDocument(documentview);
                         }
                         //GetContractPendingAction(true, "BindPeoples");
                         $("#hdnFolderDocumentView").text('');
                         $("#hdnShowAllTextValue").html('');
                         PrvFolderselection = '';
                         //Bind primary and pined document based on new feature
                         if ($("#hdnnewdocumentfeature").text() == "Yes") {
                             CreateDocumentListPinView(vContractID);
                         }
                         //manoj
                         $("#loadingPage").fadeOut();
                     },
                     error: function () {
                         $("#loadingPage").fadeOut();
                     }
                 });
             }
             return;
         });
                }

                break;
            }

        case 'unpin':
            {
                swal({
                    title: '',
                    //text: "Are you sure you want to mark this document as <span style=\"font-weight:700\">UnPin</span>?",
                    text: "Are you sure you want to <span style=\"font-weight:700\">unpin</span> this document from summary?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var entityid = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkPinorUnpin?documentid=' + entityid + '&action=unpin',
                 type: 'PUT',
                 cache: false,
                 contentType: false,
                 headers: {
                     'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                 },
                 processData: false,
                 success: function (document) {
                     //BindContractDetails(vContractID);
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     //GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
            //manoj
    }
}
function parseVersionsData(data) {
    var entries = {};
    var versionList = $(data).find('table.ms-settingsframe');


    versionList.find('> tbody > tr').each(function (i) {
        if (i > 0 && (i) % 2 == 0) {
            var verRow = $(this); //get version row
            var propsRow = verRow.next(); //get properties row
            var versionLabel = verRow.find('td:first').html().trim();
            if (versionLabel.length > 0) {
                entries[versionLabel] = {};
                //extract item version properties
                propsRow.find('tr').each(function (i) {
                    var pName = $(this).find('td:nth-child(1)').text().trim();
                    var pVal = $(this).find('td:nth-child(2)').text().trim();
                    entries[versionLabel][pName] = pVal;
                });
            }
        }

    });
    return entries;
}
function ShowMetadata() {
    $("#docMetadata").addClass('pop_up_Harizondal_meta_active');
    $("#docActivities").removeClass('pop_up_Harizondal_meta_active');
    $('#tblMetadataDetailDocument').css("display", "");
    $('#documentLogs').css("display", "none");
    $('#compact-pagination-documentLogs').css("display", "none");
    $('#idDocumentPopup').css("display", "none");

}

function ShowActivities() {

    $("#docMetadata").removeClass('pop_up_Harizondal_meta_active');
    $("#docActivities").addClass('pop_up_Harizondal_meta_active');
    $('#tblMetadataDetailDocument').css("display", "none");
    $('#documentLogs').css("display", "");
    $('#compact-pagination-documentLogs').css("display", "none");


    $('#idDocumentPopup').css("display", "");

}

function GetDocumentSignatureDetail(documentid) {
    $("#tblDocSignatureDetail").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/SignatureDetail?documentid=' + documentid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $(data).find('recipients').each(function () {
                var name = $(this).find('name').text();
                var state = $(this).find('state').text();
                var email = $(this).find('email').text();

                var sObject = item.Object;
                var sActivity = item.Activity;
                var sUserID = item.UserID;
                var sTimestamp = moment(new Date(item.Timestamp)).format('MM/DD/YYYY h:mm A');
                var article = '<tr><td><span class="logHis_Datetime">' + name + '</span></td><td><span class="logHis_Activity">' + email + '</span></td><td><span class="logHis_Datetime">' + state + '</span></td></tr>';
                $("#tblDocSignatureDetail").append(article);
            });

            $("#docSignatureDetail").dialog("open");
            $("#docSignatureDetail").height("auto");

        },
        error: function (data) {
            var vv = "";
        }
    });
}


function EditDocumentMetadata(documentID) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documententity) {
            $("#loadingPage").fadeOut();
            $("#txtDocumentID").val(documententity.RowKey);
            var vDocName = documententity.DocumentName.split('.');
            $("#txtDocumentName").val(vDocName.slice(0, -1).join('.'));
            $("#spExt").html(vDocName[vDocName.length - 1]);
            $("#lblDocumentUrl").val(documententity.DocumentUrl);
            $("#ddlDocumentType option").filter(function (index) { return $(this).text() === ((documententity.DocumentType != "0") ? documententity.DocumentType : "--Select--"); }).prop('selected', true);
            $("#txtDocumentDescriptionEdit").val(documententity.Description);
            GetValuesAndAutoPopulate("ddlAuthorEdit", documententity.DocumentAuthor);
            $("#txtDocumentLanguageEdit").val(documententity.DocumentLanguage);
            $("#txtHardCopyPhysicalLocationEdit").val(documententity.HardCopyPhysicalLocation);
            $("#hdnEditDocCounterparty").text(documententity.Counterparty);
            if (documententity.IsFinalized == "Yes") {
                $('input[type="radio"][name="IsFinalizedEdit"][value="Yes"]').prop('checked', true);
                $("#liFinalizedBy").css("display", "");
                var fFinalizedDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fFinalizedDate = moment(new Date(documententity.FinalizedDate)).format('MM/DD/YYYY'); }
                else { fFinalizedDate = moment(new Date(documententity.FinalizedDate)).format(localStorage.AppDateFormat); }
                $("#dvFinalizedBy").html(documententity.FinalizedBy + ' on ' + fFinalizedDate);
            }
            else {
                $("#liFinalizedBy").css("display", "none");
                $("#dvFinalizedBy").html('');
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "16" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $('input[type="radio"][name="IsFinalizedEdit"][value="No"]').prop('checked', true);
                } else {
                    $('input[type="radio"][name="IsFinalizedEdit"][value="Yes"]').prop('checked', true);
                }
            }

            if (documententity.IsStandard == "Yes")
                $('input[type="radio"][name="IsStandardEdit"][value="Yes"]').prop('checked', true);
            else
                $('input[type="radio"][name="IsStandardEdit"][value="No"]').prop('checked', true);
            if (documententity.DocumentStatus.trim() == 'Expired') {
                $("#dtValidFromEdit").val("");
                $("#dtValidTillEdit").val("");
                if ($("#linkAddValidity1").text() == "Track document expiration date") {
                    $("#linkAddValidity1").css('display', 'none');
                }
                else {
                    $("#linkAddValidity1").click();
                    $("#linkAddValidity1").css('display', 'none');
                }
            }
            else {
                $("#dtValidFromEdit").val("");
                $("#dtValidTillEdit").val("");
                if ($("#linkAddValidity1").text() == "Track document expiration date") {
                    $("#linkAddValidity1").css('display', 'block');
                }
                else {
                    $("#linkAddValidity1").click();
                    $("#linkAddValidity1").css('display', 'block');
                }
            }
            $("#ddlDocumentStatusEdit option").filter(function (index) { return $(this).text() === documententity.DocumentStatus; }).prop('selected', true);
            //*Harshitha
            var fvalidfrom = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                if (documententity.ValidFrom != null) {
                    var docvalidfrom = new Date(documententity.ValidFrom)
                    var docvalidfrom1 = (docvalidfrom.getUTCMonth() + 1) + '/' + docvalidfrom.getUTCDate() + '/' + docvalidfrom.getUTCFullYear();
                    fvalidfrom = moment(docvalidfrom1).format('MM/DD/YYYY');
                }
            }
            else {
                if (documententity.ValidFrom != null) {
                    var docvalidfrom = new Date(documententity.ValidFrom)
                    var docvalidfrom1 = (docvalidfrom.getUTCMonth() + 1) + '/' + docvalidfrom.getUTCDate() + '/' + docvalidfrom.getUTCFullYear();
                    fvalidfrom = moment(docvalidfrom1).format(localStorage.AppDateFormat);
                }
            }

            var fValidTill = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
                if (documententity.ValidTill != null) {
                    var docvalidtill = new Date(documententity.ValidTill)
                    var docvalidtill1 = (docvalidtill.getUTCMonth() + 1) + '/' + docvalidtill.getUTCDate() + '/' + docvalidtill.getUTCFullYear();
                    fValidTill = moment(docvalidtill1).format('MM/DD/YYYY');
                }
            }
            else {
                if (documententity.ValidTill != null) {
                    var docvalidtill = new Date(documententity.ValidTill)
                    var docvalidtill1 = (docvalidtill.getUTCMonth() + 1) + '/' + docvalidtill.getUTCDate() + '/' + docvalidtill.getUTCFullYear();
                    fValidTill = moment(docvalidtill1).format(localStorage.AppDateFormat);
                }
            }
            $("#dtValidFromEdit").val(fvalidfrom);
            $("#dtValidTillEdit").val(fValidTill);
            //
            GetValuesAndAutoPopulate("ddlDocRemindToEdit", documententity.SendReminderTo);
            $("#txtReminder1Edit").val(documententity.Reminder1);
            $("#txtReminder2Edit").val(documententity.Reminder2);
            $("#txtReminder3Edit").val(documententity.Reminder3);
            if (documententity.Reminder1Condition != '') {
                $("#ddlReminder1Edit option").filter(function (index) { return $(this).text() === documententity.Reminder1Condition; }).prop('selected', true);
            }
            else {
                $("#ddlReminder1Edit").val('before')
            }
            if (documententity.Reminder2Condition != '') {
                $("#ddlReminder2Edit option").filter(function (index) { return $(this).text() === documententity.Reminder2Condition; }).prop('selected', true);
            }
            else {
                $("#ddlReminder2Edit").val('before')
            }
            if (documententity.Reminder3Condition != '') {
                $("#ddlReminder3Edit option").filter(function (index) { return $(this).text() === documententity.Reminder3Condition; }).prop('selected', true);
            }
            else {
                $("#ddlReminder3Edit").val('before')
            }
        },
        error: function () {
            $("#loadingPage").fadeOut();
        },
        complete: function () {
            $("#loadingPage").fadeOut();
            $("#trFileUpload").css("display", "none");
            $("#lblCTitleDoc").text($("#lblContractTitle").text());
            $(".validelement").each(function (index, element) {
                $(element).removeClass("error");
                $("#errormsg_" + element.id).remove();
            });
            $("#EditDocument").dialog("option", "title", "Edit Document Metadata");
            $("#EditDocument").dialog("open");
        }
    });
}

function getQueryStringFromValue(url, name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(url);
    return results == null ? url : decodeURIComponent(results[1].replace(/\+/g, " "));
}


//$('#btnAddContractDocument').click(function () {
//    AddContractDocument();
//    addbuttonclick = true;
//});

function AddContractDocument() {
    $('#lblTemplateDescription').text("");
    $('#dtValidFrom').removeClass('error')
    $('#dtValidTill').removeClass('error')
    $('#errormsg_dtValidFrom').text('');
    $('#errormsg_dtValidTill').text('');
    $('#dtValidFrom').val('');
    $('#dtValidTill').val('');
    $('#ddlDocumentStatus').val("New");
    $("#formValidity").css("display", "none");
    $("#formValidityForm").css("display", "none");
    $("#tabUpload").addClass("document_active");
    $("#tabTemplate").removeClass("document_active");
    $("#tabExistingDocument").removeClass("document_active");
    $("#btnDocAdd").html('<span class="ui-button-text">Upload</span>')
    if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
        $("#dtValidFrom").val("");
        $("#dtValidTill").val("");
        if ($("#linkAddValidity").text() == "Track document expiration date") {
            $("#linkAddValidity").css('display', 'none');
        }
        else {
            $("#linkAddValidity").click();
            $("#linkAddValidity").css('display', 'none');
        }
    }
    else {
        $("#linkAddValidity").css('display', 'block');
    }

    $("#tblContentControls").empty();
    selectUploadFromComputer();

    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "16" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $('input[type="radio"][name="IsFinalized"][value="No"]').prop('checked', true);
    } else {
        $('input[type="radio"][name="IsFinalized"][value="Yes"]').prop('checked', true);
    }
    if (contractItem.IsStandard == "Yes")
        $('input[type="radio"][name="IsStandard"][value="Yes"]').prop('checked', true);
    else
        $('input[type="radio"][name="IsStandard"][value="No"]').prop('checked', true);

    $("#txtDocumentID").val("");
    $("#txtDocumentName").val("");
    $("#docContract").replaceWith($("#docContract").val('').clone(true));
    $("#txtDescriptionDoc").val("");
    $("#txtDocumentLanguageCreate").val("");
    $("#txtHardCopyPhysicalLocationCreate").val("");

    $("#lblCTitleDoc").text($("#lblContractTitle").text());
    $("#trFileUpload").css("display", "");
    $("#trDocumentType").css("display", "");
    $("#ddlDocumentTemplate").val("0");
    $("#ddlDocumentTemplate").removeClass('validelement');
    $("#txtDocumentNameCreate").val("");
    $("#txtDocumentNameCreate").removeClass('validelement');
    $("#docContract").replaceWith($("#docContract").val('').clone(true));

    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    $(".specialchar").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    $(".filecorevo").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });


    if ($('#tblExistingDocument tr').length <= 0) {
        BindDocumentNotTagToContract();
    }
    $("#btnNewFolder").text('Create Sub Folder');
    setDocumentUrl();

    $("#ddlDocumentTypeCreate").val("0");

    if ($('#showAll').text() == null || $('#showAll').text() == "" || typeof ($('#showAll').text()) == "undefined") {
        $('#txtNewFolderName').addClass('validelement');
    }
    else {
        $('#txtNewFolderName').removeClass('validelement');
    }
    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var documentreminders = defaultGlobalSettings.DocumentReminders;
        var xmlDoc = $.parseXML(documentreminders);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "New").val(remSplit[0]);
            $("#txtReminder" + j + "New").val(remSplit[1]);
            j = j + 1;
        });
    }

    //$("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
    $("#addEditDocument").dialog("option", "title", "New Document");
    $("#addEditDocument").dialog("open");


}

function selectUploadFromComputer() {
    $("#tblNewDocument").css('display', '');
    $("#tblExistingDocument").css('display', 'none');
    $("#tblExistingDocumentSearch").css('display', 'none');
    $("#tblExistingDocumentPaging").css('display', 'none');
    $("#tabUpload").addClass('form-active');
    $("#tabTemplate").removeClass('form-active');
    $("#tabExistingDocument").removeClass('form-active');
    $("#docContract").addClass('validelement');
    $("#docContract").addClass('validfilename');
    $("#ddlDocumentTemplate").removeClass('validelement');
    $("#trTemplate").css('display', 'none');
    $("#trTemplate1").css('display', 'none');
    $("#trFileUpload").css('display', '');
    $("#trDocumentType").css("display", "");
    $('input:checkbox[name=NotTaggedContract]').attr('checked', false);
    $("#hdnIsDocumentTag").text('');
    $("#formTitle").text('Upload from Computer');

}

var overwritedocument = false;
function modalOnOpenDocument(dialog) {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    if ($("#hdnIsDocumentTag").text() == "Yes") {
        //manoj
        document.getElementById("addNewDocument").style.pointerEvents = "default";
        document.getElementById("editNewDocument").style.pointerEvents = "default";
        //manoj
        var isExists = true;
        var headerid = $("#lblContractTitle").text();
        headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
        var finalurl = "";
        finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
        finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
        finalurl = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurl + headerid + '/';
        //manoj
        var vDocuments = "";
        var VDocumentNameList = "";
        ContractDocumentDetails = [];
        $('input:checkbox[name="NotTaggedContract"]:checked').each(function () {
            if (!CheckDocumentExist(finalurl, this.value)) {
                if (vDocuments == "") {
                    vDocuments = this.id;
                }
                else {
                    vDocuments += ";" + this.id;
                }

            } else {
                VDocumentNameList += "," + this.value;
            }
        });
        //manoj
        if (VDocumentNameList != "") {
            VDocumentNameList = (VDocumentNameList.charAt(0) == ',') ? VDocumentNameList.substr(1) : VDocumentNameList;
            var nVDocumentNameList = VDocumentNameList.lastIndexOf(",");
            if (nVDocumentNameList > -1) {
                VDocumentNameList = VDocumentNameList.substr(0, nVDocumentNameList) + 'and' + VDocumentNameList.substr(nVDocumentNameList + 1);
            }
            swal("", " '" + VDocumentNameList + "' already exist");
        }
        //manoj
        if (vDocuments != "") {
            $("#loadingPage").fadeIn();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentids=' + vDocuments + '&contractid=' + getParameterByName('ContractID') + '&username=' + localStorage.UserName + '&path=' + encodeURIComponent(finalurl),
                type: 'PUT',
                //data: formData,
                cache: false,
                contentType: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken },
                processData: false,
                success: function (document) {
                    $("#addEditDocument").dialog("close");
                    //manoj
                    if (documentview == null || documentview == "" || documentview == 'folder') {
                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                            var selectedfoldervalue = $('#showAll').find("a");
                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                            showfolderdocuments(parentdocumentdetails);
                        }
                        else {
                            BindDocument(vContractID);
                        }
                    } else {
                        DisplayDocument(documentview);
                    }
                    pendingStarted = false;
                    GetContractPendingAction(true, "BindPeoples");
                    $("#hdnFolderDocumentView").text('');
                    $("#hdnShowAllTextValue").html('');
                    PrvFolderselection = '';
                    //Bind primary and pined document based on new feature
                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                        CreateDocumentListPinView(vContractID);
                    }
                    //manoj
                    $("#tblExistingDocument").empty();
                    $("#hdnIsDocumentTag").text('');
                    $("#tblNewDocument").css('display', '');
                    $("#tblExistingDocument").css('display', 'none');
                    $("#tblExistingDocumentSearch").css('display', 'none');
                    $("#tblExistingDocumentPaging").css('display', 'none');
                    $("#tabTemplate").addClass('form-active');
                    $("#tabUpload").removeClass('form-active');
                    $("#trTemplate").css('display', '');
                    $("#trTemplate1").css('display', '');
                    $("#trFileUpload").css('display', 'none');
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#loadingPage").fadeOut();
                },
                error: function (document) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#loadingPage").fadeOut();
                }
            });
        } else {
            swal("", "Please select atleast any one document.");
            $('.ui-button-green-text').parent().removeAttr('disabled');
        }
    }
    else {
        var DocumentID = $("#txtDocumentID").val()
        if (DocumentID != "") {
            if (requiredValidator("EditDocument")) {

                var vDocUrl = $("#lblDocumentUrl").val().trim();
                if (CheckDocumentNameExistForEdit(vDocUrl, DocumentID)) {

                    swal("", "Document already exists with the same name.");
                }
                else {
                    if ($("#dtValidFromEdit").val() != '' && $("#dtValidTillEdit").val() != '') {
                        if (comparedates("dtValidFromEdit", "dtValidTillEdit")) {

                            EditnewDocument(DocumentID);
                        } else {
                            swal("", "Expires On date should be greater that Valid From date.");
                        }
                    }
                    else {

                        EditnewDocument(DocumentID);
                    }
                }

            }
        }
        else {
            if (requiredValidator('addNewDocument')) {
                $("#uploaddocumentprocess").css('display', '');
                $('.ui-button-green-text').parent().attr('disabled', 'disabled');
                CheckFolderExist(DocumentID);
            } else {

                autoscroll();

                $("#addNewDocument").animate({
                    scrollTop: $(".error").offset().top
                }, 2000);

                try {
                    $("#addNewDocument").animate({
                        scrollTop: $("#errormsg_docContract").offset().top
                    }, 2000);
                }
                catch (ex) {
                }


                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#uploaddocumentprocess").css('display', 'none');
            }
        }
    }
}
function EditnewDocument(DocumentID) {
    var formData = new FormData();
    var opmlFile = $('#docContract')[0];
    var vDocumentType = "";

    formData.append("opmlFile", opmlFile.files[0]);
    formData.append("AccountID", localStorage.AccountID);
    formData.append("DocumentID", DocumentID);
    formData.append("ContractID", getParameterByName('ContractID'));
    formData.append("Description", $("#txtDocumentDescriptionEdit").val());

    var arrAuthorEdit = $("#ddlAuthorEdit").val();
    var vAuthorEdit = '';
    $(arrAuthorEdit).each(function (i, item) {
        if (vAuthorEdit == '') {
            vAuthorEdit = item;
        }
        else {
            vAuthorEdit += "; " + item;
        }
    });
    formData.append("DocumentAuthor", vAuthorEdit);
    formData.append("DocumentLanguage", $("#txtDocumentLanguageEdit").val());
    formData.append("HardCopyPhysicalLocation", $("#txtHardCopyPhysicalLocationEdit").val());
    formData.append("ContractTitle", $("#lblCTitleDoc").text());
    formData.append("DocumentName", $("#txtDocumentName").val());
    if ($("#hdnEditDocCounterparty").text() === "" || $("#hdnEditDocCounterparty").text() == null) {
        if (contractItem != undefined && contractItem != null && contractItem.Counterparty != undefined && contractItem.Counterparty != "") {
            $("#hdnEditDocCounterparty").text(contractItem.Counterparty);
        }
    }
    formData.append("Counterparty", $("#hdnEditDocCounterparty").text());

    if ($("#ddlDocumentType").val() != "0") {
        vDocumentType = $("#ddlDocumentType").val();
    }
    formData.append("DocumentType", vDocumentType);
    formData.append("ModifiedBy", localStorage.UserName);
    formData.append("DocumentExt", $("#spExt").html());
    formData.append("IsFolder", 'False');
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "14" && n.Status == "ON");
    });
    if (vDocLibFeat.length > 0) {
        formData.append("DocumentLibraryName", $('#hdContAreaDocLibName').val());
    }
    else {
        formData.append("DocumentLibraryName", "Contract Documents");
    }
    if ($("input:radio[name=IsFinalizedEdit]:checked").val() == "Yes") {
        formData.append("IsFinalized", "Yes");
    } else {
        formData.append("IsFinalized", "No");
    }
    if ($("input:radio[name=IsStandardEdit]:checked").val() == "Yes") {
        formData.append("IsStandard", "Yes");
    } else {
        formData.append("IsStandard", "No");
    }
    formData.append("DocumentStatus", $("#ddlDocumentStatusEdit").val());
    formData.append("ValidFrom", $.datepicker.formatDate('mm/dd/yy', $("#dtValidFromEdit").datepicker('getDate')));
    formData.append("ValidTill", $.datepicker.formatDate('mm/dd/yy', $("#dtValidTillEdit").datepicker('getDate')));
    formData.append("Reminder1", $("#txtReminder1Edit").val());
    formData.append("Reminder1Condition", $("#ddlReminder1Edit").find('option:selected').text());
    formData.append("Reminder2", $("#txtReminder2Edit").val());
    formData.append("Reminder2Condition", $("#ddlReminder2Edit").find('option:selected').text());
    formData.append("Reminder3", $("#txtReminder3Edit").val());
    formData.append("Reminder3Condition", $("#ddlReminder3Edit").find('option:selected').text());
    var arrSendReminderTo = $("#ddlDocRemindToEdit").val();
    var vSendReminderTo = '';
    $(arrSendReminderTo).each(function (i, item) {
        if (vSendReminderTo == '') {
            vSendReminderTo = item;
        }
        else {
            vSendReminderTo += "; " + item;
        }
    });
    formData.append("SendReminderTo", vSendReminderTo);

    $("#inprocessDocumentMetadata").css('visibility', 'visible');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + DocumentID,
        type: 'PUT',
        data: formData,
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
        processData: false,
        success: function (document) {
            $('.ui-button-green-text').parent().removeAttr('disabled');
            $("#EditDocument").dialog("close");
            $("#ulDocument").empty();
            $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
            //manoj
            if (documentview == null || documentview == "" || documentview == 'folder') {
                GetdocumentIsStandard(vContractID);
            } else {
                DisplayDocument(documentview);
            }
            pendingStarted = false;
            GetContractPendingAction(true, "BindPeoples");
            $("#hdnFolderDocumentView").text('');
            $("#hdnShowAllTextValue").html('');
            PrvFolderselection = '';
            //Bind primary and pined document based on new feature
            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                CreateDocumentListPinView(vContractID);
            }
            //manoj
            if ($("#hdIsPrimaryDoc").val() == "Yes") {
                var Finalizedcontractstatus = ["Ready for Signature", "Awaiting Signatures", "Active", "Signed", "Expired"];
                var notFinalizedcontractstatus = ["New", "Awaiting Review", "Reviewed", "In Negotiation", "Negotiation Complete"];
                if (contractItem.IsFinalized == "Yes" && (Finalizedcontractstatus.indexOf($("#ddlDocumentStatusEdit").val()) > -1)) {
                    contractItem.Status = $("#ddlDocumentStatusEdit").val();
                    ContractTopActions();
                }
                else if (contractItem.IsFinalized != "Yes" && (notFinalizedcontractstatus.indexOf($("#ddlDocumentStatusEdit").val()) > -1)) {
                    contractItem.Status = $("#ddlDocumentStatusEdit").val();
                    ContractTopActions();
                } else if (contractItem.IsFinalized != "Yes" && (Finalizedcontractstatus.indexOf($("#ddlDocumentStatusEdit").val()) > -1)) {
                    contractItem.IsFinalized = "Yes";
                    contractItem.FinalizedBy = localStorage.UserName;
                    ContractTopActions();
                }
            }
        },
        error: function (Message) {
            $("#inprocessDocumentMetadata").css('visibility', 'hidden');
            swal(Message.responseText);
        }
        //complete: function () {
        //    $("#inprocessDocumentMetadata").css('visibility', 'hidden');
        //}

    });
}

function newDocument(DocumentID) {
    var tblContentControls = null;
    var formData = new FormData();
    var opmlFile = $('#docContract')[0];
    var vDocumentType = "";

    if (opmlFile.files.length > 0) {
        formData.append("opmlFile", opmlFile.files[0]);
    }

    if (overwritedocument) { //if overwrite is yes
        formData.append("OverWrite", "Yes");
    }

    var contractformappend = "DocumentID=" + DocumentID;
    contractformappend += "&~DocDescription=" + $("#txtDescriptionDoc").val();

    var arrAuthorCreate = $("#ddlAuthorCreate").val();

    var vAuthorCreate = '';
    $(arrAuthorCreate).each(function (i, item) {
        if (vAuthorCreate == '') {
            vAuthorCreate = item;
        }
        else {
            vAuthorCreate += "; " + item;
        }
    });
    contractformappend += "&~DocumentAuthor=" + vAuthorCreate;
    contractformappend += "&~DocumentLanguage=" + $("#txtDocumentLanguageCreate").val();
    contractformappend += "&~HardCopyPhysicalLocation=" + $("#txtHardCopyPhysicalLocationCreate").val();
    contractformappend += "&~ContractID=" + getParameterByName('ContractID');
    contractformappend += "&~ContractTitle=" + $("#lblCTitleDoc").text();

    if ($("#ddlDocumentTypeCreate").val() != "0") {
        vDocumentType = $("#ddlDocumentTypeCreate").val();
    }
    contractformappend += "&~DocumentType=" + vDocumentType;
    contractformappend += "&~Counterparty=" + $("#lblCounterparty").text();
    if ($("#trTemplate").css('display') == 'none') {
        contractformappend += "&~DocumentName=";
    }
    else {
        contractformappend += "&~TemplateName=" + $("#ddlDocumentTemplate").find('option:selected').text();
        contractformappend += "&~DocumentName=" + $("#txtDocumentNameCreate").val();
        tblContentControls = $("#formtblContentControls *").serializeArray();

        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/automation',
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            async: false,
            data: {
                TemplateName: "",
                DocumentName: $("#txtDocumentNameCreate").val(),
                ContractID: getParameterByName('ContractID'),
                Status: "",
                SendBy: "",
                RemindLater: "",
            },
            cache: false,
            success: function (rowKey) {
                formData.append("DocumentInAutomation", rowKey);
                if (!$.isEmptyObject(arrRelatedContracts)) {
                    CreateRelatedContracttemplate();
                }
            },
            error: function (rowKey) {

            }
        });
    }
    if ($("input:radio[name=IsFinalized]:checked").val() == "Yes") {
        contractformappend += "&~IsFinalized=Yes";
    } else {
        contractformappend += "&~IsFinalized=No";
    }

    if ($("input:radio[name=IsStandard]:checked").val() == "Yes") {
        contractformappend += "&~IsStandard=Yes";
    } else {
        contractformappend += "&~IsStandard=No";
    }

    if ($("#ddlDocumentStatus").val() != "0") {
        contractformappend += "&~DocumentStatus=" + $("#ddlDocumentStatus").val();
    }
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "14" && n.Status == "ON");
    });
    if (vDocLibFeat.length > 0) {
        contractformappend += "&~DocumentLibraryName=" + $('#hdContAreaDocLibName').val();
    }
    else {
        contractformappend += "&~DocumentLibraryName=Contract Documents";
    }
    var contractiledetails = $("#lblCTitleDoc").text();
    contractformappend += "&~LocationURL=" + $('#lblFolderUrl').text();
    if ($("#ddlContracts").find('option:selected').val() != "0") {
        if ($('#txtNewFolderName').val() != "") {

        }
    }
    else {
        contractformappend += "&~FolderName=";
    }
    contractformappend += "&~NewFolderName=" + $('#txtNewFolderName').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();

    if ($("input:radio[name=rad_Copy]:checked").val() == "Library") {
        contractformappend += "&~DocumentLocation=Office 365 Document Library";
    } else {
        contractformappend += "&~DocumentLocation=Office 365 Document Library & eContracts Cloud";
    }
    contractformappend += "&~CreatedBy=" + localStorage.UserName;
    contractformappend += "&~ModifiedBy=" + localStorage.UserName;
    if (tblContentControls != null) {
        var tblContentControlslength = tblContentControls.length;
        for (var i = 0; i < tblContentControlslength; i++) {
            var checkingvar = "&~" + tblContentControls[i].name + "=";
            if (contractformappend.indexOf(checkingvar) > 0) {
                var nextvar = contractformappend.substring(contractformappend.indexOf(checkingvar) + 1, contractformappend.length);
                var valuevar = contractformappend.substring(contractformappend.indexOf(checkingvar), nextvar.indexOf("&~") + contractformappend.indexOf(checkingvar) + 1);
                contractformappend = contractformappend.replace(valuevar, "&~" + tblContentControls[i].name + "=" + tblContentControls[i].value)
                nextvar = "";
                valuevar = "";
                checkingvar = "";
            }
            else {
                contractformappend += "&~" + tblContentControls[i].name + "=" + tblContentControls[i].value;
            }
        }
    }
    formData.append("AccountID", localStorage.AccountID);
    var splitcontractformappend = contractformappend.split('&~');

    $(splitcontractformappend).each(function (i, item) {
        var splititem = item.split('=');
        formData.append(splititem[0].trim(), splititem[1]);
    });
    splitcontractformappend = [];
    contractformappend = '';
    if ($("#txtBusinessArea").val() != "") {
        formData.append("BusinessArea", $("#txtBusinessArea").val().trim());
    } else {
        formData.append("BusinessArea", $("#lblBusinessArea").text().trim());
    }
    formData.append("BusinessAreaPath", $("#lblBusinessAreaPath").text());
    formData.append("ContractArea", $("#lblContractArea").text().trim());
    formData.append("ContractAreaAdministrators", $("#lblContractAreaAdmins").text().trim());
    formData.append("BusinessAreaOwners", $("#lblBusinessAreaOwners").text().trim());

    formData.append("ValidFrom", $.datepicker.formatDate('mm/dd/yy', $("#dtValidFrom").datepicker('getDate')));
    formData.append("ValidTill", $.datepicker.formatDate('mm/dd/yy', $("#dtValidTill").datepicker('getDate')));
    formData.append("Reminder1", $("#txtReminder1New").val());
    formData.append("Reminder1Condition", $("#ddlReminder1New").find('option:selected').text());
    formData.append("Reminder2", $("#txtReminder2New").val());
    formData.append("Reminder2Condition", $("#ddlReminder2New").find('option:selected').text());
    formData.append("Reminder3", $("#txtReminder3New").val());
    formData.append("Reminder3Condition", $("#ddlReminder3New").find('option:selected').text());
    formData.append("CreatingFromContractForm", "No");

    var arrSendReminderTo = $("#ddlDocRemindTo").val();

    var vSendReminderTo = '';
    $(arrSendReminderTo).each(function (i, item) {
        if (vSendReminderTo == '') {
            vSendReminderTo = item;
        }
        else {
            vSendReminderTo += "; " + item;
        }
    });
    formData.append("SendReminderTo", vSendReminderTo);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents',
        type: 'POST',
        data: formData,
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
        processData: false,
        async: true,
        success: function (data) {
            if ($("#ddlDocumentTemplate").attr("class").indexOf('validelement') >= 0) {

                setTimeout(funcMessageAfterDocGeneration, 10000);
            }
            else {
                $("#uploaddocumentprocess").css('display', 'none');
                $('.ui-button-green-text').parent().removeAttr('disabled');

                $("#ulDocument").empty();
                $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
                //manoj
                if (documentview == null || documentview == "" || documentview == 'folder') {
                    GetdocumentIsStandard(vContractID);
                } else {
                    DisplayDocument(documentview);
                }
                pendingStarted = false;
                GetContractPendingAction(true, "BindPeoples");
                $("#hdnFolderDocumentView").text('');
                $("#hdnShowAllTextValue").html('');
                PrvFolderselection = '';
                //Bind primary and pined document based on new feature
                if ($("#hdnnewdocumentfeature").text() == "Yes") {
                    CreateDocumentListPinView(vContractID);
                }
                //manoj                
            }

            afterPost();
        },
        error: function (data) {

        }
    });
}

function funcMessageAfterDocGeneration() {
    $("#uploaddocumentprocess").css('display', 'none');
    $('.ui-button-green-text').parent().removeAttr('disabled');
    //manoj
    if (documentview == null || documentview == "" || documentview == 'folder') {
        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
            var selectedfoldervalue = $('#showAll').find("a");
            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
            showfolderdocuments(parentdocumentdetails);
        }
        else {
            BindDocument(vContractID);
        }
    } else {
        DisplayDocument(documentview);
    }
    pendingStarted = false;
    GetContractPendingAction(true, "BindPeoples");
    $("#hdnFolderDocumentView").text('');
    $("#hdnShowAllTextValue").html('');
    PrvFolderselection = '';
    //Bind primary and pined document based on new feature
    if ($("#hdnnewdocumentfeature").text() == "Yes") {
        CreateDocumentListPinView(vContractID);
    }
    //manoj
}

function afterPost() {
    $('.ui-button-green-text').parent().removeAttr('disabled');
    $("#addEditDocument").dialog("close");
    $("#ddlDocumentTypeCreate").val("0");
    //$("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
    $("#ddlDocumentTemplate").val("0");
    $("#txtDocumentNameCreate").val("");
    if ($('#txtNewFolderName').val() != "") {
        if ($("input:radio[name=IsFinalized]:checked").val() == "Yes") {
            $("#hdnFinalizedDocumentsUrl").text($('#lblFolderUrl').text() + $('#txtNewFolderName').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
        } else {
            $("#hdnDraftDocumentsUrl").text($('#lblFolderUrl').text() + $('#txtNewFolderName').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
        }
        var checkingtest = $('#lblFolderUrl').text();
        var spiltcheckingtest = checkingtest.split('/');
        if (spiltcheckingtest.length < 4) {
            $("#hdnContractDocumentsUrl").text(checkingtest + $('#txtNewFolderName').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim() + "/");
            $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
        }
    }
    $('#txtFolderName').val("");
    $('#txtNewFolderName').val("");
    $('#dtValidFrom').val("");
    $('#dtValidTill').val("");
    $('#txtReminder1New').val("");
    $('#txtReminder2New').val("");
    $('#txtReminder3New').val("");
    $("#ddlReminder1New").find('option[value="before"]').prop("selected", true);
    $("#ddlReminder2New").find('option[value="before"]').prop("selected", true);
    $("#ddlReminder3New").find('option[value="before"]').prop("selected", true);
}


function CheckDocumentExistwithoutparameter() {
    var isExist = false;
    var vDocURL = "";
    var folderurltobind = "";

    if ($('#lblFolderUrl').text().slice(-1) != "/") {
        folderurltobind = $('#lblFolderUrl').text() + "/";
    } else {
        folderurltobind = $('#lblFolderUrl').text();
    }
    if ($("#ddlDocumentTemplate").is(":visible")) {
        if ($("#txtNewFolderName").val() != "") {
            var newfolderadd = encodeURIComponent($("#txtNewFolderName").val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
            if (newfolderadd.trim() != "") {

                vDocURL = localStorage.SPHostUrl + folderurltobind + newfolderadd.trim() + "/" + encodeURIComponent($('#txtDocumentNameCreate').val()) + ".docx";
            } else {
                vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent($('#txtDocumentNameCreate').val()) + ".docx";
            }
        }
        else {

            vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent($('#txtDocumentNameCreate').val()) + ".docx";
        }
    }
    else {
        if ($("#txtNewFolderName").val() != "") {
            var newfolderadd = encodeURIComponent($("#txtNewFolderName").val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
            if (newfolderadd.trim() != "") {
                vDocURL = localStorage.SPHostUrl + folderurltobind + newfolderadd.trim() + "/" + encodeURIComponent($('#docContract')[0].files[0].name);
            } else {
                vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent($('#docContract')[0].files[0].name);
            }
        }
        else {
            vDocURL = localStorage.SPHostUrl + folderurltobind + encodeURIComponent($('#docContract')[0].files[0].name);
        }
    }
    folderurltobind = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?docurl=' + vDocURL,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (folder) {
            isExist = true;
        },
        error:
            function (data) {
                isExist = false;
            }
    });
    return isExist;
}

$('#btnSelectFolder').click(function () {
    $("#treeviewFolder").dialog("option", "title", "Select Folder");
    $("#treeviewFolder").dialog("open");
});

function selectfolder() {
    //manoj
    //$("#loadingPage").fadeIn();
    //var ExistingDocument=[];
    var $tree = $('#treeviewFolderOption');
    var nodeselected = $tree.tree('getSelectedNode');
    var nodeselectedname = "";
    if (typeof (nodeselected) != "undefined" && nodeselected != null) {
        var selectednodeid = nodeselected.id;
        nodeselectedname = (nodeselected.name != null && nodeselected.name != "") ? nodeselected.name.split('/').pop() : nodeselected.name;
        var fixedvaluetopass = $("#hdnContractDocumentsUrlFixed").text();
        fixedvaluetopass = ((fixedvaluetopass.substr(fixedvaluetopass.length - 1)) != "/") ? fixedvaluetopass : fixedvaluetopass.substr(0, fixedvaluetopass.length - 1);
        var splturl = (selectednodeid.indexOf(fixedvaluetopass) > -1) ? selectednodeid.split(fixedvaluetopass).pop() : selectednodeid;
        var fixedurl = $("#hdnContractDocumentsUrlFixed").text();
        fixedurl = (fixedurl.charAt(0) != '/') ? '/' + fixedurl : fixedurl;
        fixedurl = ((fixedurl.substr(fixedurl.length - 1)) != "/") ? fixedurl + "/" : fixedurl;
        //finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        if (splturl != "") {

            splturl = (splturl.charAt(0) == '/') ? splturl.substr(1) : splturl;
            splturl = ((splturl.substr(splturl.length - 1)) != "/") ? splturl + "/" : splturl;
        }
        splturl = fixedurl + splturl;
        $('#lblFolderUrl').text(splturl);
        //$('#lblFolderUrl').text(((nodeselected.name.substr(nodeselected.name.length - 1)) != "/") ? $('#lblFolderUrl').text() + '/' : $('#lblFolderUrl').text());
        $("#treeviewFolder").dialog("close");
    } else {
        swal("", "Please select any folder.");
        $("#loadingPage").fadeOut();
    }
}
function selectfoldertomove() {
    $("#loadingPage").fadeIn();
    var ExistingDocument = [];
    var $tree = $('#treeviewFolderMoveOption');
    var nodeselected = $tree.tree('getSelectedNode');
    var nodeselectedname = "";
    if (nodeselected.id != null && nodeselected.id != "" && typeof (nodeselected.id) != "undefined") {
        var selectednodeid = nodeselected.id;
        nodeselectedname = (nodeselected.name != null && nodeselected.name != "") ? nodeselected.name.split('/').pop() : nodeselected.name;
        var fixedvaluetopass = $("#hdnContractDocumentsUrlFixed").text();
        fixedvaluetopass = ((fixedvaluetopass.substr(fixedvaluetopass.length - 1)) != "/") ? fixedvaluetopass : fixedvaluetopass.substr(0, fixedvaluetopass.length - 1);
        var splturl = (selectednodeid.indexOf(fixedvaluetopass) > -1) ? selectednodeid.split(fixedvaluetopass).pop() : selectednodeid;
        var fixedurl = $("#hdnContractDocumentsUrlFixed").text();
        fixedurl = (fixedurl.charAt(0) != '/') ? '/' + fixedurl : fixedurl;
        fixedurl = ((fixedurl.substr(fixedurl.length - 1)) != "/") ? fixedurl + "/" : fixedurl;
        //finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        splturl = (splturl.charAt(0) == '/') ? splturl.substr(1) : splturl;
        splturl = ((splturl.substr(splturl.length - 1)) != "/") ? splturl + "/" : splturl;
        splturl = fixedurl + splturl;
        var DocumentSelectedName = [];
        $('input[type=checkbox][name="MultipleDocuments"]:checked').each(function () {
            var DocumentID = this.id;
            var isChecked = this.checked;
            var DocumentName = $(this).parent("li").find("#DocumentName").text();
            var ReviewWorkflow = $(this).parent("li").find("#ReviewWorkflow").text();

            if (isChecked) {
                if (DocumentSelectedName.indexOf(DocumentName) == -1 && DocumentName != null && DocumentName != "") {
                    if ($("#hdntreeviewFolderMove").val() == 'move') {
                        DocumentSelectedName.push(DocumentName);
                    }
                    else {
                        var FinalDocumetName = DocumentName.substr(0, DocumentName.lastIndexOf("."));
                        FinalDocumetName += "_Copy." + DocumentName.split('.').pop();
                        //if ($("#hdntreeviewFolderMove").val() == 'move') {
                        DocumentSelectedName.push(FinalDocumetName);
                        //}
                        //alert(URL.substring(0, URL.lastIndexOf("/") + 1));
                    }
                }
            }
        });
        //manoj
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + getParameterByName("ContractID") + '&foldeurl=' + splturl,
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (data) {
                if (data != null) {
                    $(data).each(function (i, itemdocument) {
                        if (itemdocument.DocumentName != null && itemdocument.DocumentName != "") {
                            if (DocumentSelectedName.indexOf(itemdocument.DocumentName) > -1) {
                                ExistingDocument.push(itemdocument.DocumentName);
                            }
                        }
                    });
                    if (ExistingDocument.length == 0) {
                        FileToMove(selectednodeid);
                    } else {
                        var ExitstFinalDocumentList = "";
                        $(ExistingDocument).each(function (i, itemexdoc) {
                            if (ExitstFinalDocumentList == '') {
                                ExitstFinalDocumentList = itemexdoc
                            }
                            else {
                                ExitstFinalDocumentList += "," + itemexdoc;
                            }
                        });
                        var nlast = ExitstFinalDocumentList.lastIndexOf(",");
                        if (nlast > -1) {
                            ExitstFinalDocumentList = ExitstFinalDocumentList.substr(0, nlast) + ' and ' + ExitstFinalDocumentList.substr(nlast + 1);
                        }
                        if (ExitstFinalDocumentList != "") {
                            swal("", '<span style=\"font-weight:700\">' + ExitstFinalDocumentList + "</span> files already exist in '<span style=\"font-weight:700\">" + nodeselectedname + "</span>'");
                            $("#loadingPage").fadeOut();
                        }
                    }
                } else {
                    FileToMove(selectednodeid);
                }

            },
            error:
                function (data) {
                    FileToMove(selectednodeid);
                }
        });
    }
    else {
        swal("", "Please select any folder.");
        $("#loadingPage").fadeOut();
    }
}
function treeviewFolder_Create(parentFolderName) {
    $("#loadingPage").fadeIn();
    $('#tbodytreeviewFolder').empty();
    var spiltdsf = parentFolderName.split("/");
    /* Document treeview Popup Start */
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/treeview?documentname=' + spiltdsf[1],
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            recursiveIterationDocuments(data)
            $("#tbodytreeviewFolder").append(articleDocuments);
            if (articleDocuments == "") {
                $("#tbodytreeviewFolder").append("<tr><td><p class='f_p-error'>No Folder Structure Found.</p></td></tr>");
            }
            articleDocuments = "";
            $("#example-basic-treeviewFolder").treetable({ expandable: true, initialState: "expanded" });
            $("#loadingPage").fadeOut();
            $("#browse_treeviewFolder").dialog("option", "title", "Select Folder");
            $("#browse_treeviewFolder").dialog("open");
        },
        error:
        function (data) {
            if (articleDocuments == "") {
                $("#tbodytreeviewFolder").html("<tr><td><p class='f_p-error'>No Folder Structure Found.</p></td></tr>");
                $("#loadingPage").fadeOut();
                $("#browse_treeviewFolder").dialog("option", "title", "Select Folder");
                $("#browse_treeviewFolder").dialog("open");
            }
        }
    });
    /* Document treeview Popup End */
}
function recursiveIterationDocuments(object) {
    for (var i = 0; i < object.length; i++) {
        var item = object[i];
        var additional = "";
        additional = '<span style="color:#3487ce; cursor:pointer;" onclick="javascript:folderselected(this,\'' + item.DocumentName + '\')">' + item.DocumentName + '</span>'
        if (item.ChildrenData.length == 0) {
            articleDocuments += '<tr data-tt-id="tre-' + item.RowKey + '" class="branch expanded">';
            articleDocuments += '<td class="treeHead"><span id="ParentFolderID" style="display:none;">' + item.ParentFolderID + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/folder.png" /><small>' + additional + '</small></td></tr>';
        } else {
            articleDocuments += '<tr data-tt-id="tre-' + item.RowKey + '" data-tt-parent-id="tre-' + item.ParentFolderID + '" class="branch collapsed" style="display: table-row;">';
            articleDocuments += '<td><span id="ParentFolderID" style="display:none;">' + item.ParentFolderID + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/folder.png" /><small>' + additional + '</small></td></tr>';
            if (item.ChildrenData.length != 0) {
                for (var j = 0; j < item.ChildrenData.length; j++) {
                    var itemchild = item.ChildrenData[j];
                    additional = '<span style="color:#3487ce; cursor:pointer;" onclick="javascript:folderselected(this,\'' + item.DocumentName + "/" + itemchild.DocumentName + '\')">' + itemchild.DocumentName + '</span>'
                    articleDocuments += '<tr data-tt-id="tre-' + itemchild.RowKey + '" data-tt-parent-id="tre-' + itemchild.ParentFolderID + '" class="branch collapsed" style="display: table-row;">';
                    articleDocuments += '<td><span id="ParentFolderID" style="display:none;">' + itemchild.ParentFolderID + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/folder.png" class="padding_left_65px" /><small>' + additional + '</small></td></tr>';
                }
            }
        }
    }
}

//manoj
function CreateFolder(parentFolderName) {
    $("#browseFolder").html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?documentlibrary=' + parentFolderName,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (folder) {
            try {
                $("#btnaddsubfolder").css("display", "");
                $("#browseFolder").html('<div id="treeviewFolderOption" class="demo-section"></div><input id="txtFolder" type="hidden" /><input id="txtFolderURL" type="hidden" />');
                $('#treeviewFolderOption').empty();
                $('#treeviewFolderOption').tree({
                    data: folder,
                    autoOpen: 0
                });
            } catch (ex) {
                //alert(ex);
            }
        },
        error:
            function (data) {
                //$("#btnaddsubfolder").css("display", "none");
                $("#browseFolder").html('No items found.');
            }
    });
}
//manoj

//function CreateFolder(parentFolderName) {
//    $('#treeviewFolderOption').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
//    var newurl = "";
//    newurl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructure?documentlibrary=' + parentFolderName
//    $.ajax({
//        url: newurl,
//        type: 'GET',
//        dataType: 'json',
//        'Content-Type': 'application/json',
//        cache: false,
//        headers: { 'eContracts-ApiKey': localStorage.APIKey },
//        success: function (folder) {
//            $('#treeviewFolderOption').empty();
//            for (var xyz = 0; xyz < folder.length; xyz++) {
//                var checking = folder[xyz].Folder;
//                var checking1 = checking.split("/");
//                folder[xyz].Folder = checking1[1];
//            }
//            var inline2 = new kendo.data.HierarchicalDataSource({
//                data: folder,
//                schema: {
//                    model: {
//                        children: "childrenData"
//                    }
//                }
//            });

//            var treeview = $("#treeviewFolderOption").kendoTreeView({
//                template: kendo.template($("#treeviewFolderOption-template").html()),

//                dataSource: inline2,
//                loadOnDemand: false,
//                schema: {
//                    model: {
//                        id: "RowKey",
//                        fields: {
//                            Folder: "Folder",
//                            FolderURL: "FolderURL"
//                        }
//                    }
//                },
//                select: function (e) {
//                    e.preventDefault();
//                    var tree = $('#treeviewFolderOption').data('kendoTreeView');
//                    var dataItem = tree.dataItem(e.node);
//                    $('#txtFolderName').val(dataItem.FolderURL);

//                    var strFolderUrl = dataItem.FolderURL + "/";
//                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
//                    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
//                        return (n.RowKey == "14" && n.Status == "ON");
//                    });
//                    if (vDocLibFeat.length > 0) {
//                        $('#lblFolderUrl').text('/' + $('#hdContAreaDocLibName').val() + '/' + strFolderUrl.split('/' + $('#hdContAreaDocLibName').val() + '/')[1]);
//                    }
//                    else {
//                        $('#lblFolderUrl').text('/Contract Documents/' + strFolderUrl.split('/Contract Documents/')[1]);
//                    }
//                }
//            }).data("kendoTreeView");

//            treeview.expand(".k-item");
//        },
//        error:
//            function (data) {
//                $('#treeviewFolderOption').html('No items found.');
//            }
//    });
//}

function tabchange(object) {
    if (object.id == "tabTemplate") {

        if ($("#ddlDocumentTemplate option").length <= 1) {
            swal("", "No templates are assigned to business area.");
        }
        $('input[type="radio"][name="IsStandard"][value="Yes"]').prop('checked', true);
        $("#tblNewDocument").css('display', '');
        $("#tblExistingDocument").css('display', 'none');
        $("#tblExistingDocumentSearch").css('display', 'none');
        $("#tblExistingDocumentPaging").css('display', 'none');
        $("#tabTemplate").addClass('form-active');
        $("#tabUpload").removeClass('form-active');
        $("#tabExistingDocument").removeClass('form-active');
        $("#docContract").removeClass('validelement');
        $("#docContract").removeClass('validfilename');
        $("#ddlDocumentTemplate").addClass('validelement');
        $("#txtDocumentNameCreate").addClass('validelement');

        $("#trTemplate").css('display', '');
        $("#trTemplate1").css('display', '');
        $("#trDocumentType").css("display", "");
        $("#trFileUpload").css('display', 'none');
        $('input:checkbox[name=NotTaggedContract]').attr('checked', false);
        $("#hdnIsDocumentTag").text('');
        $("#formTitle").text('Create from Document Template');
        $("#divDoc1").css('display', '');
        $("#divDoc2").css('display', '');
        if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
            $("#dtValidFrom").val("");
            $("#dtValidTill").val("");
            if ($("#linkAddValidity").text() == "Track document expiration date") {
                $("#linkAddValidity").css('display', 'none');
            }
            else {
                $("#linkAddValidity").click();
                $("#linkAddValidity").css('display', 'none');
            }
        }
        else {
            $("#linkAddValidity").css('display', 'block');
        }
        $("#tabTemplate").addClass("document_active");
        $("#tabUpload").removeClass("document_active");
        $("#tabExistingDocument").removeClass("document_active");
        $("#btnDocAdd").html('<span class="ui-button-text">Create</span>')
        if ($("#ddlDocumentTemplate").val() != '0') {
            var selectedtemplatevalue = $("#ddlDocumentTemplate").val().split('~').pop();
            $("#ddlDocumentTypeCreate").find("option[value='" + selectedtemplatevalue + "']").prop("selected", true);
        } else {
            $("#ddlDocumentTypeCreate").find('option[value="0"]').prop("selected", true);
        }
    } else if (object.id == "tabUpload") {
        $('input[type="radio"][name="IsStandard"][value="No"]').prop('checked', true);

        $("#tblNewDocument").css('display', '');
        $("#tblExistingDocument").css('display', 'none');
        $("#tblExistingDocumentSearch").css('display', 'none');
        $("#tblExistingDocumentPaging").css('display', 'none');
        $("#tabUpload").addClass('form-active');
        $("#tabTemplate").removeClass('form-active');
        $("#tabExistingDocument").removeClass('form-active');
        $("#docContract").addClass('validelement');
        $("#docContract").addClass('validfilename');
        $("#ddlDocumentTemplate").removeClass('validelement');
        $("#txtDocumentNameCreate").removeClass('validelement');

        $("#trTemplate").css('display', 'none');
        $("#trTemplate1").css('display', 'none');
        $("#trDocumentType").css("display", "");
        $("#trFileUpload").css('display', '');
        $('input:checkbox[name=NotTaggedContract]').attr('checked', false);
        $("#hdnIsDocumentTag").text('');
        $("#tblContentControls").empty();
        $("#formTitle").text('Upload from Computer');
        $("#divDoc1").css('display', '');
        $("#divDoc2").css('display', '');
        if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
            $("#dtValidFrom").val("");
            $("#dtValidTill").val("");
            if ($("#linkAddValidity").text() == "Track document expiration date") {
                $("#linkAddValidity").css('display', 'none');
            }
            else {
                $("#linkAddValidity").click();
                $("#linkAddValidity").css('display', 'none');
            }
        }
        else {
            $("#linkAddValidity").css('display', 'block');
        }

        $("#tabUpload").addClass("document_active");
        $("#tabTemplate").removeClass("document_active");
        $("#tabExistingDocument").removeClass("document_active");
        $("#btnDocAdd").html('<span class="ui-button-text">Upload</span>')
    }
    else if (object.id == "tabExistingDocument") {
        $("#tblNewDocument").css('display', 'none');
        $("#tblExistingDocument").css('display', '');
        $("#tblExistingDocumentSearch").css('display', '');
        $("#tblExistingDocumentPaging").css('display', '');
        $("#hdnIsDocumentTag").text('Yes');
        $("#tabExistingDocument").addClass('form-active');
        $("#tabUpload").removeClass('form-active');
        $("#tabTemplate").removeClass('form-active');
        $("#tblContentControls").empty();
        $("#formTitle").text('Add from Office 365 Library');
        $("#divDoc1").css('display', 'none');
        $("#divDoc2").css('display', 'none');
        $("#formValidity").css('display', 'none');
        $("#formValidityForm").css('display', 'none');
        $("#linkAddValidity").css('display', 'none');

        $("#tabExistingDocument").addClass("document_active");
        $("#tabUpload").removeClass("document_active");
        $("#tabTemplate").removeClass("document_active");
        $("#btnDocAdd").html('<span class="ui-button-text">Add</span>')
    }

    $('#dtValidFrom').val("");
    $('#dtValidTill').val("");
    //*Harshitha
    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var milestoneReminder = defaultGlobalSettings.MilestoneReminders;
        var xmlDoc = $.parseXML(milestoneReminder);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "MilestoneNew").val(remSplit[0]);
            $("#txtReminder" + j + "MilestoneNew").val(remSplit[1]);
            j = j + 1;
        });
    }

    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var documentreminders = defaultGlobalSettings.DocumentReminders;
        var xmlDoc = $.parseXML(documentreminders);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "New").val(remSplit[0]);
            $("#txtReminder" + j + "New").val(remSplit[1]);
            j = j + 1;
        });
    }

}


//[Bug id - eO36327] [Signature: Clear link is not displayed when selecting internal user]
function ClearResetSignee() {
    $("#" + $("#hdUserEmail").val()).val('');
    $("#" + $("#hdUserName").val()).val('');
    $('input:radio[name=SigneeUser]').attr('checked', false);
}

function SelectedSignee() {
    var vSignee = $("input:radio[name=SigneeUser]:checked");
    var prevSignees = [];
    $('#tblInternalSignees tr td:first-child input').each(function () {
        if ($(this).val() != "")
            prevSignees.push($(this).val());
    });
    if (prevSignees.indexOf(vSignee.val()) > -1) {
        swal("", "Internal Signee already selected.");
    }
    else {
        $("#" + $("#hdUserEmail").val()).val(vSignee.attr('title'));
        $("#" + $("#hdUserName").val()).val(vSignee.val());
        $("#hdUserEmail").val('');
        $("#hdUserName").val('');
        $("#browseSigneeUser").dialog("close");
    }
}


var previousVal;
var previousID;
function ClickedOrder(obj) {
    previousVal = $(obj).val();
    previousID = $(obj).attr('id');
}

function SelectedOrder(obj) {
    var curVal = $(obj).val();
    var curID = $(obj).attr('id');
    $(".SigneeOrder").each(function (index, data) {
        var curVal2 = $(data).val();
        var curID2 = $(data).attr('id');
        if (curVal == curVal2 && previousID != curID2) {
            $(data).val(previousVal);
        }
    });
}

var previousDocVal;
var previousDocID;

function ClickedDocOrder(obj) {

    previousDocVal = $(obj).val();
    previousDocID = $(obj).attr('id');

}


function SelectedDocOrder(obj) {
    var curVal = $(obj).val();
    var curID = $(obj).attr('id');
    $(".DocOrder").each(function (index, data) {
        var curVal2 = $(data).val();
        var curID2 = $(data).attr('id');
        if (curVal == curVal2 && previousDocID != curID2) {
            $(data).val(previousDocVal);
        }
    });
    var docidAry = [];
    var docurlAry = [];
    docidAry = swap($("#hdDocumentID").val().split(';'), previousDocVal - 1, curVal - 1);
    $("#hdDocumentID").val(docidAry.join(";"));
    docurlAry = swap($("#hdDocumentURL").val().split('|'), previousDocVal - 1, curVal - 1);
    $("#hdDocumentURL").val(docurlAry.join("|"));
}

function swap(theArray, index1, index2) {
    var temp = theArray[index2];
    theArray[index2] = theArray[index1];
    theArray[index1] = temp;
    return theArray;
}

//Signature Signee

function SendForSignature() {
    var vValid = requiredValidator('sendForSignature', true);
    if ($("#hdDocumentID").val() == '') {
        vValid = false;
        swal({ html: true, title: '<i>Error</i>', text: '<b>Select document. </b>' });
    }

    if (vValid) {
        var emailvalue = "";
        arremail = [];
        $('#sendForSignature .validemail').each(function (i, item) {
            if (emailvalue == '') {
                emailvalue = item.value;
                if (emailvalue != "")
                    arremail.push(emailvalue.toLowerCase());
                emailvalue = '';
            }
        });
        recipientsArray = arremail.sort();
        reportRecipientsDuplicate = [];
        for (var j = 0; j < recipientsArray.length - 1; j++) {
            if (recipientsArray[j + 1] == recipientsArray[j]) {
                reportRecipientsDuplicate.push(recipientsArray[j]);
                if (reportRecipientsDuplicate.length > 0) {
                    vValid = false;
                }

            }
        }


        if (vValid && $("#hdDocumentID").val() != '') {
            $("#loadingPage").fadeIn();
            var contractForm = $("#frmSignees, #frmInternalSignees").serialize();

            var vAutoStatusChange = $("#chkAutoUpdateStatusSignDoc").is(':checked') ? 'Yes' : 'No';
            contractForm += "&SigneeMsg=" + encodeURIComponent($("#txtSigneeMsg").val());
            contractForm += "&Subject=" + encodeURIComponent($("#txtSubject").val());
            if (RightSignatureFlag) {
                contractForm += "&ExpIn=" + $("#ddltxtExpIn").val();
            }
            else {
                contractForm += "&ExpIn=" + $("#txtExpIn").val();
            }

            contractForm += "&DocumentURL=" + encodeURIComponent($("#hdDocumentURL").val());
            contractForm += "&AutoUpdateStatus=" + vAutoStatusChange;
            var ccUsers = $("#ddlCC").val();
            var internalSigneeUsers = '';
            var cc = '';
            var ins = '';
            $(ccUsers).each(function (i, item) {
                if (cc == '') {
                    cc = item;
                }
                else {
                    cc += "; " + item;
                }
            });

            contractForm += "&CC=" + cc;
            contractForm += "&InternalSignee=" + ins;
            contractForm += "&ConID=" + getParameterByName("ContractID");
            contractForm += "&IsContracts=Yes";
            var vDocID = $("#hdDocumentID").val();
            $("#inprocessSendForSignature").css('visibility', 'visible');


            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + vDocID,
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'UserName': localStorage.UserName },
                data: contractForm,
                cache: false,
                success: function (person) {
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "26" && n.Status == "ON");
                    });
                    if (vDocLibFeat != null) {
                        if (vDocLibFeat.length > 0) {
                            if (person.split('~')[0] == "AdvancedDocusign") {
                                window.open(person.split('~')[1]);
                            }
                        }
                    }

                    $("#sendForSignature").dialog("close");
                    ClearSignatureForm();
                    if (vAutoStatusChange == "Yes" && $("#hdIsPrimaryDoc").val() == "Yes") {
                        contractItem.Status = "Awaiting Signatures";
                        contractItem.IsFinalized = "Yes";
                        contractItem.FinalizedBy = localStorage.UserName;
                        ContractTopActions();
                        EnableAllMilestones(getParameterByName("ContractID"));
                    }


                    //manoj
                    if (documentview == null || documentview == "" || documentview == 'folder') {
                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                            var selectedfoldervalue = $('#showAll').find("a");
                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                            showfolderdocuments(parentdocumentdetails);
                        }
                        else {
                            BindDocument(vContractID);
                        }
                    } else {
                        DisplayDocument(documentview);
                    }
                    BindUpdatedContractDetails(vContractID);
                    //GetContractPendingAction(true, "BindPeoples");
                    $("#hdnFolderDocumentView").text('');
                    $("#hdnShowAllTextValue").html('');
                    PrvFolderselection = '';
                    //Bind primary and pined document based on new feature
                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                        CreateDocumentListPinView(vContractID);
                    }
                    //manoj
                    GetContractActivities(vContractID);
                    $("#loadingPage").fadeOut();
                },
                error: function (person) {
                    swal("", person.responseText);
                    $("#loadingPage").fadeOut();
                },
                complete: function () {
                    $("#inprocessSendForSignature").css('visibility', 'hidden');
                    $("#loadingPage").fadeOut();
                }
            });


        }
        else {
            $('#sendForSignature .validemail').each(function (i, item) {
                for (i = 0; i <= reportRecipientsDuplicate.length; i++) {
                    if (item.value.toLowerCase() == reportRecipientsDuplicate[i]) {
                        var id = item.id;
                        $('#' + id).addClass('error')
                    }
                }

            });
        }
    }
}

function getNameAndEmailSignDocument() {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + getParameterByName("ContractID") + '/contacts',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data != null) {
                var datalenght = data.length;
                var allInternal = ''
                var iex = 0;
                var iIn = 1;
                var totalFileCount = 0;
                var totalFileCountTaken = 0;
                var uiTakenCount = 2;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    totalFileCount++;
                    if (item.InternalOrExternal == "External") {
                        if (iex == 0 && totalFileCountTaken < 5) {
                            iex = 1;
                            totalFileCountTaken += 1;
                            $('#txtSignee1').val(item.ContactName);
                            $('#txtEmail1').val(item.EmailID);
                        }
                        else if (totalFileCountTaken < 5 && iex < 4) {
                            totalFileCountTaken += 1;
                            uiTakenCount += 1;
                            iex += 1;
                            var htmlFormatFile = '<tr id="trSignee' + totalFileCount + '">';
                            htmlFormatFile += '<td class="width40">';
                            htmlFormatFile += '<input id="txtSignee' + totalFileCount + '" value="' + item.ContactName + '" name="SigneeName' + totalFileCount + '" placeholder="Signee Name" title="Signee Name" type="text" class="f_inpt width90" value="' + item.ContactName + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width40">';
                            htmlFormatFile += '<input id="txtEmail' + totalFileCount + '" value="' + item.EmailID + '" name="SigneeEmail' + totalFileCount + '" placeholder="Signee Email" title="Signee Email" type="text" class="f_inpt width90 validelement validemail" value="' + item.EmailID + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width20">';
                            htmlFormatFile += '<select id="ddlSigneeOrder' + totalFileCount + '" name="SigneeOrder' + totalFileCount + '" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder">';
                            htmlFormatFile += '<option value="1">1</option>';
                            htmlFormatFile += '<option value="2">2</option>';
                            htmlFormatFile += '<option value="3">3</option>';
                            htmlFormatFile += '<option value="4">4</option>';
                            htmlFormatFile += '<option value="5">5</option>';
                            htmlFormatFile += '</select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td style="width:20px">';
                            htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteSignee(this)"><img src="../Content/Images/icon/delete.png" /></a>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';
                            $("#tblSignees").append(htmlFormatFile);
                            $("#ddlSigneeOrder" + totalFileCount).val(uiTakenCount);
                        }
                    }
                    else {
                        if ($("#tblSigneeUser").find('li').length > 0) {
                            $("#tblSigneeUser").find('li').each(function () {
                                var inputval = ($(this).find('input').length > 0 ? $(this).find('input').val() : "");
                                if (inputval != "" && inputval == item.ContactName) {
                                    if (iIn == 1 && totalFileCountTaken < 5 && iIn < 5) {
                                        iIn = 2;
                                        totalFileCountTaken += 1;
                                        $("#txtInternalSignee1").val(item.ContactName);
                                        $("#txtInternalEmail1").val(item.EmailID);
                                    }
                                    else if (totalFileCountTaken < 5 && iIn < 5) {
                                        AddInternalSignee();
                                        uiTakenCount += 1;
                                        totalFileCountTaken += 1;
                                        $("#txtInternalSignee" + iIn).val(item.ContactName);
                                        $("#txtInternalEmail" + iIn).val(item.EmailID);
                                        iIn += 1;
                                    }
                                }
                            })

                        }
                        else {
                            var GetAuthorizedsignatory = '';
                            if (contractItem != "" && contractItem.CompanyProfile != "" && contractItem.CompanyProfile != "" && contractItem.CompanyProfile != "undefined")
                                GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=' + getParameterByName("ContractID") + '&contractareaname=';
                            else
                                GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=&contractareaname=' + encodeURIComponent($("#lblContractArea").text());
                            $.ajax({
                                url: GetAuthorizedsignatory,
                                type: 'GET',
                                dataType: 'json',
                                'Content-Type': 'application/json',
                                cache: false,
                                async: false,
                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                success: function (data) {
                                    var v = $(data).length;
                                    var datalenght = data.length;
                                    for (var i = 0; i < datalenght; i++) {
                                        var itemin = data[i];
                                        var sRowKey = itemin.RowKey;
                                        var sUserName = itemin.UserName;
                                        var sEmail = itemin.EmailID;
                                        var nospaceUserName = sUserName.replace(/ /g, "_");
                                        var sUser = '<li>';
                                        sUser += '<input id="' + sEmail + '_' + nospaceUserName + '" title="' + sEmail + '" type="radio" name="SigneeUser" class="css-checkbox" value="' + sUserName + '" />';
                                        sUser += '<label for="' + sEmail + '_' + nospaceUserName + '" class="css-label">' + sUserName + '</label>';

                                        sUser += '</li>';
                                        $("#tblSigneeUser").append(sUser);
                                    }
                                    $("#tblSigneeUser").find('li').each(function () {
                                        var inputval = ($(this).find('input').length > 0 ? $(this).find('input').val() : "");
                                        if (inputval != "" && inputval == item.ContactName) {
                                            if (iIn == 1 && totalFileCountTaken < 5 && iIn < 5) {
                                                iIn = 2;
                                                totalFileCountTaken += 1;
                                                $("#txtInternalSignee1").val(item.ContactName);
                                                $("#txtInternalEmail1").val(item.EmailID);
                                            }
                                            else if (totalFileCountTaken < 5 && iIn < 5) {
                                                AddInternalSignee();
                                                uiTakenCount += 1;
                                                totalFileCountTaken += 1;
                                                $("#txtInternalSignee" + iIn).val(item.ContactName);
                                                $("#txtInternalEmail" + iIn).val(item.EmailID);
                                                iIn += 1;
                                            }
                                        }
                                    })
                                },
                                error:
                                    function (data) {

                                    }
                            });
                        }
                    }
                }
                if (uiTakenCount >= 5) {
                    $("#spAddSignee").css("display", "none");
                    $("#spAddInternalSignee").css("display", "none");
                }
                else {
                    $("#spAddSignee").css("display", "");
                    $("#spAddInternalSignee").css("display", "");
                }
            }
        },
        error: function () {
        },
        complete: function () {
            $("#loadingPage").fadeOut();
        }

    });
}

function AddSignee() {
    var vLastRow = $("#tblSignees tr:last").attr('id');
    var totalFileCount = "2";
    if (typeof vLastRow == "undefined") {
        totalFileCount = "2";
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trSignee", ""));
        totalFileCount += 1;
    }
    var vLastRowC = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
    var totalFileCountC = 2;
    if (typeof vLastRowC == "undefined") {
        totalFileCountC = 2;
    }
    else {

        totalFileCountC = vLastRowC;
    }
    if (totalFileCountC < 5) {
        var htmlFormatFile = '<tr id="trSignee' + totalFileCount + '">';
        htmlFormatFile += '<td class="width40">';
        htmlFormatFile += '<input id="txtSignee' + totalFileCount + '" maxlength="42" name="SigneeName' + totalFileCount + '" placeholder="Signee Name" title="Signee Signee" type="text" class="f_inpt width90" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width40">';
        htmlFormatFile += '<input id="txtEmail' + totalFileCount + '" maxlength="50" name="SigneeEmail' + totalFileCount + '" placeholder="Signee Email" title="Signee Email" type="text" class="f_inpt width90 validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width20">';
        htmlFormatFile += '<select id="ddlSigneeOrder' + totalFileCount + '" name="SigneeOrder' + totalFileCount + '" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder">';
        htmlFormatFile += '<option value="1" selected="selected">1</option>';
        htmlFormatFile += '<option value="2">2</option>';
        htmlFormatFile += '<option value="3">3</option>';
        htmlFormatFile += '<option value="4">4</option>';
        htmlFormatFile += '<option value="5">5</option>';
        htmlFormatFile += '</select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteSignee(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblSignees").append(htmlFormatFile);

        var rowCount = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
        $("#ddlSigneeOrder" + totalFileCount).val(rowCount);
        if (rowCount >= 5) {
            $("#spAddSignee").css("display", "none");
            $("#spAddInternalSignee").css("display", "none");
        }
        else {
            $("#spAddSignee").css("display", "");
            $("#spAddInternalSignee").css("display", "");
        }
    }
    else {
        $("#spAddSignee").css("display", "");
        $("#spAddInternalSignee").css("display", "");
    }
}

function DeleteSignee(n) {
    var vv = $(n.parentNode.parentNode).find('select');
    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $("#spAddSignee").css("display", "");
    $("#spAddInternalSignee").css("display", "");
    $(".SigneeOrder").each(function (index, data) {
        var curVal2 = parseInt($(data).val());
        if (curVal2 > curVal) {
            $(data).val(curVal2 - 1);
        }
    });
}

function AddInternalSignee() {
    var vLastRow = $("#tblInternalSignees tr:last").attr('id');
    var totalFileCount = "2";
    if (typeof vLastRow == "undefined") {
        totalFileCount = "2";
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trInternalSignee", ""));
        totalFileCount += 1;
    }
    var vLastRowC = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
    var totalFileCountC = 2;
    if (typeof vLastRowC == "undefined") {
        totalFileCountC = 2;
    }
    else {

        totalFileCountC = vLastRowC;
    }
    if (totalFileCountC < 5) {
        var htmlFormatFile = '<tr id="trInternalSignee' + totalFileCount + '">';
        htmlFormatFile += '<td class="width80">';
        htmlFormatFile += '<input id="txtInternalSignee' + totalFileCount + '" name="InternalSigneeName' + totalFileCount + '" readonly="readonly" placeholder="Signee Name" title="Signee" type="text" class="f_inpt width80"  readonly="readonly" />';
        htmlFormatFile += '<span class="right-float"><a href="javascript:void(0)" onclick="BrowseInternalSignee(\'txtInternalSignee' + totalFileCount + '\', \'txtInternalEmail' + totalFileCount + '\')" class="linkText">Browse</a></span>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="display:none;">';
        htmlFormatFile += '<input id="txtInternalEmail' + totalFileCount + '" name="InternalSigneeEmail' + totalFileCount + '" placeholder="Signee Email" title="Email" type="text" class="f_inpt width90 validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width20">';
        htmlFormatFile += '<select id="ddlInternalSigneeOrder' + totalFileCount + '" name="InternalSigneeOrder' + totalFileCount + '" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder validelement">';
        htmlFormatFile += '<option value="1" selected="selected">1</option>';
        htmlFormatFile += '<option value="2">2</option>';
        htmlFormatFile += '<option value="3">3</option>';
        htmlFormatFile += '<option value="4">4</option>';
        htmlFormatFile += '<option value="5">5</option>';
        htmlFormatFile += '</select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteInternalSignee(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblInternalSignees").append(htmlFormatFile);

        var rowCount = $("#tblSignees tr").length + $("#tblInternalSignees tr").length;
        $("#ddlInternalSigneeOrder" + totalFileCount).val(rowCount);
        if (rowCount >= 5) {
            $("#spAddSignee").css("display", "none");
            $("#spAddInternalSignee").css("display", "none");
        }
        else {
            $("#spAddSignee").css("display", "");
            $("#spAddInternalSignee").css("display", "");
        }
    }
    else {
        $("#spAddSignee").css("display", "");
        $("#spAddInternalSignee").css("display", "");
    }
}

function DeleteInternalSignee(n) {
    var vv = $(n.parentNode.parentNode).find('select');
    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $("#spAddSignee").css("display", "");
    $("#spAddInternalSignee").css("display", "");
    $(".SigneeOrder").each(function (index, data) {
        var curVal2 = parseInt($(data).val());
        if (curVal2 > curVal) {
            $(data).val(curVal2 - 1);
        }
    });
}

function BrowseInternalSignee(objName, objEmail) {

    $("#hdUserName").val(objName);
    $("#hdUserEmail").val(objEmail);
    var selectedID = $("#" + $("#hdUserEmail").val()).val();
    if ($("#tblSigneeUser li").length > 0) {
        $("#browseSigneeUser").dialog("option", "title", "Select Signee");
        if (selectedID != "") {
            var nospaceUserName = $("#" + $("#hdUserName").val()).val().replace(/ /g, "_");
            $('input:radio[name=SigneeUser][id="' + selectedID + '_' + nospaceUserName + '"]').attr('checked', 'checked');
        }
        else
            $('input:radio[name=SigneeUser]').attr('checked', false);
        $("#browseSigneeUser").dialog("open");
    } else {

        BindAuthorizedSignatory(vContractID, $("#lblContractArea").text());

    }
}


function BindAuthorizedSignatory(contractid, contractareaname) {
    $("#loadingPage").fadeIn();
    var GetAuthorizedsignatory = '';
    if (contractItem != "" && contractItem.CompanyProfile != "" && contractItem.CompanyProfile != "undefined")
        GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=' + contractid + '&contractareaname=';
    else
        GetAuthorizedsignatory = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/authorizedsignatory?contractid=&contractareaname=' + encodeURIComponent(contractareaname);

    $.ajax({
        url: GetAuthorizedsignatory,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var v = $(data).length;
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var sRowKey = item.RowKey;
                var sUserName = item.UserName;
                var sEmail = item.EmailID;
                var nospaceUserName = sUserName.replace(/ /g, "_");
                var sUser = '<li>';
                sUser += '<input id="' + sEmail + '_' + nospaceUserName + '" title="' + sEmail + '" type="radio" name="SigneeUser" class="css-checkbox" value="' + sUserName + '" />';
                sUser += '<label for="' + sEmail + '_' + nospaceUserName + '" class="css-label">' + sUserName + '</label>';

                sUser += '</li>';
                $("#tblSigneeUser").append(sUser);
            }
            $("#loadingPage").fadeOut();
            $("#browseSigneeUser").dialog("option", "title", "Select Signee");
            $("#browseSigneeUser").dialog("open");
        },
        error:
            function (data) {
                var sUser = '<li>';
                sUser += 'No items found.';
                sUser += '</li>';
                $("#tblSigneeUser").append(sUser);
                $("#loadingPage").fadeOut();
                $("#browseSigneeUser").dialog("option", "title", "Select Signee");
                $("#browseSigneeUser").dialog("open");
            }
    });
}

function ClearSignatureForm() {
    $("#hdDocumentID").val('');
    $("#hdDocumentURL").val('');
    $("#hdMarkAsFinal").val('');
    $("#txtSubject").val('');
    $("#txtSigneeMsg").val('');
    $("#txtExpIn").val('');
    $("#spAddSignee").css("display", "");
    $("#spAddInternalSignee").css("display", "");
    GetValuesAndAutoPopulate("ddlCC", "");
    $('#chkAutoUpdateStatusSignDoc').attr('checked', false);
    $('#tblSignees').empty();
    var vSignee = '<tr>';
    vSignee += '<td class="width40">';
    vSignee += '<input id="txtSignee1" name="SigneeName1" title="Signee" placeholder="Signee Name" type="text" class="f_inpt width90" />';
    vSignee += '</td>';
    vSignee += '<td class="width40">';
    vSignee += '<input id="txtEmail1" name="SigneeEmail1" title="Email" placeholder="Signee Email" type="text" class="f_inpt width90 validemail" />';
    vSignee += '</td>';
    vSignee += '<td class="width20">';
    vSignee += '<select id="ddlSigneeOrder1" name="SigneeOrder1" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder">';
    vSignee += '<option value="1" selected="selected">1</option>';
    vSignee += '<option value="2">2</option>';
    vSignee += '<option value="3">3</option>';
    vSignee += '<option value="4">4</option>';
    vSignee += '<option value="5">5</option>';
    vSignee += '</select>';
    vSignee += '</td>';
    vSignee += '<td style="width:20px"><img src="../Content/Images/icon/delete.png" style="visibility:hidden; width: 20px" /></td>';
    vSignee += '</tr>';
    $('#tblSignees').html(vSignee);
    $('#tblInternalSignees').empty();
    vSignee = '<tr>';
    vSignee += '<td class="width80">';
    vSignee += '<input id="txtInternalSignee1" name="InternalSigneeName1" placeholder="Signee Name" title="Signee" type="text" class="f_inpt width80"  readonly="readonly" />';
    vSignee += '<span class="right-float"><a href="javascript:void(0)" class="linkText" onclick="BrowseInternalSignee(\'txtInternalSignee1\', \'txtInternalEmail1\')">Browse</a></span>';
    vSignee += '</td>';
    vSignee += '<td style="display:none;">';
    vSignee += '<input id="txtInternalEmail1" name="InternalSigneeEmail1" placeholder="Signee Email" title="Email" type="text" class="f_inpt width90" />';
    vSignee += '</td>';
    vSignee += '<td class="width20">';
    vSignee += '<select id="ddlInternalSigneeOrder1" name="InternalSigneeOrder1" onclick="ClickedOrder(this);" onchange="SelectedOrder(this);" class="f_inpt width100 SigneeOrder validelement">';
    vSignee += '<option value="1">1</option>';
    vSignee += '<option value="2" selected="selected">2</option>';
    vSignee += '<option value="3">3</option>';
    vSignee += '<option value="4">4</option>';
    vSignee += '<option value="5">5</option>';
    vSignee += '</select>';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">';
    vSignee += '<img src="../Content/Images/icon/delete.png" style="visibility:hidden; width: 20px" />';
    vSignee += '</td>';
    vSignee += '</tr>';
    $("#tblInternalSignees").append(vSignee);
}

function AddShareDocument() {
    var vLastRow = $("#tblShareDocument tr:last").attr('id');
    var count = $("#tblShareDocument tr").length;
    var totalFileCount = 2;
    if (typeof vLastRow == "undefined") {
        totalFileCount = 2;
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trShareDocument", ""));
        totalFileCount = parseInt(totalFileCount) + 1;
    }
    if (count <= 9) {
        var htmlFormatFile = '<tr id="trShareDocument' + totalFileCount + '">';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtShareDocument' + totalFileCount + '" maxlength="42" name="ShareDocumentName' + totalFileCount + '" placeholder="Name" maxlength="50" title="Name" type="text" class="f_inpt width90 validelement" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtShareDocumentEmail' + totalFileCount + '" maxlength="50" name="ShareDocumentEmail' + totalFileCount + '" placeholder="Email ID" maxlength="100" title="Email Id" type="text" class="f_inpt width90 validelement validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareDocument(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblShareDocument").append(htmlFormatFile);
        if (count == 9) {
            $(".addmorelinks").hide();
        }
    }

}

function DeleteShareDocument(n) {
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $(".addmorelinks").show();
}
function ShareDocument() {
    var vValid = requiredValidator('shareDocument');
    if (vValid) {
        var emailvalue = "";
        arremail = [];
        var ExternalEmail = [];
        $('#shareDocument .validemail').each(function (i, item) {
            if (emailvalue == '') {
                emailvalue = item.value;
                if (emailvalue != "") {
                    arremail.push(emailvalue.toLowerCase());
                    ExternalEmail.push(emailvalue);
                }

                emailvalue = '';
            }
        });
        ExternalEmail = jQuery.unique(ExternalEmail);
        recipientsArray = arremail.sort();
        reportRecipientsDuplicate = [];
        for (var j = 0; j < recipientsArray.length - 1; j++) {
            if (recipientsArray[j + 1] == recipientsArray[j]) {
                reportRecipientsDuplicate.push(recipientsArray[j]);
                if (reportRecipientsDuplicate.length > 0) {
                    vValid = false;
                }
            }
        }
        //manoj
        //Internal/External User Mail Id Validation
        var notify = $("#ddlDocumentShareInternal").chosen().find("option:selected");
        var notyEmail = "";
        var InternalEmail = [];
        $(notify).each(function (i, item) {
            var email = $(item).attr("data-emailvalue");
            if (email != null && email.trim() != "") {
                InternalEmail.push(email.toLowerCase());
                var name = item.text;
                notyEmail += name + "~" + email.trim() + ";";
            }
        });
        var commonEmail = $.grep(ExternalEmail, function (element) {
            return $.inArray(element.toLowerCase(), InternalEmail) !== -1;
        });
        //manoj

        if (vValid && commonEmail.length == 0) {
            $("#loadingPage").fadeIn();
            var vAutoStatusChange = $("#chkAutoUpdateStatusShareDoc").is(':checked') ? 'Yes' : 'No';
            var contractForm = $("#frmShareDocument").serialize();
            contractForm += "&SendBy=" + localStorage.UserName;
            contractForm += "&Notes=" + encodeURIComponent($("#txtShareNotes").val());
            contractForm += "&ExpIn=" + $("#txtShareExpIn").val();
            contractForm += "&AllowComment=" + 'Yes';
            contractForm += "&AllowDownload=" + 'Yes';
            contractForm += "&AllowUpload=" + 'Yes';
            contractForm += "&AutoUpdateStatus=" + vAutoStatusChange;
            var notify = $("#ddlDocumentShareInternal").chosen().find("option:selected");
            var notyEmail = "";

            $(notify).each(function (i, item) {
                var email = $(item).attr("data-emailvalue");
                if (email != null && email.trim() != "") {

                    var name = item.text;
                    notyEmail += name + "~" + email.trim() + ";";
                }
            });

            contractForm += "&InternalUsers=" + notyEmail;
            if ($("#chkDisclose").is(':checked')) {
                contractForm += "&Disclose=Yes";
            } else {
                contractForm += "&Disclose=No";
            }
            var vDocID = $("#hdDocumentID").val();
            //$("#inprocessShareDocument").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/Share?documentid=' + vDocID,
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: contractForm,
                cache: false,
                success: function (person) {
                    $("#shareDocument").dialog("close");
                    $("#loadingPage").fadeOut();
                    if ((vAutoStatusChange == "Yes" && $("#hdIsPrimaryDoc").val() == "Yes") && contractItem.IsFinalized != "Yes") {
                        contractItem.Status = "In Negotiation";
                    }
                    ContractTopActions();
                    //manoj
                    if (documentview == null || documentview == "" || documentview == 'folder') {
                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                            var selectedfoldervalue = $('#showAll').find("a");
                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                            showfolderdocuments(parentdocumentdetails);
                        }
                        else {
                            BindDocument(vContractID);
                        }
                    } else {
                        DisplayDocument(documentview);
                    }
                    //GetContractPendingAction(true, "BindPeoples");
                    $("#hdnFolderDocumentView").text('');
                    $("#hdnShowAllTextValue").html('');
                    PrvFolderselection = '';
                    //Bind primary and pined document based on new feature
                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                        CreateDocumentListPinView(vContractID);
                    }
                    //manoj
                    ClearShareForm();
                    GetContractActivities(vContractID);
                },
                error: function (person) {
                    $("#loadingPage").fadeOut();
                },
                complete: function () {
                    //$("#inprocessShareDocument").css('visibility', 'hidden');
                }
            });
        }
        else {
            if (commonEmail.length > 0) {
                swal("", commonEmail.toString().trim() + " are same with internal user.");
            }
            $('#shareDocument .validemail').each(function (i, item) {
                for (i = 0; i <= reportRecipientsDuplicate.length; i++) {
                    if (item.value.toLowerCase() == reportRecipientsDuplicate[i]) {
                        var id = item.id;
                        $('#' + id).addClass('error')
                    }
                }

            });
        }
    }
}

function ClearShareForm() {
    $("#hdDocumentID").val('');
    $("#txtShareNotes").val('');
    //$("#txtShareExpIn").val('3');
    $("#txtShareExpIn").val('');
    $('#tblShareDocument').empty();
    $('#tblShareDocument').empty();
    GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
    $('#chkAutoUpdateStatusShareDoc').attr('checked', false);
    if (contractItem.IsFinalized == 'Yes') {
        $("#trAutoUpdateStatusShareDoc").css('display', 'none');
    } else {
        $("#trAutoUpdateStatusShareDoc").css('display', 'none');
    }
    $('#chkDisclose').attr('checked', false);
    var vSignee = '<tr>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareDocument1" name="ShareDocumentName1" maxlength="42" title="Name" placeholder="Name" type="text" class="f_inpt width90 validelement" />';
    vSignee += '</td>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareDocumentEmail1" name="ShareDocumentEmail1" maxlength="50" title="Email ID" placeholder="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">&nbsp;</td>';
    vSignee += '</tr>';
    $('#tblShareDocument').html(vSignee);
}


//*harshitha
function SendCopy() {
    var vValid = requiredValidator('sendCopyPopUp');
    if (vValid) {

        var emailvalue = "";
        arremail = [];
        $('#sendCopyPopUp .validemail').each(function (i, item) {
            if (emailvalue == '') {
                emailvalue = item.value;
                if (emailvalue != "")
                    arremail.push(emailvalue.toLowerCase());
                emailvalue = '';
            }

        });

        recipientsArray = arremail.sort();
        reportRecipientsDuplicate = [];
        for (var j = 0; j < recipientsArray.length - 1; j++) {
            if (recipientsArray[j + 1] == recipientsArray[j]) {
                reportRecipientsDuplicate.push(recipientsArray[j]);
                if (reportRecipientsDuplicate.length > 0) {
                    vValid = false;
                }

            }
        }
        if (vValid) {
            $("#loadingPage").fadeIn();
            var nicInstance = nicEditors.findEditor('txtSendCopyNotes');
            var vcommentText = CleanWordFormatFromHTML(nicInstance.getContent());
            if (vcommentText.length <= 26500) {
                vcommentText = encodeURIComponent(vcommentText);
                var contractForm = $("#frmSendCopy").serialize();


                contractForm += "&SendBy=" + localStorage.UserName;
                contractForm += "&Notes=" + vcommentText;
                var vDocID = $("#ddlDocumentList").val();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/SendCopy?documentid=' + vDocID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                    data: contractForm,
                    cache: false,
                    success: function (person) {
                        swal("", "Copy Sent.");
                        $("#sendCopyPopUp").dialog("close");
                        $("#loadingPage").fadeOut();
                        ClearSendCopyForm();
                    },
                    error: function (person) {
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {

                    }
                });
            }
            else {
                $("#loadingPage").fadeOut();
                swal("", "Note can not exceed 26500 characters");
            }
        }
        else {
            $('#sendCopyPopUp .validemail').each(function (i, item) {
                for (i = 0; i <= reportRecipientsDuplicate.length; i++) {
                    if (item.value.toLowerCase() == reportRecipientsDuplicate[i]) {
                        var id = item.id;
                        $('#' + id).addClass('error')
                    }
                }

            });
        }
    }
}
function AddSendCopy() {
    var vLastRow = $("#tblSendCopy tr:last").attr('id');
    var totalFileCount = 2;
    if (typeof vLastRow == "undefined") {
        totalFileCount = 2;
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trSendCopy", ""));
        totalFileCount = parseInt(totalFileCount) + 1;
    }
    var count = $("#tblSendCopy tr").length;

    if (count <= 10) {

        var htmlFormatFile = '<tr id="trSendCopy' + totalFileCount + '">';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtSendCopy' + totalFileCount + '" maxlength="42" name="SendCopyName' + totalFileCount + '" placeholder="Name" title="Name" type="text" class="f_inpt width90 validelement" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtSendCopyEmail' + totalFileCount + '" maxlength="50" name="SendCopyEmail' + totalFileCount + '" placeholder="Email ID" title="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareContract(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblSendCopy").append(htmlFormatFile);
        if (count == 10) {
            $(".addmorelinks").hide();
        }

    }

}

function ClearSendCopyForm() {
    var nicInstance = nicEditors.findEditor('txtSendCopyNotes');
    nicInstance.setContent('');
    NicEditorPasteEvent();
    $("#ddlDocumentList").val('').trigger('chosen:updated');
    $('#tblSendCopy').empty();
    var vSignee = '<tr>';
    vSignee += '<td>';
    vSignee += '<input id="txtSendCopy1" name="SendCopyName1" title="Name" placeholder="Name" type="text" class="f_inpt width90 validelement" />';
    vSignee += '</td>';
    vSignee += '<td>';
    vSignee += '<input id="txtSendCopyEmail1" name="SendCopyEmail1" title="Email ID" placeholder="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">&nbsp;</td>';
    vSignee += '</tr>';
    $('#tblSendCopy').html(vSignee);
}


function BindDocumentTypeandTemplate() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/templatedocuments',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (templates) {
            $("#ddlReplaceTemplate").empty();
            $("#ddlReplaceTemplate").append("<option value='0'>--Select--</option>");
            $("#ddlDocumentTemplate").html("<option value='0'>--Select--</option>");
            var datalenght = templates.length;
            hashtable = {};
            for (var i = 0; i < datalenght; i++) {
                var item = templates[i];
                if (thisContractAreaSettings.DocumentTemplates.split(';').indexOf(item.TemplateName) > -1) {
                    $("#ddlReplaceTemplate").append("<option value='" + item.TemplateName + "~" + item.DocumentType + "'>" + item.TemplateName + "</option>");
                    $("#ddlDocumentTemplate").append("<option value='" + item.TemplateName + "~" + item.DocumentType + "'>" + item.TemplateName + "</option>");
                    hashtable[item.TemplateName.replace(/ /g, '')] = item.Description;
                }
            }
        }
    });

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documenttypes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $("#ddlDocumentType").html("<option value='0'>--Select--</option>");
            $("#ddlDocumentTypeCreate").html("<option value='0'>--Select--</option>");
            var datalenght = documenttypes.length;
            for (var i = 0; i < datalenght; i++) {
                var item = documenttypes[i];
                if (typeof thisContractAreaSettings === 'undefined') {
                    $("#ddlDocumentType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                    $("#ddlDocumentTypeCreate").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                } else {
                    if (thisContractAreaSettings.DocumentTypes.split(';').indexOf(item.TypeName) > -1) {
                        $("#ddlDocumentType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                        $("#ddlDocumentTypeCreate").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                    }
                }
            }
            $("#ddlDocumentTypeCreate option[value='Primary Agreement']").remove();
            $("#ddlDocumentType option[value='Primary Agreement']").remove();
            //if (typeof thisContractAreaSettings === 'undefined') {
            //    $("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
            //}
            if ($("#ddlDocumentTypeCreate option[value='Others']").length == 0) {
                $("#ddlDocumentType").append("<option value='Others'>Others</option>");
                $("#ddlDocumentTypeCreate").append("<option value='Others'>Others</option>");
            }

            //if ($("#ddlDocumentTypeCreate option[value='Primary Agreement']").length > 0) {
            //    $("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
            //}


            //if ($("#ddlDocumentTypeCreate option[value='Primary Agreement']").length > 0) {
            //    $("#ddlDocumentTypeCreate").find('option[value="Primary Agreement"]').prop("selected", true);
            //}

        },
        error:
            function (data) {
                $("#ddlDocumentType").html("<option value='0'>--Select--</option>");
                $("#ddlDocumentTypeCreate").html("<option value='0'>--Select--</option>");
                $("#ddlDocumentType").append("<option value='Others'>Others</option>");
                $("#ddlDocumentTypeCreate").append("<option value='Others'>Others</option>");
            }
    });
}

function getcontractareasettings(contractareaname) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=' + encodeURIComponent(contractareaname),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            thisContractAreaSettings = data;
            //if (!(thisContractAreaSettings.DocumentTypes.indexOf("Primary Agreement") > -1)) {
            //    thisContractAreaSettings.DocumentTypes = thisContractAreaSettings.DocumentTypes + ";Primary Agreement";
            //}
            BindContractTypes()

            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "14" && n.Status == "ON");
            });
            if (vDocLibFeat.length > 0) {
                if (data.DocLibName != '')
                    $('#hdContAreaDocLibName').val(data.DocLibName);
                else
                    $('#hdContAreaDocLibName').val('Contract Documents');
            }
            else {
                $('#hdContAreaDocLibName').val('Contract Documents');
            }
            if (contractItem.AmendmentDocumentsUrl != "") {
                $('#lblFolderUrlAmend').text(contractItem.AmendmentDocumentsUrl)
                $('#txtNewFolderNameAmend').css('display', 'none');
                $('#txtNewFolderNameAmend').removeClass('validelement');
            } else {
                if (contractItem.ContractDocumentsUrl == "") {
                    $('#lblFolderUrlAmend').text("/" + $('#hdContAreaDocLibName').val() + "/" + contractItem.ContractTitle.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim() + "/");
                    $('#txtNewFolderNameAmend').val("Amendments");
                } else {
                    if ((contractItem.ContractDocumentsUrl.charAt(contractItem.ContractDocumentsUrl.length - 1)) != "/") {
                        $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl + "/");
                    } else {
                        $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl);
                    }
                    $('#txtNewFolderNameAmend').val("Amendments");
                }
                $('#txtNewFolderNameAmend').addClass('validelement');
            }

            BindDocumentTypeandTemplate();
        },
        error: function (data) {
            var vv = '';
        }
    });
}

function getNameAndEmailShareDocument() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + getParameterByName("ContractID") + '/contacts',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data != null) {
                var allInternal = '';
                var datalenght = data.length;
                var totalFileCount = 0;
                var iex = 0;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];

                    totalFileCount++;
                    if (item.InternalOrExternal == "External") {
                        if (iex == 0) {
                            iex = 1;
                            $('#txtShareDocument1').val(item.ContactName);
                            $('#txtShareDocumentEmail1').val(item.EmailID);
                        }
                        else {
                            var htmlFormatFile = '<tr id="trShareDocument' + totalFileCount + '">';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareDocument' + totalFileCount + '" value="' + item.ContactName + '" maxlength="42" name="ShareDocumentName' + totalFileCount + '" placeholder="Name" title="Name" type="text" class="f_inpt width90" value="' + item.ContactName + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareDocumentEmail' + totalFileCount + '" value="' + item.EmailID + '" maxlength="50" name="ShareDocumentEmail' + totalFileCount + '" placeholder="Email ID" title="Email ID" type="text" class="f_inpt width90 validelement validemail" value="' + item.EmailID + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td style="width:20px">';
                            htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareDocument(this)"><img src="../Content/Images/icon/delete.png" /></a>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';
                            $("#tblShareDocument").append(htmlFormatFile);
                        }

                    }
                    else {
                        allInternal += item.ContactName + ";";
                    }
                }
                GetTextAndAutoPopulateNotHidden("ddlDocumentShareInternal", allInternal);
            }
        },
        error: function () {
        }

    });
}

function ShowMoreDocuments() {
    $('.ShowMoreDocuments').css("display", "");
    $('#ShowMoreDocuments').css("display", "none");
    $('#ShowLessDocuments').css("display", "");
}

function ShowLessDocuments() {
    $('.ShowMoreDocuments').css("display", "none");
    $('#ShowMoreDocuments').css("display", "");
    $('#ShowLessDocuments').css("display", "none");
}

function ShowMorePinDocuments() {
    $('.ShowMorePinDocuments').css("display", "");
    $('#ShowMorePinDocuments').css("display", "none");
    $('#ShowLessPinDocuments').css("display", "");
}

function ShowLessPinDocuments() {
    $('.ShowMorePinDocuments').css("display", "none");
    $('#ShowMorePinDocuments').css("display", "");
    $('#ShowLessPinDocuments').css("display", "none");
}

function replacedocument() {
    var IsFormValid = false;
    var duplicatedoc = true;
    var confirmreplaceext = false;
    var extdifferent = false;
    var vPreviousDocumentExtension = $('#lblDocumentExtension').val();
    var vrad_Replace = $('input[type="radio"][name=rad_Replace]:checked').val();
    if (vrad_Replace == 'Computer') {
        if (vrad_Replace == 'Computer' && requiredValidator("trFileUploadBrowse") && requiredValidator("trFileUploadBrowse1")) {
            IsFormValid = true;
        }
    }
    if (requiredValidator("tblReplaceDocument") || IsFormValid) {
        $("#loadingPage").fadeIn();
        var formData1 = new FormData();

        var opmlFile = $('#docToReplace')[0];
        var isUpload = true;
        var tblContentControls = null;
        var vrad_Replace = $('input[type="radio"][name=rad_Replace]:checked').val();
        var Documentnamerelace = "";
        if (vrad_Replace == 'Computer') {
            formData1.append("opmlFile", opmlFile.files[0]);
            var filename = "";
            if ($("#txtdocumentToReplaceName").val() != "") {
                filename = $("#txtdocumentToReplaceName").val();
            }
            else {
                filename = opmlFile.files[0].name;
                filename = filename.substring(0, filename.lastIndexOf('.'));
            }
            formData1.append("DocumentName", filename);
            Documentnamerelace = filename + "." + opmlFile.files[0].name.split('.').pop();

            var documentfileextension = Documentnamerelace.split('.').pop();

            if (vPreviousDocumentExtension != documentfileextension) {
                extdifferent = true;
                if (vPreviousDocumentExtension == 'doc' || vPreviousDocumentExtension == 'docx' || vPreviousDocumentExtension == 'DOC' || vPreviousDocumentExtension == 'DOCX') {
                    var getconformationupload = confirm("The file which is being uploaded is '." + documentfileextension + "', which is different from existing '." + vPreviousDocumentExtension + "'; Do you really want to upload? Older versions of the file cannot be restored.");
                    if (getconformationupload) {
                        confirmreplaceext = true;
                    }
                }
            }
        }
        else {
            formData1.append("TemplateName", $("#ddlReplaceTemplate").find('option:selected').text());
            isUpload = false;
            tblContentControls = $("#formtblReplaceControls").serializeArray();
            formData1.append("DocumentName", $('#docToReplaceName').val());
            Documentnamerelace = $('#docToReplaceName').val() + ".docx";
        }
        if (Documentnamerelace != "") {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + getParameterByName('ContractID') + '&docname=' + Documentnamerelace + '&docid=' + $('#hdnDocumentID').val(),
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                async: false,
                success: function (data) {
                    if (data.RowKey != $('#hdnDocumentID').val()) {
                        duplicatedoc = false;
                    }
                },
                error: function (data) {
                }
            });
        }

        formData1.append("documentaction", "replace");
        formData1.append("ContractID", getParameterByName('ContractID'));
        formData1.append("AccountID", localStorage.AccountID);
        formData1.append("DocumentID", $('#hdnDocumentID').val());
        formData1.append("ModifiedBy", localStorage.UserName);

        if (tblContentControls != null) {
            var tblContentControlslength = tblContentControls.length;
            for (var i = 0; i < tblContentControlslength; i++)
                formData1.append(tblContentControls[i].name, tblContentControls[i].value);
        }

        if (duplicatedoc) {
            if (isUpload == true && confirmreplaceext == false && extdifferent == true && (vPreviousDocumentExtension == 'doc' || vPreviousDocumentExtension == 'docx' || vPreviousDocumentExtension == 'DOC' || vPreviousDocumentExtension == 'DOCX')) { $("#loadingPage").fadeOut(); } else {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + DocumentID,
                    type: 'PUT',
                    data: formData1,
                    cache: false,
                    contentType: false,
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken },
                    processData: false,
                    success: function (document) {
                        if (isUpload) {
                            $("#loadingPage").fadeOut();
                            $('#divReplaceDocument').dialog("close");
                            if (!$.isEmptyObject(arrRelatedContracts)) {
                                CreateRelatedContracttemplate();
                            }
                            ClearReplaceDocFrom();
                            //manoj
                            if (documentview == null || documentview == "" || documentview == 'folder') {
                                if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                    var selectedfoldervalue = $('#showAll').find("a");
                                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                    var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                    showfolderdocuments(parentdocumentdetails);
                                }
                                else {
                                    BindDocument(vContractID);
                                }
                            } else {
                                DisplayDocument(documentview);
                            }
                            pendingStarted = false;
                            GetContractPendingAction(true, "BindPeoples");
                            $("#hdnFolderDocumentView").text('');
                            $("#hdnShowAllTextValue").html('');
                            PrvFolderselection = '';
                            //Bind primary and pined document based on new feature
                            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                CreateDocumentListPinView(vContractID);
                            }
                            //manoj
                            BindMilestone(vContractID);
                        }
                        else {
                            setTimeout(ReplaceDocReload, 10000);
                        }
                    },
                    error: function (document) {
                        swal(document.responseText);
                        $("#loadingPage").fadeOut();
                    }
                });
            }
        }
        else {
            $("#loadingPage").fadeOut();
            swal("", "Another document with this file name already exists.Please rename and try again");
        }
    }
}

function ReplaceDocReload() {
    $("#loadingPage").fadeOut();
    $('#divReplaceDocument').dialog("close");
    ClearReplaceDocFrom();
    //manoj
    if (documentview == null || documentview == "" || documentview == 'folder') {
        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
            var selectedfoldervalue = $('#showAll').find("a");
            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
            showfolderdocuments(parentdocumentdetails);
        }
        else {
            BindDocument(vContractID);
        }
    } else {
        DisplayDocument(documentview);
    }
    pendingStarted = false;
    GetContractPendingAction(true, "BindPeoples");
    $("#hdnFolderDocumentView").text('');
    $("#hdnShowAllTextValue").html('');
    PrvFolderselection = '';
    //Bind primary and pined document based on new feature
    if ($("#hdnnewdocumentfeature").text() == "Yes") {
        CreateDocumentListPinView(vContractID);
    }
    //manoj
    BindMilestone(vContractID);

}

$('input[name=rad_Replace]:radio').change(function () {
    var vrad_Replace = $('input[type="radio"][name=rad_Replace]:checked').val();
    $("#txtDocumentNameReplace").val('');
    $("#docToReplace").replaceWith($("#docToReplace").val('').clone(true));
    $("#ddlReplaceTemplate").val("0");
    $("#tblReplaceControls").css('display', 'none');
    $("#tblReplaceControls").empty();
    if (vrad_Replace == 'Computer') {
        $("#trFileUploadBrowse").css('display', '');
        $("#trFileUploadBrowse1").css('display', '');
        $("#trTemplateBrowse").css('display', 'none');
        $("#trTemplateBrowse1").css('display', 'none');
        $("#tblReplaceControls").css('display', 'none');
        $("#docToReplace").addClass('validelement');
        $("#docToReplace").addClass('validfilename');
        $("#ddlReplaceTemplate").removeClass('validelement');
    }
    else {
        $("#trFileUploadBrowse").css('display', 'none');
        $("#trFileUploadBrowse1").css('display', 'none');
        $("#trTemplateBrowse").css('display', '');
        $("#trTemplateBrowse1").css('display', '');
        $("#tblReplaceControls").css('display', '');
        $("#docToReplace").removeClass('validelement');
        $("#docToReplace").removeClass('validfilename');
        $("#ddlReplaceTemplate").addClass('validelement');
    }
});

function ReplaceFileUploadChange(fileInput) {
    var files = fileInput.files;
    for (var i = 0; i < files.length; i++) {
        var file = files[i];
        $("#txtDocumentNameReplace").val(file.name.split('.')[0]);
    }
}

function ReplaceTemplateChange(ddlDocumentTemplate) {
    //$("#dvreplacehelptextvalue").css('display', 'none');
    if (ddlDocumentTemplate.value != "0") {
        $("#txtDocumentNameReplace").val($("#ddlReplaceTemplate").find('option:selected').text().split('.')[0]);
        $("#lblReplaceTemplateDescription").text(hashtable[ddlDocumentTemplate.value.split('~')[0].replace(/ /g, '')]);
        var strContractID = getParameterByName("ContractID");
        if (strContractID != "0") {
            getContractData(strContractID, 'tblReplaceControls', $("#ddlReplaceTemplate").find('option:selected').text(), "dvreplacehelptextvalue");
        }
    } else {
        $("#txtDocumentNameReplace").val('');
        $('#tblReplaceControls').empty();
        $("#lblReplaceTemplateDescription").text("");
    }
}

function ClearReplaceDocFrom() {
    $('#hdnDocumentID').val("");
    $("#docToReplace").replaceWith($("#docToReplace").val('').clone(true));
    $("#txtDocumentNameReplace").val('');
    $("#ddlReplaceTemplate").val("0");
    $('input[type="radio"][name="rad_Replace"][value="Computer"]').prop('checked', true);
    $("#trFileUploadBrowse").css('display', '');
    $("#trFileUploadBrowse1").css('display', '');
    $("#trTemplateBrowse").css('display', 'none');
    $("#trTemplateBrowse1").css('display', 'none');
    $("#tblReplaceControls").css('display', 'none');
    $("#docToReplace").addClass('validelement');
    $("#docToReplace").addClass('validfilename');
    $("#ddlReplaceTemplate").removeClass('validelement');
    $("#tblReplaceControls").empty();
    $("#txtdocumentToReplaceName").empty();
    removeValidations('tblReplaceControls');
}



$("#btnNewFolder").click(function () {
    if ($(this).text().trim() == "Create Sub Folder") {
        $("#txtNewFolderName").css('display', '');
        $(this).text('Cancel');
    } else if ($(this).text().trim() == "Cancel") {
        $("#txtNewFolderName").css('display', 'none');
        $("#errormsg_txtNewFolderName").remove();
        $("#txtNewFolderName").removeClass("error");
        $("#txtNewFolderName").val('');
        $(this).text('Create Sub Folder');
    }

});

function setDocumentUrl() {
    var headerid = $("#lblContractTitle").text();
    headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
    var finalurl = "";
    //var newurl = "";
    //if ($('#hdnContractDocumentsUrl').text() != "") {
    //if (typeof ($('#hdnContractDocumentsUrl').text()) != "undefined"  && $("#hdnContractDocumentsUrl").text() != null && $("#hdnContractDocumentsUrl").text()!="") {

    //}
    finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl.trim() : finalurl.trim();
    finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
    //manoj
    if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text() != null && $('#showAll').text() != "") {
        $("#txtNewFolderName").val("");
        $("#txtNewFolderName").css('display', 'none');
        //var lastcharfind = finalurl;
        //lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
        //if (lastcharfind == "/") {
        $("#lblFolderUrl").text(finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/');
        // }
        //else {
        //$("#lblFolderUrl").text($("#hdnContractDocumentsUrl").text() + "/");
        // }
        $("#btnNewFolder").css('display', '');
        $("#lblFolderUrl").css('cursor', 'pointer');

        $("#lblFolderUrl").click(function () {
            CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
            $("#treeviewFolder").dialog("option", "title", "Select Folder");
            $("#treeviewFolder").dialog("open");
        });
        //$("#btnBrowseSubFolders").css('display', '');
        $("#btnBrowseSubFolders").click(function () {
            CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
            $("#treeviewFolder").dialog("option", "title", "Select Folder");
            $("#treeviewFolder").dialog("open");
        });
    } else {
        $("#btnBrowseSubFolders").css('display', 'none');
        $("#txtNewFolderName").css('display', '');
        $("#lblFolderUrl").text(finalurl);
        $("#lblFolderUrl").css('cursor', 'default');
        $("#btnNewFolder").css('display', 'none');
        $("#txtNewFolderName").val(headerid);
    }
    //manoj
    //if ($("#hdnContractDocumentsUrl").text() != "") {
    //    $("#txtNewFolderName").val("");
    //    $("#txtNewFolderName").css('display', 'none');
    //    var lastcharfind = $("#hdnContractDocumentsUrl").text();
    //    lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
    //    if (lastcharfind == "/") {
    //        $("#lblFolderUrl").text($("#hdnContractDocumentsUrl").text());
    //    }
    //    else {
    //        $("#lblFolderUrl").text($("#hdnContractDocumentsUrl").text() + "/");
    //    }
    //    $("#btnNewFolder").css('display', '');
    //    $("#lblFolderUrl").css('cursor', 'pointer');

    //    $("#lblFolderUrl").click(function () {
    //        CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
    //        $("#treeviewFolder").dialog("option", "title", "Select Folder");
    //        $("#treeviewFolder").dialog("open");
    //    });
    //    $("#btnBrowseSubFolders").css('display', '');
    //    $("#btnBrowseSubFolders").click(function () {
    //        CreateFolder($("#hdnContractDocumentsUrl").text().substring(1));
    //        $("#treeviewFolder").dialog("option", "title", "Select Folder");
    //        $("#treeviewFolder").dialog("open");
    //    });

    //} else {
    //    $("#btnBrowseSubFolders").css('display', 'none');
    //    $("#txtNewFolderName").css('display', '');
    //    $("#lblFolderUrl").text('/' + $('#hdContAreaDocLibName').val() + '/');
    //    $("#lblFolderUrl").css('cursor', 'default');
    //    $("#btnNewFolder").css('display', 'none');
    //    if (typeof $("#ddlContracts").find('option:selected').val() != 'undefined' && $("#ddlContracts").find('option:selected').val() != "0") {
    //        $("#txtNewFolderName").val($("#ddlContracts").find('option:selected').text().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
    //    }
    //    else {
    //        $("#txtNewFolderName").val($("#lblContractTitle").text().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim());
    //    }
    //}
    if (AllowSaveDraftInCloud == "on") {
        $("#AllowSaveDraftCloud").css('display', '');
        if (SaveDraftInCloud == "on") {
            $("#rad_CopyLibraryAndAzure").attr('checked', 'checked');
        }
        else {
            $("#rad_CopyLibrary").attr('checked', 'checked');
        }
    }
    else {
        $("#AllowSaveDraftCloud").css('display', 'none');
        $("#rad_CopyLibrary").attr('checked', 'checked');
    }
    if (typeof ($('#showAll').text().replace(/ \/ /g, '/')) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
        var n = $('#lblFolderUrl').text().split('/');
        var newurl = n[0] + "/" + n[1];
        $('#lblFolderUrl').text(newurl + "/" + $('#showAll').text().replace(/ \/ /g, '/') + '/')
    }
}

function onchangetemplate(ddlDocumentTemplate) {
    $('#spInProgress').css('display', '');
    //$("#dvhelptextvalue").css('display', 'none');
    if (ddlDocumentTemplate.value != "0") {
        $('#txtDocumentNameCreate').val($("#ddlDocumentTemplate").find('option:selected').text());
        var value = $("#ddlDocumentTemplate").find('option:selected').val();
        value = value.split("~");
        if (value[1] == "") {
            $("#ddlDocumentTypeCreate").val("--Select--");
        }
        else {
            $("#ddlDocumentTypeCreate").val(value[1]);
        }
        var strContractID = getParameterByName("ContractID");
        if (strContractID != "0") {
            getContractData(strContractID, 'tblContentControls', $("#ddlDocumentTemplate").find('option:selected').text(), "dvhelptextvalue")
            var selectedtemplatevalue = $("#ddlDocumentTemplate").val().split('~').pop();
            $("#lblTemplateDescription").text(hashtable[$("#ddlDocumentTemplate").val().split('~')[0].replace(/ /g, '')]);
        }
    } else {
        $("#ddlDocumentTypeCreate").find('option[value="0"]').prop("selected", true);
        $('#txtDocumentNameCreate').val("");
        $('#tblContentControls').empty();
        $('#lblTemplateDescription').text("");
        $('#spInProgress').css('display', 'none');
    }
}

function getContractData(ContractID, tblCtrl, strDocumentTemplate, helptextvalue) {
    $('#spInProgress').css('display', '');
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + ContractID,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (mainmetadataFields) {
            $('#spInProgress').css('display', 'none');
            var vMetadata = $(mainmetadataFields).find('Metadata');
            //manoj
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + encodeURIComponent($("#lblContractType").text()),
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                success: function (metadataFieldsvaluetocheck) {
                    var metadataFieldsvalue = metadataFieldsvaluetocheck;
                    //if (getParameterByName("Stage") == "pipeline" && getParameterByName("Duplicate") == "Yes") {
                    //metadataFieldsvalue = $.grep(metadataFieldsvaluetocheck, function (n, i) {
                    //        return (n.Newform == "Show" || n.Newform == "Required");
                    //    });
                    //}
                    //manoj
                    if (strDocumentTemplate != null) {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/template?templatename=' + strDocumentTemplate,
                            type: 'GET',
                            dataType: 'json',
                            'Content-Type': 'application/json',
                            cache: false,
                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                            success: function (metadataFields) {
                                var vTransactionTypeExist = '';
                                var vContractClassExist = '';
                                var datalenght = metadataFields.length;
                                if (datalenght > 0) {
                                    var vUserList = '';
                                    $("#" + tblCtrl).empty();
                                    $("#" + tblCtrl).append("<tr><td width='100%' colspan='2' valign='top'><div class='form_categoryhead'>Auto Populate Fields <span style='font-size: 12px !important;'><img title='Autopopulate fields are mapped to place holders (content controls) in the selected Document Template. The data for these controls is automatically populated and synched with the related Contract Record when the document is created and updated. Note: Document template controls should be mapped to corresponding metadata as part of template creation.' src='../Content/Images/help_training.png'></span></div></td></tr>");
                                    //var vControls = '';
                                    var bindvaluetotemp = false;
                                    var bindfromcontype = false;
                                    for (var i = 0; i < datalenght; i++) {
                                        var item = metadataFields[i];
                                        if ((item.FieldName == "ContractType") || (item.FieldType == "File Upload")) {
                                        }
                                        else if (item.FieldName == "TransactionType")
                                        { vTransactionTypeExist = 'Yes'; }
                                        else if (item.FieldName == "ContractClass")
                                        { vContractClassExist = 'Yes'; }
                                        else {
                                            bindvaluetotemp = false;
                                            bindfromcontype = true;
                                            var vAccFeatmetadataFieldsvalue = $.grep(metadataFieldsvalue, function (nmetadata, imetadata) {
                                                return (nmetadata.FieldName == item.FieldName);
                                            });
                                            if (vAccFeatmetadataFieldsvalue.length > 0) {
                                                bindvaluetotemp = true;
                                            } else if ($(vMetadata).find(item.FieldName).length > 0) {
                                                bindvaluetotemp = true;
                                                bindfromcontype = false;
                                            }
                                            //else {

                                            //}
                                            if (bindvaluetotemp) {
                                                //display the controls which is in contract type and is mapped in template
                                                if (vAccFeatmetadataFieldsvalue[0] != undefined) {
                                                    var item = vAccFeatmetadataFieldsvalue[0];
                                                    //manoj
                                                    //if (bindfromcontype) {
                                                    var bindvaluefromcontype = ($(vMetadata).find(item.FieldName).length > 0) ? true : false;
                                                    //}
                                                    //manoj
                                                    var vControls = '<tr>';
                                                    var vDate = "";
                                                    var onlydate = "";
                                                    var vUser = "";
                                                    var vNumber = "";
                                                    var vCurrency = "";
                                                    var vMultiDDL = "";
                                                    var vProject = false;
                                                    var vContractValue = false;
                                                    vControls += '<td class="f_head"><label style="word-break: break-all;">' + item.FieldDisplayName;

                                                    vControls += "<img class='helpimg' src='../Content/Images/help_training.png' title='" + item.HelpText + "'></label>"
                                                    //if (item.FieldHelp == "true") {
                                                    //vControls += "<img class='helpimg' src='../Content/Images/help_training.png' title='" + item.HelpText + "'></label>"
                                                    //} else {
                                                    //  vControls += '</label>';
                                                    //}
                                                    if (item.FieldType == "User") {
                                                        vControls += '</td><td class="f_list new-Doc-Multi width50">';
                                                    } else {
                                                        vControls += '</td><td class="f_list width50">';
                                                    }

                                                    if (item.FieldType == "Single Line Text") {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        vControls += (contractvaluetobind != "") ? "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' maxlength='100' value='" + contractvaluetobind + "' class='f_inpt width80' />" : "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' maxlength='100' class='f_inpt width80' />";
                                                        //manoj
                                                        //if ($(vMetadata).find(item.FieldName).text() != "") {
                                                        //    vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' maxlength='100' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80' />";
                                                        //} else {
                                                        //    vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' maxlength='100' class='f_inpt width80' />";
                                                        //}
                                                    }
                                                    else if (item.FieldType == "Multi Line Text") {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        vControls += (contractvaluetobind != "") ? "<textarea id='" + item.FieldName + "' name='" + item.FieldName + "' cols='40' rows='5' class='f_inpt width_91 height70'>" + contractvaluetobind + "</textarea>" : "<textarea id='" + item.FieldName + "' name='" + item.FieldName + "' cols='40' rows='5' class='f_inpt width80 height70'></textarea>";
                                                        //manoj
                                                        //if ($(vMetadata).find(item.FieldName).text() != "") {
                                                        //    vControls += "<textarea id='" + item.FieldName + "' name='" + item.FieldName + "' cols='40' rows='5' class='f_inpt width80 height70'>" + $(vMetadata).find(item.FieldName).text() + "</textarea>";
                                                        //} else {
                                                        //    vControls += "<textarea id='" + item.FieldName + "' name='" + item.FieldName + "' cols='40' rows='5' class='f_inpt width80 height70'></textarea>";
                                                        //}
                                                    }
                                                    else if (item.FieldType == "Hyperlink") {
                                                        //manoj
                                                        //for Hyperlink
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        vControls += (contractvaluetobind != "") ? "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' maxlength='2083' placeholder='http://www.' value='" + contractvaluetobind + "' class='f_inpt width80 validwebsite' />" : "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' placeholder='http://www.' maxlength='2083' class='f_inpt width80 validwebsite'/>";
                                                        vControls += '<a href="javascript:void(0)" class="linkText" title="' + item.FieldDisplayName + '" onclick="navigateurl(\'' + item.FieldName + '\')"> Navigate</a>';
                                                        //manoj
                                                        //if ($(vMetadata).find(item.FieldName).text() != "") {
                                                        //    vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' maxlength='100' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80' />";
                                                        //} else {
                                                        //    vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' maxlength='100' class='f_inpt width80' />";
                                                        //}
                                                        //for Hyperlink
                                                        //manoj
                                                    }
                                                    else if (item.FieldType == "Date") {
                                                        //var vv = $(vMetadata).find(item.FieldName).text();
                                                        //manoj
                                                        var vv = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        //manoj
                                                        onlydate = "";
                                                        if (vv != null) {
                                                            onlydate = vv.substring(0, vv.length - 19);
                                                        }

                                                        if (onlydate != "") {
                                                            if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                                                onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                                                            }
                                                            else {
                                                                onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                                                            }
                                                        }
                                                        vControls += "<input type='text' readonly id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width80 form-contro-Date-Document validdate fielddatecontrol " + item.FieldName + "'/>";


                                                        vDate = item.FieldName;

                                                    }
                                                    else if (item.FieldType == "Choice") {
                                                        vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91'>";
                                                        vControls += "<option value='0'>--Select--</option>";

                                                        var myArray = [];
                                                        myArray = item.ChoiceValues.split("\n")
                                                        //var myArraylength = myArray.length;
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        $(myArray).each(function (imyArray, itemmyArray) {
                                                            itemmyArray = itemmyArray.replace(/&amp;/g, "&");
                                                            vControls += (contractvaluetobind == itemmyArray) ? "<option value='" + itemmyArray + "' selected>" + itemmyArray + "</option>" : "<option value='" + itemmyArray + "'>" + itemmyArray + "</option>";
                                                        });
                                                        //manoj
                                                        //for (var k = 0; k < myArraylength; k = k + 1) {
                                                        //    myArray[k] = myArray[k].replace(/&amp;/g, "&");
                                                        //    do {
                                                        //        myArray[k] = myArray[k].replace("&amp;", "&");
                                                        //    } while (myArray[k].indexOf("&amp;") > -1)


                                                        //    if ($(vMetadata).find(item.FieldName).text() == myArray[k]) {
                                                        //        vControls += "<option value='" + myArray[k] + "' selected>" + myArray[k] + "</option>";
                                                        //    } else {
                                                        //        vControls += "<option value='" + myArray[k] + "'>" + myArray[k] + "</option>";
                                                        //    }
                                                        //}

                                                        vControls += '</select>';
                                                    }
                                                    else if (item.FieldType == "User") {
                                                        vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' multiple='multiple' class='f_inpt width_91 " + item.FieldName + "' title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"

                                                        vControls += "<option value='0'>--Select--</option>";
                                                        if (vUserList == '') {
                                                            vUserList = GetUserList();
                                                        }
                                                        vControls += vUserList;

                                                        vControls += '</select>';

                                                        vUser = item.FieldName;
                                                    } else if (item.FieldType == "Taxonomy") {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        vControls += (contractvaluetobind != "") ? "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' value='" + contractvaluetobind + "' class='f_inpt width80' readonly='readonly' type='text' />" : "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width80' readonly='readonly' type='text' />";
                                                        //manoj
                                                        //if ($(vMetadata).find(item.FieldName).text() != "") {
                                                        //    vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80' readonly='readonly' type='text' />";
                                                        //} else {
                                                        //    vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width80' readonly='readonly' type='text' />";
                                                        //}
                                                        if (item.FieldName != "BusinessArea")
                                                            vControls += "<span class='right-float'><a href='javascript:void(0)' class='linkText' onclick='ViewBusinessArea()'> Browse</a></span>";

                                                    }
                                                    else if (item.FieldType.indexOf("Browse") > -1) {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        if (item.Required == "true") {
                                                            vControls += (contractvaluetobind != "") ? "<input id=" + item.FieldName + " name=" + item.FieldName + " value='" + contractvaluetobind + "' title='" + item.FieldDisplayName + "' class='f_inpt width80 validelement' readonly='readonly' type='text' />" : "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80 validelement' readonly='readonly' type='text' />"
                                                        } else {
                                                            vControls += (contractvaluetobind != "") ? "<input id=" + item.FieldName + " name=" + item.FieldName + " value='" + contractvaluetobind + "' title='" + item.FieldDisplayName + "' class='f_inpt width80' readonly='readonly' type='text' />" : "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80' readonly='readonly' type='text' />"
                                                        }
                                                        //manoj
                                                        //if (item.Required == "true") {
                                                        //    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " value='" + $(vMetadata).find(item.FieldName).text() + "' title='" + item.FieldDisplayName + "' class='f_inpt width80 validelement' readonly='readonly' type='text' />";
                                                        //} else {
                                                        //    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " value='" + $(vMetadata).find(item.FieldName).text() + "' title='" + item.FieldDisplayName + "' class='f_inpt width80' readonly='readonly' type='text' />";
                                                        //}
                                                        if (item.FieldHelp == "true") {
                                                            vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                                                        }
                                                        vControls += "<a href='javascript:void(0)' class='linkText' id='" + item.FieldDisplayName + "' title='" + item.FieldName + "' onclick='ViewGeneric(this)'> Browse</a>";
                                                    }
                                                    else if (item.FieldType == "Lookup") {

                                                        if (item.FieldName == "Counterparty") {
                                                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                                                return (n.RowKey == "6" && n.Status == "ON");
                                                            });
                                                            var vreadonly = "";
                                                            var vbrowse = "";
                                                            if (vAccFeat.length > 0) {
                                                                vreadonly = "readonly='readonly'";
                                                                vbrowse = "<span class='right-float'><a href='javascript:void(0)' class='linkText' onclick='ViewCounterparty(\"" + item.FieldName + "\")'> Browse</a></span>";
                                                            }
                                                            //manoj
                                                            var recounterparty = new RegExp("'", 'g');
                                                            //var str = item.TypeName.replace(recounterparty, '');
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            if (contractvaluetobind == "Counterparty not in the list") {
                                                                $("#chkCounterpartyNotInList").attr("checked", "checked");
                                                                $("#tblCounterparties").attr('disabled', 'disabled');
                                                            }
                                                            vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' value='" + contractvaluetobind.replace(recounterparty, "&#39") + "' class='f_inpt width80' " + vreadonly + " type='text' />";

                                                            vControls += vbrowse;
                                                        }
                                                        else if (item.FieldName == "Project") {
                                                            vProject = true;
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            vControls += (item.Required == "true") ? "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + contractvaluetobind + "' class='f_inpt width80 valid' readonly='readonly' type='text' />" : "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + contractvaluetobind + "' class='f_inpt width80' readonly='readonly' type='text' />";
                                                            //manoj
                                                            //if (item.Required == "true") {
                                                            //    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80 valid' readonly='readonly' type='text' />";
                                                            //} else {
                                                            //    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80' readonly='readonly' type='text' />";
                                                            //}
                                                            if (item.FieldHelp == "true") {
                                                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                                                            }
                                                            vControls += "<a href='javascript:void(0)' class='linkText' onclick='ViewProjects()'> Browse</a>";
                                                            projectManager = $(vMetadata).find("ProjectManager").text()
                                                        }
                                                        else if (item.FieldName == "CompanyProfile") {
                                                            //vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91'>";
                                                            //vControls += "<option value='0'>--Select--</option>";
                                                            ////manoj
                                                            //var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            //vControls += getcompanyprofile(contractvaluetobind) + "</select>";
                                                            ////manoj
                                                            ////vControls += getcompanyprofile($(vMetadata).find(item.FieldName).text()) + "</select>";

                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";


                                                            var reLE = new RegExp("'", 'g');
                                                            var LE = contractvaluetobind.replace(reLE, "&#39");
                                                            if (LE != "undefined" && LE != "" && LE != null) {
                                                                var AryLE = LE.split(';');
                                                                var finalLE = '';
                                                                for (var j = 0; j < AryLE.length; j++) {
                                                                    if (finalLE == "")
                                                                        finalLE = AryLE[j].trim().replace(reLE, "&#39");
                                                                    else
                                                                        finalLE += "; " + AryLE[j].trim().replace(reLE, "&#39");
                                                                }

                                                            }
                                                            if (contractvaluetobind == "")
                                                                finalLE = "";

                                                            if (item.Required == "true") {
                                                                // vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " onchange='javascript:Removetextvalues()' class='f_inpt width80 validelement'>";
                                                                vControls += "<input id=" + item.FieldName + " value='" + finalLE + "' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80 validelement' readonly='readonly' type='text' />";
                                                            } else {
                                                                // vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " onchange='javascript:Removetextvalues()' class='f_inpt width80'>";
                                                                vControls += "<input id=" + item.FieldName + " value='" + finalLE + "' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' readonly='readonly' class='f_inpt width80' type='text' />";
                                                            }
                                                            //vControls += "<option value='0'>--Select--</option>";
                                                            vControls += "<span class='right-float'><a href='javascript:void(0)' class='linkText' onclick='ViewLegalEntity()'> Browse</a></span>";

                                                            // vControls += getcompanyprofile($(vMetadata).find(item.FieldName).text()) + "</select>";
                                                        }
                                                        else if (item.FieldName == "ContractPricingType") {
                                                            vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91'>";
                                                            vControls += "<option value='0'>--Select--</option>";
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            getcontractpricingtype(contractvaluetobind);
                                                            //manoj
                                                            //getcontractpricingtype($(vMetadata).find(item.FieldName).text());
                                                        }
                                                        else if (item.FieldName == "BillingFrequency") {
                                                            vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91'>";
                                                            vControls += "<option value='0'>--Select--</option>";
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            getbillingfrequency(contractvaluetobind);
                                                            //manoj
                                                            //getbillingfrequency($(vMetadata).find(item.FieldName).text());
                                                        }
                                                        else if (item.FieldName == "Status") {
                                                            vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91' readonly>";
                                                            vControls += "<option value='0'>--Select--</option>";
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            vControls += getStatus(contractvaluetobind) + "</select>";
                                                            //manoj
                                                            //vControls += getStatus($(vMetadata).find(item.FieldName).text()) + "</select>";
                                                        }
                                                        else if (item.FieldName == "OriginatingParty") {
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' value='" + contractvaluetobind + "' class='f_inpt width80' readonly='readonly' type='text' />";
                                                            var orgpttype = "";
                                                            if (bindvaluefromcontype) {
                                                                orgpttype = $(vMetadata).find("OriginatingPartyType").text();
                                                            }
                                                            $("#txtOriginatingPartyType").val(orgpttype);
                                                            if (orgpttype == "Counterparty") {
                                                                SelectCounterparties();
                                                            }
                                                            vControls += "<span class='right-float'><a href='javascript:void(0)' class='linkText' onclick='ViewOriginatingParty()'> Browse</a></span>";
                                                        }
                                                        else if (item.FieldName == "ContractCurrency") {

                                                        }
                                                        else if (item.FieldName == "Project") {
                                                        }
                                                        else if (item.FieldName == "PaymentType") {
                                                            vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91'>";
                                                            vControls += "<option value='0'>--Select--</option>";
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            vControls += getpaymenttype(contractvaluetobind) + "</select>";
                                                            //manoj
                                                            //vControls += getpaymenttype($(vMetadata).find(item.FieldName).text()) + "</select>";
                                                        }
                                                        else if (item.FieldName == "LicenceType") {
                                                            vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91'>";
                                                            vControls += "<option value='0'>--Select--</option>";
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            vControls += getlicencetype(contractvaluetobind) + "</select>";
                                                            //manoj
                                                            //vControls += getlicencetype($(vMetadata).find(item.FieldName).text()) + "</select>";
                                                        }
                                                        else if (item.FieldName == "RelatedContracts") {
                                                            //manoj
                                                            oldRelatedcontract = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            //oldRelatedcontract = $(vMetadata).find(item.FieldName).text();
                                                            //manoj
                                                            //oldRelatedcontract = $(vMetadata).find(item.FieldName).text();
                                                            if (oldRelatedcontract != "") {
                                                                SavedRelatedContract = [];
                                                                $.each(oldRelatedcontract.split(";"), function () {
                                                                    if (this != "") {
                                                                        if ($.trim(this) != "") {
                                                                            SavedRelatedContract.push($.trim(this));
                                                                        }
                                                                    }
                                                                });
                                                                oldRelatedcontract = SavedRelatedContract.join("; ");
                                                            }
                                                            if (item.Required == "true") {
                                                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + oldRelatedcontract.replace(/'/g, "&#39;") + "' class='f_inpt width_91 validelement' readonly='readonly' type='text' />";
                                                            } else {
                                                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + oldRelatedcontract.replace(/'/g, "&#39;") + "' class='f_inpt width_91' readonly='readonly' type='text' />";
                                                            }
                                                            if (item.FieldHelp == "true") {
                                                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                                                            }
                                                            vControls += "<a href='javascript:void(0)' class='linkText' onclick='ViewRelatedContracts()'> Browse</a>";
                                                        }
                                                        else if (item.FieldName == "RelatedRequests") {
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            vControls += (item.Required == "true") ? "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  value='" + contractvaluetobind + "' class='f_inpt width_91 validelement' readonly='readonly' type='text' />" : "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  value='" + contractvaluetobind + "' class='f_inpt width_91' readonly='readonly' type='text' />";
                                                            //manoj
                                                            //if (item.Required == "true") {
                                                            //    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width82 validelement' readonly='readonly' type='text' />";
                                                            //} else {
                                                            //    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width82' readonly='readonly' type='text' />";
                                                            //}
                                                            if (item.FieldHelp == "true") {
                                                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                                                            }
                                                            vControls += "<a href='javascript:void(0)' class='linkText' onclick='ViewRelatedRequest()'> Browse</a>";
                                                        }
                                                        else {
                                                            //manoj
                                                            var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                            //manoj
                                                            vControls += "<select id='" + item.FieldName + "' name='" + item.FieldName + "' class='f_inpt width_91'>";
                                                            vControls += "<option value='0'>--Select--</option>";
                                                            $.ajax({
                                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                                                type: 'GET',
                                                                dataType: 'json',
                                                                "Content-Type": "application/json",
                                                                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                                                cache: false,
                                                                async: false,
                                                                success: function (data) {
                                                                    var datalength1 = data.LookupFields.split(';');
                                                                    //var datalength = datalength1.length;
                                                                    $(datalength1).each(function (idatalength1, itemdatalength1) {
                                                                        vControls += (contractvaluetobind == itemdatalength1) ? "<option value='" + itemdatalength1 + "' selected='selected'>" + itemdatalength1 + "</option>" : "<option value='" + itemdatalength1 + "'>" + itemdatalength1 + "</option>";
                                                                    });
                                                                    //for (var i = 0; i < datalength; i++) {
                                                                    //    var itemname = datalength1[i];
                                                                    //    //manoj
                                                                    //    vControls += (contractvaluetobind == itemname) ? "<option value='" + itemname + "' selected='selected'>" + itemname + "</option>" : "<option value='" + itemname + "'>" + itemname + "</option>";
                                                                    //    //manoj
                                                                    //    //if (itemname == $(vMetadata).find(item.FieldName).text()) {
                                                                    //    //    vControls += "<option value='" + itemname + "' selected='selected'>" + itemname + "</option>";
                                                                    //    //} else {
                                                                    //    //    vControls += "<option value='" + itemname + "'>" + itemname + "</option>";
                                                                    //    //}
                                                                    //}
                                                                    vControls += "</select>";
                                                                },
                                                                error: function (data) {
                                                                    vControls += "</select>";
                                                                }
                                                            });
                                                        }
                                                    } else if (item.FieldType.indexOf("Dropdown") > -1 || item.FieldType.indexOf("Multi Select") > -1) {
                                                        if (item.FieldType.indexOf("Dropdown") > -1) {
                                                            vControls += "<select id=" + item.FieldName + " multiple='multiple' class='f_inpt width_91 chosenmulti' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                                                            var vMultiDDL1 = "";
                                                            if (vMultiDDL1 == '') {
                                                                var myArray = [];
                                                                myArray = item.ChoiceValues.split("\n")
                                                                //var myArraylength = myArray.length;
                                                                //manoj
                                                                $(myArray).each(function (imyArray, myArraydatalength1) {
                                                                    vMultiDDL1 += "<option value='" + myArraydatalength1 + "'>" + myArraydatalength1 + "</option>";
                                                                });
                                                                //manoj
                                                                //for (var j = 0; j < myArraylength; j = j + 1) {
                                                                //    vMultiDDL1 += "<option value='" + myArray[j] + "'>" + myArray[j] + "</option>";
                                                                //}
                                                            }
                                                            vControls += vMultiDDL1;
                                                            vControls += '</select>';
                                                            vMultiDDL = item.FieldName;
                                                        }
                                                        else {
                                                            if (item.ChoiceValues == "Counterparty") {
                                                                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                                                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                                                    return (n.RowKey == "6" && n.Status == "ON");
                                                                });
                                                                var vreadonly = "";
                                                                var vbrowse = "";
                                                                if (vAccFeat.length > 0) {
                                                                    vreadonly = "readonly='readonly'";
                                                                    vbrowse = "<span class='right-float'><a href='javascript:void(0)' class='linkText' onclick='ViewCounterparty(\"" + item.FieldName + "\")'> Browse</a></span>";
                                                                }
                                                                //manoj
                                                                var recounterparty = new RegExp("'", 'g');
                                                                //var str = item.TypeName.replace(recounterparty, '');
                                                                var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                                if (contractvaluetobind == "Counterparty not in the list") {
                                                                    $("#chkCounterpartyNotInList").attr("checked", "checked");
                                                                    $("#tblCounterparties").attr('disabled', 'disabled');
                                                                }
                                                                vControls += "<input type='text' id='" + item.FieldName + "' name='" + item.FieldName + "' value='" + contractvaluetobind.replace(recounterparty, "&#39") + "' class='f_inpt width80' " + vreadonly + " type='text' />";

                                                                vControls += vbrowse;
                                                            }
                                                            else {
                                                                var vMultiDDL1 = "";
                                                                if (vMultiDDL1 == '') {
                                                                    $.ajax({
                                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                                                        type: 'GET',
                                                                        dataType: 'json',
                                                                        "Content-Type": "application/json",
                                                                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                                                        cache: false,
                                                                        async: false,
                                                                        success: function (data) {
                                                                            var datalength1 = data.LookupFields.split(';');
                                                                            var datalength = datalength1.length;
                                                                            $(datalength1).each(function (idatalength1, datalength1) {
                                                                                vMultiDDL1 += "<option value='" + datalength1 + "'>" + datalength1 + "</option>";
                                                                            });
                                                                            //for (var l = 0; l < datalength; l++) {
                                                                            //    var itemname = datalength1[l];

                                                                            //}
                                                                        }
                                                                    });
                                                                }
                                                                vControls += vMultiDDL1;
                                                                vControls += '</select>';
                                                                vMultiDDL = item.FieldName;
                                                            }

                                                        }

                                                    } else if (item.FieldType == "Currency" || item.FieldType == "Value / Financials") {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        //manoj
                                                        if (item.FieldName == "ContractValue") {
                                                            vContractValue = true;
                                                        }

                                                        //manoj
                                                        vControls += (contractvaluetobind != "") ? "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + contractvaluetobind + "' class='f_inpt width80' />" : "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80' />";
                                                        //manoj
                                                        //if ($(vMetadata).find(item.FieldName).text() == "") {
                                                        //    vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80' />";
                                                        //} else {
                                                        //    vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80' />";
                                                        //}
                                                        vCurrency = item.FieldName;
                                                    } else if (item.FieldType == "Number") {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        vControls += (contractvaluetobind != "") ? "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + contractvaluetobind + "' class='f_inpt width80' />" : "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80' />";
                                                        //manoj
                                                        //if ($(vMetadata).find(item.FieldName).text() == "") {
                                                        //    vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80' />";
                                                        //} else {
                                                        //    vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80' />";
                                                        //}

                                                        vNumber = item.FieldName;
                                                    }
                                                    else if (item.FieldType == "Yes/No") {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        //manoj
                                                        if (contractvaluetobind == "Yes") {
                                                            vControls += "	<input type='radio' name=" + item.FieldName + " checked value='Yes'>Yes ";
                                                            vControls += "	<input type='radio' name=" + item.FieldName + " value='No'>No";
                                                        }
                                                        else if (contractvaluetobind == "No") {
                                                            vControls += "	<input type='radio' name=" + item.FieldName + " value='Yes'>Yes ";
                                                            vControls += "	<input type='radio' name=" + item.FieldName + " checked value='No'>No";
                                                        }
                                                        else {
                                                            vControls += "	<input type='radio' name=" + item.FieldName + " value='Yes'>Yes ";
                                                            vControls += "	<input type='radio' name=" + item.FieldName + " checked value='No'>No";
                                                        }


                                                    } else if (item.FieldType == "Email") {
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        vControls += (contractvaluetobind != "") ? "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + contractvaluetobind + "' class='f_inpt width80' />" : "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80' />";
                                                        //manoj
                                                        //if ($(vMetadata).find(item.FieldName).text() == "") {
                                                        //    vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width80' />";
                                                        //} else {
                                                        //    vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' value='" + $(vMetadata).find(item.FieldName).text() + "' class='f_inpt width80' />";
                                                        //}
                                                    }

                                                    vControls += '</td></tr>';
                                                    $("#" + tblCtrl).append(vControls);
                                                    if (vDate != "") {
                                                        if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                                            if (onlydate != "") {
                                                                $("#" + vDate + "").datepicker({
                                                                    changeMonth: true,
                                                                    changeYear: true
                                                                });
                                                                $("#" + vDate + "").datepicker().datepicker('setDate', onlydate);
                                                            }
                                                            else {
                                                                $("#" + vDate + "").datepicker({
                                                                    changeMonth: true,
                                                                    changeYear: true
                                                                });
                                                            }
                                                        }
                                                        else {
                                                            var dateformate = localStorage.AppDateFormat.toLowerCase().slice(0, -2);
                                                            if (onlydate != "") {
                                                                $("#" + vDate + "").datepicker({
                                                                    changeMonth: true,
                                                                    changeYear: true,
                                                                    dateFormat: dateformate
                                                                });

                                                                $("#" + vDate + "").datepicker().datepicker('setDate', onlydate);
                                                            }
                                                            else {
                                                                $("#" + vDate + "").datepicker({
                                                                    changeMonth: true,
                                                                    changeYear: true,
                                                                    dateFormat: dateformate
                                                                });
                                                            }

                                                        }


                                                        vDate = "";
                                                    }

                                                    if (vNumber != "") {
                                                        allowOnlyNumberInInputBox(vNumber);
                                                        vNumber == "";
                                                    }
                                                    if (vUser != "") {
                                                        $("." + vUser + "#" + vUser + "").chosen().trigger("chosen:updated");
                                                        $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                                            $('.result-selected').css('display', 'none');
                                                        });
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        if (contractvaluetobind != "") {
                                                            GetValuesAndAutoPopulate(vUser, contractvaluetobind);
                                                        }
                                                        //manoj

                                                        vUser = "";
                                                    }

                                                    if (vCurrency != "") {
                                                        if (vCurrencyDisplayStyle == "UK") {
                                                            $('#' + vCurrency).autoNumeric();
                                                        } else if (vCurrencyDisplayStyle == "CAN") {
                                                            $('#' + vCurrency).autoNumeric({ aSep: ' ', aDec: '.' });
                                                        } else if (vCurrencyDisplayStyle == "EU") {
                                                            $('#' + vCurrency).autoNumeric({ aSep: '.', aDec: ',' });
                                                        } else if (vCurrencyDisplayStyle == "IND") {
                                                            $('#' + vCurrency).autoNumeric({ dGroup: '2', });
                                                        }
                                                        vCurrency == "";
                                                    }

                                                    if (vMultiDDL != "") {

                                                        $("#" + vMultiDDL + "").chosen().trigger("chosen:updated");
                                                        $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                                            $('.result-selected').css('display', 'none');
                                                        });
                                                        //manoj
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        if (contractvaluetobind != "") {
                                                            GetValuesAndAutoPopulate(vMultiDDL, contractvaluetobind);
                                                        }
                                                        //if ($(vMetadata).find(item.FieldName).text() != "") {
                                                        //    GetValuesAndAutoPopulate(vMultiDDL, $(vMetadata).find(item.FieldName).text());
                                                        //}
                                                        vMultiDDL = "";
                                                    }

                                                    //If contract value is added, add contract currecncy to create form
                                                    if (vContractValue) {
                                                        var vControls = "";
                                                        $.ajax({
                                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/currencies',
                                                            type: 'GET',
                                                            dataType: 'json',
                                                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                                            cache: false,
                                                            async: false,
                                                            success: function (data) {
                                                                vControls = '<tr><td class="f_head"><label>Contract Currency</label>';
                                                                vControls += '</td><td class="f_list width50">';
                                                                vControls += "<select id='ContractCurrency' name='ContractCurrency' title='Contract Currency' class='f_inpt width_91'>";
                                                                vControls += "<option value='0'>--Select--</option>";
                                                                var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find("ContractCurrency").text() : "";
                                                                $(data).each(function (i, item) {
                                                                    //manoj
                                                                    vControls += (item.Abbreviation == contractvaluetobind) ? "<option value='" + item.Abbreviation + "' selected='selected'>" + item.Abbreviation + "</option>" : "<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>";
                                                                    //manoj
                                                                    //if (item.Abbreviation == contractvaluetobind) {
                                                                    //    vControls += "<option value=" + encodeURI(item.Abbreviation) + " selected='selected'>" + item.Abbreviation + "</option>";
                                                                    //}
                                                                    //else {
                                                                    //    vControls += "<option value=" + encodeURI(item.Abbreviation) + ">" + item.Abbreviation + "</option>";
                                                                    //}
                                                                });
                                                                vControls += '</select></td></tr>';
                                                            }
                                                        });

                                                        $("#" + tblCtrl).append(vControls);
                                                        vContractValue = false;
                                                    }

                                                    if (vProject) {
                                                        //manoj
                                                        var contractvaluetobindvalue = (bindvaluefromcontype) ? $(vMetadata).find(item.FieldName).text() : "";
                                                        var contractvaluetobind = (bindvaluefromcontype) ? $(vMetadata).find("ProjectTask").text() : "";
                                                        vControls = (contractvaluetobindvalue != "" || item.Required == "true") ? '<tr><td><label id="lblprojecttasktocheck">Project Tasks<span class="text-red">*</span></label></td>' : '<tr><td><label id="lblprojecttasktocheck">Project Tasks</label></td>'
                                                        vControls += (contractvaluetobindvalue != "" || item.Required == "true") ? "<td><input id='ProjectTask' name='ProjectTask' value='" + contractvaluetobind + "' title='Project Task' class='f_inpt width_91 validelement' readonly='readonly' type='text' />" : "<td><input id='ProjectTask' name='ProjectTask' value='" + contractvaluetobind + "' title='Project Task' class='f_inpt width_91' readonly='readonly' type='text' />";
                                                        vControls += "<a href='javascript:void(0)' class='linkText' onclick='ViewProjectTasks()'> Browse</a>";
                                                        vControls += '</td></tr>';
                                                        $("#" + tblCtrl).append(vControls);
                                                        vProject = false;
                                                    }
                                                } else {
                                                    var vControls = "<tr><td class='f_head'><label style='word-break: break-all;'>" + item.FieldDisplayName + "<img class='helpimg' src='../Content/Images/help_training.png' title='" + item.HelpText + "'></label></td><td class='f_list width50'>Not available</td></tr>";
                                                    $("#" + tblCtrl).append(vControls);
                                                }
                                            }
                                        }
                                    }
                                    //counterpartydetailstofetch = [];
                                    //counterpartycollection == [];
                                } else {
                                    //$("#" + helptextvalue).css('display', 'none');
                                    $("#" + tblCtrl).empty();
                                    //counterpartydetailstofetch = [];
                                    //counterpartycollection == [];
                                    swal("", "No content controls are mapped in the template.");
                                }
                                if (vTransactionTypeExist == 'Yes') {
                                    $("#trTransactionType").css("display", "");
                                }
                                if (vContractClassExist == 'Yes') {
                                    $("#trContractClass").css("display", "");
                                }

                                //$("#" + helptextvalue).css('display', '');
                                $("#loadingPage").fadeOut();


                            },
                            error:
                                function (contractfields) {
                                    //$("#" + helptextvalue).css('display', 'none');
                                    $("#" + tblCtrl).empty();
                                    $('#spInProgress').css('display', 'none');
                                    $("#loadingPage").fadeOut();
                                }
                        });
                    } else {
                        //$("#" + helptextvalue).css('display', 'none');
                        $("#" + tblCtrl).empty();
                        $('#spInProgress').css('display', 'none');
                        $("#loadingPage").fadeOut();
                    }
                    //manoj
                },
            });
        },
        error:
            function (contractfields) {
                //$("#" + helptextvalue).css('display', 'none');
                $("#" + tblCtrl).empty();
                $('#spInProgress').css('display', 'none');
                $("#loadingPage").fadeOut();
            }
    });
}
// Milestone Related Methods

function BindMilestoneTypes() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestonetypes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $(documenttypes).each(function (i, item) {
                $("#ddlMilestoneType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlMilestoneTypeNew").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
            });
        }
    });
}

function BindMilestone(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    //*Harshitha
    var completeArticle = '';
    articleMileStone = '';
    $("#ulMilestoneBody").empty();
    $("#dvMilestoneAlert").empty();
    $("#dvMilestoneAlert").css('display', 'none');
    $("#alertsListUpcomingMilestone").empty();
    //*Harshitha

    var count = 0;
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "2" && n.Status == "ON");
    });


    if (vAccFeat.length > 0) {
        BindObligationMilestones(contractid, count);
    }
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            $(contactsJsonPayload).each(function (i, item) {
                count++;
                var vMilestoneDate = '';
                var vMilestStatus = '';
                if (item.MilestoneDate != null) {
                    var duedate;
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { duedate = item.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') { duedate = item.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                        else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { duedate = item.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    }

                    vMilestoneDate = duedate != "" ? (duedate + ': ') : "";
                    var MilestoneDate = new Date(item.MilestoneDate);
                    var currentDate = new Date();
                    var dateOne = new Date(MilestoneDate.getFullYear(), MilestoneDate.getMonth(), MilestoneDate.getDate(), 00, 00, 00); //Year, Month, Date
                    var dateTwo = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), 00, 00, 00); //Year, Month, Date
                    if (dateOne < dateTwo)
                        vMilestStatus = '<b class="milestone-Delayed" title="DELAYED"><img src="../Content/Images/status/exp.png"> Dly</b>';
                    else if (dateOne >= dateTwo)
                        vMilestStatus = '<b class="milestone-Upcoming" title="UPCOMING"><img src="../Content/Images/status/renew.png"> Upco</b>';
                }
                var article = '';
                if (count <= 5)
                    article = '<li class="margin-bottom-8 WrapText_h2" title="Milestone">';
                else
                    article = '<li class="ShowMoreMilestones margin-bottom-8 WrapText_h2" style="display:none;" title="Milestone">';
                article += '<label id="MilestoneID" style="display:none;">' + item.RowKey + '</label>';
                article += '<label id="MilestoneTitle" style="display:none;">' + item.MilestoneTitle + '</label>';
                article += '<label id="MilestoneCompleted" style="display:none;">' + item.MilestoneCompleted + '</label>';

                if (item.MilestoneCompleted == "Yes" || item.MilestoneCompleted == "yes") {
                    vMilestStatus = '<b class="milestone-Complete" title="COMPLETED"><img src="../Content/Images/status/tick.png"> Comp</b>';

                    if (item.MilestoneDate != null) {
                        article += '<input type="checkbox" style="margin-right: 0px;vertical-align: middle;" class="delmilestone" id="' + item.RowKey + '"  name="chkmilestone" onclick="checkMultipleMilestonesNewMul(this);" value=' + item.RowKey + ' /> ';
                    }
                    // article += vMilestStatus;
                    article += '<img style="width: 14px; vertical-align: sub;pointer-events: none; margin-right: 2px;" title="Milestone" src="/Content/Images/cal-icon.png">';
                    article += '<span class="DateToSort" style="color: black;"> ' + vMilestoneDate + '</span>';
                    article += '<a href="javascript:void(0)" style="color:#555555;" onclick="ViewMilestineDetail(\'' + item.RowKey + '\')"><del>' + item.MilestoneTitle + '</del></a>';
                }
                else {
                    if (item.MilestoneDate != null) {
                        article += '<input type="checkbox"  style="margin-right: 0px;vertical-align: middle;" id="' + item.RowKey + '"  name="chkmilestone" onclick="checkMultipleMilestonesNewMul(this);" value=' + item.RowKey + ' /> ';
                    }
                    // article += vMilestStatus;
                    article += '<img style="width: 14px; vertical-align: sub;pointer-events: none; margin-right: 2px;" title="Milestone" src="/Content/Images/cal-icon.png">';
                    article += '<span class="DateToSort" style="color: black;"> ' + vMilestoneDate + '</span>';
                    article += '<a href="javascript:void(0)" style="color:#555555;" onclick="ViewMilestineDetail(\'' + item.RowKey + '\')">' + item.MilestoneTitle + '</a>';
                }
                //var beforeDaysSort = [];
                //var afterDaysSort = [];
                //var beforeDays = '';
                //var afterDays = '';

                //if (item.Reminder1 != null && item.Reminder1 != "" && item.Reminder1 != 0) {
                //    if (item.Reminder1Condition == 'before') {
                //        beforeDaysSort.push(item.Reminder1);
                //    }
                //    else if (item.Reminder1Condition == 'after') {
                //        afterDaysSort.push(item.Reminder1);
                //    }
                //}
                //if (item.Reminder2 != null && item.Reminder2 != "" && item.Reminder2 != 0) {
                //    if (item.Reminder2Condition == 'before') {
                //        beforeDaysSort.push(item.Reminder2);
                //    }
                //    else if (item.Reminder2Condition == 'after') {
                //        afterDaysSort.push(item.Reminder2);
                //    }
                //}
                //if (item.Reminder3 != null && item.Reminder3 != "" && item.Reminder3 != 0) {
                //    if (item.Reminder3Condition == 'before') {
                //        beforeDaysSort.push(item.Reminder3);
                //    }
                //    else if (item.Reminder3Condition == 'after') {
                //        afterDaysSort.push(item.Reminder3);
                //    }
                //}

                //beforeDays = beforeDaysSort.sort(function (a, b) { return a - b });
                //afterDays = afterDaysSort.sort(function (a, b) { return a - b });

                //if (beforeDays != '' || afterDays != '') {
                //    article += '<span class="sub-text-head"> (Reminders ' + (beforeDays != '' ? beforeDays + ' day(s) before' : '') + (afterDays != '' ? (beforeDays != '' ? ' & ' + afterDays + ' day(s) after )' : afterDays + ' day(s) after ) ') : ')') + '</span>';
                //}

                article += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuMilestone"/>';

                article += '</li>';
                completeArticle += article;
                //BindMilestoneAlert(item);

            });
            articleMileStone = completeArticle;
            //*Harshitha
            $("#ulMilestoneBody").append(completeArticle);
            //
            if (count > 5) {
                var more = count - 5;
                $("#dvMilestone").html('<a id="ShowMoreMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreMilestones()">' + more + ' More Milestone(s) </a>' +
                                          '<a id="ShowLessMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessMilestones()" style="display:none;">Show less</a>');
            } else {
                $("#dvMilestone").html('');
            }

            $("#lblMilestonesCount").text(count);

            $(".openmenuMilestone").contextMenu({ menu: 'dropdownMenu', leftButton: true }, function (action, el, pos) { contextMenuMilestone(action, el.parent("li"), pos); });

            if (count == 0) {
                $("#ulMilestoneBody").append('No items found.');
                $("#dvMilestone").html('');
            }
            else {
            }

        },
        error: function (request) {
            //*Harshitha
            if (completeArticle != '') {
                $("#ulMilestoneBody").append(completeArticle);
                $('#ulMilestoneBody > li').sort(sortDescending).appendTo('#ulMilestoneBody');

                if (count > 5) {
                    var more = count - 5;
                    $("#dvMilestone").html('<a id="ShowMoreMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreMilestones()">' + more + ' More Milestone(s) </a>' +
                                              '<a id="ShowLessMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessMilestones()" style="display:none;">Show less</a>');
                } else {
                    $("#dvMilestone").html('');
                }

                articleMileStone = completeArticle;
                $("#lblMilestonesCount").text(count);

                $(".openmenuMilestone").contextMenu({ menu: 'dropdownMenu', leftButton: true }, function (action, el, pos) { contextMenuMilestone(action, el.parent("li"), pos); });

            }
            else {
                $("#lblMilestonesCount").text('0');
                $("#ulMilestoneBody").append('No items found.');
                $("#dvMilestone").html('');
            }
        },
        complete: function () {

            //*Harshitha
            $("#tblMilestoneMissing").parent().remove()
            $("#ulMilestoneBody").parent().prepend('<div class="wmessage clearfix clpendingaction" style="display:none;margin-left:33%;margin-top:-30px;margin-bottom:32px;"><table id="tblMilestoneMissing"></table></div>') //ENH 23  Minor Enhancement Specs-Rahul
            //$("#ulMilestoneBody").parent().prepend('<div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblMilestoneMissing"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Milestones\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div>')
            BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
        }
    });
}

//*Harshitha
function sortDescending(a, b) {
    var date1 = $(a).find("span.DateToSort").text();
    date1 = date1.replace('(', '');
    date1 = date1.replace(')', '');
    date1 = date1.replace(':', '');
    date1 = date1.replace(/ /g, '');
    date1 = date1.split('/');

    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { date1 = new Date(date1[2], date1[1] - 1, date1[0]); }
    else { date1 = new Date(date1[2], date1[0] - 1, date1[1]); }
    var date2 = $(b).find("span.DateToSort").text();
    date2 = date2.replace('(', '');
    date2 = date2.replace(')', '');
    date2 = date2.replace(':', '');
    date2 = date2.replace(/ /g, '');
    date2 = date2.split('/');

    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { date2 = new Date(date2[2], date2[1] - 1, date2[0]); }
    else { date2 = new Date(date2[2], date2[0] - 1, date2[1]); }
    return date1 > date2 ? 1 : -1;
}

//*Harshitha
function BindDocumentMilestones(item) {
    var completeArticle = '';
    var sbcount = 0;
    var vDocValidDate = '';
    if (item.ValidTill != null) {
        sbcount++;
        var Validdate;

        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { Validdate = item.ValidTill.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
        else {
            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { Validdate = item.ValidTill.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { Validdate = item.ValidTill.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
        }
        vDocValidDate = '' + Validdate + '';
        var article = '';
        if (sbcount <= 5)
            article = '<li class=" margin-bottom-8 WrapText_h2">';
        else
            article = '<li class="ShowMoreMilestones margin-bottom-8 WrapText_h2" style="display:none;">';
        article += ' <img src="../Content/Images/sand.png" style="width: 15px;pointer-events: none;">';
        if (vDocValidDate != '') {
            article += '<span class="DateToSort" style="color: black;"> ' + vDocValidDate + ': </span>';
        }
        article += '<span style="color:#555555;">' + item.DocumentName + '</span>';


        var beforeDaysSort = [];
        var afterDaysSort = [];
        var beforeDays = '';
        var afterDays = '';

        if (item.Reminder1 != null && item.Reminder1 != "" && item.Reminder1 != 0) {
            if (item.Reminder1Condition == 'before') {
                beforeDaysSort.push(item.Reminder1);
            }
            else if (item.Reminder1Condition == 'after') {
                afterDaysSort.push(item.Reminder1);
            }
        }
        if (item.Reminder2 != null && item.Reminder2 != "" && item.Reminder2 != 0) {
            if (item.Reminder2Condition == 'before') {
                beforeDaysSort.push(item.Reminder2);
            }
            else if (item.Reminder2Condition == 'after') {
                afterDaysSort.push(item.Reminder2);
            }
        }
        if (item.Reminder3 != null && item.Reminder3 != "" && item.Reminder3 != 0) {
            if (item.Reminder3Condition == 'before') {
                beforeDaysSort.push(item.Reminder3);
            }
            else if (item.Reminder3Condition == 'after') {
                afterDaysSort.push(item.Reminder3);
            }
        }

        beforeDays = beforeDaysSort.sort(function (a, b) { return a - b });
        afterDays = afterDaysSort.sort(function (a, b) { return a - b });

        if (beforeDays != '' || afterDays != '') {
            article += '<span class="sub-text-head"> (Reminders ' + (beforeDays != '' ? beforeDays + ' day(s) before' : '') + (afterDays != '' ? (beforeDays != '' ? ' & ' + afterDays + ' day(s) after )' : afterDays + ' day(s) after ) ') : ')') + '</span>';
        }
        article += '</li>';
        completeArticle += article;
    }
    return completeArticle;

}



function BindObligationMilestones(contractid, subCount) {
    var completeArticle = '';
    var sbcount = subCount;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsNew?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        //async: false,
        success: function (contactsJsonPayload) {
            articleObligationMileStone = "";
            $(contactsJsonPayload).each(function (i, item) {
                var vDocValidDate = '';
                if (item.DueDate != null) {
                    sbcount++;
                    var Validdate;

                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { Validdate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') { Validdate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                        else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { Validdate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    }
                    vDocValidDate = '' + Validdate + '';

                    var article = '';
                    if (sbcount <= 5)
                        article = '<li class=" margin-bottom-8 WrapText_h2" title="Obligation">';
                    else
                        article = '<li class="ShowMoreMilestones margin-bottom-8 WrapText_h2" style="display:none;" title="Obligation">';
                    article += '<img style="width: 14px; vertical-align:text-top;pointer-events: none; margin-right: 2px;" title="Obligation" src="/Content/Images/obligation.png">';
                    if (vDocValidDate != '') {
                        article += '<span class="DateToSort" style="color:black"> ' + vDocValidDate + ': </span>';
                    }
                    article += '<span  style="color:#555555">' + item.ObligationTitle + '</span>';


                    var beforeDaysSort = [];
                    var afterDaysSort = [];
                    var beforeDays = '';
                    var afterDays = '';
                    var $rem = [item.Reminder1, item.Reminder2, item.Reminder3];
                    var $remCond = [item.Reminder1Condition, item.Reminder2Condition, item.Reminder3Condition];
                    $.each($remCond, function (i, item) {
                        if ($rem[i] != 0 && $rem[i] != "" && $rem[i] != null) {
                            if (item == 'before') {
                                beforeDaysSort.push($rem[i]);
                            }
                            else if (item == 'after') {
                                afterDaysSort.push($rem[i]);
                            }
                        }
                    });
                    beforeDays = beforeDaysSort.sort(function (a, b) {
                        if (isNaN(a) || isNaN(b)) {
                            return a > b ? 1 : -1;
                        }
                        return a - b;
                    });;
                    afterDays = afterDaysSort.sort(function (a, b) {
                        if (isNaN(a) || isNaN(b)) {
                            return a > b ? 1 : -1;
                        }
                        return a - b;
                    });;
                    if (beforeDays != '' || afterDays != '') {
                        article += '<span class="sub-text-head"> (Reminders ' + (beforeDays != '' ? beforeDays + ' day(s) before' : '') + (afterDays != '' ? (beforeDays != '' ? ' & ' + afterDays + ' day(s) after )' : afterDays + ' day(s) after ) ') : ')') + '</span>';
                    }
                    article += '</li>';
                    articleObligationMileStone += article;
                }
            });
        },
        error: function (request) {
        },
        complete: function () {
            BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
        }

    });


}
//*Harshitha
function BindSystemMilestoneTest(sys, doc, actmile, actobligations) {
    if (actmile != '' || sys != '' || doc != '' || actobligations != '') {
        $("#ulMilestoneBody").empty();
        $("#ulMilestoneBody").append(actmile);
        $("#ulMilestoneBody").append(doc);
        $("#ulMilestoneBody").append(sys);
        $("#ulMilestoneBody").append(actobligations);
        var count = $("#ulMilestoneBody li").length;
        if (count == 0) {
            $("#ulMilestoneBody").append('No items found.');
            $("#lblMilestonesCount").text(0);
        }
        else {
            $("#ulMilestoneBody>li.ShowMoreMilestones").removeClass("ShowMoreMilestones");
            $("#ulMilestoneBody>li").css('display', 'block');

            $('#ulMilestoneBody>li').sort(sortDescending).appendTo('#ulMilestoneBody');
            $('#ulMilestoneBody>li').slice(5, count).addClass("ShowMoreMilestones");
            $('#ulMilestoneBody>li.ShowMoreMilestones').css('display', 'none');
            if (count > 5) {
                var more = count - 5;
                $("#dvMilestone").empty();
                $("#dvMilestone").html('<a id="ShowMoreMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreMilestones()">' + more + ' More Milestone(s) </a>' +
                                            '<a id="ShowLessMilestones" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessMilestones()" style="display:none;">Show less</a>');
            }
            else {
                $("#dvMilestone").empty();
            }
            $("#lblMilestonesCount").text(count);
            $(".openmenuMilestone").contextMenu({ menu: 'dropdownMenu', leftButton: true }, function (action, el, pos) { contextMenuMilestone(action, el.parent("li"), pos); });
        }

    }
}
//*Harshitha
function Sortreminder(SortList, Condition, Value) {
    var result = $.grep(SortList, function (e) { return e.Condition == Condition; });
    if (result == 0) {
        SortList.push({ 'Condition': Condition, 'Value': Value });
    }
    else {
        result[0].Value = result[0].Value + ',' + Value;
        var splitResult = result[0].Value.split(',');
        splitResult.sort(function (a, b) {
            if (isNaN(a) || isNaN(b)) {
                return a > b ? 1 : -1;
            }
            return a - b;
        });
        var JoinResult = splitResult.join();
        result[0].Value = JoinResult;
    }


}
//*Harshitha
function ReminderConditionCheck(beforeDaysSort, afterDaysSort, Contract) {
    var $rem = [Contract.RenewReminder1, Contract.RenewReminder2, Contract.RenewReminder3];
    var $remCond = [Contract.RenewReminder1Condition, Contract.RenewReminder2Condition, Contract.RenewReminder3Condition];
    $.each($remCond, function (i, item) {
        if ($rem[i] != 0 && $rem[i] != "" && $rem[i] != null) {
            var splitCond = item.split('-');
            if (splitCond[0] == 'before') {
                if (splitCond[1] != 'undefined')
                    Sortreminder(beforeDaysSort, splitCond[1], $rem[i]);
            }
            else if (splitCond[0] == 'after') {
                if (splitCond[1] != 'undefined')
                    Sortreminder(afterDaysSort, splitCond[1], $rem[i]);
            }
        }
    });
}
//*Harshitha
function SystemMileStoneArticle(titleTerm, dateValue, beforeDaysSort, afterDaysSort) {
    var article = '';
    var formatdateValue = '';
    if (dateValue != "" && dateValue != null) {
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "") {
            formatdateValue = moment(new Date(dateValue)).format('MM/DD/YYYY');
        }
        else { formatdateValue = moment(new Date(dateValue)).format(localStorage.AppDateFormat); }

        vDate = formatdateValue != "" ? (formatdateValue + ': ') : "";

        article = '<li class=" margin-bottom-8" title="Contract Term/Timelines">';
        article += '<img src="/Content/Images/Contract_Term.png" title="Contract Term/Timelines" style="pointer-events: none;">';
        article += '<span class="DateToSort" style="color: black;"> ' + vDate + '</span>';
        article += ' <a href="javascript:void(0)" style="color:#555555;" onclick=contextMenuTerm(\"view\",\"\",\"\")>' + titleTerm + '</a>';

        var beforeDays = '';
        var afterDays = '';
        var resultBefore = $.grep(beforeDaysSort, function (e) { return e.Condition == titleTerm; });
        if (resultBefore != 0) {
            beforeDays = resultBefore[0].Value;
        }
        var resultAfter = $.grep(afterDaysSort, function (e) { return e.Condition == titleTerm; });
        if (resultAfter != 0) {
            afterDays = resultAfter[0].Value;
        }
        if (beforeDays != '' || afterDays != '') {

            article += '<span class="sub-text-head"> (Reminders ' + (beforeDays != '' ? beforeDays + ' day(s) before' : '') + (afterDays != '' ? (beforeDays != '' ? ' & ' + afterDays + ' day(s) after )' : afterDays + ' day(s) after )') : ')') + ' </span>';
        }

        article += '</li>';

        articleSystemMileStone += article;
    }
}

//*Harshitha
function BindSystemMilestones(Contract) {

    articleSystemMileStone = '';
    delayedTermDates = "";
    var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
    // if ($.inArray(contractItem.Status, vContractStatus) > -1) {
    var vTermType = Contract.ContractTermType;
    var beforeDaysSort = [];
    beforeDaysSort = Object(beforeDaysSort)
    var afterDaysSort = [];
    afterDaysSort = Object(afterDaysSort)
    ReminderConditionCheck(beforeDaysSort, afterDaysSort, Contract);

    if (vTermType == "Fixed Term") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Start / Effective Date", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Start / Effective Date</td></tr>";
        }
        if (contractItem.NextEvaluationDate != null) {
            var dateValue = Contract.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Next Evaluation Date", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Next Evaluation Date</td></tr>";
        }
        if (contractItem.EndDate != null) {
            var dateValue = Contract.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("End Date (Overall Contract Record)", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing End Date</td></tr>";
        }
    }
    else if (vTermType == "Evergreen / Perpetual") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Start / Effective Date", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Start / Effective Date</td></tr>";
        }
        if (contractItem.NextEvaluationDate != null) {
            var dateValue = Contract.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Next Evaluation Date", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Next Evaluation Date</td></tr>";
        }
    }
    else if (vTermType == "Renewable") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Initial Term Start Date", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Initial Term Start Date</td></tr>";
        }
        if (contractItem.InitialTermEndDate != null) {
            var dateValue = Contract.InitialTermEndDate != null ? (Contract.InitialTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : "";
            SystemMileStoneArticle("Initial Term End Date", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Initial Term End Date</td></tr>";
        }
        if (contractItem.EndDate != null) {
            var dateValue = Contract.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("End Date (Overall Contract Record)", dateValue, beforeDaysSort, afterDaysSort);
        }

        if (contractItem.TermEndDate != null) {
            var dateValue = Contract.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Current Term Ends", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Current Term End Date</td></tr>";
        }
        if (contractItem.EffectiveDate != null) {
            var dateValue = Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
            SystemMileStoneArticle("Current Term Starts", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Current Term Start Date</td></tr>";
        }
        //if (contractItem.RenewalDate != null) {
        //    var dateValue = Contract.RenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');
        //    SystemMileStoneArticle("Renew On", dateValue, beforeDaysSort, afterDaysSort);
        //}
        //else {
        //    delayedTermDates += "<tr><td class='f_head'>Missing Renew On</td></tr>";
        //}

    }
    else if (vTermType == "Executed / Performance") {
        if (contractItem.StartDate != null || contractItem.EffectiveDate != null) {
            var dateValue = Contract.StartDate != null ? (Contract.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1')) : (Contract.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'));
            SystemMileStoneArticle("Date of Execution / Performance", dateValue, beforeDaysSort, afterDaysSort);
        }
        else {
            delayedTermDates += "<tr><td class='f_head'>Missing Date of Execution / Performance</td></tr>";
        }
    }
    else {
        delayedTermDates += "<tr><td class='f_head'>The Timelines & Dates for contract is not available.</td></tr>";
    }
    //}
    //*Harshitha
    BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
}

function ShowMoreMilestones() {
    $('.ShowMoreMilestones').css("display", "");
    $('#ShowMoreMilestones').css("display", "none");
    $('#ShowLessMilestones').css("display", "");
}

function ShowLessMilestones() {
    $('.ShowMoreMilestones').css("display", "none");
    $('#ShowMoreMilestones').css("display", "");
    $('#ShowLessMilestones').css("display", "none");
}

function BindMilestoneAlert(item) {
    var sRowKey = item.RowKey;
    var sAlertTitle = item.MilestoneTitle;
    var sPriority = "";

    var today = new Date();
    today.setHours(0, 0, 0, 0);

    var todaydate = today.getUTCMonth() + 1 + '/' + today.getUTCDate() + '/' + today.getUTCFullYear();
    var curDate = moment(todaydate);
    var MilestoneDate = new Date(item.MilestoneDate);
    var vDate = (MilestoneDate.getUTCMonth() + 1) + '/' + MilestoneDate.getUTCDate() + '/' + MilestoneDate.getUTCFullYear();
    var start = moment(vDate);
    var beforealert = start.diff(curDate, "days");
    if (beforealert > 0 && ((beforealert <= item.Reminder1 + 60 && item.Reminder1Condition == "before"))) {
        var nextDate = moment(vDate).subtract(item.Reminder1,"days");
        var afteralert = nextDate.diff(curDate, "days");
        if (afteralert > 0 && afteralert <= 60) {
            var alert = "";
            alert += "<img src='../Content/Images/waitng-approval.png' style='padding-right: 7px;' />" + sAlertTitle;
            alert += " <small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
            $("#alertsListUpcomingMilestone").append(alert);

            $("#spNoUpcomingAlert").css('display', 'none');
        }
    }

    if (beforealert > 0 && ((beforealert <= item.Reminder2 + 60 && item.Reminder2Condition == "before"))) {
        var nextDate = moment(vDate).subtract(item.Reminder2,"days");
        var afteralert = nextDate.diff(curDate, "days");
        if (afteralert > 0 && afteralert <= 60) {
            var alert = "";
            alert += "<img src='../Content/Images/waitng-approval.png' style='padding-right: 7px;' />" + sAlertTitle;
            alert += " <small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
            $("#alertsListUpcomingMilestone").append(alert);

            $("#spNoUpcomingAlert").css('display', 'none');
        }
    }

    if (beforealert > 0 && ((beforealert <= item.Reminder3 + 60 && item.Reminder3Condition == "before"))) {
        var nextDate = moment(vDate).subtract(item.Reminder3,"days");
        var afteralert = nextDate.diff(curDate, "days");
        if (afteralert > 0 && afteralert <= 60) {
            var alert = "";
            alert += "<img src='../Content/Images/waitng-approval.png' style='padding-right: 7px;' />" + sAlertTitle;
            alert += " <small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
            $("#alertsListUpcomingMilestone").append(alert);

            $("#spNoUpcomingAlert").css('display', 'none');
        }
    }



    if (item.Reminder1Condition == "after" && item.Reminder1 > 0) {
        var nextDate = moment(vDate).add(item.Reminder1,"days");
        var afteralert = nextDate.diff(curDate, "days");
        if (afteralert > 0 && afteralert <= 60) {

            var alert = "";
            alert += "<img src='../Content/Images/waitng-approval.png' style='padding-right: 7px;'/>" + sAlertTitle;
            alert += "<small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
            $("#alertsListUpcomingMilestone").append(alert);

            $("#spNoUpcomingAlert").css('display', 'none');
        }
    }
    if (item.Reminder2Condition == "after" && item.Reminder2 > 0) {
        var nextDate = moment(vDate).add(item.Reminder2,"days");
        var afteralert = nextDate.diff(curDate, "days");
        if (afteralert > 0 && afteralert <= 60) {

            var alert = "";
            alert += "<img src='../Content/Images/waitng-approval.png' style='padding-right: 7px;'/>" + sAlertTitle;
            alert += "<small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
            $("#alertsListUpcomingMilestone").append(alert);

            $("#spNoUpcomingAlert").css('display', 'none');
        }

    }
    if (item.Reminder3Condition == "after" && item.Reminder3 > 0) {
        var nextDate = moment(vDate).add(item.Reminder3,"days");
        var afteralert = nextDate.diff(curDate, "days");
        if (afteralert > 0 && afteralert <= 60) {

            var alert = "";
            alert += "<img src='../Content/Images/waitng-approval.png' style='padding-right: 7px;'/>" + sAlertTitle;
            alert += "<small class='sub-text'>(reminder due in " + afteralert + " days)</small><br/>";
            $("#alertsListUpcomingMilestone").append(alert);

            $("#spNoUpcomingAlert").css('display', 'none');
        }
    }


}

function addMilestone() {

    $("#btnAddMilestone").click();
}

$('#btnAddMilestoneInline').click(function () {
    if (requiredValidator('milestoneInline')) {
        $("#loadingPage").fadeIn();
        var strContractID = getParameterByName('ContractID');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones',
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            data: {

                ContractID: getParameterByName('ContractID'),
                ContractTitle: $("#lblContractTitle").text(),
                MilestoneTitle: $("#txtMilestoneTitleInline").val(),
                MilestoneDate: $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateInline").datepicker('getDate')),

                MilestoneOwner: $("#licontractmanagers").text(),
                MilestoneCompleted: 'No',
                AutoComplete: 'Yes',
                Priority: 'Medium',
                CreatedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName,
                MilestoneStartDate: $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateInline").datepicker('getDate')),
                MilestoneEndDate: $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateInline").datepicker('getDate')),
                Ocurrences: 1,
                Recurrences: 'None'
            },
            cache: false,
            success: function (person) {
                $("#loadingPage").fadeOut();

                $("#milestoneInline").toggle();
                $("#txtMilestoneTitleInline").val("");
                $("#dtMilestoneDateInline").val("");
                BindMilestone();
            },
            error: function (status) {
                $("#loadingPage").fadeOut();
            }
        });
    }
});

function checkMilestone(cb) {
    var MilestoneID = cb.id
    var lfckv = cb.checked;
    if (lfckv) {
        $.ajax({
            async: false,
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID + '&acheived=Yes',
            type: "PUT",
            dataType: "json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            "Content-Type": "application/json",
        }).done(function (data) {

            result = data;
            $('#dvMilestoneAlert #p_' + MilestoneID).remove();
            if ($('#dvMilestoneAlert p').length == 0) {
                CloseAlert('dvMilestoneAlert');
                $('#dvMilestoneAlert').empty();
            }
        }).fail(function (data) {

            swal("", data.status + ": " + data.statusText);
        });
    } else {
        $.ajax({
            async: false,
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID + '&acheived=No',
            type: "PUT",
            dataType: "json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            "Content-Type": "application/json",
        }).done(function (data) {
            result = data;
            DelayedMilestone(data);
        }).fail(function (data) {

            swal("", data.status + ": " + data.statusText);
        });
    }
}

$('#btnAddMilestone').click(function () {

    AddMilestoneMoreNew();
});


var listMilestoneNewData = "";
var listMilestoneNewEndDate = "";
var listMilestoneNewStartDate = "";
var milestoneRecur = "";
var milestoneRecurCusString = "";
var milestoneoccur = 1;


function MilestoneDateSlectedEvent(obj) {
    var dateNew = new Date($.datepicker.formatDate('mm/dd/yy', $(obj).datepicker('getDate')));
    $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
        this.checked = false;
    });
    var day = dateNew.getDay()
    var chkboxId = "MRC" + day;

    $("#" + chkboxId).prop('checked', true);

    if ($('#txtMilestoneNewText').val() != "") {

    }
    else {
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
    }


    $('#dtMilestoneNewOccurrenceDueDate').val(dateNew.getDate());
    $('#dtMilestoneOcurrMonthforYear').val(monthNames[dateNew.getMonth()]);
    $('#dtMilestoneOcurrDateforYear').val(dateNew.getDate());


    if ($("#ddlMilestoneOccurencess").val() != "None") {
        GetMilestoneDataFinal("");
    }


}

var userFlag = false;
var userFlagCustom = false;
$("#ddlMilestoneOccurencess").change(function (obj) {

    GetMilestonedynamicRecurrenceCount();


    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))

    }

    listMilestoneNewStartDate = fMilestoneDateNew;
    var date = new Date(fMilestoneDateNew);
    var Cus = "";
    var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();

    var customstring = "";

    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fMilestoneDateNew);

        $('#dtMilestoneNewOccurrenceDueDate').val(abc.getDate());
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', '');
        customstring = $("#ddlMilestoneRepeatMonthly").val();
        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $('#ddlMilestoneRepeatMonthly').css('display', '');

        $('#lblMilestoneOcurrenceMonth').css('display', '');
        $('#lblMilestoneOcurrenceYear').css('display', 'none');

        if (listMilestoneNewEndDate != "Not Available") {

        }
        else {
            dynamicOccCount = 54;
        }


    }
    else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
        var abc = new Date(fMilestoneDateNew);
        var text = monthNames[abc.getMonth()];

        $('#dtMilestoneOcurrDateforYear').val(abc.getDate());

        $('#dtMilestoneOcurrMonthforYear').val(text);
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', '');

        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $("#ddlMilestoneRepeatMonthly").val("1");
        $('#ddlMilestoneRepeatMonthly').css('display', 'none');
        $('#lblMilestoneOcurrenceMonth').css('display', 'none');
        $('#lblMilestoneOcurrenceYear').css('display', '');

        if (listMilestoneNewEndDate != "Not Available") {

        }
        else {
            dynamicOccCount = 54;
        }

    }
    else if (ocurrTxtnew == "Weekly") {
        $('#dtMilestoneNewOccurrenceDueDate').val("");
        $('#divMilestoneOcurrenceMonthly').css('display', 'none');
        $('#divMilestoneOcurrenceWeekly').css('display', '');
        $('#divMilestoneOcurrenceSummary').css('display', '');

        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
        $("#ddlMilestoneRepeatMonthly").val("1");

        if (listMilestoneNewEndDate != "Not Available") {

        }
        else {
            dynamicOccCount = 54;
        }

    }
    else {
        $('#dtMilestoneNewOccurrenceDueDate').val("");
        $('#divMilestoneOcurrenceMonthly').css('display', 'none');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', 'none');

        $('#dvMilestoneOcurrenceEnd').css('display', 'none');
        $("#ddlMilestoneRepeatMonthly").val("1");

        if (listMilestoneNewEndDate != "Not Available") {

        }
        else {
            dynamicOccCount = 54;
        }

    }

    if (userFlag) {
        if (userFlagCustom) {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
        }
        else {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurence").prop("checked", true);
            $('#rdMilestoneNewEndOccurenceUser').removeAttr('checked');
        }
    }





    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {

        GetMilestoneDataFinal(Cus);
    }
    else {
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }

        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, Cus, customstring);

    }




});



var dynclistMilestoneNewStartDate = '';
function GetMilestonedynamicRecurrenceCount() {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))

    }
    var startDateNew = new Date();
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    dynclistMilestoneNewStartDate = fMilestoneDateNew;
    if (listMilestoneNewEndDate != "Not Available") {
        if ($("#ddlMilestoneOccurencess option:selected").val() == "Weekly") {
            var newTestDateNew2 = new Date();
            var sta = false;
            var OCount = 1;
            var Cus = "";
            var CustomRecWeekly = [];
            $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                CustomRecWeekly.push(this.value);
                Cus += (this.value) + ",";
            });

            var selectedstartdate = new Date(dynclistMilestoneNewStartDate);

            for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                    recst = new Date(dynclistMilestoneNewStartDate);
                    newTestDateNew2 = new Date(dynclistMilestoneNewStartDate);
                    sta = true;
                    break;
                }
            }
            if (!sta) {

                var newTestDate = new Date(dynclistMilestoneNewStartDate);
                var newdate = new Date(dynclistMilestoneNewStartDate);
                for (var s = 0; s < 6; s++) {
                    newdate.setDate(newdate.getDate() + 1);
                    newTestDate.setDate(newTestDate.getDate() + 1);
                    for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                        if (newdate.getDay() == CustomRecWeekly[crw1]) {
                            recst = newdate;
                            newTestDateNew2 = newTestDate;
                            sta = true;
                            break;
                        }
                    }
                    if (sta) {
                        break;
                    }

                }
            }

            reced = new Date(listMilestoneNewEndDate);

            if (reced >= recst) {
                //Get 1 day in milliseconds
                var one_day = 1000 * 60 * 60 * 24;

                // Convert both dates to milliseconds
                var date1_ms = recst.getTime();
                var date2_ms = reced.getTime();

                // Calculate the difference in milliseconds
                var difference_ms = date2_ms - date1_ms;

                // Convert back to days and return
                var diff = Math.round(difference_ms / one_day);

                var newCustomdate = newTestDateNew2;

                for (var s1 = 0; s1 < diff; s1++) {
                    newCustomdate.setDate(newCustomdate.getDate() + 1);
                    for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                        if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                            OCount = OCount + 1;
                        }
                    }
                }

                milestoneoccur = OCount;
            }
            else {
                milestoneoccur = 0;
            }

            if (milestoneoccur > 54) {
                dynamicOccCount = 54;
                $("#lblerrorreclimitMilestone").css('display', '');
                $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }
            else {
                dynamicOccCount = milestoneoccur;
                $("#lblerrorreclimitMilestone").css('display', 'none');
                $("#rdMilestoneNewEndOccurence").attr('disabled', false);
                $('#rdMilestoneNewEndOccurence').prop("checked", true);

                if (milestoneoccur == 0)
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                else
                    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }
        }
        else if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
            var newstartrecdate = new Date(dynclistMilestoneNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistMilestoneNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listMilestoneNewEndDate);


            var occnew = 0;

            if (reced >= newstartrecdate) {
                while (reced >= newstartrecdate) {
                    newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlMilestoneRepeatMonthly option:selected").val())));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                milestoneoccur = occnew;
            }
            else {
                milestoneoccur = 0;
            }

            if (milestoneoccur > 54) {
                dynamicOccCount = 54;
                $("#lblerrorreclimitMilestone").css('display', '');
                $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }
            else {
                dynamicOccCount = milestoneoccur;
                $("#lblerrorreclimitMilestone").css('display', 'none');
                if (milestoneoccur == 0)
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                else
                    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }


            milestoneRecurCusString = recst.getDate();
            //String need to be Added for Custom


        }
        else {
            var newstartrecdate = new Date(dynclistMilestoneNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistMilestoneNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listMilestoneNewEndDate);


            var occnew = 0;

            if (reced >= newstartrecdate) {

                while (reced >= newstartrecdate) {
                    newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                milestoneoccur = occnew;


            }
            else {
                milestoneoccur = 0;
            }

            if (milestoneoccur > 54) {
                dynamicOccCount = 54;
                $("#lblerrorreclimitMilestone").css('display', '');
                $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
            }
            else {
                dynamicOccCount = milestoneoccur;
                $("#lblerrorreclimitMilestone").css('display', 'none');
                if (milestoneoccur == 0)
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                else
                    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');


            }

            milestoneRecurCusString = recst.getFullYear();

        }
    }
    else {
        dynamicOccCount = 54;
        $("#lblerrorreclimitMilestone").css('display', '');
        $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
    }
    if ($("#txtMilestoneOccurrenceCount").val() == '') {
        if (parseInt(dynamicOccCount) > 12) {
            $("#txtMilestoneOccurrenceCount").val('12');
        }
        else {
            $("#txtMilestoneOccurrenceCount").val(dynamicOccCount);
        }
    }

}




function getOcurrenceValuesForMilestone(recurence, occurences, startDateNew, recurenceCustomString, strmonthly) {

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/ocurrencedates?ocurrence=' + recurence + '&iOcurrence=' + occurences + '&dtstart=' + startDateNew + '&ocurrencestring=' + recurenceCustomString + '&strmonthly=' + strmonthly,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (folder) {

            listMilestoneNewData = folder;
            var Startdate = new Date(folder.StartDate);
            var Enddate = new Date(folder.LastDate);
            var SMonth = Startdate.getMonth() + 1;
            var EMonth = Enddate.getMonth() + 1;
            var Ocurrs = folder.Values != null ? folder.Values.length : 1;
            milestoneoccur = Ocurrs;
            milestoneRecur = recurence;
            milestoneRecurCusString = recurenceCustomString;
            var dtStartdate = "";

            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
            { dtStartdate = moment(new Date(folder.StartDate)).format('MM/DD/YYYY'); }
            else { dtStartdate = moment(new Date(folder.StartDate)).format(localStorage.AppDateFormat); }

            var dtEnddate = "";

            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
            { dtEnddate = moment(new Date(folder.LastDate)).format('MM/DD/YYYY'); }
            else { dtEnddate = moment(new Date(folder.LastDate)).format(localStorage.AppDateFormat); }
            $('#MilestoneOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + Ocurrs + " instances)")

        },
        error:
            function (data) {
                isExist = false;
            }
    });
}

function GetMilestoneDataFinal(customstring) {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))

    }
    var startDateNew = new Date();
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    listMilestoneNewStartDate = fMilestoneDateNew;

    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {

        if (listMilestoneNewEndDate != "Not Available") {
            if ($("#ddlMilestoneOccurencess option:selected").val() == "Weekly") {
                var newTestDateNew2 = new Date();
                milestoneRecur = "Weekly";
                var sta = false;
                var OCount = 1;
                var Cus = "";
                var CustomRecWeekly = [];
                $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                    CustomRecWeekly.push(this.value);
                    Cus += (this.value) + ",";
                });

                var selectedstartdate = new Date(listMilestoneNewStartDate);

                for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                    if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                        recst = new Date(listMilestoneNewStartDate);
                        newTestDateNew2 = new Date(listMilestoneNewStartDate);
                        sta = true;
                        break;
                    }
                }
                if (!sta) {

                    var newTestDate = new Date(listMilestoneNewStartDate);
                    var newdate = new Date(listMilestoneNewStartDate);
                    for (var s = 0; s < 6; s++) {
                        newdate.setDate(newdate.getDate() + 1);
                        newTestDate.setDate(newTestDate.getDate() + 1);
                        for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                            if (newdate.getDay() == CustomRecWeekly[crw1]) {
                                recst = newdate;
                                newTestDateNew2 = newTestDate;
                                sta = true;
                                break;
                            }
                        }
                        if (sta) {
                            break;
                        }

                    }
                }

                reced = new Date(listMilestoneNewEndDate);


                if (reced >= recst) {
                    //Get 1 day in milliseconds
                    var one_day = 1000 * 60 * 60 * 24;

                    // Convert both dates to milliseconds
                    var date1_ms = recst.getTime();
                    var date2_ms = reced.getTime();

                    // Calculate the difference in milliseconds
                    var difference_ms = date2_ms - date1_ms;

                    // Convert back to days and return
                    var diff = Math.round(difference_ms / one_day);

                    var newCustomdate = newTestDateNew2;

                    for (var s1 = 0; s1 < diff; s1++) {
                        newCustomdate.setDate(newCustomdate.getDate() + 1);
                        for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                            if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                                OCount = OCount + 1;
                            }
                        }
                    }

                    milestoneoccur = OCount;
                }
                else {
                    milestoneoccur = 0;
                }
                Cus = removeLastChar(Cus, ',');

                if (milestoneoccur > 54) {
                    milestoneoccur = $('#txtMilestoneOccurrenceCount').val();
                    $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                    $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                    $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
                    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                        userFlag = true;
                    } else {
                        userFlag = false;
                    }
                }


                milestoneRecurCusString = Cus;
                //String need to be Added for Custom

            }
            else if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
                var newstartrecdate = new Date(listMilestoneNewStartDate);
                milestoneRecur = "Monthly";
                var selectedstartdateNewCustom = new Date(listMilestoneNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listMilestoneNewEndDate);


                var occnew = 0;

                if (reced >= newstartrecdate) {
                    while (reced >= newstartrecdate) {
                        newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlMilestoneRepeatMonthly option:selected").val())));
                        occnew = parseInt(occnew) + parseInt(1);
                    }

                    milestoneoccur = occnew;
                }
                else {
                    milestoneoccur = 0;
                }

                if (milestoneoccur > 54) {
                    milestoneoccur = $('#txtMilestoneOccurrenceCount').val();
                    $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                    $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                    $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
                    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                        userFlag = true;
                    } else {
                        userFlag = false;
                    }
                }


                milestoneRecurCusString = recst.getDate();
                //String need to be Added for Custom


            }
            else {
                var newstartrecdate = new Date(listMilestoneNewStartDate);
                milestoneRecur = "Yearly";
                var selectedstartdateNewCustom = new Date(listMilestoneNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listMilestoneNewEndDate);


                var occnew = 0;

                if (reced >= newstartrecdate) {

                    while (reced >= newstartrecdate) {
                        newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                        occnew = parseInt(occnew) + parseInt(1);
                    }
                    milestoneoccur = occnew;


                }
                else {
                    milestoneoccur = 0;
                }

                if (milestoneoccur > 54) {
                    milestoneoccur = $('#txtMilestoneOccurrenceCount').val();
                    $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                    $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                    $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
                    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                        userFlag = true;
                    } else {
                        userFlag = false;
                    }
                }

                milestoneRecurCusString = recst.getFullYear();

            }
            startDateNew = new Date(Number(recst.getFullYear()), Number(recst.getMonth()), Number(recst.getDate()), Number(00), Number(00), Number(00), Number(00));
            startDateNew = formatDate(startDateNew);






        }
        else {
            occurences = $("#txtMilestoneOccurrenceCount").val();
            milestoneRecur = $("#ddlMilestoneOccurencess").val();
            milestoneRecurCusString = "";

            if (customstring != "") {
                milestoneRecurCusString = customstring;
            }
            else {
                $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                    milestoneRecurCusString += (this.value) + ",";
                });
                milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
            }

            startDateNew = formatDate(listMilestoneNewStartDate);

        }


        if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlMilestoneRepeatMonthly option:selected").val();
        }

        if (milestoneoccur > 0) {
            getOcurrenceValuesForMilestone(milestoneRecur, milestoneoccur, startDateNew, milestoneRecurCusString, customstringnew)

        }
        else {

            swal("", "contract is expired by selected date.");
        }


    }
    else {

        occurences = $("#txtMilestoneOccurrenceCount").val();
        milestoneRecur = $("#ddlMilestoneOccurencess").val();
        milestoneRecurCusString = "";

        if (customstring != "") {
            milestoneRecurCusString = customstring;
        }
        else {
            $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                milestoneRecurCusString += (this.value) + ",";
            });
            milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
        }

        startDateNew = formatDate(listMilestoneNewStartDate);
        if ($("#ddlMilestoneOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlMilestoneRepeatMonthly option:selected").val();
        }
        if (parseInt(occurences) == 0 || occurences == "" || occurences == null) {
            occurences = 1;
        }

        getOcurrenceValuesForMilestone(milestoneRecur, occurences, startDateNew, milestoneRecurCusString, customstringnew);

    }








}



//Newly Added Milestone Methods Start



$("input:radio[name=SelectMilestoneOccurenceEndDate]").change(function () {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))

    }
    var recurenceCustomString = "";
    var Cus = "";
    var date = new Date(fMilestoneDateNew);
    var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();

    }
    else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();

    }
    else {
        $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }



    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {

        GetMilestoneDataFinal(Cus);

    } else {

        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }
        userFlag = false;
        var recurenceCustomString = "";

        if (Cus != "") {
            recurenceCustomString = Cus;
        }
        else {
            $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }

        var cusRecMonthstring = "";
        if ($("#ddlMilestoneOccurencess").val() == "Monthly") {
            cusRecMonthstring = $("#ddlMilestoneRepeatMonthly option:selected").val();
        }


        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, recurenceCustomString, cusRecMonthstring);
    }
});



//Event Of Text Box count Change Event

$("#txtMilestoneOccurrenceCount").focusout(function () {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))

    }
    if ($("#txtMilestoneOccurrenceCount").val() != "" && $('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'Custom') {

        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0) {
            $('#lblerrorreclimitMilestoneNotZero').css('display', '');
            $('#lblerrorreclimitMilestone').css('display', 'none');
        }
        else {
            $('#lblerrorreclimitMilestoneNotZero').css('display', 'none');
            if (parseInt($("#txtMilestoneOccurrenceCount").val()) > 54) {
                $('#lblerrorreclimitMilestone').css('display', '');
            }
            else {
                //$('#lblerrorreclimitMilestone').css('display', 'none');
                var date = new Date(fMilestoneDateNew);

                var recurenceCustomString = "";
                var Cus = "";
                var cusRecMon = "";
                var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
                if (ocurrTxtnew == "Monthly") {
                    Cus = date.getDay();
                    cusRecMon = $("#ddlMilestoneRepeatMonthly option:selected").val();
                }
                else if (ocurrTxtnew == "Yearly") {
                    Cus = date.getFullYear();

                }
                else {
                    $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                        Cus += (this.value) + ",";
                    });
                    Cus = removeLastChar(Cus, ',');
                }
                milestoneoccur = $("#txtMilestoneOccurrenceCount").val();
                milestoneRecur = $("#ddlMilestoneOccurencess").val();
                milestoneRecurCusString = "";

                if (Cus != "") {
                    milestoneRecurCusString = Cus;
                }
                else {
                    $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                        milestoneRecurCusString += (this.value) + ",";
                    });
                    milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
                }
                getOcurrenceValuesForMilestone(milestoneRecur, milestoneoccur, listMilestoneNewStartDate, milestoneRecurCusString, cusRecMon);


            }

        }
    }

});





$("#dtMilestoneDateNew").focusout(function () {

    if ($("#dtMilestoneDateNew").val() != "") {

    }
    else {
        document.getElementById("ddlMilestoneOccurencess").disabled = true;
        $("#ddlMilestoneOccurencess").val("None");
        $('#dtMilestoneNewOccurrenceDueDate').val("");
        $('#divMilestoneOcurrenceMonthly').css('display', 'none');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', 'none');

        $('#dvMilestoneOcurrenceEnd').css('display', 'none');
        $("#ddlMilestoneRepeatMonthly").val("1");
    }

});



//Weekly Change Event Of Check Box

$("input:checkbox[name=chkMilestoneRecurWeekly]").change(function () {
    GetMilestonedynamicRecurrenceCount();
    milestoneRecurCusString = "";
    var Cus = "";
    var cusRecMon = "";
    var ocurrTxtnew = $("#ddlMilestoneOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        cusRecMon = $("#ddlMilestoneRepeatMonthly option:selected").val();
    }
    else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();

    }
    else {
        $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }



    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {



        GetMilestoneDataFinal(Cus);

    } else {

        milestoneRecurCusString = "";

        if (Cus != "") {
            milestoneRecurCusString = Cus;
        }
        else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                milestoneRecurCusString += (this.value) + ",";
            });
            milestoneRecurCusString = removeLastChar(milestoneRecurCusString, ',');
        }
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }

        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, milestoneRecurCusString, cusRecMon);
    }
});


$("#ddlMilestoneRepeatMonthly").change(function (obj) {
    GetMilestonedynamicRecurrenceCount();
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'))

    }
    var Cus = "";
    var customstring = "";
    var date = new Date(fMilestoneDateNew);
    if ($("#ddlMilestoneOccurencess").val() == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fMilestoneDateNew)

        $('#dtMilestoneNewOccurrenceDueDate').val(abc.getDate());
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');

        $('#lblMilestoneOcurrenceMonth').css('display', '');
        $('#lblMilestoneOcurrenceYear').css('display', 'none');




        $('#divMilestoneOcurrenceSummary').css('display', '');
        customstring = $("#ddlMilestoneRepeatMonthly").val();
        $('#dvMilestoneOcurrenceEnd').css('display', '');


    }
    else if ($("#ddlMilestoneOccurencess").val() == "Yearly") {
        var abc = new Date(fMilestoneDateNew)
        $('#dtMilestoneNewOccurrenceDueDate').val(abc.getDate());
        $('#dtMilestoneOcurrMonthforYear').val(monthNames[abc.getMonth()]);
        $('#dtMilestoneOcurrDateforYear').val(abc.getDate());
        $('#divMilestoneOcurrenceMonthly').css('display', '');
        $('#divMilestoneOcurrenceWeekly').css('display', 'none');
        $('#divMilestoneOcurrenceSummary').css('display', '');
        customstring = $("#ddlMilestoneRepeatMonthly").val();
        $('#dvMilestoneOcurrenceEnd').css('display', '');
        $('#lblMilestoneOcurrenceMonth').css('display', 'none');
        $('#lblMilestoneOcurrenceYear').css('display', '');
    }
    if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'TillEnd') {

        GetMilestoneDataFinal(Cus);
    }
    else {
        if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0 || $("#txtMilestoneOccurrenceCount").val() == "" || $("#txtMilestoneOccurrenceCount").val() == null) {
            $("#txtMilestoneOccurrenceCount").val('1');
        }

        getOcurrenceValuesForMilestone($("#ddlMilestoneOccurencess").val(), $("#txtMilestoneOccurrenceCount").val(), listMilestoneNewStartDate, Cus, customstring);

    }

});





$("#ddlMilestoneTypeNew").change(function (obj) {

    if ($("#ddlMilestoneTypeNew").val() != "0") {
        var string1 = $("#ddlMilestoneTypeNew").val();
        var string2 = string1 + " for " + $("#lblContractTitle").text();

        if ($('#txtMilestoneTitleNew').val() == null || $('#txtMilestoneTitleNew').val() == "") {
            $('#txtMilestoneTitleNew').val(string2)
        }
        else {

            var update = false;
            var oldString = "";
            $("#ddlMilestoneTypeNew option").each(function () {
                if ($(this).val() != 0) {
                    var value = $(this).val() + " for";

                    if ($('#txtMilestoneTitleNew').val().indexOf(value) > -1) {
                        oldString = $(this).val();
                        update = true;
                    }

                }
            });

            if (update) {
                string2 = string1 + " " + $('#txtMilestoneTitleNew').val().substring(($('#txtMilestoneTitleNew').val().indexOf(" for ")) + 1);

                $('#txtMilestoneTitleNew').val(string2)
            }

        }

    }
    else {
        if ($('#txtMilestoneTitleNew').val() == null || $('#txtMilestoneTitleNew').val() == "") {
            $('#txtMilestoneTitleNew').val("")
        }

    }
});



var vMilestoneEditStatus = "";

$('#amilestoneRecNoneEdit').click(function () {
    vMilestoneEditStatus = "CHANGERECURRENCE";
    $("#liMilestoneRecurrence").css('display', '');
    $("#divMilestoneOcurrenceSummary").css('display', 'none');
    document.getElementById("ddlMilestoneOccurencess").disabled = false;
    document.getElementById("dtMilestoneDateNew").disabled = false;

    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');
    //manoj
    if (userFlag) {
        if (userFlagCustom) {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        }
        else {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurence").prop("checked", true);
            $('#rdMilestoneNewEndOccurenceUser').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        }
    } else {
        $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
    }
    //manoj
    //$('input[type="radio"][name=SelectMilestoneOccurenceEndDate]').removeAttr('disabled');

});

$('#amilestoneRecEdit').click(function () {
    vMilestoneEditStatus = "EDITRECURRENCE";

    if ($("#ddlMilestoneOccurencess").val() == "None") {

        $("#liMilestoneRecurrence").css('display', '');
        $("#divMilestoneOcurrenceSummary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;

    }
    else if ($("#ddlMilestoneOccurencess").val() == "Weekly") {
        $("#divMilestoneOcurrenceWeekly").css('display', '');
        $("#divMilestoneOcurrenceMonthly").css('display', 'none');
        $("#ddlMilestoneRepeatMonthly").css('display', 'none');

        $("#lblMilestoneOcurrenceMonth").css('display', 'none');
        $("#lblMilestoneOcurrenceYear").css('display', 'none');

        $("#divMilestoneOcurrenceSummary").css('display', '');
        $("#milestoneEditOcursumary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
        document.getElementById("dtMilestoneDateNew").disabled = false;
        $("#dvMilestoneOcurrenceEnd").css('display', '');
        $("#liMilestoneRecurrence").css('display', '');
    }
    else if ($("#ddlMilestoneOccurencess").val() == "Monthly") {
        $("#divMilestoneOcurrenceWeekly").css('display', 'none');
        $("#divMilestoneOcurrenceMonthly").css('display', '');
        $("#ddlMilestoneRepeatMonthly").css('display', '');

        $("#lblMilestoneOcurrenceMonth").css('display', '');
        $("#lblMilestoneOcurrenceYear").css('display', 'none');

        $("#divMilestoneOcurrenceSummary").css('display', '');
        $("#milestoneEditOcursumary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
        document.getElementById("dtMilestoneDateNew").disabled = false;
        $("#dvMilestoneOcurrenceEnd").css('display', '');
        $("#liMilestoneRecurrence").css('display', '');
    }
    else {
        $("#divMilestoneOcurrenceWeekly").css('display', 'none');
        $("#divMilestoneOcurrenceMonthly").css('display', '');
        $("#ddlMilestoneRepeatMonthly").css('display', 'none');

        $("#lblMilestoneOcurrenceMonth").css('display', 'none');
        $("#lblMilestoneOcurrenceYear").css('display', '');

        $("#divMilestoneOcurrenceSummary").css('display', '');
        $("#milestoneEditOcursumary").css('display', 'none');
        document.getElementById("ddlMilestoneOccurencess").disabled = false;
        document.getElementById("dtMilestoneDateNew").disabled = false;


        $("#dvMilestoneOcurrenceEnd").css('display', '');
        $("#liMilestoneRecurrence").css('display', '');
    }

    //document.getElementById("rdMilestoneNewEndOccurenceUser").disabled = false;
    //manoj
    if (userFlag) {
        if (userFlagCustom) {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);
            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        }
        else {
            $("#rdMilestoneNewEndOccurence").removeAttr('disabled');
            $("#rdMilestoneNewEndOccurence").prop("checked", true);
            $('#rdMilestoneNewEndOccurenceUser').removeAttr('checked');
            $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
        }
    } else {
        $("#rdMilestoneNewEndOccurenceUser").removeAttr('disabled');
    }
    //manoj
    //$('input[type="radio"][name=SelectMilestoneOccurenceEndDate]').removeAttr('disabled');


    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');

});






//Newly Added Milestone Methods End



function clearMilestoneFormDataNew() {
    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');
    $("#txtMilestoneNewText").val("");
    $("#txtMilestoneIDNew").val("");
    $("#txtMilestoneTitleNew").val("");
    $('#ddlMilestoneTypeNew').val("0");
    $("#dtMilestoneDateNew").val("");
    $("#ddlMilestoneNewPriority").val("Medium");
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (projMgrs != "" && vAccFeat.length > 0) {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "{Project Managers}");
    } else {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "");
    }

    $("#txtReminder1MilestoneNew").val("");
    $("#txtReminder2MilestoneNew").val("");
    $("#txtReminder3MilestoneNew").val("");
    $("#ddlReminder1MilestoneNew").val("before");
    $("#ddlReminder2MilestoneNew").val("before");
    $("#ddlReminder3MilestoneNew").val("before");
    $("#hdnCustomDateFieldName").text('');
    $("#lblCTitleNew").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlMilestoneOwnerNew", $("#licontractmanagers").text() + ';' + projMgrs);

    GetValuesAndAutoPopulate("ddlSendReminderToNew", $("#licontractmanagers").text() + ';' + projMgrs);

    $("#ddlMilestoneNewStatus").removeClass("error");

    $('#ddlMilestoneNewStatus').val('Upcoming');

    $('#ddlMilestoneOccurencess').val('None');

    $("#dtMilestoneNewCompletedDate").val("");

    $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
        var Id = this.id;
        $("#" + Id).css('outline', '');
    });

}

function AddMilestoneMoreNew() {
    clearMilestoneFormDataNew();
    listMilestoneNewData = "";
    $("#txtMilestoneIDNew").val("");
    $("#txtMilestoneTitleNew").val("");
    $('#ddlMilestoneTypeNew').val("0");
    $("#dtMilestoneDateNew").val("");
    $("#ddlMilestoneNewPriority").val("Medium");
    //manoj
    $("#txtMileDescriptionNew").val('');
    $('input[type="radio"][name="ShowInCalendarNew"][value="Yes"]').prop('checked', true);
    //manoj
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (projMgrs != "" && vAccFeat.length > 0) {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "{Project Managers}");
    } else {
        GetValuesAndAutoPopulate("ddlSendReminderToNew", "");
    }
    $("#milestonenewheading").text("New Milestone");
    $('input[type="radio"][name="MilestoneNewAutoComplete"][value="Yes"]').prop('checked', true);
    $("#dtMilestoneNewCompletedDate").val("");
    $("#amilestoneCRecurrence").css('display', 'none');
    $("#amilestoneESeries").css('display', 'none');
    $("#amilestoneERecurrence").css('display', 'none');
    $("#ulMilestoneNewCompletedDate").css('display', 'none');

    $("#liMilestoneRecurrence").css('display', '');

    var strEndDate = "";
    $('#txtMilestoneOccurrenceCount').val("12");

    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {

        strEndDate = new Date(contractItem.EndDate);
        listMilestoneNewEndDate = strEndDate;
        $('#MilestoneNewOcurrenceEndDate').text("");
        var MNewEndDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format('MM/DD/YYYY'); }
        else { MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format(localStorage.AppDateFormat); }

        $('#MilestoneNewOcurrenceEndDate').text(" (" + MNewEndDate + ")");
        $("#rdMilestoneNewEndOccurence").prop("checked", true);
    }
    else {
        listMilestoneNewEndDate = "Not Available";
        $('#MilestoneNewOcurrenceEndDate').text("");
        $('#MilestoneNewOcurrenceEndDate').text(" (" + listMilestoneNewEndDate + ")");
        $("#rdMilestoneNewEndOccurence").attr('disabled', true);
        $('#rdMilestoneNewEndOccurence').removeAttr('checked');
        $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);


    }
    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
    $("#divMilestoneOcurrenceMonthly").css('display', 'none');

    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
    $("#divMilestoneOcurrenceSummary").css('display', 'none');

    document.getElementById("ddlMilestoneOccurencess").disabled = true;
    document.getElementById("dtMilestoneDateNew").disabled = false;

    $("#amilestoneRecNoneEdit").css('display', 'none');
    $("#amilestoneRecEdit").css('display', 'none');
    //*Harshitha
    if (defaultGlobalSettings != null && defaultGlobalSettings != "") {
        var milestoneReminder = defaultGlobalSettings.MilestoneReminders;
        var xmlDoc = $.parseXML(milestoneReminder);
        var $xml = $(xmlDoc);
        var $reminder = $xml.find("reminder");
        var j = 1;
        $reminder.each(function () {
            var beforeSplit = $(this).text();
            var remSplit = beforeSplit.split(/ +/);
            $("#ddlReminder" + j + "MilestoneNew").val(remSplit[0]);
            $("#txtReminder" + j + "MilestoneNew").val(remSplit[1]);
            j = j + 1;
        });
    }

    $("#lblCTitleNew").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlMilestoneOwnerNew", $("#licontractmanagers").text() + ';' + projMgrs);
    GetValuesAndAutoPopulate("ddlSendReminderToNew", $("#licontractmanagers").text() + ';' + projMgrs);
    $("#lblerrorreclimitMilestone").css('display', 'none');
    $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');
    if (IsPipeline) {
        $("#AlertMile").val('No').change();
        $("#AlertObli").val('No').change();
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")

    }
    else {
        $("#AlertMile").val('Yes').change();
        $("#AlertObli").val('No').change();
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders");

    }
    $("#addEditMilestoneNew").dialog("option", "title", "");
    $("#addEditMilestoneNew").dialog("open");
    $("#addEditMilestoneNew").height("auto");

}
//*Harshitha
function DefaultGlobalsettingsDP() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/GlobalSettings?accountid=' + localStorage.AccountID,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        contentType: 'application/json',
        cache: false,
        success: function (status) {
            //*Harshitha 
            localStorage.setItem("RestrictHighSecurityTagging", status.RestrictHighSecurityTagging);
            defaultGlobalSettings = status;
            if (status == null) {
                $("#Upcoming").css("display", "none");
                $("#Delayed").css("display", "none");
            } else {
                $("#hdRenewalRemindersGlobal").val(status.RenewalReminders);
                if (status.CreateCounterpartyDocument == "Yes") {
                    $("#Upcoming").css("display", "");
                    $("#Delayed").css("display", "");
                }
                else {
                    $("#Upcoming").css("display", "none");
                    $("#Delayed").css("display", "none");
                }
            }
        },
        error: function (status) {
            localStorage.setItem("RestrictHighSecurityTagging", "No");
        }
    });
}

function AddMilestoneMore() {
    $("#txtMilestoneID").val("");
    $("#txtMilestoneTitle").val("");
    $("#txtMileDescription").val("");
    $('#ddlMilestoneType').val("0");
    $("#dtMilestoneDate").val("");
    $("#dtMilestoneCompletedDate").val("");
    $('#trMilestoneCompletedDate').css('display', 'none');
    $('input[type="radio"][name="MilestoneAutoComplete"][value="Yes"]').prop('checked', true);
    $('input[type="radio"][name="MilestoneCompleted"][value="No"]').prop('checked', true);
    $('input[type="radio"][name="Priority"][value="High"]').prop('checked', true);
    $('input[type="radio"][name="ShowInCalendar"][value="Yes"]').prop('checked', true);
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (projMgrs != "" && vAccFeat.length > 0) {
        GetValuesAndAutoPopulate("ddlSendReminderTo", "{Project Managers}");
    } else {
        GetValuesAndAutoPopulate("ddlSendReminderTo", "");
    }
    $("#txtReminder1").val("");
    $("#txtReminder2").val("");
    $("#txtReminder3").val("");
    $("#ddlReminder1").val("before");
    $("#ddlReminder2").val("before");
    $("#ddlReminder3").val("before");

    $("#lblCTitle").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlMilestoneOwner", $("#licontractmanagers").text() + ';' + projMgrs);


    $('#milestoneInline').slideToggle();


    $("#addEditMilestone").dialog("option", "title", "New Milestone");
    $("#addEditMilestone").dialog("open");
    $("#addEditMilestone").height("auto");
}



function contextMenuMilestone(action, el, pos) {

    switch (action) {
        case "view":
            {
                var milestoneID = $(el).find("#MilestoneID").text();
                ViewMilestineDetail(milestoneID);
                break;
            }
        case "delete":
            {
                var milestoneTitle = $(el).find("#MilestoneTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + milestoneTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var milestoneID = $(el).find("#MilestoneID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + milestoneID,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {
                     $("#loadingPage").fadeOut();
                     BindMilestone();

                 }
             });
         }
         return;
     });
                break;
            }
        case "edit":
            {
                $('#addEditMilestoneNew').dialog('widget').find('.ui-dialog-buttonpane .ui-button:button:contains("Add") .pop_up_Content_Green ').html("Save");
                clearMilestoneFormDataNew();
                listMilestoneNewData = "";
                $("#loadingPage").fadeIn();
                var milestoneID = $(el).find("#MilestoneID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + milestoneID,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (milestoneentity) {
                        //manoj
                        $("#hdnCustomDateFieldName").text(milestoneentity.CustomDateFieldName);
                        //manoj
                        $("#milestonenewheading").text("Edit Milestone");
                        $("#dtMilestoneDateNew").val("");
                        if (milestoneentity.MilestoneDate != null) {
                            var duedate = '';
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { duedate = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                            else {
                                if (localStorage.AppDateFormat == 'DD/MM/YYYY') { duedate = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                                else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { duedate = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                            }

                            $('#dtMilestoneDateNew').datepicker('setDate', duedate);
                            listMilestoneNewStartDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));

                            //$("#dtMilestoneDateNew").val(duedate);
                            //listMilestoneNewStartDate = duedate;

                            var newDate = new Date(milestoneentity.MilestoneDate);
                            $("#dtMilestoneOcurrMonthforYear").val(monthNames[newDate.getMonth()]);
                            $("#dtMilestoneOcurrDateforYear").val(newDate.getDate());
                            $("#dtMilestoneNewOccurrenceDueDate").val(newDate.getDate());
                        }
                        $("#txtMilestoneIDNew").val(milestoneentity.RowKey);
                        $("#txtMilestoneNewText").val(milestoneentity.MilestoneText);
                        $("#txtMilestoneTitleNew").val(milestoneentity.MilestoneTitle);
                        $("#txtMileDescriptionNew").val(milestoneentity.MilestoneDescription);
                        if (milestoneentity.ShowInCalendar == "No") {
                            $('input[type="radio"][name="ShowInCalendarNew"][value="No"]').prop('checked', true);
                        }
                        else {
                            $('input[type="radio"][name="ShowInCalendarNew"][value="Yes"]').prop('checked', true);
                        }
                        if (milestoneentity.MilestoneType != '') {
                            $("#ddlMilestoneTypeNew option").filter(function (index) { return $(this).text() === milestoneentity.MilestoneType; }).prop('selected', true);
                        }
                        else {
                            $("#ddlMilestoneTypeNew").val('0')
                        }


                        GetValuesAndAutoPopulate("ddlMilestoneOwnerNew", milestoneentity.MilestoneOwner);
                        GetValuesAndAutoPopulate("ddlSendReminderToNew", milestoneentity.SendReminderTo);

                        if (milestoneentity.Reminder1 != null && milestoneentity.Reminder1 != "" && milestoneentity.Reminder1 != 0) {
                            $("#txtReminder1MilestoneNew").val(milestoneentity.Reminder1);
                        }
                        else {
                            $("#txtReminder1MilestoneNew").val("");
                        }

                        if (milestoneentity.Reminder2 != null && milestoneentity.Reminder2 != "" && milestoneentity.Reminder2 != 0) {
                            $("#txtReminder2MilestoneNew").val(milestoneentity.Reminder2);
                        }
                        else {
                            $("#txtReminder2MilestoneNew").val("");
                        }
                        if (milestoneentity.Reminder3 != null && milestoneentity.Reminder3 != "" && milestoneentity.Reminder3 != 0) {
                            $("#txtReminder3MilestoneNew").val(milestoneentity.Reminder3);
                        }
                        else {
                            $("#txtReminder3MilestoneNew").val("");
                        }

                        if (milestoneentity.Reminder1Condition != '') {
                            $("#ddlReminder1MilestoneNew option").filter(function (index) { return $(this).text() === milestoneentity.Reminder1Condition; }).prop('selected', true);
                        }
                        else {
                            $("#ddlReminder1MilestoneNew").val('before')
                        }
                        if (milestoneentity.Reminder2Condition != '') {
                            $("#ddlReminder2MilestoneNew option").filter(function (index) { return $(this).text() === milestoneentity.Reminder2Condition; }).prop('selected', true);
                        }
                        else {
                            $("#ddlReminder2MilestoneNew").val('before')
                        }
                        if (milestoneentity.Reminder3Condition != '') {
                            $("#ddlReminder3MilestoneNew option").filter(function (index) { return $(this).text() === milestoneentity.Reminder3Condition; }).prop('selected', true);
                        }
                        else {
                            $("#ddlReminder3MilestoneNew").val('before')
                        }


                        if (milestoneentity.Priority != '') {

                            $("#ddlMilestoneNewPriority option").filter(function (index) { return $(this).text() === milestoneentity.Priority; }).prop('selected', true);

                        }
                        else {
                            $("#ddlMilestoneNewPriority").val('Medium')

                        }

                        if (milestoneentity.MilestoneCompleted != '') {
                            if (milestoneentity.MilestoneCompleted == "No") {
                                $('#ulMilestoneNewCompletedDate').css('display', 'none');
                            }
                        }
                        else {
                            $('#ulMilestoneNewCompletedDate').css('display', 'none');
                        }

                        if (milestoneentity.MilestoneCompletedDate != null && milestoneentity.MilestoneCompletedDate != '') {
                            var completedate = '';

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { completedate = milestoneentity.MilestoneCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                            else {
                                if (localStorage.AppDateFormat == 'DD/MM/YYYY') { completedate = milestoneentity.MilestoneCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                                else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { completedate = milestoneentity.MilestoneCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                            }
                            $("#dtMilestoneNewCompletedDate").val(completedate);
                        }
                        else {
                            $("#dtMilestoneNewCompletedDate").val('')
                        }

                        if (milestoneentity.AutoComplete == "No") {
                            $('input[type="radio"][name="MilestoneNewAutoComplete"][value="No"]').prop('checked', true);
                        }
                        else {
                            $('input[type="radio"][name="MilestoneNewAutoComplete"][value="Yes"]').prop('checked', true);
                        }

                        var strEndDate = "";


                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                            strEndDate = new Date(contractItem.EndDate);
                            listMilestoneNewEndDate = formatDate(strEndDate);
                            $('#MilestoneNewOcurrenceEndDate').text("");
                            var MNewEndDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format('MM/DD/YYYY'); }
                            else { MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format(localStorage.AppDateFormat); }

                            $('#MilestoneNewOcurrenceEndDate').text(" (" + MNewEndDate + ")");
                            $("#rdMilestoneNewEndOccurence").prop("checked", true);
                        }
                        else {
                            listMilestoneNewEndDate = "Not Available";
                            $('#MilestoneNewOcurrenceEndDate').text("");
                            $('#MilestoneNewOcurrenceEndDate').text(" (" + listMilestoneNewEndDate + ")");
                            $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                            $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                            $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);


                        }

                        if (milestoneentity.MilestoneEndTerm != null && milestoneentity.MilestoneEndTerm != '') {
                            $('input[type="radio"][name="SelectMilestoneOccurenceEndDate"][value="' + milestoneentity.MilestoneEndTerm + '"]').prop('checked', true);

                        }
                        else {
                            $('input[type="radio"][name="SelectMilestoneOccurenceEndDate"][value="Custom"]').prop('checked', true);

                        }
                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                            userFlag = true;
                        } else {
                            userFlag = false;
                        }

                        if (milestoneentity.MilestoneEndTerm == "Custom") {
                            userFlagCustom = true;
                            $("#txtMilestoneOccurrenceCount").val(milestoneentity.Ocurrences);

                        }
                        else {
                            $("#txtMilestoneOccurrenceCount").val("12");
                        }

                        if (milestoneentity.Ocurrences == null && milestoneentity.Ocurrences == "") {
                            $("#txtMilestoneOccurrenceCount").val("1");
                        }



                        if (milestoneentity.MilestoneDate != null && milestoneentity.MilestoneDate != '' && milestoneentity.MilestoneStartDate != null && milestoneentity.MilestoneStartDate != '') {
                            var dtStartdate;

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { dtStartdate = moment(new Date(milestoneentity.MilestoneStartDate)).utc().format('MM/DD/YYYY'); }
                            else { dtStartdate = moment(new Date(milestoneentity.MilestoneStartDate)).utc().format(localStorage.AppDateFormat); }

                            var dtEnddate;

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { dtEnddate = moment(new Date(milestoneentity.MilestoneEndDate)).utc().format('MM/DD/YYYY'); }
                            else { dtEnddate = moment(new Date(milestoneentity.MilestoneEndDate)).utc().format(localStorage.AppDateFormat); }

                            $('#MilestoneOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + milestoneentity.Ocurrences + " instances)")

                            document.getElementById("ddlMilestoneOccurencess").disabled = true;
                            $('input[type="radio"][name=SelectMilestoneOccurenceEndDate]').attr("disabled", "disabled");

                            vMilestoneEditStatus = "";

                            var dateNew = new Date(milestoneentity.MilestoneDate);

                            $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
                                this.checked = false;
                            });
                            var day = dateNew.getDay()
                            var chkboxId = "MRC" + day;

                            $("#" + chkboxId).prop('checked', true);

                            if (milestoneentity.Recurrences != null && milestoneentity.Recurrences != "") {
                                $("#ddlMilestoneOccurencess option").filter(function (index) { return $(this).text() === milestoneentity.Recurrences; }).prop('selected', true);

                                if (milestoneentity.Recurrences == "Weekly") {


                                    $("#dtMilestoneDateNew").attr("disabled", "disabled");

                                    $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
                                        this.checked = false;

                                    });



                                    var strRecString = milestoneentity.CustomString.split(',');
                                    //var value = parseInt(strRecString);

                                    $(strRecString).each(function (index, element) {
                                        var value = parseInt(element);
                                        var chkboxId = "MRC" + value;
                                        $("#" + chkboxId).prop('checked', true);
                                    });

                                    //var chkboxId = "MRC" + value;

                                    //$("#" + chkboxId).prop('checked', true);

                                    $("#divMilestoneOcurrenceSummary").css('display', '');
                                    $("#milestoneEditOcursumary").css('display', '');

                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');

                                    $("#amilestoneRecNoneEdit").css('display', 'none');
                                    $("#amilestoneRecEdit").css('display', '');

                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');

                                    $("#liMilestoneRecurrence").css('display', 'none');



                                }
                                else if (milestoneentity.Recurrences == "None") {
                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');
                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceSummary").css('display', '');

                                    $("#milestoneEditOcursumary").css('display', '');


                                    $("#amilestoneRecNoneEdit").css('display', '');
                                    $("#amilestoneRecEdit").css('display', 'none');
                                    $("#liMilestoneRecurrence").css('display', 'none');
                                    $('#MilestoneOcurrenceSummary').text("(" + "Never" + ")")


                                }
                                else if (milestoneentity.Recurrences == "Monthly") {
                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');
                                    $("#ddlMilestoneRepeatMonthly").css('display', '');
                                    $("#ddlMilestoneRepeatMonthly").val(milestoneentity.RecMonthlyString);


                                    $("#dtMilestoneDateNew").attr("disabled", "disabled");


                                    $("#divMilestoneOcurrenceSummary").css('display', '');
                                    $("#milestoneEditOcursumary").css('display', '');


                                    $("#lblMilestoneOcurrenceMonth").css('display', '');
                                    $("#lblMilestoneOcurrenceYear").css('display', 'none');

                                    $("#amilestoneRecNoneEdit").css('display', 'none');
                                    $("#amilestoneRecEdit").css('display', '');
                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                                    $("#liMilestoneRecurrence").css('display', 'none');


                                }
                                else {
                                    $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                                    $("#divMilestoneOcurrenceMonthly").css('display', 'none');
                                    $("#ddlMilestoneRepeatMonthly").css('display', 'none');

                                    $("#lblMilestoneOcurrenceMonth").css('display', 'none');
                                    $("#lblMilestoneOcurrenceYear").css('display', '');


                                    $("#dtMilestoneDateNew").attr("disabled", "disabled");


                                    $("#divMilestoneOcurrenceSummary").css('display', '');
                                    $("#milestoneEditOcursumary").css('display', '');

                                    $("#amilestoneRecNoneEdit").css('display', 'none');
                                    $("#amilestoneRecEdit").css('display', '');
                                    $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                                    $("#liMilestoneRecurrence").css('display', 'none');

                                }

                            }
                        }
                        else {

                            if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                                strEndDate = new Date(contractItem.EndDate);
                                listMilestoneNewEndDate = formatDate(strEndDate);
                                $('#MilestoneNewOcurrenceEndDate').text("");
                                var MNewEndDate = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format('MM/DD/YYYY'); }
                                else { MNewEndDate = moment(new Date(listMilestoneNewEndDate)).utc().format(localStorage.AppDateFormat); }

                                $('#MilestoneNewOcurrenceEndDate').text(" (" + MNewEndDate + ")");
                                $("#rdMilestoneNewEndOccurence").prop("checked", true);
                            }
                            else {
                                listMilestoneNewEndDate = "Not Available";
                                $('#MilestoneNewOcurrenceEndDate').text("");
                                $('#MilestoneNewOcurrenceEndDate').text(" (" + listMilestoneNewEndDate + ")");
                                $("#rdMilestoneNewEndOccurence").attr('disabled', true);
                                $('#rdMilestoneNewEndOccurence').removeAttr('checked');
                                $("#rdMilestoneNewEndOccurenceUser").prop("checked", true);


                            }
                            $("#divMilestoneOcurrenceWeekly").css('display', 'none');
                            $("#divMilestoneOcurrenceMonthly").css('display', 'none');

                            $("#dvMilestoneOcurrenceEnd").css('display', 'none');
                            $("#divMilestoneOcurrenceSummary").css('display', 'none');

                            document.getElementById("ddlMilestoneOccurencess").disabled = true;

                            $("#ddlMilestoneOccurencess").val('None');

                            $("#amilestoneRecNoneEdit").css('display', 'none');
                            $("#amilestoneRecEdit").css('display', 'none');



                        }

                        if (milestoneentity.MilestoneStatus == "Complete" || milestoneentity.MilestoneCompleted == "Yes") {
                            if (milestoneentity.MilestoneCompletedDate != null && milestoneentity.MilestoneCompletedDate != "") {
                                var CDate;

                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { CDate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format('MM/DD/YYYY'); }
                                else { CDate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format(localStorage.AppDateFormat); }

                                $("#ulMilestoneNewCompletedDate").css('display', '');
                                $('#dtMilestoneNewCompletedDate').addClass('validelement');
                                $('#dtMilestoneNewCompletedDate').addClass('validdate');
                                $('#dtMilestoneNewCompletedDate').val(CDate);
                            }
                            else {
                                $("#ulMilestoneNewCompletedDate").css('display', '');
                                $('#dtMilestoneNewCompletedDate').addClass('validelement');
                                $('#dtMilestoneNewCompletedDate').addClass('validdate');
                                $('#dtMilestoneNewCompletedDate').val("");
                            }
                        }
                        else {
                            $("#ulMilestoneNewCompletedDate").css('display', 'none');
                            $('#dtMilestoneNewCompletedDate').removeClass('validelement');
                            $('#dtMilestoneNewCompletedDate').removeClass('validdate');
                            $('#dtMilestoneNewCompletedDate').val("");
                        }


                        if (milestoneentity.MilestoneDate != null && milestoneentity.MilestoneDate != '' && milestoneentity.MilestoneStartDate != null && milestoneentity.MilestoneStartDate != '') {

                            var updatedate1 = milestoneentity.MilestoneDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                            var updatedate2 = milestoneentity.MilestoneEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                            $('#mrepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrepupdaterecurrence').text("(" + updatedate1 + " to " + updatedate2 + ")");
                            $('#mrnepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrnepupdaterecurrence').text("(" + updatedate1 + " to " + updatedate2 + ")");

                        }
                        else {
                            var updatedate1 = "NotAvailable";

                            var updatedate2 = "NotAvailable";

                            $('#mrepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrepupdaterecurrence').text("(" + updatedate1 + ")");
                            $('#mrnepupdatesingle').text("(" + updatedate1 + ")");
                            $('#mrnepupdaterecurrence').text("(" + updatedate1 + ")");
                        }





                        $("#ddlMilestoneNewStatus").val(milestoneentity.MilestoneStatus);

                        $("#lblerrorreclimitMilestone").css('display', 'none');

                        $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');


                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });
                        if (milestoneentity.AlertsEnabled == "Yes") {
                            $("#AlertMile").val('Yes').change();
                            $("#AlertObli").val('Yes').change();
                            if (IsPipeline) {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn OFF reminders for milestone notifications, click <a href='javascript:void(0);' id='disableSwitch' onclick='disableMilestoneSwitch()'>Disable</a></span>")
                            }
                            else {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders");
                            }
                        }
                        else {
                            $("#AlertMile").val('No').change();
                            $("#AlertObli").val('No').change();
                            if (IsPipeline) {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")
                            }
                            else {
                                $("#reminderEnable").empty();
                                $("#reminderEnable").append("Reminders");
                            }
                        }
                        $("#addEditMilestoneNew").dialog("option", "title", "");
                        $("#addEditMilestoneNew").dialog("open");

                        $("#loadingPage").fadeOut();
                    },
                    error: function (milestoneentity) {
                        $("#inprocessMilestone").css('visibility', 'hidden');
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                        $("#lblCTitleNew").text($("#lblContractTitle").text());
                        $("#inprocessMilestone").css('visibility', 'hidden');
                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });
                        $("#lblerrorreclimitMilestone").css('display', 'none');
                        $("#lblerrorreclimitMilestoneNotZero").css('display', 'none');


                        $("#addEditMilestoneNew").dialog("option", "title", "");
                        $("#addEditMilestoneNew").dialog("open");
                        $("#addEditMilestoneNew").height("auto");
                    }
                });

                break;
            }
    }
}





function updateMilestonesRecurrenceNew(status) {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));
    }
    var fMilestoneNewCompletedDate = '';
    if ($("#dtMilestoneNewCompletedDate").val() != "" && $("#dtMilestoneNewCompletedDate").val() != null) {
        fMilestoneNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneNewCompletedDate").datepicker('getDate'));
    }
    if (status == "SINGLE") {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        if (requiredValidator('addNewMilestoneNew')) {
            $("#loadingPage").fadeIn();
            var strContractID = getParameterByName('ContractID');

            //do start and end date validation
            var cStartDate = "";
            var cEndDate = "";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                async: false,
                success: function (data) {
                    $(data).each(function (i, item) {
                        if (item.MilestoneTitle == "Start Date") {
                            cStartDate = item.MilestoneDate;
                        } else if (item.MilestoneTitle == "End Date") {
                            cEndDate = item.MilestoneDate;
                        }
                    });
                }
            });
            var datevalidationexists = false;
            if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                if (!comparedatesmile(fMilestoneDateNew, cEndDate)) {
                    datevalidationexists = true;
                }
            } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                if (!comparedatesmile(cStartDate, fMilestoneDateNew)) {
                    datevalidationexists = true;
                }
            }
            if (!datevalidationexists) {
                var start = moment(fMilestoneDateNew);
                var end = moment(new Date());
                var vv = start.diff(end, "days");
                var vRenminder = '';
                var swalFlag = false;
                var blUpdate = true;
                isformvalid = true;
                if (vv <= parseInt($("#txtReminder1New").val()) || vv <= parseInt($("#txtReminder2New").val()) || vv <= parseInt($("#txtReminder3New").val())) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
      function (confirmed) {
          if (confirmed) {
              var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
              var vMilestoneOwner = '';
              $(arrMilestoneOwner).each(function (i, item) {
                  if (vMilestoneOwner == '') {
                      vMilestoneOwner = item;
                  }
                  else {
                      vMilestoneOwner += "; " + item;
                  }
              });
              var SendReminderToArr = $("#ddlSendReminderToNew").val();
              var vSendReminderTo = '';
              $(SendReminderToArr).each(function (i, item) {
                  if (vSendReminderTo == '') {
                      vSendReminderTo = item;
                  }
                  else {
                      vSendReminderTo += "; " + item;
                  }
              });


              var MilestoneID = $("#txtMilestoneIDNew").val();
              var vMilestoneComplete = "No";
              var vCompleteddate = null;
              var vCompletedby = "";
              if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                  vMilestoneComplete = "Yes";
                  vCompleteddate = fMilestoneNewCompletedDate;
                  vCompletedby = localStorage.UserName;
              }

              var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();

              if (MilestoneID != "") {
                  $("#inprocessObligation").css('visibility', 'visible');
                  $.ajax({
                      url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                      type: 'POST',
                      dataType: 'json',
                      headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                      data: {
                          RowKey: MilestoneID,
                          ContractID: strContractID,
                          ContractTitle: $("#lblCTitleNew").text(),
                          MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                          MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                          MilestoneDate: fMilestoneDateNew,
                          MilestoneDescription: $("#txtMileDescriptionNew").val(),
                          AutoComplete: vMilestoneAutoComplete,
                          MilestoneOwner: vMilestoneOwner,
                          Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                          MilestoneCompleted: vMilestoneComplete,
                          MilestoneCompletedDate: vCompleteddate,
                          MilestoneCompletedBy: vCompletedby,
                          ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                          ModifiedBy: localStorage.UserName,
                          SendReminderTo: vSendReminderTo,
                          Reminder1: $("#txtReminder1MilestoneNew").val(),
                          Reminder2: $("#txtReminder2MilestoneNew").val(),
                          Reminder3: $("#txtReminder3MilestoneNew").val(),
                          Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                          Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                          Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                          MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                          AlertsEnabled: $("#AlertMile").val(),
                      },
                      cache: false,
                      success: function (person) {
                          $('.ui-button-green-text').parent().removeAttr('disabled');
                          $("#loadingPage").fadeOut();
                          $("#addEditMilestoneNew").dialog("close");

                          $("#milestonesRecurrenceEditPopup").dialog("close");
                          BindMilestone(vContractID);
                      },
                      complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                  });
              }

          }
          else {
              $('.ui-button-green-text').parent().removeAttr('disabled');
          }
          return;
      });

                }
                else {
                    swalFlag = true;
                }

            }
            if (swalFlag) {
                if (blUpdate) {
                    var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                    var vMilestoneOwner = '';
                    $(arrMilestoneOwner).each(function (i, item) {
                        if (vMilestoneOwner == '') {
                            vMilestoneOwner = item;
                        }
                        else {
                            vMilestoneOwner += "; " + item;
                        }
                    });
                    var SendReminderToArr = $("#ddlSendReminderToNew").val();
                    var vSendReminderTo = '';
                    $(SendReminderToArr).each(function (i, item) {
                        if (vSendReminderTo == '') {
                            vSendReminderTo = item;
                        }
                        else {
                            vSendReminderTo += "; " + item;
                        }
                    });


                    var MilestoneID = $("#txtMilestoneIDNew").val();
                    var vMilestoneComplete = "No";
                    var vCompleteddate = null;
                    var vCompletedby = "";
                    if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                        vMilestoneComplete = "Yes";
                        vCompleteddate = fMilestoneNewCompletedDate;
                        vCompletedby = localStorage.UserName;
                    }
                    var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();


                    if (MilestoneID != "") {
                        $("#inprocessObligation").css('visibility', 'visible');
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                            type: 'POST',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                            data: {
                                RowKey: MilestoneID,
                                ContractID: strContractID,
                                ContractTitle: $("#lblCTitleNew").text(),
                                MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                MilestoneDate: fMilestoneDateNew,
                                MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                AutoComplete: vMilestoneAutoComplete,
                                MilestoneOwner: vMilestoneOwner,
                                Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                MilestoneCompleted: vMilestoneComplete,
                                MilestoneCompletedDate: vCompleteddate,
                                MilestoneCompletedBy: vCompletedby,
                                ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                ModifiedBy: localStorage.UserName,
                                SendReminderTo: vSendReminderTo,
                                Reminder1: $("#txtReminder1MilestoneNew").val(),
                                Reminder2: $("#txtReminder2MilestoneNew").val(),
                                Reminder3: $("#txtReminder3MilestoneNew").val(),
                                Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                AlertsEnabled: $("#AlertMile").val(),
                            },
                            cache: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                $("#loadingPage").fadeOut();
                                $("#addEditMilestoneNew").dialog("close");

                                $("#milestonesRecurrenceEditPopup").dialog("close");
                                BindMilestone(vContractID);
                            },
                            complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                        });
                    }

                }
                else {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                }
            }
        }
    }
    else {


        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;
        if (requiredValidator('addNewMilestoneNew')) {
            $("#loadingPage").fadeIn();
            var strContractID = getParameterByName('ContractID');

            //do start and end date validation
            var cStartDate = "";
            var cEndDate = "";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                async: false,
                success: function (data) {
                    $(data).each(function (i, item) {
                        if (item.MilestoneTitle == "Start Date") {
                            cStartDate = item.MilestoneDate;
                        } else if (item.MilestoneTitle == "End Date") {
                            cEndDate = item.MilestoneDate;
                        }
                    });
                }
            });
            var datevalidationexists = false;
            if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                if (!comparedatesmile(fMilestoneDateNew, cEndDate)) {
                    datevalidationexists = true;
                    swal("", "Start date should be less than the end date milestone.");
                }
            } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                if (!comparedatesmile(cStartDate, fMilestoneDateNew)) {
                    datevalidationexists = true;
                    swal("", "End date should be greater than start date milestone.");
                }
            }
            if (!datevalidationexists) {
                var start = moment(fMilestoneDateNew);
                var end = moment(new Date());
                var vv = start.diff(end, "days");
                var vRenminder = '';
                var swalFlag = false;
                var blUpdate = true;
                isformvalid = true;
                if (vv <= parseInt($("#txtReminder1New").val()) || vv <= parseInt($("#txtReminder2New").val()) || vv <= parseInt($("#txtReminder3New").val())) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
      function (confirmed) {
          if (confirmed) {
              var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
              var vMilestoneOwner = '';
              $(arrMilestoneOwner).each(function (i, item) {
                  if (vMilestoneOwner == '') {
                      vMilestoneOwner = item;
                  }
                  else {
                      vMilestoneOwner += "; " + item;
                  }
              });
              var SendReminderToArr = $("#ddlSendReminderToNew").val();
              var vSendReminderTo = '';
              $(SendReminderToArr).each(function (i, item) {
                  if (vSendReminderTo == '') {
                      vSendReminderTo = item;
                  }
                  else {
                      vSendReminderTo += "; " + item;
                  }
              });


              var MilestoneID = $("#txtMilestoneIDNew").val();
              var vMilestoneComplete = "No";
              var vCompleteddate = null;
              var vCompletedby = "";
              if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                  vMilestoneComplete = "Yes";
                  vCompleteddate = fMilestoneNewCompletedDate;
                  vCompletedby = localStorage.UserName;
              }

              var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();


              if (MilestoneID != "") {
                  $("#inprocessObligation").css('visibility', 'visible');
                  $.ajax({
                      url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/updatemilestonebyText?strMilestoneText=' + $("#txtMilestoneNewText").val() + '&milestoneId=' + MilestoneID,
                      type: 'POST',
                      dataType: 'json',
                      headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                      data: {
                          RowKey: MilestoneID,
                          ContractID: strContractID,
                          ContractTitle: $("#lblCTitleNew").text(),
                          MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                          MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                          MilestoneDate: fMilestoneDateNew,
                          MilestoneDescription: $("#txtMileDescriptionNew").val(),
                          AutoComplete: vMilestoneAutoComplete,
                          MilestoneOwner: vMilestoneOwner,
                          Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                          MilestoneCompleted: vMilestoneComplete,
                          MilestoneCompletedDate: vCompleteddate,
                          MilestoneCompletedBy: vCompletedby,
                          ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                          ModifiedBy: localStorage.UserName,
                          SendReminderTo: vSendReminderTo,
                          Reminder1: $("#txtReminder1MilestoneNew").val(),
                          Reminder2: $("#txtReminder2MilestoneNew").val(),
                          Reminder3: $("#txtReminder3MilestoneNew").val(),
                          Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                          Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                          Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                          MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                          AlertsEnabled: $("#AlertMile").val(),
                      },
                      cache: false,
                      success: function (person) {
                          $('.ui-button-green-text').parent().removeAttr('disabled');
                          $("#loadingPage").fadeOut();
                          $("#addEditMilestoneNew").dialog("close");
                          $("#milestonesRecurrenceEditPopup").dialog("close");

                          BindMilestone(vContractID);
                      },
                      error: function (data) {
                          $("#loadingPage").fadeOut();
                          $("#inprocessObligation").css('visibility', 'none');
                      }
                  });
              }
          }
          else {
              $('.ui-button-green-text').parent().removeAttr('disabled');
          }
          return;
      });

                }
                else {
                    swalFlag = true;
                }

            }
            if (swalFlag) {
                if (blUpdate) {
                    var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                    var vMilestoneOwner = '';
                    $(arrMilestoneOwner).each(function (i, item) {
                        if (vMilestoneOwner == '') {
                            vMilestoneOwner = item;
                        }
                        else {
                            vMilestoneOwner += "; " + item;
                        }
                    });
                    var SendReminderToArr = $("#ddlSendReminderToNew").val();
                    var vSendReminderTo = '';
                    $(SendReminderToArr).each(function (i, item) {
                        if (vSendReminderTo == '') {
                            vSendReminderTo = item;
                        }
                        else {
                            vSendReminderTo += "; " + item;
                        }
                    });


                    var MilestoneID = $("#txtMilestoneIDNew").val();
                    var vMilestoneComplete = "No";
                    var vCompleteddate = null;
                    var vCompletedby = "";
                    if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                        vMilestoneComplete = "Yes";
                        vCompleteddate = fMilestoneNewCompletedDate;
                        vCompletedby = localStorage.UserName;
                    }
                    var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();


                    if (MilestoneID != "") {
                        $("#inprocessObligation").css('visibility', 'visible');
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/updatemilestonebyText?strMilestoneText=' + $("#txtMilestoneNewText").val() + '&milestoneId=' + MilestoneID,
                            type: 'POST',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                            data: {
                                RowKey: MilestoneID,
                                ContractID: strContractID,
                                ContractTitle: $("#lblCTitleNew").text(),
                                MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                MilestoneDate: fMilestoneDateNew,
                                MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                AutoComplete: vMilestoneAutoComplete,
                                MilestoneOwner: vMilestoneOwner,
                                Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                MilestoneCompleted: vMilestoneComplete,
                                MilestoneCompletedDate: vCompleteddate,
                                MilestoneCompletedBy: vCompletedby,
                                ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                ModifiedBy: localStorage.UserName,
                                SendReminderTo: vSendReminderTo,
                                Reminder1: $("#txtReminder1MilestoneNew").val(),
                                Reminder2: $("#txtReminder2MilestoneNew").val(),
                                Reminder3: $("#txtReminder3MilestoneNew").val(),
                                Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                AlertsEnabled: $("#AlertMile").val(),
                            },
                            cache: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                $("#loadingPage").fadeOut();
                                $("#addEditMilestoneNew").dialog("close");
                                $("#milestonesRecurrenceEditPopup").dialog("close");

                                BindMilestone(vContractID);
                            },
                            error: function (data) {
                                $("#loadingPage").fadeOut();
                                $("#inprocessObligation").css('visibility', 'none');
                            }
                        });
                    }
                }
                else {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                }
            }
        }
    }
}



function updateMilestonesRecurrenceEditNew(status) {
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));
    }
    var fMilestoneNewCompletedDate = '';
    if ($("#dtMilestoneNewCompletedDate").val() != "" && $("#dtMilestoneNewCompletedDate").val() != null) {
        fMilestoneNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneNewCompletedDate").datepicker('getDate'));
    }
    if (status == "SINGLE") {

        if (listMilestoneNewData != "") {
            var MilestoneID = $("#txtMilestoneIDNew").val();


            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID,
                type: 'DELETE',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                "Content-Type": "application/json",
                cache: false,
                success: function (data) {
                    $("#milestonesRecurrenceNewEditPopup").dialog("close");
                    $('#ddlMilestoneOccurencess').val('None');
                    listMilestoneNewData = "";
                    $("#txtMilestoneIDNew").val('');
                    modalOnOpenMilestoneNew();
                }
            });
        }
        else {
            $("#loadingPage").fadeIn();
            $('.ui-button-green-text').parent().attr('disabled', 'disabled');
            var isformvalid = false;
            if (requiredValidator('addNewMilestoneNew')) {
                $("#loadingPage").fadeIn();
                var strContractID = getParameterByName('ContractID');

                //do start and end date validation
                var cStartDate = "";
                var cEndDate = "";
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    async: false,
                    success: function (data) {
                        $(data).each(function (i, item) {
                            if (item.MilestoneTitle == "Start Date") {
                                cStartDate = item.MilestoneDate;
                            } else if (item.MilestoneTitle == "End Date") {
                                cEndDate = item.MilestoneDate;
                            }
                        });
                    }
                });
                var datevalidationexists = false;
                if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                    if (!comparedatesmile(fMilestoneDateNew, cEndDate)) {
                        datevalidationexists = true;

                        swal("", "Start date should be less than the end date milestone.");
                    }
                } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                    if (!comparedatesmile(cStartDate, fMilestoneDateNew)) {
                        datevalidationexists = true;

                        swal("", "End date should be greater than start date milestone.");
                    }
                }
                if (!datevalidationexists) {
                    var start = moment(fMilestoneDateNew);
                    var end = moment(new Date());
                    var vv = start.diff(end, "days");
                    var vRenminder = '';
                    var swalFlag = false;
                    var blUpdate = true;
                    isformvalid = true;
                    if (vv <= parseInt($("#txtReminder1New").val()) || vv <= parseInt($("#txtReminder2New").val()) || vv <= parseInt($("#txtReminder3New").val())) {
                        swal({
                            title: '',
                            text: "Reminders are out of date. Are you sure you want to save?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                        function (confirmed) {
                            if (confirmed) {
                                var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                                var vMilestoneOwner = '';
                                $(arrMilestoneOwner).each(function (i, item) {
                                    if (vMilestoneOwner == '') {
                                        vMilestoneOwner = item;
                                    }
                                    else {
                                        vMilestoneOwner += "; " + item;
                                    }
                                });
                                var SendReminderToArr = $("#ddlSendReminderToNew").val();
                                var vSendReminderTo = '';
                                $(SendReminderToArr).each(function (i, item) {
                                    if (vSendReminderTo == '') {
                                        vSendReminderTo = item;
                                    }
                                    else {
                                        vSendReminderTo += "; " + item;
                                    }
                                });


                                var MilestoneID = $("#txtMilestoneIDNew").val();
                                var vMilestoneComplete = "No";
                                var vCompleteddate = null;
                                var vCompletedby = "";
                                if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                                    vMilestoneComplete = "Yes";
                                    vCompleteddate = fMilestoneNewCompletedDate;

                                    vCompletedby = localStorage.UserName;
                                }

                                var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();

                                if (MilestoneID != "") {

                                    $("#inprocessObligation").css('visibility', 'visible');
                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                                        type: 'POST',
                                        dataType: 'json',
                                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                        data: {
                                            RowKey: MilestoneID,
                                            ContractID: strContractID,
                                            ContractTitle: $("#lblCTitleNew").text(),
                                            MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                            MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                            MilestoneDate: fMilestoneDateNew,
                                            MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                            AutoComplete: vMilestoneAutoComplete,
                                            MilestoneOwner: vMilestoneOwner,
                                            Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                            MilestoneCompleted: vMilestoneComplete,
                                            MilestoneCompletedDate: vCompleteddate,
                                            MilestoneCompletedBy: vCompletedby,

                                            ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                            ModifiedBy: localStorage.UserName,
                                            SendReminderTo: vSendReminderTo,
                                            Reminder1: $("#txtReminder1MilestoneNew").val(),
                                            Reminder2: $("#txtReminder2MilestoneNew").val(),
                                            Reminder3: $("#txtReminder3MilestoneNew").val(),
                                            Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                            Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                            Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                            MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                            AlertsEnabled: $("#AlertMile").val(),
                                        },
                                        cache: false,
                                        success: function (person) {
                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                            $("#loadingPage").fadeOut();
                                            $("#addEditMilestoneNew").dialog("close");

                                            $("#milestonesRecurrenceEditPopup").dialog("close");
                                            $("#milestonesRecurrenceNewEditPopup").dialog("close");
                                            BindMilestone(vContractID);
                                        },
                                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                    });
                                }
                            }
                            return;
                        });

                    }
                    else {
                        swalFlag = true;
                    }

                }
                if (swalFlag) {
                    if (blUpdate) {
                        var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
                        var vMilestoneOwner = '';
                        $(arrMilestoneOwner).each(function (i, item) {
                            if (vMilestoneOwner == '') {
                                vMilestoneOwner = item;
                            }
                            else {
                                vMilestoneOwner += "; " + item;
                            }
                        });
                        var SendReminderToArr = $("#ddlSendReminderToNew").val();
                        var vSendReminderTo = '';
                        $(SendReminderToArr).each(function (i, item) {
                            if (vSendReminderTo == '') {
                                vSendReminderTo = item;
                            }
                            else {
                                vSendReminderTo += "; " + item;
                            }
                        });


                        var MilestoneID = $("#txtMilestoneIDNew").val();
                        var vMilestoneComplete = "No";
                        var vCompleteddate = null;
                        var vCompletedby = "";
                        if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
                            vMilestoneComplete = "Yes";
                            vCompleteddate = fMilestoneNewCompletedDate;

                            vCompletedby = localStorage.UserName;
                        }
                        var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();


                        var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();

                        if (MilestoneID != "") {

                            $("#inprocessObligation").css('visibility', 'visible');
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/recurrenceedit?milestoneid=' + MilestoneID,
                                type: 'POST',
                                dataType: 'json',
                                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                data: {
                                    RowKey: MilestoneID,
                                    ContractID: strContractID,
                                    ContractTitle: $("#lblCTitleNew").text(),
                                    MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                                    MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                                    MilestoneDate: fMilestoneDateNew,
                                    MilestoneDescription: $("#txtMileDescriptionNew").val(),
                                    AutoComplete: vMilestoneAutoComplete,
                                    MilestoneOwner: vMilestoneOwner,
                                    Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                                    MilestoneCompleted: vMilestoneComplete,
                                    MilestoneCompletedDate: vCompleteddate,
                                    MilestoneCompletedBy: vCompletedby,

                                    ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                                    ModifiedBy: localStorage.UserName,
                                    SendReminderTo: vSendReminderTo,
                                    Reminder1: $("#txtReminder1MilestoneNew").val(),
                                    Reminder2: $("#txtReminder2MilestoneNew").val(),
                                    Reminder3: $("#txtReminder3MilestoneNew").val(),
                                    Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                                    Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                                    Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                                    MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                                    AlertsEnabled: $("#AlertMile").val(),
                                },
                                cache: false,
                                success: function (person) {
                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                    $("#loadingPage").fadeOut();
                                    $("#addEditMilestoneNew").dialog("close");

                                    $("#milestonesRecurrenceEditPopup").dialog("close");
                                    BindMilestone(vContractID);
                                },
                                complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                            });
                        }
                    }
                }
            }

        }



    }
    else {
        var MilestoneID = $("#txtMilestoneIDNew").val();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew/updateUpcoming?strMilestoneText=' + $("#txtMilestoneNewText").val() + '&milestoneId=' + MilestoneID,
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            cache: false,
            success: function (person) {
                $("#milestonesRecurrenceEditPopup").dialog("close");

                $("#txtMilestoneIDNew").val('');
                modalOnOpenMilestoneNew();
                $("#milestonesRecurrenceNewEditPopup").dialog("close");


            },
            error: function (data) {
                $("#milestonesRecurrenceNewEditPopup").dialog("close");
                $("#loadingPage").fadeOut();
                $("#inprocessObligation").css('visibility', 'none');
            }
        });
    }

}

$('#amilestoneCRecurrence').click(function () {
    document.getElementById("ddlMilestoneOccurencess").disabled = false;
});

function ViewMilestineDetail(milestoneID) {
    $("#loadingPage").fadeIn();
    $('#tblMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + milestoneID,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        "Content-Type": "application/json",
        cache: false,
        success: function (milestoneentity) {
            $("#loadingPage").fadeOut();

            var vMetadata = '<ul class="pOp_Cont Milestone">';
            vMetadata += '<li id="milestoneTitle"><p>Milestone Title</p><span>' + milestoneentity.MilestoneTitle + '</span></li>';
            vMetadata += '<li><p>Milestone Type</p><span>' + milestoneentity.MilestoneType + '</span></li>';

            vMetadata += '<li><p>Description</p><span style="word-break: break-all;">';
            if (milestoneentity.MilestoneDescription != '') {
                vMetadata += milestoneentity.MilestoneDescription;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            //vMetadata += '<li><p>Milestone Date</p><span>' + milestoneentity.MilestoneDate + '</span></li>';
            vMetadata += '<li><p>Milestone Date</p><span>';
            if (milestoneentity.MilestoneDate != null && milestoneentity.MilestoneDate != '') {
                var milestonedate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { milestonedate = moment(new Date(milestoneentity.MilestoneDate)).utc().format('MM/DD/YYYY'); }
                else { milestonedate = moment(new Date(milestoneentity.MilestoneDate)).utc().format(localStorage.AppDateFormat); }
                vMetadata += milestonedate;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Auto Complete on Milestone Date?</p><span>';
            if (milestoneentity.AutoComplete != '') {
                vMetadata += milestoneentity.AutoComplete;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li id="milestoneOwners"><p>Milestone Owner</p><span>';
            if (milestoneentity.MilestoneOwner != '') {
                vMetadata += milestoneentity.MilestoneOwner;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Priority</p><span>';
            if (milestoneentity.Priority != '') {
                vMetadata += milestoneentity.Priority;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Milestone Completed</p><span>';
            if (milestoneentity.MilestoneCompleted != '') {
                vMetadata += milestoneentity.MilestoneCompleted;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Completed Date</p><span>';
            if (milestoneentity.MilestoneCompletedDate != null && milestoneentity.MilestoneCompletedDate != '' && milestoneentity.MilestoneCompleted == "Yes") {
                var completedate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { completedate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format('MM/DD/YYYY'); }
                else { completedate = moment(new Date(milestoneentity.MilestoneCompletedDate)).utc().format(localStorage.AppDateFormat); }
                vMetadata += completedate;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Completed By</p><span>';
            if (milestoneentity.MilestoneCompletedBy != '') {
                vMetadata += milestoneentity.MilestoneCompletedBy;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Show In Calendar</p><span>';
            if (milestoneentity.ShowInCalendar != '') {
                vMetadata += milestoneentity.ShowInCalendar;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Send Reminder To</p><span>';
            if (milestoneentity.SendReminderTo != '') {
                vMetadata += milestoneentity.SendReminderTo;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Reminder 1</p><span>';
            if (milestoneentity.Reminder1 != '') {
                vMetadata += milestoneentity.Reminder1 + ' days ' + milestoneentity.Reminder1Condition;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Reminder 2</p><span>';
            if (milestoneentity.Reminder2 != '') {
                vMetadata += milestoneentity.Reminder2 + ' days ' + milestoneentity.Reminder2Condition;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Reminder 3</p><span>';
            if (milestoneentity.Reminder3 != '') {
                vMetadata += milestoneentity.Reminder3 + ' days ' + milestoneentity.Reminder3Condition;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            //ContractID 
            vMetadata += '<li id="contractID" style="display:none;"><p>Contract ID</p><span>' + milestoneentity.ContractID + '</span></li>';
            //MilestoneID
            vMetadata += '<li id="milestoneID" style="display:none;"><p>Milestone ID</p><span>' + milestoneentity.RowKey + '</span></li>';

            vMetadata += '</ul>';

            var permissionsAll = contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees
                + ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager;
            var permissions = $.unique($(permissionsAll.split(';')).map(function (i, item) { return item.trim() }).filter(function (i, item) { return item != ""; }));
            var msOwners = [];
            if (milestoneentity.MilestoneOwner != "") {
                if (milestoneentity.MilestoneOwner.indexOf('{') > -1) {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/ownersfromgroup?contractid=' + milestoneentity.ContractID + '&milestoneonwers=' + milestoneentity.MilestoneOwner,
                        type: 'GET',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        async: false,
                        success: function (owners) {
                            if (owners != null || owners != "") {
                                for (var key in owners) {
                                    if (owners.hasOwnProperty(key)) {
                                        msOwners.push(key);
                                    }
                                }
                            }
                        },
                        error: function (owners) { }

                    });
                }
                else
                    msOwners = $.map(milestoneentity.MilestoneOwner.split(';'), $.trim);
            }

            var statusArr = ["Replaced", "Expired", "Cancelled", "Archived"];
            $("#loadingPage").fadeOut();
            if (msOwners != "" && msOwners != null && msOwners.indexOf(localStorage.UserName) > -1 && milestoneentity.MilestoneCompleted != "Yes" &&
                milestoneentity.AutoComplete != "Yes" && jQuery.inArray(contractItem.Status, statusArr) == -1 && permissions.toArray().indexOf(localStorage.UserName) > -1) {
                $("#tblMetadataDetailForOwner").empty();
                $("#tblMetadataDetailForOwner").append(vMetadata);
                $("#btnMarkComplete span").attr('style', 'background-color: transparent; color: #3177b5;font-size: 14px;border: 1px solid #3177b5 !important;');
                $("#viewMetadataDetailForOwner").dialog("option", "title", "View Milestone");
                $("#viewMetadataDetailForOwner").dialog("open");
            }
            else {
                $("#tblMetadataDetail").empty();
                $("#tblMetadataDetail").append(vMetadata);
                //setBlankValueToHyphen("tblMetadataDetail");
                $("#viewMetadataDetail").dialog("option", "title", "View Milestone");
                $("#viewMetadataDetail").dialog("open");
            }
        },
        error: function () {
            $("#loadingPage").fadeOut();
        },
        complete: function () {
            $("#loadingPage").fadeOut();
        }
    });
}

function CompleteMilestone(MilestoneID) {
    $.ajax({
        async: false,
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID + '&acheived=Yes',
        type: "PUT",
        dataType: "json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        "Content-Type": "application/json",
    }).done(function (data) {

        result = data;
        $('#dvMilestoneAlert #p_' + MilestoneID).remove();
        if ($('#dvMilestoneAlert p').length == 0) {
            CloseAlert('dvMilestoneAlert');
            $('#dvMilestoneAlert').empty();
        }
        BindMilestone();
    }).fail(function (data) {

    });
}

function milestonecompleted(obj) {
    if (obj.value == "Yes") {
        $('#trMilestoneCompletedDate').css('display', '');
    } else {
        $('#trMilestoneCompletedDate').css('display', 'none');
        $("#dtMilestoneCompletedDate").val('');
    }
}


function modalOnOpenMilestone(dialog) {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var isformvalid = false;
    if (requiredValidator('addNewMilestone')) {
        $("#loadingPage").fadeIn();
        var strContractID = getParameterByName('ContractID');

        //do start and end date validation
        var cStartDate = "";
        var cEndDate = "";
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
            type: 'GET',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            async: false,
            success: function (data) {
                $(data).each(function (i, item) {
                    if (item.MilestoneTitle == "Start Date") {
                        cStartDate = item.MilestoneDate;
                    } else if (item.MilestoneTitle == "End Date") {
                        cEndDate = item.MilestoneDate;
                    }
                });
            }
        });
        var datevalidationexists = false;
        if ($("#txtMilestoneTitle").val() == "Start Date" && cEndDate != "") {
            if (!comparedatesmile($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDate").datepicker('getDate')), cEndDate)) {
                datevalidationexists = true;

                swal("", "Start date should be less than the end date milestone.");
            }
        } else if ($("#txtMilestoneTitle").val() == "End Date" && cStartDate != "") {
            if (!comparedatesmile(cStartDate, $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDate").datepicker('getDate')))) {
                datevalidationexists = true;

                swal("", "End date should be greater than start date milestone.");
            }
        }
        if (!datevalidationexists) {
            var start = moment($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDate").datepicker('getDate')));
            var end = moment(new Date());
            var vv = start.diff(end, "days");
            var vRenminder = '';
            var swalFlag = false;
            var blUpdate = true;
            isformvalid = true;
            if (vv <= parseInt($("#txtReminder1").val()) || vv <= parseInt($("#txtReminder2").val()) || vv <= parseInt($("#txtReminder3").val())) {
                swal({
                    title: '',
                    text: "Reminders are out of date. Are you sure you want to save?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
      function (confirmed) {
          if (confirmed) {
              var arrMilestoneOwner = $("#ddlMilestoneOwner").val();
              var vMilestoneOwner = '';
              $(arrMilestoneOwner).each(function (i, item) {
                  if (vMilestoneOwner == '') {
                      vMilestoneOwner = item;
                  }
                  else {
                      vMilestoneOwner += "; " + item;
                  }
              });
              var SendReminderToArr = $("#ddlSendReminderTo").val();
              var vSendReminderTo = '';
              $(SendReminderToArr).each(function (i, item) {
                  if (vSendReminderTo == '') {
                      vSendReminderTo = item;
                  }
                  else {
                      vSendReminderTo += "; " + item;
                  }
              });


              var MilestoneID = $("#txtMilestoneID").val();
              var vMilestoneComplete = $('input[type="radio"][name=MilestoneCompleted]:checked').val();
              var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneAutoComplete]:checked').val();
              if (MilestoneID != "") {
                  //$("#inprocessMilestone").css('visibility', 'visible');
                  $.ajax({
                      url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID,
                      type: 'PUT',
                      dataType: 'json',
                      headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                      data: {
                          RowKey: MilestoneID,
                          ContractID: strContractID,
                          ContractTitle: $("#lblCTitle").text(),
                          MilestoneTitle: $("#txtMilestoneTitle").val(),
                          MilestoneType: $("#ddlMilestoneType").find('option:selected').text(),
                          MilestoneDate: $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDate").datepicker('getDate')),
                          MilestoneDescription: $("#txtMileDescription").val(),
                          AutoComplete: vMilestoneAutoComplete,
                          MilestoneOwner: vMilestoneOwner,
                          Priority: $('input[name=Priority]:checked').val(),
                          MilestoneCompleted: vMilestoneComplete,
                          MilestoneCompletedDate: (vMilestoneComplete == "Yes") ? $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneCompletedDate").datepicker('getDate')) : '',
                          ShowInCalendar: $('input[type="radio"][name=ShowInCalendar]:checked').val(),
                          ModifiedBy: localStorage.UserName,
                          SendReminderTo: vSendReminderTo,
                          Reminder1: $("#txtReminder1").val(),
                          Reminder2: $("#txtReminder2").val(),
                          Reminder3: $("#txtReminder3").val(),
                          Reminder1Condition: $("#ddlReminder1").find('option:selected').text(),
                          Reminder2Condition: $("#ddlReminder2").find('option:selected').text(),
                          Reminder3Condition: $("#ddlReminder3").find('option:selected').text()
                      },
                      cache: false,
                      success: function (person) {
                          $('.ui-button-green-text').parent().removeAttr('disabled');

                          $("#addEditMilestone").dialog("close");
                          BindMilestone();
                      },
                      complete: function () {
                          $("#inprocessMilestone").css('visibility', 'hidden');
                          $("#loadingPage").fadeOut();
                      }
                  });
              }
              else {
                  //$("#inprocessMilestone").css('visibility', 'visible');
                  $.ajax({
                      url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones',
                      type: 'POST',
                      dataType: 'json',
                      headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                      data: {
                          RowKey: $("#txtMilestoneID").val(),
                          ContractID: getParameterByName('ContractID'),
                          ContractTitle: $("#lblCTitle").text(),
                          MilestoneTitle: $("#txtMilestoneTitle").val(),
                          MilestoneType: $("#ddlMilestoneType").find('option:selected').text(),
                          MilestoneDate: $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDate").datepicker('getDate')),
                          AutoComplete: vMilestoneAutoComplete,
                          MilestoneDescription: $("#txtMileDescription").val(),
                          MilestoneOwner: vMilestoneOwner,
                          Priority: $('input[name=Priority]:checked').val(),
                          MilestoneCompleted: vMilestoneComplete,
                          MilestoneCompletedDate: (vMilestoneComplete == "Yes") ? $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneCompletedDate").datepicker('getDate')) : '',
                          ShowInCalendar: $('input[type="radio"][name=ShowInCalendar]:checked').val(),
                          CreatedBy: localStorage.UserName,
                          ModifiedBy: localStorage.UserName,
                          SendReminderTo: vSendReminderTo,
                          Reminder1: $("#txtReminder1").val(),
                          Reminder2: $("#txtReminder2").val(),
                          Reminder3: $("#txtReminder3").val(),
                          Reminder1Condition: $("#ddlReminder1").find('option:selected').text(),
                          Reminder2Condition: $("#ddlReminder2").find('option:selected').text(),
                          Reminder3Condition: $("#ddlReminder3").find('option:selected').text()

                      },
                      cache: false,
                      success: function (person) {
                          $('.ui-button-green-text').parent().removeAttr('disabled');

                          $("#addEditMilestone").dialog("close");
                          $("#milestoneInline").toggle();
                          BindMilestone();
                      },
                      complete: function () {
                          $("#inprocessMilestone").css('visibility', 'hidden');
                          $("#loadingPage").fadeOut();
                      }
                  });
              }
          }
          else {
              $('.ui-button-green-text').parent().removeAttr('disabled');
          }
          return;
      });

            }
            else {
                swalFlag = true;
            }

        }
        if (swalFlag) {
            if (blUpdate) {
                var arrMilestoneOwner = $("#ddlMilestoneOwner").val();
                var vMilestoneOwner = '';
                $(arrMilestoneOwner).each(function (i, item) {
                    if (vMilestoneOwner == '') {
                        vMilestoneOwner = item;
                    }
                    else {
                        vMilestoneOwner += "; " + item;
                    }
                });
                var SendReminderToArr = $("#ddlSendReminderTo").val();
                var vSendReminderTo = '';
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendReminderTo == '') {
                        vSendReminderTo = item;
                    }
                    else {
                        vSendReminderTo += "; " + item;
                    }
                });


                var MilestoneID = $("#txtMilestoneID").val();
                var vMilestoneComplete = $('input[type="radio"][name=MilestoneCompleted]:checked').val();
                var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneAutoComplete]:checked').val();
                if (MilestoneID != "") {
                    //$("#inprocessMilestone").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID,
                        type: 'PUT',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        data: {
                            RowKey: MilestoneID,
                            ContractID: strContractID,
                            ContractTitle: $("#lblCTitle").text(),
                            MilestoneTitle: $("#txtMilestoneTitle").val(),
                            MilestoneType: $("#ddlMilestoneType").find('option:selected').text(),
                            MilestoneDate: $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDate").datepicker('getDate')),
                            MilestoneDescription: $("#txtMileDescription").val(),
                            AutoComplete: vMilestoneAutoComplete,
                            MilestoneOwner: vMilestoneOwner,
                            Priority: $('input[name=Priority]:checked').val(),
                            MilestoneCompleted: vMilestoneComplete,
                            MilestoneCompletedDate: (vMilestoneComplete == "Yes") ? $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneCompletedDate").datepicker('getDate')) : '',
                            ShowInCalendar: $('input[type="radio"][name=ShowInCalendar]:checked').val(),
                            ModifiedBy: localStorage.UserName,
                            SendReminderTo: vSendReminderTo,
                            Reminder1: $("#txtReminder1").val(),
                            Reminder2: $("#txtReminder2").val(),
                            Reminder3: $("#txtReminder3").val(),
                            Reminder1Condition: $("#ddlReminder1").find('option:selected').text(),
                            Reminder2Condition: $("#ddlReminder2").find('option:selected').text(),
                            Reminder3Condition: $("#ddlReminder3").find('option:selected').text()
                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');

                            $("#addEditMilestone").dialog("close");
                            BindMilestone();
                        },
                        complete: function () {
                            $("#inprocessMilestone").css('visibility', 'hidden');
                            $("#loadingPage").fadeOut();
                        }
                    });
                }
                else {
                    //$("#inprocessMilestone").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones',
                        type: 'POST',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        data: {
                            RowKey: $("#txtMilestoneID").val(),
                            ContractID: getParameterByName('ContractID'),
                            ContractTitle: $("#lblCTitle").text(),
                            MilestoneTitle: $("#txtMilestoneTitle").val(),
                            MilestoneType: $("#ddlMilestoneType").find('option:selected').text(),
                            MilestoneDate: $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDate").datepicker('getDate')),
                            AutoComplete: vMilestoneAutoComplete,
                            MilestoneDescription: $("#txtMileDescription").val(),
                            MilestoneOwner: vMilestoneOwner,
                            Priority: $('input[name=Priority]:checked').val(),
                            MilestoneCompleted: vMilestoneComplete,
                            MilestoneCompletedDate: (vMilestoneComplete == "Yes") ? $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneCompletedDate").datepicker('getDate')) : '',
                            ShowInCalendar: $('input[type="radio"][name=ShowInCalendar]:checked').val(),
                            CreatedBy: localStorage.UserName,
                            ModifiedBy: localStorage.UserName,
                            SendReminderTo: vSendReminderTo,
                            Reminder1: $("#txtReminder1").val(),
                            Reminder2: $("#txtReminder2").val(),
                            Reminder3: $("#txtReminder3").val(),
                            Reminder1Condition: $("#ddlReminder1").find('option:selected').text(),
                            Reminder2Condition: $("#ddlReminder2").find('option:selected').text(),
                            Reminder3Condition: $("#ddlReminder3").find('option:selected').text()

                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');

                            $("#addEditMilestone").dialog("close");
                            $("#milestoneInline").toggle();
                            BindMilestone();
                        },
                        complete: function () {
                            $("#inprocessMilestone").css('visibility', 'hidden');
                            $("#loadingPage").fadeOut();
                        }
                    });
                }
            }
            else {
                $('.ui-button-green-text').parent().removeAttr('disabled');
            }
        }
    }
    else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}


var vMilestoneTextEditRecurrence = "";
var vMilestoneFlaging = "";

function modalOnOpenMilestoneNew(dialog) {
    $("#loadingPage").fadeIn();
    var strContractID = getParameterByName('ContractID');
    var isformvalid = false;
    var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
    var vMilestoneOwner = '';
    var fMilestoneDateNew = '';
    if ($("#dtMilestoneDateNew").val() != "" && $("#dtMilestoneDateNew").val() != null) {
        fMilestoneDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate'));
    }
    var fMilestoneNewCompletedDate = '';
    if ($("#dtMilestoneNewCompletedDate").val() != "" && $("#dtMilestoneNewCompletedDate").val() != null) {
        fMilestoneNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneNewCompletedDate").datepicker('getDate'));
    }


    $(arrMilestoneOwner).each(function (i, item) {
        if (vMilestoneOwner == '') {
            vMilestoneOwner = item;
        }
        else {
            vMilestoneOwner += "; " + item;
        }
    });
    var SendReminderToArr = $("#ddlSendReminderToNew").val();
    var vSendReminderTo = '';
    $(SendReminderToArr).each(function (i, item) {
        if (vSendReminderTo == '') {
            vSendReminderTo = item;
        }
        else {
            vSendReminderTo += "; " + item;
        }
    });


    var MilestoneID = $("#txtMilestoneIDNew").val();
    var vMilestoneComplete = "No";
    var vCompleteddate = null;
    var vCompletedby = "";
    if ($("#ddlMilestoneNewStatus").find('option:selected').text() == "Complete") {
        vMilestoneComplete = "Yes";
        vCompleteddate = fMilestoneNewCompletedDate;
        vCompletedby = localStorage.UserName;
    }
    var vMilestoneAutoComplete = $('input[type="radio"][name=MilestoneNewAutoComplete]:checked').val();
    if (MilestoneID != "") {
        if (vMilestoneEditStatus != "") {
            if (vMilestoneEditStatus == "CHANGERECURRENCE") {
                if ($('#ddlMilestoneOccurencess').val() != "None") {
                    if (listMilestoneNewData != "") {
                        vMilestoneTextEditRecurrence = $("#txtMilestoneNewText").val();
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?milestoneid=' + MilestoneID,
                            type: 'DELETE',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                $("#txtMilestoneIDNew").val("");
                                modalOnOpenMilestoneNew();
                            }
                        });
                    }
                    else {
                        swal("", "Please modify the occurence to update milestone.");
                        $("#loadingPage").fadeOut();
                    }
                }
                else {
                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneid=' + MilestoneID,
                        type: 'POST',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        data: {
                            RowKey: MilestoneID,
                            ContractID: strContractID,
                            ContractTitle: $("#lblCTitleNew").text(),
                            MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                            MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                            MilestoneDate: fMilestoneDateNew,
                            MilestoneDescription: $("#txtMileDescriptionNew").val(),
                            AutoComplete: vMilestoneAutoComplete,
                            MilestoneOwner: vMilestoneOwner,
                            Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                            MilestoneCompleted: vMilestoneComplete,
                            MilestoneCompletedDate: vCompleteddate,
                            MilestoneCompletedBy: vCompletedby,
                            ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                            ModifiedBy: localStorage.UserName,
                            SendReminderTo: vSendReminderTo,
                            Reminder1: $("#txtReminder1MilestoneNew").val(),
                            Reminder2: $("#txtReminder2MilestoneNew").val(),
                            Reminder3: $("#txtReminder3MilestoneNew").val(),
                            Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                            Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                            Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                            MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                            AlertsEnabled: $("#AlertMile").val(),
                            CustomDateFieldName: $("#hdnCustomDateFieldName").text(),

                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            $("#loadingPage").fadeOut();
                            $("#addEditMilestoneNew").dialog("close");
                            BindMilestone(vContractID);
                            pendingStarted = false;
                            GetContractPendingAction(true, "BindPeoples");
                        },
                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                    });
                }
            }
            else if (vMilestoneEditStatus == "EDITRECURRENCE") {
                if (listMilestoneNewData != "") {
                    vMilestoneTextEditRecurrence = $("#txtMilestoneNewText").val();

                    $("#loadingPage").fadeOut();
                    $("#milestonesRecurrenceNewEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                    $("#milestonesRecurrenceNewEditPopup").dialog("open");


                }
                else {
                    //if ($('#ddlMilestoneOccurencess').val() == "None") {
                    vMilestoneTextEditRecurrence = $("#txtMilestoneNewText").val();
                    $("#loadingPage").fadeOut();
                    $("#milestonesRecurrenceNewEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                    $("#milestonesRecurrenceNewEditPopup").dialog("open");
                    //}
                    //else {
                    //    swal("", "Please modify the occurence to update milestone.");
                    //    $("#loadingPage").fadeOut();
                    //    //$("#milestonesRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                    //    //$("#milestonesRecurrenceEditPopup").dialog("open");
                    //}
                }
            }
            else {
                if ($('#ddlMilestoneOccurencess').val() == "None") {
                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneid=' + MilestoneID,
                        type: 'POST',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        data: {
                            RowKey: MilestoneID,
                            ContractID: strContractID,
                            ContractTitle: $("#lblCTitleNew").text(),
                            MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                            MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                            MilestoneDate: fMilestoneDateNew,
                            MilestoneDescription: $("#txtMileDescriptionNew").val(),
                            AutoComplete: vMilestoneAutoComplete,
                            MilestoneOwner: vMilestoneOwner,
                            Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                            MilestoneCompleted: vMilestoneComplete,
                            MilestoneCompletedDate: vCompleteddate,
                            MilestoneCompletedBy: vCompletedby,
                            ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                            ModifiedBy: localStorage.UserName,
                            SendReminderTo: vSendReminderTo,
                            Reminder1: $("#txtReminder1MilestoneNew").val(),
                            Reminder2: $("#txtReminder2MilestoneNew").val(),
                            Reminder3: $("#txtReminder3MilestoneNew").val(),
                            Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                            Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                            Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                            MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                            AlertsEnabled: $("#AlertMile").val(),
                            CustomDateFieldName: $("#hdnCustomDateFieldName").text(),

                        },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            $("#loadingPage").fadeOut();
                            $("#addEditMilestoneNew").dialog("close");
                            BindMilestone(vContractID);
                        },
                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                    });

                }
                else {
                    if (listMilestoneNewData != "") {
                        $("#loadingPage").fadeOut();
                        $("#milestonesRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                        $("#milestonesRecurrenceEditPopup").dialog("open");
                    }
                    else {
                        swal("", "Please modify the occurence to update milestone.");
                        $("#loadingPage").fadeOut();
                    }
                }
            }

        }
        else {
            if ($('#ddlMilestoneOccurencess').val() == "None") {
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneid=' + MilestoneID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    data: {
                        RowKey: MilestoneID,
                        ContractID: strContractID,
                        ContractTitle: $("#lblCTitleNew").text(),
                        MilestoneTitle: $("#txtMilestoneTitleNew").val(),
                        MilestoneType: $("#ddlMilestoneTypeNew").find('option:selected').text(),
                        MilestoneDate: fMilestoneDateNew,
                        MilestoneDescription: $("#txtMileDescriptionNew").val(),
                        AutoComplete: vMilestoneAutoComplete,
                        MilestoneOwner: vMilestoneOwner,
                        Priority: $("#ddlMilestoneNewPriority").find('option:selected').text(),
                        MilestoneCompleted: vMilestoneComplete,
                        MilestoneCompletedDate: vCompleteddate,
                        MilestoneCompletedBy: vCompletedby,
                        ShowInCalendar: $('input[name=ShowInCalendarNew]:checked').val(),
                        ModifiedBy: localStorage.UserName,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1MilestoneNew").val(),
                        Reminder2: $("#txtReminder2MilestoneNew").val(),
                        Reminder3: $("#txtReminder3MilestoneNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text()),
                        MilestoneStatus: encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text()),
                        AlertsEnabled: $("#AlertMile").val(),
                        CustomDateFieldName: $("#hdnCustomDateFieldName").text(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#loadingPage").fadeOut();
                        $("#addEditMilestoneNew").dialog("close");
                        BindMilestone(vContractID);
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });


            }
            else {
                // if (listMilestoneNewData != "") {
                $("#loadingPage").fadeOut();
                $("#milestonesRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Milestones");
                $("#milestonesRecurrenceEditPopup").dialog("open");
                //}
                //else {
                //    swal("", "Please modify the occurence to update milestone.");
                //    $("#loadingPage").fadeOut();
                //}
                //$("#loadingPage").fadeOut();
                //$("#milestonesRecurrenceEditPopup").dialog("option", "title", "");
                //$("#milestonesRecurrenceEditPopup").dialog("open");
            }
        }
    }
    else {
        //$("#inprocessMilestone").css('visibility', 'visible');
        if ($('#ddlMilestoneOccurencess').val() != "None") {
            if ($('input[name=SelectMilestoneOccurenceEndDate]:checked').val() == 'Custom') {
                if (parseInt($("#txtMilestoneOccurrenceCount").val()) > 54) {
                    $("#lblerrorreclimitMilestone").css('display', '');
                    $("#loadingPage").fadeOut();

                }
                else if (parseInt($("#txtMilestoneOccurrenceCount").val()) == 0) {
                    $("#lblerrorreclimitMilestoneNotZero").css('display', '');
                    $("#loadingPage").fadeOut();
                }
                else {
                    var formData = new FormData();
                    var milestoneForm = "ContractID=" + getParameterByName('ContractID');
                    milestoneForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleNew").text());
                    milestoneForm += "&MilestoneTitle=" + encodeURIComponent($("#txtMilestoneTitleNew").val());

                    milestoneForm += "&MilestoneType=" + encodeURIComponent($("#ddlMilestoneTypeNew").find('option:selected').text());
                    milestoneForm += "&MilestoneDescription=" + encodeURIComponent($("#txtMileDescriptionNew").val());

                    milestoneForm += "&MilestoneOwner=" + encodeURIComponent(vMilestoneOwner);
                    milestoneForm += "&AutoComplete=" + encodeURIComponent(vMilestoneAutoComplete);

                    milestoneForm += "&Priority=" + $("#ddlMilestoneNewPriority").find('option:selected').text();
                    milestoneForm += "&MilestoneCompleted=" + encodeURIComponent(vMilestoneComplete);
                    milestoneForm += "&MilestoneCompletedDate=" + vCompleteddate;
                    milestoneForm += "&MilestoneCompletedBy=" + encodeURIComponent(vCompletedby);

                    milestoneForm += "&ShowInCalendar=" + $('input[name=ShowInCalendarNew]:checked').val();
                    milestoneForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                    milestoneForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                    milestoneForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                    milestoneForm += "&Reminder1=" + $("#txtReminder1MilestoneNew").val();
                    milestoneForm += "&Reminder2=" + $("#txtReminder2MilestoneNew").val();
                    milestoneForm += "&Reminder3=" + $("#txtReminder3MilestoneNew").val();
                    milestoneForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text());
                    milestoneForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text());
                    milestoneForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text());
                    milestoneForm += "&MilestoneStatus=" + encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text());
                    milestoneForm += "&AlertsEnabled=" + $("#AlertMile").val();
                    milestoneForm += "&Ocurrences=" + encodeURIComponent(milestoneoccur);
                    milestoneForm += "&Recurrences=" + encodeURIComponent(milestoneRecur);
                    milestoneForm += "&CustomString=" + encodeURIComponent(milestoneRecurCusString);
                    milestoneForm += "&MilestoneEndTerm=" + encodeURIComponent($("input:radio[name=SelectMilestoneOccurenceEndDate]:checked").val());
                    if (typeof ($("#hdnCustomDateFieldName").text()) != "undefined" && $("#hdnCustomDateFieldName").text() != null && $("#hdnCustomDateFieldName").text() != "") {
                        milestoneForm += "&CustomDateFieldName=" + encodeURIComponent($("#hdnCustomDateFieldName").text());
                    }

                    if ($('#ddlMilestoneOccurencess').val() == "Monthly") {
                        milestoneForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlMilestoneRepeatMonthly").find('option:selected').text());
                    }
                    else {
                        milestoneForm += "&RecMonthlyString=" + "";
                    }
                    formData.append("SearializeControls", milestoneForm);
                    var milestoneoccurForm = "EndDate=" + encodeURIComponent(listMilestoneNewData.EndDate);
                    milestoneoccurForm += "&LastDate=" + encodeURIComponent(listMilestoneNewData.LastDate);
                    milestoneoccurForm += "&StartDate=" + encodeURIComponent(listMilestoneNewData.StartDate);
                    var strvalues = "";
                    var Values = listMilestoneNewData.Values;

                    //if (typeof Values != "undefined" && Values != null) {
                    for (var j = 0; j < Values.length; j++) {
                        strvalues += Values[j] + ",";
                    }
                    strvalues = removeLastChar(strvalues, ',');
                    //}

                    milestoneoccurForm += "&Values=" + strvalues;

                    formData.append("objoccurrence", milestoneoccurForm);

                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonesnew',
                        type: 'POST',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        data: formData,
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (person) {
                            $("#loadingPage").fadeOut();
                            $("#addEditMilestoneNew").dialog("close");

                            if ($('#milestoneInline').is(':hidden')) { }
                            else
                            {
                                $('#milestoneInline').slideToggle();
                            }
                            BindMilestone();
                        },
                        error: function (data) {
                            $("#loadingPage").fadeOut();
                        },
                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                    });
                }



            }
            else {
                var formData = new FormData();
                var milestoneForm = "ContractID=" + getParameterByName('ContractID');
                milestoneForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleNew").text());
                milestoneForm += "&MilestoneTitle=" + encodeURIComponent($("#txtMilestoneTitleNew").val());

                milestoneForm += "&MilestoneType=" + encodeURIComponent($("#ddlMilestoneTypeNew").find('option:selected').text());
                milestoneForm += "&MilestoneDescription=" + encodeURIComponent($("#txtMileDescriptionNew").val());

                milestoneForm += "&MilestoneOwner=" + encodeURIComponent(vMilestoneOwner);
                milestoneForm += "&AutoComplete=" + encodeURIComponent(vMilestoneAutoComplete);

                milestoneForm += "&Priority=" + $("#ddlMilestoneNewPriority").find('option:selected').text();
                milestoneForm += "&MilestoneCompleted=" + encodeURIComponent(vMilestoneComplete);
                milestoneForm += "&MilestoneCompletedDate=" + vCompleteddate;
                milestoneForm += "&MilestoneCompletedBy=" + encodeURIComponent(vCompletedby);
                milestoneForm += "&ShowInCalendar=" + $('input[name=ShowInCalendarNew]:checked').val();
                milestoneForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                milestoneForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                milestoneForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                milestoneForm += "&Reminder1=" + $("#txtReminder1MilestoneNew").val();
                milestoneForm += "&Reminder2=" + $("#txtReminder2MilestoneNew").val();
                milestoneForm += "&Reminder3=" + $("#txtReminder3MilestoneNew").val();
                milestoneForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text());
                milestoneForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text());
                milestoneForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text());
                milestoneForm += "&MilestoneStatus=" + encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text());
                milestoneForm += "&AlertsEnabled=" + $("#AlertMile").val();
                milestoneForm += "&Ocurrences=" + encodeURIComponent(milestoneoccur);
                milestoneForm += "&Recurrences=" + encodeURIComponent(milestoneRecur);
                milestoneForm += "&CustomString=" + encodeURIComponent(milestoneRecurCusString);
                milestoneForm += "&MilestoneEndTerm=" + encodeURIComponent($("input:radio[name=SelectMilestoneOccurenceEndDate]:checked").val());

                if (typeof ($("#hdnCustomDateFieldName").text()) != "undefined" && $("#hdnCustomDateFieldName").text() != null && $("#hdnCustomDateFieldName").text() != "") {
                    milestoneForm += "&CustomDateFieldName=" + encodeURIComponent($("#hdnCustomDateFieldName").text());
                }


                if ($('#ddlMilestoneOccurencess').val() == "Monthly") {
                    milestoneForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlMilestoneRepeatMonthly").find('option:selected').text());
                }
                else {
                    milestoneForm += "&RecMonthlyString=" + "";
                }

                formData.append("SearializeControls", milestoneForm);


                var milestoneoccurForm = "EndDate=" + encodeURIComponent(listMilestoneNewData.EndDate);
                milestoneoccurForm += "&LastDate=" + encodeURIComponent(listMilestoneNewData.LastDate);
                milestoneoccurForm += "&StartDate=" + encodeURIComponent(listMilestoneNewData.StartDate);
                var strvalues = "";
                var Values = listMilestoneNewData.Values;

                //if (typeof Values != "undefined" && Values != null) {
                for (var j = 0; j < Values.length; j++) {
                    strvalues += Values[j] + ",";
                }
                strvalues = removeLastChar(strvalues, ',');
                //}

                milestoneoccurForm += "&Values=" + strvalues;

                formData.append("objoccurrence", milestoneoccurForm);

                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonesnew',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (person) {
                        $("#loadingPage").fadeOut();
                        $("#addEditMilestoneNew").dialog("close");

                        if ($('#milestoneInline').is(':hidden')) { }
                        else
                        {
                            $('#milestoneInline').slideToggle();
                        }
                        BindMilestone();
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });
            }


        }
        else {
            var vRecurrence = "";
            var vRecurrenceCustom = "";
            var vOcurence = "";
            vRecurrence = "None";
            vRecurrenceCustom = "None";
            vOcurence = 1;
            var formData = new FormData();
            var milestoneForm = "ContractID=" + getParameterByName('ContractID');
            milestoneForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleNew").text());
            milestoneForm += "&MilestoneTitle=" + encodeURIComponent($("#txtMilestoneTitleNew").val());

            milestoneForm += "&MilestoneType=" + encodeURIComponent($("#ddlMilestoneTypeNew").find('option:selected').text());
            milestoneForm += "&MilestoneDescription=" + encodeURIComponent($("#txtMileDescriptionNew").val());

            milestoneForm += "&MilestoneOwner=" + encodeURIComponent(vMilestoneOwner);
            milestoneForm += "&MilestoneDate=" + encodeURIComponent(fMilestoneDateNew);

            milestoneForm += "&AutoComplete=" + encodeURIComponent(vMilestoneAutoComplete);
            milestoneForm += "&Priority=" + $("#ddlMilestoneNewPriority").find('option:selected').text();

            milestoneForm += "&MilestoneCompleted=" + encodeURIComponent(vMilestoneComplete);
            milestoneForm += "&MilestoneCompletedDate=" + vCompleteddate;
            milestoneForm += "&MilestoneCompletedBy=" + encodeURIComponent(vCompletedby);




            milestoneForm += "&ShowInCalendar=" + $('input[name=ShowInCalendarNew]:checked').val();
            milestoneForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
            milestoneForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
            milestoneForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
            milestoneForm += "&Reminder1=" + $("#txtReminder1MilestoneNew").val();
            milestoneForm += "&Reminder2=" + $("#txtReminder2MilestoneNew").val();
            milestoneForm += "&Reminder3=" + $("#txtReminder3MilestoneNew").val();
            milestoneForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1MilestoneNew").find('option:selected').text());
            milestoneForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2MilestoneNew").find('option:selected').text());
            milestoneForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3MilestoneNew").find('option:selected').text());

            milestoneForm += "&MilestoneStatus=" + encodeURIComponent($("#ddlMilestoneNewStatus").find('option:selected').text());
            milestoneForm += "&AlertsEnabled=" + $("#AlertMile").val();
            milestoneForm += "&Ocurrences=" + encodeURIComponent(vOcurence);
            milestoneForm += "&Recurrences=" + encodeURIComponent(vRecurrence);
            milestoneForm += "&CustomString=" + encodeURIComponent(vRecurrenceCustom);
            milestoneForm += "&MilestoneEndTerm=" + encodeURIComponent($("input:radio[name=SelectMilestoneOccurenceEndDate]:checked").val());
            milestoneForm += "&RecMonthlyString=" + "";
            if (typeof ($("#hdnCustomDateFieldName").text()) != "undefined" && $("#hdnCustomDateFieldName").text() != null && $("#hdnCustomDateFieldName").text() != "") {
                milestoneForm += "&CustomDateFieldName=" + encodeURIComponent($("#hdnCustomDateFieldName").text());
            }
            formData.append("SearializeControls", milestoneForm);

            formData.append("objoccurrence", "");

            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonesnew',
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (person) {
                    $("#addEditMilestoneNew").dialog("close");

                    if ($('#milestoneInline').is(':hidden')) { }
                    else
                    {
                        $('#milestoneInline').slideToggle();
                    }



                    $("#loadingPage").fadeOut();
                    BindMilestone();
                },
                error: function (data) {
                    $("#loadingPage").fadeOut();
                },
                complete: function () {
                    $("#loadingPage").fadeOut(); $("#inprocessObligation").css('visibility', 'none');
                }
            });
        }
    }
    return isformvalid;
}

function milestonevalidate() {
    var isformvalid = false;
    if (requiredValidator('addNewMilestoneNew')) {
        if (comparedatestatus($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')), $("#ddlMilestoneNewStatus").val())) {
            var oValidate = true;
            if ($('#ddlMilestoneOccurencess').val() == "Weekly") {
                var strrecuobli = "";
                $("input:checkbox[name=chkMilestoneRecurWeekly]:checked").each(function () {
                    strrecuobli += (this.value) + ",";
                });
                if (strrecuobli == "") {
                    oValidate = false;
                }
            }

            if (!oValidate) {
                $("#loadingPage").fadeOut();
                $("input:checkbox[name=chkMilestoneRecurWeekly]").each(function () {
                    var Id = this.id;
                    $("#" + Id).css('outline', '1px solid #F00');
                });
                return false;
            }
            //Check if milestone owner is part of contract
            var ownervalidation = false;
            var arrNewOwners = [];
            var arrMilestoneOwner = $("#ddlMilestoneOwnerNew").val();
            var isGroup = false;
            $(arrMilestoneOwner).each(function (i, item) {
                if (item.indexOf('{') > -1) {
                    isGroup = true;
                }
            });
            if (isGroup) {
                arrNewOwners = getMilestoneOwners(arrMilestoneOwner.join(';'));

                var vNotMilestoneOwner = '';
                $(arrNewOwners).each(function (i, item) {
                    if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                        if (vNotMilestoneOwner == '') {
                            vNotMilestoneOwner = item;
                        }
                        else {
                            vNotMilestoneOwner += "; " + item;
                        }
                    }
                });
            }
            else {
                var vNotMilestoneOwner = '';
                $(arrMilestoneOwner).each(function (i, item) {
                    if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                        if (vNotMilestoneOwner == '') {
                            vNotMilestoneOwner = item;
                        }
                        else {
                            vNotMilestoneOwner += "; " + item;
                        }
                    }
                });
            }

            if (vNotMilestoneOwner != '') {
                swal({
                    title: '',
                    text: "<span style=\"font-weight:700\">'" + vNotMilestoneOwner + "'</span> do not have permission to access to this contract or not part of contract.",
                    showCancelButton: false,
                    confirmButtonText: 'OK',
                    html: true
                });
                $("#loadingPage").fadeOut();
                return false;
            }


            var strContractID = getParameterByName('ContractID');
            var existingconMilestones = null;
            //do start and end date validation
            var cStartDate = "";
            var cEndDate = "";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones?contractid=' + strContractID,
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                async: false,
                success: function (data) {
                    existingconMilestones = data;
                    $(data).each(function (i, item) {
                        if (item.MilestoneTitle == "Start Date") {
                            cStartDate = item.MilestoneDate;
                        } else if (item.MilestoneTitle == "End Date") {
                            cEndDate = item.MilestoneDate;
                        }
                    });
                }
            });
            var datevalidationexists = false;
            if ($("#txtMilestoneTitleNew").val() == "Start Date" && cEndDate != "") {
                if (!comparedatesmile($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')), cEndDate)) {
                    datevalidationexists = true;

                    swal("", "Start date should be less than the end date milestone.");
                }
            } else if ($("#txtMilestoneTitleNew").val() == "End Date" && cStartDate != "") {
                if (!comparedatesmile(cStartDate, $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')))) {
                    datevalidationexists = true;
                    swal("", "End date should be greater than start date milestone.");
                }
            }
            if (!datevalidationexists) {
                var MilestoneID = $("#txtMilestoneIDNew").val();
                if (MilestoneID != "") {
                    if (existingconMilestones != null) {
                        if ($('#ddlMilestoneOccurencess').val() == "None") {
                            $(existingconMilestones).each(function (i, item) {
                                if (MilestoneID != item.RowKey) {
                                    if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle) {
                                        if (!comparedatesequal(moment(new Date(item.MilestoneDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')))) {
                                            if (!datevalidationexists) {
                                                swal("", "Milestone title for the particular date already exist.");
                                            }
                                            datevalidationexists = true;
                                        }
                                    }
                                }

                            });
                        }
                        else {
                            if (listMilestoneNewData != "") {
                                var txtMilestoneNewText = $('#txtMilestoneNewText').val();
                                $(existingconMilestones).each(function (i, item) {
                                    if (MilestoneID != item.RowKey) {
                                        if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle && txtMilestoneNewText != item.MilestoneText) {
                                            if (!comparedatesequalrecurrence(moment(new Date(item.MilestoneDate)).utc().format('MM/DD/YYYY'), listMilestoneNewData)) {
                                                if (!datevalidationexists) {
                                                    swal("", "Milestone title for one of the date in recurrence already exist.");
                                                }
                                                datevalidationexists = true;
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    }
                }
                else {
                    if (existingconMilestones != null) {
                        if ($('#ddlMilestoneOccurencess').val() == "None") {
                            $(existingconMilestones).each(function (i, item) {
                                if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle) {
                                    if (!comparedatesequal(moment(new Date(item.MilestoneDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')))) {
                                        if (!datevalidationexists) {
                                            swal("", "Milestone title for the particular date already exist.");
                                        }
                                        datevalidationexists = true;
                                    }
                                }
                            });
                        }
                        else {
                            if (listMilestoneNewData != "") {
                                $(existingconMilestones).each(function (i, item) {
                                    if ($("#txtMilestoneTitleNew").val() == item.MilestoneTitle) {
                                        if (!comparedatesequalrecurrence(item.MilestoneDate, listMilestoneNewData)) {
                                            if (!datevalidationexists) {
                                                swal("", "Milestone title for one of the date in recurrence already exist.");
                                            }
                                            datevalidationexists = true;
                                        }
                                    }
                                });
                            }
                        }
                    }
                }



            }

            if (!datevalidationexists) {

                var start = moment($.datepicker.formatDate('mm/dd/yy', $("#dtMilestoneDateNew").datepicker('getDate')));
                var today = new Date();
                var end = moment(today.getMonth() + 1 + "/" + today.getDate() + "/" + today.getFullYear());
                var vv = start.diff(end, "days");
                var vRenminder = '';
                var swalFlag = false;
                var blUpdate = true;
                isformvalid = true;

                var oDate = false;
                if ($("#ddlReminder1MilestoneNew").val() == "before") {
                    if (vv <= parseInt($("#txtReminder1MilestoneNew").val())) {
                        oDate = true;
                    }
                }
                else {
                    oDate = false;
                }

                if ($("#ddlReminder2MilestoneNew").val() == "before") {
                    if (vv <= parseInt($("#txtReminder2MilestoneNew").val())) {
                        oDate = true;
                    }
                }
                else {
                    oDate = false;
                }

                if ($("#ddlReminder3MilestoneNew").val() == "before") {
                    if (vv <= parseInt($("#txtReminder3MilestoneNew").val())) {
                        oDate = true;
                    }
                }
                else {
                    oDate = false;
                }


                if (oDate) {
                    swal({
                        title: '',
                        text: "Reminders are out of date. Are you sure you want to save?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                     function (confirmed) {
                         if (confirmed) {
                             modalOnOpenMilestoneNew();
                         }
                     });
                }
                else {
                    modalOnOpenMilestoneNew();
                }

                isformvalid = blUpdate
            }
        }
        else {
            isformvalid = false;
            $("#ddlMilestoneNewStatus").addClass('error');
            $('html, body').animate({ scrollTop: 0 }, 'fast');
        }
    }

    return isformvalid;
}



function comparedatesmile(firstDate, secondDate) {

    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        secondDate != null && secondDate != '') {

        var dt1 = new Date(firstDate);
        var dt2 = new Date(secondDate);

        var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()); //Year, Month, Date
        var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()); //Year, Month, Date

        if (dateOne > dateTwo) {
            isvalid = false;
        } else {
            isvalid = true;
        }
    }
    return isvalid;
}

function comparedatesequal(firstDate, secondDate) {
    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        secondDate != null && secondDate != '') {

        var dt1 = new Date(firstDate);
        var dt2 = new Date(secondDate);

        var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()); //Year, Month, Date
        var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()); //Year, Month, Date

        if (dateOne.getTime() == dateTwo.getTime()) {
            isvalid = false;
        } else {
            isvalid = true;
        }
    }
    return isvalid;
}

function comparedatesequalrecurrence(firstDate, secondDate) {
    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        secondDate != null && secondDate != '') {
        var secondDates = secondDate.Values;
        var dt1 = new Date(firstDate);
        var dateOne = new Date(dt1.getUTCFullYear(), dt1.getUTCMonth(), dt1.getUTCDate()); //Year, Month, Date
        $(secondDates).each(function (i, item) {
            var dt2 = new Date(item);
            var dateTwo = new Date(dt2.getUTCFullYear(), dt2.getUTCMonth(), dt2.getUTCDate()); //Year, Month, Date
            if (dateOne.getTime() == dateTwo.getTime()) {
                isvalid = false;
            }
        });
    }
    return isvalid;
}


function comparedatestatus(firstDate, status) {

    var isvalid = true;
    if (firstDate != null && firstDate != '' &&
        status != null && status != '') {
        if (status == "Upcoming") {
            var dt1 = new Date(firstDate);
            var dt2 = new Date();


            var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()); //Year, Month, Date
            var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()); //Year, Month, Date

            if (dateOne > dateTwo) {
                isvalid = true;
            } else {
                isvalid = false;
            }

        }
        else if (status == "Delayed") {

            var dt1 = new Date(firstDate);
            var dt2 = new Date();

            var dateOne = new Date(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()); //Year, Month, Date
            var dateTwo = new Date(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()); //Year, Month, Date

            if (dateOne < dateTwo) {
                isvalid = true;
            } else {
                isvalid = false;
            }

        }
    }
    return isvalid;
}


// Obligation Related Methods

function BindObligations(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#ulObligation").empty();
    $("#dvObligationAlert").empty();
    $("#dvObligationAlert").css('display', 'none');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            var count = 0;
            $(contactsJsonPayload).each(function (i, item) {
                count++;
                var vDueDate = '';
                var isDelayed = 'No';
                if (item.DueDate != null) {
                    var duedate = "";

                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { duedate = moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'); }
                    else { duedate = moment(new Date(item.DueDate)).utc().format(localStorage.AppDateFormat); }

                    vDueDate = '' + duedate + ':';
                    var DueDate = new Date(item.DueDate);
                    var currentDate = new Date();
                    var dateOne = new Date(DueDate.getFullYear(), DueDate.getMonth(), DueDate.getDate()); //Year, Month, Date
                    var dateTwo = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()); //Year, Month, Date
                    if (dateOne < dateTwo)
                        isDelayed = 'Yes';
                }


                var article = '';
                if (count <= 5)
                    article = '<li class="margin-bottom-8">';
                else
                    article = '<li class="ShowMoreObligations margin-bottom-8" style="display:none;">';
                article += '<label id="ObligationID" style="display:none;">' + item.RowKey + '</label>';
                article += '<label id="ObligationTitle" style="display:none;">' + item.ObligationTitle + '</label>';
                if (item.ObligationMet == "Yes" || item.ObligationMet == "yes")
                    article += '<input type="checkbox"  id="' + item.RowKey + '"  name=chkValue onclick="checkObligation(this);" value=' + item.RowKey + ' checked /> ';
                else
                    article += '<input type="checkbox"  id="' + item.RowKey + '"  name=chkValue onclick="checkObligation(this);" value=' + item.RowKey + ' /> ';
                if (isDelayed == "Yes")
                    article += '<a href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')"><del>' + item.ObligationTitle + '</del></a>';
                else
                    article += '<a href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')">' + item.ObligationTitle + '</a>';
                article += '<span class="sub-text" style="color: black;"> ' + vDueDate + '</span>';
                article += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuObligation"/>';
                article += '</li>';
                $("#ulObligation").append(article);

            });

            if (count > 5) {
                var more = count - 5;
                $("#dvObligation").html('<a id="ShowMoreObligations" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreObligations()">' + more + ' More Obligations </a>' +
                                          '<a id="ShowLessObligations" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessObligations()" style="display:none;">Show less</a>');
            }

            $("#lblObligationsCount").text(count);
            if (!$("#lblObligationsCount").text().trim()) {
                $("#ulObligation").append('<li class="cont_Doc_Mess">No items found.</li>');
            }
            $(".openmenuObligation").contextMenu({ menu: 'dropdownMenu', leftButton: true }, function (action, el, pos) { contextMenuObligation(action, el.parent("li"), pos); });

        },
        error: function (request) {
            $("#lblObligationsCount").text('0');
            $("#ulObligation").append('No items found.');
        }

    });
}





function ShowMoreObligations() {
    $('.ShowMoreObligations').css("display", "");
    $('#ShowMoreObligations').css("display", "none");
    $('#ShowLessObligations').css("display", "");
}

function ShowLessObligations() {
    $('.ShowMoreObligations').css("display", "none");
    $('#ShowMoreObligations').css("display", "");
    $('#ShowLessObligations').css("display", "none");
}

function obligationitems(item) {
    var vDueDate = '';
    if (item.DueDate != null) {
        var fDueDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { fDueDate = moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'); }
        else { fDueDate = moment(new Date(item.DueDate)).utc().format(localStorage.AppDateFormat); }
        vDueDate = '<span>' + fDueDate + '</span>';
    }
    if (item.ObligationMet == "Yes" || item.ObligationMet == "yes") {
        $("#ulObligation").append('<li><label id="ObligationID" style="display:none;">' + item.RowKey
            + '</label><label id="ObligationTitle" style="display:none;">' + item.ObligationTitle
            + '</label><span class="milestone"><input type="checkbox"  id=' + item.RowKey
            + ' name=chkValue onclick="checkObligation(this);" value=' + item.RowKey
            + ' checked><b><a href="javascript:void(0)" class="linkText" onclick="ViewObligationDetail(\'' + item.RowKey + '\')">' + item.ObligationTitle + '</a></b><small>' + vDueDate + '</small><img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuObligation"/></span></li>');
    }
    else {
        $("#ulObligation").append('<li><label id="ObligationID" style="display:none;">' + item.RowKey
             + '</label><label id="ObligationTitle" style="display:none;">' + item.ObligationTitle
             + '</label><span class="milestone"><input type="checkbox"  id=' + item.RowKey
             + ' name=chkValue onclick="checkObligation(this);" value=' + item.RowKey
             + ' ><b><a href="javascript:void(0)" class="linkText" onclick="ViewObligationDetail(\'' + item.RowKey + '\')">' + item.ObligationTitle + '</a></b><small>' + vDueDate + '</small><img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuObligation"/></span></li>');
    }
}

function BindObligationTypes() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligationtypes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $(documenttypes).each(function (i, item) {
                $("#ddlObligationType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlObligationTypeNew").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
            });
        }
    });
}

function addObligation() {
    $("#obligationInline").slideToggle();
}

$('#btnAddObligationInline').click(function () {
    if (requiredValidator('obligationInline')) {
        $("#loadingPage").fadeIn();
        var strContractID = getParameterByName('ContractID');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations',
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            data: {
                ContractID: strContractID,
                ContractTitle: $("#lblContractTitle").text(),
                ObligationTitle: $("#txtObligationTitleInline").val(),
                ObligationOwner: $("#licontractmanagers").text(),
                DueDate: $.datepicker.formatDate('mm/dd/yy', $("#dtDueDateInline").datepicker('getDate')),
                ObligationMet: 'No',
                CreatedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName

            },
            cache: false,
            success: function (person) {
                $("#loadingPage").fadeOut();
                swal("", "Obligation Added");
                $("#obligationInline").slideToggle();
                $("#txtObligationTitleInline").val("");
                $("#dtDueDateInline").val("");
                BindObligations(strContractID);

            },
            error: function (status) {
                $("#loadingPage").fadeOut();
            }
        });
    }
});

function checkObligation(cb) {
    var ObligationID = cb.id
    var lfckv = cb.checked;
    if (lfckv) {
        $.ajax({
            async: false,
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + ObligationID + '&ismet=Yes',
            type: "PUT",
            dataType: "json",
            contentType: "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        }).done(function (data) {

            swal("", "Obligation is met");
            result = data;
            $('#dvObligationAlert #p_' + ObligationID).remove();
            if ($('#dvObligationAlert p').length == 0) {
                CloseAlert('dvObligationAlert');
                $('#dvObligationAlert').empty();
            }
        }).fail(function (data) {

            swal("", data.status + ": " + data.statusText);
        });
    } else {
        $.ajax({
            async: false,
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + ObligationID + '&ismet=No',
            type: "PUT",
            dataType: "json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            contentType: "application/json",
        }).done(function (data) {
            result = data;
            DelayedObligation(data);
        }).fail(function (data) {

            swal("", data.status + ": " + data.statusText);
        });
    }
}

function CompleteObligation(ObligationID) {
    $.ajax({
        async: false,
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + ObligationID + '&ismet=Yes',
        type: "PUT",
        dataType: "json",
        contentType: "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
    }).done(function (data) {

        result = data;
        $('#dvObligationAlert #p_' + ObligationID).remove();
        if ($('#dvObligationAlert p').length == 0) {
            CloseAlert('dvObligationAlert');
            $('#dvObligationAlert').empty();
        }
        BindObligations();
    }).fail(function (data) {

        swal("", data.status + ": " + data.statusText);
    });
}

$('#btnAddObligation').click(function () {
    $("#txtObligationID").val("");
    $("#txtObligationTitle").val("");
    $('#ddlObligationType').val("0");
    $("#txtObligationDesc").val("");
    $("#dtDueDate").val("");

    $("#lblCTitleObli").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlObligationOwner", $("#licontractmanagers").text());


    $('#obligationInline').slideToggle();


    $("#addEditObligation").dialog("option", "title", "New Obligation");
    $("#addEditObligation").dialog("open");
});

function contextMenuObligation(action, el, pos) {

    switch (action) {
        case "view":
            {
                var obligationID = $(el).find("#ObligationID").text();
                ViewObligationDetail(obligationID);
                break;
            }
        case "delete":
            {
                var termTitle = $(el).find("#ObligationTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + termTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
       function (confirmed) {
           if (confirmed) {
               var obligationID = $(el).find("#ObligationID").text();
               $.ajax({
                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                   type: 'DELETE',
                   dataType: 'json',
                   headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                   "Content-Type": "application/json",
                   cache: false,
                   success: function (data) {

                       BindObligations();
                   }
               });
           }
           return;
       });

                break;
            }
        case "edit":
            {

                $("#inprocessObligation").css("visibility", "hidden");
                var obligationID = $(el).find("#ObligationID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (obligationentity) {

                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { duedate = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY'); }
                        else { duedate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat); }

                        $("#txtObligationID").val(obligationentity.RowKey);
                        $("#txtObligationTitle").val(obligationentity.ObligationTitle);
                        $("#ddlObligationType option").filter(function (index) { return $(this).text() === obligationentity.ObligationType; }).prop('selected', true);
                        $("#txtObligationDesc").val(obligationentity.Description);
                        GetValuesAndAutoPopulate("ddlObligationOwner", obligationentity.ObligationOwner);
                        $("#dtDueDate").val(duedate);
                        $('input[type="radio"][name="ObligationMet"][value="' + obligationentity.ObligationMet + '"]').prop('checked', true);

                        if (obligationentity.AlertsEnabled == "Yes") {
                            $("#AlertObli").val('Yes').change();
                            $("#reminderEnableObligation").empty();
                            $("#reminderEnableObligation").append("Reminders");
                        }
                        else {
                            $("#AlertObli").val('No').change();
                            $("#reminderEnableObligation").empty();
                            $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notifications, click <a href='javascript:void(0);' id='enableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");

                        }
                    }
                });

                $("#lblCTitleObli").text($("#lblContractTitle").text());
                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });
                $("#PerformedPartySelf").css("display", "inline");
                $("#PerformedPartyCounterparty").css("display", "inline");
                $("#addEditObligation").dialog("option", "title", "Edit Obligation");
                $("#addEditObligation").dialog("open");
                break;
            }
    }
}

function ViewObligationDetail(obligationID) {
    $("#loadingPage").fadeIn();
    $('#tblMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (obligationentity) {
            var vOblDueDate = "";

            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
            { vOblDueDate = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY'); }
            else { vOblDueDate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat); }

            var vMetadata = '<ul id="obligationTitle" class="pOp_Cont Obligation">';
            vMetadata += '<li><p>Obligation Title</p><span class="PreserveSpace">' + obligationentity.ObligationTitle + '</span></li>';
            vMetadata += '<li><p>Obligation Type</p><span>' + obligationentity.ObligationType + '</span></li>';
            vMetadata += '<li><p>Description</p><span style="word-break: break-all;">';
            if (obligationentity.Description != '') {
                vMetadata += obligationentity.Description;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';
            vMetadata += '<li id="obligationOwners"><p>Obligation Owner</p><span>';
            if (obligationentity.ObligationOwner != '') {
                vMetadata += obligationentity.ObligationOwner;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Due Date</p><span>';
            if (vOblDueDate != '') {
                vMetadata += vOblDueDate;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';
            vMetadata += '<li><p>Obligation Met</p><span>';
            if (obligationentity.ObligationMet != '') {
                vMetadata += obligationentity.ObligationMet;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            vMetadata += '<li><p>Obligation Met By</p><span>';
            if (obligationentity.ObligationMetBy != '') {
                vMetadata += obligationentity.ObligationMetBy;
            }
            else { vMetadata += "-"; }
            vMetadata += '</span></li>';

            //ContractID 
            vMetadata += '<li id="contractID" style="display:none;"><p>ContractID</p><span>' + obligationentity.ContractID + '</span></li>';

            //Obligation ID
            vMetadata += '<li id="obligationID" style="display:none;"><p>ObligationID</p><span>' + obligationentity.RowKey + '</span></li>';
            vMetadata += '<li id="ObligationTEXT" style="display:none;"><p>ObligationTEXT</p><span>' + obligationentity.ObligationText + '</span></li>';
            vMetadata += '</ul>';
            var permissionsAll = contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees
                + ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager;
            var permissions = $.unique($(permissionsAll.split(';')).map(function (i, item) { return item.trim() }).filter(function (i, item) { return item != ""; }));
            var ogOwners = [];
            if (obligationentity.ObligationOwner != "") {
                if (obligationentity.ObligationOwner.indexOf('{') > -1) {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/ownersfromgroup?contractid=' + obligationentity.ContractID + '&milestoneonwers=' + obligationentity.ObligationOwner,
                        type: 'GET',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        async: false,
                        success: function (owners) {
                            if (owners != null || owners != "") {
                                for (var key in owners) {
                                    if (owners.hasOwnProperty(key)) {
                                        ogOwners.push(key);
                                    }
                                }
                            }
                        },
                        error: function (owners) { }
                    });
                }
                else
                    ogOwners = $.map(obligationentity.ObligationOwner.split(';'), $.trim);
            }

            $("#loadingPage").fadeOut();
            var statusArr = ["Replaced", "Expired", "Cancelled", "Archived"];
            if (ogOwners != "" && ogOwners != null && ogOwners.indexOf(localStorage.UserName) > -1 && obligationentity.ObligationMet != "Yes" && obligationentity.AutoComplete != "Yes" &&
                obligationentity.ObligationStatus != "Cancelled" && jQuery.inArray(contractItem.Status, statusArr) == -1 && permissions.toArray().indexOf(localStorage.UserName) > -1) {
                $("#tblMetadataDetailForOwner").empty();
                $("#tblMetadataDetailForOwner").append(vMetadata);
                $("#btnMarkComplete span").attr('style', 'background-color: transparent; color: #3177b5;font-size: 14px;border: 1px solid #3177b5 !important;');
                $("#viewMetadataDetailForOwner").dialog("option", "title", "View Obligation");
                $("#viewMetadataDetailForOwner").dialog("open");
            }
            else {
                $("#tblMetadataDetail").empty();
                $("#tblMetadataDetail").append(vMetadata);
                $("#viewMetadataDetail").dialog("option", "title", "View Obligation");
                $("#viewMetadataDetail").dialog("open");
            }
        },
        error: function (status) {
            $("#loadingPage").fadeOut();
        }
    });
}

function modalOnOpenObligation(dialog) {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var isformvalid = false;
    if (requiredValidator('addNewObligation')) {
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationID").val();
        var arrObligationOwner = $("#ddlObligationOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            }
            else {
                vObligationOwner += "; " + item;
            }
        });

        if ($("#txtObligationTitle").val() == "") {
            $('.ui-button-green-text').parent().removeAttr('disabled');

        } else if (ObligationID != "") {
            $("#inprocessObligation").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + ObligationID,
                type: 'PUT',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                data: {
                    RowKey: ObligationID,
                    ContractID: getParameterByName('ContractID'),
                    ContractTitle: $("#lblCTitleObli").text(),
                    ObligationTitle: $("#txtObligationTitle").val(),
                    ObligationType: $("#ddlObligationType").find('option:selected').text(),
                    Description: $("#txtObligationDesc").val(),
                    ObligationOwner: vObligationOwner,
                    DueDate: $.datepicker.formatDate('mm/dd/yy', $("#dtDueDate").datepicker('getDate')),
                    ObligationMet: $('input[type="radio"][name=ObligationMet]:checked').val(),
                    ModifiedBy: localStorage.UserName
                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');

                    $("#addEditObligation").dialog("close");

                    BindObligations();
                },
                complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
            });
        }
        else {
            $("#inprocessObligation").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations',
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                data: {
                    RowKey: $("#txtObligationID").val(),
                    ContractID: getParameterByName('ContractID'),
                    ContractTitle: $("#lblCTitleObli").text(),
                    ObligationTitle: $("#txtObligationTitle").val(),
                    ObligationType: $("#ddlObligationType").find('option:selected').text(),
                    Description: $("#txtObligationDesc").val(),
                    ObligationOwner: vObligationOwner,
                    DueDate: $.datepicker.formatDate('mm/dd/yy', $("#dtDueDate").datepicker('getDate')),
                    ObligationMet: $('input[type="radio"][name=ObligationMet]:checked').val(),
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName

                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');


                    if (vObligationFlaging == "EDIT") {

                    }
                    else {

                    }



                    $("#addEditObligation").dialog("close");
                    $("#obligationInline").slideToggle();
                    BindObligations();
                },
                complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
            });
        }
    }
    else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}



// Amendment Related Methods

function BindAmendmentTypes(contractid) {

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
        processData: false,
        success: function (contractitem) {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendmenttypes',
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                success: function (amendmenttypes) {
                    $(amendmenttypes).each(function (i, item) {

                        $("#ddlAmendmentType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                    });

                    if (contractitem.TransactionType == "Legal/General Agreement") {
                        if ($("#ddlAmendmentType option[value='Change of Contract Value']").length != -1)
                            $("#ddlAmendmentType option[value='Change of Contract Value']").remove();

                        $("#chkContractValue").attr("disabled", "disabled");
                        $("#chkContractValue").attr("style", "cursor:not-allowed;");

                    }
                    else {
                        if ($("#ddlAmendmentType option[value='Change Of Contract Value']").length != 1)
                            $("#ddlAmendmentType").append("<option value='Change Of Contract Value'>Change Of Contract Value</option>")
                        $("#chkContractValue").removeAttr('disabled');
                        $("#chkContractValue").attr("style", "cursor:pointer;");
                    }

                    if (contractitem.EndDate == null) {
                        if ($("#ddlAmendmentType option[value='Change to Terms']").length != -1)
                            $("#ddlAmendmentType option[value='Change to Terms']").remove();

                        $("#chkContractValidity").attr("disabled", "disabled");
                        $("#chkContractValidity").attr("style", "cursor:not-allowed;");
                    }
                    else {
                        if ($("#ddlAmendmentType option[value='Change to Terms']").length != 1)
                            $("#ddlAmendmentType").append("<option value='Change to Terms'>Change to Terms</option>")
                        $("#chkContractValidity").removeAttr('disabled');
                        $("#chkContractValidity").attr("style", "cursor:pointer;");
                    }

                }
            });
        }
    });
}

function BindAmendments(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#ulAmendment").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            var count = 0;
            $(contactsJsonPayload).each(function (i, item) {
                count++
                // if (count <= 5) {
                var vDesc = item.AmendmentDescription;
                if (vDesc == null || vDesc == '') {
                    vDesc = '';
                }

                var article = '';
                if (count <= 5)
                    article = '<li class=" margin-bottom-8 WrapText_h2">';
                else
                    article = '<li class="ShowMoreAmendments margin-bottom-8 WrapText_h2" style="display:none;">';
                article += '<label id="AmendmentID" style="display:none;">' + item.RowKey + '</label>';
                article += '<label id="AmendmentTitle" style="display:none;">' + item.AmendmentTitle + '</label>';
                article += '<label id="AmendmentApprovalWorkflow" style="display:none;">' + item.ApprovalWorkflow + '</label>';
                article += '<a href="javascript:void(0)" onclick="ViewAmendment(\'' + item.RowKey + '\')">' + item.AmendmentTitle + '</a>';
                article += '<span class="sub-text"> ' + vDesc + '</span>';
                article += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuAmendment"/>';
                article += '</li>';
                $("#ulAmendment").append(article);

                // }
            });

            if (count > 5) {
                var more = count - 5;
                $("#dvAmendment").html('<a id="ShowMoreAmendments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreAmendments()">' + more + ' More Amendments </a>' +
                                          '<a id="ShowLessAmendments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessAmendments()" style="display:none;">Show less</a>');
            }

            $("#lblAmendmentsCount").text(count);
            if (count == 0) {
                $("#ulAmendment").append('No items found.');
            }
            $(".openmenuAmendment").contextMenu({ menu: 'dropdownMenu', leftButton: true }, function (action, el, pos) { contextMenuAmendment(action, el.parent("li"), pos); });

        },
        error: function (request) {
            $("#lblAmendmentsCount").text('0');
            $("#ulAmendment").append('No items found.');
        }
    });
}

function ShowMoreAmendments() {
    $('.ShowMoreAmendments').css("display", "");
    $('#ShowMoreAmendments').css("display", "none");
    $('#ShowLessAmendments').css("display", "");
}

function ShowLessAmendments() {
    $('.ShowMoreAmendments').css("display", "none");
    $('#ShowMoreAmendments').css("display", "");
    $('#ShowLessAmendments').css("display", "none");
}

function addAmendment() {
    $("#btnAddAmendment").click();
}

function amendmentcompleted(obj) {
    if (obj.value == "Yes") {
        $("#dtAmendmentFinalizedDate").addClass("validelement");
        $('#trAmendmentCompletedDate').css('display', 'table-row');
        $('#trAmendmentEffectiveDate').css('display', 'table-row');
    } else {
        $("#dtAmendmentFinalizedDate").removeClass("validelement");
        $('#trAmendmentEffectiveDate').css('display', 'none');
        $('#trAmendmentCompletedDate').css('display', 'none');
        $("#dtAmendmentEffectiveDate").val('');
        $("#dtAmendmentFinalizedDate").val('');
    }
}

$('#btnAddAmendmentInline').click(function () {
    if (requiredValidator('amendmentInline')) {
        $("#loadingPage").fadeIn();
        var strContractID = getParameterByName('ContractID');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/add',
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            data: {
                ContractID: getParameterByName('ContractID'),
                ContractTitle: $("#lblContractTitle").text(),
                AmendmentTitle: $("#txtAmendmentTitleInline").val(),
                AmendmentDescription: $("#txtAmendmentDescInline").val(),
                CreatedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName,
            },
            cache: false,
            success: function (person) {
                $("#loadingPage").fadeOut();

                $("#amendmentInline").toggle();
                $("#txtAmendmentTitleInline").val("");
                $("#txtAmendmentDescInline").val("");

                BindAmendments();
            },
            error: function (status) {
                $("#loadingPage").fadeOut();
            }
        });
    }
});

$('#btnAdd').click(function (e) {
    e.preventDefault();

    var removeBtn = "<img src='../Content/Images/icon/delete.png' style='float:right; margin-top:10px;' onclick='deleteDocumentElement(this)' />";
    var htmlFormatDiv = $("<div id='uploadContainer' style='height:30px'></div>");
    var htmlFormatFile = $("<input type='file' onchange='javascript:changeinuploadfiles(this);'/>");

    var totalFileCount = $("#inTD").children("div").length;
    htmlFormatFile.attr("id", "file" + (totalFileCount + 1));
    htmlFormatFile.attr("name", "file" + (totalFileCount + 1));
    htmlFormatFile.attr("class", "file_amendment");
    htmlFormatFile.addClass("HLeyckU8");
    htmlFormatDiv.attr("id", "uploadContainer" + (totalFileCount + 1));

    htmlFormatDiv.append(htmlFormatFile);
    htmlFormatDiv.append(removeBtn);

    $("#inTD").append(htmlFormatDiv);
});

$('#btnAddAmendment').click(function () {
    AddAmendmentMore();
});

function AddAmendmentMore() {
    $("#trAttachedDoc").attr("style", "display:none");
    $("#tblDocu tr").remove();
    $("#txtAmendmentID").val("");
    $("#txtAmendmentTitle").val("");
    $('#txtAmendmentDesc').val("");
    $('#inTD').empty();

    $("#lblCTitleAmend").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    GetValuesAndAutoPopulate("ddlRequestedBy", "");


    $("#docAmendment").replaceWith($("#docAmendment").val('').clone(true));

    if (contractItem.ContractTermType == "Evergreen / Perpetual" || contractItem.ContractTermType == "Executed / Performance" || contractItem.EndDate == null) {
        $("#chkContractValidity").attr("disabled", "disabled");
        $("#chkContractValidity").attr("style", "cursor:not-allowed;");
        if ($("#ddlAmendmentType option[value='Change to Terms']").length != -1)
            $("#ddlAmendmentType option[value='Change to Terms']").remove();
    }
    else {
        $("#chkContractValidity").removeAttr('disabled');
        $("#chkContractValidity").attr("style", "cursor:pointer;");
        if ($("#ddlAmendmentType option[value='Change to Terms']").length != 1)
            $("#ddlAmendmentType").append("<option value='Change to Terms'>Change to Terms</option>")
    }

    if (contractItem.TransactionType == "Legal/General Agreement") {
        $("#chkContractValue").attr("disabled", "disabled");
        $("#chkContractValue").attr("style", "cursor:not-allowed;");
        $("#ddlAmendmentType option[value='Change of Contract Value']").remove();
    }
    else {
        $("#chkContractValue").removeAttr('disabled');
        $("#chkContractValue").attr("style", "cursor:pointer;");
        if ($("#ddlAmendmentType option[value='Change of Contract Value']").length != 1)
            $("#ddlAmendmentType").append("<option value='Change of Contract Value'>Change of Contract Value</option>")
    }

    $('#dtAmendmentEffectiveDate').val("");
    $("#chkContractValidity").prop('checked', false);
    $("#tblContractValidity").css('display', 'none');
    $("#imgconValidity").attr("title", "Collapse");
    $("#imgconValidity").attr("src", "../Content/Images/e-close.png");
    $('#txtContractEndDateAfterAmend').val("");
    $("#chkUpdateContractValidity").prop('checked', false);
    $('#txtContractValidityNotes').val("");

    $("#chkContractValue").prop('checked', false);
    $("#tblContractValue").css('display', 'none');
    $("#imgconValue").attr("title", "Collapse");
    $("#imgconValue").attr("src", "../Content/Images/e-close.png");
    $('#txtContractValueAfterAmend').val("");
    $("#chkUpdateContractValue").prop('checked', false);
    $('#txtContractValueNotes').val("");

    $("#chkSOW").prop('checked', false);
    $("#tblSOW").css('display', 'none');
    $("#imgconSOW").attr("title", "Collapse");
    $("#imgconSOW").attr("src", "../Content/Images/e-close.png");
    $('#txtSOWCurrent').val("");
    $('#txtSOWAfter').val("");
    $("#chkReplaceDoc").prop('checked', false);
    if (vDefaultAmendment == "Yes") {
        $("#dtAmendmentFinalizedDate").val("");
        $('#trAmendmentCompletedDate').css('display', '');
        $('input[type="radio"][name="AmendmentFinalized"][value="Yes"]').prop('checked', true);
        $("#dtAmendmentFinalizedDate").addClass("validelement");
    }
    else {
        $("#dtAmendmentFinalizedDate").val("");
        $('#trAmendmentCompletedDate').css('display', 'none');
        $('input[type="radio"][name="AmendmentFinalized"][value="No"]').prop('checked', true);
        $("#dtAmendmentFinalizedDate").removeClass("validelement");
    }
    var startdate = new Date($("#hdnStartDate").text());
    $("#txtContractEndDateAfterAmend").datepicker("option", "minDate", startdate);
    $("#dtAmendmentEffectiveDate").datepicker("option", "minDate", startdate);
    $("#dtAmendmentFinalizedDate").datepicker("option", "minDate", startdate);
    $("#dtAmendmentFinalizedDate").datepicker("option", "maxDate", new Date());

    if ($("input[type=radio][name=AmendmentFinalized]:checked").val() == "Yes") {
        $('#trAmendmentCompletedDate').css('display', '');
        $('#trAmendmentEffectiveDate').css('display', '');
    } else {
        $('#trAmendmentEffectiveDate').css('display', 'none');
        $('#trAmendmentCompletedDate').css('display', 'none');
        $("#dtAmendmentEffectiveDate").val('');
        $("#dtAmendmentFinalizedDate").val('');
    }

    $("#ddlAmendmentType").val("0");
    $("#addEditAmendment").dialog("option", "title", "New Amendment");
    $("#addEditAmendment").dialog("open");



    if (vCurrencyDisplayStyle == "UK") {
        $('#txtContractValueAfterAmend').autoNumeric('init');
    } else if (vCurrencyDisplayStyle == "CAN") {
        $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: ' ', aDec: '.' });
    } else if (vCurrencyDisplayStyle == "EU") {
        $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: '.', aDec: ',' });
    }
}

function ViewAmendment(amendmentID) {
    $("#loadingPage").fadeIn();
    $('#tblMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/amendmentdetails?amendmentid=' + amendmentID,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        "Content-Type": "application/json",
        cache: false,
        success: function (amendmententity) {

            var vMetadata = '<tr>';
            vMetadata += '<td class="text_label width50">Amendment Title</td>';
            vMetadata += '<td class="text width50">' + amendmententity.AmendmentTitle + '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width50">Amendment Type</td>';
            vMetadata += '<td class="text width50">' + amendmententity.AmendmentType + '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width50">Reason for Amendment</td>';
            vMetadata += '<td class="text width50">' + amendmententity.AmendmentDescription + '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Amendment Finalized</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentFinalized != '') {
                vMetadata += amendmententity.AmendmentFinalized;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Finalized Date</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentFinalizedDate != null && amendmententity.AmendmentFinalizedDate != '') {
                var completedate = "";

                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { completedate = amendmententity.AmendmentFinalizedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { completedate = amendmententity.AmendmentFinalizedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { completedate = amendmententity.AmendmentFinalizedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
                vMetadata += completedate;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Amendment Completed</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentCompleted != '') {
                vMetadata += amendmententity.AmendmentCompleted;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            vMetadata += '<tr>';
            vMetadata += '<td class="text_label width40">Completed Date</td>';
            vMetadata += '<td class="text width60">';
            if (amendmententity.AmendmentCompletedDate != null && amendmententity.AmendmentCompletedDate != '') {
                var completedate = "";

                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { completedate = amendmententity.AmendmentCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { completedate = amendmententity.AmendmentCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { completedate = amendmententity.AmendmentCompletedDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
                vMetadata += completedate;
            }
            vMetadata += '</td>';
            vMetadata += '</tr>';
            if (amendmententity.EffectiveDate != null) {
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Effective Date</td>';

                var fEffectiveDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format('MM/DD/YYYY'); }
                else { fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format(localStorage.AppDateFormat); }
                vMetadata += '<td class="text width50">' + fEffectiveDate + '</td>';
                vMetadata += '</tr>';
            }
            if (amendmententity.IsContractValidityEnabled == "Yes") {
                if (amendmententity.ContractEndDateAfterAmendment != null) {
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50">Contract End Date(After Amendment)</td>';

                    var fContractEndDateAfterAmendment = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fContractEndDateAfterAmendment = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format('MM/DD/YYYY'); }
                    else { fContractEndDateAfterAmendment = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format(localStorage.AppDateFormat); }
                    vMetadata += '<td class="text width50">' + fContractEndDateAfterAmendment + '</td>';
                    vMetadata += '</tr>';
                }
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Update (after approval) Contract Record metadata & Milestones</td>';
                vMetadata += '<td class="text width50">' + amendmententity.UpdateContractEndDate + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Contract Validity Notes</td>';
                vMetadata += '<td class="text width50">' + amendmententity.ContractValidityNotes + '</td>';
                vMetadata += '</tr>';
            }

            if (amendmententity.IsContractValueEnabled == "Yes") {
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Contract Value(After Amendment)</td>';
                vMetadata += '<td class="text width50">' + amendmententity.ContractValueAfterAmendment + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Update (after approval) Contract Value in Contract Record</td>';
                vMetadata += '<td class="text width50">' + amendmententity.UpdateContractValue + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Contract Value Notes</td>';
                vMetadata += '<td class="text width50">' + amendmententity.ContractValueNotes + '</td>';
                vMetadata += '</tr>';
            }

            if (amendmententity.IsSOWEnabled == "Yes") {
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50">Summary of SOW/Obligation/Commitment(After Amendment)</td>';
                vMetadata += '<td class="text width50">' + amendmententity.SummaryOfSOWAfterAmendment + '</td>';
                vMetadata += '</tr>';
            }

            //get amendment documents
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/documents?amendmentid=' + amendmentID,
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                "Content-Type": "application/json",
                cache: false,
                success: function (data) {
                    var htmlDocu = "";
                    if (data.length > 0) {
                        $(data).each(function (i, item) {
                            htmlDocu += "<tr>";
                            htmlDocu += "<td>";
                            htmlDocu += "<a href='" + item.DocumentUrl + "' style='border-bottom: 1px dotted;color: #3F91CC !important;font-size: 12px !important;'>";
                            htmlDocu += item.DocumentName;
                            htmlDocu += "</a>";
                            htmlDocu += "</td>";
                            htmlDocu += "</tr>";
                        });
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Attached Documents</td>';
                        vMetadata += '<td class="text width60"><table  class="width100" cellpadding="2" cellspacing="2">' + htmlDocu + '</table></td>';
                        vMetadata += '</tr>';
                    } else {
                        vMetadata += '<tr><td class="text_label width40">Attached Documents</td><td style="font-size:13px;">No items found.</td></tr>';
                    }
                    $("#loadingPage").fadeOut();
                }, error: function (data) {
                    vMetadata += '<tr><td class="text_label width40">Attached Documents</td><td style="font-size:13px;">No items found.</td></tr>';
                    $("#loadingPage").fadeOut();
                }, complete: function (data) {
                    $("#tblMetadataDetail").html(vMetadata);
                    setBlankValueToHyphen("tblMetadataDetail");
                    $("#viewMetadataDetail").dialog("option", "title", "Amendment Details");
                    $("#viewMetadataDetail").dialog("open");
                    $("#loadingPage").fadeOut();
                }
            });

        },
        error: function () {
            $("#loadingPage").fadeOut();
        },
        complete: function () {

        }
    });
}

$('#chkContractValidity').change(function () {
    if ($(this).is(":checked")) {
        $("#imgconValidity").css('display', '');
        $("#tblContractValidity").css('display', '');
        $("#imgconValidity").attr("title", "Collapse");
        $("#imgconValidity").attr("src", "/Content/Images/e-close.png");
    } else {
        $("#imgconValidity").css('display', 'none');
        if ($("#imgconValidity").attr("title") == "Collapse") {
            $("#tblContractValidity").css('display', 'none');
        }
    }
});

$('#chkContractValue').change(function () {
    if ($(this).is(":checked")) {
        $("#imgconValue").css('display', '');
        $("#tblContractValue").css('display', '');
        $("#imgconValue").attr("title", "Collapse");
        $("#imgconValue").attr("src", "/Content/Images/e-close.png");
    } else {
        $("#imgconValue").css('display', 'none');
        if ($("#imgconValue").attr("title") == "Collapse") {
            $("#tblContractValue").css('display', 'none');
        }
    }
});

$('#chkSOW').change(function () {
    if ($(this).is(":checked")) {
        $("#imgconSOW").css('display', '');
        $("#tblSOW").css('display', '');
        $("#imgconSOW").attr("title", "Collapse");
        $("#imgconSOW").attr("src", "/Content/Images/e-close.png");
    } else {
        $("#imgconSOW").css('display', 'none');
        if ($("#imgconSOW").attr("title") == "Collapse") {
            $("#tblSOW").css('display', 'none');
        }
    }
});

function contextMenuAmendment(action, el, pos) {

    switch (action) {
        case "view":
            {
                var amendmentID = $(el).find("#AmendmentID").text();
                ViewAmendment(amendmentID);

                break;
            }
        case "delete":
            {
                var amendmentTitle = $(el).find("#AmendmentTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + amendmentTitle + "</span>'?  All attachments will be deleted.",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
       function (confirmed) {
           if (confirmed) {
               $("#loadingPage").fadeIn();
               $.ajax({
                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/documents?amendmentid=' + $(el).find("#AmendmentID").text(),
                   type: 'GET',
                   dataType: 'json',
                   headers: { 'eContracts-ApiKey': localStorage.APIKey },
                   "Content-Type": "application/json",
                   cache: false,
                   async: false,
                   success: function (data) {
                       deleteamentmentdocumets(data, $(el).find("#AmendmentID").text());
                   }, error: function (data) {
                       deleteamanetment($(el).find("#AmendmentID").text());
                   }
               });
           }
           return;
       });
                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                $("#docAmendment").replaceWith($("#docAmendment").val('').clone(true));
                $('#inTD').empty();
                $("#trAttachedDoc").attr("style", "");
                var amendmentID = $(el).find("#AmendmentID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/amendmentdetails?amendmentid=' + amendmentID,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (amendmententity) {
                        $("#txtAmendmentID").val(amendmententity.RowKey);
                        $("#txtAmendmentTitle").val(amendmententity.AmendmentTitle);
                        $("#txtAmendmentDesc").val(amendmententity.AmendmentDescription);
                        $("#ddlAmendmentType option").filter(function (index) { return $(this).text() === amendmententity.AmendmentType; }).prop('selected', true);

                        $("#tblDocu").empty();
                        GetValuesAndAutoPopulate("ddlRequestedBy", amendmententity.RequestedBy);

                        if (amendmententity.AmendmentFinalized != '') {
                            $('input[type="radio"][name="AmendmentFinalized"][value="' + amendmententity.AmendmentFinalized + '"]').prop('checked', true);
                            if (amendmententity.AmendmentFinalized == "No") {
                                $('#trAmendmentCompletedDate').css('display', 'none');
                                $('#trAmendmentEffectiveDate').css('display', 'none');
                                $("#dtAmendmentFinalizedDate").removeClass("validelement");
                            }
                            else {
                                $("#dtAmendmentFinalizedDate").addClass("validelement");
                                $('#trAmendmentCompletedDate').css('display', 'table-row');
                                $('#trAmendmentEffectiveDate').css('display', 'table-row');
                            }
                        }
                        else {
                            $('input[type="radio"][name="AmendmentFinalized"][value="No"]').prop('checked', true);
                            $('#trAmendmentCompletedDate').css('display', 'none');
                            $('#trAmendmentEffectiveDate').css('display', 'none');
                            $("#dtAmendmentFinalizedDate").removeClass("validelement");
                        }
                        if (amendmententity.AmendmentFinalizedDate != null && amendmententity.AmendmentFinalizedDate != '') {
                            var completedate = "";

                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { completedate = moment(new Date(amendmententity.AmendmentFinalizedDate)).utc().format('MM/DD/YYYY'); }
                            else { completedate = moment(new Date(amendmententity.AmendmentFinalizedDate)).utc().format(localStorage.AppDateFormat); }

                            $("#dtAmendmentFinalizedDate").val(completedate);
                        }
                        else {
                            $("#dtAmendmentFinalizedDate").val('')
                        }

                        if (amendmententity.EffectiveDate != null) {

                            var fEffectiveDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format('MM/DD/YYYY'); }
                            else { fEffectiveDate = moment(new Date(amendmententity.EffectiveDate)).utc().format(localStorage.AppDateFormat); }
                            $("#dtAmendmentEffectiveDate").val(fEffectiveDate);
                        }

                        if (contractItem.ContractTermType == "Evergreen / Perpetual" || contractItem.ContractTermType == "Executed / Performance" || contractItem.EndDate == null) {
                            $("#chkContractValidity").attr("disabled", "disabled");
                            $("#chkContractValidity").attr("style", "cursor:not-allowed;");
                            if ($("#ddlAmendmentType option[value='Change to Terms']").length != -1)
                                $("#ddlAmendmentType option[value='Change to Terms']").remove();
                        } else {
                            if ($("#ddlAmendmentType option[value='Change to Terms']").length != 1)
                                $("#ddlAmendmentType").append("<option value='Change to Terms'>Change to Terms</option>")
                            if (amendmententity.IsContractValidityEnabled == "Yes") {
                                $('#chkContractValidity').prop('checked', true);
                                $("#tblContractValidity").css('display', '');
                                $("#imgconValidity").css('display', '');
                            }
                            else {
                                $('#chkContractValidity').prop('checked', false);
                                $("#tblContractValidity").css('display', 'none');
                                $("#imgconValidity").css('display', 'none');
                            }
                            $("#chkContractValidity").removeAttr('disabled');
                            $("#chkContractValidity").attr("style", "cursor:pointer;");
                        }


                        if (contractItem.TransactionType == "Legal/General Agreement") {
                            $("#chkContractValue").attr("disabled", "disabled");
                            $("#chkContractValue").attr("style", "cursor:not-allowed;");
                            if ($("#ddlAmendmentType option[value='Change of Contract Value']").length != -1)

                                $("#ddlAmendmentType option[value='Change of Contract Value']").remove();
                        }
                        else {
                            if ($("#ddlAmendmentType option[value='Change of Contract Value']").length != 1)
                                $("#ddlAmendmentType").append("<option value='Change of Contract Value'>Change of Contract Value</option>")
                            $("#chkContractValue").removeAttr('disabled');
                            $("#chkContractValue").attr("style", "cursor:pointer;");
                        }


                        if (amendmententity.ContractEndDateAfterAmendment != null) {
                            var fAppDateFormate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { fAppDateFormate = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format('MM/DD/YYYY'); }
                            else { fAppDateFormate = moment(new Date(amendmententity.ContractEndDateAfterAmendment)).utc().format(localStorage.AppDateFormat); }
                            $("#txtContractEndDateAfterAmend").val(fAppDateFormate);
                        }
                        if (amendmententity.UpdateContractEndDate == "Yes") {
                            $('#chkUpdateContractValidity').prop('checked', true);
                        }
                        $("#txtContractValidityNotes").val(amendmententity.ContractValidityNotes);


                        if (amendmententity.IsContractValueEnabled == "Yes") {
                            $('#chkContractValue').prop('checked', true);
                            $("#tblContractValue").css('display', '');
                            $("#imgconValue").css('display', '');
                        } else {
                            $('#chkContractValue').prop('checked', false);
                            $("#tblContractValue").css('display', 'none');
                            $("#imgconValue").css('display', 'none');
                        }

                        if (vCurrencyDisplayStyle == "UK") {
                            $('#txtContractValueAfterAmend').autoNumeric('init');
                            $('#txtContractValueAfterAmend').autoNumeric('set', amendmententity.ContractValueAfterAmendment);

                        } else if (vCurrencyDisplayStyle == "CAN") {
                            $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: ' ', aDec: '.' });
                            $('#txtContractValueAfterAmend').autoNumeric('set', amendmententity.ContractValueAfterAmendment);

                        } else if (vCurrencyDisplayStyle == "EU") {
                            $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: '.', aDec: ',' });
                            $('#txtContractValueAfterAmend').autoNumeric('set', amendmententity.ContractValueAfterAmendment);

                        }

                        if (amendmententity.UpdateContractValue == "Yes") {
                            $('#chkUpdateContractValue').prop('checked', true);
                        }
                        $("#txtContractValueNotes").val(amendmententity.ContractValueNotes);

                        if (amendmententity.IsSOWEnabled == "Yes") {
                            $('#chkSOW').prop('checked', true);
                            $("#tblSOW").css('display', '');
                            $("#imgconSOW").css('display', '');
                        } else {
                            $('#chkSOW').prop('checked', false);
                            $("#tblSOW").css('display', 'none');
                            $("#imgconSOW").css('display', 'none');
                        }
                        $("#txtSOWAfter").val(amendmententity.SummaryOfSOWAfterAmendment);

                        var startdate = new Date($("#hdnStartDate").text());
                        $("#txtContractEndDateAfterAmend").datepicker("option", "minDate", startdate);
                        $("#dtAmendmentEffectiveDate").datepicker("option", "minDate", startdate);
                        $("#dtAmendmentFinalizedDate").datepicker("option", "minDate", startdate);
                        $("#dtAmendmentFinalizedDate").datepicker("option", "maxDate", new Date());

                        //get amendment documents
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/documents?amendmentid=' + amendmentID,
                            type: 'GET',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                            "Content-Type": "application/json",
                            cache: false,
                            success: function (data) {
                                var htmlDocu = "";
                                if (data.length > 0) {
                                    $(data).each(function (i, item) {
                                        var htmlDocu = "";
                                        htmlDocu += "<tr>";
                                        htmlDocu += "<td>";
                                        htmlDocu += "<a class='clsLinkOfDoc' href='" + item.DocumentUrl + "' style='border-bottom: 1px dotted;color: #3F91CC !important;font-size: 12px !important;'>";
                                        htmlDocu += item.DocumentName;
                                        htmlDocu += "</a>";

                                        htmlDocu += "<a id='btnRemoveSavedDoc' href='javascript:void(0)' title='Remove file' onclick=(deleteSavedDocumentElement(this,'" + item.RowKey + "'))>";
                                        htmlDocu += "<img src='../Content/Images/icon/delete.png' style='float:right;margin: 5px 0px 0px 10px;'>";
                                        htmlDocu += "</a>";
                                        htmlDocu += "</td>";
                                        htmlDocu += "</tr>";
                                        $("#tblDocu").append(htmlDocu);
                                    });

                                } else {
                                    $("#tblDocu").append("<tr><td style='font-size:13px;'>No items found.</td></tr>");
                                }
                            }, error: function (data) {
                                $("#tblDocu").append("<tr><td style='font-size:13px;'>No items found.</td></tr>");
                            }, complete: function (data) {
                                $("#lblCTitleAmend").text($("#lblContractTitle").text());
                                $(".validelement").each(function (index, element) {
                                    $(element).removeClass("error");
                                    $("#errormsg_" + element.id).remove();
                                });
                                $("#loadingPage").fadeOut();
                                $("#addEditAmendment").dialog("option", "title", "Edit Amendment");
                                $("#addEditAmendment").dialog("open");
                            }
                        });

                    },
                    error: function () {
                        $("#loadingPage").fadeOut();
                    },
                    complete: function () {

                    }
                });

                break;
            }
    }
}

function modalOnOpenAmendment(dialog) {
    var fAmendmentEffectiveDate = '';
    if ($("#dtAmendmentEffectiveDate").val() != "" && $("#dtAmendmentEffectiveDate").val() != null) {
        fAmendmentEffectiveDate = $.datepicker.formatDate('mm/dd/yy', $("#dtAmendmentEffectiveDate").datepicker('getDate'));
    }
    var fContractEndDateAfterAmend = '';
    if ($("#txtContractEndDateAfterAmend").val() != "" && $("#txtContractEndDateAfterAmend").val() != null) {
        fContractEndDateAfterAmend = $.datepicker.formatDate('mm/dd/yy', $("#txtContractEndDateAfterAmend").datepicker('getDate'));
    }
    var fAmendmentCompletedDate = '';
    if ($("#dtAmendmentFinalizedDate").val() != "" && $("#dtAmendmentFinalizedDate").val() != null) {
        fAmendmentCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtAmendmentFinalizedDate").datepicker('getDate'));
    }
    var fContractEndDateCurrentAmend = '';
    if ($("#txtContractEndDateCurrent").val() != "" && $("#txtContractEndDateCurrent").val() != null) {
        fContractEndDateCurrentAmend = $.datepicker.formatDate('mm/dd/yy', $("#txtContractEndDateCurrent").datepicker('getDate'));
    }

    var completeddate = fAmendmentCompletedDate != '' ? new Date(fAmendmentCompletedDate) : "";
    var effectivedate = fAmendmentEffectiveDate != '' ? new Date(fAmendmentEffectiveDate) : "";
    var currentdate = new Date(moment());
    var EndDateAfterAmend = new Date(fContractEndDateAfterAmend);
    var oAmendmentCompleted = false;
    if (EndDateAfterAmend != "" && currentdate != null && EndDateAfterAmend.setHours(0, 0, 0, 0) < currentdate.setHours(0, 0, 0, 0)) {
        swal({
            title: '',
            text: "Contract Record End Date(After Amendment) cannot be less than Today's Date",
            type: 'warning',
            showCancelButton: false,
            confirmButtonText: 'OK',
            html: true
        },
       function (confirmed) {
           if (confirmed) {
               $("#loadingPage").fadeOut();
           }
       });
        return;
    }
    else if (completeddate != "" && effectivedate != null) {
        if ($('input[type="radio"][name=AmendmentFinalized]:checked').val() == "Yes") {
            if (effectivedate.setHours(0, 0, 0, 0) <= currentdate.setHours(0, 0, 0, 0)) {
                oAmendmentCompleted = true;
                if (completeddate.setHours(0, 0, 0, 0) > effectivedate.setHours(0, 0, 0, 0)) {
                    swal({
                        title: '',
                        text: "Amendment Finalized Date cannot be greater than Effective Date",
                        type: 'warning',
                        showCancelButton: false,
                        confirmButtonText: 'OK',
                        html: true
                    },
                   function (confirmed) {
                       if (confirmed) {
                           $("#loadingPage").fadeOut();

                       }
                   });
                    return;
                }
            }
            //else {
            //    swal({
            //        title: '',
            //        text: "Amendment Effective Date cannot be greater than Today's Date",
            //        type: 'warning',
            //        showCancelButton: false,
            //        confirmButtonText: 'OK',
            //        html: true
            //    },
            //    function (confirmed) {
            //        if (confirmed) {
            //            $("#loadingPage").fadeOut();

            //        }
            //    });
            //    return;

            //}
        }
    }
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var urlOfAttachedDoc = getUrlOfAttachedDoc();
    var isformvalid = false;
    if (requiredValidator('addNewAmendment')) {
        $("#loadingPage").fadeIn();
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var AmendmentID = $("#txtAmendmentID").val()
        if (AmendmentID != "") {
            if (!CheckAmendmentTitle(AmendmentID, $("#txtAmendmentTitle").val())) {
                var formData = new FormData();
                var opmlFile = $('#docAmendment')[0];

                formData.append("opmlFile", opmlFile.files[0]);
                var totalFileCount = $("#inTD").children("div").length

                for (var i = 1; i < totalFileCount + 1; i++) {

                    var filename = '#file' + i;
                    formData.append("opmlFile" + i, $(filename)[0].files[0]);

                }

                formData.append("UrlOfAttachedDoc", urlOfAttachedDoc);
                formData.append("AmendmentID", AmendmentID);
                formData.append("ContractID", getParameterByName('ContractID'));
                formData.append("ContractTitle", $("#lblCTitleAmend").text());
                formData.append("AmendmentTitle", $("#txtAmendmentTitle").val())
                formData.append("AmendmentType", $("#ddlAmendmentType").val());
                formData.append("AmendmentDescription", $("#txtAmendmentDesc").val());
                formData.append("OriginatingCompany", "OriginatingCompany");
                formData.append("AccountID", localStorage.AccountID);
                formData.append("ModifiedBy", localStorage.UserName);

                formData.append("LocationURL", $('#lblFolderUrlAmend').text())
                formData.append("FolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())
                formData.append("NewFolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())

                if ($("#txtBusinessArea").val() != "") {
                    formData.append("BusinessArea", $("#txtBusinessArea").val().trim());
                } else {
                    formData.append("BusinessArea", $("#lblBusinessArea").text().trim());
                }
                formData.append("BusinessAreaPath", $("#lblBusinessAreaPath").text());
                formData.append("ContractArea", $("#lblContractArea").text().trim());
                formData.append("ContractAreaAdministrators", $("#lblContractAreaAdmins").text().trim());
                formData.append("BusinessAreaOwners", $("#lblBusinessAreaOwners").text().trim());

                var RequestedByToArr = $("#ddlRequestedBy").val();
                var vRequestedBy = '';
                $(RequestedByToArr).each(function (i, item) {
                    if (vRequestedBy == '') {
                        vRequestedBy = item;
                    }
                    else {
                        vRequestedBy += "; " + item;
                    }
                });
                formData.append("RequestedBy", vRequestedBy);

                var vAmendmentCompleted = $('input[type="radio"][name=AmendmentFinalized]:checked').val();
                if (vAmendmentCompleted == "Yes") {
                    if (fAmendmentEffectiveDate == '')
                        amendmentcompletedchecking = true;
                    else {
                        if (oAmendmentCompleted)
                            amendmentcompletedchecking = true;
                        else
                            amendmentcompletedchecking = false;
                    }
                }
                else {
                    amendmentcompletedchecking = false;
                }
                formData.append("AmendmentFinalized", vAmendmentCompleted);
                formData.append("AmendmentFinalizedDate", (vAmendmentCompleted == "Yes") ? fAmendmentCompletedDate : '');

                formData.append("EffectiveDate", fAmendmentEffectiveDate);

                if ($("#chkContractValidity").is(":checked")) {
                    formData.append("IsContractValidityEnabled", "Yes");
                    formData.append("ContractEndDateAfterAmendment", fContractEndDateAfterAmend);
                    if ($("#chkUpdateContractValidity").is(":checked")) {
                        formData.append("UpdateContractEndDate", "Yes");
                    } else {
                        formData.append("UpdateContractEndDate", "No");
                    }
                    formData.append("ContractValidityNotes", $("#txtContractValidityNotes").val());
                } else {
                    formData.append("IsContractValidityEnabled", "No");
                    formData.append("ContractEndDateAfterAmendment", "");
                    formData.append("UpdateContractEndDate", "No");
                    formData.append("ContractValidityNotes", "");
                }
                if ($("#chkContractValue").is(":checked")) {
                    formData.append("IsContractValueEnabled", "Yes");
                    formData.append("ContractValueAfterAmendment", $("#txtContractValueAfterAmend").autoNumeric('get'));
                    if (vAmendmentCompleted == "Yes") {
                        if (fAmendmentEffectiveDate == '')
                            formData.append("UpdateContractValue", "Yes");
                        else {
                            if (oAmendmentCompleted)
                                formData.append("UpdateContractValue", "Yes");
                            else
                                formData.append("UpdateContractValue", "No");
                        }
                    } else {
                        formData.append("UpdateContractValue", "No");
                    }
                    formData.append("ContractValueNotes", $("#txtContractValueNotes").val());
                } else {
                    formData.append("IsContractValueEnabled", "NO");
                    formData.append("ContractValueAfterAmendment", "");
                    formData.append("UpdateContractValue", "No");
                    formData.append("ContractValueNotes", "");
                }

                if ($("#chkSOW").is(":checked")) {
                    formData.append("IsSOWEnabled", "Yes");
                    formData.append("SummaryOfSOWAfterAmendment", $("#txtSOWAfter").val());

                } else {
                    formData.append("IsSOWEnabled", "No");
                    formData.append("SummaryOfSOWAfterAmendment", "");
                }
                if (CheckAmendmentDocumentExist()) {
                    //if document exists as confirmation to overwrite
                    swal({
                        title: '',
                        text: ExitDocuemntName + " already exists, do you want to overwrite the existing document?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
          function (confirmed) {
              if (confirmed) {
                  if ($("#chkReplaceDoc").is(":checked")) {
                      formData.append("ReplaceDocument", "Yes");
                      formData.append("AmendmentidtoPass", AmendmentidtoPass);
                  } else {
                      formData.append("ReplaceDocument", "Yes");
                      formData.append("AmendmentidtoPass", AmendmentidtoPass);
                  }

                  $.ajax({
                      url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?amendmentid=' + AmendmentID,
                      type: 'PUT',
                      data: formData,
                      cache: false,
                      contentType: false,
                      headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                      processData: false,
                      success: function (person) {
                          $('.ui-button-green-text').parent().removeAttr('disabled');
                          BindAmendments();
                          //manoj
                          if (documentview == null || documentview == "" || documentview == 'folder') {
                              if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                  var selectedfoldervalue = $('#showAll').find("a");
                                  var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                  var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                  var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                  showfolderdocuments(parentdocumentdetails);
                              }
                              else {
                                  BindDocument(vContractID);
                              }
                          } else {
                              DisplayDocument(documentview);
                          }
                          pendingStarted = false;
                          GetContractPendingAction(true, "BindPeoples");
                          $("#hdnFolderDocumentView").text('');
                          $("#hdnShowAllTextValue").html('');
                          PrvFolderselection = '';
                          //Bind primary and pined document based on new feature
                          if ($("#hdnnewdocumentfeature").text() == "Yes") {
                              CreateDocumentListPinView(vContractID);
                          }
                          //manoj
                          $("#addEditAmendment").dialog("close");
                      },
                      complete: function () {
                          if ($('#txtNewFolderNameAmend').val() != "" && document.getElementById('txtNewFolderNameAmend').style.display != 'none') {
                              var checkingtestamd = $('#lblFolderUrlAmend').text();
                              $('#lblFolderUrlAmend').text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/" : checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                              $("#hdnContractDocumentsUrl").text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" : checkingtestamd);
                              $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                              $('#txtNewFolderNameAmend').css('display', 'none');
                              $('#txtNewFolderNameAmend').val("");
                              $('#txtNewFolderNameAmend').removeClass('validelement');
                          }
                          $("#loadingPage").fadeOut();
                      }
                  });
              }
              else {
                  $('.ui-button-green-text').parent().removeAttr('disabled');
                  $("#loadingPage").fadeOut();
              }
              return;
          });
                } else {
                    if ($("#chkReplaceDoc").is(":checked")) {
                        formData.append("ReplaceDocument", "Yes");
                        formData.append("AmendmentidtoPass", AmendmentidtoPass);
                    } else {
                        formData.append("ReplaceDocument", "No");
                    }
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?amendmentid=' + AmendmentID,
                        type: 'PUT',
                        data: formData,
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                        processData: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            BindAmendments();
                            //manoj
                            if (documentview == null || documentview == "" || documentview == 'folder') {
                                if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                    var selectedfoldervalue = $('#showAll').find("a");
                                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                    var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                    showfolderdocuments(parentdocumentdetails);
                                }
                                else {
                                    BindDocument(vContractID);
                                }
                            } else {
                                DisplayDocument(documentview);
                            }
                            pendingStarted = false;
                            GetContractPendingAction(true, "BindPeoples");
                            $("#hdnFolderDocumentView").text('');
                            $("#hdnShowAllTextValue").html('');
                            PrvFolderselection = '';
                            //Bind primary and pined document based on new feature
                            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                CreateDocumentListPinView(vContractID);
                            }
                            //manoj
                            amendmentsucessbinding();
                            $("#addEditAmendment").dialog("close");
                        },
                        complete: function () {
                            if ($('#txtNewFolderNameAmend').val() != "" && document.getElementById('txtNewFolderNameAmend').style.display != 'none') {
                                var checkingtestamd = $('#lblFolderUrlAmend').text();
                                $('#lblFolderUrlAmend').text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/" : checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                                $("#hdnContractDocumentsUrl").text(((checkingtestamd.substr(checkingtestamd.length - 1)) != "/") ? checkingtestamd + "/" : checkingtestamd);
                                $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                $('#txtNewFolderNameAmend').css('display', 'none');
                                $('#txtNewFolderNameAmend').val("");
                                $('#txtNewFolderNameAmend').removeClass('validelement');
                            }
                            $("#loadingPage").fadeOut();
                        }
                    });
                }
            } else {
                swal("", "Amendment record exists with the title '<span style=\"font-weight:700\">" + $("#txtAmendmentTitle").val() + "</span>'");
                $("#loadingPage").fadeOut();
                $("#txtAmendmentTitle").focus();
            }
        }
        else {
            if (!CheckAmendmentTitle(AmendmentID, $("#txtAmendmentTitle").val())) {
                var formData1 = new FormData();
                var opmlFile = $('#docAmendment')[0];

                formData1.append("opmlFile", opmlFile.files[0]);
                var totalFileCount = $("#inTD").children("div").length
                for (var i = 1; i < totalFileCount + 1; i++) {
                    var filename = '#file' + i;
                    formData1.append("opmlFile" + i, $(filename)[0].files[0]);
                }
                formData1.append("AccountID", localStorage.AccountID);
                formData1.append("AmendmentID", AmendmentID);
                formData1.append("ContractID", getParameterByName('ContractID'));
                formData1.append("ContractTitle", $("#lblCTitleAmend").text());
                formData1.append("AmendmentTitle", $("#txtAmendmentTitle").val())
                formData1.append("AmendmentType", $("#ddlAmendmentType").val());
                formData1.append("AmendmentDescription", $("#txtAmendmentDesc").val());
                formData1.append("OriginatingCompany", "OriginatingCompany");
                formData1.append("CreatedBy", localStorage.UserName);
                formData1.append("ModifiedBy", localStorage.UserName);

                formData1.append("LocationURL", $('#lblFolderUrlAmend').text())
                formData1.append("FolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())
                formData1.append("NewFolderName", $('#txtNewFolderNameAmend').val().replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim())

                if ($("#txtBusinessArea").val() != "") {
                    formData1.append("BusinessArea", $("#txtBusinessArea").val().trim());
                } else {
                    formData1.append("BusinessArea", $("#lblBusinessArea").text().trim());
                }
                formData1.append("BusinessAreaPath", $("#lblBusinessAreaPath").text());
                formData1.append("ContractArea", $("#lblContractArea").text().trim());
                formData1.append("ContractAreaAdministrators", $("#lblContractAreaAdmins").text().trim());
                formData1.append("BusinessAreaOwners", $("#lblBusinessAreaOwners").text().trim());

                var RequestedByToArr = $("#ddlRequestedBy").val();
                var vRequestedBy = '';
                $(RequestedByToArr).each(function (i, item) {
                    if (vRequestedBy == '') {
                        vRequestedBy = item;
                    }
                    else {
                        vRequestedBy += "; " + item;
                    }
                });
                formData1.append("RequestedBy", vRequestedBy);
                var vAmendmentCompleted = $('input[type="radio"][name=AmendmentFinalized]:checked').val();
                if (vAmendmentCompleted == "Yes") {
                    if (fAmendmentEffectiveDate == '')
                        amendmentcompletedchecking = true;
                    else {
                        if (oAmendmentCompleted)
                            amendmentcompletedchecking = true;
                        else
                            amendmentcompletedchecking = false;
                    }
                }
                else {
                    amendmentcompletedchecking = false;
                }
                formData1.append("AmendmentFinalized", vAmendmentCompleted);
                formData1.append("AmendmentFinalizedDate", (vAmendmentCompleted == "Yes") ? fAmendmentCompletedDate : '');

                formData1.append("EffectiveDate", fAmendmentEffectiveDate);

                if ($("#chkContractValidity").is(":checked")) {
                    formData1.append("IsContractValidityEnabled", "Yes");
                    formData1.append("ContractEndDateAfterAmendment", fContractEndDateAfterAmend);
                    if ($("#chkUpdateContractValidity").is(":checked")) {
                        formData1.append("UpdateContractEndDate", "Yes");
                    } else {
                        formData1.append("UpdateContractEndDate", "No");
                    }
                    formData1.append("ContractValidityNotes", $("#txtContractValidityNotes").val());
                } else {
                    formData1.append("IsContractValidityEnabled", "No");
                    formData1.append("ContractEndDateAfterAmendment", "");
                    formData1.append("UpdateContractEndDate", "No");
                    formData1.append("ContractValidityNotes", "");
                }

                if ($("#chkContractValue").is(":checked")) {
                    formData1.append("IsContractValueEnabled", "Yes");
                    formData1.append("ContractValueAfterAmendment", $("#txtContractValueAfterAmend").autoNumeric('get'));
                    if (vAmendmentCompleted == "Yes") {
                        if (fAmendmentEffectiveDate == '')
                            formData1.append("UpdateContractValue", "Yes");
                        else {
                            if (oAmendmentCompleted)
                                formData1.append("UpdateContractValue", "Yes");
                            else
                                formData1.append("UpdateContractValue", "No");
                        }

                    } else {
                        formData1.append("UpdateContractValue", "No");
                    }
                    formData1.append("ContractValueNotes", $("#txtContractValueNotes").val());
                } else {
                    formData1.append("IsContractValueEnabled", "No");
                    formData1.append("ContractValueAfterAmendment", "");
                    formData1.append("UpdateContractValue", "No");
                    formData1.append("ContractValueNotes", "");
                }

                if ($("#chkSOW").is(":checked")) {
                    formData1.append("IsSOWEnabled", "Yes");
                    formData1.append("SummaryOfSOWAfterAmendment", $("#txtSOWAfter").val());

                } else {
                    formData1.append("IsSOWEnabled", "No");
                    formData1.append("SummaryOfSOWAfterAmendment", "");
                }

                if (CheckAmendmentDocumentExist()) {
                    //if document exists as confirmation to overwrite
                    swal({
                        title: '',
                        text: ExitDocuemntName + " already exists, do you want to overwrite the existing document?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
          function (confirmed) {
              if (confirmed) {
                  if ($("#chkReplaceDoc").is(":checked")) {
                      formData1.append("IsSOWEnabled", "Yes");
                      formData1.append("ReplaceDocument", "Yes");
                      formData1.append("AmendmentidtoPass", AmendmentidtoPass);
                  } else {
                      formData1.append("IsSOWEnabled", "No");
                      formData1.append("ReplaceDocument", "Yes");
                      formData1.append("AmendmentidtoPass", AmendmentidtoPass);
                  }

                  $.ajax({
                      url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/addwithdoc',
                      type: 'POST',
                      data: formData1,
                      cache: false,
                      contentType: false,
                      headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                      processData: false,
                      success: function (person) {
                          $('.ui-button-green-text').parent().removeAttr('disabled');
                          $("#addEditAmendment").dialog("close");
                          BindAmendments();
                          //manoj
                          if (documentview == null || documentview == "" || documentview == 'folder') {
                              if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                  var selectedfoldervalue = $('#showAll').find("a");
                                  var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                  var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                  var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                  showfolderdocuments(parentdocumentdetails);
                              }
                              else {
                                  BindDocument(vContractID);
                              }
                          } else {
                              DisplayDocument(documentview);
                          }
                          pendingStarted = false;
                          GetContractPendingAction(true, "BindPeoples");
                          $("#hdnFolderDocumentView").text('');
                          $("#hdnShowAllTextValue").html('');
                          PrvFolderselection = '';
                          //Bind primary and pined document based on new feature
                          if ($("#hdnnewdocumentfeature").text() == "Yes") {
                              CreateDocumentListPinView(vContractID);
                          }
                          //manoj
                          amendmentsucessbinding();
                      },
                      complete: function () {
                          if ($('#txtNewFolderNameAmend').val() != "") {
                              var checkingtestamd = $('#lblFolderUrlAmend').text();
                              var lastCharcheckingamd = checkingtestamd.slice(-1);
                              if (lastCharcheckingamd == "/") {
                                  $('#lblFolderUrlAmend').text(checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                                  $("#hdnContractDocumentsUrl").text(checkingtestamd);
                                  $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                  $('#txtNewFolderNameAmend').css('display', 'none');
                                  $('#txtNewFolderNameAmend').val("");
                              } else {
                                  $('#lblFolderUrlAmend').text(checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/");
                                  $("#hdnContractDocumentsUrl").text(checkingtestamd + "/");
                                  $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                  $('#txtNewFolderNameAmend').css('display', 'none');
                                  $('#txtNewFolderNameAmend').val("");
                              }
                              $('#txtNewFolderNameAmend').removeClass('validelement');
                          }
                          $("#loadingPage").fadeOut();
                      }
                  });
              }
              else {
                  $('.ui-button-green-text').parent().removeAttr('disabled');
                  $("#loadingPage").fadeOut();
              }
              return;
          });

                } else {
                    if ($("#chkReplaceDoc").is(":checked")) {
                        formData1.append("IsSOWEnabled", "Yes");
                        formData1.append("ReplaceDocument", "Yes");
                        formData1.append("AmendmentidtoPass", AmendmentidtoPass);
                    } else {
                        formData1.append("IsSOWEnabled", "No");
                        formData1.append("ReplaceDocument", "No");
                    }
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments/addwithdoc',
                        type: 'POST',
                        data: formData1,
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                        processData: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            $("#addEditAmendment").dialog("close");
                            $("#loadingPage").fadeOut();
                            BindAmendments();
                            //manoj
                            if (documentview == null || documentview == "" || documentview == 'folder') {
                                if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                    var selectedfoldervalue = $('#showAll').find("a");
                                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                    var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                    showfolderdocuments(parentdocumentdetails);
                                }
                                else {
                                    BindDocument(vContractID);
                                }
                            } else {
                                DisplayDocument(documentview);
                            }
                            pendingStarted = false;
                            GetContractPendingAction(true, "BindPeoples");
                            $("#hdnFolderDocumentView").text('');
                            $("#hdnShowAllTextValue").html('');
                            PrvFolderselection = '';
                            //Bind primary and pined document based on new feature
                            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                CreateDocumentListPinView(vContractID);
                            }
                            //manoj
                        },
                        complete: function () {
                            if ($('#txtNewFolderNameAmend').val() != "") {
                                var checkingtestamd = $('#lblFolderUrlAmend').text();
                                var lastCharcheckingamd = checkingtestamd.slice(-1);
                                if (lastCharcheckingamd == "/") {
                                    $('#lblFolderUrlAmend').text(checkingtestamd + $('#txtNewFolderNameAmend').val() + "/");
                                    $("#hdnContractDocumentsUrl").text(checkingtestamd);
                                    $('#txtNewFolderNameAmend').css('display', 'none');
                                    $('#txtNewFolderNameAmend').val("");
                                } else {
                                    $('#lblFolderUrlAmend').text(checkingtestamd + "/" + $('#txtNewFolderNameAmend').val() + "/");
                                    $("#hdnContractDocumentsUrl").text(checkingtestamd + "/");
                                    $('#txtNewFolderNameAmend').css('display', 'none');
                                    $('#txtNewFolderNameAmend').val("");
                                }
                                $('#txtNewFolderNameAmend').removeClass('validelement');
                            }
                            $("#loadingPage").fadeOut();
                        }
                    });
                }
            } else {
                swal("", "Amendment record exists with the title '<span style=\"font-weight:700\">" + $("#txtAmendmentTitle").val() + "</span>'");
                $("#loadingPage").fadeOut();
                $("#txtAmendmentTitle").focus();
            }
        }
    }
    else {


        autoscroll();
        $("#addEditAmendment").animate({
            scrollTop: $(".error").offset().top
        }, 2000);
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}

function deleteDocumentElement(n) {
    var ele = n.parentNode.id;
    var pattern = /[0-9]+/g;
    var docNumb = ele.replace(/[^0-9]/g, '');
    n.parentNode.parentNode.removeChild(n.parentNode);

    var totalFileCount = $("#inTD").children().length;
    totalFileCount = totalFileCount + 1;
    var count = parseInt(docNumb) + 1;

    for (var i = count ; i < (totalFileCount + 1) ; i++) {
        $("#uploadContainer" + i).attr('id', 'uploadContainer' + (i - 1));
        var element = $("#file" + i);
        element.attr('id', 'file' + (i - 1));
        element.attr('name', 'file' + (i - 1));
    }
}

function deleteSavedDocumentElement(n, RowKey) {
    swal({
        title: '',
        text: "Are you sure you want to delete?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
       function (confirmed) {
           if (confirmed) {
               $(n).parent().parent().remove();
               $.ajax({
                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + RowKey + '&amendment=True',
                   type: 'DELETE',
                   dataType: 'json',
                   "Content-Type": "application/json",
                   headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                   cache: false,
                   success: function (data) {

                   },
                   error: function () {

                   }
               });
           }
           return;
       });

}

function getUrlOfAttachedDoc() {
    var urlOfAttachedDoc = "";
    $('.clsLinkOfDoc').each(function () {
        var href = $(this).attr('href');
        if (urlOfAttachedDoc == "")
            urlOfAttachedDoc += href;
        else
            urlOfAttachedDoc += ";" + href;
    });
    return urlOfAttachedDoc;
}


// Correspondence Related Methods


//function addCorrespondence() {
//    $("#btnNewCorrespondence").click();
//}

$('#btnNewCorrespondence').click(function () {
    AddCorrespondenceMore();
});

function AddCorrespondenceMore() {
    $("#lblCTitleCorrespondence").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $("#txtCorrespondenceTitle").val("");
    $("#txtCorrespondenceNote").val("");
    $("#docCorrespondence").replaceWith($("#docCorrespondence").val('').clone(true));
    $("#addEditCorrespondence").dialog("option", "title", "New Correspondence");
    $("#addEditCorrespondence").dialog("open");
}



function modalOnOpenCorrespondence(dialog) {
    var isformvalid = false;
    if (requiredValidator('addNewCorrespondence')) {
        $("#loadingPage").fadeIn();
        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var formData1 = new FormData();
        var opmlFile = $('#docCorrespondence')[0];
        formData1.append("opmlFile", opmlFile.files[0]);
        formData1.append("AccountID", localStorage.AccountID);
        formData1.append("ContractID", getParameterByName('ContractID'));
        formData1.append("ContractTitle", $("#lblCTitleCorrespondence").text());
        formData1.append("Subject", encodeURIComponent($("#txtCorrespondenceTitle").val()))
        formData1.append("Body", "");
        formData1.append("FromSite", "Yes");
        formData1.append("Comment", $("#txtCorrespondenceNote").val());
        formData1.append("CreatedBy", localStorage.UserName);
        formData1.append("ModifiedBy", localStorage.UserName);
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence',
            type: 'POST',
            data: formData1,
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
            processData: false,
            success: function (person) {
                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#addEditCorrespondence").dialog("close");
                BindCorrespondence(vContractID);
            },
            error: function (person) {
                $("#loadingPage").fadeOut();
            },
            complete: function () {
                $("#loadingPage").fadeOut();
            }
        });
    }
    else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}

function BindCorrespondence(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#ulCorrespondence").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence/Contracts/' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            var count = 0;
            $(contactsJsonPayload).each(function (i, item) {
                count++;

                var article = '';
                if (count <= 5)
                    article = '<li class="margin-bottom-8 WrapText_h2">';
                else
                    article = '<li class="ShowMoreCorrespondence margin-bottom-8 WrapText_h2" style="display:none;">';
                article += '<label id="RowKey" style="display:none;">' + item.RowKey + '</label>';
                article += '<label id="ContractID" style="display:none;">' + item.ContractID + '</label>';
                article += '<label id="ContractTitle" style="display:none;" class="PreserveSpace">' + item.ContractTitle + '</label>';
                article += '<label id="Subject" style="display:none;">' + item.Subject + '</label>';
                article += '<label id="URLLink" style="display:none;">' + item.BodyUrlOrigin + '</label>';
                article += '<a href="javascript:void(0)" onclick="ViewCorrespondenceDetail(\'' + item.RowKey + '\')">' + item.Subject + '</a>';

                article += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuCorrespondence"/>';
                article += '</li>';
                $("#ulCorrespondence").append(article);


            });

            if (count > 5) {
                var more = count - 5;
                $("#dvCorrespondence").html('<a id="ShowMoreCorrespondence" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreCorrespondence()">' + more + ' More Correspondence </a>' +
                                     '<a id="ShowLessCorrespondence" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessCorrespondence()" style="display:none;">Show less</a>');
            }

            $("#lblCorrespondenceCount").text(count);
            if (count == 0) {
                $("#ulCorrespondence").append('No items found.');
            }
            $(".openmenuCorrespondence").contextMenu({ menu: 'dropdownMenuCorrespondence', leftButton: true }, function (action, el, pos) { contextMenuCorrespondence(action, el.parent("li"), pos); });

        },
        error: function (request) {
            $("#lblCorrespondenceCount").text('0');
            $("#ulCorrespondence").append('No items found.');
        }

    });
}

function ShowMoreCorrespondence() {
    $('.ShowMoreCorrespondence').css("display", "");
    $('#ShowMoreCorrespondence').css("display", "none");
    $('#ShowLessCorrespondence').css("display", "");
}

function ShowLessCorrespondence() {
    $('.ShowMoreCorrespondence').css("display", "none");
    $('#ShowMoreCorrespondence').css("display", "");
    $('#ShowLessCorrespondence').css("display", "none");
}


function ViewCorrespondenceDetail(entityid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence?correspondenceid=' + entityid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (item) {


            if (item.FromSite == "Yes") {
                $("#CorresSubject").html(item.Subject);
                $("#CorresComment").html(item.Comment);
                $("#SavedBy").html(item.CreatedBy);
                $("#SavedOn").html(moment(new Date(item.Timestamp)).format('Do MMM'));
                $("#CorrespondenceFile").html('<a class="linkText Manage" href="' + item.BodyUrl + '">' + item.BodyUrl + '</a>');
                $("#trEmailText3").css('display', '');
                $("#trEmailText1").css('display', 'none');
                $("#trEmailText2").css('display', 'none');


                $("#dvCorrespondenceDetails").dialog("option", "title", "Correspondence Details");
                $("#dvCorrespondenceDetails").dialog("open");
            }
            else {
                $("#trEmailText3").css('display', 'none');
                $("#trEmailText1").css('display', '');
                $("#trEmailText2").css('display', '');

                if (item.BodyUrl != null && item.BodyUrl != "") {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/textfromblobfile?fileurl=' + encodeURIComponent(item.BodyUrl),
                        type: 'GET',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        success: function (blobdata) {
                            var div = document.createElement('div');
                            div.innerHTML = blobdata;
                            $("#CorresSubject").html(item.Subject);
                            $("#CorresComment").html(item.Comment);
                            $("#SavedBy").html(item.CreatedBy);
                            $("#SavedOn").html(moment(new Date(item.Timestamp)).format('Do MMM'));
                            var attc = GetTheAttachments(item.BodyUrl, item.Attachments, item.RowKey);
                            if (attc != "")
                                $("#Attachments").html(attc);
                            else
                                $("#Attachments").html("No attachments found.");

                            $('body', $("#CorresBody2")[0].contentWindow.document).html(div.textContent);
                            $($("#CorresBody2")[0].contentWindow.document).find('head').append('<base target="_blank">');
                            $("#dvCorrespondenceDetails").dialog("option", "title", "Correspondence Details");
                            $("#dvCorrespondenceDetails").dialog("open");
                        },
                        error: function (blobdata) {

                        }
                    });
                }
                else {

                    $("#CorresSubject").html(item.Subject);
                    $("#CorresComment").html(item.Comment);
                    $("#SavedBy").html(item.CreatedBy);
                    $("#SavedOn").html(moment(new Date(item.Timestamp)).format('Do MMM'));

                    $('body', $("#CorresBody2")[0].contentWindow.document).html(item.Body)
                    $($("#CorresBody2")[0].contentWindow.document).find('head').append('<base target="_blank">');
                    $("#dvCorrespondenceDetails").dialog("option", "title", "Correspondence Details");
                    $("#dvCorrespondenceDetails").dialog("open");
                }
            }

        },
        error: function (request) {

        }

    });
}






function contextMenuCorrespondence(action, el, pos) {

    switch (action) {
        case "view":
            {
                var entityid = $(el).find("#RowKey").text();
                ViewCorrespondenceDetail(entityid);
                break;
            }
        case "download":
            {
                var LinkURL = $(el).find("#URLLink").text();
                var arr = LinkURL.split('/');
                var fileName = arr[arr.length - 1];

                var URIStart = fileName.substring(fileName.lastIndexOf("_") + 1);
                newWindow = window.open(LinkURL, URIStart);
                //$.ajax({
                //    url: '/General/DownloadFileFromBlob',
                //    type: 'GET',
                //    data: { fileName: fileName, containerName: "correspondence" },
                //    cache: false,
                //    async: false,
                //    success: function (contractfieldentity) {

                //    },
                //    error: function (data) {

                //    }
                //});
                break;
            }
        case "delete":
            {
                var Subject = $(el).find("#Subject").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + Subject + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
       function (confirmed) {
           if (confirmed) {
               var entityid = $(el).find("#RowKey").text();
               $.ajax({
                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/correspondence?correspondenceid=' + entityid,
                   type: 'DELETE',
                   dataType: 'json',
                   headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                   "Content-Type": "application/json",
                   cache: false,
                   success: function (data) {
                       BindCorrespondence();
                   }
               });
           }
           return;
       });

                break;
            }
    }
}

function MakeTitleEditable() {
    $("#iStandardIcon").css('display', 'none');
    $("#aTitleEdit").css('display', 'none');
    $("#LabelEdit").css('display', 'none');
    $("#tblDescriptionMissing").parent().hide();
    $("#aTitleCancel").css('display', '');
    $("#aTitleSave").css('display', '');
    lblcontracttitle = $("#lblContractTitle").text();
    lblcontracttitledescription = $("#lblContractDescription").text();

    $("#lblContractTitle").css('display', 'none');
    $("#lblContractDescription").css('display', 'none');
    $("#txtContractTitle").val(lblcontracttitle);
    //$("#txtContractTitle").trigger("input");    
    if (lblcontracttitledescription.trim() == "Description not available")
        $("#txtContractDescription").val("");
    else
        $("#txtContractDescription").val(lblcontracttitledescription);

    //$("#txtContractDescription").trigger("input");
    $("#txtContractTitle").css('display', '');
    $("#txtContractDescription").css('display', '');


    //$("#lblContractTitle").attr('contentEditable', true);
    //$("#lblContractDescription").attr('contentEditable', true);

    //var excempt = [37, 38, 39, 40, 46, 8, 36, 35];
    //$("[contenteditable='true']").each(function (index, elem) {
    //    var $elem = $(elem);
    //    //var length = $elem.data('maxlength');
    //    var remaining = $elem.data('maxlength') - $elem.html().length;
    //    if (!isNaN(length)) {
    //        $elem.on('input', function (evt) {
    //            if (excempt.indexOf(evt.which) === -1 && remaining <= 0) {
    //                //$elem.text($elem.text().substring(0, length));
    //                //evt.preventDefault();
    //                return false;
    //            }
    //        });

    //    }
    //});
    //$("#lblContractTitle").css({
    //    "border-color": "#a2a2a2",
    //    "border-width": "1px",
    //    "border-style": "solid",
    //    "background-color": "#ffffff",
    //    //  "max-width": "600px"
    //    "min-height": "27px",
    //}).focus();
    //$("#lblContractDescription").css({
    //    "border-color": "#a2a2a2",
    //    "border-width": "1px",
    //    "border-style": "solid",
    //    "background-color": "#ffffff",
    //    "margin-top": "5px",
    //    "min-height": "50px",
    //    //   "max-width": "600px"
    //});
    //if ($("#lblContractDescription").hasClass("cntdetails-NA")) {
    //    $("#lblContractDescription").text('');
    //}
}

//manoj
//For Check Contract Title Exist
function checkcontracttitle(contracttitle) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/contracttitleexist?contracttitle=' + encodeURIComponent(contracttitle),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contractdetails) {
            if (typeof contractdetails != 'undefined' && contractdetails.length > 0) {//NoContent HttpStatusCode Update
                if (contractdetails[0].RowKey != getParameterByName("ContractID")) {
                    swal("", "Contract Record exists with the title <span style=\"font-weight:700\">" + $("#txtContractTitle").val() + "</span>");
                    $("#loadingPage").fadeOut();
                } else {
                    SaveContractTitle();
                }
            } else {
                SaveContractTitle();
            }
        },
        error: function () {
            SaveContractTitle();
        }
    });
}

function SaveContractTitle() {
    var applyDescription = false;
    var contractID = getParameterByName("ContractID");
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/title?contractid=' + contractID,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        cache: false,
        data: {
            RowKey: contractID,
            ContractTitle: $("#txtContractTitle").val(),
            Description: $("#txtContractDescription").val(),
            ModifiedBy: localStorage.UserName
        },
        success: function (data) {
            //$("#iStandardIcon").css('display', '');
            $("#aTitleEdit").css('display', '');
            if ($('#LabelsAdd').is(":hidden") && $("#hdnPermission").val() != 'View')
                $("#LabelEdit").css('display', '');

            if ($('#iStandardIcon').css('display') == 'none' && $("#hdnPermission").val() != 'View' && typeof ($("#iStandardIcon").html()) != "undefined" && $("#iStandardIcon").html() != null && $("#iStandardIcon").html() != "") {
                $("#iStandardIcon").css('display', '');
            }
            $("#aTitleCancel").css('display', 'none');
            $("#aTitleSave").css('display', 'none');
            $("#lblContractTitle").css('display', '');
            $("#lblContractDescription").css('display', '');
            $("#txtContractDescription").css('display', 'none');
            $("#txtContractTitle").css('display', 'none');

            $("#lblContractTitle").text($("#txtContractTitle").val());
            $("#lblContractDescription").text($("#txtContractDescription").val());


            contractItem.Description = $("#txtContractDescription").val();
            contractItem.ContractTitle = $("#txtContractTitle").val();
            //$("#lblContractTitle").attr('contentEditable', false);
            //$("#lblContractDescription").attr('contentEditable', false);
            if (contractItem.Description == "") {
                $("#lblContractDescription").text("Description not available");
                $("#lblContractDescription").addClass('cntdetails-NA');
                //$("#lblContractDescription").css("display", "none");
                $("#tblDescriptionMissing").parent().show();
                applyDescription = false;
            }
            else {
                $("#lblContractDescription").text(contractItem.Description);
                $("#lblContractDescription").removeClass('cntdetails-NA');
                //$("#lblContractDescription").css("display", "");
                $("#tblDescriptionMissing").parent().hide();
                applyDescription = true;
            }

            $("#lblContractTitle").css({
                "border": "",
                "background-color": "",
                "min-height": "0px",
            }).focus();
            $("#lblContractDescription").css({
                "border": "",
                "background-color": "",
                "margin-top": "0px",
                "min-height": "0px"
            });
            if (applyDescription) {
                $("#lblContractDescription").css("display", "");
            } else {
                $("#lblContractDescription").css("display", "none");
            }
            $("#loadingPage").fadeOut();
        },
        error: function () {
            $("#loadingPage").fadeOut();
        }
    });
}
//For Check Contract Title Exist
//manoj


function MakeTitleSave() {
    $("#loadingPage").fadeIn();
    $("#txtContractTitle").val($("#txtContractTitle").val().trim());
    $("#txtContractDescription").val($("#txtContractDescription").val().trim());
    if (!isContainsTwoAlphabets($("#txtContractTitle").val())) {
        swal("", "Contract Record title should have a minimum of 2 alphabets.");
        $("#loadingPage").fadeOut();
    } else {
        checkcontracttitle($("#txtContractTitle").val().trim());
    }
}

function MakeTitleCancel() {
    var applyDescription = false;
    if ($('#iStandardIcon').css('display') == 'none' && $("#hdnPermission").val() != 'View' && typeof ($("#iStandardIcon").html()) != "undefined" && $("#iStandardIcon").html() != null && $("#iStandardIcon").html() != "") {
        $("#iStandardIcon").css('display', '');
    }
    $("#aTitleEdit").css('display', '');
    if ($('#LabelsAdd').is(":hidden") && $("#hdnPermission").val() != 'View')
        $("#LabelEdit").css('display', '');
    $("#aTitleCancel").css('display', 'none');
    $("#aTitleSave").css('display', 'none');

    $("#lblContractTitle").text(contractItem.ContractTitle);
    if (contractItem.Description == "") {
        $("#lblContractDescription").text("Description not available");
        $("#lblContractDescription").addClass('cntdetails-NA');
        $("#tblDescriptionMissing").parent().show();
        applyDescription = false;
    }
    else {
        $("#lblContractDescription").text(contractItem.Description);
        $("#lblContractDescription").removeClass('cntdetails-NA');
        $("#tblDescriptionMissing").parent().hide();
        applyDescription = true;
    }

    $("#lblContractTitle").css('display', '');
    $("#lblContractDescription").css('display', '');
    $("#txtContractTitle").css('display', 'none');
    $("#txtContractDescription").css('display', 'none');

    //$("#lblContractTitle").attr('contentEditable', false);
    // $("#lblContractDescription").attr('contentEditable', false);
    lblcontracttitle = "";
    lblcontracttitledescription = "";
    $("#lblContractTitle").css({
        "border": "",
        "background-color": "",
        "min-height": "0px"
    }).focus();
    $("#lblContractDescription").css({
        "border": "",
        "background-color": "",
        "margin-top": "0px",
        "min-height": "0px"
    });
    if (applyDescription) {
        $("#lblContractDescription").css("display", "");
    } else {
        $("#lblContractDescription").css("display", "none");
    }
}


function GetRenewalHistoryView(contractid) {
    $("#lblrenewalViewerror").css("display", "none");
    $("#RenewalHistoryView").dialog('open');
    GetRenewalHistory();
}


function GetRenewalHistory(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + contractid + '/contractrenewalhistory',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#renewalHistory").empty();
            $("#renewalViewHistory").empty();
            $("#tblRenewalHistory").empty();
            var str = "";
            var strHist = "";
            $(data).each(function (i, item) {
                str += '<tr>';
                if (item.RenewalType != null && item.RenewalType != "") {
                    str += '<td>' + item.RenewalType + '</td>';
                }
                else {
                    str += '<td>User Initiated</td>';
                }
                if (item.RenewedDate != null) {
                    var fRenewedDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fRenewedDate = moment(new Date(item.RenewedDate)).format('MM/DD/YYYY'); }
                    else { fRenewedDate = moment(new Date(item.RenewedDate)).format(localStorage.AppDateFormat); }
                    str += '<td>' + fRenewedDate + '</td>';
                } else {
                    str += '<td></td>';
                }
                str += '<td>' + item.RenewedBy + '</td>';
                if (item.TermEndDate != null) {
                    var fTermEndDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fTermEndDate = moment(new Date(item.TermEndDate)).format('MM/DD/YYYY'); }
                    else { fTermEndDate = moment(new Date(item.TermEndDate)).format(localStorage.AppDateFormat); }
                    str += '<td>' + fTermEndDate + '</td>';
                } else {
                    str += '<td></td>';
                }
                str += '<td>' + item.RenewalChecklist + '</td>';
                str += '<td>' + item.RenewalNotes + '</td>';
                str += '</tr>';


                strHist += '<li>' + item.RenewalType;
                if (item.RenewedDate != null) {
                    var fRenewedDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fRenewedDate = moment(new Date(item.RenewedDate)).format('MM/DD/YYYY'); }
                    else { fRenewedDate = moment(new Date(item.RenewedDate)).format(localStorage.AppDateFormat); }
                    strHist += ' <span class="sub-text">' + fRenewedDate + " | ";
                } else {
                    strHist += ' Not Available' + " | ";
                }
                strHist += item.RenewalNotes + '</span></li>';

            });
            $("#renewalHistory").append(str);
            //*Harshitha
            $("#renewalViewHistory").append(str);
            $("#tblRenewalHistory").append(strHist);
            if (str != "") {
                $("#CurrentTermName").val('Initial Term');
                CurrentTermDetails = "";
            }
            else {
                $("#AddInitialTerm").css("display", "");
                $("#AddRenewalTerm").css("display", "none");
                var len = data.length;
                $(data).each(function (i, item) {
                    str += '<tr>';
                    if (len - 1 == i) {
                        $("#CurrentTermName").val(item.RenewableTermName);
                        CurrentTermDetails = item;
                    }
                    str += '<td>' + item.RenewableTermName + '</td>';

                    if (item.RenewedDate != null) {
                        var fRenewedDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fRenewedDate = moment(new Date(item.RenewedDate)).format('MM/DD/YYYY'); }
                        else { fRenewedDate = moment(new Date(item.RenewedDate)).format(localStorage.AppDateFormat); }
                        if (len - 1 == i)
                            str += '<td  style="width: 20%;" id="CurrentRenewalTermStart">' + fRenewedDate + '</td>';
                        else
                            str += '<td style="width: 20%;">' + fRenewedDate + '</td>';
                    } else {
                        str += '<td style="width: 20%;"></td>';
                    }
                    if (item.TermEndDate != null) {
                        var fTermEndDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fTermEndDate = moment(new Date(item.TermEndDate)).format('MM/DD/YYYY'); }
                        else { fTermEndDate = moment(new Date(item.TermEndDate)).format(localStorage.AppDateFormat); }
                        if (len - 1 == i)
                            str += '<td style="width: 20%;" id="CurrentRenewalTermEnd">' + fRenewedDate + '</td>';
                        else
                            str += '<td style="width: 20%;">' + fTermEndDate + '</td>';
                    } else {
                        str += '<td style="width: 20%;"></td>';
                    }
                    str += '<td style="width: 20%;">' + item.Status + '</td>';
                    str += '<td style="width: 20%;"> <a href="javascript:void(0)" class="linkPickerClear" onclick="GetRenewalEachDetails(' + item.RenewableTermName + ')">View Details</a>';
                    str += '</tr>';
                });
                if (str != '')
                    $("#renewalViewHistoryTerm").append(str);
                else
                    $("#renewalViewHistoryTerm").append('No History found.');

            }
            $("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();
                $("#renewalViewHistoryTerm").empty();
                $("#renewalViewHistoryTerm").append('No History found.');
            }
    });
}


function EditInitialTerm() {

    var StartInitial = $.datepicker.formatDate('mm/dd/yy', $("#CurrentRenewalTermStart").datepicker('getDate'));
    $("#CurrentRenewalTermStartlb").text(StartInitial);
}
function SaveInitialTerm() { }
function CancelInitialTerm() { }
function ViewTerm(term) { }
function AddInitialTerm() {
    $("#ddlRenewalNotfInternalNew").val('');
    $("#txtRenewalNotesNew").val('');
    $('input[type="radio"][name="checkboxNotify"][value="EndDate"]').prop('checked', false);
    $("#rdRenewTermEndDate").val('');
    $('input[type="radio"][name="rdRenewTermEndDate"][value="Term"]').prop('checked', true);
    $("#ContractTermRenewNew").val(contrcatItem.ContractTerm);
    $("#ContractTermRenewChoicesNew").val('days');
    EnableContractTermRenewEndChoice();
    $("#txtRenewStartDate").val('');
    $("#txtRenewEndDate").val('');
    $("#RenewalTermNew").dialog("option", "title", "Initial Term");
    $("#RenewalTermNew").dialog("open");

}


function GetRenewalEachDetails(RenewalTerm) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/contractrenewalhistory',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#renewalHistory").empty();
            $("#renewalViewHistory").empty();
            $("#tblRenewalHistory").empty();
            var str = "";
            var strHist = "";
            $(data).each(function (i, item) {
                str += '<tr>';
                if (item.RenewalType != null && item.RenewalType != "") {
                    str += '<td>' + item.RenewalType + '</td>';
                }
                else {
                    str += '<td>User Initiated</td>';
                }
                if (item.RenewedDate != null) {
                    var fRenewedDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fRenewedDate = moment(new Date(item.RenewedDate)).format('MM/DD/YYYY'); }
                    else { fRenewedDate = moment(new Date(item.RenewedDate)).format(localStorage.AppDateFormat); }
                    str += '<td>' + fRenewedDate + '</td>';
                } else {
                    str += '<td></td>';
                }
                str += '<td>' + item.RenewedBy + '</td>';
                if (item.TermEndDate != null) {
                    var fTermEndDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fTermEndDate = moment(new Date(item.TermEndDate)).format('MM/DD/YYYY'); }
                    else { fTermEndDate = moment(new Date(item.TermEndDate)).format(localStorage.AppDateFormat); }
                    str += '<td>' + fTermEndDate + '</td>';
                } else {
                    str += '<td></td>';
                }
                str += '<td>' + item.RenewalChecklist + '</td>';
                str += '<td>' + item.RenewalNotes + '</td>';
                str += '</tr>';


                strHist += '<li>' + item.RenewalType;
                if (item.RenewedDate != null) {
                    var fRenewedDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { fRenewedDate = moment(new Date(item.RenewedDate)).format('MM/DD/YYYY'); }
                    else { fRenewedDate = moment(new Date(item.RenewedDate)).format(localStorage.AppDateFormat); }
                    strHist += ' <span class="sub-text">' + fRenewedDate + " | ";
                } else {
                    strHist += ' Not Available' + " | ";
                }
                strHist += item.RenewalNotes + '</span></li>';

            });
            $("#renewalHistory").append(str);
            //*Harshitha
            $("#renewalViewHistory").append(str);
            $("#tblRenewalHistory").append(strHist);
            if (str != "") {

                $("#lblrenewalViewerror").css("display", "none");
                $("#lblrenewalerror").css("display", "none");
            } else {
                $("#lblrenewalViewerror").css("display", "");
                $("#lblrenewalerror").css("display", "");
                $("#tblRenewalHistory").append('No items found.');
            }
            $("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();
                $("#lblrenewalViewerror").css("display", "");
                $("#lblrenewalerror").css("display", "");
                $("#tblRenewalHistory").append('No items found.');
            }
    });
}
function GetContractTypeDetails(contracttypename) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes?contracttypename=' + encodeURIComponent(contracttypename),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            if (data.Renewable == "Yes") {
                settingRenewable = true;
            } else {
                settingRenewable = false;
            }
        }, error: function (data) {
            settingRenewable = false
        }
    });
}

function GetContractValueSetting(contRecord) {
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "19" && n.Status == "ON");
    });
    $('#tblcontractvaluepopup tr.customfinancialfields').remove();
    $("#divfinancialsection").removeClass('col12');
    $("#divfinancialsection").removeClass('col4');
    if (vDocLibFeat.length == 0) {
        $("#divfinancialsection").addClass('col4');
        $("#divfinancialsection").html('<h3 class="f24"><span id="lblContractValue"></span><span id="lblContractCurrency" style="margin-left: 3px !important;"></span></h3><p class="sub-text">Contract Value</p>');
    } else {
        $("#divfinancialsection").addClass('col12');
        $("#divfinancialsection").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    }
    var vContractValueSetting = '';
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            setting_AuthorizeSign = data.AuthorizedSignatory;//Authorize Signatory Enhancment
            alert(setting_AuthorizeSign);
            //old section
            if (vDocLibFeat.length == 0) {
                vContractValueSetting = data.IsContractValueInBaseCurrency;
                if (vContractValueSetting == "Display Contract Values in Base Currency") {
                    if (data.CurrencyDisplayStyle == "UK") {
                        $('#lblContractValue').autoNumeric('init', { vMax: '99999999999999999999.99' });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init');
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                    } else if (data.CurrencyDisplayStyle == "CAN") {
                        $('#lblContractValue').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', { aSep: ' ', aDec: '.' });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                    } else if (data.CurrencyDisplayStyle == "EU") {
                        $('#lblContractValue').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', { aSep: '.', aDec: ',' });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                    }
                    if (contRecord.BaseContractValueCurrency != null) {
                        if (contRecord.BaseContractValueCurrency == "0") {
                            contRecord.BaseContractValueCurrency = "";
                        }
                        if (contRecord.BaseContractValueCurrency == "0") {
                            contRecord.BaseContractValueCurrency = "";
                        }
                        $("#lblContractCurrency").text(contRecord.BaseContractValueCurrency);
                        $("#lblContractCurrencyCurrent").text(contRecord.BaseContractValueCurrency);
                        ContractCurrencyType = 'base';
                    }
                }
                else {
                    ContractCurrencyType = 'actual';
                    if (data.CurrencyDisplayStyle == "UK") {
                        $('#lblContractValue').autoNumeric('init', { vMax: '99999999999999999999.99' });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init');
                        $('#txtContractValueCurrent').autoNumeric('set', contRecord.ContractValue)
                    } else if (data.CurrencyDisplayStyle == "CAN") {
                        $('#lblContractValue').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', { aSep: ' ', aDec: '.' });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                    } else if (data.CurrencyDisplayStyle == "EU") {
                        $('#lblContractValue').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                        $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                        $('#txtContractValueCurrent').autoNumeric('init', { aSep: '.', aDec: ',' });
                        $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                    }
                    if (contRecord.ContractCurrency != null) {
                        if (contRecord.ContractCurrency == "0") {
                            contRecord.ContractCurrency = "";
                        }
                        $("#lblContractCurrency").text(contRecord.ContractCurrency);
                        $("#lblContractCurrencyCurrent").text(contRecord.ContractCurrency);
                    }
                }
                if (data.CurrencyDisplayStyle == "UK") {
                    vCurrencyDisplayStyle = "UK";
                } else if (data.CurrencyDisplayStyle == "CAN") {
                    vCurrencyDisplayStyle = "CAN";
                } else if (data.CurrencyDisplayStyle == "EU") {
                    vCurrencyDisplayStyle = "EU";
                } else if (data.CurrencyDisplayStyle == "IND") {
                    vCurrencyDisplayStyle = "IND";
                }
            } else {
                //old section

                //New Section
                //manoj
                cutomFinancialFields = [];
                var financialtable = "";
                var financialtableedit = "";
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + encodeURIComponent(contRecord.ContractType),
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    async: false,
                    success: function (metadataFields) {
                        if (metadataFields != null && metadataFields.length > 0) {
                            cutomFinancialFields = $.grep(metadataFields, function (n, i) {
                                return (n.CustomFieldsGroupName == "FinancialCustomFields");
                            });
                            if (cutomFinancialFields.length > 0) {
                                financialtable = "<table style='width: 420px;'><thead><tr><th></th><th>Base Currency</th><th>Actual Currency</th></tr></thead><tbody>";
                                $(cutomFinancialFields).each(function (i, itemfield) {
                                    financialtable += "<tr><td>" + itemfield.FieldDisplayName + "</td><td><span id='lblBase" + itemfield.FieldName + "'></span><span class='basecurrencyformat' id='lblBase" + itemfield.FieldName + "Currency'></span></td><td><span id='lblActual" + itemfield.FieldName + "'></span><span class='actualcurrencyformat' id='lblActual" + itemfield.FieldName + "Currency'></span></td></tr>";
                                    financialtableedit += "<tr class='customfinancialfields'><td class='f_head'>" + itemfield.FieldDisplayName;
                                    financialtableedit += (itemfield.Newform == "Required" || itemfield.Finalizingfrom == "Required" || itemfield.Closeoutform == "Required") ? "<small class='required'>*</small></td><td class='labelright f_list'><input id='txt" + itemfield.FieldName + "popup' name=" + itemfield.FieldName + " title=" + itemfield.FieldDisplayName + " maxlength='15' type='text' class='f_inpt width90 validelement validcontractvalue customfinancialupdate' /></td></tr>" : "</td><td class='labelright f_list'><input id='txt" + itemfield.FieldName + "popup' name=" + itemfield.FieldName + " title=" + itemfield.FieldDisplayName + " maxlength='15' type='text' class='f_inpt width90 validcontractvalue customfinancialupdate' /></td></tr>"
                                    financialtableedit += "<tr class='customfinancialfields'><td class='f_head' style='height:35px;'>" + itemfield.FieldDisplayName + " In Base Currency</td><td class='labelright'><label id='lbl" + itemfield.FieldName + "InBaseCurency' style='font-size:15px;' /></td></tr>"
                                });
                                financialtable += "</tbody></table>";
                            }
                        }
                    },
                    error: function (data) {
                    }
                });
                //manoj
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (mainmetadataFields) {
                        vMetadatavaluetobindcutomFinancial = $(mainmetadataFields).find('Metadata');
                        //manoj
                        $("#divfinancialsection").html('<h3 class="f24"><span id="lblContractValue"></span><span id="lblContractCurrency" style="margin-left: 3px !important;" ></span></h3><p class="sub-text">Contract Value</p><div id="dvcontractfinacialgroup" style=" text-align: center; margin: 25px 25% auto 28%;"></div>');
                        $("#dvcontractfinacialgroup").html(financialtable);
                        if (typeof (financialtableedit) != "undefined" && financialtableedit != null && financialtableedit != "") {
                            $(financialtableedit).insertBefore("#trcustomcontractvaluepopup");
                        }
                        financialtable = "";
                        financialtableedit = "";
                        vContractValueSetting = data.IsContractValueInBaseCurrency;
                        if (vContractValueSetting == "Display Contract Values in Base Currency") {
                            if (data.CurrencyDisplayStyle == "UK") {
                                $('#lblContractValue').autoNumeric('init', { vMax: '99999999999999999999.99' });
                                $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                                $('#txtContractValueCurrent').autoNumeric('init');
                                $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                            } else if (data.CurrencyDisplayStyle == "CAN") {
                                $('#lblContractValue').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                                $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                                $('#txtContractValueCurrent').autoNumeric('init', { aSep: ' ', aDec: '.' });
                                $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                            } else if (data.CurrencyDisplayStyle == "EU") {
                                $('#lblContractValue').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                                $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.BaseContractValue))

                                $('#txtContractValueCurrent').autoNumeric('init', { aSep: '.', aDec: ',' });
                                $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.BaseContractValue))
                            }
                            //if (contRecord.BaseContractValueCurrency != null) {
                            //    $("#lblContractCurrencyCurrent").text(contRecord.BaseContractValueCurrency);
                            //    ContractCurrencyType = 'base';
                            //}
                            if (contRecord.BaseContractValueCurrency != null) {
                                if (contRecord.BaseContractValueCurrency == "0") {
                                    contRecord.BaseContractValueCurrency = "";
                                }
                                $("#lblContractCurrency").text(contRecord.BaseContractValueCurrency);
                                $("#lblContractCurrencyCurrent").text(contRecord.BaseContractValueCurrency);
                                ContractCurrencyType = 'base';
                            }
                        }
                        else {
                            ContractCurrencyType = 'actual';
                            if (data.CurrencyDisplayStyle == "UK") {
                                $('#lblContractValue').autoNumeric('init', { vMax: '99999999999999999999.99' });
                                $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                                $('#txtContractValueCurrent').autoNumeric('init');
                                $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                            } else if (data.CurrencyDisplayStyle == "CAN") {
                                $('#lblContractValue').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                                $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                                $('#txtContractValueCurrent').autoNumeric('init', { aSep: ' ', aDec: '.' });
                                $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                            } else if (data.CurrencyDisplayStyle == "EU") {
                                $('#lblContractValue').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                                $('#lblContractValue').autoNumeric('set', parseFloat(contRecord.ContractValue))

                                $('#txtContractValueCurrent').autoNumeric('init', { aSep: '.', aDec: ',' });
                                $('#txtContractValueCurrent').autoNumeric('set', parseFloat(contRecord.ContractValue))
                            }
                            //if (contRecord.ContractCurrency != null) {
                            //    $("#lblContractCurrencyCurrent").text(contRecord.ContractCurrency);
                            //}
                            if (contRecord.ContractCurrency != null) {
                                if (contRecord.ContractCurrency == "0") {
                                    contRecord.ContractCurrency = "";
                                }
                                $("#lblContractCurrency").text(contRecord.ContractCurrency);
                                $("#lblContractCurrencyCurrent").text(contRecord.ContractCurrency);
                            }
                        }
                        if (data.CurrencyDisplayStyle == "UK") {
                            vCurrencyDisplayStyle = "UK";
                        } else if (data.CurrencyDisplayStyle == "CAN") {
                            vCurrencyDisplayStyle = "CAN";
                        } else if (data.CurrencyDisplayStyle == "EU") {
                            vCurrencyDisplayStyle = "EU";
                        } else if (data.CurrencyDisplayStyle == "IND") {
                            vCurrencyDisplayStyle = "IND";
                        }

                        //manoj

                        //For  Base and Actual Currency
                        $(cutomFinancialFields).each(function (i, itemfield) {

                            $('#txt' + itemfield.FieldName + 'popup').keypress(function (e) {
                                if (e.keyCode == 13)
                                    return false;
                            });

                            if (vCurrencyDisplayStyle == "UK") {
                                $('#lblBase' + itemfield.FieldName).autoNumeric('init', { vMax: '99999999999999999999.99' });
                                $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                $('#lblActual' + itemfield.FieldName).autoNumeric('init', { vMax: '99999999999999999999.99' });
                                $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                if (contRecord.ContractCurrency == "0") {
                                    contRecord.ContractCurrency = "";
                                }
                                $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                //popupbind
                                if (itemfield.FieldName != "ContractValue") {
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { vMax: '99999999999999999999.99' });
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init');
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                }
                                //popupbind
                            } else if (vCurrencyDisplayStyle == "CAN") {
                                $('#lblBase' + itemfield.FieldName).autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                                $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                $('#lblActual' + itemfield.FieldName).autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                                $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                if (contRecord.ContractCurrency == "0") {
                                    contRecord.ContractCurrency = "";
                                }
                                $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                //popupbind
                                if (itemfield.FieldName != "ContractValue") {
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', { aSep: ' ', aDec: '.' });
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                }
                                //popupbind
                            } else if (vCurrencyDisplayStyle == "EU") {
                                $('#lblBase' + itemfield.FieldName).autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                                $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                $('#lblActual' + itemfield.FieldName).autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                                $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                if (contRecord.ContractCurrency == "0") {
                                    contRecord.ContractCurrency = "";
                                }
                                $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                //popupbind
                                if (itemfield.FieldName != "ContractValue") {
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', { aSep: '.', aDec: ',' });
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                }
                                //popupbind
                            }
                            else if (vCurrencyDisplayStyle == "IND") {
                                $('#lblBase' + itemfield.FieldName).autoNumeric('init', { dGroup: '2', vMax: '99999999999999999999.99' });
                                $('#lblBase' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                $('#lblBase' + itemfield.FieldName).append(" " + contRecord.BaseContractValueCurrency);
                                $('#lblActual' + itemfield.FieldName).autoNumeric('init', { dGroup: '2', vMax: '99999999999999999999.99' });
                                $('#lblActual' + itemfield.FieldName).autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                if (contRecord.ContractCurrency == "0") {
                                    contRecord.ContractCurrency = "";
                                }
                                $('#lblActual' + itemfield.FieldName).append(" " + contRecord.ContractCurrency);
                                //popupbind
                                if (itemfield.FieldName != "ContractValue") {
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { dGroup: '2', vMax: '99999999999999999999.99' });
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', { dGroup: '2' });
                                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                                }
                                //popupbind
                            }
                        });
                        //var innertextvalue = null;
                        if (contRecord.ContractCurrency != null) {
                            //$(".actualcurrencyformat").text(contRecord.ContractCurrency);
                            //$(".basecurrencyformat").text(contRecord.BaseContractValueCurrency);
                        }
                        //For Base and Actual Currency
                        //FinancialFields = [];
                        //manoj
                    },
                });
            }
            //New Section
        }
    });
}

function ContractTopActions() {
    $(".m-status-btn").empty();
    var constatus = contractItem.Status;//"New";//
    BindContractTermDetail(contractItem);
    $("#spanstatus").html(constatus);
    var arrstatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
    if (arrstatus.indexOf(constatus) > -1) {
        Stage = '';
        $("#btnContractTermExpire").show();
    }
    else {
        Stage = 'pipeline';
    }
    if (contractItem.IsDraft == "Yes") {
        constatus = "Draft";
        $("#addActivityApproval").css('display', 'none');
        $("#RelatedContractEdit").css('display', 'none');
        $("#bNavContracts").removeClass('act-contrac');
        $("#bNavContracts").removeClass('actNav');
        $("#bNavContracts").addClass('contrac_1');
        $(".draft").css('display', 'none');
    }
    switch (constatus) {
        case "New":
            $("#idNewStatus").html('<b title="New" class="status_green_another" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/new.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Awaiting Review":
            $("#idNewStatus").html('<b title="Awaiting Review" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Reviewed":
            $("#idNewStatus").html('<b title="Reviewed" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Awaiting Approval":
            $("#idNewStatus").html('<b title="Awaiting Approval" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Approved":
            $("#idNewStatus").html('<b title="Approved" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/tick.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "In Negotiation":
            $("#idNewStatus").html('<b title="In Negotiation" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Negotiation Complete":
            $("#idNewStatus").html('<b title="Negotiation Complete" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/tick.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Ready for Signature":
            $("#idNewStatus").html('<b title="Ready for Signature" class="status_green" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/active.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Awaiting Signatures":
            $("#idNewStatus").html('<b title="Awaiting Signature" class="status_yellow" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/renew.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Signed":
            $("#idNewStatus").html('<b title="Signed" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/tick.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Active":
            $("#idNewStatus").html('<b title="Active" class="status_green" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/active.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Up for Renewal":
            $("#idNewStatus").html('<b title="Up for Renewal" class="status_red" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/exp.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "About to Expire":
            $("#idNewStatus").html('<b title="About to Expire" class="status_red" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/exp.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "On Hold":
            $("#idNewStatus").html('<b title="On Hold" class="status_red" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/exp.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Replaced":
            $("#idNewStatus").html('<b title="Replaced" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/replace.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Expired":
            $("#idNewStatus").html('<b title="Expired" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/expried.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Cancelled":
            $("#idNewStatus").html('<b title="Cancelled" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/close.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Archived":
            $("#idNewStatus").html('<b title="Archived" class="status_blue" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/status/archive.png" style="padding-right:5px;">' + constatus + '<img id="btnEditStatus" style="display: none;" title="Change Status" class="Contribute" src="/Content/Images/w-edit.png"></b>');
            break;
        case "Draft":
            $("#idNewStatus").html('<b title="In Draft" class="status_Gray" style="padding: 5px 10px; color:#fff"><img src="../Content/Images/icon/Draft_icon.png" /> ' + constatus + '</b>');
            break;
    }
    var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];

    if (constatus == "Draft") {
        if (getParameterByName("Stage") != "" && getParameterByName("Stage") == "pipeline") {
            $("#aNavPipeline").addClass('actNav');
            $("#bNavPipeline").removeClass('pipeline_1');
            $("#bNavPipeline").addClass('act-pipeline');
            $("#aNavContracts").removeClass('actNav');
            $("#bNavContracts").addClass('contrac_1');
            $("#bNavContracts").removeClass('act-contrac');
        }
        else {
            $("#aNavPipeline").removeClass('actNav');
            $("#bNavPipeline").addClass('pipeline_1');
            $("#bNavPipeline").removeClass('act-pipeline');
            $("#aNavContracts").addClass('actNav');
            $("#bNavContracts").removeClass('contrac_1');
            $("#bNavContracts").addClass('act-contrac');
        }
    }
        //else if (MakeFinalized != "Yes") {
    else {
        if ($.inArray(constatus, vContractStatus) < 0) {
            $("#aNavPipeline").addClass('actNav');
            $("#bNavPipeline").removeClass('pipeline_1');
            $("#bNavPipeline").addClass('act-pipeline');
            $("#aNavContracts").removeClass('actNav');
            $("#bNavContracts").addClass('contrac_1');
            $("#bNavContracts").removeClass('act-contrac');
        } else {
            $("#aNavPipeline").removeClass('actNav');
            $("#bNavPipeline").addClass('pipeline_1');
            $("#bNavPipeline").removeClass('act-pipeline');
            $("#aNavContracts").addClass('actNav');
            $("#bNavContracts").removeClass('contrac_1');
            $("#bNavContracts").addClass('act-contrac');
        }
    }

    if (constatus != "0" && constatus != "" && constatus != "undefined") {
        if ($("#hdnPermission").val() != "View" && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
            $("#topAction1").css("display", "");
            $("#topAction2").css("display", "");
            if (constatus == "New") {
                $("#topAction1").html('Add Document');
                $("#topAction2").html('Add Milestone');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                $("#topAction2").attr('onclick', 'AddMilestoneMoreNew();');
            }
            else if (constatus == "Drafting") {
                $("#topAction1").html('Add Document');
                $("#topAction2").html('Start Approval');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                $("#topAction2").attr('onclick', 'contextMenuContractSettings("approve","","");');
            }
            else if (constatus == "Awaiting Review") {
                $("#topAction1").html('Add Document');
                $("#topAction2").html('Edit Metadata');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                $("#topAction2").attr('onclick', 'contextMenuContractSettings("edit","","");');
            }
            else if (constatus == "Reviewed") {
                $("#topAction1").html('Start Approval');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("approve","","");');
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction2").html('Share Contract Record');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("share","","");');
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Awaiting Approval") {
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction1").html('Share Contract Record');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("share","","");');
                }
                else {
                    $("#topAction1").css("display", "none");
                }
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Add Related Contract Record(s)');
                    $("#topAction2").attr('onclick', 'AddRelatedContracts();');
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Approved") {
                $("#topAction1").html('Add Document');
                $("#topAction1").attr('onclick', 'AddContractDocument();');
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction2").html('Share Contract Record');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("share","","");');
                } else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "In Negotiation") {
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "9" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $("#topAction1").html('Share Contract Record');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("share","","");');
                }
                else {
                    $("#topAction1").css("display", "none");
                }
                if ($("#hdnPermission").val() == "Manage") {
                    if (contractItem.IsStandard == "Yes") {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Non-Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("nonstandard","","");');
                    }
                    else {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("standard","","");');
                    }
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Negotiation Complete") {
                $("#topAction1").html('Start Approval');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("approve","","");');
                if ($("#hdnPermission").val() == "Manage") {
                    if (contractItem.IsStandard == "Yes") {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Non-Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("nonstandard","","");');
                    }
                    else {
                        $("#topAction2").css("display", "none");
                        //$("#topAction2").html('Mark as Standard');
                        //$("#topAction2").attr('onclick', 'contextMenuContractSettings("standard","","");');
                    }
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Awaiting Signatures" || constatus == "Ready for Signature") {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction1").html('Add Related Contract Record(s)');
                    $("#topAction2").html('Manage Permission');
                    $("#topAction1").attr('onclick', 'AddRelatedContracts();');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                }
                else {
                    if ($("#topAction1").html() == "") {
                        $("#topAction1").css("display", "none");
                    }
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Signed") {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction1").html('Manage Permission');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("permission","","");');
                    $("#topAction2").html('Term Settings');
                    $("#topAction2").attr('onclick', 'contextMenuTerm("manage","","");');
                }
                else {
                    $("#topAction1").css("display", "none");
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Active") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Manage Permission');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Up for Renewal") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Term Settings');
                    $("#topAction2").attr('onclick', 'contextMenuTerm("manage","","");');
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Renewed") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Manage Permission');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "Extended") {
                $("#topAction1").html('Add Amendment');
                $("#topAction1").attr('onclick', 'AddAmendmentMore();');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Manage Permission');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("permission","","");');
                }
                else {
                    $("#topAction2").css("display", "none");
                }
            }
            else if (constatus == "About to Expire") {
                $("#topAction1").html('Start Approval');
                $("#topAction2").html('Add Amendment');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("approve","","");');
                $("#topAction2").attr('onclick', 'AddAmendmentMore();');
            }
            else if (constatus == "Archived") {
                $("#topAction1").html('View History');
                $("#topAction1").attr('onclick', 'contextMenuContractSettings("history","","");');
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").html('Delete Contract');
                    $("#topAction2").attr('onclick', 'contextMenuContractSettings("delete","","");');
                }
                else {
                    $("#topAction2").css("display", "none");
                }
                //manoj
                $('.Manage').css("display", "none");
                $('.Contribute').css("display", "none");
                //manoj
            }
            else {
                if ($("#hdnPermission").val() == "Manage") {
                    $("#topAction2").css("display", "none");
                    $("#topAction1").html('Duplicate Contract');
                    //$("#topAction2").html('Archive Contract');
                    $("#topAction1").attr('onclick', 'contextMenuContractSettings("duplicate","","");');
                    //$("#topAction2").attr('onclick', 'contextMenuContractSettings("archive","","");');
                }
                else {
                    $("#topAction1").css("display", "none");
                    $("#topAction2").css("display", "none");
                }
            }
        }
        else {
            $("#topAction1").css("display", "none");
            $("#topAction2").css("display", "none");
        }
    }
    else {
        $("#spanstatus").html('Not Assigned');
    }

    $(".m-status-btn").html($(".constatus").clone());

    $('#btnEditStatus').click(function () {
        BindStatusbyCLM('Yes');


    });
    if (contractItem.IsDraft == "Yes" || constatus == "Archived") {
        $(".managesettings").css("display", "none");
        $(".review").css("display", "none");
        $(".signature").css("display", "none");
        $(".draft").css('display', 'none');
        $("#addActivityApproval").css('display', 'none');
        $("#RelatedContractEdit").css('display', 'none');
        $(".FL_Share").css("display", "none");
        $(".approve").css("display", "none");
        $(".mail").css("display", "none");
        $(".liContractStandard").css("display", "none");
        $(".liContractNonStandard").css("display", "none");
        $(".status").css("display", "none");
        $(".contractrenewal").css("display", "none");
        $(".permission").css("display", "none");
        $(".defaultproperties").css("display", "none");
        $(".template").css("display", "none");
        $(".duplicate").css("display", "none");
        $(".final").css("display", "none");
        $(".separator").css("display", "none");
        $("#topAction1").css("display", "none");
        $("#topAction2").css("display", "none");
    }
}

function GetContractActivities(contractid) {
    $("#dvContractWorkflows").empty();
    workflowurltoshowDOCUMENT = "";
    workflowurltoshowCONTRACT = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + contractid + '/activity',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#dvContractWorkflows").empty();
            var datalenght = data.length;
            $("#lblActivityCount").text(data.length);
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var RowKey = item.RowKey;
                var WorkflowTitle = item.WorkflowTitle;
                var Participants = item.Participants;
                var Status = item.Status;
                var ActivityType = item.ActivityType;
                var CreatedBy = item.CreatedBy;

                var imgCorn = '<img src="../Content/Images/act-approval.png">';
                var imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                var vWorkflowURL = '<a class="link-head" href="javascript:void(0);">' + WorkflowTitle + '</a>';
                var vWorkflowIconURL = '';
                if (ActivityType == "Contract Approval") {
                    imgCorn = '<img src="../Content/Images/act-approval.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                    if (Status == "In Progress" || Status == "Stopped") {
                        workflowurltoshowCONTRACT = '/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey;
                    }
                }
                else if (ActivityType == "Renewal Approval") {
                    imgCorn = '<img src="../Content/Images/act-approval.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                }
                else if (ActivityType == "Amendment Approval") {
                    imgCorn = '<img src="../Content/Images/act-approval.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                }
                else if (ActivityType == "Document Review") {
                    imgCorn = '<img src="../Content/Images/act-reviewl.png">';
                    imgCent = '<img src="../Content/Images/act-doc.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    vWorkflowIconURL = '<a class="add-btn close1" href="/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey + '" target="_blank"><img src="../Content/Images/view-all.png" style="padding-left:5px !important;"></a>';
                    if (Status == "In Progress" || Status == "Stopped") {
                        workflowurltoshowDOCUMENT = '/Activity/TaskDetails?TaskID=&WorkflowID=' + RowKey;
                    }
                }
                else if (ActivityType == "Contract Share") {
                    imgCorn = '<img src="../Content/Images/act-share-as-link.png">';
                    imgCent = '<img src="../Content/Images/act-contract-box.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="javascript:void(0);" onclick="ShowWorkflowDetail(\'' + ActivityType + '\',\'' + RowKey + '\')" style="display:inline !important;">' + WorkflowTitle.replace("External Review", "External Share") + '</a>';
                    vWorkflowIconURL = '<p id="ShareID" style="display:none;">' + RowKey + '</p><p id="ShareType" style="display:none;">Contract</p>';
                    if (Status == "In Progress" && $("#hdnPermission").val() != 'View')
                        vWorkflowIconURL += ' <img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuShare Contribute"/>';
                }
                else if (ActivityType == "Document Share") {
                    imgCorn = '<img src="../Content/Images/act-share-as-link.png">';
                    imgCent = '<img src="../Content/Images/act-doc.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="javascript:void(0);" onclick="ShowWorkflowDetail(\'' + ActivityType + '\',\'' + RowKey + '\')" style="display:inline !important;">' + WorkflowTitle.replace("External Review", "External Share") + '</a>';
                    vWorkflowIconURL = '<p id="ShareID" style="display:none;">' + RowKey + '</p><p id="ShareType" style="display:none;">Document</p>';
                    if (Status == "In Progress" && $("#hdnPermission").val() != 'View')
                        vWorkflowIconURL += ' <img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuShare Contribute"/>';
                }
                else if (ActivityType == "Document Sign") {
                    imgCorn = '<img src="../Content/Images/act-signature.png">';
                    imgCent = '<img src="../Content/Images/act-doc.png" class="img-responsive">';
                    vWorkflowURL = '<a class="link-head" href="javascript:void(0);" onclick="ShowDocSignatureDetail(\'' + RowKey + '\')" style="display:inline !important;">' + WorkflowTitle + '</a>';
                    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                        return (n.RowKey == "1" && n.Status == "ON");
                    });
                    if (vAccFeat.length > 0 && Status == "In Progress" && CreatedBy == localStorage.UserName) {
                        var vConfig = vAccFeat[0].Configuration;
                        var vProvider = $(vConfig).find('Provider').text();
                        if (vProvider == "Right Signature")
                            vWorkflowURL += '';
                        else if (vProvider == "Echo Sign")
                            vWorkflowURL += '';
                        else if (vProvider == "Docu Sign")
                            vWorkflowURL += ' <a href="javascript:void(0);" onclick="StopDocumentSignature(\'' + RowKey + '\')" title="Cancel Signature Process"><img src="../Content/Images/cancel_icon.png"></a>';
                    }

                }

                var article = '<div class="col12 info-box-activity "><div class="row-group">';
                article += '<div class="col10 no-pad ">';
                article += '<div class="row-group">';
                article += '<div class="col1 no-pad activity-type-box m2">';
                article += imgCorn;
                article += '</div>';
                article += '<div class="col1 no-pad pad-top text-left activity-file-box m2">';
                article += imgCent;
                article += '</div>';
                article += '<div class="col10 activity-title-box m8">';

                article += vWorkflowURL;
                article += vWorkflowIconURL;

                article += '<div class="col12 no-pad pad-top">';
                if (ActivityType == "Document Share") {
                    if (item.ReadyToShare == "Yes" && item.CreatedBy == localStorage.UserName) {
                        article += '<p class="sub-text-head">Participants : <span class="sub-text">' + Participants + '</span></p>';
                        article += '<p class="sub-text-head">This document has been updated to a new version recently. To notify users and share link of the most recent version, click <a href="javascript:void(0);" onclick="ReplaceDocumentShareNew(\'' + RowKey + '\')" style="color:#44a6d;text-decoration: underline;font-weight: bold;">Share Updated Version</a>.</p>';
                    }
                    else {
                        article += '<p class="sub-text-head">Participants : <span class="sub-text">' + Participants + '</span></p>';
                    }
                }
                else {
                    article += '<p class="sub-text-head">Participants : <span class="sub-text">' + Participants + '</span></p>';
                }
                article += '</div>';
                article += '</div>';
                article += '</div>';
                article += '</div>';
                article += '<div class="col2 no-pad text-right pad-top ">';
                article += '<a class="close1" href="javascript:void(0);" onclick="ShowWorkflowDetail(\'' + ActivityType + '\',\'' + RowKey + '\')"><img id="Img_' + RowKey + '" src="../Content/Images/e-open.png" title="Expand"></a>';
                article += '<div class="col12 text-right act-doc-status">';

                if (Status == "Complete" || Status == "Completed") {
                    article += '<a class="label label-grn"><span class="m-off"> Completed </span> <span class="m-on"><img src="../Content/Images/wit-completed-icon.png"></span></a>';
                }
                else if (Status == "In Progress") {
                    article += '<a class="label label-org"><span class="m-off">' + Status + '</span> <span class="m-on"><img src="../Content/Images/wit-in-progress-icon.png"></span></a>';
                }
                else if (Status == "Cancelled" || Status == "Declined") {
                    article += '<a class="label label-red"><span class="m-off">' + Status + '</span> <span class="m-on"><img src="../Content/Images/wit-cancel-icon.png"></span></a>';
                }
                else if (Status == "Stopped") {
                    article += '<a class="label label-red"><span class="m-off">' + Status + '</span> <span class="m-on"><img src="../Content/Images/wit-stopl-icon.png"></span></a>';
                }
                else {
                    article += '<a class="label label-org"><span class="m-off">' + Status + '</span></a>';
                }
                article += '</div>';
                article += '</div>';
                article += '<div class="col12 m12 activity-title-box m8">';
                article += '<div id="Det_' + RowKey + '" class="row-group activity-details-body" style="display:none">';

                article += '</div>';
                article += '</div>';
                article += '</div></div>';
                $("#dvContractWorkflows").append(article);

            }

            $(".openmenuShare").contextMenu({ menu: 'dropdownMenuShare', leftButton: true }, function (action, el, pos) { contextMenuShare(action, el.parent("div"), pos); });


        },
        error: function (data) {
            $("#lblActivityCount").text("0");
        }
    });
}

function contextMenuShare(action, el, pos) {

    switch (action) {
        case "stop":
            {
                swal({
                    title: '',
                    text: " Are you sure you want to <span style='font-weight:700'>stop</span> External Share? The shared link will be disabled.",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
       function (confirmed) {
           if (confirmed) {
               $("#loadingPage").fadeIn();
               var vcollarabationid = $(el).find("#ShareID").text();
               var vcollarabationtype = $(el).find("#ShareType").text();
               if (vcollarabationtype == 'Contract')
                   StopShareContract(vcollarabationid);
               else if (vcollarabationtype == 'Document')
                   StopShareDocument(vcollarabationid);

           }
           return;
       });

                break;
            }

    }
}

function StopShareContract(collarabationid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/Share?collarabationid=' + collarabationid,
        type: 'PUT',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        success: function (data) {
            if (data != null && data != "" && typeof (data) != "undefined") {
                contractItem.Status = data;
                ContractTopActions();
                //manoj
                if (documentview == null || documentview == "" || documentview == 'folder') {
                    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                        var selectedfoldervalue = $('#showAll').find("a");
                        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                        var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                        showfolderdocuments(parentdocumentdetails);
                    }
                    else {
                        BindDocument(vContractID);
                    }
                } else {
                    DisplayDocument(documentview);
                }
                $("#hdnFolderDocumentView").text('');
                $("#hdnShowAllTextValue").html('');
                PrvFolderselection = '';
                //Bind primary and pined document based on new feature
                if ($("#hdnnewdocumentfeature").text() == "Yes") {
                    CreateDocumentListPinView(vContractID);
                }
                //manoj
            }
            GetContractActivities(vContractID);
            $("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();

            }
    });
}

function StopShareDocument(collarabationid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/Share?collarabationid=' + collarabationid,
        type: 'PUT',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        success: function (data) {
            if (data != null && data != "" && typeof (data) != "undefined") {
                contractItem.Status = data;
                ContractTopActions();
                BindDocument(vContractID);
            }
            GetContractActivities(vContractID);
            $("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();

            }
    });
}

function ShowWorkflowDetail(acttype, wid) {
    //var detObj = $("#Det_" + wid);
    $("#Det_" + wid).slideToggle();
    var imgObj = $("#Img_" + wid);
    if (imgObj.attr("title") == "Collapse") {
        imgObj.attr("title", "Expand");
        imgObj.attr("src", "../Content/Images/e-open.png");
        $("#Det_" + wid).html("");
    } else {
        imgObj.attr("title", "Collapse");
        imgObj.attr("src", "../Content/Images/e-close.png");
        switch (acttype) {
            case "Contract Approval":
            case "Document Review":
                GetWorkflowComments(wid);
                break;
            case "Document Share":
                GetDocumentShareComment(wid);
                break;
            case "Document Sign":
                GetDocumentSignatureComment(wid);
                break;
            case "Contract Share":
                GetContractShareComment(wid);
                break;
        }
    }
    //if (detObj.children().length == 0) {
    //    if (acttype == "Contract Approval" || acttype == "Document Review")
    //        GetWorkflowComments(wid);
    //    else if (acttype == "Contract Share")
    //        GetContractShareComment(wid);
    //    else if (acttype == "Document Share")
    //        GetDocumentShareComment(wid);
    //    else if (acttype == "Document Sign")
    //        GetDocumentSignatureComment(wid);
    //}
}

function GetWorkflowComments(wid) {
    $("#Det_" + wid).html('<img src="../Content/Images/icon/loading.gif"> ');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/comments?workflowid=' + wid,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var datalenght = data.length;
            var article = '';
            for (var i = 0; i < datalenght; i++) {

                var item = data[i];
                if (typeof (item.ModifiedDate) != "undefined" && item.ModifiedDate != null && item.ModifiedDate != "")
                    var vTime = moment(new Date(item.ModifiedDate)).format('MMMM Do YYYY, h:mm A');
                else if (typeof (item.Created) != "undefined" && item.Created != null && item.Created != "")
                    var vTime = moment(new Date(item.Created)).format('MMMM Do YYYY, h:mm A');
                else
                    var vTime = moment(new Date(item.Timestamp)).format('MMMM Do YYYY, h:mm A');
                article += '<div class="activity-details-start row-group">';
                article += '<div class="col8 no-pad">';
                article += item.Title;
                if (item.Description != "")
                    article += '<br/>' + item.Description;
                article += '</div>';
                article += '<div class="col4 no-pad text-right">';
                article += vTime;
                article += '</div>';
                article += '</div>';
            }
            $("#Det_" + wid).html(article);
        },
        error:
            function (data) {

            }
    });
}

function GetContractShareComment(wid) {
    $("#Det_" + wid).html('<img src="../Content/Images/icon/loading.gif">');
    $.ajax({
        url: '/Contracts/GetContractCollaborationComment?accountid=' + localStorage.AccountID + '&collaborationid=' + wid,
        type: 'GET',
        dataType: 'json',
        cache: false,
        // async: false,
        success: function (data) {
            var jsObject = JSON.parse(data);
            var datalenght = jsObject.length;
            var article = '';
            for (var i = 0; i < datalenght; i++) {
                var item = jsObject[i];
                if (typeof (item.PostDate) != "undefined" && item.PostDate != null && item.PostDate != "")
                    var vTime = moment(new Date(item.PostDate)).format('MMMM Do YYYY, h:mm A');
                else
                    var vTime = moment(new Date(item.TimeStamp)).format('MMMM Do YYYY, h:mm A');
                article += '<div class="activity-details-start row-group">';
                article += '<div class="col8 no-pad">';
                article += "<b>" + item.PostBy + "</b>";
                if (item.Comment.indexOf("Comment:") > -1) {
                    var splitcommment = item.Comment.split("Comment:");
                    if (splitcommment[0] != "") {
                        article += '<br/>' + splitcommment[0].trim();
                    } else {
                        article += '<br/>' + item.Comment.trim();
                    }
                    if (splitcommment[1] != "") {
                        article += '\n<br/><b>Comment :</b>' + splitcommment[1].trim();
                    } else {
                        article += '\n<br/><b>Comment :</b>' + item.Comment.trim();
                    }
                } else {
                    article += '<br/>' + item.Comment;
                }
                article += '</div>';
                article += '<div class="col4 no-pad text-right">';
                article += vTime;
                article += '</div>';
                article += '</div>';
            }
            $("#Det_" + wid).html(article);

        },
        error:
            function (data) {
                $("#Det_" + wid).html('<div>No items found.</div>');

            }
    });
    $.ajax({
        url: '/Contracts/GetContractCollaborationLink?accountid=' + localStorage.AccountID + '&collaborationid=' + wid + '&UserName=' + localStorage.UserName + '&ContractID=' + vContractID,
        type: 'GET',
        dataType: 'json',
        cache: false,
        // async: false,
        success: function (data) {
            if (data != "") {
                window.open(data, "_blank")
            }

        },
        error:
            function (data) {


            }
    });
}

function GetDocumentShareComment(wid) {
    $("#Det_" + wid).html('<img src="../Content/Images/icon/loading.gif">');
    var fetchingactivity = [];
    $.ajax({
        url: '/Documents/GetDocumentCollaborationComment?accountid=' + localStorage.AccountID + '&collaborationid=' + wid,
        type: 'GET',
        dataType: 'json',
        cache: false,
        async: false,
        success: function (data) {
            var jsObject = JSON.parse(data);
            $(jsObject).each(function (i, item) {
                var activitydetails = { Datetimedetails: ((typeof (item.PostDate) != "undefined" && item.PostDate != null && item.PostDate != "") ? item.PostDate : item.TimeStamp), Username: item.PostBy, CommentDetails: item.Comment, ExternalUser: "" };
                fetchingactivity.push(activitydetails);
            });
        },
        error:
            function (data) {
            }
    });
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities?objecttype=Documentupload&objectid=' + wid + '&actiontype=New Version Update',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            $(data).each(function (i, item) {
                var activitydetails = { Datetimedetails: item.Timestamp, Username: item.UserID, CommentDetails: item.Activity, ExternalUser: "(User Activity)" };
                fetchingactivity.push(activitydetails);
            });
        },
        error:
            function (data) {
            }
    });

    if (fetchingactivity.length > 0) {
        fetchingactivity.sort(function (a, b) {
            return new Date(b.Datetimedetails) - new Date(a.Datetimedetails);
        });
        var article = '';
        $(fetchingactivity).each(function (it, itemdetails) {
            var externaluseractivity = ((typeof (itemdetails.ExternalUser) != "undefined" && itemdetails.ExternalUser != null && itemdetails.ExternalUser != "") ? itemdetails.ExternalUser : "")
            var vTime = moment(new Date(itemdetails.Datetimedetails)).format('MMMM Do YYYY, h:mm A');
            article += '<div class="activity-details-start row-group">';
            article += '<div class="col8 no-pad">';
            article += "<b>" + itemdetails.Username + "</b>" + externaluseractivity;
            if (itemdetails.CommentDetails != "") {
                if (itemdetails.CommentDetails.indexOf("Comment:") > -1) {
                    var splitcommment = itemdetails.CommentDetails.split("Comment:");
                    if (splitcommment[0] != "") {
                        article += '<br/>' + splitcommment[0].trim();
                    } else {
                        article += '<br/>' + item.Comment.trim();
                    }
                    if (splitcommment[1] != "") {
                        article += '<br/><b>Comment :</b>' + splitcommment[1].trim();
                    } else {
                        article += '<br/><b>Comment :</b>' + item.Comment.trim();
                    }
                } else {
                    article += '<br/>' + itemdetails.CommentDetails;
                }
            }
            article += '</div>';
            article += '<div class="col4 no-pad text-right">';
            article += vTime;
            article += '</div>';
            article += '</div>';
        });
        $("#Det_" + wid).html(article);
        article = '';
        fetchingactivity = [];
    } else {
        $("#Det_" + wid).html('<div>No item found.</div>');
    }

    $.ajax({
        url: '/Documents/GetDocumentCollaborationLink?accountid=' + localStorage.AccountID + '&collaborationid=' + wid + '&UserName=' + localStorage.UserName,
        type: 'GET',
        dataType: 'json',
        cache: false,
        // async: false,
        success: function (data) {
            if (data != "") {
                window.open(data, "_blank")
            }

        },
        error:
            function (data) {


            }
    });
}


function StopDocumentSignature(wid) {
    swal({
        title: '',
        text: "Are you sure you want to <span style=\"font-weight:700\">Cancel</span> signature process?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
       function (confirmed) {
           if (confirmed) {
               $("#loadingPage").fadeIn();
               $.ajax({
                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/StopSignature?documentid=' + wid,
                   type: 'PUT',
                   dataType: 'json',
                   'Content-Type': 'application/json',
                   cache: false,
                   headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                   success: function (data) {
                       GetContractActivities(vContractID);
                       $("#loadingPage").fadeOut();
                   },
                   error:
                       function (data) {
                           $("#loadingPage").fadeOut();
                       }
               });
           }
           return;
       });
}

function GetDocumentSignatureComment(wid) {
    $("#Det_" + wid).html('<img src="../Content/Images/icon/loading.gif">');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/SignatureDetail?documentid=' + wid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {

            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "1" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                var vConfig = vAccFeat[0].Configuration;
                var vProvider = $(vConfig).find('Provider').text();
                if (vProvider == "Right Signature")
                    RightSignatureComment(data, wid);
                else if (vProvider == "Echo Sign")
                    EcoSignatureComment(data, wid);
                else if (vProvider == "Docu Sign")
                    DocuSignatureComment(data, wid);
            }

        },
        error: function (data) {
            $("#Det_" + wid).empty();
        }
    });
}

function DocuSignatureComment(data, wid) {
    var article = '';
    var strails = $(data).find('Event').text();
    $(data).find('Event').each(function () {
        var date = moment(new Date($(this).find('logTime').text())).format('MMMM Do YYYY, h:mm A');
        var message = $(this).find('Message').text();

        article += '<div class="activity-details-start row-group">';
        article += '<div class="col8 no-pad">';
        article += message;
        article += '</div>';
        article += '<div class="col4 no-pad text-right">';
        article += date;
        article += '</div>';
        article += '</div>';
    });

    $("#Det_" + wid).html(article);
}


function EcoSignatureComment(data, wid) {

    var article = '';
    var strails = $(data).find('DocumentHistoryEvent').text();
    $(data).find('DocumentHistoryEvent').each(function () {
        var date = moment(new Date($(this).find('date').text())).format('MMMM Do YYYY, h:mm A');
        var message = $(this).find('description').text();

        article += '<div class="activity-details-start row-group">';
        article += '<div class="col8 no-pad">';
        article += message;
        article += '</div>';
        article += '<div class="col4 no-pad text-right">';
        article += date;
        article += '</div>';
        article += '</div>';
    });

    $("#Det_" + wid).html(article);


}

function RightSignatureComment(data, wid) {
    var article = '';
    var strails = $(data).find('audit-trails').text();
    $(data).find('audit-trail').each(function () {
        var timestamp = moment(new Date($(this).find('timestamp').text())).format('MMMM Do YYYY, h:mm A');
        var message = $(this).find('message').text();

        article += '<div class="activity-details-start row-group">';
        article += '<div class="col8 no-pad">';
        article += message;
        article += '</div>';
        article += '<div class="col4 no-pad text-right">';
        article += timestamp;
        article += '</div>';
        article += '</div>';
    });

    $("#Det_" + wid).html(article);
}


function ShowDocSignatureDetail(wid) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/SignatureDetail?documentid=' + wid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "1" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                var vConfig = vAccFeat[0].Configuration;
                var vProvider = $(vConfig).find('Provider').text();
                if (vProvider == "Right Signature")
                    RightSignatureDocumentHistory(data);
                else if (vProvider == "Echo Sign")
                    EcoSignatureDocumentHistory(data);
                else if (vProvider == "Docu Sign")
                    DocuSignatureDocumentHistory(data);
            }
            $("#loadingPage").fadeOut();

            $("#docSignatureDetail").dialog("open");
            $("#docSignatureDetail").height("auto");
        },
        error: function (data) {
            $("#dvDocSignatureHist").empty();
            $("#loadingPage").fadeOut();
        }

    });

}


function DocuSignatureDocumentHistory(data) {
    $("#createdid").css("display", "");
    $("#lastactivityid").css("display", "none");
    $("#expiresid").css("display", "none");
    $("#completedid").css("display", "");

    var created = $(data).find('Created:first').text();
    var completed = $(data).find('Completed:first').text();

    var subject = $(data).find('Subject').text();
    var message = $(data).find('EmailBlurb').text();
    var ExpiresDays = ($(data).find('ExpiresIn') != null && typeof $(data).find('ExpiresIn') != "undefined") ? $(data).find('ExpiresIn').text() : "";
    var enxpDate = '';
    if (ExpiresDays != "") {
        enxpDate = moment(new Date(created)).add(ExpiresDays,'days');
    }
    var state = $(data).find('Status:first').text();
    $("#tdDocSignsubject").html(subject);
    $("#tdDocSignmessage").html(message);
    $("#tdDocSignstate").html(state);
    $("#tdDocSigncreated").html(moment(new Date(created)).utc().format('MMMM Do YYYY, h:mm A'));

    if (completed != null && completed != "" && $.inArray(state, DocSignCompState) > -1) {
        $("#tdDocSigncompleted").html(moment(new Date(completed)).utc().format('MMMM Do YYYY, h:mm A'));

    }
    else
        $("#tdDocSigncompleted").html('-');
    if (enxpDate != null && enxpDate != "") {
        $("#expiresid").css("display", "");
        $("#tdDocSignexpires").html(moment(new Date(enxpDate)).utc().format('MMMM Do YYYY, h:mm A'));
    }

    var article = '';
    $(data).find('Event').each(function () {
        var date = moment(new Date($(this).find('logTime').text())).format('MMMM Do YYYY, h:mm A');
        var message = $(this).find('Message').text();
        article += '<li>';
        article += '<p>';
        article += '<b>' + message + '</b> ';
        article += '<small>' + date + '</small>';
        article += '</p></li>';
    });
    $("#dvDocSignatureHist").html(article);

    article = '';
    $(data).find('Recipients').each(function () {
        var email = '';
        var name = '';
        $(this).find('Email').each(function (i, item) {
            if (email == '')
                email = $(item).text();
            else
                email += "; " + $(item).text();
        });
        $(this).find('UserName').each(function (i, item) {
            if (name == '')
                name = $(item).text();
            else
                name += "; " + $(item).text();
        });
        article += '<li>';
        article += '<p style="margin-bottom: 5px;">';
        article += '<b>' + email + '</b> ';
        article += '<small>(' + name + ')</small>';
        article += '</p></li>';
    });
    $("#dvDocSignatureUser").html(article);
    article = '';
}

function EcoSignatureDocumentHistory(data) {
    $("#createdid").css("display", "none");
    $("#lastactivityid").css("display", "none");
    $("#expiresid").css("display", "none");
    $("#completedid").css("display", "none");

    var subject = "Document sent for signature";
    var message = $(data).find('message').text();
    var state = $(data).find('status').last().text();
    $("#tdDocSignsubject").html(subject);
    $("#tdDocSignmessage").html(message);
    $("#tdDocSignstate").html(state);

    var article = '';
    $(data).find('DocumentHistoryEvent').each(function () {
        var date = moment(new Date($(this).find('date').text())).format('MMMM Do YYYY, h:mm A');
        var message = $(this).find('description').text();
        article += '<li>';
        article += '<p>';
        article += '<b>' + message + '</b> ';
        article += '<small>' + date + '</small>';
        article += '</p></li>';
    });
    $("#dvDocSignatureHist").html(article);

    article = '';
    $(data).find('participants').each(function () {
        $(this).find('ParticipantInfo').each(function () {
            var email = $(this).find('email').text();
            var name = $(this).find('name').text();
            if ($(this).find('ParticipantRole').text() == "SIGNER") {
                article += '<li>';
                article += '<p style="margin-bottom: 5px;">';
                article += '<b>' + email + '</b> ';
                article += '<small>(' + name + ')</small>';
                article += '</p></li>';
            }
        })
    });
    $("#dvDocSignatureUser").html(article);
}

function RightSignatureDocumentHistory(data) {
    var created = $(data).find('created-at').text();
    var completed = $(data).find('completed-at:first').text();
    var lastactivity = $(data).find('last-activity-at').text();
    var expires = $(data).find('expires-on').text();
    var subject = $(data).find('subject').text();
    var message = $(data).find('message').text();
    var state = $(data).find('state:first').text();
    $("#tdDocSigncreated").html(moment(new Date(created)).format('MMMM Do YYYY, h:mm A'));

    if (completed != null && completed != "" && $.inArray(state, DocSignCompState) > -1)
        $("#tdDocSigncompleted").html(moment(new Date(completed)).format('MMMM Do YYYY, h:mm A'));
    else
        $("#tdDocSigncompleted").html('-');

    $("#tdDocSignlastactivity").html(moment(new Date(lastactivity)).format('MMMM Do YYYY, h:mm A'));
    $("#tdDocSignexpires").html(moment(new Date(expires)).format('MMMM Do YYYY, h:mm A'));
    $("#tdDocSignsubject").html(subject);
    $("#tdDocSignmessage").html(message);
    $("#tdDocSignstate").html(state);


    var article = '';
    $(data).find('audit-trail').each(function () {
        var timestamp = moment(new Date($(this).find('timestamp').text())).format('MMMM Do YYYY, h:mm A');
        var message = $(this).find('message').text();
        article += '<li>';
        article += '<p>';
        article += '<b>' + message + '</b> ';
        article += '<small>' + timestamp + '</small>';
        article += '</p></li>';
    });
    $("#dvDocSignatureHist").html(article);

    article = '';
    $(data).find('recipient').each(function () {
        var issender = $(this).find('is-sender').text();
        if (issender != 'true') {
            var username = $(this).find('name').text();
            var mustsign = $(this).find('must-sign').text();
            var email = $(this).find('email').text();
            var state = $(this).find('state').text();
            article += '<li>';
            article += '<p style="margin-bottom: 5px;">';
            article += '<b>' + username + ' - ' + email + '</b> ';
            article += '<small>(' + state + ')</small>';
            article += '</p></li>';
        }
    });
    $("#dvDocSignatureUser").html(article);
    article = '';
    $("#createdid").css("display", "");
    $("#lastactivityid").css("display", "");
    $("#expiresid").css("display", "");
    $("#completedid").css("display", "");
}


function contextMenuContractSettings(action, el, pos) {
    switch (action) {
        case "edit":
            {
                //  var Stage = "";
                //  Stage = getParameterByName("Stage");
                //  if (Stage == 'pipeline') {
                var LocationURLtoPass = '';
                if ($("#spanstatus").text() != "") {
                    var arrstatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                    if (arrstatus.indexOf($("#spanstatus").text().trim()) > -1) {
                        Stage = '';
                    }
                    else {
                        Stage = 'pipeline';
                    }
                }

                if (Stage == "" && pos == "Closeout") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Closeout=Yes";
                } else if (Stage == "") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text());
                } else if (el == "finalize" && pos == "Yes") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true&DocFianlize=" + pos;
                } else if (el == "finalize") {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true";
                } else {
                    LocationURLtoPass = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage;
                }
                //manoj
                if (getParameterByName("TaskID") != "" && $("#hdnPermission").val() != "Manage") {
                    LocationURLtoPass += "&TaskAllow=No";
                }
                //manoj
                location = LocationURLtoPass;
                break;
            }
        case "standard":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to mark this as standard Contract Record?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
       function (confirmed) {
           if (confirmed) {
               $("#loadingPage").fadeIn();
               var contractID = getParameterByName("ContractID");
               $.ajax({
                   url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractID + '&isstandard=Yes&username=' + localStorage.UserName,
                   type: 'PUT',
                   dataType: 'json',
                   headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                   cache: false,
                   success: function (data) {
                       if ($("#topAction2").html() == 'Mark as Standard') {
                           $("#topAction2").css("display", "none");
                           // $("#topAction2").html('Mark as Non-Standard');
                           //$("#topAction2").attr('onclick', 'contextMenuContractSettings("nonstandard","","");');
                       }

                       //$("#iStandardCont").css('display', '');
                       //$("#iNonStandardCont").css('display', 'none');
                       $("#liContractStandard").css('display', 'none');
                       $("#liContractNonStandard").css('display', '');
                       $("#loadingPage").fadeOut();
                   },
                   error: function () {
                       $("#loadingPage").fadeOut();
                   }
               });
           }
           return;
       });


                break;
            }



        case "nonstandard":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to mark this as <span style='font-weight:700'>Non-Standard</span> Contract?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var contractID = getParameterByName("ContractID");
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractID + '&isstandard=No&username=' + localStorage.UserName,
                 type: 'PUT',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                 cache: false,
                 success: function (data) {
                     if ($("#topAction2").html() == 'Mark as Non-Standard') {
                         $("#topAction2").css("display", "none");
                         //$("#topAction2").html('Mark as Standard');
                         //$("#topAction2").attr('onclick', 'contextMenuContractSettings("standard","","");');
                     }

                     //$("#iStandardCont").css('display', 'none');
                     //$("#iNonStandardCont").css('display', '');
                     $("#liContractStandard").css('display', '');
                     $("#liContractNonStandard").css('display', 'none');
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "view":
            {
                $("#Summary").addClass('pop_up_Harizondal_meta_active');
                $("#Details").removeClass('pop_up_Harizondal_meta_active');
                if ($('#tblDetailsMetadata tr').length == 0) {
                    BindMetaData(contractItem, false);
                }
                else {
                    $('#tblSummary').css("display", "");
                    $('#tblDetailsMetadata').css("display", "none");
                    $('#dialogSummary').dialog('open');
                }
                break;
            }
        case "history":
            {

                if ($('#contractLogs').text() == "No items found.") {
                    $('#contractLogsPopup').dialog('open');
                }
                else if ($('#contractLogs tr').length == 0) {
                    CreateContractActivityList();
                }
                else {
                    $('#contractLogsPopup').dialog('open');
                }
                if (IsPipeline) {
                    $("#ddlHistoryFilter option[value='Amendment']").hide();
                }
                else {
                    $("#ddlHistoryFilter option[value='Amendment']").show();

                }
                break;
            }
        case "duplicate":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to create <span style=\"font-weight:700\">duplicate</span> Contract Record?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
           function (confirmed) {
               if (confirmed) {
                   //manoj
                   var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                   var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                       return (n.RowKey == "16" && n.Status == "ON");
                   });
                   if (vAccFeat.length > 0) {
                       location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Duplicate=Yes&Stage=pipeline";
                   } else {
                       location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Duplicate=Yes&Stage=active";
                   }
                   //manoj
                   //if (getParameterByName('Stage') == 'pipeline') {

                   //} else {

                   //    location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Duplicate=Yes&Stage=pipeline";
                   //}
               }
               return;
           });

                break;
            }

        case "approve":
            {
                if ($("#lblApprovalWorkflow").text() == "In Progress") {
                    $("#alertText1").html("Approval workflow is in progress for this contract");
                    $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=' + workflowurltoshowCONTRACT + '><font color="#44A6D8">View Workflow Details</font></a>');
                    $("#dvAlertDetails1").dialog("open");
                }
                else {
                    $("#loadingPage").fadeIn();
                    $(".validelement").each(function (index, element) {
                        $(element).removeClass("error");
                        $("#errormsg_" + element.id).remove();
                    });
                    $(".error").removeClass("error");
                    var contractTitle = $("#lblContractTitle").text();
                    var contractID = getParameterByName("ContractID");
                    var businessArea = $("#lblBusinessArea").text();
                    var contractArea = $("#lblContractArea").text();
                    $("#tblStage").empty();
                    $("#ddlRule").empty();

                    $('#chkAutoUpdateStatus').attr('checked', false);
                    //manoj
                    $('#chkSendSummaryDoc').attr('checked', false);
                    //manoj
                    if (contractItem.IsFinalized == 'Yes') {
                        $("#liAutoUpdateStatus").css('display', 'none');
                    } else {
                        $("#liAutoUpdateStatus").css('display', '');
                    }
                    $("#txtWorkflowTitle").val('Approval for ' + contractTitle);
                    //manoj
                    $("#txtWorkflowTitle").prop('readonly', false);
                    //manoj
                    $("#lblAutoUpdateStatus").html('Auto update Contract Record status based on this Workflow.');
                    $("#txtDuration").val("");
                    var nicInstance = nicEditors.findEditor('txtComment');
                    nicInstance.setContent('');
                    NicEditorPasteEvent();
                    $("#hdWorkflowType").val("Contract Approval");
                    $("#hdWorkflowContractArea").val(contractArea);
                    $("#hdWorkflowBusinessArea").val(businessArea);
                    $("#hdWorkflowObjectID").val(contractID);
                    $("#hdWorkflowObjectTitle").val(contractTitle);
                    GetValuesAndAutoPopulate("ddlWorkflowCC", "");

                    var vWorkflowSettings = [];
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Contract Approval&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + contractID,
                        type: 'GET',
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        processData: false,
                        success: function (item) {
                            vWorkflowSettings = item.WorkflowSettings;

                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "8" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                vWorkflowRules = item.WorkflowRules;
                            }

                            if (item.WorkflowSettings != null) {
                                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                        $("#spAddStage").css("display", "none");
                                    }
                                }
                                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                if ($("#txtDuration").val() != "") {
                                    $("#txtDuration").trigger("onchange");
                                } else {
                                    $("#lblDurationDate").empty();
                                }
                                //if (vWorkflowSettings.TaskDuration != "undefined" && vWorkflowSettings.TaskDuration != null && vWorkflowSettings.TaskDuration != "")
                                //    $("#lblDurationDate").html(moment(new Date()).add("days", vWorkflowSettings.TaskDuration).format('MM/DD/YYYY'));
                                workflowAdHoc = item.WorkflowSettings.WorkflowAdHoc;
                            }
                            if (vWorkflowRules.length > 0) {
                                //$("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                $(vWorkflowRules).each(function (i, rule) {
                                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                });
                                if (workflowAdHoc == "on") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                }
                                var workflowRules = vWorkflowRules[0];
                                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                                if (vWorkflowRules.length == 1 && workflowAdHoc == "") {
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text(workflowRules.RuleName);
                                    $("#ddlRule").attr('disabled', 'disabled');
                                }
                                else {
                                    $("#lblddlRule").text("");
                                    $("#lblddlRule").css("display", "none");
                                    $("#ddlRule").css("display", "");
                                    $("#ddlRule").removeAttr("disabled");
                                }
                                if (workflowRules.RuleName == "Default")
                                    $("#txtWorkflowTitle").val('Approval for ' + contractTitle);
                                else
                                    $("#txtWorkflowTitle").val(workflowRules.RuleName);
                                var participantsInXML = workflowRules.ParticipantsInXML;
                                var totalFileCount = 0;
                                if (participantsInXML != '') {
                                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                        var StageTitle = $(this).find('StageTitle').text();
                                        var Participants = $(this).find('Participants').text();
                                        var Order = $(this).find('Order').text();
                                        totalFileCount++;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46 start_workflow">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                        if (Order == "Serial")
                                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                        else
                                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                        if (totalFileCount > 1)
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                        else
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);

                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                else {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    $("#ddlOrder" + vasstoid).val('Serial');
                                                }
                                            }
                                            else {
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                $("#ddlOrder" + vasstoid).val('Serial');
                                            }
                                        });
                                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                        var vParticipantsArr = Participants.split(";");
                                        if (vParticipantsArr.length > 1)
                                            $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                        else
                                            $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                        if (item.WorkflowSettings != null) {
                                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                }
                                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                            }
                                        }
                                    });
                                }
                                else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 start_workflow">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1)
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            else {
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                $("#ddlOrder" + vasstoid).val('Serial');
                                            }
                                        }
                                    });
                                }
                            }
                            else {
                                if ($("#ddlRule").html() == "") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text("Ad-hoc");
                                }
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 start_workflow">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);

                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1)
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        else {
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            $("#ddlOrder" + vasstoid).val('Serial');
                                        }
                                    }
                                });
                            }

                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Contract Record Approval Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        },
                        error: function () {
                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                            $("#lblddlRule").css("display", "");
                            $("#ddlRule").css("display", "none");
                            $("#lblddlRule").text("Ad-hoc");
                            if (!workflowAdHoc)
                                $("#ddlRule").attr('disabled', 'disabled');
                            var totalFileCount = 1;
                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + totalFileCount + '"/>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width46 start_workflow">';
                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
                            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';

                            $("#tblStage").append(htmlFormatFile);
                            var $options = $("#ddlApprovers > option").clone();
                            $('#ddlAssignTo' + totalFileCount).append($options);
                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                if ($(this).val().length > 1)
                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                else {
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    $("#ddlOrder" + vasstoid).val('Serial');
                                }
                            });

                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Contract Record Approval Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        }
                    });
                }
                break;
            }
        case "review":
            {
                var contractTitle = $("#lblContractTitle").text();
                var contractID = getParameterByName("ContractID");
                $("#txtTodoTitle").val('Review for ' + contractTitle);
                $("#ddlTodoType option").filter(function (index) { return $(this).text() === "Contract Review"; }).prop('selected', true);
                $("#txtBrowseElement").val(contractTitle);
                $("#txtBrowseElementID").val(contractID);
                $("#trBrowse").css("display", "");
                $("#browse").css("display", "none");
                $("#tdBrowseElement").html("Contract Title");
                $('#ddlTodoType').attr('disabled', 'disabled');
                GetValuesAndAutoPopulate("ddlApprovers", "");
                $("#txtDueDate").val("");
                var nicInstance = nicEditors.findEditor('txtNotes');
                nicInstance.setContent('');
                NicEditorPasteEvent();
                $("#chkNotifyMe").prop('checked', false);
                fnChangeAssignedToText();
                $("#dvTodo").dialog("open");
                break;
            }
        case "delete":
            {
                var allowdelete = false;
                var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                if ($.inArray(contractItem.Status, vContractStatus) !== -1) {
                    if ($("#spancloseout").text() == "Yes") {
                        allowdelete = true;
                    } else {
                        if (contractItem.IsDraft == "Yes") {
                            allowdelete = true;
                        } else {
                            allowdelete = false;
                        }
                    }
                } else {
                    allowdelete = true;
                }
                if (allowdelete) {
                    swal({
                        title: '',
                        text: "Are you sure you want to <span style=\"font-weight:700\">delete</span> Contract Record?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
         function (confirmed) {
             if (confirmed) {
                 var contractID = getParameterByName("ContractID");
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractID,
                     type: 'DELETE',
                     dataType: 'json',
                     headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                     cache: false,
                     success: function (data) {
                         swal("", data);
                         if ($.inArray(contractItem.Status, vContractStatus) !== -1)
                             location = "/Contracts";
                         else
                             location = "/Pipeline";
                     }
                 });
             }

         });
                } else {
                    swal({
                        title: '',
                        text: "Only Closeout Contract Record can be deleted. Do you want to edit for Closeout now?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
        function (confirmed) {
            if (confirmed) {
                contextMenuContractSettings("edit", "", "Closeout")
            }
            return;
        });
                }

                break;
            }
        case "sendacopy":
            {
                ClearSendCopyForm();
                $("#tdSendCopy").html("<b class='PreserveSpace'>" + vContractTile + "</b>");
                $('#sendCopyPopUp').dialog('open');
                break;
            }
        case "share":
            {
                ClearShareContractForm();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (settings) {
                        $("#txtShareExpInContract").val(settings.TaskDuration);
                        if ($("#txtShareExpInContract").val() != "") {
                            $("#txtShareExpInContract").trigger("onchange");
                        } else {
                            $("#lblValidLinkDateContract").empty();
                        }
                        //$("#lblValidLinkDateContract").html(moment(new Date()).add("days", settings.TaskDuration).format('MM/DD/YYYY'));
                    },
                    error: function () {

                    }
                });
                var LinkURL = $(el).find("a").attr('href');
                var contractID = $("#hdnContractID").val();
                var contractTitle = $("#lblContractTitle").text();
                $("#tdShareContract").html("<b>" + contractTitle + "</b>");
                //****Start*****************************************//
                getNameAndEmail();
                GetValuesAndAutoPopulate("ddlContractShareInternal", "");
                //getShareNameandEmailIdInternal(vContractID, "ddlContractShareInternal");
                //****End*****************************************//
                $("#shareContract").dialog("open");
                break;
            }
        case "status":
            {
                BindStatusbyCLM('Yes');

                break;

            }
        case "value":
            {
                ManageContractValue();

                break;
            }
        case "people":
            {

                MangePeople();
                break;
            }
        case "permission":
            {
                $('#newPopup').empty();
                GetValueAndPopulateManagerNew(contractItem, null);
                var statusss = $('#chkpermission').is(':checked');
                arrUser = GetArrayUserList();
                $("#txtAddUser").empty();
                arrUser = arrUser.filter(function (x) { return arrPermsnUser.indexOf(x) < 0 })
                var datalenght = arrUser.length;
                for (var i = 0; i < datalenght; i++) {
                    var sUserName = arrUser[i];
                    var article = '<option value="' + sUserName + '">' + sUserName + '</option>';
                    $("#txtAddUser").append(article);
                }
                $("#txtAddUser").chosen();
                $('#txtAddUser').trigger('chosen:updated');

                if (contractItem.CustomPermission == 'Yes') {
                    $("#chkpermission").prop('checked', true);

                    $("#ddlFullControl").prop('disabled', false).trigger("chosen:updated");
                    $("#ddlReadWrite").prop('disabled', false).trigger("chosen:updated");
                    $("#ddlReadOnly").prop('disabled', false).trigger("chddlPermissionosen:updated");

                    $("#divBottom").show();
                    $("#chkPublicContract").attr("disabled", "disabled");
                    $("#chkPublicContract").prop('checked', false);

                }
                else {

                    $("#ddlFullControl").prop('disabled', true).trigger("chosen:updated");
                    $("#ddlReadWrite").prop('disabled', true).trigger("chosen:updated");
                    $("#ddlReadOnly").prop('disabled', true).trigger("chosen:updated");
                    $("#chkpermission").prop('checked', false);
                    var vLastRow = $("#newPopup li").length;
                    var totalPermissionCount = "1";
                    if (typeof vLastRow == "undefined") {
                        totalPermissionCount = "1";
                    }
                    else {
                        totalPermissionCount = parseInt(vLastRow);
                    }
                    for (i = 1; i <= totalPermissionCount; i++) {
                        $("#PermissionOption" + i).prop('disabled', true);
                        $("#" + i).hide();
                    }
                    $("#divBottom").hide();
                }

                if (contractItem.IsPublic == 'Yes')
                    $("#chkPublicContract").prop('checked', true);
                else
                    $("#chkPublicContract").prop('checked', false);

                $('#addEditPermission').dialog('open');
                break;
            }
        case "alerts":
            {
                ManageAlerts();

                break;
            }
        case "defaultproperties":
            {
                $("#ddlDPContractTypes").removeClass("error");
                $("#ddlDPTransactionType").removeClass("error");
                $("#ddlDPContractClass").removeClass("error");
                $("#ddlDPContractTypes option").filter(function (index) { return $(this).text() === contractItem.ContractType; }).prop('selected', true);
                $("#ddlDPTransactionType option").filter(function (index) { return $(this).text() === contractItem.TransactionType; }).prop('selected', true);
                $("#ddlDPContractClass option").filter(function (index) { return $(this).text() === contractItem.ContractClass; }).prop('selected', true);
                if (contractItem.Renewable == "Yes") {
                    $("#chkDPRenewable").prop('checked', true);
                    $("#chkDPRenewalApproval").removeAttr("disabled");
                }
                if (contractItem.Extendable != null && contractItem.Extendable == "Yes") {
                    $("#chkDPExtendable").prop('checked', true);
                    $("#chkDPExtensionApproval").removeAttr("disabled");
                }
                if (contractItem.NeedApprovalForRenewal != null && contractItem.NeedApprovalForRenewal == "Yes") {
                    $("#chkDPRenewalApproval").prop('checked', true);
                }
                if (contractItem.NeedApprovalForExtension != null && contractItem.NeedApprovalForExtension == "Yes") {
                    $("#chkDPExtensionApproval").prop('checked', true);
                }
                if (contractItem.Amendable != null && contractItem.Amendable == "Yes") {
                    $("#chkDPAmendmentApproval").removeAttr("disabled");
                }
                if (contractItem.NeedApprovalForAmendment != null && contractItem.NeedApprovalForAmendment == "Yes") {
                    $("#chkDPAmendmentApproval").prop('checked', true);
                }

                $("#popupDefaultProperties").dialog("option", "title", "Default Properties");
                $("#popupDefaultProperties").dialog("open");
                break;
            }
            //manoj
        case "missinginfo":
            {
                GetContractPendingAction(true);
                break;
            }
            //manoj
        case "contractrenewal":
            {
                contextMenuTerm("manage");
                break;
            }
        case "archive":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to <span style=\"font-weight:700\">archive</span> this Contract Record?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             var vCancelNote = '';
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=Archived',
                 type: 'PUT',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                 data: vCancelNote,
                 cache: false,
                 success: function (result) {
                     contractItem.Status = "archive";
                     ContractTopActions();
                 }
             });
         }
         return;
     });

                break;
            }
    }
}


function contextMenuContractSettingsRecycleBin(action, el, pos) {
    switch (action) {
        case "view":
            {
                $("#Summary").addClass('pop_up_Harizondal_meta_active');
                $("#Details").removeClass('pop_up_Harizondal_meta_active');
                if ($('#tblDetailsMetadata tr').length == 0) {
                    BindMetaData(contractItem, false);
                }
                else {
                    $('#tblSummary').css("display", "");
                    $('#tblDetailsMetadata').css("display", "none");
                    $('#dialogSummary').dialog('open');
                }
                break;
            }
        case "history":
            {

                if ($('#contractLogs').text() == "No items found.") {
                    $('#contractLogsPopup').dialog('open');
                }
                else if ($('#contractLogs tr').length == 0) {
                    CreateContractActivityList();
                }
                else {
                    $('#contractLogsPopup').dialog('open');
                }
                break;
            }
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to <span style=\"font-weight:700\">delete</span> Contract Record?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             var contractID = getParameterByName("ContractID");
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/DeleteFromRecycleBin?contractid=' + contractID,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     swal("", data);
                     var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                     if ($.inArray(contractItem.Status, vContractStatus) !== -1)
                         location = "/Contracts";
                     else
                         location = "/Pipeline";

                 }
             });
         }
         return;
     });

                break;
            }

    }
}



function arrayUnique(list) {
    var result = [];
    $.each(list, function (i, e) {
        if ($.inArray(e, result) == -1) result.push(e);
    });
    return result;
}





function ManageContractValue() {
    GetContractValueFormData();
    $("#addEditContractValue").dialog("open");
}

function GetContractValueFormData() {
    var strBaseContractValueCurr = "";
    if ($("#hdnBaseContractCurrency").text() == "0") {
        $("#hdnBaseContractCurrency").text("");
    }
    if ($("#hdnContractCurrency").text() == "0") {
        $("#hdnContractCurrency").text("");
    }

    strBaseContractValueCurr = $("#hdnBaseContractValue").text() + " " + $("#hdnBaseContractCurrency").text();
    //if (strBaseContractValueCurr.trim() == "0") {
    //    strBaseContractValueCurr = "Not Available";
    //    $("#lblContractValueInBaseCurency").text(strBaseContractValueCurr);
    //} else {
    if (vCurrencyDisplayStyle == "UK") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', { vMax: '99999999999999999999.99' });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    } else if (vCurrencyDisplayStyle == "CAN") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    } else if (vCurrencyDisplayStyle == "EU") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    } else if (vCurrencyDisplayStyle == "IND") {
        $('#lblContractValueInBaseCurency').autoNumeric('init', { dGroup: '2', vMax: '99999999999999999999.99' });
        $('#lblContractValueInBaseCurency').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()));
        $('#lblContractValueInBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
    }

    // }

    $("#lblCurrencyDisplayStyle").text(vCurrencyDisplayStyle);
    $("#ddlTransactionType").find('option[value="' + $("#hdnTransactionType").text() + '"]').prop("selected", true);
    //if ($("#hdnContractValue").text() == "0") {
    //    $("#hdnContractValue").text("");
    //    $("#txtContractValuepopup").attr("placeholder", "Not Available");

    //    if (vCurrencyDisplayStyle == "UK") {
    //        $('#txtContractValuepopup').autoNumeric('init');
    //    } else if (vCurrencyDisplayStyle == "CAN") {
    //        $('#txtContractValuepopup').autoNumeric('init', { aSep: ' ', aDec: '.' });
    //    } else if (vCurrencyDisplayStyle == "EU") {
    //        $('#txtContractValuepopup').autoNumeric('init', { aSep: '.', aDec: ',' });
    //    } else if (vCurrencyDisplayStyle == "IND") {
    //        $('#txtContractValuepopup').autoNumeric('init', { dGroup: '2' });
    //    }
    //}
    //else {
    $("#txtContractValuepopup").removeAttr("placeholder");

    if (vCurrencyDisplayStyle == "UK") {
        $('#txtContractValuepopup').autoNumeric('init');
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    } else if (vCurrencyDisplayStyle == "CAN") {
        $('#txtContractValuepopup').autoNumeric('init', { aSep: ' ', aDec: '.' });
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    } else if (vCurrencyDisplayStyle == "EU") {
        $('#txtContractValuepopup').autoNumeric('init', { aSep: '.', aDec: ',' });
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    } else if (vCurrencyDisplayStyle == "IND") {
        $('#txtContractValuepopup').autoNumeric('init', { dGroup: '2' });
        $('#txtContractValuepopup').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
    }

    // }
    $("#ddlContractCurrencypopup").val($("#hdnContractCurrency").text());


    //manoj
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "19" && n.Status == "ON");
    });
    if (vDocLibFeat.length > 0) {
        $(cutomFinancialFields).each(function (i, itemfield) {
            $('#txt' + itemfield.FieldName + 'popup').keypress(function (e) {
                if (e.keyCode == 13)
                    return false;
            });

            if (vCurrencyDisplayStyle == "UK") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { vMax: '99999999999999999999.99' });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init');
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            } else if (vCurrencyDisplayStyle == "CAN") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', { aSep: ' ', aDec: '.' });
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            } else if (vCurrencyDisplayStyle == "EU") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', { aSep: '.', aDec: ',' });
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            }
            else if (vCurrencyDisplayStyle == "IND") {
                //popupbind
                if (itemfield.FieldName != "ContractValue") {
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('init', { dGroup: '2', vMax: '99999999999999999999.99' });
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find('CustomBase' + itemfield.FieldName).text() : "0"));
                    $('#lbl' + itemfield.FieldName + 'InBaseCurency').append(" " + $("#hdnBaseContractCurrency").text());
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('init', { dGroup: '2' });
                    $('#txt' + itemfield.FieldName + 'popup').autoNumeric('set', parseFloat(($(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() != "") ? $(vMetadatavaluetobindcutomFinancial).find(itemfield.FieldName).text() : "0"));
                }
                //popupbind
            }
        });
    }
    //manoj
}

function BindCurrencies() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/currencies',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];

                $("#ddlProductCurrency").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlTransactionCurrency").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlContractCurrencypopup").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlCatalogCurrency").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlPriceBreakDownCurrencypopup").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                $("#ddlCatalogCurrencyedit").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>");
                if (item.BaseCurrency == "Yes")
                    $("#hdnBaseCurrency").val(item.Abbreviation);
            }
        }
    });
}

function BindPricingType() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractpricingtype',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $(documenttypes).each(function (i, item) {
                $("#ddlContractPricingType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
            });
        }
    });
}

function BindBillingFrequency() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/billingfrequency',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $(documenttypes).each(function (i, item) {
                $("#ddlBillingFrequency").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
            });
        }
    });
}

function BindPaymentTypes() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/paymenttypes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $(documenttypes).each(function (i, item) {
                $("#ddlPaymentType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
            });
        }
    });
}

function BindPriceBreakdown() {
    $("#tblPriceBreakdowns").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?contractid=' + getParameterByName('ContractID'),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            var count = 0;
            $(contactsJsonPayload).each(function (i, item) {
                count++;
                pricebreakdownitems(item);

            });

            $("#lblPriceBreakdownCount").text('(' + count + ')');
            if (count == 0) {
                $("#tblPriceBreakdowns").append('<tr><td class="f_p-error det_metadata_notavailble">No items found.</td></tr>');
            }
            else {
                $(".openmenuPriceBreakdown").contextMenu({ menu: 'dropdownMenu', leftButton: true }, function (action, el, pos) { contextMenuPriceBreakdown(action, el.parent("td").parent("tr"), pos); });

            }
        },
        error: function (request) {
            if (!$("#lblPriceBreakdownCount").text().trim()) {
                $("#tblPriceBreakdowns").append('<tr><td class="f_p-error det_metadata_notavailble">No items found.</td></tr>');
            } else {
                var arr = request.responseText.split(':');
                var str1 = arr[1];
                var str2 = "No items found.";
                if (str1.indexOf(str2) != -1) {
                    $("#lblPriceBreakdownCount").text('');
                    $("#tblPriceBreakdowns").append('<tr><td class="f_p-error det_metadata_notavailble">No items found.</td></tr>');
                }
            }
        }
    });
}

function pricebreakdownitems(item) {
    var vPriceBreakdownDate = '';
    if (item.TransactionDueDate != null) {
        var fTransactionDueDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { fTransactionDueDate = moment(new Date(item.TransactionDueDate)).format('MM/DD/YYYY'); }
        else { fTransactionDueDate = moment(new Date(item.TransactionDueDate)).format(localStorage.AppDateFormat); }
        vPriceBreakdownDate = '<span>' + fTransactionDueDate + '</span>';
    }
    if (item.TransactionComplete == "Yes" || item.TransactionComplete == "yes") {
        $("#tblPriceBreakdowns").append('<tr><td id="PriceBreakdownID" style="display:none;">' + item.RowKey
            + '</td><td id="PriceBreakdownItemName" style="display:none;">' + item.ItemName
            + '</td><td><div class="content_bottom f_list"><label class="che"><input class="css1-checkbox" type="checkbox"  id=' + item.RowKey
            + ' name=chkValue onclick="checkPriceBreakdown(this);" class="css1-checkbox" value=' + item.RowKey
            + ' checked><label for="' + item.RowKey + '" class="css1-label contract_detail_chkbox"></label></label><p>' + item.ItemName
            + '</p>' + vPriceBreakdownDate + '<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuPriceBreakdown pricebreakedit"/></div></td></tr>');

    } else {
        $("#tblPriceBreakdowns").append('<tr><td id="PriceBreakdownID" style="display:none;">' + item.RowKey
            + '</td><td id="PriceBreakdownItemName" style="display:none;">' + item.ItemName
            + '</td><td><div class="content_bottom f_list"><label class="che"><input class="css1-checkbox" type="checkbox"  id=' + item.RowKey
            + ' name=chkValue onclick="checkPriceBreakdown(this);" class="css1-checkbox" value=' + item.RowKey
            + ' ><label for="' + item.RowKey + '" class="css1-label contract_detail_chkbox"></label></label><p>' + item.ItemName
            + '</p>' + vPriceBreakdownDate + '<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuPriceBreakdown pricebreakedit"/></div></td></tr>');

    }
}

function pricebreakdowntransactionitems(item) {
    var vPriceBreakdownDate = '';
    if (item.TransactionDueDate != null) {
        var fTransactionDueDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { fTransactionDueDate = moment(new Date(item.TransactionDueDate)).format('MM/DD/YYYY'); }
        else { fTransactionDueDate = moment(new Date(item.TransactionDueDate)).format(localStorage.AppDateFormat); }
        vPriceBreakdownDate = '<span>' + fTransactionDueDate + '</span>';
    }
    var vPriceBreakdownCompleteDate = '';
    if (item.TransactionCompletedDate != null) {
        var fTransactionCompletedDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { fTransactionCompletedDate = moment(new Date(item.TransactionCompletedDate)).format('MM/DD/YYYY'); }
        else { fTransactionCompletedDate = moment(new Date(item.TransactionCompletedDate)).format(localStorage.AppDateFormat); }
        vPriceBreakdownCompleteDate = '<span>' + fTransactionCompletedDate + '</span>';
    }

    $("#PriceBreakDownList").append(
        '<tr>'
        + '<td id="PriceBreakdownID" style="display:none;">'
        + item.RowKey
        + '</td>'
        + '<td id="PriceBreakdownItemName" style="display:none;">'
        + item.ItemName
        + '</td>'
        + '<td>'
        + item.ItemName
        + '<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuPriceBreakdown"/>'
        + '</td>'
        + '<td>'
        + item.Units
        + '</td>'
        + '<td>'
        + item.NumbersOfUnit
        + '</td>'
        + '<td>'
        + item.UnitPrice
        + '</td>'
        + '<td>'
        + item.Currency
        + '</td>'
        + '<td>'
        + item.TotalCost
        + '</td>'
        + '</tr>'
    );
}

function BindPriceBreakdownTransaction() {
    $("#PriceBreakDownList").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?contractid=' + getParameterByName('ContractID'),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            var count = 0;
            $(contactsJsonPayload).each(function (i, item) {
                count++;
                pricebreakdowntransactionitems(item);

            });
            $("#lblPriceBreakdownTransactionCount").text('(' + count + ')');
            if (count == 0) {
                $("#PriceBreakDownList").append('<tr><td class="det_metadata_notavailble" colspan="6">No items found.</td></tr>');
            }
            else {
                $(".openmenuPriceBreakdown").contextMenu({ menu: 'dropdownMenu', leftButton: true }, function (action, el, pos) { contextMenuPriceBreakdown(action, el.parent("td").parent("tr"), pos); });
            }
        },
        error: function (request) {
            if (!$("#lblPriceBreakdownTransactionCount").text().trim()) {
                $("#PriceBreakDownList").append('<tr><td class="det_metadata_notavailble" colspan="6">No items found.</td></tr>');
            } else {
                var arr = request.responseText.split(':');
                var str1 = arr[1];
                var str2 = "No items found.";
                if (str1.indexOf(str2) != -1) {
                    $("#lblPriceBreakdownTransactionCount").text('');
                    $("#PriceBreakDownList").append('<tr><td class="det_metadata_notavailble" colspan="6">No items found.</td></tr>');
                }
            }
        }
    });
}

function checkPriceBreakdown(cb) {
    var PriceBreakdownID = cb.id
    var lfckv = cb.checked;
    if (lfckv) {
        $.ajax({
            async: false,
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?priceBreakDownid=' + PriceBreakdownID + '&acheived=Yes',
            type: "PUT",
            dataType: "json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            "Content-Type": "application/json",
        }).done(function (data) {
            swal("", "Price Breakdown Completed");
            result = data;
        }).fail(function (data) {
            swal("", data.status + ": " + data.statusText);
        });
    } else {
        $.ajax({
            async: false,
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?priceBreakDownid=' + PriceBreakdownID + '&acheived=No',
            type: "PUT",
            dataType: "json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            "Content-Type": "application/json",
        }).done(function (data) {
            result = data;
        }).fail(function (data) {
            swal("", data.status + ": " + data.statusText);
        });
    }
}

$('#btnAddPriceBreakdowns').click(function () {
    $("#txtPriceBreakDownID").val("");
    $("#txtPriceBreakDownItemName").val("");
    $("#txtPriceBreakDownDescription").val("");
    $('#ddlPriceBreakDownUnits').val("0");
    $("#txtPriceBreakDownNumberOfUnits").val("0");
    $("#txtPriceBreakDownUnitPrice").val("0");
    $("#txtPriceBreakDownTotalCost").val("0");
    $("#dtTransactionDueDate").val("");
    $("#dtTransactionCompletedDate").val("");
    $("#chkTransactionComplete").attr("checked", false);


    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlPriceBreakDownCurrencypopup").val("0");
    else
        $("#ddlPriceBreakDownCurrencypopup").val($("#hdnBaseCurrency").val());
    $("#popupPriceBreakDown").dialog("option", "title", "Manage Contract Price Breakdown");
    $("#popupPriceBreakDown").dialog("open");
});

function BindPriceBreakDownCurrency() {
    $("#ddlPriceBreakDownCurrencypopup").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/currencies',
        type: 'GET',
        dataType: 'json',
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            if ($("#hdnPriceBreakDownCurrency").text() != '') {
                $(data).each(function (i, item) {
                    if ($("#hdnPriceBreakDownCurrency").text() == item.Abbreviation) {
                        $("#ddlPriceBreakDownCurrencypopup").append("<option value='" + encodeURI(item.Abbreviation) + "' selected>" + item.Abbreviation + "</option>");
                    } else {
                        $("#ddlPriceBreakDownCurrencypopup").append("<option value='" + encodeURI(item.Abbreviation) + "'>" + item.Abbreviation + "</option>");
                    }
                });
            }
            else {
                $(data).each(function (i, item) {
                    if (item.BaseCurrency == "Yes") {
                        $("#ddlPriceBreakDownCurrencypopup").append("<option selected='selected' value='" + encodeURI(item.Abbreviation) + "'>" + item.Abbreviation + "</option>");
                    } else {
                        $("#ddlPriceBreakDownCurrencypopup").append("<option value='" + encodeURI(item.Abbreviation) + "'>" + item.Abbreviation + "</option>");
                    }
                });
            }
        }
    });

}

function contextMenuPriceBreakdown(action, el, pos) {

    switch (action) {
        case "view":
            {
                var priceBreakdownID = $(el).find("#PriceBreakdownID").text();
                $('#tblMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/></td></tr>');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?priceBreakDownid=' + priceBreakdownID,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (priceBreakdownentity) {


                        var vMetadata = '<tr>';
                        vMetadata += '<td class="text_label width40">Item Name</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.ItemName + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Item Description</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.ItemDescription + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Units</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.Units + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Numbers Of Unit</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.NumbersOfUnit + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Unit Price</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.UnitPrice + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Currency</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.Currency + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">TotalCost</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.TotalCost + '</td>';
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Transaction Due Date</td>';
                        if (priceBreakdownentity.TransactionDueDate != null && priceBreakdownentity.TransactionDueDate != '') {
                            var vDueDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { vDueDate = moment(new Date(priceBreakdownentity.TransactionDueDate)).format('MM/DD/YYYY'); }
                            else { vDueDate = moment(new Date(priceBreakdownentity.TransactionDueDate)).format(localStorage.AppDateFormat); }
                            vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                        }
                        else {
                            vMetadata += '<td class="text width60"></td>';
                        }
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">TransactionCompletedDate</td>';
                        if (priceBreakdownentity.TransactionCompletedDate != null && priceBreakdownentity.TransactionCompletedDate != '') {
                            var vCompletedDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { vCompletedDate = moment(new Date(priceBreakdownentity.TransactionCompletedDate)).format('MM/DD/YYYY'); }
                            else { vCompletedDate = moment(new Date(priceBreakdownentity.TransactionCompletedDate)).format(localStorage.AppDateFormat); }
                            vMetadata += '<td class="text width60">' + vCompletedDate + '</td>';
                        }
                        else {
                            vMetadata += '<td class="text width60"></td>';
                        }
                        vMetadata += '</tr>';
                        vMetadata += '<tr>';
                        vMetadata += '<td class="text_label width40">Transaction Complete</td>';
                        vMetadata += '<td class="text width60">' + priceBreakdownentity.TransactionComplete + '</td>';
                        vMetadata += '</tr>';


                        $("#tblMetadataDetail").html(vMetadata);
                        setBlankValueToHyphen("tblMetadataDetail");
                        $("#viewMetadataDetail").dialog("option", "title", "View Price Breakdown");
                        $("#viewMetadataDetail").dialog("open");
                    }
                });

                break;
            }
        case "delete":
            {
                var priceBreakdownItemName = $(el).find("#PriceBreakdownItemName").text();
                swal({
                    title: '',
                    text: "Are you sure you want to <span style=\"font-weight:700\">delete '" + priceBreakdownItemName + "'</span>?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             var priceBreakdownID = $(el).find("#PriceBreakdownID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?priceBreakDownid=' + priceBreakdownID,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {
                     swal("", "Price Breakdown Deleted");
                     BindPriceBreakdownTransaction();
                 }
             });
         }
         return;
     });

                break;

            }
        case "edit":
            {
                BindPriceBreakDownCurrency();
                var priceBreakdownID = $(el).find("#PriceBreakdownID").text();

                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?priceBreakDownid=' + priceBreakdownID,
                    type: 'GET',
                    async: false,
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (priceBreakdownentity) {
                        var duedate = "";
                        if (priceBreakdownentity.TransactionDueDate != null && priceBreakdownentity.TransactionDueDate != '') {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { duedate = moment(new Date(priceBreakdownentity.TransactionDueDate)).format('MM/DD/YYYY'); }
                            else { duedate = moment(new Date(priceBreakdownentity.TransactionDueDate)).format(localStorage.AppDateFormat); }

                        }
                        var completedate = "";
                        if (priceBreakdownentity.TransactionCompletedDate != null && priceBreakdownentity.TransactionCompletedDate != '') {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { completedate = moment(new Date(priceBreakdownentity.TransactionCompletedDate)).format('MM/DD/YYYY'); }
                            else { completedate = moment(new Date(priceBreakdownentity.TransactionCompletedDate)).format(localStorage.AppDateFormat); }
                        }

                        $("#txtPriceBreakDownID").val(priceBreakdownentity.RowKey);
                        $("#txtPriceBreakDownItemName").val(priceBreakdownentity.ItemName);
                        $("#txtPriceBreakDownDescription").val(priceBreakdownentity.ItemDescription);
                        if (priceBreakdownentity.Units != '') {
                            $("#ddlPriceBreakDownUnits option").filter(function (index) { return $(this).text() === priceBreakdownentity.Units; }).prop('selected', true);
                        }
                        else {
                            $("#ddlPriceBreakDownUnits").val('0')
                        }
                        $("#txtPriceBreakDownNumberOfUnits").val(priceBreakdownentity.NumbersOfUnit);
                        $("#txtPriceBreakDownUnitPrice").val(priceBreakdownentity.UnitPrice);

                        if (priceBreakdownentity.Currency != '') {
                            $("#ddlPriceBreakDownCurrencypopup option").filter(function (index) { return $(this).text() === priceBreakdownentity.Currency; }).prop('selected', true);
                        }
                        else {
                            if ($("#hdnBaseCurrency").val() == "")
                                $("#ddlPriceBreakDownCurrencypopup").val("0");
                            else
                                $("#ddlPriceBreakDownCurrencypopup").val($("#hdnBaseCurrency").val());
                        }
                        $("#txtPriceBreakDownTotalCost").val(priceBreakdownentity.TotalCost);
                        $("#dtTransactionDueDate").val(duedate);
                        if (priceBreakdownentity.TransactionComplete == "Yes") {
                            $("#chkTransactionComplete").attr("checked", true);
                        }
                        else {
                            $("#chkTransactionComplete").attr("checked", false);
                        }
                        $("#dtTransactionCompletedDate").val(completedate);


                    }
                });

                $("#popupPriceBreakDown").dialog("option", "title", "Edit Price Breakdown");
                $("#popupPriceBreakDown").dialog("open");
                break;
            }
    }
}

function modalOnOpenPriceBreakdown(dialog) {
    var strContractID = getParameterByName('ContractID');
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var isformvalid = false;
    if (requiredValidator('addNewPriceBreakDown')) {
        isformvalid = true;
        var PriceBreakDownID = $("#txtPriceBreakDownID").val();
        if (PriceBreakDownID != "") {
            var isTransactionComplete = "No"
            if ($("#chkTransactionComplete").is(':checked')) {
                isTransactionComplete = "Yes";
            }
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown?priceBreakDownid=' + PriceBreakDownID,
                type: 'PUT',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                data: {
                    RowKey: PriceBreakDownID,
                    ContractID: strContractID,
                    ContractTitle: $("#lblContractTitle").text(),
                    ItemName: $("#txtPriceBreakDownItemName").val(),
                    ItemDescription: $("#txtPriceBreakDownDescription").val(),
                    Units: $("#ddlPriceBreakDownUnits").find('option:selected').text(),
                    NumbersOfUnit: $("#txtPriceBreakDownNumberOfUnits").val(),
                    UnitPrice: parseFloat($("#txtPriceBreakDownUnitPrice").val()),
                    Currency: $("#ddlPriceBreakDownCurrencypopup").find('option:selected').text(),
                    TotalCost: $("#txtPriceBreakDownTotalCost").val(),
                    TransactionDueDate: $.datepicker.formatDate('mm/dd/yy', $("#dtTransactionDueDate").datepicker('getDate')),
                    TransactionCompletedDate: $.datepicker.formatDate('mm/dd/yy', $("#dtTransactionCompletedDate").datepicker('getDate')),
                    TransactionComplete: isTransactionComplete,
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName
                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    swal("", "Price Breakdown Updated");
                    $("#popupPriceBreakDown").dialog("close");
                    BindPriceBreakdownTransaction();
                }
            });
        }
        else {
            var isTransactionComplete = "No"
            if ($("#chkTransactionComplete").is(':checked')) {
                isTransactionComplete = "Yes";
            }
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/pricebreakdown/',
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                data: {
                    ContractID: getParameterByName('ContractID'),
                    ContractTitle: $("#lblContractTitle").text(),
                    ItemName: $("#txtPriceBreakDownItemName").val(),
                    ItemDescription: $("#txtPriceBreakDownDescription").val(),
                    Units: $("#ddlPriceBreakDownUnits").find('option:selected').text(),
                    NumbersOfUnit: $("#txtPriceBreakDownNumberOfUnits").val(),
                    UnitPrice: $("#txtPriceBreakDownUnitPrice").val(),
                    Currency: $("#ddlPriceBreakDownCurrencypopup").find('option:selected').text(),
                    TotalCost: $("#txtPriceBreakDownTotalCost").val(),
                    TransactionDueDate: $.datepicker.formatDate('mm/dd/yy', $("#dtTransactionDueDate").datepicker('getDate')),
                    TransactionCompletedDate: $.datepicker.formatDate('mm/dd/yy', $("#dtTransactionCompletedDate").datepicker('getDate')),
                    TransactionComplete: isTransactionComplete,
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName

                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    swal("", "Price Breakdown Created");
                    $("#popupPriceBreakDown").dialog("close");
                    BindPriceBreakdownTransaction();
                }
            });

        }
    }
    else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
    return isformvalid;
}

$("#txtPriceBreakDownNumberOfUnits").on('input', function () {
    var price = parseFloat($("[id*=txtPriceBreakDownUnitPrice]").val());
    var Qnt = parseFloat($("[id*=txtPriceBreakDownNumberOfUnits]").val());
    var total = parseFloat(price * Qnt);
    var isinvalidTotal = isNaN(total);
    if (!isinvalidTotal) {
        $("[id*=txtPriceBreakDownTotalCost]").val(total);
    } else {
        $("[id*=txtPriceBreakDownTotalCost]").val("0");
    }
});

$("#txtPriceBreakDownUnitPrice").on('input', function () {
    var price = parseFloat($("[id*=txtPriceBreakDownUnitPrice]").val());
    var Qnt = parseFloat($("[id*=txtPriceBreakDownNumberOfUnits]").val());
    var total = parseFloat(price * Qnt);
    var isinvalidTotal = isNaN(total);
    if (!isinvalidTotal) {
        $("[id*=txtPriceBreakDownTotalCost]").val(total);
    } else {
        $("[id*=txtPriceBreakDownTotalCost]").val("0");
    }
});



$('#btnAddRelatedContracts').click(function () {
    AddRelatedContracts();
});
var relatedContractsTag = [];
function AddRelatedContracts() {
    $("#ddlRelConFilterContractType option:selected").prop('selected', false).trigger('chosen:updated');
    $("#ddlRelConFilterCounterparty option:selected").prop('selected', false).trigger('chosen:updated');
    addbuttonclick = false;
    $("#loadingPage").fadeIn();
    $('#loadContract').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    $('#tblPopupContracts').empty();
    $("#txtSearchBoxContract").val("");
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getrelatedcontracts?stage=&searchkeyword=&customquery=&sortbyfield=ContractTitle&orderby=ASC';
    if ($('#tblPopupContracts tr').length <= 0) {
        $("#txtSearchBoxContract").val("");
        $.ajax({
            url: vURL,
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: $("#lblBusinessAreaPath").text(), UserID: localStorage.UserID },
            cache: false,
            success: function (data) {
                $('#tblPopupContracts').empty();
                $('#loadContract').empty();
                $("#hdnRelatedContracts").append(getParameterByName("ContractID"))
                //Sridhar - Added pagination
                listRelatedContracts = data;
                CreateRelatedContractsList(0);
                collectrelatedcontractrowkey("");
                var vCount = data.length;
                if (vCount != 0) {
                    $("#tblPopupContracts tr td").attr('style', 'vertical-align: top');
                    $('#compact-paginationRelatedContracts').css('display', '');
                    $('#compact-paginationRelatedContracts').pagination({
                        items: vCount,
                        itemsOnPage: 10,
                        type: 'tbody',
                        typeID: 'tblPopupContracts',
                        row: 'tr',
                        cssStyle: 'compact-theme',
                        listname: 'RelatedContracts'
                    });
                } else {
                    $('#compact-paginationRelatedContracts').css('display', 'none');
                    $('#loadContract').html('<p style="margin-left: 20px;">No items found.</p>')
                }
                $("#txtSearchBoxContract").autocomplete({
                    source: relatedContractsTag,
                    minLength: 2,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxContract").val(uidetails.item.label);
                        ViewContracts();
                    }
                });
                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });
                $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
                $("#popupContracts").dialog("open");
                $("#loadingPage").fadeOut();
            },
            error: function (data) {
                var arr = data.responseText.split(':');
                var str1 = arr[1];
                var str2 = "No contract found";

                if (str1.indexOf(str2) != -1) {
                    $('#loadContract').html('<p style="margin-left: 20px;">No items found.</p>')
                    $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
                    $("#popupContracts").dialog("open");
                    $("#loadingPage").fadeOut();
                }



                $('#loadMA').empty();
                $('#loadContract').empty();
                $('#loadMA').html('<p style="margin-left: 20px;">No items found.</p>');
                $('#tblPopupContracts').html('No items found.');
                $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
                $("#popupContracts").dialog("open");
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        $('#loadMA').empty();
        $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
        $("#popupContracts").dialog("open");
        $("#loadingPage").fadeOut();
    }

    vContractID = getParameterByName("ContractID");
    BindRelatedContractsPopup(vContractID);
}

function CreateRelatedContracts() {
    var vRelatedContractID = "";
    var vRelatedContractTitle = "";
    var vChildRelation = "";
    var vParentRelationShip = "";

    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
        if (vRelatedContractID == "") {
            vRelatedContractID = this.id;
            vRelatedContractTitle = this.value;
            vChildRelation = $(this).parent().parent().children(".ddl").find('option:selected').text();
            vParentRelationShip = $("#ddlRelationshipTypeParent").find('option:selected').text();
        }
        else {
            vRelatedContractID += "; " + this.id;
            vRelatedContractTitle += "; " + this.value;
            vChildRelation += "; " + $(this).parent().parent().children(".ddl").find('option:selected').text();
            vParentRelationShip += "; " + $("#ddlRelationshipTypeParent").find('option:selected').text();
        }
    });
    if (vRelatedContractID != "") {
        if (requiredValidator('popupContracts', false)) {
            if (addbuttonclick) {
                arrRelatedContracts.push({
                    ContractID: "",
                    ContractTitle: "",
                    RelatedContractID: vRelatedContractID,
                    RelatedContractTitle: vRelatedContractTitle,
                    RelationshipType: vParentRelationShip,
                    RelatedRelationshipType: vChildRelation,
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName
                });

                $("#popupContracts").dialog("close");
                if ($('#RelatedContracts').val() != "") {
                    var oldrelatedcontrct = $('#RelatedContracts').val();
                    if (oldrelatedcontrct.trim() != "") {
                        $('#RelatedContracts').val(oldrelatedcontrct + ";" + vRelatedContractTitle);
                    }
                }
                else {
                    $('#RelatedContracts').val(vRelatedContractTitle);
                }
            } else {
                $("#loadingPage").fadeIn();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName('ContractID') + '/relatedcontracts',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                    data: {
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblContractTitle").text(),
                        RelatedContractID: vRelatedContractID,
                        RelatedContractTitle: vRelatedContractTitle,
                        RelationshipType: vParentRelationShip,
                        RelatedRelationshipType: vChildRelation,
                        CreatedBy: localStorage.UserName,
                        ModifiedBy: localStorage.UserName,
                    },
                    cache: false,
                    success: function (person) {
                        $("#popupContracts").dialog("close");
                        $("#loadingPage").fadeOut();
                        $('#liSelectedRelatedContract').empty();
                        BindRelatedContracts();
                    },
                    error: function (request) {
                        $("#loadingPage").fadeOut();
                    }
                });
            }
            return true;
        }
    } else {
        swal("", "No contract has been selected.");
        $("#popupContracts").dialog("close");
        return true;
    }
}

function CreateRelatedContracttemplate() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName('ContractID') + '/relatedcontracts',
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: {
            ContractID: getParameterByName('ContractID'),
            ContractTitle: $("#lblContractTitle").text(),
            RelatedContractID: arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractID,
            RelatedContractTitle: arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractTitle,
            RelationshipType: arrRelatedContracts[arrRelatedContracts.length - 1].RelationshipType,
            RelatedRelationshipType: arrRelatedContracts[arrRelatedContracts.length - 1].RelatedRelationshipType,
            CreatedBy: localStorage.UserName,
            ModifiedBy: localStorage.UserName,
        },
        cache: false,
        success: function (person) {
            BindRelatedContracts();
            arrRelatedContracts = [];
        },
        error: function (request) {
            arrRelatedContracts = [];
        }
    });
}

function ContractSettingPending() {
    $("#ContractSetting").addClass('pop_up__Acti');
    $("#StartApproval").removeClass('pop_up__Acti');
    $("#Editcontract").removeClass('pop_up__Acti');
    $("#Activities").removeClass('pop_up__Acti');
    $("#JustInfo").removeClass('pop_up__Acti');
    $('#tblContractSettingMetadata').css("display", "");
    $('#tblStartApprovalMetadata').css("display", "none");
    $('#tblEditcontractMetadata').css("display", "none");
    $('#tblActivitiesMetadata').css("display", "none");
    $('#tblJustInfoMetadata').css("display", "none");
    if ($("#hdnPermission").val() !== 'View' && $("#hdnPermission").val() !== '' && $("#hdnPermission").val() !== null && getParameterByName("Stage") != "pipeline") {
        //Sridhar
        if ($("#hdnPermission").val() == "Manage") {
            if (ContractStatus == "Expired" || ContractStatus == "Replaced" || ContractStatus == "Cancelled") {
                $("#btnPendingUpdate").hide();
            }
            else {
                $("#btnPendingUpdate").show();
            }
        }
        //Sridhar
    }
    else
        $("#btnPendingUpdate").hide();
}
function StartApprovalPending() {
    $("#ContractSetting").removeClass('pop_up__Acti');
    $("#StartApproval").addClass('pop_up__Acti');
    $("#Editcontract").removeClass('pop_up__Acti');
    $("#Activities").removeClass('pop_up__Acti');
    $("#JustInfo").removeClass('pop_up__Acti');
    $('#tblContractSettingMetadata').css("display", "none");
    $('#tblStartApprovalMetadata').css("display", "");
    $('#tblEditcontractMetadata').css("display", "none");
    $('#tblActivitiesMetadata').css("display", "none");
    $('#tblJustInfoMetadata').css("display", "none");
    $("#btnPendingUpdate").hide();
}
function EditcontractPending() {
    $("#ContractSetting").removeClass('pop_up__Acti');
    $("#StartApproval").removeClass('pop_up__Acti');
    $("#Editcontract").addClass('pop_up__Acti');
    $("#Activities").removeClass('pop_up__Acti');
    $("#JustInfo").removeClass('pop_up__Acti');
    $('#tblContractSettingMetadata').css("display", "none");
    $('#tblStartApprovalMetadata').css("display", "none");
    $('#tblEditcontractMetadata').css("display", "");
    $('#tblActivitiesMetadata').css("display", "none");
    $('#tblJustInfoMetadata').css("display", "none");
    if ($("#hdnPermission").val() !== 'View' && $("#hdnPermission").val() !== '' && $("#hdnPermission").val() !== null)
        $("#btnPendingUpdate").show();
    else
        $("#btnPendingUpdate").hide();
}
function ActivitiesPending() {
    $("#ContractSetting").removeClass('pop_up__Acti');
    $("#StartApproval").removeClass('pop_up__Acti');
    $("#Editcontract").removeClass('pop_up__Acti');
    $("#Activities").addClass('pop_up__Acti');
    $("#JustInfo").removeClass('pop_up__Acti');
    $('#tblContractSettingMetadata').css("display", "none");
    $('#tblStartApprovalMetadata').css("display", "none");
    $('#tblEditcontractMetadata').css("display", "none");
    $('#tblActivitiesMetadata').css("display", "");
    $('#tblJustInfoMetadata').css("display", "none");
    $("#btnPendingUpdate").hide();
}
function JustInfoPending() {
    $("#ContractSetting").removeClass('pop_up__Acti');
    $("#StartApproval").removeClass('pop_up__Acti');
    $("#Editcontract").removeClass('pop_up__Acti');
    $("#Activities").removeClass('pop_up__Acti');
    $("#JustInfo").addClass('pop_up__Acti');
    $('#tblContractSettingMetadata').css("display", "none");
    $('#tblStartApprovalMetadata').css("display", "none");
    $('#tblEditcontractMetadata').css("display", "none");
    $('#tblActivitiesMetadata').css("display", "none");
    $('#tblJustInfoMetadata').css("display", "");
    $("#btnPendingUpdate").hide();
}


function MetadataSummary() {

    $("#Summary").addClass('pop_up_Harizondal_meta_active');
    $("#Details").removeClass('pop_up_Harizondal_meta_active');
    $("#Details").removeClass('pop_up__Acti');
    $("#Summary").addClass('pop_up__Acti');
    $('#tblSummary').css("display", "");
    $('#tblDetailsMetadata').css("display", "none");
    $('#tblSummary').css("display", "");
    $('#tblDetailsMetadata').css("display", "none");

}

function MetadataDetails() {

    $("#Details").addClass('pop_up_Harizondal_meta_active');
    $("#Summary").removeClass('pop_up_Harizondal_meta_active');
    $('#tblSummary').css("display", "none");
    $('#tblDetailsMetadata').css("display", "");
}

function BindMetaData(contractRecord, isRefresh) {
    //if (!(TermTypeBinded)) {
    //    if (!(isRefresh)) {
    //        $("#loadingPage").fadeIn();
    //    }
    //BindTermTypes(true);
    // }else{
    if (!(isRefresh)) {
        $("#loadingPage").fadeIn();
    }
    if (contractRecord == null) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + getParameterByName("ContractID"),
            type: 'GET',
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
            processData: false,
            success: function (data) {
                contractRecord = data;
                BindMetadataDetail(contractRecord, isRefresh);
            }
        });
    }
    else { BindMetadataDetail(contractRecord, isRefresh); }
    //}
}

function BindMetadataDetail(contractRecord, isRefresh) {
    $("#tdSumContractTitle").html(contractRecord.ContractTitle);
    $("#tdSumContractNumber").html((contractRecord.ContractNumber != null && contractRecord.ContractNumber != "") ? contractRecord.ContractNumber : '-');
    $("#tdSumContractType").html(contractRecord.ContractType);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (mainmetadataFields) {
            var vMetadata = $(mainmetadataFields).find('Metadata');
            var vMetadataHTML = vMetadata[0].innerHTML;
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + encodeURIComponent(contractRecord.ContractType),
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                success: function (metadataFields) {
                    $("#tblSummaryMetadata").empty();
                    var datalenght = metadataFields.length;
                    for (var i = 0; i < datalenght; i++) {
                        var item = metadataFields[i];
                        var fieldtext = $(vMetadata).find(item.FieldName).text();

                        if ((item.FieldName != "ContractTitle") && (item.FieldName != "ContractNumber") && (item.FieldName != "ContractType") && (name != "STATUSCHANGEDALERT")) {
                            var vCurrency = "";
                            var vControls = '<tr>';
                            //if (item.FieldName == "ContractValue" || item.FieldType == "Currency") {
                            //    vControls += '<td class="f_head width40">' + item.FieldDisplayName + '(actual)</td>';
                            //} else {
                            if (item.FieldDisplayName.trim().toLowerCase().indexOf("related contract (s)") >= 0)
                                vControls += '<td class="f_head width60">Related Contract Record(s)</td>';
                            else
                                vControls += '<td class="f_head width90">' + item.FieldDisplayName + '</td>';

                            // }
                            var valuetobindinfield = "";
                            if (item.FieldType == "Date") {
                                var vv = $(vMetadata).find(item.FieldName).text();
                                var onlydate = "";
                                if (vv != null) {
                                    onlydate = vv.substring(0, vv.length - 19);
                                    if (onlydate != "") {
                                        if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                            onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                                        }
                                        else {
                                            onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                                        }
                                    }
                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + onlydate + '</td>';
                                }
                            } else if (item.FieldName == "ContractValue" || item.FieldType == "Currency") {
                                vCurrency = item.FieldName;
                                //var strBaseContractValueCurr = "";
                                //strBaseContractValueCurr = $("#hdnContractCurrency").text();
                                //if (strBaseContractValueCurr.trim() == "") {
                                //    strBaseContractValueCurr = "Not Available";
                                //}
                                //else {
                                //    //if (fieldtext == "Not Available") {
                                //    //    strBaseContractValueCurr = "";
                                //    //}
                                //}
                                valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? $(vMetadata).find(item.FieldName).text() : "0.00";
                                vControls += '<td class="labelleft width60" style="word-break: break-all;"><label id="' + item.FieldName + '">' + valuetobindinfield + '</label> ' + $("#hdnContractCurrency").text() + '</td>';
                                valuetobindinfield = "";
                                //vCurrency = item.FieldName;

                            }
                            else {
                                if (item.FieldName == "ContractTermType") {
                                    valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? TermTypeDisplayName[$(vMetadata).find(item.FieldName).text()] : "-";
                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + valuetobindinfield + '</td>';
                                    valuetobindinfield = "";
                                }
                                else {
                                    valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? $(vMetadata).find(item.FieldName).text() : "-";
                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + valuetobindinfield + '</td>';
                                    valuetobindinfield = "";
                                }
                            }

                            vControls += '</tr>';
                            valuetobindinfield = ($(vMetadata).find(item.FieldName).text() != null && $(vMetadata).find(item.FieldName).text() != "") ? $(vMetadata).find(item.FieldName).text() : "-";
                            vMetadataHTML = vMetadataHTML.replace("<" + item.FieldName + ">" + valuetobindinfield + "</" + item.FieldName + ">", "");
                            valuetobindinfield = '';
                            $("#tblSummaryMetadata").append(vControls);
                            if (vCurrency != "") {
                                if ($.isNumeric($('#' + vCurrency).html())) {
                                    if (vCurrencyDisplayStyle == "UK") {
                                        $('#' + vCurrency).autoNumeric();
                                    } else if (vCurrencyDisplayStyle == "CAN") {
                                        $('#' + vCurrency).autoNumeric({ aSep: ' ', aDec: '.' });
                                    } else if (vCurrencyDisplayStyle == "EU") {
                                        $('#' + vCurrency).autoNumeric({ aSep: '.', aDec: ',' });
                                    } else if (vCurrencyDisplayStyle == "IND") {
                                        $('#' + vCurrency).autoNumeric({ dGroup: '2', });
                                    }
                                }

                                //var vControlsvalue = '<tr><td class="f_head width40">' + item.FieldDisplayName + '(Base)</td>';
                                //var strBaseContractValueCurr = $("#hdnBaseContractValue").text() + " " + $("#hdnBaseContractCurrency").text();
                                //if (strBaseContractValueCurr.trim() == "0") {
                                //    strBaseContractValueCurr = "Not Available";
                                //    vControlsvalue += '<td class="labelleft width60" style="word-break: break-all;" id=basecurrency>Not Available</td></tr>'
                                //}
                                //else if (true) {
                                //    vControlsvalue += '<td class="labelleft width60" style="word-break: break-all;" ><label id="basecurrencyvalue">' + $("#hdnBaseContractValue").text() + '</label> ' + $("#hdnBaseContractCurrency").text() + '</td></tr>';
                                //}
                                //$("#tblSummaryMetadata").append(vControlsvalue);
                                //vControlsvalue = "";
                                //if (vCurrencyDisplayStyle == "UK") {
                                //    $('#basecurrencyvalue').autoNumeric();
                                //} else if (vCurrencyDisplayStyle == "CAN") {
                                //    $('#basecurrencyvalue').autoNumeric({ aSep: ' ', aDec: '.' });
                                //} else if (vCurrencyDisplayStyle == "EU") {
                                //    $('#basecurrencyvalue').autoNumeric({ aSep: '.', aDec: ',' });
                                //} else if (vCurrencyDisplayStyle == "IND") {
                                //    $('#basecurrencyvalue').autoNumeric({ dGroup: '2', });
                                //}
                                vCurrency == "";
                            }
                        }
                    }

                    var vContractFields = null;

                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractfields',
                        type: 'GET',
                        dataType: 'json',
                        "Content-Type": "application/json",
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        async: false,
                        success: function (contractfields) {
                            vContractFields = contractfields;
                            $("#tblDetailsMetadata").empty();
                            var datalenght = $(vMetadataHTML).length;
                            for (var i = 0; i < datalenght; i++) {
                                var item = $(vMetadataHTML)[i];
                                var name = item.nodeName;
                                var vCurrency = "";
                                if ((name == "APPROVEDBY") || (name == "CONTRACTNUMBER") || (name == "CONTRACTMANAGERS") || (name == "CONTRACTTERMTYPE")
                                   || (name == "CONTRACTVALUE") || (name == "COUNTERPARTY") || (name == "CUSTOMPERMISSION")
                                   || (name == "DESCRIPTION") || (name == "STARTDATE") || (name == "ENDDATE") || (name == "EXTERNALSIGNEES") || (name == "ORIGINATINGPARTY")
                                   || (name == "PROJECT") || (name == "RELATEDCONTRACT") || (name == "TERMENDDATE") || (name == "REVIEWEDBY") || (name == "RENEWALDATE")
                                   || (name == "COMPANYPROFILE") || (name == "SIGNEES") || (name == "RELATEDCONTRACTS") || (name == "RELATEDREQUESTS")) {
                                    // if transation type is general agreement do not show contract value in metadata
                                    if ($("#hdnTransactionType").text() == "Legal/General Agreement" && name == "CONTRACTVALUE") {
                                    } else {
                                        var vField = $.grep(vContractFields, function (person) { return person.FieldName.toUpperCase() == name });
                                        var value = item.textContent;
                                        if (vField.length > 0) {
                                            var vControls = '<tr>';
                                            if (vField[0].FieldDisplayName == "Contract Managers") {
                                                vControls += '<td class="f_head width40">Contract Owner(s)</td>';
                                            }
                                            else if (vField[0].FieldDisplayName.trim().toLowerCase().indexOf("related contract (s)") >= 0) {
                                                vControls += '<td class="f_head width60">Related Contract Record(s)</td>';
                                            }
                                            else {
                                                vControls += '<td class="f_head width90">' + vField[0].FieldDisplayName + '</td>';
                                            }
                                            //else if (vField[0].FieldName == "ContractValue" || item.FieldType == "Currency") {
                                            //    vControls += '<td class="f_head width40">Contract Value(Actual)</td>';
                                            // }

                                            if (value == '' || value == '0') {
                                                if (vField[0].FieldName == "ContractValue" || item.FieldType == "Currency") {

                                                    var valuetoapply = (typeof value != "undefined" && value != null && value != "") ? value : "0.00"
                                                    vControls += '<td class="labelleft width60" style="word-break: break-all;"><label id="td' + vField[0].FieldName + '">' + valuetoapply + '</label> ' + $("#hdnContractCurrency").text() + '</td>';

                                                    vCurrency = 'td' + vField[0].FieldName;
                                                } else {
                                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">-</td>';
                                                }
                                            }
                                            else {
                                                if (vField[0].FieldType == "Date") {
                                                    var onlydate = "";
                                                    onlydate = value.substring(0, value.length - 19);
                                                    if (onlydate != "") {
                                                        if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                                            onlydate = moment(new Date(onlydate)).format('MM/DD/YYYY');
                                                        }
                                                        else {
                                                            onlydate = moment(new Date(onlydate)).format(localStorage.AppDateFormat);
                                                        }
                                                    }
                                                    vControls += '<td class="labelleft width60" style="word-break: break-all;">' + onlydate + '</td>';
                                                }
                                                else {
                                                    if (vField[0].FieldName == "ContractValue" || item.FieldType == "Currency") {
                                                        //var strBaseContractValueCurr = "";
                                                        //strBaseContractValueCurr = $("#hdnContractCurrency").text();
                                                        //if (strBaseContractValueCurr == "") {
                                                        //    strBaseContractValueCurr = "Not Available";
                                                        //} else {
                                                        //    if (strBaseContractValueCurr.trim() == "") {
                                                        //        strBaseContractValueCurr = "Not Available";
                                                        //    }
                                                        //}
                                                        vControls += '<td class="labelleft width60" style="word-break: break-all;"><label id="td' + vField[0].FieldName + '">' + value + '</label> ' + $("#hdnContractCurrency").text() + '</td>';
                                                        vCurrency = 'td' + vField[0].FieldName;
                                                    } else {
                                                        if (vField[0].FieldName == "ContractTermType") {
                                                            vControls += '<td class="labelleft width60" style="word-break: break-all;">' + TermTypeDisplayName[value] + '</td>';
                                                        }
                                                        else {
                                                            vControls += '<td class="labelleft width60" style="word-break: break-all;">' + value + '</td>';
                                                        }

                                                    }
                                                }
                                            }
                                            vControls += '</tr>';

                                            $("#tblDetailsMetadata").append(vControls);
                                            if (vCurrency != "") {
                                                if ($.isNumeric($('#' + vCurrency).html())) {
                                                    if (vCurrencyDisplayStyle == "UK") {
                                                        $('#' + vCurrency).autoNumeric({ vMax: '99999999999999999999.99' });
                                                    } else if (vCurrencyDisplayStyle == "CAN") {
                                                        $('#' + vCurrency).autoNumeric({ aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
                                                    } else if (vCurrencyDisplayStyle == "EU") {
                                                        $('#' + vCurrency).autoNumeric({ aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
                                                    } else if (vCurrencyDisplayStyle == "IND") {
                                                        $('#' + vCurrency).autoNumeric({ dGroup: '2', vMax: '99999999999999999999.99' });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (!(isRefresh)) {
                                $("#loadingPage").fadeOut();
                                $('#dialogSummary').dialog('open');
                            }
                        },
                        error: function () {
                            if (!(isRefresh)) {
                                $("#loadingPage").fadeOut();
                            }
                        }
                    });
                },
                error: function () {
                    if (!(isRefresh)) {
                        $("#loadingPage").fadeOut();
                    }
                }
            });
        }
    });
}

function RedirectToCounterparty(counterpartyname) {
    counterpartyname = unescape(counterpartyname);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty?counterpartyname=' + encodeURIComponent(counterpartyname),
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (item) {
            location = '/Counterparty/CounterpartyDetail?CounterpartyID=' + encodeURI(item.RowKey);
        },
        error: function () {
            if (localStorage.UserType.indexOf("Global Contract Owner") >= 0 || localStorage.UserType.indexOf("Global Administrator") >= 0) {
                swal({
                    title: '',
                    text: "This Counterparty information is not available in eContracts Counteparty database. Do you want to add now?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             CounterpartyPopup(counterpartyname);
         }
         return;
     });
            } else {
                swal("", "This Counterparty information is not available in eContracts Counteparty database.");
            }
        }

    });
}



function updatevalue() {
    $("#loadingPage").fadeIn();
    var contractvalue = $("#txtContractValuepopup").autoNumeric('get')
    //if (contractvalue == 0) {
    //    swal("", "Enter valid contract value.");
    //    $("#loadingPage").fadeOut();
    //} else {
    if (requiredValidator("addEditContractValue")) {
        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
        var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
            return (n.RowKey == "19" && n.Status == "ON");
        });
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        if (vDocLibFeat.length > 0) {
            updatecustomfinacialvalue();
        } else {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/value?contractvalue=' + contractvalue + '&username=' + localStorage.UserName,
                type: 'PUT',
                dataType: 'json',
                async: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: {
                    "TransactionType": contractItem.TransactionType,
                    "ContractCurrency": $("#ddlContractCurrencypopup option:selected").val(),
                    "ModifiedBy": localStorage.UserName
                },
                cache: false,
                success: function (result) {
                    $("#hdnBaseContractValue").text(result.BaseContractValue);
                    $("#hdnBaseContractCurrency").text(result.BaseContractValueCurrency);
                    $("#loadingPage").fadeOut();
                    $("#addEditContractValue").dialog("close");
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#loadingPage").fadeOut();
                },
                error: function (person) {
                    $("#loadingPage").fadeOut();
                }
            });
            $("#hdnContractValue").text(contractvalue);

            $("#hdnContractCurrency").text($("#ddlContractCurrencypopup option:selected").val());
            var sTransType = contractItem.TransactionType;
            if (sTransType == "0")
                sTransType = "";
            $("#liTType").text(sTransType);
            return true;
        }
    } else {
        $("#loadingPage").fadeOut();
        $('.ui-button-green-text').parent().removeAttr('disabled');
        return false;
    }
}

//manoj
function updatecustomfinacialvalue() {
    var contractvalue = $("#txtContractValuepopup").autoNumeric('get')
    var ContractUpdate = "TransactionType=" + contractItem.TransactionType;
    ContractUpdate += "&ContractCurrency=" + $("#ddlContractCurrencypopup option:selected").val();
    ContractUpdate += "&ModifiedBy=" + localStorage.UserName;
    $(".customfinancialupdate").each(function (indexfinancial, elementfinancial) {
        ContractUpdate += "&" + elementfinancial.name + "customfieldwyM1fCHT=" + $("#" + elementfinancial.id).autoNumeric('get');
    });

    var formData = new FormData();
    formData.append("AccountID", localStorage.AccountID);
    formData.append("SearializeControls", ContractUpdate);

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/customfinancialvalue?contractid=' + getParameterByName("ContractID") + '&contractvalue=' + contractvalue + '&username=' + localStorage.UserName,
        type: 'PUT',
        dataType: 'json',
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: formData,
        cache: false,
        contentType: false,
        processData: false,
        success: function (result) {
            $("#hdnBaseContractValue").text(result.BaseContractValue);
            $("#hdnBaseContractCurrency").text(result.BaseContractValueCurrency);
            $("#addEditContractValue").dialog("close");
            $('.ui-button-green-text').parent().removeAttr('disabled');
            GetContractValueSetting(result);
            $("#loadingPage").fadeOut();
        },
        error: function (person) {
            $("#loadingPage").fadeOut();
        }
    });
    $("#hdnContractValue").text(contractvalue);
    $("#lblContractValue").css('display', 'inline');
    $("#lblContractCurrency").css('display', 'inline');
    if ($("#lblContractValue").text() == "Not available") {
        $("#lblContractValue").text("0");
    }
    if (ContractCurrencyType == 'base') {
        if (vCurrencyDisplayStyle == "UK") {
            $('#lblContractValue').autoNumeric('init', { vMax: '99999999999999999999.99' });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        } else if (vCurrencyDisplayStyle == "CAN") {
            $('#lblContractValue').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        } else if (vCurrencyDisplayStyle == "EU") {
            $('#lblContractValue').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        } else if (vCurrencyDisplayStyle == "IND") {
            $('#lblContractValue').autoNumeric('init', { dGroup: '2', vMax: '99999999999999999999.99' });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnBaseContractValue").text()))
        }
        if ($("#hdnBaseContractCurrency").text() == "0") {
            $("#hdnBaseContractCurrency").text("");
        }
        $("#lblContractCurrency").text($("#hdnBaseContractCurrency").text());
    } else if (ContractCurrencyType == 'actual') {
        if (vCurrencyDisplayStyle == "UK") {
            $('#lblContractValue').autoNumeric('init');
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        } else if (vCurrencyDisplayStyle == "CAN") {
            $('#lblContractValue').autoNumeric('init', { aSep: ' ', aDec: '.', vMax: '99999999999999999999.99' });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        } else if (vCurrencyDisplayStyle == "EU") {
            $('#lblContractValue').autoNumeric('init', { aSep: '.', aDec: ',', vMax: '99999999999999999999.99' });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        } else if (vCurrencyDisplayStyle == "IND") {
            $('#lblContractValue').autoNumeric('init', { dGroup: '2', vMax: '99999999999999999999.99' });
            $('#lblContractValue').autoNumeric('set', parseFloat($("#hdnContractValue").text()))
        }
        if ($("#ddlContractCurrencypopup option:selected").val() == "0") {
            $("#lblContractCurrency").text("");
        }
        else {
            $("#lblContractCurrency").text($("#ddlContractCurrencypopup option:selected").val());
        }

    }
    if ($("#ddlContractCurrencypopup option:selected").val() == "0") {
        $("#hdnContractCurrency").text("");
    }
    else {
        $("#hdnContractCurrency").text($("#ddlContractCurrencypopup option:selected").val());
    }

    var sTransType = contractItem.TransactionType;
    if (sTransType == "0")
        sTransType = "";
    $("#liTType").text(sTransType);
}
//manoj

$('#btnEditValue').click(function () {
    BindPriceBreakdownTransaction();
    GetContractValueFormData();
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $("#addEditContractValue").dialog("option", "title", "Financials");
    $("#addEditContractValue").dialog("open");

});

$("input[name='FinalizedStatus']:radio").change(function () {
    if ($(this).val() == 'Cancelled') {
        $('#dvContCancelNote').css("display", "");
        $("#txtReasonOfCancelContract").addClass('validelement');
    }
    else {
        $('#dvContCancelNote').css("display", "none");
        if ($("#txtReasonOfCancelContract").hasClass("validelement"))
            $("#txtReasonOfCancelContract").removeClass('validelement');
    }
});

function statusclick(e) {
    $('input[name="rdstatus"][value="' + decodeURI(e.value) + '"]').prop('checked', true);
    if (decodeURI(e.value) == "Renewed") {
        $('#dvCancelCtrl').css("display", "none");
        $('#dvExtendCtrl').css("display", "none");
        OpenRenewalForm();
        $("#addEditStatus").dialog("close");
        $("#hdChangeStatusClick").val("Y");
    }
    else if (decodeURI(e.value) == "Extended") {
        $('#dvExtendCtrl').css("display", "");
        $('#dvCancelCtrl').css("display", "none");
        $('#dvRenewCtrl').css("display", "none");
    }
    else if (decodeURI(e.value) == "Cancelled") {
        $('#dvCancelCtrl').css("display", "");
        $('#dvRenewCtrl').css("display", "none");
        $('#dvExtendCtrl').css("display", "none");
    }
    else {
        $('#dvCancelCtrl').css("display", "none");
        $('#dvRenewCtrl').css("display", "none");
        $('#dvExtendCtrl').css("display", "none");

    }

}

function imgcheckgeneral() {
    var selectedValue = decodeURI($("input:radio[name=rdstatus]:checked").val());
    if (selectedValue == "Cancelled") {
        if ($("#txtCancelledReason")[0].value == "") {
            swal("", "Enter reason for cancellation.");
            return false;
        } else {
            ChangeContractStatus();
            return true;
        }
    } else if (selectedValue == "Renewed") {
        if ($("#dtRenewalDate")[0].value == "") {
            swal("", "Select renewal date.");
            return false;
        } else {
            ChangeContractStatus();
            return true;
        }
    } else if (selectedValue == "Extended") {
        if ($("#dtExtendedDate")[0].value == "") {
            swal("", "Select extended date.");
            return false;
        } else {
            ChangeContractStatus();
            return true;
        }
    } else if (selectedValue == "undefined" || selectedValue == "0" || selectedValue == "") {
        swal("", "Select Status");
        return false;
    }
    else {
        ChangeContractStatus();
        return true;
    }
}
function ChangeContractStatus() {
    if (requiredValidator("dvManageContractStatus", false)) {
        var stat = decodeURI($("input:radio[name=FinalizedStatus]:checked").val());
        var prevStat = contractItem.Status;
        var StateOk = ["Active", "Up for Renewal", "Renewed", "Extended", "Expired", "About to Expire"];
        if (stat == prevStat) {
            $("#loadingPage").fadeOut();
            $("#dvManageContractStatus").dialog("close");
        }
        else {
            var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
            if (contractItem.StartDate != null && ($.inArray(contractItem.Status, vContractStatus) !== -1)) {
                var StartDate = new Date(contractItem.StartDate);
                var StartDateMonthDateFormate = (StartDate.getUTCMonth() + 1) + '/' + StartDate.getUTCDate() + '/' + StartDate.getUTCFullYear();

                var TodaysDate = new Date();
                var month = TodaysDate.getUTCMonth() + 1;
                var day = TodaysDate.getUTCDate();

                var TodaysDateMonthDateFormate = month + '/' + day + '/' + TodaysDate.getUTCFullYear();

                if (Date.parse(StartDateMonthDateFormate) > Date.parse(TodaysDateMonthDateFormate) && ($.inArray(stat, StateOk) !== -1)) {

                    swal({
                        title: '',
                        text: "Start Date is '<span style=\"font-weight:700\">" + StartDateMonthDateFormate + "</span>' ,Do you want to change the status?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
          function (confirmed) {
              if (confirmed) {
                  ChangeContractStatusMethod();
              }
              return;
          });

                }
                else {
                    ChangeContractStatusMethod();
                }
            }
            else {
                ChangeContractStatusMethod();
            }
        }
    }
}

function ChangeContractStatusMethod() {
    $("#loadingPage").fadeIn();
    var stat = '';
    if (contractItem.IsFinalized == 'Yes')
        stat = decodeURI($("input:radio[name=FinalizedStatus]:checked").val());
    else
        stat = decodeURI($("input:radio[name=PipelineStatus]:checked").val());

    var vStatusNote = '';
    if (stat == "Cancelled" && contractItem.Status != "Cancelled") {
        $("#loadingPage").fadeOut();
        $("#txtReasonOfCancel").val("");
        GetValuesAndAutoPopulate("ddlSendToCancel", "");
        $("#dvCancelContract").dialog("open");
        //vStatusNote = "CancelledReason=" + $("#txtReasonOfCancelContract").val();
    }
    else if (stat == contractItem.Status) {
        $("#loadingPage").fadeOut();
        $("#dvManageContractStatus").dialog("close");
    }
    else {
        contractItem.Status = stat;
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=' + stat,
            type: 'PUT',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            data: vStatusNote,
            cache: false,
            success: function (result) {
                if ($("#spanstatus").text() != "") {
                    if ($("#spanstatus").text().trim() == "Archived") {
                        $("#spancloseout").html("");
                        $("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="MarkContractAsCloseout();"><span class="f_button_green">Mark Contract Record for Closeout</span></a></div></td>')
                        $("#rtarchived").css('display', 'none');
                    }
                }
                contractItem = result;
                ReloadContracts();
                $("#loadingPage").fadeOut();
                $("#dvManageContractStatus").dialog("close");
            },
            error: function (person) {
                $("#loadingPage").fadeOut();
            },
        });
    }
}
function MarkContractAsFinal() {
    $("#loadingPage").fadeIn();
    var requiredavalible = false;
    var vdocs = $("#chkMarkDocAsFinal").is(':checked') ? 'Yes' : 'No';
    var vMetadatavaluetofinalize;
    var metadataFields = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (mainmetadataFields) {
            vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
        },
    });

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + strSelectedContractType.trim(),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (metadataFieldsvalue) {
            if (getParameterByName("Stage") == "pipeline") {
                metadataFields = $.grep(metadataFieldsvalue, function (n, i) {
                    return (n.Finalizingfrom == "Required");
                });
            }
        },
    });

    $(metadataFields).each(function (i, item) {
        if ($(vMetadatavaluetofinalize).find(item.FieldName).text() == null || $(vMetadatavaluetofinalize).find(item.FieldName).text() == "") {
            requiredavalible = true;
        }
    });
    if (!requiredavalible) {
        swal({
            title: '',
            text: "Are you sure you want to <span style=\"font-weight:700\">mark</span> this contract as <span style=\"font-weight:700\">Finalize/Ready for Signature</span>?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true
        },
     function (confirmed) {
         if (confirmed) {
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + getParameterByName("ContractID") + '&finalized=Yes&username=' + localStorage.UserName + '&docs=' + vdocs,
                 type: 'PUT',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                 cache: false,
                 success: function (data) {
                     $("#tdPipelind").empty();
                     $("#tdFinalized").empty();
                     BindStatusbyCLM('No');
                     swal("", "This Contract Record has been removed from the Pipeline and moved to the Contracts tab.");
                     contractItem = data;
                     MakeFinalized = "Yes";
                     ContractTopActions();
                     //manoj
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     //manoj
                     //Sridhar
                     EnableAllMilestones(getParameterByName("ContractID"));
                     //Sridhar
                     $('#tdFinalizeContract1').css("display", "none");
                     $('#tdFinalizeContract2').css("display", "none");
                     $('#tdFinalizeContract3').css("display", "");
                     $('#tdFinalizeContract3').html('<img src="/Content/Images/right.png" />Marked Finalized/Ready for Signature by ' + contractItem.FinalizedBy);
                     $('input:radio[name="FinalizedStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
                     $('input:radio[name="FinalizedStatus"]').prop('disabled', false);
                     $('input:radio[name="PipelineStatus"]').attr('checked', false);
                     $('input:radio[name="PipelineStatus"]').prop('disabled', true);
                     $('.AutoChange').prop('disabled', true);

                     var imgObj = $("#imgFinalizedStatus");
                     imgObj.attr("title", "Collapse");
                     imgObj.attr("src", "../Content/Images/e-close.png");
                     $('#trFinalizedStatus').css('display', '');
                     $("#trCloseOutContract").css('display', '')
                     imgObj = $("#imgPipelineStatus");
                     imgObj.attr("title", "Expand");
                     imgObj.attr("src", "../Content/Images/e-open.png");
                     $('#trPipelineStatus').css('display', 'none');
                     //$("#loadingPage").fadeOut();
                 },
                 error: function (person) {
                     $("#loadingPage").fadeOut();
                 }
             });
         } else {
             $("#loadingPage").fadeOut();
             $("#dvManageContractStatus").dialog("close");
         }
     });

    } else {
        swal({
            title: '',
            text: "Some metadata fields required for Contract Record <span style=\"font-weight:700\">Finalization/Ready for Signature</span> is/are not filled . Do you want to fill the metadata fields now?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true
        },
        function (confirmed) {
            if (confirmed) {
                contextMenuContractSettings("edit", "finalize", vdocs)
            } else {
                $("#loadingPage").fadeOut();
                $("#dvManageContractStatus").dialog("close");
            }
        });
    }
}

function changestatus() {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var stat = decodeURI($("input:radio[name=rdstatus]:checked").val());
    var vCancelNote = '';
    var vStatusNote = '';
    if (stat == "Cancelled" && contractItem.Status != "Cancelled") {
        $("#loadingPage").fadeOut();
        $("#txtReasonOfCancel").val("");
        GetValuesAndAutoPopulate("ddlSendToCancel", "");
        $("#dvCancelContract").dialog("open");
        //vStatusNote = "CancelledReason=" + $("#txtReasonOfCancelContract").val();
    }
    else if (stat == contractItem.Status) {
        $("#loadingPage").fadeOut();
        $("#dvManageContractStatus").dialog("close");
    }
    else {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changestatus?status=' + stat,
            type: 'PUT',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            data: vCancelNote,
            cache: false,
            success: function (result) {
                $('.ui-button-green-text').parent().removeAttr('disabled');

            }
        });
    }
}


function updaterenewaldate() {
    var dt = $.datepicker.formatDate('mm/dd/yy', $("#dtRenewalDate").datepicker('getDate'));
    var changeEndDate = 'No';
    if ($("#chkUpdateEndDate").is(':checked')) {
        changeEndDate = 'Yes';
    }
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renew?renewdate=' + dt,
        type: 'PUT',
        dataType: 'json',
        async: false,
        data: {
            RenewedBy: localStorage.UserName,
            ModifiedBy: localStorage.UserName
        },
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, ChangeEndDate: changeEndDate },
        cache: false,
        success: function (result) {

        }
    });
}

function updateenddate() {
    var dt = $.datepicker.formatDate('mm/dd/yy', $("#dtExtendedDate").datepicker('getDate'));
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/extend?enddate=' + dt,
        type: 'PUT',
        dataType: 'json',
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        data: {
            ModifiedBy: localStorage.UserName
        },
        cache: false,
        success: function (result) {

        }
    });
}

function getNameAndEmail() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + getParameterByName("ContractID") + '/contacts',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data != null) {
                var datalenght = data.length;
                var allInternal = ''
                var totalFileCount = 0;
                var iex = 0;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];

                    totalFileCount++;
                    if (item.InternalOrExternal == "External") {
                        if (iex == 0) {
                            iex = 1;
                            $('#txtShareContract1').val(item.ContactName);
                            $('#txtShareContractEmail1').val(item.EmailID);
                        }
                        else {
                            var htmlFormatFile = '<tr id="trShareContract' + totalFileCount + '">';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareContract' + totalFileCount + '" maxlength="42" value="' + item.ContactName + '" name="ShareContractName' + totalFileCount + '" placeholder="Name" title="Name" type="text" class="f_inpt width90" value="' + item.ContactName + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td>';
                            htmlFormatFile += '<input id="txtShareContractEmail' + totalFileCount + '" maxlength="50" value="' + item.EmailID + '" name="ShareContractEmail' + totalFileCount + '" placeholder="Email ID" title="Email ID" type="text" class="f_inpt width90 validelement validemail" value="' + item.EmailID + '" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td style="width:20px">';
                            htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareContract(this)"><img src="../Content/Images/icon/delete.png" /></a>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';
                            $("#tblShareContract").append(htmlFormatFile);
                        }
                    }
                    else {
                        allInternal += item.ContactName + ";";
                    }
                }
                GetTextAndAutoPopulateNotHidden("ddlContractShareInternal", allInternal);
            }

        },
        error: function () {
        }

    });
}

function AddShareContract() {
    var count = $("#tblShareContract tr").length;
    var vLastRow = $("#tblShareContract tr:last").attr('id');
    var totalFileCount = 2;
    if (typeof vLastRow == "undefined") {
        totalFileCount = 2;
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trShareContract", ""));

        totalFileCount = parseInt(totalFileCount) + 1;
    }


    if (count < 10) {

        var htmlFormatFile = '<tr id="trShareContract' + totalFileCount + '">';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtShareContract' + totalFileCount + '" maxlength="42" name="ShareContractName' + totalFileCount + '" placeholder="Name" title="Name" type="text" class="f_inpt width90 validelement" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td>';
        htmlFormatFile += '<input id="txtShareContractEmail' + totalFileCount + '" maxlength="50" name="ShareContractEmail' + totalFileCount + '" placeholder="Email ID" title="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td style="width:20px">';
        htmlFormatFile += '<a href="javascript:void(0)" onclick="DeleteShareContract(this)"><img src="../Content/Images/icon/delete.png" /></a>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblShareContract").append(htmlFormatFile);


    }
    if (count == 9) {
        $(".addmorelinks").hide();
    }
}


function DeleteShareContract(n) {
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $(".addmorelinks").show();
}

function ShareContract() {
    var vValid = requiredValidator('shareContract', false);
    if (vValid) {

        var emailvalue = "";
        arremail = [];
        $('#shareContract .validemail').each(function (i, item) {
            if (emailvalue == '') {
                emailvalue = item.value;
                if (emailvalue != "")
                    arremail.push(emailvalue.toLowerCase());
                emailvalue = '';
            }

        });

        recipientsArray = arremail.sort();
        reportRecipientsDuplicate = [];
        for (var j = 0; j < recipientsArray.length - 1; j++) {
            if (recipientsArray[j + 1] == recipientsArray[j]) {
                reportRecipientsDuplicate.push(recipientsArray[j]);
                if (reportRecipientsDuplicate.length > 0) {
                    vValid = false;
                }

            }
        }

        if (vValid) {
            $("#loadingPage").fadeIn();
            var vAutoStatusChange = $("#chkAutoUpdateStatusShare").is(':checked') ? 'Yes' : 'No';
            var contractForm = $("#frmShareContract").serialize();

            contractForm += "&SendBy=" + localStorage.UserName;
            contractForm += "&Notes=" + encodeURI($("#txtShareNotesContract").val());
            contractForm += "&ExpIn=" + $("#txtShareExpInContract").val();
            contractForm += "&ContractTitle=" + encodeURIComponent($("#lblContractTitle").text());
            contractForm += "&AllowComment=" + 'Yes';
            contractForm += "&AutoUpdateStatus=" + vAutoStatusChange;
            var notify = $("#ddlContractShareInternal").chosen().find("option:selected");
            var notyEmail = "";

            $(notify).each(function (i, item) {
                var email = $(item).attr("data-emailvalue");
                if (email != null && email.trim() != "") {

                    var name = item.text;
                    notyEmail += name + "~" + email.trim() + ";";
                }
            });

            contractForm += "&InternalUsers=" + notyEmail;
            if ($("#chkDiscloseCon").is(':checked')) {
                contractForm += "&Disclose=Yes";
            } else {
                contractForm += "&Disclose=No";
            }
            var vContractID = getParameterByName('ContractID');
            //$("#inprocessShareContract").css('visibility', 'visible');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/Share?contractid=' + vContractID,
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: contractForm,
                cache: false,
                success: function (person) {
                    $("#shareContract").dialog("close");
                    if (vAutoStatusChange == "Yes") {
                        contractItem.Status = "In Negotiation";
                        ContractTopActions();
                        //manoj
                        if (documentview == null || documentview == "" || documentview == 'folder') {
                            if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                var selectedfoldervalue = $('#showAll').find("a");
                                var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                showfolderdocuments(parentdocumentdetails);
                            }
                            else {
                                BindDocument(vContractID);
                            }
                        } else {
                            DisplayDocument(documentview);
                        }
                        $("#hdnFolderDocumentView").text('');
                        $("#hdnShowAllTextValue").html('');
                        PrvFolderselection = '';
                        //Bind primary and pined document based on new feature
                        if ($("#hdnnewdocumentfeature").text() == "Yes") {
                            CreateDocumentListPinView(vContractID);
                        }
                        //manoj
                    }
                    $("#loadingPage").fadeOut();
                    ClearShareContractForm();
                    GetContractActivities(vContractID);
                },
                error: function (person) {
                    $("#loadingPage").fadeOut();

                    swal("", "Email ID should not duplicate.");
                },
                complete: function () {
                    //$("#inprocessShareContract").css('visibility', 'hidden');
                }
            });
        }
        else {

            $('#shareContract .validemail').each(function (i, item) {
                for (i = 0; i <= reportRecipientsDuplicate.length; i++) {
                    if (item.value.toLowerCase() == reportRecipientsDuplicate[i]) {
                        var id = item.id;
                        $('#' + id).addClass('error')
                    }
                }

            });
        }
    }
}

function ClearShareContractForm() {
    $("#txtShareNotesContract").val('');
    $("#txtShareToContract").val('');
    $("#txtShareExpInContract").val('');
    $('#chkAutoUpdateStatusShare').attr('checked', false);
    GetValuesAndAutoPopulate("ddlContractShareInternal", "");
    if (contractItem.IsFinalized == 'Yes') {
        $("#trAutoUpdateStatusShare").css('display', 'none');
    } else {
        $("#trAutoUpdateStatusShare").css('display', '');
    }

    $('#tblShareContract').empty();
    $('#chkDiscloseCon').attr('checked', false);
    var vSignee = '<tr>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareContract1" name="ShareContractName1" maxlength="42" title="Name" placeholder="Name" type="text" class="f_inpt width90 validelement" />';
    vSignee += '</td>';
    vSignee += '<td>';
    vSignee += '<input id="txtShareContractEmail1" name="ShareContractEmail1" maxlength="50" title="Email ID" placeholder="Email ID" type="text" class="f_inpt width90 validelement validemail" />';
    vSignee += '</td>';
    vSignee += '<td style="width:20px">&nbsp;</td>';
    vSignee += '</tr>';
    $('#tblShareContract').html(vSignee);
}
function MangePeopleView() {

    $("#addViewPeople").dialog("option", "title", "People");
    $("#addViewPeople").dialog("open");
    $("#addViewPeople").height("auto");
    $('#txtExternalSignee').val($('#lisigneesExternalView').text());

}


function MangePeople() {
    $('input[name="ContractPrivacy"][value="' + $("#lblContractPrivacy").text() + '"]').prop('checked', true);
    if ($("#licontractmanagers").text() != "") {
        GetValuesAndAutoPopulate("ddlContractManagers", $("#licontractmanagers").text());
    }

    if ($("#lireviewers").text() != "") {
        GetValuesAndAutoPopulate("ddlReviewers", $("#lireviewers").text());
    }

    if ($("#liapprovers").text() != "") {
        GetValuesAndAutoPopulate("ddlApproversNew", $("#liapprovers").text());
    }

    if ($("#lisignees").text() != "") {
        GetValuesAndAutoPopulate("ddlSignees", $("#lisignees").text());
    }
    $('.contractroles').each(function () {
        var id = $(this).attr("data-name");
        GetValuesAndAutoPopulate(id, $(this).text());
    })
    $("#txtExternalSignee").val($("#lisigneesExternal").text());

    $('#txtExternalSignee').val($('#lisigneesExternalView').text());

    $("#addEditPeople").dialog("option", "title", "People");
    $("#addEditPeople").dialog("open");
    $("#addEditPeople").height("auto");
}

function savePeople() {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var isformvalid = false;
    if (requiredValidator('formaddNewPeople')) {
        $("#loadingPage").fadeIn();
        var contractmanagers = $("#ddlContractManagers").val();
        var cm = '';

        $(contractmanagers).each(function (i, item) {
            if (cm == '') {
                cm = item;
            }
            else {
                cm += "; " + item;
            }
        });

        var reviewers = $("#ddlReviewers").val();
        var rev = '';
        $(reviewers).each(function (i, item) {
            if (rev == '') {
                rev = item;
            }
            else {
                rev += "; " + item;
            }
        });

        var approvers = $("#ddlApproversNew").val();
        var app = '';
        $(approvers).each(function (i, item) {
            if (app == '') {
                app = item;
            }
            else {
                app += "; " + item;
            }
        });

        var signees = $("#ddlSignees").val();
        var sign = '';
        $(signees).each(function (i, item) {
            if (sign == '') {
                sign = item;
            }
            else {
                sign += "; " + item;
            }
        });
        var signees = $("#ddlSignees").val();




        var extsign = $("#txtExternalSignee").val();
        var formData = new FormData();
        formData.append("ContractManagers", cm);
        formData.append("Reviewers", rev);
        formData.append("Approvers", app);
        formData.append("Signees", sign);
        formData.append("ExternalSignees", extsign);

        formData.append("ModifiedBy", localStorage.UserName);
        formData.append("CustomPermission", contractItem.CustomPermission);
        var read = [];
        var writeRead = [];
        var full = [];
        var UniqueUsers = [];
        $(".ContractRoleType").each(function () {
            var valddl = $(this).val();
            var IDddl = this.id;
            var Permi = $(this).attr('data-permission');
            var vallt = '';
            $(valddl).each(function (i, item) {
                if (vallt == '') {
                    vallt = item;
                }
                else {
                    vallt += "; " + item;
                }

                if (Permi == "Read Only") {
                    read.push(item);
                    if ($.inArray(item, ReadContractroleUser) > -1) {
                        ReadContractroleUser = jQuery.grep(ReadContractroleUser, function (value) {
                            return value != item;
                        });
                    }
                }
                else if (Permi == "Read/Write") {
                    writeRead.push(item);
                    if ($.inArray(item, ReadWriteContractroleUser) > -1) {
                        ReadWriteContractroleUser = jQuery.grep(ReadWriteContractroleUser, function (value) {
                            return value != item;
                        });
                    }
                }
                else if (Permi == "Full Control") {
                    full.push(item);
                    if ($.inArray(item, FullContractroleUser) > -1) {
                        FullContractroleUser = jQuery.grep(FullContractroleUser, function (value) {
                            return value != item;
                        });
                    }
                }
            });
            formData.append(IDddl, vallt);
        });
        var arrFull = $.map(contractItem.FullControlPermissions.split(";"), $.trim);
        var arrReadWrite = $.map(contractItem.ReadWritePermissions.split(";"), $.trim);
        var arrRead = $.map(contractItem.ReadOnlyPermissions.split(";"), $.trim);

        //Sridhar
        //New users
        if (contractmanagers != "" && contractmanagers != null && typeof (contractmanagers) != "undefined")
            var newOwners = contractmanagers.filter(function (obj) { return arrFull.indexOf(obj) == -1; });
        if (approvers != "" && approvers != null && typeof (approvers) != "undefined")
            var newApprovers = approvers.filter(function (obj) { return arrReadWrite.indexOf(obj) == -1; });
        if (reviewers != "" && reviewers != null && typeof (reviewers) != "undefined")
            var newReviewers = reviewers.filter(function (obj) { return arrReadWrite.indexOf(obj) == -1; });
        if (signees != "" && signees != null && typeof (signees) != "undefined")
            var newSignees = signees.filter(function (obj) { return arrReadWrite.indexOf(obj) == -1; });

        $(FullContractroleUser).each(function () {
            var username = this.toString().trim();
            arrFull = jQuery.grep(arrFull, function (value) {
                return value != username;
            });
        });
        $(ReadWriteContractroleUser).each(function () {
            var username = this.toString().trim();
            arrReadWrite = jQuery.grep(arrReadWrite, function (value) {
                return value != username;
            });
        });
        $(ReadContractroleUser).each(function () {
            var username = this.toString().trim();
            arrRead = jQuery.grep(arrRead, function (value) {
                return value != username;
            });
        });


        contractItem.FullControlPermissions = arrFull.join('; ') + (newOwners != "" && newOwners != null ? "; " + newOwners.join('; ') : "");
        contractItem.ReadWritePermissions = arrReadWrite.join('; ') + (newApprovers != "" && newApprovers != null ? "; " + newApprovers.join('; ') : "")
        + (newReviewers != "" && newReviewers != null ? "; " + newReviewers.join('; ') : "")
        + (newSignees != "" && newSignees != null ? "; " + newSignees.join('; ') : "");
        contractItem.ReadOnlyPermissions = arrRead.join('; ');
        $(full).each(function () {
            var username = this.toString();
            if ($.inArray(username, $.map(contractItem.FullControlPermissions.split(";"), $.trim)) == -1) {
                contractItem.FullControlPermissions = contractItem.FullControlPermissions != "" ? contractItem.FullControlPermissions + "; " + username : username;
            }
            if ($.inArray(username, writeRead) > -1) {
                writeRead = jQuery.grep(writeRead, function (value) {
                    return value != username;
                });
            }
            if ($.inArray(username, read) > -1) {
                read = jQuery.grep(read, function (value) {
                    return value != username;
                });
            }
            if ($.inArray(username, UniqueUsers) == -1)
                UniqueUsers.push(username);
        });
        $(writeRead).each(function () {
            var username = this.toString();
            if ($.inArray(username, $.map(contractItem.ReadWritePermissions.split(";"), $.trim)) == -1) {
                contractItem.ReadWritePermissions = contractItem.ReadWritePermissions != "" ? contractItem.ReadWritePermissions + "; " + username : username;
            }

            if ($.inArray(username, read) > -1) {
                read = jQuery.grep(read, function (value) {
                    return value != username;
                });
            }
            if ($.inArray(username, UniqueUsers) == -1)
                UniqueUsers.push(username);
        });
        $(read).each(function () {
            var username = this.toString();
            if ($.inArray(username, $.map(contractItem.ReadOnlyPermissions.split(";"), $.trim)) == -1) {
                contractItem.ReadOnlyPermissions = contractItem.ReadOnlyPermissions ? contractItem.ReadOnlyPermissions + "; " + username : username;
            }
            if ($.inArray(username, UniqueUsers) == -1)
                UniqueUsers.push(username);

        });
        var uniUser = '';
        $(UniqueUsers).each(function (i, item) {
            if (uniUser == '') {
                uniUser = item;
            }
            else {
                uniUser += "; " + item;
            }
        });
        formData.append("ContractRoleUsers", uniUser);
        formData.append("ReadOnlyPermissions", contractItem.ReadOnlyPermissions);
        formData.append("ReadWritePermissions", contractItem.ReadWritePermissions);
        formData.append("FullControlPermissions", contractItem.FullControlPermissions);
        $.ajax({
            // url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/people',
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/ipeopleupdate',
            type: 'PUT',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            success: function (item) {
                BindContractPeopleMetadata(item);
                BindContractRolesMetadata();
                contractItem = item;

                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#loadingPage").fadeOut();
                $("#addEditPeople").dialog("close");

                //Binding Missing Information
                pendingStarted = false;
                $("#tblContractSettingMetadata").empty();
                GetContractPendingAction(true, "BindPeoples");
            },
            error: function () {
                $("#loadingPage").fadeOut();
            }
        });
    }
    else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
        $("#loadingPage").fadeOut();
    }
    return isformvalid;

}


function chkpermissionvalue() {

    if ($("#chkpermission").is(':checked')) {

        $('#newPopup').empty();
        arrPermsnUser = [];
        GetValueAndPopulateManagerNew(contractItem, null);
        $("#txtAddUser").empty();
        //GetUsers();

        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users',
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (data) {
                var arrUsers = [];
                var v = $(data).length;
                var datalenght = data.length;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    var sRowKey = item.RowKey;
                    var sUserName = item.UserName;
                    var sUserType = item.UserType;
                    var sEmail = item.EmailID;
                    if (sUserType.indexOf("Global Contract Owner") >= 0) {
                        // arrGlobalUser.push(sUserName);
                    } else {
                        arrUsers.push(sUserName);
                    }
                }
                arrUsers = arrUsers.filter(function (x) { return arrPermsnUser.indexOf(x) < 0 })
                var datalenght = arrUsers.length;
                for (var i = 0; i < datalenght; i++) {
                    var sUserName = arrUsers[i];
                    var article = '<option value="' + sUserName + '">' + sUserName + '</option>';
                    $("#txtAddUser").append(article);

                }
                $("#txtAddUser").chosen();
                $('#txtAddUser').trigger('chosen:updated');
            },
            error:
               function (data) {
               }
        });

        $("#chkPublicContract").attr("disabled", "disabled");
        $("#chkPublicContract").prop('checked', false);
        $("#divBottom").show();

    } else {
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/defaultpermission?contractid=' + vContractID,
            type: 'GET',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
            cache: false,
            success: function (item) {
                $('#newPopup').empty();
                GetValueAndPopulateManagerNew(contractItem, item);

                var vLastRow = $("#newPopup li").length;
                var totalPermissionCount = "1";
                if (typeof vLastRow == "undefined") {
                    totalPermissionCount = "1";
                }
                else {
                    totalPermissionCount = parseInt(vLastRow);
                }
                for (i = 1; i <= totalPermissionCount; i++) {
                    $("#PermissionOption" + i).prop('disabled', true);
                    $("#" + i).hide();
                }
                $("#divBottom").hide();

                $("#chkPublicContract").removeAttr("disabled");
                if (item.IsPublic == "Yes")
                    $("#chkPublicContract").prop('checked', true);
                else
                    $("#chkPublicContract").prop('checked', false);

                $("#loadingPage").fadeOut();
            },
            error: function (request) {
                $("#ddlFullControl").prop('disabled', true).trigger("chosen:updated");
                $("#ddlReadWrite").prop('disabled', true).trigger("chosen:updated");
                $("#ddlReadOnly").prop('disabled', true).trigger("chosen:updated");
                $("#loadingPage").fadeOut();
            }

        });
    }

}

function savePermission() {
    $('.ui-button-green-text').parent().attr('disabled', 'disabled');
    var isformvalid = false;
    $("#loadingPage").fadeIn();
    var ReadOnlyUsers = "";
    var ReadWriteUser = "";
    var FullControlUsers = "";
    var status = "";
    var newArray = [];

    ///new pop up///

    //manoj;
    var vLastRow = $("#newPopup li");
    //manoj
    //var vLastRow = $("#newPopup li").length;
    //var totalPermissionCount = "1";
    //if (typeof vLastRow == "undefined") {
    // totalPermissionCount = "1";
    //}
    //else {
    // totalPermissionCount = parseInt(vLastRow.length);
    // }

    //manoj
    $(vLastRow).each(function (idel, itemval) {
        if (typeof itemval.id != "undefined") {
            var i = parseInt(itemval.id.replace("PermissionList", ""));
            var drptext = $("#PermissionOption" + i).find('option:selected').text();
            var strRole = $("#UserRole" + i).html();
            var item = $("#PermissionUser" + i).html();
            if (item != null && item != "") {
                if (item != null && item != "") {
                    newArray.push(item);
                }
                if (drptext == "Full Control") {
                    if (FullControlUsers == "") {
                        FullControlUsers = item;
                    }
                    else {
                        FullControlUsers += "; " + item;
                    }
                }
                else if (drptext == "Read/Write") {
                    if (ReadWriteUser == "") {
                        ReadWriteUser = item;
                    }
                    else {
                        ReadWriteUser += "; " + item;
                    }
                }
                else if (drptext == "Read Only") {

                    if (ReadOnlyUsers == "") {
                        ReadOnlyUsers = item;
                    }
                    else {
                        ReadOnlyUsers += "; " + item;
                    }
                }

                else if ((strRole.indexOf("Approver") >= 0 || strRole.indexOf("Reviewer") >= 0 || strRole.indexOf("Contract Owner") >= 0 || strRole.indexOf("Requestor") >= 0) && (strRole != "undefined")) {
                    var strUserPermission = $("#UserPermission" + i)[0].textContent.trim();
                    if (strUserPermission == "Full Control") {
                        if (FullControlUsers == "") {
                            FullControlUsers = item;
                        }
                        else {
                            FullControlUsers += "; " + item;
                        }
                    }
                    else if (strUserPermission == "Read/Write") {
                        if (ReadWriteUser == "") {
                            ReadWriteUser = item;
                        }
                        else {
                            ReadWriteUser += "; " + item;
                        }
                    }
                    else if (strUserPermission == "Read Only") {
                        if (ReadOnlyUsers == "") {
                            ReadOnlyUsers = item;
                        }
                        else {
                            ReadOnlyUsers += "; " + item;
                        }
                    }
                }
            }
        }
    });
    //manoj

    //for (i = 1; i <= totalPermissionCount; i++) {

    //}
    status = $("#chkpermission").is(':checked') ? 'Yes' : 'No';
    var vIsPublic = $("#chkPublicContract").is(':checked') ? 'Yes' : 'No';


    var array2 = (contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees).split(';');

    var arrDiff = [];
    $.grep(array2, function (el) {

        if ($.inArray(el.trim(), newArray) == -1 && $.inArray(el.trim(), arrDiff) == -1 && el.trim() != '') arrDiff.push(el.trim());

    });
    if (arrDiff.length == 0) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/permission',
            type: 'PUT',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            data: {
                ReadOnlyPermissions: ReadOnlyUsers,
                ReadWritePermissions: ReadWriteUser,
                FullControlPermissions: FullControlUsers,
                CustomPermission: status,
                IsPublic: vIsPublic,
                ModifiedBy: localStorage.UserName
            },
            cache: false,
            success: function (person) {
                BindUpdatedContractDetails(vContractID);
                $('.ui-button-green-text').parent().removeAttr('disabled');

                $("#addEditPermission").dialog("close");

                $("#loadingPage").fadeOut();
            }
        });
    } else {

        swal("", arrDiff + " need access to this contract.");
        $("#loadingPage").fadeOut();
    }

    return isformvalid;
}

$('#txtContractValuepopup').keypress(function (e) {
    if (e.keyCode == 13)
        return false;
});

$('#txtSearchBoxContract').keypress(function (e) {
    if (e.keyCode == 13) {
        $(".ui-autocomplete").css('display', 'none');
        ViewContracts();
    }
});

function ManageContractRenewal() {
    var vRenewalChecklist = "";
    var executecontrol = true;
    if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal" && $("input:radio[name=rdWorkflow]:checked").val() == "Yes" && !requiredValidator("addNewContractRenewal")) {
        executecontrol = false;
    }
    else if (!dategreaterthanequaltoday("lblNextRenewalDate")) {

        swal("", "Next Renewal Date should be greater than today.");
        executecontrol = false;
    }
    else if (!dategreaterthanequaltoday("lblTermEndDate")) {

        swal("", "Term End Date should be greater than today.");
        executecontrol = false;
    }

    else {
        if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal" && $("input:radio[name=rdWorkflow]:checked").val() == "Yes" && $("#txtApprovalTask").val() == "") {

            swal("", "Select create approval task and enter days.");
            executecontrol = false;
        }
        if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal") {
            var data = $("#txtStandardRenewalTerm").val()
            var len = data.length;
            var c;
            for (var i = 0; i < len; i++) {
                c = data.charAt(i).charCodeAt(0);
                if (c < 48 || c > 57) {

                    swal("", "Enter number in standard renewal term.");
                    executecontrol = false;
                    break;
                }
            }

            if (len == 0) {

                swal("", "Enter number in standard renewal term.");
                executecontrol = false;
            }

            if ($("input:radio[name=rdRenewTime]:checked").val() == "RenewableFor") {
                var data1 = $("#txtRenewableFor").val()
                var len1 = data1.length;
                var c1;
                for (var i = 0; i < len1; i++) {
                    c1 = data1.charAt(i).charCodeAt(0);
                    if (c1 < 48 || c1 > 57) {

                        swal("", "Enter number in renewable for terms.");
                        executecontrol = false;
                        break;
                    }
                }
            }

            if (len1 == 0) {

                swal("", "Enter number in renewable for terms.");
                executecontrol = false;
            }
        }
    }

    if (executecontrol) {
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var ap = '';
        var IsEverGreen = "No";
        var vRenewableTerm = '';
        if ($("input:radio[name=rdRenewTime]:checked").val() == "Evergreen") {
            IsEverGreen = "Yes";
        }
        else {
            vRenewableTerm = $("#txtRenewableFor").val();
        }
        var vStandardRenewalTerm = '';
        if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal") {
            vStandardRenewalTerm = $("#txtStandardRenewalTerm").val() + ";" + $("#ddlStandardRenewalTerm").find('option:selected').val();
            if ($("input:radio[name=rdWorkflow]:checked").val() == "Yes") {

            }
        }
        var vNextRenewalDate = "";
        var vEndDate = "";

        if ($("#lblNextRenewalDate").val() != "") {
            vNextRenewalDate = $.datepicker.formatDate('mm/dd/yy', $("#lblNextRenewalDate").datepicker('getDate'));
        }
        if ($("#lblTermEndDate").val() != "") {
            vEndDate = $.datepicker.formatDate('mm/dd/yy', $("#lblTermEndDate").datepicker('getDate'));
        }
        var remainingRenewal = "0";
        if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal") {
            if ($("input:radio[name=rdRenewTime]:checked").val() == "RenewableFor") {
                remainingRenewal = $("#txtRenewableFor").val();
            }
        }
        var vRenewalNotes = "";
        var vRenewalChecklistAmendments = "";
        var vRenewalNotificationInternal = "";
        var vRenewalNotificationExternal = "";

        $("#inprocessRenewalSetting").css('display', '');
        if ($("#lblRenewSettingsID").text() == "") {
            $("#loadingPage").fadeIn();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renewalsettings',
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: {
                    ContractID: $("#hdnContractID").text(),
                    ContractTitle: $("#lblContractTitle").text(),
                    RenewalType: $("input:radio[name=rdsettings]:checked").val(),
                    StandardRenewalTerm: vStandardRenewalTerm,
                    Evergreen: IsEverGreen,
                    RenewableTerm: vRenewableTerm,
                    WorkflowApproval: $("input:radio[name=rdWorkflow]:checked").val(),
                    ApprovalTaskDays: $("#txtApprovalTask").val(),
                    CreateApprovalTask: 'Yes',
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName,
                    NextRenewalDate: vNextRenewalDate,
                    EndDate: vEndDate,
                    RenewalRemaining: remainingRenewal,
                    RenewalNotes: vRenewalNotes,
                    RenewalChecklist: vRenewalChecklist,
                    RenewalChecklistAmendments: vRenewalChecklistAmendments,
                    RenewalNotificationInternal: vRenewalNotificationInternal,
                    RenewalNotificationExternal: vRenewalNotificationExternal
                },
                cache: false,
                success: function (person) {
                    $("#loadingPage").fadeOut();
                    $('.ui-button-green-text').parent().removeAttr('disabled');

                    $("#contractRenewal").dialog("close");
                    $("#inprocessRenewalSetting").css('display', 'none');
                }
            });
        } else {
            $("#loadingPage").fadeIn();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renewalsettings',
                type: 'PUT',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: {
                    RowKey: $("#lblRenewSettingsID").text(),
                    ContractID: $("#hdnContractID").text(),
                    ContractTitle: $("#lblContractTitle").text(),
                    RenewalType: $("input:radio[name=rdsettings]:checked").val(),
                    StandardRenewalTerm: vStandardRenewalTerm,
                    Evergreen: IsEverGreen,
                    RenewableTerm: vRenewableTerm,
                    WorkflowApproval: $("input:radio[name=rdWorkflow]:checked").val(),
                    CreateApprovalTask: 'Yes',
                    ApprovalTaskDays: $("#txtApprovalTask").val(),
                    ModifiedBy: localStorage.UserName,
                    NextRenewalDate: vNextRenewalDate,
                    EndDate: vEndDate,
                    RenewalRemaining: remainingRenewal,
                    RenewalNotes: vRenewalNotes,
                    RenewalChecklist: vRenewalChecklist,
                    RenewalChecklistAmendments: vRenewalChecklistAmendments,
                    RenewalNotificationInternal: vRenewalNotificationInternal,
                    RenewalNotificationExternal: vRenewalNotificationExternal
                },
                cache: false,
                success: function (person) {
                    $("#loadingPage").fadeOut();
                    $('.ui-button-green-text').parent().removeAttr('disabled');

                    $("#contractRenewal").dialog("close");
                    $("#inprocessRenewalSetting").css('display', 'none');
                }
            });
        }

    }

}

function ManualRenewal() {
    var IsClose = 0;
    if (requiredValidator("divManualRenewal")) {
        var vRenewalChecklist = "";
        if ($("#chkRenewalModifications").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Renewal without any modifications";
            }
            else {
                vRenewalChecklist += "; Renewal without any modifications";
            }
        }
        if ($("#chkRenewalPriceAdjustments").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Renewal with Price Adjustments (minor)";
            }
            else {
                vRenewalChecklist += "; Renewal with Price Adjustments (minor)";
            }
        }
        if ($("#chkRenewalRepricing").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Renewal with Repricing (major)";
            }
            else {
                vRenewalChecklist += "; Renewal with Repricing (major)";
            }
        }
        if ($("#chkRenewalOther").is(':checked')) {
            if (vRenewalChecklist == '') {
                vRenewalChecklist = "Other Amendments";
            }
            else {
                vRenewalChecklist += "; Other Amendments";
            }
        }
        if (vRenewalChecklist == "") {

            swal("", "Select Renewal Checklist.");
        }
        else if (!dategreaterthanequaltoday("txtNewEndDate")) {

            swal("", "Renew Till Date should be greater than today.");
        }
        else if (!dategreaterthanequaltoday("txtNextRenewalDate")) {

            swal("", "Next Renewal Date should be greater than today.");
        }
        else if (!comparedates("hdnStartDate", "txtNextRenewalDate")) {

            swal("", "'Updated End (Renewed) Date' and 'Next Renewal Date' should be greater than Start Date");
        }
        else {
            $("#loadingPage").fadeIn();
            var vNextRenewalDate = '';
            var vEndDate = '';

            if ($("#txtNextRenewalDate").val() != "") {
                fNextRenewalDate = $.datepicker.formatDate('mm/dd/yy', $("#txtNextRenewalDate").datepicker('getDate'));
                vNextRenewalDate = fNextRenewalDate;
            }
            if ($("#txtNewEndDate").val() != "") {
                fNewEndDate = $.datepicker.formatDate('mm/dd/yy', $("#txtNewEndDate").datepicker('getDate'));
                vEndDate = fNewEndDate;
            }
            var vRenewalNotes = "";
            var vRenewalChecklistAmendments = "";
            var vRenewalNotificationInternal = "";
            var vRenewalNotificationExternal = "";
            vRenewalNotes = $("#txtRenewalNotes").val();
            vRenewalChecklistAmendments = "";
            var RenewalNotfInternal = $("#ddlRenewalNotfInternal").val();
            $(RenewalNotfInternal).each(function (i, item) {
                if (vRenewalNotificationInternal == '') {
                    vRenewalNotificationInternal = item;
                }
                else {
                    vRenewalNotificationInternal += "; " + item;
                }
            });
            vRenewalNotificationExternal = $("#txtRenewalNotfCounterparty").val();

            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renewnow',
                type: 'POST',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: {
                    ContractID: $("#hdnContractID").text(),
                    ModifiedBy: localStorage.UserName,
                    NextRenewalDate: vNextRenewalDate,
                    EndDate: vEndDate,
                    RenewalNotes: vRenewalNotes,
                    RenewalChecklist: vRenewalChecklist,
                    RenewalChecklistAmendments: vRenewalChecklistAmendments,
                    RenewalNotificationInternal: vRenewalNotificationInternal,
                    RenewalNotificationExternal: vRenewalNotificationExternal
                },
                cache: false,
                success: function (data) {
                    if (data != null)
                        contractItem = data;
                    BindContractTermDetail(contractItem);
                    //*Harshitha contract System milestone
                    BindSystemMilestones(contractItem);
                    $("#manualRenewal").dialog("close");
                    $("#loadingPage").fadeOut();

                    swal("", "Contract Renewed");
                    if (contractItem.TermEndDate != null) {
                        var fTermEndDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fTermEndDate = moment(new Date(contractItem.TermEndDate)).format('MM/DD/YYYY'); }
                        else { fTermEndDate = moment(new Date(contractItem.TermEndDate)).format(localStorage.AppDateFormat); }
                        $("#txtContractTermEnds").val(fTermEndDate);
                    }
                    if (contractItem.RenewalDate != null) {
                        var fRenewalDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fRenewalDate = moment(new Date(contractItem.RenewalDate)).format('MM/DD/YYYY'); }
                        else { fRenewalDate = moment(new Date(contractItem.RenewalDate)).format(localStorage.AppDateFormat); }
                        $("#txtContractTermRenewOn").val(fRenewalDate);
                    }
                    if (contractItem.AutoExpireOn != null) {
                        var fAutoExpireOn = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fAutoExpireOn = moment(new Date(contractItem.AutoExpireOn)).format('MM/DD/YYYY'); }
                        else { fAutoExpireOn = moment(new Date(contractItem.AutoExpireOn)).format(localStorage.AppDateFormat); }
                        $("#txtContractTermExpireOn").val(fAutoExpireOn);
                    }

                    $("#chkRenewalModifications").prop('checked', false);
                    $("#chkRenewalPriceAdjustments").prop('checked', false);
                    $("#chkRenewalRepricing").prop('checked', false);
                    $("#chkRenewalOther").prop('checked', false);
                    $("#txtNewEndDate").val("");
                    $("#txtNextRenewalDate").val("");
                    $("#txtRenewalNotes").val("");
                    $("#txtRenewalNotfCounterparty").val("");
                    GetValuesAndAutoPopulate("ddlRenewalNotfInternal", "");

                    contractItem.Status = "Renewed";
                    ContractTopActions();
                },
                error: function (data) {
                    $("#loadingPage").fadeOut();
                }
            });
        }
    }
}

function updaterenewaldatesfromsettings() {
    var fNextRenewalDate = '';
    if ($("#txtNextRenewalDate").val() != "" && $("#txtNextRenewalDate").val() != null) {
        fNextRenewalDate = $.datepicker.formatDate('mm/dd/yy', $("#txtNextRenewalDate").datepicker('getDate'));
    }
    var fNewEndDate = '';
    if ($("#txtNewEndDate").val() != "" && $("#txtNewEndDate").val() != null) {
        fNewEndDate = $.datepicker.formatDate('mm/dd/yy', $("#txtNewEndDate").datepicker('getDate'));
    }
    var remainingRenewal = "";
    var nextRenewDate = "";
    if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal") {
        if ($("input:radio[name=rdRenewTime]:checked").val() == "RenewableFor") {
            remainingRenewal = $("#txtRenewableFor").val();
        }
    }

    if ($("input:radio[name=rdWorkflow]:checked").val() == "No") {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renew?standardterm=' + $("#txtStandardRenewalTerm").val() + ";" + $("#ddlStandardRenewalTerm").find('option:selected').val(),
            type: 'PUT',
            dataType: 'json',
            data: {
                IsRenewed: "Yes",
                Renewable: "Yes",
                Status: "Renewed",
                RenewalRemaining: remainingRenewal,
                EndDate: fNewEndDate,
                TermEndDate: fNewEndDate,
                RenewalDate: fNextRenewalDate,
                RenewedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName
            },
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            cache: false,
            success: function (result) {
                $("#hdnIsRenewable").text("Yes");
                $("#menu34").empty();
                contractItem.Status = "Renewed";
                ContractTopActions();
                BindStatus();
            }
        });

    } else {
        var stanterm = "";

        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renew?standardterm=' + stanterm,
            type: 'PUT',
            dataType: 'json',
            data: {

                RenewalRemaining: remainingRenewal,
                EndDate: fNewEndDate,
                RenewalDate: fNextRenewalDate,
                RenewedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName
            },
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            cache: false,
            success: function (result) {

                $("#menu34").empty();
                BindStatus();
            }
        });
    }

}

function RenewSettingRadiobutton(RadioSelection) {
    switch (RadioSelection) {
        case "Non-Renewable":
            $("#lblNextRenewalDate").prop("disabled", true);
            $("#lblTermEndDate").prop("disabled", true);
            $("#txtStandardRenewalTerm").prop("disabled", true);
            $("#ddlStandardRenewalTerm").prop("disabled", true);
            $("input:radio[name=rdRenewTime]").prop("disabled", true);
            $("#txtRenewableFor").prop("disabled", true);

            $("#txtStandardRenewalTerm").val("");
            $("#txtRenewableFor").val("");
            $("#liAutoRenew1").css('display', 'none');
            $("#liAutoRenew2").css('display', 'none');
            $("input:radio[name=rdWorkflow][value='No']").attr('checked', 'checked');
            approvaltaskno();
            $("#trRenwalHistory").css('display', 'none');
            $("#trRenwalWorkflow").css('display', 'none');

            $("#btnRenewNow").css('display', 'none');

            break;
        case "Manual Renewal":
            $("#lblNextRenewalDate").prop("disabled", false);
            $("#lblTermEndDate").prop("disabled", false);

            $("#lblNextRenewalDate").prop("disabled", false);
            $("#lblTermEndDate").prop("disabled", false);
            $("#txtStandardRenewalTerm").prop("disabled", true);
            $("#ddlStandardRenewalTerm").prop("disabled", true);
            $("input:radio[name=rdRenewTime]").prop("disabled", true);
            $("#txtRenewableFor").prop("disabled", true);

            $("#txtStandardRenewalTerm").val("");
            $("#txtRenewableFor").val("");
            $("#liAutoRenew1").css('display', 'none');
            $("#liAutoRenew2").css('display', 'none');
            $("#trRenwalHistory").css('display', '');
            $("#trRenwalWorkflow").css('display', 'none');

            $("#btnRenewNow").css('display', '');
            break;
        case "Auto Renewal":
            $("#lblNextRenewalDate").prop("disabled", false);
            $("#lblTermEndDate").prop("disabled", false);

            $("#lblNextRenewalDate").prop("disabled", false);
            $("#lblTermEndDate").prop("disabled", false);
            $("#txtStandardRenewalTerm").prop("disabled", false);
            $("#ddlStandardRenewalTerm").prop("disabled", false);
            $("input:radio[name=rdRenewTime]").prop("disabled", false);
            $("#txtRenewableFor").prop("disabled", false);

            $("#liAutoRenew1").css('display', '');
            $("#liAutoRenew2").css('display', '');
            $("#trRenwalHistory").css('display', '');
            $("#trRenwalWorkflow").css('display', '');

            $("#btnRenewNow").css('display', 'none');
            break;
    }
}

$("#btnRenewNow").click(function () {
    if ($("input:radio[name=rdsettings]:checked").val() == "Manual Renewal") {
        $("#chkRenewalModifications").prop('checked', false);
        $("#chkRenewalPriceAdjustments").prop('checked', false);
        $("#chkRenewalRepricing").prop('checked', false);
        $("#chkRenewalOther").prop('checked', false);
        $("#txtNewEndDate").val("");
        $("#txtNextRenewalDate").val("");
        $("#txtRenewalNotes").val("");
        $("#txtRenewalNotfCounterparty").val("");
        GetValuesAndAutoPopulate("ddlRenewalNotfInternal", "");
        $("#manualRenewal").dialog("open");

    } else {
        swal("", "Select manual renewable.");
    }
});

function OpenWorkflowRenew() {
    $("#loadingPage").fadeIn();
    GetRenewalApprovalSettings();

}

function SaveWorkflowRenew() {
    var IsClose = 0;
    if (requiredValidator("dvWorkflowRenew", false)) {
        $("#loadingPage").fadeIn();
        var ap = '<WorkflowPaticipants>';
        $('#tblStageRenew tr').each(function (i, row) {
            var vRow = $(row).attr('id');
            var vRowIndex = vRow.replace("trStageRenew", "");
            var stage = $("#txtStageRenew" + vRowIndex).val();
            var order = $("#ddlOrderRenew" + vRowIndex).find('option:selected').text();
            var sendTo = '';
            $('#ddlAssignToRenew' + vRowIndex + '_chosen').find('.chosen-choices li').find('span').each(function () {
                if (sendTo == '') {
                    sendTo = $(this).text();
                }
                else {
                    sendTo += "; " + $(this).text();
                }
            });
            ap += "<WorkflowPaticipant><StageTitle>" + stage + "</StageTitle>" + "<Participants>" + sendTo + "</Participants>" +
                "<Order>" + order + "</Order><StageID>" + (i + 1) + "</StageID></WorkflowPaticipant>";
        });
        ap += '</WorkflowPaticipants>';
        var vApprovers = $('<div/>').text(ap).html();

        var ccsArr = $("#ddlWorkflowCCRenew").val();
        var ccs = '';
        $(ccsArr).each(function (i, item) {
            if (ccs == '') {
                ccs = item;
            }
            else {
                ccs += "; " + item;
            }
        });

        var IsEverGreen = "No";
        var vRenewableTerm = '';
        var vStandardRenewalTerm = '';
        var vNextRenewalDate = "";
        var vEndDate = "";
        var remainingRenewal = "0";
        if ($("input:radio[name=rdRenewTime]:checked").val() == "Evergreen") {
            IsEverGreen = "Yes";
        }
        else {
            vRenewableTerm = $("#txtRenewableFor").val();
        }
        if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal") {
            vStandardRenewalTerm = $("#txtStandardRenewalTerm").val() + ";" + $("#ddlStandardRenewalTerm").find('option:selected').val();
        }
        if ($("#lblNextRenewalDate").val() != "") {
            vNextRenewalDate = $.datepicker.formatDate('mm/dd/yy', $("#lblNextRenewalDate").datepicker('getDate'));
        }
        if ($("#lblTermEndDate").val() != "") {
            vEndDate = $.datepicker.formatDate('mm/dd/yy', $("#lblTermEndDate").datepicker('getDate'));
        }
        if ($("input:radio[name=rdsettings]:checked").val() == "Auto Renewal") {
            if ($("input:radio[name=rdRenewTime]:checked").val() == "RenewableFor") {
                remainingRenewal = $("#txtRenewableFor").val();
            }
        }
        var nicInstance = nicEditors.findEditor('txtCommentRenew');
        var vcommentText = CleanWordFormatFromHTML(nicInstance.getContent());
        if (vcommentText.length <= 26500) {
            vcommentText = $('<div/>').text(vcommentText).html();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renewalsettingsworkflow',
                type: 'POST',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: {
                    RowKey: $("#lblRenewSettingsID").text(),
                    ContractID: $("#hdnContractID").text(),
                    ContractTitle: $("#lblContractTitle").text(),
                    RenewalType: $("input:radio[name=rdsettings]:checked").val(),
                    StandardRenewalTerm: vStandardRenewalTerm,
                    Evergreen: IsEverGreen,
                    RenewableTerm: vRenewableTerm,
                    WorkflowApproval: 'Yes',
                    CreateApprovalTask: 'Yes',
                    ApprovalTaskDays: $("#txtApprovalTask").val(),
                    Approvers: vApprovers,
                    NotesForApprovers: vcommentText,
                    RuleID: $("#ddlRuleRenew").val(),
                    WorkflowTitle: $("#txtWorkflowTitleRenew").val(),
                    Duration: $("#txtDurationRenew").val(),
                    CC: ccs,
                    ModifiedBy: localStorage.UserName,
                    NextRenewalDate: vNextRenewalDate,
                    EndDate: vEndDate,
                    RenewalRemaining: remainingRenewal,
                    RenewalNotes: "",
                    RenewalChecklist: "",
                    RenewalChecklistAmendments: "",
                    RenewalNotificationInternal: "",
                    RenewalNotificationExternal: ""
                },
                cache: false,
                success: function (config) {
                    $("#lblRenewSettingsID").text(config.RowKey);
                    $("#loadingPage").fadeOut();
                    $("#dvWorkflowRenew").dialog("close");
                },
                error: function (config) {
                    var vv = "";
                }
            });
        }
        else {
            $("#loadingPage").fadeOut();
            swal("", "Note can not exceed 26500 characters");
        }

    }
}


function AddStageRenew() {
    var vLastRow = $("#tblStageRenew tr:last").attr('id');

    var totalFileCount = "1";
    if (typeof vLastRow == "undefined") {
        totalFileCount = "1";
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trStageRenew", ""));
        totalFileCount += 1;
    }
    var htmlFormatFile = '<tr id="trStageRenew' + totalFileCount + '">';
    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
    htmlFormatFile += '<input id="txtStageRenew' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width46 start_workflow">';
    htmlFormatFile += '<select id="ddlAssignToRenew' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 validmultiselect"></select>';
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
    htmlFormatFile += '<select id="ddlOrderRenew' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStageRenew(this)" />';
    htmlFormatFile += '</td>';
    htmlFormatFile += '</tr>';

    $("#tblStageRenew").append(htmlFormatFile);
    var $options = $("#ddlApprovers > option").clone();
    $('#ddlAssignToRenew' + totalFileCount).append($options);

    $("#ddlAssignToRenew" + totalFileCount).chosen().change(function () {
        var vasstoid = $(this).attr('id').replace("ddlAssignToRenew", "");
        if ($(this).val() != null) {
            if ($(this).val().length > 1)
                $("#ddlOrderRenew" + vasstoid).prop('disabled', false);
            else
                $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
        }
        else
            $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
    });
}

function DeleteStageRenew(n) {
    var vv = $(n.parentNode.parentNode).find('select');
    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
}

$("#ddlRuleRenew").change(function (obj) {
    BindRenewRuleApprovers();
});

var vRuleIDRenew = "";
var vWorkflowRulesRenew = [];
function BindRenewRuleApprovers() {
    var ruleName = $("#ddlRuleRenew option:selected").text();
    var vFilterRule = $.grep(vWorkflowRulesRenew, function (n, i) {
        return (n.RuleName == ruleName);
    });
    if (vFilterRule.length > 0) {
        $("#tblStageRenew").empty();
        var workflowRules = vFilterRule[0];
        var participantsInXML = workflowRules.ParticipantsInXML;
        var totalFileCount = 0;
        if (workflowRules.ParticipantsInXML != "") {
            $(participantsInXML).find('WorkflowPaticipant').each(function () {
                var StageTitle = $(this).find('StageTitle').text();
                var Participants = $(this).find('Participants').text();
                var Order = $(this).find('Order').text();
                totalFileCount++;
                var htmlFormatFile = '<tr id="trStageRenew' + totalFileCount + '">';
                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                htmlFormatFile += '<input id="txtStageRenew' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width46 start_workflow">';
                htmlFormatFile += '<select id="ddlAssignToRenew' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 validmultiselect"></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                htmlFormatFile += '<select id="ddlOrderRenew' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97">';
                if (Order == "Serial")
                    htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                else
                    htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';

                htmlFormatFile += '</td>';
                htmlFormatFile += '</tr>';

                $("#tblStageRenew").append(htmlFormatFile);
                var $options = $("#ddlApprovers > option").clone();
                $('#ddlAssignToRenew' + totalFileCount).append($options);

                $("#ddlAssignToRenew" + totalFileCount).chosen().change(function () {
                    var vasstoid = $(this).attr('id').replace("ddlAssignToRenew", "");
                    if ($(this).val() != null) {
                        if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                            workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                            $("#ddlOrderRenew" + vasstoid).prop('disabled', false);
                        else
                            $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
                    }
                    else
                        $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
                });
                GetValuesAndAutoPopulate("ddlAssignToRenew" + totalFileCount, Participants);
                var vParticipantsArr = Participants.split(";");
                if (vParticipantsArr.length > 1)
                    $("#ddlOrderRenew" + totalFileCount).prop('disabled', false);
                else
                    $("#ddlOrderRenew" + totalFileCount).prop('disabled', true);

                if (ruleName == "Ad-hoc") {
                    $("#txtStageRenew" + totalFileCount).prop('disabled', false);
                    $("#ddlAssignToRenew" + totalFileCount).prop('disabled', false).trigger("chosen:updated");

                    $("#spAddStageRenew").css("display", "");
                } else {
                    $("#txtStageRenew" + totalFileCount).prop('disabled', true);
                    $("#ddlAssignToRenew" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                    $("#ddlOrderRenew" + totalFileCount).prop('disabled', true);
                    $("#spAddStageRenew").css("display", "none");
                }
            });
        }
        else {
            var totalFileCount = 1;
            var htmlFormatFile = '<tr id="trStageRenew' + totalFileCount + '">';
            htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
            htmlFormatFile += '<input id="txtStageRenew' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width97 validelement" value="Stage ' + totalFileCount + '"/>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width46 start_workflow">';
            htmlFormatFile += '<select id="ddlAssignToRenew' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 validmultiselect"></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
            htmlFormatFile += '<select id="ddlOrderRenew' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
            htmlFormatFile += '</td>';
            htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
            htmlFormatFile += '</td>';
            htmlFormatFile += '</tr>';

            $("#tblStageRenew").append(htmlFormatFile);
            var $options = $("#ddlApprovers > option").clone();
            $('#ddlAssignToRenew' + totalFileCount).append($options);
            $("#ddlAssignToRenew" + totalFileCount).chosen().change(function () {
                var vasstoid = $(this).attr('id').replace("ddlAssignToRenew", "");
                if ($(this).val() != null) {
                    if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                        workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                        $("#ddlOrderRenew" + vasstoid).prop('disabled', false);
                    else
                        $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
                }
                else
                    $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
            });
            $("#txtStageRenew" + totalFileCount).prop('disabled', false);
            $("#ddlAssignToRenew" + totalFileCount).prop('disabled', false).trigger("chosen:updated");

            $("#spAddStageRenew").css("display", "");
        }
    } else {
        var totalFileCount = 1;
        var htmlFormatFile = '<tr id="trStageRenew' + totalFileCount + '">';
        htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
        htmlFormatFile += '<input id="txtStageRenew' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width97 validelement" value="Stage ' + totalFileCount + '"/>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width46 start_workflow">';
        htmlFormatFile += '<select id="ddlAssignToRenew' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 validmultiselect"></select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
        htmlFormatFile += '<select id="ddlOrderRenew' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
        htmlFormatFile += '</td>';
        htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
        htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
        htmlFormatFile += '</td>';
        htmlFormatFile += '</tr>';

        $("#tblStageRenew").append(htmlFormatFile);
        var $options = $("#ddlApprovers > option").clone();
        $('#ddlAssignToRenew' + totalFileCount).append($options);
        $("#ddlAssignToRenew" + totalFileCount).chosen().change(function () {
            var vasstoid = $(this).attr('id').replace("ddlAssignToRenew", "");
            if ($(this).val() != null) {
                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                    $("#ddlOrderRenew" + vasstoid).prop('disabled', false);
                else
                    $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
            }
            else
                $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
        });
        $("#txtStageRenew" + totalFileCount).prop('disabled', false);
        $("#ddlAssignToRenew" + totalFileCount).prop('disabled', false).trigger("chosen:updated");

        $("#spAddStageRenew").css("display", "");
    }
    $("#loadingPage").fadeOut();
}

//script for default  properties start
function updatedefaultproperties() {
    if (requiredValidator('popupDefaultProperties', false)) {
        var amendablevaluetopass = $("#aNavContracts").hasClass("actNav") ? "Yes" : "No";
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName('ContractID') + '/defaultproperties',
            type: 'PUT',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            data: {
                RowKey: getParameterByName('ContractID'),
                ContractType: $("#ddlDPContractTypes").find('option:selected').val(),
                TransactionType: $("#ddlDPTransactionType").find('option:selected').val(),
                ContractClass: $("#ddlDPContractClass").find('option:selected').val(),
                Extendable: ($("#chkDPExtendable").is(':checked') ? 'Yes' : 'No'),
                NeedApprovalForExtension: ($("#chkDPExtensionApproval").is(':checked') ? 'Yes' : 'No'),
                Renewable: ($("#chkDPRenewable").is(':checked') ? 'Yes' : 'No'),
                NeedApprovalForRenewal: ($("#chkDPRenewalApproval").is(':checked') ? 'Yes' : 'No'),
                Amendable: amendablevaluetopass,
                NeedApprovalForAmendment: 'Yes',
                ModifiedBy: localStorage.User,
            },
            cache: false,
            success: function (result) {
                $("#loadingPage").fadeOut();
                contractItem.ContractType = $("#ddlDPContractTypes").find('option:selected').val();
                contractItem.TransactionType = $("#ddlDPTransactionType").find('option:selected').val();
                contractItem.ContractClass = $("#ddlDPContractClass").find('option:selected').val();
                contractItem.Renewable = $("#chkDPRenewable").is(':checked') ? 'Yes' : 'No';
                contractItem.Extendable = ($("#chkDPExtendable").is(':checked') ? 'Yes' : 'No');
                contractItem.NeedApprovalForRenewal = ($("#chkDPRenewalApproval").is(':checked') ? 'Yes' : 'No');
                contractItem.NeedApprovalForExtension = ($("#chkDPExtensionApproval").is(':checked') ? 'Yes' : 'No');
                contractItem.Amendable = amendablevaluetopass;
                contractItem.NeedApprovalForAmendment = ($("#chkDPAmendmentApproval").is(':checked') ? 'Yes' : 'No');
                if (amendablevaluetopass == "Yes") { BindAmendments(vContractID); $("#artAmendment").css('display', ''); }
                if ($("#chkDPRenewalApproval").is(':checked')) {
                    $("#hdnRenewApprovalRequired").text("Yes");
                } else {
                    $("#hdnRenewApprovalRequired").text("No");
                }

                $('.ui-button-green-text').parent().removeAttr('disabled');
                $("#popupDefaultProperties").dialog("close");
            }
        });
    }
}

$('#chkDPExtendable').click(function () {
    if ($("#chkDPExtendable").is(':checked')) {
        $("#chkDPExtensionApproval").removeAttr("disabled");
    }
    else {
        $("#chkDPExtensionApproval").attr("disabled", "disabled");
        $("#chkDPExtensionApproval").prop('checked', false);
    }
});

$('#chkDPRenewable').click(function () {
    if ($("#chkDPRenewable").is(':checked')) {
        $("#chkDPRenewalApproval").removeAttr("disabled");
    }
    else {
        $("#chkDPRenewalApproval").attr("disabled", "disabled");
        $("#chkDPRenewalApproval").prop('checked', false);
    }
});

$('#chkDPAmendable').click(function () {
    if ($("#chkDPAmendable").is(':checked')) {
        $("#chkDPAmendmentApproval").removeAttr("disabled");
    }
    else {
        $("#chkDPAmendmentApproval").attr("disabled", "disabled");
        $("#chkDPAmendmentApproval").prop('checked', false);
    }
});

function defaultpropertiesset() {
    if (($("#chkDPRenewable").is(':checked') ? 'Yes' : 'No') == "Yes") {
        $("#hdnIsRenewable").text("Yes");
        $("#hdnIsRenewableContract").text("Yes");

        $("#liAdminMenuRenewal").css('display', '');


    } else {
        $("#hdnIsRenewable").text("No");
        $("#hdnIsRenewableContract").text("No");
        $("#liAdminMenuRenewal").css('display', 'none');

    }

    $("#menu34").empty();
    BindStatus();

    if (($("#chkDPRenewalApproval").is(':checked') ? 'Yes' : 'No') == "Yes") {
        $("#hdnRenewApprovalRequired").text("Yes");
    }

}
//script for default properties end

function BindContractTypes() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: true,
        success: function (contracttypes) {
            $("#ddlDPContractTypes").empty();
            $(contracttypes).each(function (i, item) {
                var find = " ";
                var re = new RegExp(find, 'g');
                var str = item.ContractType + '~' + item.TransactionType + '~' + item.ContractClass + '~' + item.Description;
                if (contractItem.ContractType == item.ContractType) {
                    if (contractItem.ContractType != "") {
                        if (thisContractAreaSettings.ContractType.split(';').indexOf(item.ContractType) > -1) {
                            $("#ddlDPContractTypes").append('<option value="' + item.ContractType + '" selected>' + item.ContractType + '</option>');
                        }
                    }
                } else {
                    if (thisContractAreaSettings.ContractType.split(';').indexOf(item.ContractType) > -1) {
                        $("#ddlDPContractTypes").append('<option value="' + item.ContractType + '">' + item.ContractType + '</option>')
                    }
                }
            });
        }
    });
}


function BindStatusbyCLM(OpenPopup) {
    var CheckBindFinalizedData = parseInt($("#tdFinalized").children().length)
    var CheckBindPipelindData = parseInt($("#tdPipelind").children().length)
    if (CheckBindFinalizedData != 0 || CheckBindPipelindData != 0) {
        if (contractItem.IsFinalized == 'Yes') {
            $('#tdFinalizeContract1').css("display", "none");
            $('#tdFinalizeContract2').css("display", "none");
            $('#tdFinalizeContract3').css("display", "");
            $('#tdFinalizeContract3').html('<img src="/Content/Images/right.png" />Marked Finalized/Ready for Signature by ' + contractItem.FinalizedBy);
            $('#trPipelineStatusFull').css('display', 'none');
            $('#trPipelineStatus').css('display', 'none');
            $('input:radio[name="FinalizedStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
            $('input:radio[name="FinalizedStatus"]').prop('disabled', false);

            var imgObj = $("#imgFinalizedStatus");
            imgObj.attr("title", "Collapse");
            imgObj.attr("src", "../Content/Images/e-close.png");
            $('#trFinalizedStatus').css('display', '');
            $("#trCloseOutContract").css('display', '')
            imgObj = $("#imgPipelineStatus");
            imgObj.attr("title", "Expand");
            imgObj.attr("src", "../Content/Images/e-open.png");



        } else {

            $('#tdFinalizeContract1').css("display", "");
            $('#tdFinalizeContract2').css("display", "");
            $('#tdFinalizeContract3').css("display", "none");
            $('#tdFinalizeContract3').html('');
            $('#trFinalizedStatusFull').css('display', 'none');
            $('#trFinalizedStatus').css('display', 'none');
            $("#trCloseOutContract").css('display', 'none')
            $('input:radio[name="PipelineStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
            $('input:radio[name="PipelineStatus"]').prop('disabled', false);

            var imgObj = $("#imgFinalizedStatus");
            imgObj.attr("title", "Collapse");
            imgObj.attr("src", "../Content/Images/e-close.png");

            imgObj = $("#imgPipelineStatus");
            imgObj.attr("title", "Expand");
            imgObj.attr("src", "../Content/Images/e-open.png");
            $('#trPipelineStatus').css('display', '');
        }
        $('#dvContCancelNote').css("display", "none");
        if ($("#txtReasonOfCancelContract").hasClass("validelement"))
            $("#txtReasonOfCancelContract").removeClass('validelement');
        $("#dvManageContractStatus").dialog("open");
    }
    else {
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractstatusesbyCLM',
            type: 'GET',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            success: function (contractstatuses) {
                $("#tdPipelind").empty();
                $("#tdFinalized").empty();
                var datalength = contractstatuses.length;
                var vAutoChange = '';
                for (var i = 0; i < datalength; i++) {
                    var item = contractstatuses[i];
                    if ((item.Transition == "Manual" || contractItem.Status == item.ContractStatus) && item.Active == true) {
                        if (item.Transition != "Manual")
                            vAutoChange = 'AutoChange';
                        else
                            vAutoChange = '';

                        if (item.ContractStage == "Pipeline") {
                            var ctrl = "";
                            if (item.ContractStatus == "New") {
                                ctrl = "<input id='rdPipelineNew' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='New:" + item.Description + "' class='status_green_another'><img src='../Content/Images/status/new.png'>new</b><label for='rdPipelineNew' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Awaiting Review") {
                                ctrl = "<input id='rdPipelineAwaitReview' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Awaiting Review:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>rev</b><label for='rdPipelineAwaitReview' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Reviewed") {
                                ctrl = "<input id='rdPipelineReviewed' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Reviewed:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/renew.png'>rev</b><label for='rdPipelineReviewed' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Awaiting Approval") {
                                ctrl = "<input id='rdPipelineAwaitApproval' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Awaiting Approval:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>appr</b><label for='rdPipelineAwaitApproval' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Approved") {
                                ctrl = "<input id='rdPipelineApproved' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Approved:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/tick.png'>appr</b><label for='rdPipelineApproved' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "In Negotiation") {
                                ctrl = "<input id='rdPipelineInNegotiation' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='In Negotiation:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>nego</b><label for='rdPipelineInNegotiation' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Negotiation Complete") {
                                ctrl = "<input id='rdPipelineNegotiationComplete' type='radio' name='PipelineStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Negotiation Complete:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/tick.png'>nego</b><label for='rdPipelineNegotiationComplete' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }

                            $("#tdPipelind").append(ctrl);

                        }
                        else {
                            if (item.ContractStatus == "Active") {
                                ctrl = "<input id='rdFinalizedActive' type='radio' name='FinalizedStatus' value=" + item.ContractStatus + " class='css-checkbox " + vAutoChange + "' /><b title='Active:" + item.Description + "' class='status_green'><img src='../Content/Images/status/active.png'>actv</b><label for='rdFinalizedActive' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Ready for Signature") {
                                ctrl = "<input id='rdFinalizedReadySign' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Ready for Signature:" + item.Description + "' class='status_green'><img src='../Content/Images/status/active.png'>sign</b><label for='rdFinalizedReadySign' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Awaiting Signatures") {
                                ctrl = "<input id='rdFinalizedAwaitingSign' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Awaiting Signatures:" + item.Description + "' class='status_yellow'><img src='../Content/Images/status/renew.png'>sign</b><label for='rdFinalizedAwaitingSign' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Signed") {
                                ctrl = "<input id='rdFinalizedSigned' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Signed:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/tick.png'>sign</b><label for='rdFinalizedSigned' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Up for Renewal") {
                                ctrl = "<input id='rdFinalizedUpForRenewal' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Up for Renewal:" + item.Description + "' class='status_red'><img src='../Content/Images/status/exp.png'>renw</b><label for='rdFinalizedUpForRenewal' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "About to Expire") {
                                ctrl = "<input id='rdFinalizedAboutToExpire' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='About to Expire:" + item.Description + "' class='status_red'><img src='../Content/Images/status/exp.png'>exp</b><label for='rdFinalizedAboutToExpire' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "On Hold") {
                                ctrl = "<input id='rdFinalizedOnHold' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='On Hold:" + item.Description + "' class='status_red'><img src='../Content/Images/status/exp.png'>hold</b><label for='rdFinalizedOnHold' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Replaced") {
                                ctrl = "<input id='rdFinalizedReplaced' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Replaced:" + item.Description + "' class='status_Gray'><img src='../Content/Images/status/replace.png'>rep</b><label for='rdFinalizedReplaced' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Expired") {
                                ctrl = "<input id='rdFinalizedExpired' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Expired:" + item.Description + "' class='status_Gray'><img src='../Content/Images/status/expried.png'>exp</b><label for='rdFinalizedExpired' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Cancelled") {
                                ctrl = "<input id='rdFinalizedCancelled' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Cancelled:" + item.Description + "' class='status_Gray'><img src='../Content/Images/status/close.png'>canc</b><label for='rdFinalizedCancelled' class='css-label'>" + item.ContractStatus + "</label><br />";
                            }
                            else if (item.ContractStatus == "Archived") {
                                if ($("#spancloseout").text() != "") {
                                    if ($("#spancloseout").text().trim() != "" && $("#spancloseout").text() == "Yes") {
                                        $("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="DeleteContractRecord()"><span class="f_button_green">Delete Contract Record</span></a></div></td>');
                                        ctrl = "<div id='rtarchived'><input id='rdFinalizedArchived' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Archived:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/archive.png'>ARCH</b><label for='rdFinalizedArchived' class='css-label'>" + item.ContractStatus + "</label><br /></div>";
                                    } else {
                                        $("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="MarkContractAsCloseout();"><span class="f_button_green">Mark Contract Record for Closeout</span></a></div></td>')
                                        ctrl = "<div id='rtarchived' style='display:none;'><input id='rdFinalizedArchived' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Archived:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/archive.png'>ARCH</b><label for='rdFinalizedArchived' class='css-label'>" + item.ContractStatus + "</label><br /></div>";
                                    }
                                } else {
                                    $("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="MarkContractAsCloseout();"><span class="f_button_green">Mark Contract Record for Closeout</span></a></div></td>')
                                    ctrl = "<div id='rtarchived' style='display:none;'><input id='rdFinalizedArchived' type='radio' name='FinalizedStatus' value='" + item.ContractStatus + "' class='css-checkbox " + vAutoChange + "' /><b title='Archived:" + item.Description + "' class='status_blue'><img src='../Content/Images/status/archive.png'>ARCH</b><label for='rdFinalizedArchived' class='css-label'>" + item.ContractStatus + "</label><br /></div>";
                                }
                            }
                            $("#tdFinalized").append(ctrl);
                        }
                    }
                }



                if (contractItem.IsFinalized == 'Yes') {
                    $('#tdFinalizeContract1').css("display", "none");
                    $('#tdFinalizeContract2').css("display", "none");
                    $('#tdFinalizeContract3').css("display", "");
                    $('#trPipelineStatusFull').css('display', 'none');
                    $('#trPipelineStatus').css('display', 'none');
                    $('#tdFinalizeContract3').html('<img src="/Content/Images/right.png" />Marked Finalized/Ready for Signature by ' + contractItem.FinalizedBy);
                    $('input:radio[name="FinalizedStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
                    $('input:radio[name="FinalizedStatus"]').prop('disabled', false);

                    var imgObj = $("#imgFinalizedStatus");
                    imgObj.attr("title", "Collapse");
                    imgObj.attr("src", "../Content/Images/e-close.png");
                    $('#trFinalizedStatus').css('display', '');
                    $("#trCloseOutContract").css('display', '')
                    imgObj = $("#imgPipelineStatus");
                    imgObj.attr("title", "Expand");
                    imgObj.attr("src", "../Content/Images/e-open.png");


                } else {

                    $('#tdFinalizeContract1').css("display", "");
                    $('#tdFinalizeContract2').css("display", "");
                    $('#tdFinalizeContract3').css("display", "none");
                    $('#tdFinalizeContract3').html('');
                    $('#trFinalizedStatusFull').css('display', 'none');
                    $('#trFinalizedStatus').css('display', 'none');
                    $("#trCloseOutContract").css('display', 'none')
                    $('input:radio[name="PipelineStatus"][value="' + contractItem.Status + '"]').prop('checked', true);
                    $('input:radio[name="PipelineStatus"]').prop('disabled', false);

                    var imgObj = $("#imgFinalizedStatus");
                    imgObj.attr("title", "Collapse");
                    imgObj.attr("src", "../Content/Images/e-close.png");

                    imgObj = $("#imgPipelineStatus");
                    imgObj.attr("title", "Expand");
                    imgObj.attr("src", "../Content/Images/e-open.png");
                    $('#trPipelineStatus').css('display', '');

                }
                $('.AutoChange').prop('disabled', true);

                $('#dvContCancelNote').css("display", "none");
                if ($("#txtReasonOfCancelContract").hasClass("validelement"))
                    $("#txtReasonOfCancelContract").removeClass('validelement');
                $("#loadingPage").fadeOut();
                if (OpenPopup == 'Yes')
                    $("#dvManageContractStatus").dialog("open");
            }
        });

    }
}


function BindStatus() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractstatusesbyCLM',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contractstatuses) {
            var datalenght = contractstatuses.length;
            for (var i = 0; i < datalenght; i++) {
                var item = contractstatuses[i];
                var ctrl = "";

                if ((item.ContractStatus.trim() == "Renewed" && $("#hdnIsRenewable").text() == "No") || (item.ContractStatus.trim() == "Extended" && $("#hdnIsExtendable").text() == "No") || (item.ContractStatus.trim() == "Up for Renewal" && $("#hdnIsRenewable").text() == "No"))
                { }
                else {

                    if ($("#spanstatus").text() == item.ContractStatus.trim()) {
                        ctrl = "<li id=" + item.ContractStatus.trim() + "><input id='" + item.RowKey + "' type='radio' checked onclick='javascript:statusclick(this);' name='rdstatus' value=" + encodeURI(item.ContractStatus.trim()) + " class='css-checkbox' /><label for='" + item.RowKey + "' class='css-label'>" + item.ContractStatus.trim() + "</label></li>";
                    } else {
                        ctrl = "<li id=" + item.ContractStatus.trim() + "><input id='" + item.RowKey + "' type='radio' onclick='javascript:statusclick(this);' name='rdstatus' value=" + encodeURI(item.ContractStatus.trim()) + " class='css-checkbox' /><label for='" + item.RowKey + "' class='css-label'>" + item.ContractStatus.trim() + "</label></li>";
                    }

                }

                if (item.ContractStatus.trim() == "Renewed") {
                    if ($("#hdnIsRenewable").text() != "No") {

                    }
                }
                else if (item.ContractStatus.trim() == "Extended") {
                    if ($("#hdnIsExtendable").text() != "No") {
                        ctrl += "<div class='f_list' style='padding: 0px 0px 0px 10px;display:none;' id='dvExtendCtrl'><input type='text' id='dtExtendedDate' placeholder='Extended Date' class='f_inpt width90 validdate' /></div>";
                    }
                }
                else if (item.ContractStatus.trim() == "Cancelled") {
                    ctrl += "<div class='f_list' style='padding: 0px 0px 0px 10px;display:none;' id='dvCancelCtrl'><textarea id='txtCancelledReason' placeholder='Reason for Cancellation' rows='3' class='f_text-box width90' /></div>";
                }
                $("#menu34").append(ctrl);

                if ($("#spanstatus").text() == "Renewed") {
                    $('#dvRenewCtrl').css("display", "");
                    $('#dvCancelCtrl').css("display", "none");
                }
                else if ($("#spanstatus").text() == "Cancelled") {
                    $('#dvCancelCtrl').css("display", "");
                    $('#dvRenewCtrl').css("display", "none");
                }
            }
            $("#dtRenewalDate").datepicker();
            $("#dtExtendedDate").datepicker();
        }
    });
}

function OpenRenewalForm() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
        processData: false,
        success: function (data) {
            var item = data;
            if (item.RenewalDate != null) {
                var fRenewalDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fRenewalDate = moment(new Date(item.RenewalDate)).format('MM/DD/YYYY'); }
                else { fRenewalDate = moment(new Date(item.RenewalDate)).format(localStorage.AppDateFormat); }
                $("#lblNextRenewalDate").val(fRenewalDate);
            } else {
                $("#lblNextRenewalDate").val("");
            }
            if (item.TermEndDate != null) {
                var fTermEndDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fTermEndDate = moment(new Date(item.TermEndDate)).format('MM/DD/YYYY'); }
                else { fTermEndDate = moment(new Date(item.TermEndDate)).format(localStorage.AppDateFormat); }
                $("#lblTermEndDate").val(fTermEndDate);
            } else {
                $("#lblTermEndDate").val("");
            }

            if (item.LastRenewedDate != null) {
                var fLastRenewedDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fLastRenewedDate = moment(new Date(item.LastRenewedDate)).format('MM/DD/YYYY'); }
                else { fLastRenewedDate = moment(new Date(item.LastRenewedDate)).format(localStorage.AppDateFormat); }
                $("#lblLastRenewed").text(fLastRenewedDate);
            } else {
                $("#lblLastRenewed").text("Not Available");
            }
            if (item.RenewalRemaining != null && item.RenewalRemaining != 0) {
                $("#lblRenewalRemaining").text(item.RenewalRemaining);
            } else {
                $("#lblRenewalRemaining").text("Not Available");
            }
            if (item.EndDate != null) {
                var fEndDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fEndDate = moment(new Date(item.EndDate)).format('MM/DD/YYYY'); }
                else { fEndDate = moment(new Date(item.EndDate)).format(localStorage.AppDateFormat); }
                $("#lblContractEndDate").text(fEndDate);
            } else {
                $("#lblContractEndDate").text("Not Available");
            }
        }

    });
    //Getting Renewal Settings
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renewalsettings',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#lblRenewSettingsID").text(data.RowKey);
            $("input:radio[name=rdsettings][value='" + data.RenewalType + "']").attr('checked', 'checked');
            RenewSettingRadiobutton(data.RenewalType);
            if (data.StandardRenewalTerm != null) {
                var term = data.StandardRenewalTerm.split(';');

                $("#txtStandardRenewalTerm").val(term[0]);
                $("#ddlStandardRenewalTerm option").filter(function (index) { return $(this).val() === term[1]; }).prop('selected', true);
            }
            $("#txtRenewableFor").val(data.RenewableTerm);

            if (data.Evergreen != null && data.Evergreen == "Yes") {
                $("input:radio[name=rdRenewTime][value='Evergreen']").attr('checked', 'checked');
                $("#txtRenewableFor").attr('readonly', 'readonly');
                $("#txtRenewableFor").val("");
            } else {
                $("input:radio[name=rdRenewTime][value='RenewableFor']").attr('checked', 'checked');
            }


            $("input:radio[name=rdWorkflow][value='" + data.WorkflowApproval + "']").attr('checked', 'checked');
            if (data.WorkflowApproval == "Yes") {
                approvaltaskyes();
            }
            else {
                $("input:radio[name=rdWorkflow][value='No']").attr('checked', 'checked');
                approvaltaskno();
            }
            $("#txtApprovalTask").val(data.ApprovalTaskDays);


        },
        error:
            function (data) {
                if ($("#hdnIsRenewable").text() == "No") {
                    $("#settingNonRenewable").prop("checked", true);

                    RenewSettingRadiobutton("Non-Renewable");
                } else {
                    $("#settingManual").prop("checked", true);

                    RenewSettingRadiobutton("Manual Renewal");
                }


                if (contractItem.NeedApprovalForRenewal != null && contractItem.NeedApprovalForRenewal == "Yes") {
                    $("input:radio[name=rdWorkflow][value='Yes']").attr('checked', true);
                    approvaltaskyes();
                }
                else {
                    $("input:radio[name=rdWorkflow][value='No']").attr('checked', true);
                    approvaltaskno();
                }
            }
    });

    //Getting Renewal History
    GetRenewalHistory();

    $("#contractRenewal").dialog("option", "title", "Manage Contract Renewal");
    $("#contractRenewal").dialog('open');

}

function GetRenewalApprovalSettings() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/renewalsettings',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#lblRenewSettingsID").text(data.RowKey);
            EvaluateRenewalRule(data);
        },
        error:
            function (data) {
                EvaluateRenewalRule(null);
            }
    });
}

function GetWorkflowRuleDetail(RuleID) {
    var rule = RuleID.split('~');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/configuration?workflowid=' + rule[0] + '&ruleid=' + rule[1],
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: true,
        success: function (rule) {
            var participantsInXML = rule.ParticipantsInXML;
            $(participantsInXML).find('WorkflowPaticipant').each(function () {
                var StageTitle = $(this).find('StageTitle').text();
                var Participants = $(this).find('Participants').text();
                var Order = $(this).find('Order').text();
                totalFileCount++;
                var htmlFormatFile = '<tr id="trStageRenew' + totalFileCount + '">';
                htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
                htmlFormatFile += '<input id="txtStageRenew' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width97 validelement" />';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width46 start_workflow">';
                htmlFormatFile += '<select id="ddlAssignToRenew' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 validmultiselect"></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
                htmlFormatFile += '<select id="ddlOrderRenew' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97">';
                if (Order == "Serial")
                    htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                else
                    htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                htmlFormatFile += '</td>';
                htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';

                htmlFormatFile += '</td>';
                htmlFormatFile += '</tr>';

                $("#tblStageRenew").append(htmlFormatFile);
                var $options = $("#ddlApprovers > option").clone();
                $('#ddlAssignToRenew' + totalFileCount).append($options);
                $("#ddlAssignToRenew" + totalFileCount).chosen().change(function () {
                    var vasstoid = $(this).attr('id').replace("ddlAssignToRenew", "");
                    if ($(this).val() != null) {
                        if ($(this).val().length > 1)
                            $("#ddlOrderRenew" + vasstoid).prop('disabled', false);
                        else
                            $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
                    }
                    else
                        $("#ddlOrderRenew" + vasstoid).prop('disabled', true);
                });
                GetValuesAndAutoPopulate("ddlAssignToRenew" + totalFileCount, Participants);

                $("#txtStageRenew" + totalFileCount).prop('disabled', true);
                $("#ddlAssignToRenew" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                $("#ddlOrderRenew" + totalFileCount).prop('disabled', true);
            });
            $('#spAddStageRenew').css("display", "none");
        }
    });
}

function EvaluateRenewalRule(data) {
    var contractTitle = $("#lblContractTitle").text();
    var contractID = getParameterByName("ContractID");
    var businessArea = $("#lblBusinessArea").text();
    var contractArea = $("#lblContractArea").text();
    $("#tblStageRenew").empty();
    $("#ddlRuleRenew").empty();


    $("#tblStageRenew").empty();


    var vWorkflowSettings = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Renewal Approval&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + contractID,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        processData: false,
        success: function (item) {
            vWorkflowSettings = item.WorkflowSettings;
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "8" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                vWorkflowRulesRenew = item.WorkflowRules;
            }

            if (data != null) {
                vRuleIDRenew = data.RuleID;
                $("#txtDurationRenew").val(data.Duration);
                var nicInstance = nicEditors.findEditor('txtCommentRenew');
                nicInstance.setContent(data.WorkflowTitle);
                NicEditorPasteEvent();
                $("#txtWorkflowTitleRenew").val(data.WorkflowTitle);
                GetValuesAndAutoPopulate("ddlWorkflowCCRenew", data.CC);
            } else {
                vRuleIDRenew = "Ad-hoc";
                if (item.WorkflowSettings != null) {
                    $("#txtDurationRenew").val(vWorkflowSettings.TaskDuration);
                }
                var nicInstance = nicEditors.findEditor('txtCommentRenew');
                nicInstance.setContent('');
                NicEditorPasteEvent();
                $("#txtWorkflowTitleRenew").val("Renewal Approval");
                GetValuesAndAutoPopulate("ddlWorkflowCCRenew", "");
            }
            if (item.WorkflowSettings != null) {
                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
            }

            if (vWorkflowRulesRenew.length > 0) {
                $("#ddlRuleRenew").append('<option value="Ad-hoc">Ad-hoc</option>');
                $(vWorkflowRulesRenew).each(function (i, rule) {
                    $("#ddlRuleRenew").append('<option value="' + rule.WorkflowID + '~' + rule.RuleID + '">' + rule.RuleName + '</option>');
                });
                if (vWorkflowRulesRenew.length == 1) {
                    $("#ddlRuleRenew").attr('disabled', 'disabled');
                }
                else {
                    $("#ddlRuleRenew").removeAttr("disabled");
                }
            }
            else {
                $("#ddlRuleRenew").append('<option value="Ad-hoc">Ad-hoc</option>');
                $("#lblddlRuleRenew").css("display", "");
                $("#ddlRuleRenew").css("display", "none");
                $("#lblddlRuleRenew").text("Ad-hoc");
                $("#ddlRuleRenew").attr('disabled', 'disabled');
            }

            var vApprovers = "";
            if (data == null || data.RuleID == "" || data.RuleID == "Ad-hoc") {
                $("#ddlRuleRenew").val("Ad-hoc");
            }
            else
                $("#ddlRuleRenew").val(data.RuleID);
            if (data != null) {
                vApprovers = data.Approvers;
            }
            vWorkflowRulesRenew.push({
                RuleName: "Ad-hoc",
                ParticipantsInXML: vApprovers
            });
            BindRenewRuleApprovers();

            $("#dvWorkflowRenew").dialog("open");
        },
        error: function () {
            $("#ddlRuleRenew").append('<option value="Ad-hoc">Ad-hoc</option>');
            $("#lblddlRuleRenew").css("display", "");
            $("#ddlRuleRenew").css("display", "none");
            $("#lblddlRuleRenew").text("Ad-hoc");
            $("#ddlRuleRenew").attr('disabled', 'disabled');
            $("#ddlRuleRenew").attr('disabled', 'disabled');
            if (data.Approvers != "") {
                vWorkflowRulesRenew.push({
                    RuleName: "Ad-hoc",
                    ParticipantsInXML: data.Approvers
                });
            }
            $("#ddlRuleRenew").val("Ad-hoc");
            BindRenewRuleApprovers();

            $("#dvWorkflowRenew").dialog("open");
        }
    });
}

function approvaltaskyes() {
    $("#divWorkflowYes").css('display', '');
}

function approvaltaskno() {
    $("#divWorkflowYes").css('display', 'none');
}

function CreateContractActivityList(obj) {
    $("#loadingPage").fadeIn();
    var vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities/contracts/' + getParameterByName("ContractID") + '?actiontype=';
    if (obj !== undefined) {
        vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/activities/contracts/' + getParameterByName("ContractID") + '?actiontype=&objectname=' + obj;
    }
    $.ajax({
        url: vUrl,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#contractLogs").empty();
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var sObject = item.Object;
                var sActivity = item.Activity;
                var sUserID = item.UserID;
                var sTimestamp;

                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { sTimestamp = moment(new Date(item.Timestamp)).format('MM/DD/YYYY h:mm A'); }
                else { sTimestamp = moment(new Date(item.Timestamp)).format(localStorage.AppDateFormat + " h:mm A"); }

                var article = '<tr><td><span class="logHis_Datetime">' + sTimestamp + '</span></td><td><b>' + sObject + '</b></td><td><span class="logHis_Activity">' + sActivity + '</span></td><td><span class="logHis_Datetime">' + sUserID + '</span></td></tr>';
                $("#contractLogs").append(article);
            }
            $('#compact-pagination-Activity').css('display', '');
            $('#compact-pagination-Activity').pagination({
                items: data.length,
                itemsOnPage: 15,
                type: 'tbody',
                typeID: 'contractLogs',
                row: 'tr',
                cssStyle: 'compact-theme'
            });
            $("#loadingPage").fadeOut();
            $('#contractLogsPopup').dialog('open');
        },
        error: function () {
            $("#loadingPage").fadeOut();

            $("#contractLogs").html('No items found.');
            $('#compact-pagination-Activity').css('display', 'none');
        }
    });
}



var jqXHR = "";
function BindPeople() {

    $("#ddlSendReminderTo").append('<option value="{Contract Managers}">{Contract Managers}</option>');
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "11" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $("#ddlSendReminderTo").append('<option value="{Project Managers}">{Project Managers}</option>');
    }

    jqXHR = $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {

            var roleoption = '';
            var rolestype = SettingUserRole;
            $(SettingUserRole).find('Roles').each(function () {
                var role = $(this).find('Role').text();
                roleoption += '<option value="[' + role + ']">[' + role + ']</option>';
            });
            $("#ddlSendRenewReminderTo").append(roleoption);
            $("#ddlSendReminderToNew").append(roleoption);
            $("#ddlDocRemindTo").append(roleoption);
            $("#ddlDocRemindToEdit").append(roleoption);
            $("#ddlSendReminderToObligationNew").append(roleoption);
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "11" && n.Status == "ON");
            });
            if (!(vAccFeat.length > 0)) {
                var valueRem = "{Project Managers}";
                $("#ddlSendRenewReminderTo option[value='" + valueRem + "']").remove();
                $("#ddlSendReminderToNew option[value='" + valueRem + "']").remove();
                $("#ddlDocRemindTo option[value='" + valueRem + "']").remove();
                $("#ddlDocRemindToEdit option[value='" + valueRem + "']").remove();
                $("#ddlSendReminderToObligationNew option[value='" + valueRem + "']").remove();
            }

            var v = $(data).length;
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var sRowKey = item.RowKey;
                var sUserName = item.UserName;
                var sUserType = item.UserType;
                var sEmail = item.EmailID;
                if (sUserType.indexOf("Global Contract Owner") >= 0) {
                    arrGlobalUser.push(sUserName);
                } else {
                    arrUser.push(sUserName);
                }
                var articleemailuser = '<option value="' + sUserName + '" data-emailvalue="' + sEmail + '">' + sUserName + '</option>';
                var article = '<option value="' + sUserName + '">' + sUserName + '</option>';
                $("#ddlContractManagers").append(article);
                $("#ddlReviewers").append(article);
                $("#ddlApproversNew").append(article);
                $("#ddlSignees").append(article);
                $("#ddlMilestoneOwner").append(article);
                $("#ddlObligationOwner").append(article);
                $("#ddlSendTo").append(article);
                $("#ddlSendToCancel").append(article);
                $("#ddlDocumentShareInternal").append(articleemailuser);
                $("#ddlContractShareInternal").append(articleemailuser);

                //Obligation Newly Added

                $("#ddlObligationNewOwner").append(article);

                $("#ddlMilestoneOwnerNew").append(article);
                $("#ddlSendReminderToNew").append(article);
                $("#ddlSendUserToRenewalConfirmUsers").append(article);
                $("#ddlSendUserToRenewalConfirmUsersCC").append(article);
                $("#ddlRenewalNotfInternalNew").append(article);
                $("#ddlReadOnly").append(article);
                $("#ddlReadWrite").append(article);
                $("#ddlFullControl").append(article);

                $("#ddlCC").append(article);
                $("#ddlWorkflowCC").append(article);
                $("#ddlWorkflowCCRenew").append(article);
                $("#ddlSendReminderTo").append(article);
                $("#ddlRenewalNotfInternal").append(article);


                $("#ddlRequestedBy").append(article);
                $("#ddlSendRenewReminderTo").append(article);
                $("#ddlSendReminderToObligationNew").append(article);


                $("#ddlDocRemindTo").append(article);
                $("#ddlDocRemindToEdit").append(article);
                $("#ddlAuthorCreate").append(article);
                $("#ddlAuthorEdit").append(article);
            }
            $("#ddlDocumentList").chosen();

            $("#ddlContractManagers").chosen();
            $("#ddlReviewers").chosen();
            $("#ddlApproversNew").chosen();
            $("#ddlSignees").chosen();
            $("#ddlMilestoneOwner").chosen();
            $("#ddlObligationOwner").chosen();
            $("#ddlDocumentShareInternal").chosen();
            $("#ddlContractShareInternal").chosen();
            //Newly added For Obligation New
            $("#ddlRenewalNotfInternalNew").chosen();
            $("#ddlObligationNewOwner").chosen();


            $("#ddlMilestoneOwnerNew").chosen();
            $("#ddlSendReminderToNew").chosen();
            $("#ddlSendTo").chosen();
            $("#ddlSendToCancel").chosen();

            $("#ddlCC").chosen();
            $("#ddlSendReminderTo").chosen();
            $("#ddlRenewalNotfInternal").chosen();
            $("#ddlReadOnly").chosen();
            $("#ddlReadWrite").chosen();
            $("#ddlFullControl").chosen();
            $("#ddlSendUserToRenewalConfirmUsers").chosen();
            $("#ddlSendUserToRenewalConfirmUsersCC").chosen();

            $("#ddlSendReminderToObligationNew").chosen();
            $("#ddlDocRemindTo").chosen();
            $("#ddlDocRemindToEdit").chosen();
            $("#ddlWorkflowCC").chosen();
            $("#ddlWorkflowCCRenew").chosen();
            $("#ddlRequestedBy").chosen();
            $("#ddlAuthorEdit").chosen();
            $("#ddlSendRenewReminderTo").chosen();

            $("#ddlAuthorCreate").chosen().trigger("chosen:updated");
            $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                $('.result-selected').css('display', 'none');
            });

            if (localStorage.UserName != "") {
                GetValuesAndAutoPopulate("ddlAuthorCreate", localStorage.UserName);
            }
        },
        error:
            function (data) {
            }
    });
}

function GetUserList() {
    var vUserList = '';
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (dataUser) {
            $(dataUser).each(function (i, item) {
                var sRowKey = item.RowKey;
                var sUserName = item.UserName;
                vUserList += '<option value="' + sUserName + '">' + sUserName + '</option>';
            });
        },
        error:
            function (dataUser) {
            }
    });
    return vUserList;
}

function GetArrayUserList() {
    // var vUserList = '';
    var arrUsers = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (dataUser) {
            $(dataUser).each(function (i, item) {
                var sRowKey = item.RowKey;
                var sUserName = item.UserName;
                // vUserList += '<option value="' + sUserName + '">' + sUserName + '</option>';
                arrUsers.push(sUserName);
            });
        },
        error:
            function (dataUser) {
            }
    });
    return arrUsers;
}

function ViewBusinessArea() {
    $('#txtBARowkey').val("");
    $('#txtBAParent').val("");
    $('#txtBA').val("");
    $("#browseBA").dialog("option", "title", "Browse Business Area");
    $("#browseBA").dialog("open");
    $("#browseBA").height("auto");
}

function ViewOriginatingParty() {
    ViewOPCounterparty();
    getcompanyprofile();
    $("#tblOriginatingParties").html("");
    $("#browseOriginatingParty").dialog("option", "title", "Originating Party Picker");
    $("#browseOriginatingParty").dialog("open");
}

function ViewOPCounterparty() {
    if ($('#tblOPCounterparties tr').length <= 0) {
        CounterpartyFunc1();
    }
}


function CounterpartyFunc() {
    $("#loadingPage").fadeIn();
    $("#tblCounterparties").empty();
    $("#liSelectedCounterParty").empty();
    var SelectedCounterpartList = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            CounterPartyArrayprev = [];
            if (strSelCounterPartyField != "") {
                $.each($('#' + strSelCounterPartyField + '').val().replace("; ", ";").split(";"), function () {
                    if (SelectedCounterpartList.indexOf($.trim(this)) == -1)
                        SelectedCounterpartList.push($.trim(this));
                });
            }
            else {
                $.each($('#Counterparty').val().replace("; ", ";").split(";"), function () {
                    if (SelectedCounterpartList.indexOf($.trim(this)) == -1)
                        SelectedCounterpartList.push($.trim(this));
                });
            }


            var myCounterPartyArrayList = [];
            var obj1 = {};
            //manoj
            $(data).each(function (idata, itemdata) {
                if (!(itemdata.CounterpartyName in obj1)) {
                    if (itemdata.CounterpartyName.trim() != "") {
                        if (itemdata.IsGlobal == "Yes")
                            myCounterPartyArrayList.push(itemdata);
                        else {
                            if (typeof (itemdata.BusinessAreasPath) != "undefined" && itemdata.BusinessAreasPath != "") {
                                var contractarea = "";
                                var Businesssarea = "";
                                var splitbusinessPath = itemdata.BusinessAreasPath.split(';');
                                $(splitbusinessPath).each(function (index) {
                                    if (this != null && this.toString() != "") {
                                        var contBusi = this.split('>');
                                        if (typeof (contBusi) != "undefined") {
                                            if (contBusi.length > 0) {
                                                contractarea = contBusi[0].trim();
                                                Businesssarea = contBusi[contBusi.length - 1].trim();
                                                if (thisBusinessAreaNameC == Businesssarea && thisContractAreaNameC == contractarea)
                                                    myCounterPartyArrayList.push(itemdata);
                                            }
                                        }
                                    }
                                })

                            }
                        }
                    }
                }
                obj1[itemdata.CounterpartyName] = true;
            });


            //manoj
            var article = '<thead><tr><th><input id="selectallCounterParty" onclick="funselectallCounterParty(this);" type="checkbox"/> Counterparty Name</th><th>Counterparty Type</th><th>Country</th></tr></thead><tbody>';
            var countryvalue = ''
            $(myCounterPartyArrayList).each(function (iArray, itemArray) {
                article += '<tr><td>';
                if (SelectedCounterpartList.length > 0) {
                    if (SelectedCounterpartList.indexOf(itemArray.CounterpartyName.trim()) > -1) {
                        article += '<input id="' + itemArray.RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);" checked class="css1-checkbox" value="' + escape(itemArray.CounterpartyName.trim()) + '" />';
                    }
                    else {
                        article += '<input id="' + itemArray.RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);"  class="css1-checkbox" value="' + escape(itemArray.CounterpartyName.trim()) + '" />';
                    }
                }
                else {
                    article += '<input id="' + itemArray.RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);"  class="css1-checkbox" value="' + escape(itemArray.CounterpartyName.trim()) + '" />';
                }
                article += '<label for="CP' + itemArray.RowKey + '" class="css1-label" title="' + escape(itemArray.CounterpartyName.trim()) + '" onmouseover="UnescapeNameMouseOver(this)" style="display: inline;">' + itemArray.CounterpartyName.trim() + '</label></td>';
                article += '<td>' + itemArray.CounterpartyType + '</td>';
                countryvalue = itemArray.Country != "0" ? itemArray.Country : "-"
                article += '<td>' + countryvalue + '</td>';
                article += '</tr>';
            });
            //manoj
            $("#listWrapper").html('<table id="tblCounterparties" class="f_list customtblCounterparties"></table>');
            $("#tblCounterparties").html(article);
            _alphabetSearch = '';
            $("#tblCounterparties").DataTable({
                "columnDefs": [
                    { "orderable": false, 'targets': "_all" }
                ],
                "fnDrawCallback": function () { eventFired('Counterparty', 'selectallCounterParty', 'tblCounterparties'); },
                "iDisplayLength": 20,
                "searchHighlight": true,
                "pagingType": "full_numbers",
                //"scrollY": "420px",
                //"scrollCollapse": true,
            });
            alphabeticselection('tblCounterparties');
            article = '';
            if ($('input:checkbox[name="Counterparty"]:checked').length == $('input:checkbox[name="Counterparty"]').length && $('input:checkbox[name="Counterparty"]:checked').length != 0) {
                $("#selectallCounterParty").attr('checked', true);
            } else {
                $("#selectallCounterParty").attr('checked', false);
            }
            $.each(SelectedCounterpartList, function () {
                if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null && $.trim(this) != "") {
                    $('#liSelectedCounterParty').append('<span style="font-size:13px;">' + $.trim(this) + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedCouterParty(this);" style="float:right" /></span>');
                }
            });
            //manoj
            $("#loadingPage").fadeOut();
            PrvRelatedCounterparities = [];
            arrRelatedCounterparities = [];
            curRelatedCounterparities = [];
            $("#browseCounterparty").dialog("option", "title", "Counterparty Picker");
            $("#browseCounterparty").dialog("open");
        },
        error: function () {
            $("#tblCounterparties").html('');
            PrvRelatedCounterparities = [];
            arrRelatedCounterparities = [];
            curRelatedCounterparities = [];
            $('#loadCP').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
            $("#browseCounterparty").dialog("option", "title", "Counterparty Picker");
            $("#browseCounterparty").dialog("open");
            $("#loadingPage").fadeOut();
        }
    });
}
//function CounterpartyFunc1() {

//    $("#tblOPCounterparties").empty();
//    var vCounterparty = $('#Counterparty').val();
//    if (typeof vCounterparty != 'undefined') {
//        $.each(vCounterparty.split(";"), function (i, item) {
//            var vCounterpartyName = $.trim(item);
//            if (vCounterpartyName != "") {
//                var article = '<li>';
//                if ($('#OriginatingParty').val() == vCounterpartyName) {
//                    article += '<input id="CPO' + i + '" type="radio" name="OriginatingParty" class="css-checkbox" checked value="' + vCounterpartyName + '" />';
//                } else {
//                    article += '<input id="CPO' + i + '" type="radio" name="OriginatingParty" class="css-checkbox" value="' + vCounterpartyName + '" />';
//                }
//                article += '<label for="CPO' + i + '" class="css-label">' + vCounterpartyName + '</label>';
//                article += '</li>';
//                $("#tblOPCounterparties").append(article);
//            }
//            else if (vCounterpartyName == "Counterparty not in the list")
//            { $("#tblOPCounterparties").append('<li>' + vCounterpartyName + '</li>'); }
//            else {
//                $("#tblOPCounterparties").append('<li style="font-size:13px;">No Counterparty is available for this contract.</li>');
//            }
//        });
//    }
//}
function CounterpartyFunc1() {
    $("#tblOPCounterparties").empty();
    var vCounterparty = $('#Counterparty').val();
    if (typeof vCounterparty != 'undefined') {
        $.each(vCounterparty.split(";"), function (i, item) {
            var vCounterpartyName = $.trim(item);
            if (vCounterpartyName != "") {
                var article = '<li>';
                if ($('#OriginatingParty').val() == vCounterpartyName) {
                    article += '<input id="CPO' + i + '" type="radio" name="OriginatingParty" class="css-checkbox" checked value="' + vCounterpartyName + '" />';
                } else {
                    article += '<input id="CPO' + i + '" type="radio" name="OriginatingParty" class="css-checkbox" value="' + vCounterpartyName + '" />';
                }
                article += '<label for="CPO' + i + '" class="css-label">' + vCounterpartyName + '</label>';
                article += '</li>';
                $("#tblOPCounterparties").append(article);
            }
            else if (vCounterpartyName == "Counterparty not in the list")
            { $("#tblOPCounterparties").append('<li>' + vCounterpartyName + '</li>'); }
            else {
                $("#tblOPCounterparties").append('<li style="font-size:13px;">No Counterparty is available for this contract.</li>');
            }
        });
    }
}
//function ViewCounterparty() {
//    $('#loadCP').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
//    if ($('#tblCounterparties tr').length <= 0) {
//        CounterpartyFunc();
//    } else {
//        $('#loadCP').empty();
//    }
//    $("#browseCounterparty").dialog("option", "title", "Counterparty Picker");
//    $("#browseCounterparty").dialog("open");
//}
function ViewCounterparty(selectedFieldName) {
    strSelCounterPartyField = selectedFieldName;
    $("#txtSearchBox").val('');
    if (vCounterpartyFields.length > 0) {
        CounterpartyFunc();
    }
    else {
        CounterpartyFunc();
        getCounterpartyprimaryFields();
    }

    $('#loadCP').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
}
function SaveCounterparty() {
    var isformvalid = false;
    if (requiredValidator('addEditCounterparty',false)) {
        $("#loadingPage").fadeIn();
        isformvalid = true;
        var entityid = $("#txtCounterpartyIDadd").val();
        var AddressLine1 = $("#txtAddressLine1add").val();

        if (AddressLine1 == null || AddressLine1 == '') {
            AddressLine1 = '';
        }
        var vTitle = $("#txtCounterpartyNameadd").val();
        var counterpartyForm = $("#counterpartyFormadd").serialize();
        counterpartyForm += "&IsGlobal=" + $('input[name="IsGlobalN"]:checked').val();
        counterpartyForm += "&AccountID=" + localStorage.AccountID;
        counterpartyForm += "&CreatedBy=" + localStorage.UserName;
        counterpartyForm += "&ModifiedBy=" + localStorage.UserName;
        var strBusinessAreaOwnerof = "";
        if ($('input[type="radio"][name=IsGlobalN]:checked').val() == "No") {
            if ($("#txtNewCpBusinessArea").val() != "") {
                if ($("#txtNewCpBusinessArea").val() != "") {
                    for (var i = 0; i < selectedBusinessAreaID11.length; i++) {

                        var rowKPath = jQuery.grep(BusinessAreaPathRowKey, function (a) {
                            return a[1] === selectedBusinessAreaID11[i][1];
                        });
                        if (rowKPath != null && typeof (rowKPath) != "undefined" && rowKPath.length != 0)
                            strBusinessAreaOwnerof += rowKPath[0][0] + "; ";
                    }

                    strBusinessAreaOwnerof = strBusinessAreaOwnerof.slice(0, -1)
                }
            } else {
                strBusinessAreaOwnerof = "";
            }
        }
        counterpartyForm += "&BusinessAreasPath=" + encodeURIComponent(strBusinessAreaOwnerof);
        var cpresult = "&";
        $("#counterpartyFormadd .fielddatecontrol").each(function (index) {
            if ($(this).attr('class').toLowerCase().indexOf("hasdatepicker") >= 0) {

                var name = $(this).attr('class');
                name = name.split("hasDatepicker")[0];
                name = name.slice(0, -1);

                name = name.substr(name.lastIndexOf(' ') + 1);
                var value = $.datepicker.formatDate('mm/dd/yy', $(this).datepicker('getDate'));
                cpresult = cpresult + name + "=" + value + "&";
            }
            else {
                var name = $(this).attr('class').substr($(this).attr('class').lastIndexOf(' ') + 1);
                var value = $.datepicker.formatDate('mm/dd/yy', $(this).datepicker('getDate'));
                cpresult = cpresult + name + "=" + value + "&";
            }
        });
        cpresult = cpresult.slice(0, -1)
        counterpartyForm += cpresult;

        var formData = new FormData();
        formData.append("AccountID", localStorage.AccountID);
        formData.append("SearializeControls", counterpartyForm);

        if (entityid != '') {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/dynamicformupdate',
                type: 'PUT',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (person) {
                    swal("", person);
                    $("#loadingPage").fadeOut();
                    //CounterpartyFunc();
                    //CounterpartyFunc1();
                    $("#txtCounterpartyNameadd").val("");
                    $("#addEditCounterparty").dialog("close");
                    $("#ddlCounterpartyTypeadd").val("0");
                    //$("#txtAddressLine1add").val("");
                    //$("#txtAddressLine2add").val("");
                    //$("#txtCityadd").val("");
                    //$("#txtStateadd").val("");
                    //$("#txtZipadd").val("");
                    //$("#ddlCountryadd").val("0");
                    //$("#txtContactNoadd").val("");
                    $("#ddlStatusadd").val("0");
                    //$("#txtEmailIDadd").val("");

                }
            });
        }
        else {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/dynamicform',
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (person) {
                    swal("", "Counterparty created.");
                    $("#loadingPage").fadeOut();

                    if (strSelCounterPartyField != "") {
                        if ($("#" + strSelCounterPartyField + "").val() == '')
                            $('#' + strSelCounterPartyField + '').val($("#txtCounterpartyName").val());
                        else
                            $('#' + strSelCounterPartyField + '').val($('#' + strSelCounterPartyField + '').val() + "; " + $("#txtCounterpartyName").val());
                    }
                    else {
                        if ($("#Counterparty").val() == '')
                            $('#Counterparty').val($("#txtCounterpartyName").val());
                        else
                            $('#Counterparty').val($('#Counterparty').val() + "; " + $("#txtCounterpartyName").val());

                    }


                    // CounterpartyFunc();
                    // CounterpartyFunc1();
                    $("#txtCounterpartyNameadd").val("");
                    $("#addEditCounterparty").dialog("close");
                    $("#ddlCounterpartyTypeadd").val("0");
                    //$("#txtAddressLine1add").val("");
                    //$("#txtAddressLine2add").val("");
                    //$("#txtCityadd").val("");
                    //$("#txtStateadd").val("");
                    //$("#txtZipadd").val("");
                    //$("#ddlCountryadd").val("0");
                    //$("#txtContactNoadd").val("");
                    $("#ddlStatusadd").val("0");
                    // $("#txtEmailIDadd").val("");
                    $("#addEditCounterparty").dialog("close");
                },
                error: function (person) {
                    person.responseText = person.responseText.replace('{"Message":"', '');
                    person.responseText = person.responseText.replace('"}', '');
                    swal("", "" + person.responseText + "");
                    $("#loadingPage").fadeOut();
                }

            });
        }
    }
    return isformvalid;
}
function CounterpartyPopup(obj) {
    getCounterpartyFieldsadd();
    $("#txtCounterpartyIDadd").val("");
    $("#txtNewCpBusinessArea").val('');
    // $('input[type="radio"][name=IsGlobal][value="Yes"]').prop('checked', true);
    $("#trcp-RgBusi").hide();
    $("#txtNewCpBusinessArea").removeClass("validelement");
    $("#txtCounterpartyNameadd").val((obj != null && obj != "") ? obj.trim() : "");
    $('#ddlCounterpartyTypeadd').val('0');


    if (thisBusinessAreaNameC == "") {
        $('input[type="radio"][name=IsGlobalN][value="Yes"]').prop('checked', true);
        $('#counterpartyItemsadd #trcp-RgBusi').hide();
        $("#txtNewCpBusinessArea").removeClass("validelement");
    }
    else {

        $('input[type="radio"][name=IsGlobalN][value="No"]').prop('checked', true);
        $('#counterpartyItemsadd #trcp-RgBusi').show();
        $("#txtNewCpBusinessArea").addClass("validelement");
        addDefaultBusinessareaCounterparty();
    }
    //$("#txtAddressLine1add").val("");
    //$("#txtAddressLine2add").val("");
    //$("#txtCityadd").val("");
    //$("#txtStateadd").val("");
    //$("#txtZipadd").val("");
    //$('#ddlCountryadd').val('0');
    //$("#txtContactNoadd").val("");
    //$("#txtEmailIDadd").val("");
    $("#ddlStatusadd").val("Active");


    //$(".validelement").each(function (index, element) {
    //    $(element).removeClass("error");
    //    $("#errormsg_" + element.id).remove();
    //});

    //$("#addEditCounterparty").dialog("option", "title", "New Counterparty");
    //$("#addEditCounterparty").dialog("open");
}

$('input[type=radio][name=IsGlobalN]').change(function () {

    if (this.value == 'Yes') {
        //  $("#trcp-RgBusi").hide();
        $('#counterpartyItemsadd #trcp-RgBusi').hide();
        $("#txtNewCpBusinessArea").removeClass("validelement");
        selectedBusinessAreaID11 = [];
        selectedBusinessAreaID11Temp = [];
        BAOwnersselecteditems = [];

    }
    else if (this.value == 'No') {
        //$("#trcp-RgBusi").show();
        $('#counterpartyItemsadd #trcp-RgBusi').show();
        if (thisBusinessAreaNameC != "") {
            addDefaultBusinessareaCounterparty();
            $("#txtNewCpBusinessArea").addClass("validelement");
        }
    }
    //manoj
    $("#RelatedCounterparties").val('');
    PrvRelatedCounterparities = [];
    arrRelatedCounterparities = [];
    curRelatedCounterparities = [];
    //manoj
});

$('input[type=radio][name=IsGlobalN]').change(function () {

    if (this.value == 'Yes') {
        //  $("#trcp-RgBusi").hide();
        $('#counterpartyItemsadd #trcp-RgBusi').hide();
        $("#txtNewCpBusinessArea").removeClass("validelement");
        selectedBusinessAreaID11 = [];
        selectedBusinessAreaID11Temp = [];
        BAOwnersselecteditems = [];

    }
    else if (this.value == 'No') {
        //$("#trcp-RgBusi").show();
        $('#counterpartyItemsadd #trcp-RgBusi').show();
        if (thisBusinessAreaNameC != "") {
            addDefaultBusinessareaCounterparty();
            $("#txtNewCpBusinessArea").addClass("validelement");
        }
    }
    //manoj
    $("#RelatedCounterparties").val('');
    PrvRelatedCounterparities = [];
    arrRelatedCounterparities = [];
    curRelatedCounterparities = [];
    //manoj
});


function SelectLegalEntities() {
    $("#OPCounterparties").removeClass('pop_up_Harizondal_meta_active');
    $("#OPLeagalEntities").addClass('pop_up_Harizondal_meta_active');
    $('#tblOPLegalEntities').css("display", "");
    $('#tblOPCounterparties').css("display", "none");
    $('#txtOriginatingPartyType').val("Legal Entity");
    $('#compact-paginationOPLegalEntities').css("display", "");
    $('#compact-paginationOPCounterparties').css("display", "none");
}

function SelectCounterparties() {
    $("#OPLeagalEntities").removeClass('pop_up_Harizondal_meta_active');
    $("#OPCounterparties").addClass('pop_up_Harizondal_meta_active');
    $('#tblOPLegalEntities').css("display", "none");
    $('#tblOPCounterparties').css("display", "");
    $('#txtOriginatingPartyType').val("Counterparty");
    $('#compact-paginationOPCounterparties').css("display", "");
    $('#compact-paginationOPLegalEntities').css("display", "none");
}

//function getcompanyprofile() {
//    $("#tblOPLegalEntities").empty();
//    var control = "";
//    $.ajax({
//        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/legalentities',
//        type: 'GET',
//        dataType: 'json',
//        "Content-Type": "application/json",
//        headers: { 'eContracts-ApiKey': localStorage.APIKey },
//        cache: false,
//        async: false,
//        success: function (data) {
//            $(data).each(function (i, item) {

//                control += "<option value='" + item.LegalEntityName + "'>" + item.LegalEntityName + "</option>";

//                var article = '<li>';
//                if ($('#OriginatingParty').val() == item.LegalEntityName) {
//                    article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" checked value="' + item.LegalEntityName + '" />';
//                } else {
//                    article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" value="' + item.LegalEntityName + '" />';
//                }
//                article += '<label for="OP' + item.RowKey + '" class="css-label">' + item.LegalEntityName + '</label>';
//                article += '</li>';
//                $("#tblOPLegalEntities").append(article);
//            });

//            var vCount = $("#tblOPLegalEntities li").length;
//            $('#compact-paginationOPLegalEntities').pagination({
//                items: vCount,
//                itemsOnPage: 15,
//                type: 'ul',
//                row: 'li',
//                typeID: 'tblOPLegalEntities',
//                cssStyle: 'compact-theme'
//            });
//        }
//    });
//    return control;
//}


//manoj
function getcompanyprofile(objvalueselect) {
    var control = "";
    $("#tblOPLegalEntities").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/legalentities',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            var columnOP = [];
            $("#tblOPLegalEntities").empty();
            var legalentityval = $("#CompanyProfile").find('option:selected').text();
            //LeagalEntity = data;
            $(data).each(function (i, item) {
                if (typeof objvalueselect != 'undefined' && objvalueselect != null && objvalueselect != "" && objvalueselect == item.LegalEntityName) {
                    //SelectedLegalEntity = objvalueselect;
                    control += "<option selected='selected' value='" + item.LegalEntityName + "'>" + item.LegalEntityName + "</option>";
                } else if ($("#summCompyLegalEntity").text() == item.LegalEntityName) {
                    control += "<option selected='selected' value='" + item.LegalEntityName + "'>" + item.LegalEntityName + "</option>";
                } else {
                    control += "<option value='" + item.LegalEntityName + "'>" + item.LegalEntityName + "</option>";
                }

                var article = '<li>';
                if ($('#OriginatingParty').val() != "") {
                    if ($('#OriginatingParty').val() == item.LegalEntityName) {
                        article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" checked value="' + item.LegalEntityName + '" />';
                    } else {
                        article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" value="' + item.LegalEntityName + '" />';
                    }
                    article += '<label for="OP' + item.RowKey + '" class="css-label">' + item.LegalEntityName + '</label>';
                    article += '</li>';
                    $("#tblOPLegalEntities").append(article);
                } else if (typeof legalentityval != 'undefined' && legalentityval != '' && legalentityval != '--Select--') {
                    if ($("#CompanyProfile").find('option:selected').text() == item.LegalEntityName) {
                        article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" checked value="' + item.LegalEntityName + '" />';
                    } else {
                        article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" value="' + item.LegalEntityName + '" />';
                    }
                    article += '<label for="OP' + item.RowKey + '" class="css-label">' + item.LegalEntityName + '</label>';
                    article += '</li>';
                    $("#tblOPLegalEntities").append(article);
                }
                else {
                    if (typeof objvalueselect != 'undefined' && objvalueselect != null && objvalueselect != "" && objvalueselect == item.LegalEntityName) {
                        article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" checked value="' + item.LegalEntityName + '" />';
                    } else if ($("#summCompyLegalEntity").text() == item.LegalEntityName) {
                        article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" checked value="' + item.LegalEntityName + '" />';
                    } else {
                        article += '<input id="OP' + item.RowKey + '" type="radio" name="OriginatingParty" class="css-checkbox" value="' + item.LegalEntityName + '" />';
                    }
                    article += '<label for="OP' + item.RowKey + '" class="css-label">' + item.LegalEntityName + '</label>';
                    article += '</li>';
                    $("#tblOPLegalEntities").append(article);
                }
                //columnOP.push(item.LegalEntityName);
                //$("#txtSearchBoxOPLegal").autocomplete({
                //    source: columnOP,
                //    minLength: 1,
                //    focus: function (event, ui) {
                //        return false;
                //    }
                //});
            });

            var vCount = $("#tblOPLegalEntities li").length;
            $('#compact-paginationOPLegalEntities').pagination({
                items: vCount,
                itemsOnPage: 15,
                type: 'ul',
                row: 'li',
                typeID: 'tblOPLegalEntities',
                cssStyle: 'compact-theme'
            });
        }
    });
    return control;
}
//manoj


function getcompanyprofilevalue(obj) {
    var control = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/legalentities',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            $(data).each(function (i, item) {
                if (item.LegalEntityName == obj) {
                    control += "<option value='" + item.LegalEntityName + "' selected='selected'>" + item.LegalEntityName + "</option>";
                }
                else {
                    control += "<option value='" + item.LegalEntityName + "'>" + item.LegalEntityName + "</option>";
                }
            });
        }
    });
    return control;
}

function getcontractpricingtype(obj) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractpricingtype',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $(data).each(function (i, item) {
                if (item.TypeName == obj) {
                    $("#ContractPricingType").append("<option value='" + item.TypeName + "' selected='selected'>" + item.TypeName + "</option>")
                }
                else {
                    $("#ContractPricingType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                }
            });

        }
    });
}

function getbillingfrequency(obj) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/billingfrequency',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $(data).each(function (i, item) {
                if (item.TypeName == obj) {
                    $("#BillingFrequency").append("<option value='" + item.TypeName + "' selected='selected'>" + item.TypeName + "</option>")
                }
                else {
                    $("#BillingFrequency").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                }
            });

        }
    });
}

function getStatus(obj) {
    var control = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractstatuses',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (contractstatuses) {
            $(contractstatuses).each(function (i, item) {
                if (item.ContractStatus == obj) {
                    control += "<option value=" + encodeURI(item.ContractStatus) + " selected='selected'>" + item.ContractStatus + "</option>";
                }
                else {
                    control += "<option value=" + encodeURI(item.ContractStatus) + ">" + item.ContractStatus + "</option>";
                }
            });
        }
    });
    return control;
}

function getContractCurrency(obj) {
    var control = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/currencies',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            $(data).each(function (i, item) {
                if (item.Abbreviation == obj) {
                    control += "<option value=" + encodeURI(item.Abbreviation) + " selected='selected'>" + item.Abbreviation + "</option>";
                }
                else {
                    control += "<option value=" + encodeURI(item.Abbreviation) + ">" + item.Abbreviation + "</option>";
                }
            });
        }
    });
    return control;
}
var vSelectedCounterPartyId = "";
var vCounterpartyFields = [];
function AddCounterparty() {
    if ($('input[type="radio"][name=PickCounterparty]:checked').val() == 'Existing') {
        //manoj
        var arrselectedcunterparty = [];
        $.each($('#liSelectedCounterParty').children(), function () {
            if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null && $.trim(this.textContent) != "") {
                if (arrselectedcunterparty.indexOf($.trim(this.textContent)) == -1)
                    arrselectedcunterparty.push($.trim(this.textContent));
            }
        });
        if (arrselectedcunterparty.length > 0) {
            if (strSelCounterPartyField != "") {
                $("#" + strSelCounterPartyField + "").val(arrselectedcunterparty.join("; "));
            }
            else {
                $("#Counterparty").val(arrselectedcunterparty.join("; "));
            }
        } else {
            if (strSelCounterPartyField != "") {
                $("#" + strSelCounterPartyField + "").val('');
            }
            else {
                $("#Counterparty").val('');
            }
        }
        arrselectedcunterparty = [];
        //manoj
        $("#browseCounterparty").dialog("close");
        return true;
    }
    else {
        if (requiredValidator('addNewEntityFieldsTest',false)) {
            isformvalid = true;
            var entityid = $("#txtCounterpartyID").val();
            var AddressLine1 = $("#txtAddressLine1").val();

            if (AddressLine1 == null || AddressLine1 == '') {
                AddressLine1 = '';
            }
            if ($("#chkCounterpartyNotInList").is(':checked')) {
                $("#loadingPage").fadeIn();
                var strBusinessAreaOwnerof = "";
                if ($('input[type="radio"][name=IsGlobal]:checked').val() == "No") {
                    if ($("#txtOwnerofBusinessArea").val() != "") {
                        if ($("#txtOwnerofBusinessArea").val() != "") {
                            for (var i = 0; i < selectedBusinessAreaID11.length; i++) {

                                var rowKPath = jQuery.grep(BusinessAreaPathRowKey, function (a) {
                                    return a[1] === selectedBusinessAreaID11[i][1];
                                });
                                if (rowKPath != null && typeof (rowKPath) != "undefined" && rowKPath.length != 0)
                                    strBusinessAreaOwnerof += rowKPath[0][0] + "; ";
                            }

                            strBusinessAreaOwnerof = strBusinessAreaOwnerof.slice(0, -1)
                        }
                    } else {

                        strBusinessAreaOwnerof = "";
                    }
                }
                else {
                    $("#txtOwnerofBusinessArea").val('');
                    strBusinessAreaOwnerof = "";
                }
                var vTitle = $("#txtCounterpartyName").val();
                var counterpartyForm = $("#counterpartyForm").serialize();
                counterpartyForm += "&AccountID=" + localStorage.AccountID;
                counterpartyForm += "&CreatedBy=" + localStorage.UserName;
                counterpartyForm += "&ModifiedBy=" + localStorage.UserName;
                counterpartyForm += "&BusinessAreasPath=" + encodeURIComponent(strBusinessAreaOwnerof);
                var cpresult = "&";
                $("#counterpartyForm .fielddatecontrol").each(function (index) {
                    if ($(this).attr('class').toLowerCase().indexOf("hasdatepicker") >= 0) {

                        var name = $(this).attr('class');
                        name = name.split("hasDatepicker")[0];
                        name = name.slice(0, -1);

                        name = name.substr(name.lastIndexOf(' ') + 1);
                        var value = $.datepicker.formatDate('mm/dd/yy', $(this).datepicker('getDate'));
                        cpresult = cpresult + name + "=" + value + "&";
                    }
                    else {
                        var name = $(this).attr('class').substr($(this).attr('class').lastIndexOf(' ') + 1);
                        var value = $.datepicker.formatDate('mm/dd/yy', $(this).datepicker('getDate'));
                        cpresult = cpresult + name + "=" + value + "&";
                    }
                });
                cpresult = cpresult.slice(0, -1)
                counterpartyForm += cpresult;

                var formData = new FormData();
                formData.append("AccountID", localStorage.AccountID);
                formData.append("SearializeControls", counterpartyForm);

                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/dynamicform',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        if (!$.isEmptyObject(arrRelatedCounterparities)) {
                            CreateRelatedCounterparies(data, $("#txtCounterpartyName").val())
                        }
                        if (strSelCounterPartyField != "") {
                            if ($('#' + strSelCounterPartyField + '').val() != "") {
                                var CPValue = $('#' + strSelCounterPartyField + '').val() + "; " + $("#txtCounterpartyName").val();
                                $('#' + strSelCounterPartyField + '').val(CPValue.trim());
                            }
                            else {
                                $('#' + strSelCounterPartyField + '').val($("#txtCounterpartyName").val());

                            }
                        }
                        else {
                            if ($('#Counterparty').val() != "") {
                                var CPValue = $('#Counterparty').val() + "; " + $("#txtCounterpartyName").val();
                                $('#Counterparty').val(CPValue.trim());
                            }
                            else {
                                $('#Counterparty').val($("#txtCounterpartyName").val());

                            }
                        }

                        $('#chkCounterpartyNotInList').prop('checked', false);
                        $('#dvCPExistingCounterparty').css("display", "");
                        $('#dvCPAddCounterparty').css("display", "none");
                        $('#rdCPAddCounterparty').attr('checked', false);
                        $('#rdCPExistingCounterparty').attr('checked', true);

                        $('.CP_Det').remove();
                        $('.CP_Det1').css('display', 'none');
                        $("#ddlCounterpartyType").removeClass('validelement');
                        $("#txtEmailID").removeClass('validemail');
                        ClearAddCounterparty();
                        $("#browseCounterparty").dialog("close");
                        $("#loadingPage").fadeOut();
                    },
                    error: function (person) {
                        swal("", "Counterparty Name Exist");
                        $("#loadingPage").fadeOut();
                    }
                });

            } else {
                var duplicatecounteparty = false;
                if (strSelCounterPartyField != "") {
                    if ($('#' + strSelCounterPartyField + '').val() != "") {
                        var arrselectedcounterpaty = ";" + $('#' + strSelCounterPartyField + '').val().replace("; ", ";") + ";"
                        if (arrselectedcounterpaty.toLowerCase().indexOf(";" + $("#txtCounterpartyName").val().trim().toLowerCase() + ";") > -1) {
                            duplicatecounteparty = true;
                        }
                    }

                }
                else {
                    if ($('#Counterparty').val() != "") {
                        var arrselectedcounterpaty = ";" + $('#Counterparty').val().replace("; ", ";") + ";"
                        if (arrselectedcounterpaty.toLowerCase().indexOf(";" + $("#txtCounterpartyName").val().trim().toLowerCase() + ";") > -1) {
                            duplicatecounteparty = true;
                        }
                    }
                }

                if (!duplicatecounteparty) {
                    $('#dvCPExistingCounterparty').css("display", "");
                    $('#dvCPAddCounterparty').css("display", "none");
                    $('#rdCPAddCounterparty').attr('checked', false);
                    $('#rdCPExistingCounterparty').attr('checked', true);
                    if (strSelCounterPartyField != "") {
                        if ($('#' + strSelCounterPartyField + '').val() != "") {
                            var CPValue = $('#' + strSelCounterPartyField + '').val() + "; " + $("#txtCounterpartyName").val();
                            $('#' + strSelCounterPartyField + '').val(CPValue.trim());
                        }
                        else {
                            $('#' + strSelCounterPartyField + '').val($("#txtCounterpartyName").val());
                        }
                    }
                    else {
                        if ($('#Counterparty').val() != "") {
                            var CPValue = $('#Counterparty').val() + "; " + $("#txtCounterpartyName").val();
                            $('#Counterparty').val(CPValue.trim());
                        }
                        else {
                            $('#Counterparty').val($("#txtCounterpartyName").val());
                        }
                    }


                    ClearAddCounterparty();
                    $("#browseCounterparty").dialog("close");
                    $("#loadingPage").fadeOut();
                } else {
                    swal("", "Counterparty Name Exist");
                }
            }
        }
    }


}

function AddOriginatingParty() {
    if ($('input:radio[name=OriginatingParty]:checked').val() != null) {
        $('#OriginatingParty').val($('input:radio[name=OriginatingParty]:checked').val());
        return true;
    } else {

        swal("", "No Originating Party has been selected.");
        return false;
    }
}
$("#settingRenewEvergreen").click(function () {

    $("#txtRenewableFor").attr('readonly', 'readonly');
});

$("#settingRenewableFor").click(function () {
    $("#txtRenewableFor").removeAttr('readonly');
});


function BindRelatedContracts(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#ulRelatedContracts").empty();
    $('#liSelected').empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/relatedcontracts?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'UserID': localStorage.UserID },
        cache: false,
        success: function (contactsJsonPayload) {
            $("#ulRelatedContracts").empty();
            var count = 0;
            $("#hdnRelatedContracts").text("");
            $(contactsJsonPayload).each(function (i, item) {
                OlRelatedContracts = contactsJsonPayload;
                var myUrl = '/Contracts/ContractDetails?ContractID=' + encodeURI(item.RelatedContractID);
                $("#hdnRelatedContracts").append(item.RelatedContractID + ';');
                if (item.Permission == "InRecycleBin") {
                    if ($("#ulRelatedContracts").html() == '')
                        $("#ulRelatedContracts").append('<span style="color: #ff4d4d" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')');
                    else
                        $("#ulRelatedContracts").append('; <span style="color: #ff4d4d" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')');
                    $('#liSelected').append('<span style="font-size:11px;" id=' + item.RelatedContractID + '>' + item.RelatedContractTitle + ' (' + item.RelatedRelationshipType + ')</span>');
                }
                else {
                    if (item.Permission != "" && item.Permission != "No Access") {
                        if ($("#ulRelatedContracts").html() == '')
                            $("#ulRelatedContracts").append('<a href="' + myUrl + '">' + item.RelatedContractTitle + '</a> (' + item.RelatedRelationshipType + ')');
                        else
                            $("#ulRelatedContracts").append('; <a href="' + myUrl + '">' + item.RelatedContractTitle + '</a> (' + item.RelatedRelationshipType + ')');

                        $('#liSelected').append('<span style="font-size:11px;" id=' + item.RelatedContractID + '>' + item.RelatedContractTitle + ' (' + item.RelatedRelationshipType + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationship(this);" style="float:right" /></span>');
                    } else {
                        if ($("#ulRelatedContracts").html() == '')
                            $("#ulRelatedContracts").append('<span class="disabled_item_link" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')');
                        else
                            $("#ulRelatedContracts").append('; <span class="disabled_item_link" title="This Contract Record is no longer available.">' + item.RelatedContractTitle + '</span> (' + item.RelatedRelationshipType + ')');

                        $('#liSelected').append('<span style="font-size:11px;" id=' + item.RelatedContractID + '>' + item.RelatedContractTitle + ' (' + item.RelatedRelationshipType + ')</span>');
                    }
                }
            });
        },
        error: function (contactsJsonPayload) {
            $("#hdnRelatedContracts").text("");
            $("#ulRelatedContracts").empty();
            if (!$("#lblRelatedContractsCount").text().trim()) {
                $("#ulRelatedContracts").append('No items found.');
            }
            else {
                $("#ulRelatedContracts").append('No items found.');
            }

        }

    });
}

var vSentNotification;
function CreateNotificationList(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#alertsList").html('');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/notifications?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data.length == 0)
            { $("#alertsList").append('No Alert Sent'); }
            else
            {
                vSentNotification = data;
                $(data).each(function (i, item) {
                    var sNotificationTitle = item.NotificationTitle;
                    var sNotificationDate = moment(new Date(item.NotificationDate)).format('Do MMM');

                    var article = "";
                    if (i < 5) {
                        article += "<a href='javascript:void(0)' onclick='ViewNotificationDetail(\"" + i + "\");'>" + sNotificationTitle + "</a> <small title='Notified On'>" + sNotificationDate + "</small> | <small title='Notified To'>" + item.UserID + "</small><br/>";
                        $("#alertsList").append(article);
                    }


                    var sCategory = item.Category;
                    var vPriority = item.Priority;
                    var vPriorityIcon = '<img src="../Content/Images/priority_none.png" alt="None" title="None" style="vertical-align: text-bottom;" />';
                    if (vPriority == "High") {
                        vPriorityIcon = '<img src="../Content/Images/priority_high.png" alt="High" title="High" style="vertical-align: text-bottom;" />';
                    }
                    else if (vPriority == "Medium") {
                        vPriorityIcon = '<img src="../Content/Images/priority_medium.png" alt="Medium" title="Medium" style="vertical-align: text-bottom;" />';
                    }
                    else if (vPriority == "Low") {
                        vPriorityIcon = '<img src="../Content/Images/priority_low.png" alt="Low" title="Low" style="vertical-align: text-bottom;" />';
                    }

                    article = "";
                    article += '<article class="d-box1">';
                    article += '<div class="d_left-table">' + sNotificationDate;
                    article += '</div>';
                    article += '<div class="d_middle-table">';
                    article += '<p class="text"><a href="javascript:void(0)" onclick="ViewNotificationDetail(\'' + i + '\');">' + sNotificationTitle + '&nbsp;' + vPriorityIcon + '</a></p>';
                    article += '</div>';
                    article += '<div class="d_right-table">';
                    article += '<p class="text">' + item.UserID + '</p>';
                    article += '</div>';
                    article += '</article>';
                    $("#alertsListAll").append(article);
                });

                $('#compact-pagination-Alerts').pagination({
                    items: data.length,
                    itemsOnPage: 10,
                    type: 'section',
                    typeID: 'alertsListAll',
                    row: 'article',
                    cssStyle: 'compact-theme'
                });
            }
        },
        error:
            function (data) {
                $("#alertsList").append('No Alert Sent');
            }
    });
}

function CreateContractAlertList(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }

    var article = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractalerts?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var itemcheckcount = 0;
            var allitem = data.length;
            var curDate = moment(new Date());
            var blUpcomingAlert = false;
            $(data).each(function (i, item) {
                var sRowKey = item.RowKey;
                var sAlertTitle = item.EventName;
                var sPriority = item.Priority;


                if (item.Active == true) {
                    var vv = 0;
                    if (item.EventName == "Contract Renewals") {
                        if (typeof vContractRecord !== 'undefined') {
                            var vDate = vContractRecord.RenewalDate;
                            var start = moment(vDate);
                            var vv = start.diff(curDate, "days");
                        }
                    } else if (item.EventName == "Contract Expiration") {
                        if (typeof vContractRecord !== 'undefined') {
                            var vDate = vContractRecord.ExpiryDate;
                            var start = moment(vDate);
                            var vv = start.diff(curDate, "days");
                        }
                    }

                    if (vv > 0 && (vv <= item.Reminder1 + 60 || vv <= item.Reminder2 + 60 || vv <= item.Reminder3 + 60)) {

                        var alert = "";
                        alert += "<img src='../Content/Images/waitng-approval.png' />" + sAlertTitle;
                        alert += "<small class='contRsmaLl'>reminder due in " + vv + " days</small>";
                        alert += "<br/>";

                        $("#alertsListUpcoming").append(alert);
                        blUpcomingAlert = true;
                    }
                }
            });

            if (blUpcomingAlert) {
                $("#spNoUpcomingAlert").css('display', 'none');
            }
        },
        error:
            function (data) {
            }
    });
}

function ViewNotificationDetail(id) {
    $("#tdNotificationText").html(vSentNotification[id].NotificationDescription);
    $("#tdNotificationSentTo").html(vSentNotification[id].UserID);
    $("#tdNotificationSentOn").html(moment(new Date(vSentNotification[id].NotificationDate)).format('Do MMM, h:mm A'));
    $("#dvNotificationDetail").dialog("open");
}

function ShowAllAlerts() {
    $("#allAlerts").dialog("open");
}

function ShowUpcomingAlert() {
    $("#dvUpcomingAertsList").css("display", "");
    $("#dvSentAertsList").css("display", "none");

    $("#aSentAlert").removeClass("active");
    $("#aUpcomingAlert").addClass("active");
}

function ShowSentAlert() {
    $("#dvUpcomingAertsList").css("display", "none");
    $("#dvSentAertsList").css("display", "");

    $("#aUpcomingAlert").removeClass("active");
    $("#aSentAlert").addClass("active");
}

function ShowTabDetail(TabName) {
    if (TabName == "Summary") {
        $('.info-box-main-body').css("display", "none");
        $('#tabSummaryDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabSummary").addClass("active");
    }
    else if (TabName == "Activity") {
        $('.info-box-main-body').css("display", "none");
        $('#tabActivityDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabActivity").addClass("active");
    }
    else if (TabName == "Catalog") {
        $('.info-box-main-body').css("display", "none");
        $('#tabCatalogDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabCatalog").addClass("active");
    }
    else if (TabName == "Transactions") {
        $('.info-box-main-body').css("display", "none");
        $('#tabTransactionsDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabTransactions").addClass("active");
    }
    else if (TabName == "Obligation") {
        $('.info-box-main-body').css("display", "none");
        $('#tabObligationNewDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabObligation").addClass("active");
    }
    else if (TabName == "Notes") {
        $('.info-box-main-body').css("display", "none");
        $('#tabNotesDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabNotes").addClass("active");
    }
    else if (TabName == "TermsClause") {
        $('.info-box-main-body').css("display", "none");
        $('#tabTermsClauseDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabTermsClause").addClass("active");
    }
    else if (TabName == "Documents") {
        $('.info-box-main-body').css("display", "none");
        $('#tabDocumentsDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabDocuments").addClass("active");
    }
    else if (TabName == "DocumentView") {
        $('.info-box-main-body').css("display", "none");
        $('#tabDocumentViewDetail').css("display", "");

        $(".contracttab").removeClass("active");
        $("#tabDocumentView").addClass("active");
    }
}


function ReloadContracts() {
    if (!inrefreshState) {
        inrefreshState = true;
        setTimeout(function () {
            inrefreshState = false;
        }, 5000);
        vContractID = getParameterByName("ContractID");
        try {

            //[Bug id - eO36418] [Refresh Button: App navigating to Summary section whenever user click on In-App Refresh button]

            if ($("#tabSummary").hasClass("active")) {
                ShowTabDetail('Summary');
            }
            else if ($("#tabDocumentView").hasClass("active")) {
                ShowTabDetail('DocumentView');
            }
            else if ($("#tabDocuments").hasClass("active")) {
                ShowTabDetail('Documents');
            }
            else if ($("#tabTermsClause").hasClass("active")) {
                ShowTabDetail('TermsClause');
            }
            else if ($("#tabNotes").hasClass("active")) {
                ShowTabDetail('Notes');
            }
            else if ($("#tabObligation").hasClass("active")) {
                ShowTabDetail('Obligation');
            }
            else if ($("#tabTransactions").hasClass("active")) {
                ShowTabDetail('Transactions');
            }
            else if ($("#tabCatalog").hasClass("active")) {
                ShowTabDetail('Catalog');
            }
            else if ($("#tabActivity").hasClass("active")) {
                ShowTabDetail('Activity');
            }
            else
                ShowTabDetail('Summary');

            BindContractDetails(vContractID);
            BindRelatedContracts(vContractID);
            CreateContractAlertList(vContractID);
            $("#hdnShowAllTextValueheader").html($("#showAll")[0].innerHTML)
            //var showalltextvalue = $("#showAll").text();

            //manoj
            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
            var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
                return (n.RowKey == "20" && n.Status == "ON");
            });
            var details = "";
            if (vDocLibFeat.length > 0) {
                //Tab width decrease
                if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
                    $(".borderTop_Right_none").addClass('newdocview');
                }
                //Tab width decrease
                details += '<div class="row-group"><div class="col11 no-pad"><div class="col7"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a><a href="javascript:void(0);" id="documentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder"><img src="/Content/Images/add-icon.png">Add Folder</a><a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="../Content/Images/icon/drop.png" style="height:14px !important;"></a></div>'
            + '<div class="col2" style="width: 12%;padding: 0;"><ul id="ulFolderDocumentView" class="tab"><li style="display:inline-block;"><a href="javascript:void(0);" id="listfolderdocumentview" class="tablinks group-wit-btn active" data-value="folder" onclick="DisplayDocument(\'folder\')"><img src="/Content/Images/folder-view.png" title="Displays Folder(s) and Documents(s) associated with Contract Record"></a></li><li style="display:inline-block; margin-left:-1px;"><a href="javascript:void(0);" id="listdocumentview" data-value="document" class="tablinks group-wit-btn" onclick="DisplayDocument(\'document\')"><img src="/Content/Images/list-view.png" title="Displays Documents(s) associated with Contract Record"></a></li></ul></div><div id="dvdocumentkeyword" style="width: 29%; float:left;"><input style="width: 72%;float: left;padding: 5px 27px 5px 5px; border: 1px solid #ccc!important;" id="txtdocumentkeyword" name="keyword" placeholder="Document(s) Search" class="topSearchBox validelement" type="text"><img class="poPSear" style="    cursor: pointer;position: relative;left: -62px;top: 1px;padding: 4px 0px 5px 5px;" onclick="javascript:SearchDocumentKeyword();" src="/Content/Images/search1.png"><a href="javascript:void(0)" class="linkPickerClear" style="float: left;display: block;margin-left: 4px!important;margin-top: 7px!important;" onclick="ClearDocumentKeyword();">Clear</a></div></div>'
            + '<div class="col1 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2><div class="row-group"><div class="col12"><div id="holder" style="width:100%;"><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
                $("#dvtabDocumentView").html(details);
                //$("#dvtabSummaryDocumentView").html('<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Primary and Pinned Document(s)associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');">Primary and Pinned Document(s) (<i id="lblPinDocumentsCount"></i>)</a><a href="javascript:void(0);" id="pindocumentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a></div><div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');"><img id="imgPindoc" src="/Content/Images/e-open.png"></a></div></div><div class="row-group"><div class="col12"><div style="width:100%;"><div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissing"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Documents\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div><ul class="ul-data" id="ulPinDocumentLoading"></ul><ul class="ul-data" id="ulPinDocument"></ul></div></div><div id="dvPinDocument" class="col12 pad-top"></div></div>');
                $("#dvtabSummaryDocumentView").html('<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Primary and Pinned Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');">Primary and Pinned Document(s) (<i id="lblPinDocumentsCount"></i>)</a><a href="javascript:void(0);" id="pindocumentsort" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentSort" style="display:none"><img src="../Content/Images/down_arrow_blk.png" alt="" title=""></a></div><div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulPinDocument\', \'dvPinDocument\', \'imgPindoc\');"><img id="imgPindoc" src="/Content/Images/e-open.png"></a></div></div><div class="row-group pad-top"><div class="col12"><div style="width:100%;"><div class="wmessage clearfix clpendingaction" style="display:none;margin-left:35%;margin-top:-26px;margin-bottom:39px;"><table id="tblDocumentMissing"></table></div><ul class="ul-data" id="ulPinDocumentLoading"></ul><ul class="ul-data" id="ulPinDocument"></ul></div></div><div id="dvPinDocument" class="col12 pad-top"></div></div>'); //ENH 23  Minor Enhancement Specs-Rahul
                $("#hdnnewdocumentfeature").text("Yes");
                $("#litabDocumentView").css("display", "");
                $('#txtdocumentkeyword').keypress(function (e) {
                    if (e.keyCode == 13) {
                        SearchDocumentKeyword();
                    }
                });
            } else {
                //Tab width increase
                if (!($(".borderTop_Right_none").hasClass("newdocview"))) {
                    $(".borderTop_Right_none").removeClass('newdocview');
                }
                if ($("#tabDocumentView").hasClass("active")) {
                    $('.info-box-main-body').css("display", "none");
                    $('#tabSummaryDetail').css("display", "");

                    $(".contracttab").removeClass("active");
                    $("#tabSummary").addClass("active");
                }
                //Tab width increase
                details += '<div class="row-group"><div class="col10 no-pad"><img src="/Content/Images/documents.png"> <a title="Displays Folder(s) and Document(s) associated with the Contract Record." href="javascript:void(0);" class="link-head" onclick="javascript: togglediv( \'ulDocument\', \'dvDocument\', \'imgdoc\');">Documents (<i id="lblDocumentsCount"></i>)</a><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnAddContractDocument" style="display:none;"><img src="/Content/Images/add-icon.png">Add</a><label class="details-label Contribute" id="lblAddContractDocument" style="display:none;">or Drag & Drop</label><a href="javascript:void(0);" class="add-btn close1 Contribute" id="btnaddnewsubfolder"style="display:none;" ><img src="/Content/Images/add-icon.png">Add Folder</a><a href="javascript:void(0);" id="documentMultiActions" class="add-btn close1 margin-left-5 obligation-act-new openmenuDocumentMultiActions" style="display:none"><img src="../Content/Images/icon/drop.png" style="height:14px !important;"></a></div>'
                + '<div class="col2 text-right no-pad"><a href="javascript:void(0);" class="close1" onclick="javascript: togglediv(\'ulDocument\', \'dvDocument\', \'imgdoc\');"><img id="imgdoc" src="/Content/Images/e-open.png"></a></div></div><div class="warning-msg clearfix clpendingaction" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissingNormal"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true,\'Missing\')" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div><h2 id="showAll" class="box-title" style="margin-left: 26px;float: none;line-height: 16px;margin-top: 5px;"></h2>'
                + '<div class="row-group"><div class="col12"><div id="holder" style="width:100%;"><ul class="ul-data" id="ulDocumentLoading"></ul><ul class="ul-data" id="ulDocument"></ul><span id="uploaddocumentprocess" style="font-size:12px; display:none;"><img src="/Content/Images/loading.gif" /> Uploading...</span></div></div><div id="dvDocument" class="col12 pad-top"></div></div>';
                $("#dvtabSummaryDocumentView").html(details);
                $("#hdnnewdocumentfeature").text("No");
                $("#litabDocumentView").css("display", "none");
                documentview = "";
            }
            details = "";
            $(".openmenuDocumentMultiActions").contextMenu({ menu: 'dropdownMenuDocumentMultiActions', leftButton: true }, function (action, el, pos) { contextMenuDocumentMultiActions(action, el, pos); });
            $(".openmenuDocumentSort").contextMenu({ menu: 'dropdownMenuDocumentSort', leftButton: true }, function (action, el, pos) { contextMenuDocumentSort(action, el.parent("a"), pos); });
            //dynamic holder binding value
            holder = document.getElementById('holder');
            holder.ondragover = function (e) {
                if (document.getElementById("btnAddContractDocument").style.display != "none") {
                    e.preventDefault();
                    document.getElementById("holder").style.border = "2px dashed #428bca ";
                    $("#ulDocument").css("min-height", "100px");
                    document.getElementById("holder").style.opacity = "0.5";
                    e.dataTransfer.setData('text/html', "You dragged the image!");
                }
            };
            holder.ondragend = function () { this.className = ''; return false; };
            holder.ondragleave = function () {
                document.getElementById("holder").style.border = "2px dashed white";
                $("#ulDocument").css("min-height", "0px");
                $('#holder').css("opacity", "1");
                $('#holder').css("pointer-events", "auto");
            };
            var totalfiles = "";
            holder.ondrop = function (e) {
                if (contractItem.Permission != 'View' && contractItem.Permission != '' && contractItem.Permission != null) {
                    $("#loadingPage").fadeIn();
                    this.className = '';
                    e.preventDefault();
                    var files = e.dataTransfer.files;
                    var fileslength = files.length;
                    //if (document.getElementById("tbBulkControls").rows.length < 6) {
                    //if (fileslength <= 5) {
                    for (var i = 0; i < fileslength; i++) {
                        droppedfiles.push(files[i]);
                    }
                    totalfiles = files;
                    removedItems = [];
                    readfiles(files);
                    if (droppedfiles.length > 0) {
                        $(".cldraganddrop").css('display', 'none');
                        $('#btnBulkUploadSave').css('display', '');
                        $('#btnBulkUploadCancel').css('display', '');
                        $("#bulkuploaddoc").dialog("option", "title", "Bulk Document Upload");
                        $("#bulkuploaddoc").dialog("open");
                        $("#bulkuploaddoc").height("auto");
                        applybulkdocumetdraganddrop();
                    }
                    else {
                        document.getElementById("holder").style.border = "2px dashed white";
                        $("#ulDocument").css("min-height", "0px");
                        $('#holder').css("opacity", "1");
                        $('#holder').css("pointer-events", "auto");
                    }
                    $("#loadingPage").fadeOut();
                    //}
                    //else {
                    //    $("#loadingPage").fadeOut();
                    //    swal("", "Maximum 5 file(s) only allowed at a time....!");
                    //    document.getElementById("holder").style.border = "2px dashed white";
                    //    $("#ulDocument").css("min-height", "0px");
                    //    $('#holder').css("opacity", "1");
                    //    $('#holder').css("pointer-events", "auto");
                    //}
                    //}
                    //else {
                    //    $("#loadingPage").fadeOut();
                    //    swal("", "Maximum 5 file(s) only allowed at a time....!");
                    //    document.getElementById("holder").style.border = "2px dashed white";
                    //    $("#ulDocument").css("min-height", "0px");
                    //    $('#holder').css("opacity", "1");
                    //    $('#holder').css("pointer-events", "auto");
                    //}
                }
            }
            $('#btnAddContractDocument').click(function () {
                $("#lblTemplateDescription").text("");
                $('#addNewDocument').css("pointer-events", "auto");
                AddContractDocument();
                addbuttonclick = true;
            });

            $('#btnaddnewsubfolder').click(function () {
                //manoj
                if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
                    $(this).attr("placeholder", "Enter New sub-folder name");
                    $("#dvfoldercreation").dialog("option", "title", "Create Sub-folder");
                } else {
                    $(this).attr("placeholder", "Enter folder name");
                    $("#dvfoldercreation").dialog("option", "title", "Create Folder");
                }

                var selectedparentdocument = "";
                var headerid = $("#lblContractTitle").text();
                headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                selectedparentdocument = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                selectedparentdocument = (selectedparentdocument.charAt(0) != '/') ? '/' + selectedparentdocument : selectedparentdocument;
                selectedparentdocument = ((selectedparentdocument.substr(selectedparentdocument.length - 1)) != "/") ? selectedparentdocument + "/" : selectedparentdocument;
                //if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
                selectedparentdocument = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? selectedparentdocument + $('#showAll').text().replace(/ \/ /g, '/') + '/' : selectedparentdocument + headerid + '/';
                $("#hdnnewfolderurl").val(selectedparentdocument);
                $("#hdnnewfoldercreatedfrom").val("detailspage");
                $("#txtnewfoldervalue").removeClass('error');
                $("#errormsg_txtnewfoldervalue").remove();
                //$("#dvfoldercreation").dialog("option", "title", "Create Folder");
                $("#dvfoldercreation").dialog("open");
            });
            //dynamic holder binding value
            $("#showAll").html($("#hdnShowAllTextValueheader")[0].innerHTML);
            $("#hdnShowAllTextValueheader").html('');
            if (documentview == null || documentview == "" || documentview == 'folder') {
                if ($("#showAll").text().indexOf("/") >= 0) {
                    showfolderdocuments($("#showAll").find("a:last")[0])
                } else {
                    BindDocument(vContractID);
                }
            } else {
                DisplayDocument(documentview);
            }
            //GetContractPendingAction(true, "BindPeoples");
            $("#hdnFolderDocumentView").text('');
            $("#hdnShowAllTextValue").html('');
            PrvFolderselection = '';
            //Bind primary and pined document based on new feature
            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                CreateDocumentListPinView(vContractID);
            }
            //manoj
            BindMilestone(vContractID);
            GetContractActivities(vContractID);
            TermsAndClauseDocument(vContractID);
            BindNotes(vContractID);
            GetInnerFeatures();
            BindMetaData(contractItem, true);
            if (!pendingStarted) {
                $("#tblContractSettingMetadata").empty()
                $("#tblStartApprovalMetadata").empty()
                $("#tblEditcontractMetadata").empty()
                $("#tblActivitiesMetadata").empty()
                $("#tblJustInfoMetadata").empty()
            }

        } catch (e) {
            $("#loadingPage").fadeOut();
        }

        //pendingStarted = false;
        $("#tblContractSettingMetadata").empty();
        //GetContractPendingAction(false);
    }
}






function BackToList() {
    if (document.referrer.indexOf(window.location.hostname) != -1) {
        var referrer = document.referrer;
        if (referrer.indexOf('Contracts/CreateContract') >= 0 || referrer.indexOf('Contracts/EditContract') >= 0) {
            // var Stage = "";
            //  Stage = getParameterByName("Stage");
            if (Stage == "pipeline")
                if (getParameterByName("View") != '') {
                    window.location = '/Pipeline?View=' + getParameterByName("View")
                } else {
                    window.location = '/Pipeline'
                }
            else {
                if (getParameterByName("View") != '') {
                    window.location = '/Contracts?View=' + getParameterByName("View")
                } else {
                    window.location = '/Contracts'
                }
            }
        }
        else {
            //   var Stage = "";
            //  Stage = getParameterByName("Stage");
            if (Stage == "pipeline")
                if (getParameterByName("View") != '') {
                    window.location = '/Pipeline?View=' + getParameterByName("View")
                } else {
                    parent.history.back();
                }
            else {
                if (getParameterByName("View") != '') {
                    window.location = '/Contracts?View=' + getParameterByName("View")
                } else {
                    parent.history.back();
                }
            }
        }
    }
    else {
        parent.history.back();
    }
    return false;
}

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

function togglediv(firstObject, secondObject, imgObject) {
    $("#" + firstObject).slideToggle();
    $("#" + secondObject).slideToggle();

    var imgObj = $("#" + imgObject);

    if (imgObj.attr("title") == "Collapse") {
        imgObj.attr("title", "Expand");
        imgObj.attr("src", "../Content/Images/e-open.png");
    } else {
        imgObj.attr("title", "Collapse");
        imgObj.attr("src", "../Content/Images/e-close.png");
    }
}

function setBlankValueToHyphen(tableId) {
    $('#' + tableId + ' tr td').each(function () {
        var cellText = $(this).html();
        if (cellText == '' || cellText == '0') {
            $(this).html('-');
        }


    });
}

function AddStage() {
    var vLastRow = $("#tblStage tr:last").attr('id');
    var vRowLength = $("#tblStage tr").length;
    if (typeof vRowLength != 'undefined')
        vRowLength = parseInt(vRowLength) + 1;
    var totalFileCount = "1";
    if (typeof vLastRow == "undefined") {
        totalFileCount = "1";
    }
    else {
        totalFileCount = parseInt(vLastRow.replace("trStage", ""));
        totalFileCount += 1;
    }
    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
    htmlFormatFile += '<td class="width30 wf_approval start_workflow">';
    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95_a validelement" value="Stage ' + vRowLength + '"/>';
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width46 start_workflow">';
    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width20 padding_top_3px v_align_top start_workflow">';
    //If adhoc workflow is configured in settings
    if (workflowAdHoc) {
        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32"><option selected="selected">Serial</option><option>Parallel</option></select>';
    } else {
        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
    }
    htmlFormatFile += '</td>';
    htmlFormatFile += '<td class="width4 padding_top_10px v_align_top start_workflow">';
    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
    htmlFormatFile += '</td>';
    htmlFormatFile += '</tr>';

    $("#tblStage").append(htmlFormatFile);
    var $options = $("#ddlApprovers > option").clone();
    $('#ddlAssignTo' + totalFileCount).append($options);

    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
        if ($(this).val() != null) {
            if ($(this).val().length > 1)
                $("#ddlOrder" + vasstoid).prop('disabled', false);
            else {
                $("#ddlOrder" + vasstoid).prop('disabled', true);
                $("#ddlOrder" + vasstoid).val('Serial');
            }
        }
        else {
            $("#ddlOrder" + vasstoid).prop('disabled', true);
            $("#ddlOrder" + vasstoid).val('Serial');
        }
    });
}

function DeleteStage(n) {
    var vv = $(n.parentNode.parentNode).find('select');
    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    n.parentNode.parentNode.parentNode.removeChild(n.parentNode.parentNode);
    $("#tblStage tr").each(function (i, item) {

        if (typeof ($(item).attr('id')) != "undefined" && $(item).attr('id') != "" && $(item).attr('id') != null) {
            var ind = $(item).attr('id').replace('trStage', '');
            if (typeof (ind) != "undefined" && ind != "" && ind != null) {
                if ($("#txtStage" + ind).val().indexOf('Stage ') == 0) {
                    var replaceint = $("#txtStage" + ind).val().replace('Stage ', '');
                    if ($.isNumeric(replaceint)) {
                        if (!isNaN(parseInt(replaceint)) && !isNaN(parseInt(i)) && parseInt(replaceint) != (parseInt(i) + 1)) {
                            $("#txtStage" + ind).val('Stage ' + (parseInt(i) + 1))
                        }
                    }
                }
            }
        }
    })

}
//To restore contract
function RestoreContract() {

    var contractTitle = $("#lblContractTitle").text();
    swal({
        title: '',
        text: "Are you sure you want to <span style=\"font-weight:700\">restore " + contractTitle + "</span> record?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
function (confirmed) {
    if (confirmed) {
        var contractID = $("#hdnContractID").text();
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/RestoreContract?contractid=' + contractID,
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            cache: false,
            success: function (data) {
                $("#loadingPage").fadeOut();
                swal({
                    title: '',
                    text: data,

                },
 function (confirmed) {
     if (confirmed) {
         location = "/Contracts/ContractDetails?ContractID=" + contractID + "";
     }

 });

            },
            error: function (data) { $("#loadingPage").fadeOut(); }
        });
    }
    return;
});

}

function StartWorkflow() {
    if (requiredValidator("ulStartWorkflow", true)) {
        if (contractItem.IsPublic == "Yes") {
            StartWorkFlowProcess();
        } else {
            $("#loadingPage").fadeIn();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/contractpermission?contractid=' + vContractID,
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                "Content-Type": "application/json",
                cache: false,
                success: function (UserList) {
                    var PermittedUser = UserList.split(';');
                    $('#tblStage tr').each(function (i, row) {
                        var vRow = $(row).attr('id');
                        var vRowIndex = vRow.replace("trStage", "");
                        $('#ddlAssignTo' + vRowIndex + '_chosen').find('.chosen-choices li').find('span').each(function () {
                            PermittedUser.push($(this).text());
                        });
                    });
                    var ccsArr = [];
                    $($("#ddlWorkflowCC").val()).each(function (i, item) {
                        ccsArr.push(item);
                    });
                    var FilterArray = $.grep(ccsArr, function (nccsArr, iccsArr) {
                        return (PermittedUser.indexOf(nccsArr) == -1);
                    });
                    if (FilterArray.length > 0) {
                        var liuser = FilterArray.join(',');
                        if (liuser.lastIndexOf(",") > -1) {
                            liuser = liuser.substr(0, liuser.lastIndexOf(",")) + ' and ' + liuser.substr(liuser.lastIndexOf(",") + 1);
                        }
                        swal({
                            title: '',
                            //text: liuser + " are not a part of the contract, Are you sure add this user as <span style=\"font-weight:700\">Readonly Permission</span>'?",
                            text: "'<span style=\"font-weight:700\">" + liuser + "</span> do not have access to this contract, . Do you want to provide access?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                        function (confirmed) {
                            if (confirmed) {
                                StartWorkFlowProcess();
                            } else {
                                $("#loadingPage").fadeOut();
                            }
                            return;
                        });
                    } else {
                        StartWorkFlowProcess();
                    }
                },
                error: function (UserList) {
                    $("#loadingPage").fadeOut();
                }
            });
        }
    }
}

function StartWorkFlowProcess() {
    var vAutoUpdateObjectStatus;
    vAutoUpdateObjectStatus = $("#chkAutoUpdateStatus").is(':checked') ? 'Yes' : 'No';
    var sendSummary = $("#chkSendSummaryDoc").is(':checked') ? 'Yes' : 'No';
    $("#loadingPage").fadeIn();
    var vWorkflowStage = [];
    $('#tblStage tr').each(function (i, row) {
        var vRow = $(row).attr('id');
        var vRowIndex = vRow.replace("trStage", "");
        var stage = $("#txtStage" + vRowIndex).val();
        var order = $("#ddlOrder" + vRowIndex).find('option:selected').text();
        var approvers = $("#ddlAssignTo" + vRowIndex).val();
        var sendTo = '';

        $('#ddlAssignTo' + vRowIndex + '_chosen').find('.chosen-choices li').find('span').each(function () {
            if (sendTo == '') {
                sendTo = $(this).text();
            }
            else {
                sendTo += "; " + $(this).text();
            }
        });
        vWorkflowStage.push({
            "StageID": i + 1,
            "StageTitle": stage,
            "Participants": sendTo,
            "Order": order
        });
    });
    //*Harshitha 
    var nicInstance = nicEditors.findEditor('txtComment');
    var vcommentText = CleanWordFormatFromHTML(nicInstance.getContent());
    if (vcommentText.length <= 26500) {
        //var vcommentText = nicInstance.getContent();
        vcommentText = $('<div/>').text(vcommentText).html();
        var ccsArr = $("#ddlWorkflowCC").val();
        var ccs = '';
        $(ccsArr).each(function (i, item) {
            if (ccs == '') {
                ccs = item;
            }
            else {
                ccs += "; " + item;
            }
        });
        var vObject = "Contracts";
        var vTaskRouting = $("#lblddlRule").text();
        if ($("#hdWorkflowType").val() == "Document Review") { vObject = "Documents"; }
        if (workflowAdHoc == "on") { vTaskRouting = $("#ddlRule").find('option:selected').text(); }
        if (vTaskRouting != "Default" && vTaskRouting != "Ad-hoc") {
            vTaskRouting = "Conditional";
        }
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow',
            type: 'POST',
            "Content-Type": "application/json;charset=utf-8",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            data: {
                "Object": vObject,
                "ObjectID": $("#hdWorkflowObjectID").val(),
                "ObjectTitle": $("#hdWorkflowObjectTitle").val(),
                "WorkflowTitle": $("#txtWorkflowTitle").val(),
                "WorkflowType": $("#hdWorkflowType").val(),
                "CCs": ccs,
                "Notes": vcommentText,
                "DurationPerTask": $("#txtDuration").val(),
                "Initiator": localStorage.UserName,
                "StopIfRejectedByAnyParticipant": "No",
                "StopIfItemModified": "No",
                "WorkflowStage": vWorkflowStage,
                "ContractArea": $("#lblContractArea").text(),
                "BusinessArea": $("#lblBusinessArea").text(),
                "BusinessAreaPath": $("#lblBusinessAreaPath").text(),
                "AutoUpdateStatus": vAutoUpdateObjectStatus,
                //manoj
                "SendSummary": sendSummary,
                //manoj
                "TaskRouting": vTaskRouting
            },
            cache: false,
            success: function (status) {
                var vmsg = $("#hdWorkflowType").val() + " Workflow Started";
                $("#inprocessStartWorkflow").css('display', 'none');

                if ((vAutoUpdateObjectStatus == "Yes" || $("#hdIsPrimaryDoc").val() == "Yes") && contractItem.IsFinalized != "Yes") {
                    if (vObject == "Contracts") {
                        var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "About to Expire", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived"];
                        if ($.inArray(contractItem.Status, vContractStatus) !== -1)
                            vmsg = 'This Contract Record is moved to the Pipeline Contracts. Check "Pipeline" tab.';
                        contractItem.Status = "Awaiting Approval";
                        $("#lblApprovalWorkflow").text("In Progress");
                        $("#addActivityApproval").css('display', 'none');
                    }
                    else {
                        contractItem.Status = "Awaiting Review";
                    }
                    ContractTopActions();
                }
                $("#lblApprovalWorkflow").text("In Progress");
                BindUpdatedContractDetails(vContractID);
                if (vObject == "Documents") {
                    //manoj
                    if (documentview == null || documentview == "" || documentview == 'folder') {
                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                            var selectedfoldervalue = $('#showAll').find("a");
                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                            showfolderdocuments(parentdocumentdetails);
                        }
                        else {
                            BindDocument(vContractID);
                        }
                    } else {
                        DisplayDocument(documentview);
                    }
                    //GetContractPendingAction(true, "BindPeoples");
                    $("#hdnFolderDocumentView").text('');
                    $("#hdnShowAllTextValue").html('');
                    PrvFolderselection = '';
                    //Bind primary and pined document based on new feature
                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                        CreateDocumentListPinView(vContractID);
                    }
                    //manoj
                }

                $("#dvWorkflow").dialog("close");//ui-dialog-buttonset
                //manoj
                $("#txtWorkflowTitle").prop('readonly', false);
                //manoj
                GetContractActivities(vContractID);
                $("#loadingPage").fadeOut();
            },
            error: function () {
                $("#loadingPage").fadeOut();
            }
        });
    }
    else {
        $("#loadingPage").fadeOut();
        swal("", "Note can not exceed 26500 characters");
    }
}

// Catalog Related Methods
function ViewCommitments(catalogId, catalogTitle, catalogCommitment) {
    $("#loadingPage").fadeIn();
    $("#tblCommitmentMetadataDetail").empty();
    $('#tblCommitmentMetadataDetail').append('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Commitments?commitmentid=' + catalogCommitment,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
        "Content-Type": "application/json",
        cache: false,
        success: function (commitmententity) {

            $("#loadingPage").fadeOut();

            if (commitmententity != null) {

                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Catalog Title</td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + catalogTitle + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Volume / Quantity Commitments </td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityCommitment + '</td>';
                vMetadata += '</tr>';

                if (commitmententity.QuantityCommitment == "Yes") {

                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Minimum Quantity (Units) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityMin + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Maximum Quantity (Units) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityMax + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Period / Frequency </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.QuantityPeriod + '</td>';
                    vMetadata += '</tr>';

                }

                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Amount / Price Commitments </td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PriceCommitment + '</td>';
                vMetadata += '</tr>';

                if (commitmententity.PriceCommitment == "Yes") {

                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Minimum Amount (USD) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PriceMin + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Maximum Amount (USD) </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PriceMax + '</td>';
                    vMetadata += '</tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width50" style="font-size:14px;">Period / Frequency </td>';
                    vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.PricePeriod + '</td>';
                    vMetadata += '</tr>';

                }
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width50" style="font-size:14px;">Commitment Met ? </td>';
                vMetadata += '<td class="text width50" style="font-size:14px;">' + commitmententity.CommitmentMet + '</td>';
                vMetadata += '</tr>';
                $("#tblCommitmentMetadataDetail").html(vMetadata);
                setBlankValueToHyphen("tblCommitmentMetadataDetail");
                $("#commitmentViewPopup").dialog("option", "title", "View Commitments");
                $("#commitmentViewPopup").dialog("open");



            }
        },
        error: function (commitmententity) {

            $("#loadingPage").fadeOut();
        }
    });

}

function contextMenuCatalogs(action, el, pos) {

    switch (action) {
        case "view":
            {
                var catalogId = $(el).find("#CatalogID").text();
                ViewCatalogDetail(catalogId);
                break;
            }
        case "delete":
            {
                var catalogTitle = $(el).find("#CatalogTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + catalogTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             var catalogId = $(el).find("#CatalogID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + catalogId,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {
                     swal("", "Item Deleted");
                     getCatalogsbycontract(vContractID);
                 },
                 complete: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });


                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#CatalogID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + catalogId,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {
                        $("#lblCatalogCTitleEdit").text($("#lblContractTitle").text());

                        var validTill = "";
                        if (cataloentity.ValidUpto != null && cataloentity.ValidUpto != "") {
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { validTill = moment(new Date(cataloentity.ValidUpto)).format('MM/DD/YYYY'); }
                            else { validTill = moment(new Date(cataloentity.ValidUpto)).format(localStorage.AppDateFormat); }

                        }

                        $("#txtCatalogIDedit").val(cataloentity.RowKey);
                        $("#txtCatalogNameedit").val(cataloentity.CatalogName);
                        $("#txtCatalogUnitPriceedit").val(cataloentity.UnitPriceValue);

                        if (cataloentity.UnitPriceCurrency == "") {
                            if ($("#hdnBaseCurrency").val() == "")
                                $("#ddlCatalogCurrencyedit").val("0");
                            else
                                $("#ddlCatalogCurrencyedit").val($("#hdnBaseCurrency").val());
                        }
                        else
                            $("#ddlCatalogCurrencyedit").val(cataloentity.UnitPriceCurrency);

                        $("#txtCatalogUnitsedit").val(cataloentity.Units);
                        $("#dtCatalogValidTilledit").val(validTill);
                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });


                $("#catalogseditPopup").dialog("option", "title", "Edit Catalog");
                $("#catalogseditPopup").dialog("open");
                break;
            }

        case "manage":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#CatalogID").text();
                var catalogTitle = $(el).find("#CatalogTitle").text();
                var catalogCommitment = $(el).find("#CatalogCommitment").text();
                var catalogUnits = $(el).find("#CatalogUnits").text();
                var catalogCurrency = $(el).find("#CatalogCurrency").text();

                $("#lblminQty").text("");
                $("#lblmaxQty").text("");
                $("#lblminQtyEdit").text("");
                $("#lblmaxQtyEdit").text("");
                $("#lblminAmount").text("");
                $("#lblmaxAmount").text("");
                $("#lblminAmountEdit").text("");
                $("#lblmaxAmountEdit").text("");

                if (catalogUnits != "" && catalogUnits != null) {
                    $("#lblminQty").text(catalogUnits);
                    $("#lblmaxQty").text(catalogUnits);
                    $("#lblminQtyEdit").text(catalogUnits);
                    $("#lblmaxQtyEdit").text(catalogUnits);
                }

                if (catalogCurrency != "" && catalogCurrency != null) {
                    $("#lblminAmount").text(catalogCurrency);
                    $("#lblmaxAmount").text(catalogCurrency);
                    $("#lblminAmountEdit").text(catalogCurrency);
                    $("#lblmaxAmountEdit").text(catalogCurrency);
                }

                if (catalogCommitment != "") {
                    var commitmentId = catalogCommitment;

                    $("#lblCommitmentCatalogTitleEdit").text(catalogTitle);
                    $("#lblCommitmentCatalogIDEdit").text(catalogId);
                    $("#txtCommitmentIDedit").val(commitmentId);

                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Commitments?commitmentid=' + commitmentId,
                        type: 'GET',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        "Content-Type": "application/json",
                        cache: false,
                        success: function (commitmententity) {
                            $("#loadingPage").fadeOut();

                            if (commitmententity.PriceCommitment == "Yes") {

                                document.getElementById('trMinPriceEdit').style.display = '';
                                document.getElementById('trMaxPriceEdit').style.display = '';
                                document.getElementById('trPricePeriodEdit').style.display = '';

                                $('input:radio[id=rdCommitmentsPriceYesEdit]').attr('checked', true);

                                if (commitmententity.PricePeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyValidityEdit]').attr('checked', true);
                                }
                                else if (commitmententity.PricePeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTransactionEdit]').attr('checked', true);
                                }
                                else {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentAmountDurationEdit').val(commitmententity.PricePeriod);
                                }

                                $("#txtCommitmentsMinAmountUnitPriceEdit").val(commitmententity.PriceMin);
                                $("#txtCommitmentsMaxAmountUnitPriceEdit").val(commitmententity.PriceMax);




                            }
                            else {

                                document.getElementById('trMinPriceEdit').style.display = 'none';
                                document.getElementById('trMaxPriceEdit').style.display = 'none';
                                document.getElementById('trPricePeriodEdit').style.display = 'none';


                                $('input:radio[id=rdCommitmentsPriceNoEdit]').attr('checked', true);

                                if (commitmententity.PricePeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyValidityEdit]').attr('checked', true);
                                }
                                else if (commitmententity.PricePeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTransactionEdit]').attr('checked', true);
                                }
                                else if (commitmententity.PricePeriod == "") {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentAmountDurationEdit').val("Monthly");
                                }
                                else {
                                    $('input:radio[id=rdCommitmentPriceFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentAmountDurationEdit').val(commitmententity.PricePeriod);
                                }

                                $("#txtCommitmentsMinAmountUnitPriceEdit").val("");
                                $("#txtCommitmentsMaxAmountUnitPriceEdit").val("");
                            }



                            if (commitmententity.QuantityCommitment == "Yes") {

                                document.getElementById('trMinQtyEdit').style.display = '';
                                document.getElementById('trMaxQtyEdit').style.display = '';
                                document.getElementById('trQtyPeriodEdit').style.display = '';

                                $('input:radio[id=rdCommitmentsQuantityYes]').attr('checked', true)

                                if (commitmententity.QuantityPeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyValidityEdit]').attr('checked', true);
                                }
                                else if (commitmententity.QuantityPeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTransactionEdit]').attr('checked', true);
                                }
                                else {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentQtyDurationEdit').val(commitmententity.QuantityPeriod);
                                }

                                $("#txtCommitmentsMinQtyUnitsEdit").val(commitmententity.QuantityMin);
                                $("#txtCommitmentsMaxQtyUnitsEdit").val(commitmententity.QuantityMax);

                            }
                            else {

                                document.getElementById('trMinQtyEdit').style.display = 'none';
                                document.getElementById('trMaxQtyEdit').style.display = 'none';
                                document.getElementById('trQtyPeriodEdit').style.display = 'none';

                                $('input:radio[id=rdCommitmentsQuantityNoEdit]').attr('checked', true);

                                if (commitmententity.QuantityPeriod == "Contract Validity") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyValidityEdit]').attr('checked', true);
                                }
                                else if (commitmententity.QuantityPeriod == "Each Transaction") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTransactionEdit]').attr('checked', true);
                                }
                                else if (commitmententity.QuantityPeriod == "") {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentQtyDurationEdit').val("Monthly");
                                }
                                else {
                                    $('input:radio[id=rdCommitmentQtyFrequencyTimeEdit]').attr('checked', true);
                                    $('#ddlCommitmentQtyDurationEdit').val(commitmententity.QuantityPeriod);
                                }

                                $("#txtCommitmentsMinQtyUnitsEdit").val("");
                                $("#txtCommitmentsMaxQtyUnitsEdit").val("");
                            }

                            if (commitmententity.CommitmentMet == "Yes") {
                                $('input:radio[id=rdCommitmentMetEditYes]').attr('checked', true);
                            }
                            else {
                                $('input:radio[id=rdCommitmentMetEditNo]').attr('checked', true);
                            }






                        },
                        complete: function () {
                            $("#loadingPage").fadeOut();
                        }
                    });




                    $("#commitmenteditPopup").dialog("option", "title", "Manage Commitment");
                    $("#commitmenteditPopup").dialog("open");
                }
                else {
                    $("#loadingPage").fadeOut();
                    $("#lblCommitmentCatalogTitle").text(catalogTitle);
                    $("#lblCommitmentCatalogID").text(catalogId);

                    $('input:radio[id=rdCommitmentsQuantityNo]').attr('checked', true);
                    $('input:radio[id=rdCommitmentsPriceNo]').attr('checked', true);
                    $('input:radio[id=rdCommitmentPriceFrequencyTime]').attr('checked', true);
                    $('input:radio[id=rdCommitmentQtyFrequencyTime]').attr('checked', true);

                    document.getElementById('trminQty').style.display = 'none';
                    document.getElementById('trmaxQty').style.display = 'none';
                    document.getElementById('trQtyPeriod').style.display = 'none';
                    document.getElementById('trMinPrice').style.display = 'none';
                    document.getElementById('trMaxPrice').style.display = 'none';
                    document.getElementById('trPricePeriod').style.display = 'none';

                    $("#txtCommitmentsMinQtyUnits").val('');
                    $("#txtCommitmentsMaxQtyUnits").val('');
                    $("#txtCommitmentsMinAmountUnitPrice").val('');
                    $("#txtCommitmentsMaxAmountUnitPrice").val('');

                    $('#ddlCommitmentQtyDuration').val("Monthly");
                    $('#ddlCommitmentAmountDuration').val("Monthly");


                    $("#CommitmentAddPopup").dialog("option", "title", "Manage Commitment");
                    $("#CommitmentAddPopup").dialog("open");
                }


                break;
            }
    }
}



$("input[name='QtyCommitments']").on({
    'change': function () {
        $.each($("input[name='QtyCommitments']"),
                function () {
                    var ObjectId, ObjectValue;

                    if ($(this).is(':checked')) {


                        console.log(this);
                        ObjectId = $(this).attr('id');
                        ObjectValue = $(this).val();
                        if (ObjectValue == "No") {

                            document.getElementById('trminQty').style.display = 'none';
                            document.getElementById('trmaxQty').style.display = 'none';
                            document.getElementById('trQtyPeriod').style.display = 'none';

                        }
                        else {

                            document.getElementById('trminQty').style.display = '';
                            document.getElementById('trmaxQty').style.display = '';
                            document.getElementById('trQtyPeriod').style.display = '';
                        }


                    }

                }
              );
    }
});


$("input[name='PriceCommitments']").on({
    'change': function () {
        $.each($("input[name='PriceCommitments']"),
                function () {
                    var ObjectId, ObjectValue;

                    if ($(this).is(':checked')) {


                        console.log(this);
                        ObjectId = $(this).attr('id');
                        ObjectValue = $(this).val();
                        if (ObjectValue == "No") {

                            document.getElementById('trMinPrice').style.display = 'none';
                            document.getElementById('trMaxPrice').style.display = 'none';
                            document.getElementById('trPricePeriod').style.display = 'none';

                        }
                        else {

                            document.getElementById('trMinPrice').style.display = '';
                            document.getElementById('trMaxPrice').style.display = '';
                            document.getElementById('trPricePeriod').style.display = '';
                        }


                    }

                }
              );
    }
});



$("input[name='QtyCommitmentsEdit']").on({
    'change': function () {
        $.each($("input[name='QtyCommitmentsEdit']"),
                function () {
                    var ObjectId, ObjectValue;

                    if ($(this).is(':checked')) {


                        console.log(this);
                        ObjectId = $(this).attr('id');
                        ObjectValue = $(this).val();
                        if (ObjectValue == "No") {

                            document.getElementById('trMinQtyEdit').style.display = 'none';
                            document.getElementById('trMaxQtyEdit').style.display = 'none';
                            document.getElementById('trQtyPeriodEdit').style.display = 'none';

                        }
                        else {

                            document.getElementById('trMinQtyEdit').style.display = '';
                            document.getElementById('trMaxQtyEdit').style.display = '';
                            document.getElementById('trQtyPeriodEdit').style.display = '';
                        }


                    }

                }
              );
    }
});


$("input[name='PriceCommitmentsEdit']").on({
    'change': function () {
        $.each($("input[name='PriceCommitmentsEdit']"),
                function () {
                    var ObjectId, ObjectValue;

                    if ($(this).is(':checked')) {


                        console.log(this);
                        ObjectId = $(this).attr('id');
                        ObjectValue = $(this).val();
                        if (ObjectValue == "No") {

                            document.getElementById('trMinPriceEdit').style.display = 'none';
                            document.getElementById('trMaxPriceEdit').style.display = 'none';
                            document.getElementById('trPricePeriodEdit').style.display = 'none';

                        }
                        else {

                            document.getElementById('trMinPriceEdit').style.display = '';
                            document.getElementById('trMaxPriceEdit').style.display = '';
                            document.getElementById('trPricePeriodEdit').style.display = '';
                        }


                    }

                }
              );
    }
});







function ViewCatalogDetail(catalogid) {
    $("#loadingPage").fadeIn();
    $("#tblCatalogMetadataDetail").empty();
    $('#tblCatalogMetadataDetail').append('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + catalogid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
        "Content-Type": "application/json",
        cache: false,
        success: function (catalogentity) {

            $("#loadingPage").fadeOut();

            if (catalogentity != null) {

                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width40">Catalog Title</td>';
                vMetadata += '<td class="text width60">' + catalogentity.CatalogName + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Units </td>';
                vMetadata += '<td class="text width60">' + catalogentity.Units + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Units Price</td>';
                vMetadata += '<td class="text width60">';
                if (catalogentity.UnitPriceValue != '') {
                    vMetadata += catalogentity.UnitPriceValue + " " + catalogentity.UnitPriceCurrency;
                }
                vMetadata += '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Valid Till</td>';
                if (catalogentity.ValidUpto != null) {
                    var vDueDate = "";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { vDueDate = moment(new Date(catalogentity.ValidUpto)).format('MM/DD/YYYY'); }
                    else { vDueDate = moment(new Date(catalogentity.ValidUpto)).format(localStorage.AppDateFormat); }
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';


                $("#tblCatalogMetadataDetail").empty();
                $("#tblCatalogMetadataDetail").append(vMetadata);
                setBlankValueToHyphen("tblCatalogMetadataDetail");
                $("#catalogsViewPopup").dialog("option", "title", "View Catalog");
                $("#catalogsViewPopup").dialog("open");
                $("#catalogsViewPopup").height("auto");



            }
        }
    });
}

function getCatalogsbycontract(contractid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {

            $("#catalogDetailsTableBody").empty();
            if (data.length > 0) {
                document.getElementById('catalogDetailsTable').style.display = '';
                document.getElementById('NoCatalogDetails').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";

                    if (data[i].CommitmentID != null && data[i].CommitmentID != "") {
                        var color = "";
                        if (data[i].CommitmentMet != null) {
                            if (data[i].CommitmentMet == "Yes") {
                                color = '#01DF01';

                            }
                            else {
                                color = '#FF0000';
                            }


                        }
                        else {


                            color = '#FF0000';
                        }

                        var options = "";

                        if (data[i].CommitmentMet == "Yes") {
                            options += '<option style="width:60px;background-color:#01DF01;" selected value="Yes">Yes</option>';
                            options += '<option  style="width:60px;background-color:#FF0000;" value="No">No</option>';
                        }
                        else {
                            options += '<option style="width:60px;background-color:#01DF01;"  value="Yes">Yes</option>';
                            options += '<option  style="width:60px;background-color:#FF0000;" selected value="No">No</option>';
                        }


                        str = '<select id="ddl' + data[i].RowKey + '" style="background-color:' + color + ';" onchange="SelectedCommitmentMet(this);" >';
                        str += options;
                        str += '</select>';




                        strCom = '<a href="javascript:void(0)" onclick="ViewCommitments(\'' + data[i].RowKey + '\',\'' + data[i].CatalogName + '\',\'' + data[i].CommitmentID + '\')">View</a>';
                        strCommitment = data[i].CommitmentID;
                    }
                    else {
                        str = "-";
                        strCom = "-";
                        strCommitment = "";
                    }

                    var validDate = ""
                    if (data[i].ValidUpto != null && data[i].ValidUpto != "") {
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { validDate = moment(new Date(data[i].ValidUpto)).format('MM/DD/YYYY'); }
                        else { validDate = moment(new Date(data[i].ValidUpto)).format(localStorage.AppDateFormat); }
                    }


                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleCatalogs" onclick="checkMultipleCatalogs(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewCatalogDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].CatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedCatalogs"/>';
                    url += '&nbsp;<a id="aEdit' + data[i].RowKey + '" href="javascript:void(0);" class="title-edit-btn close1" onclick="MakeCatalogEditable(\'' + data[i].RowKey + '\')"><img src="/Content/Images/edit.png"></a>';

                    url += '&nbsp;<a id="aSave' + data[i].RowKey + '" href="javascript:void(0);" style="display:none;" class="title-edit-btn close1" onclick="MakeCatalogSave(this)"><img src="/Content/Images/save.png"></a>';

                    url += '&nbsp;<a id="aCancel' + data[i].RowKey + '" href="javascript:void(0);" style="display:none;" class="title-edit-btn close1" onclick="MakeCatalogCancel(\'' + data[i].RowKey + '\')"><img src="/Content/Images/Cancel_Task.png"></a></i>';



                    var htmlContent = "<tr>";
                    htmlContent += "<td  ><span>&nbsp;</span><p id='CatalogID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='CatalogTitle' style='display:none;'>" + data[i].CatalogName + "</span>";
                    htmlContent += "<span id='CatalogCommitment' style='display:none;'>" + strCommitment + "</span>";
                    htmlContent += "<span id='CatalogUnits' style='display:none;'>" + data[i].Units + "</span>";
                    htmlContent += "<span id='CatalogCurrency' style='display:none;'>" + data[i].UnitPriceCurrency + "</span>";

                    htmlContent += "<i>" + url + "</i></td>";
                    htmlContent += "<td ><span id='Units" + data[i].RowKey + "'>" + data[i].Units + "</span></td>";
                    htmlContent += "<td ><lable style='width:36px;' id='Price" + data[i].RowKey + "'>" + data[i].UnitPriceValue + "</lable>&nbsp;<lable>" + data[i].UnitPriceCurrency + "</lable></td>";
                    htmlContent += "<td >" + strCom + "</td>";
                    htmlContent += "<td >" + str + "</td>";
                    htmlContent += "<td style='width:18%;' ><lable id='lblvalid" + data[i].RowKey + "'>" + validDate + "</lable><input  id='txtvalid" + data[i].RowKey + "' type='text' style='display:none;width:100px;' value='" + validDate + "'></td>"
                    htmlContent += "</tr>";
                    $("#catalogDetailsTableBody").append(htmlContent);

                }
                $(".openmenuRelatedCatalogs").contextMenu({ menu: 'dropdownMenuRelatedCatalogs', leftButton: true }, function (action, el, pos) {
                    contextMenuCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                });

            }
            else {
                document.getElementById('catalogDetailsTable').style.display = 'none';
                document.getElementById('NoCatalogDetails').style.display = '';
            }
            $("#lblCatalogsCount").text(data.length);

        },
        error: function (data) {
            vExist = false;
            $("#lblCatalogsCount").text('0');
        }
    });

}

function MakeCatalogEditable(rowkey) {
    $("#aEdit" + rowkey).css('display', 'none');
    $("#aCancel" + rowkey).css('display', '');
    $("#aSave" + rowkey).css('display', '');

    $("#Units" + rowkey).attr('contentEditable', true);
    $("#valid" + rowkey).attr('contentEditable', true);
    $("#Price" + rowkey).attr('contentEditable', true);


    $("#Units" + rowkey).css({


        "padding": "0px 3px",
        "line-height": "17px",
        "border": "1px solid #ddd",
        "background-color": "#eee"

    }).focus();
    $("#Price" + rowkey).css({

        "border": "1px solid #ddd",
        "vertical-align": "top",
        "background-color": "#eee",
        "padding": "2px 2px 2px 3px",
        "width": "30px",
        "display": "inline-block",
        "margin-top": "-2px"


    });
    $("#txtvalid" + rowkey).css('display', '');
    $("#txtvalid" + rowkey).css({
        "width": "100px",
        "border": "1px solid #ddd",
        "padding": "3px 5px"
    });
    $("#lblvalid" + rowkey).css('display', 'none');
    $("#txtvalid" + rowkey).datepicker();

}

function MakeCatalogSave(obj) {
    $("#loadingPage").fadeIn();
    var vCatalogId = $(obj).parent("i").parent("td").parent("tr").find("#CatalogID").text();
    var vCatalogTitle = $(obj).parent("i").parent("td").parent("tr").find("#CatalogTitle").text();
    var catalogForm = "CatalogName=" + vCatalogTitle;

    catalogForm += "&Units=" + $("#Units" + vCatalogId).text();
    catalogForm += "&ContractID=" + vContractID;
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&UnitPriceValue=" + $("#Price" + vCatalogId).text();
    catalogForm += "&ValidUpto=" + $("#txtvalid" + vCatalogId).val();
    catalogForm += "&TotalPriceValue=" + "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogsquick?catalogid=' + vCatalogId,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();

            getCatalogsbycontract(vContractID);


        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });



}

function MakeCatalogCancel(rowkey) {


    $("#aEdit" + rowkey).css('display', '');
    $("#aCancel" + rowkey).css('display', 'none');
    $("#aSave" + rowkey).css('display', 'none');

    $("#Units" + rowkey).attr('contentEditable', false);
    $("#valid" + rowkey).attr('contentEditable', false);
    $("#Price" + rowkey).attr('contentEditable', false);


    $("#Units" + rowkey).css({
        "border": "",
        "background-color": ""

    }).focus();
    $("#Price" + rowkey).css({

        "border": "",
        "vertical-align": "",
        "background-color": "",
        "padding": "",
        "width": "",
        "display": "",
        "margin-top": ""
    });
    $("#txtvalid" + rowkey).css('display', 'none');
    $("#lblvalid" + rowkey).css('display', '');
    $("#txtvalid" + rowkey).datepicker();






}




function BindCurrencyForeditCatalog(currency) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/currencies',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];

                if (currency == item.Abbreviation) {
                    $("#ddlCatalogCurrencyedit").append("<option selected value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>")
                }
                else {
                    $("#ddlCatalogCurrencyedit").append("<option value='" + item.Abbreviation + "'>" + item.Abbreviation + "</option>")
                }

            }
        }
    });

}



var multipleChecks = "";
function checkMultipleCatalogs(object) {

    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#catalogActions").css('display', '');
        multipleChecks = multipleChecks + ';' + CatalogID;
    } else {
        multipleChecks = multipleChecks.replace(';' + CatalogID, '');
    }

    if (multipleChecks.trim() == "") {
        $("#catalogActions").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}


function multipleDeleteCatalog() {
    $(".hhide").hide();

    var multipleChecksArray = multipleChecks.split(';');
    var multipleChecksArraylength = multipleChecksArray.length;
    for (var i = 1; i < multipleChecksArraylength; i++) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + multipleChecksArray[i],
            type: 'DELETE',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
            cache: false,
            success: function (data) {
            }
        });



    }
}


function contextMenuCatalogMul(action, el, pos) {
    switch (action) {

        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to delete?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();

             var multipleChecksArray = multipleChecks.split(';');
             var multipleChecksArraylength = multipleChecksArray.length;
             for (var i = 1; i < multipleChecksArraylength; i++) {
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + multipleChecksArray[i],
                     type: 'DELETE',
                     dataType: 'json',
                     headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                     cache: false,
                     success: function (data) {
                     }
                 });



             }
             swal("", "Items Deleted");
             getCatalogsbycontract(vContractID);

             $("#catalogActions").css('display', 'none');
             $("#loadingPage").fadeOut();
         }
         return;
     });

                break;
            }
    }
}


function SelectedCommitmentMet(obj) {

    var curVal = $(obj).val();
    var curID = $(obj).attr('id');
    var CatID = $(obj).parent("td").parent("tr").find("#CatalogID").text();
    var Commitment = $(obj).parent("td").parent("tr").find("#CatalogCommitment").text();
    if (curVal == "Yes") {

        updateCommitmentMet(Commitment, curVal, CatID);

    }
    else if (curVal == "No") {
        updateCommitmentMet(Commitment, curVal, CatID);
    }

}

// Add More Click Event
$('#addCatalogpopup').click(function () {

    $("#hdncatalogselect").val("SINGLE");

    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });


    $("#lblCatalogCTitle").text($("#lblContractTitle").text());

    $("#txtCatalogName").val('');

    $("#txtCatalogUnits").val('');
    $("#txtCatalogUnitPrice").val('');
    $("#dtCatalogValidTill").val('');


    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlCatalogCurrency").val("0");
    else
        $("#ddlCatalogCurrency").val($("#hdnBaseCurrency").val());


    $('#catalogsAddPopup').dialog('open');
});


$('#addCatalogMultipopup').click(function () {

    $("#hdncatalogselect").val("MULTIPLE");

    if ($('#tbodyExistingMulProducts tr').length <= 0) {
        getProducts();
    } else {
        clearObligationproductsmul();
        $('#loadProduct').empty();
        $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsMulPopup").dialog("open");
    }

});

$('#btnMultipleCatalogAction').click(function () {
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span> catalog(s)?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             multipleDeleteCatalog();
             swal("", "Items Deleted");
             getCatalogsbycontract(vContractID);

             $("#btnMultipleCatalogAction").css('display', 'none');
             $("#loadingPage").fadeOut();
         }
         return;
     });

});



$('#viewProductDetails').click(function () {


    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();

    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }




});


$('#viewProductDetailsEdit').click(function () {

    var vTitle = $('#txtCatalogNameedit').val();
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProductsEdit(vTitle);

    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }

});


$('#addNewProductDetails').click(function () {
    document.getElementById('dvExistingProducts').style.display = 'none';
    document.getElementById('dvAddProducts').style.display = '';
    $("#txtProductName").val("");

    $("#txtProductUnits").val("");
    $("#txtProductUnitPrice").val("");

    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlProductCurrency").val("0");
    else
        $("#ddlProductCurrency").val($("#hdnBaseCurrency").val());



    $('#liSelectedProducts').empty();
    $('.ui-button:contains(OK)').hide()

    $(".ui-dialog-titlebar-close").hide();
});

$('#CancleNewProductDetails').click(function () {
    document.getElementById('dvExistingProducts').style.display = '';
    document.getElementById('dvAddProducts').style.display = 'none';
    $('.ui-button:contains(OK)').show();
    if ($('#txtCatalogName').val() != "") {
        $('#liSelectedProducts').html('<span style="font-size:11px;">' + $('#txtCatalogName').val() + '</span>');
    }

    $(".ui-dialog-titlebar-close").show();
});


$('#SaveNewProductDetails').click(function () {

    CreateProduct();



});


function AddProductPopup() {

    $("#txtProductName").val("");


    $("#txtProductUnits").val("");
    $("#txtProductUnitPrice").val("");

    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlProductCurrency").val("0");
    else
        $("#ddlProductCurrency").val($("#hdnBaseCurrency").val());



    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    $("#AddNewProductsPopup").dialog("option", "title", "New Product");
    $("#AddNewProductsPopup").dialog("open");
}




function CreateProduct() {
    $("#loadingPage").fadeIn();
    if (requiredValidator('ProductForm', false)) {

        var vTitle = $("#txtProductName").val();
        if (CheckProductTitleExist(vTitle)) {
            swal("", "Product record exist with titled " + vTitle + "");
            $("#loadingPage").fadeOut();
        }
        else {
            SaveProduct();

        }

    }
    else {
        $("#loadingPage").fadeOut();
    }

}








function SaveProduct() {
    var vTitle = $("#txtProductName").val();
    var productForm = "ProductName=" + vTitle;
    productForm += "&Units=" + $("#ddlProductUnits").val();
    productForm += "&UnitPriceValue=" + $("#txtProductUnitPrice").val();
    productForm += "&UnitPriceCurrency=" + $("#ddlProductCurrency option:selected").val();
    productForm += "&AccountID=" + localStorage.AccountID;
    productForm += "&CreatedBy=" + localStorage.UserName;
    productForm += "&ModifiedBy=" + localStorage.UserName;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products',
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: productForm,
        cache: false,
        success: function (data) {
            swal("", "Product Created");
            $("#AddNewProductsPopup").dialog("close");
            getProductsEdit(vTitle);



        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}


function CheckProductTitleExist(producttitle) {
    var vExist = true;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products?productTitle=' + producttitle,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {

            if (data == null)
            { vExist = false; }
            else
            { vExist = true; }
        },
        error: function (data) {
            vExist = false;
        }
    });
    return vExist;
}

function SearchProducts() {
    $("#tbodyExistingProducts").html('');
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products?searchkeyword=' + encodeURIComponent($("#txtSearchBoxProduct").val()) + '&customquery=&sortbyfield=CounterpartyName&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $('#loadProduct').empty();
            $("#tbodyExistingProducts").html('');
            $("#tbodyExistingMulProducts").html('');
            var ProductTags = [];
            var datalenght = data.length;
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                var article = "";
                var article1 = "";
                if (i == 0) {
                    article += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                    article1 += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                }
                var Units = "";
                var Price = "";

                if (item.Units != null && item.Units != "") {
                    Units = item.Units;
                }

                if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                    Price = item.UnitPriceValue;
                }
                else {
                    Price = "0";
                }
                if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                    Price += ' ' + item.UnitPriceCurrency;
                }
                else {
                    Price += ' ' + $("#hdnBaseCurrency").val();
                }

                article1 += '<tr>';
                article1 += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article1 += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article1 += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article1 += '<td>';


                article1 += '<input id="' + item.RowKey + '" type="checkbox" name="ExtProductsMul" value="' + item.ProductName + '" />&nbsp;';
                article1 += '<label for="' + item.RowKey + '" class="margin-right8" style="text-align: left;">' + item.ProductName + '</label>';

                article1 += '</td>';
                article1 += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article1 += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article1 += '</tr>';


                article += '<tr>';
                article += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article += '<td>';

                article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" value="' + item.ProductName + '" />';


                article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
                article += '</td>';
                article += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article += '</tr>';
                ProductTags.push(item.ProductName);
                $("#tbodyExistingProducts").append(article);
                $("#tbodyExistingMulProducts").append(article1);

            }

            $("#txtSearchBoxProduct").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProduct").val(uidetails.item.label);
                    SearchProducts();
                }
            });

            $("#txtSearchBoxProductMul").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProductMul").val(uidetails.item.label);
                    SearchProductsMul();
                }
            });
            $("#loadingPage").fadeOut();

            $('#compact-paginationProducts').css('display', '');

            var vCountMul = $("#tbodyExistingMulProducts tr").length;
            $('#compact-paginationMulProducts').pagination({
                items: vCountMul,
                itemsOnPage: 10,
                typeID: 'tbodyExistingMulProducts',
                cssStyle: 'compact-theme'
            });


            var vCount = $("#tbodyExistingProducts tr").length;
            $('#compact-paginationProducts').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tbodyExistingProducts',
                cssStyle: 'compact-theme'
            });

            //clearobligationproducts();
            $('input:radio[name=ExtProducts]').each(function (i, item) { if ($(item).val() == $("#txtObligationCatalogName").val()) { $(item).prop('checked', true); } });

            if ($("#hdncatalogselect").val() == "MULTIPLE" || $("#hdncatalogselect").val() == "FINANCIALMULTIPLE") {

                $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
                $("#viewProductsMulPopup").dialog("open");

            }
            else {

                $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
                $("#viewProductsPopup").dialog("open");

            }

        },
        error: function () {
            $('#compact-paginationProducts').css('display', 'none');
            $('#loadProduct').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });

}

function SearchProductsMul() {
    $("#loadingPage").fadeIn();
    $("#tbodyExistingMulProducts").html('');
    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products?searchkeyword=' + encodeURIComponent($("#txtSearchBoxProductMul").val()) + '&customquery=&sortbyfield=CounterpartyName&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            var datalenght = data.length;
            var article1 = "";
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];

                if (i == 0) {

                    article1 += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                }
                var Units = "";
                var Price = "";

                if (item.Units != null && item.Units != "") {
                    Units = item.Units;
                }

                if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                    Price = item.UnitPriceValue;
                }
                else {
                    Price = "0";
                }
                if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                    Price += ' ' + item.UnitPriceCurrency;
                }
                else {
                    Price += ' ' + $("#hdnBaseCurrency").val();
                }

                article1 += '<tr>';
                article1 += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article1 += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article1 += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article1 += '<td>';


                article1 += '<input id="' + item.RowKey + '" type="checkbox" name="ExtProductsMul" value="' + item.ProductName + '" />&nbsp;';
                article1 += '<label for="' + item.RowKey + '" class="margin-right8">' + item.ProductName + '</label>';

                article1 += '</td>';
                article1 += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article1 += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article1 += '</tr>';
            }
            $("#tbodyExistingMulProducts").html(article1);
            var vCount = $("#tbodyExistingMulProducts tr").length;
            if (vCount != 0) {
                $('#loadProductMul').html('');
                $('#compact-paginationMulProducts').css('display', '');
                $('#compact-paginationMulProducts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    typeID: 'tbodyExistingProducts',
                    cssStyle: 'compact-theme'
                });
            } else {
                $('#loadProductMul').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $('#compact-paginationMulProducts').css('display', 'none');
            }
        },
        error: function () {
            $('#compact-paginationMulProducts').css('display', 'none');
            $('#loadProductMul').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });

}



function getProducts() {

    $("#loadingPage").fadeIn();
    $("#tbodyExistingProducts").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (products) {
            obligationProducts = products;
            $('#loadProduct').empty();

            var ProductTags = [];
            var datalenght = products.length;
            for (var i = 0; i < datalenght; i++) {
                var item = products[i];
                var article = "";
                var article1 = "";
                if (i == 0) {
                    article += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                    article1 += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                }
                var Units = "";
                var Price = "";

                if (item.Units != null && item.Units != "") {
                    Units = item.Units;
                }

                if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                    Price = item.UnitPriceValue;
                }
                else {
                    Price = "0";
                }
                if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                    Price += ' ' + item.UnitPriceCurrency;
                }
                else {
                    Price += ' ' + $("#hdnBaseCurrency").val();
                }

                article1 += '<tr>';
                article1 += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article1 += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article1 += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article1 += '<td>';


                article1 += '<input id="' + item.RowKey + '" type="checkbox" name="ExtProductsMul" value="' + item.ProductName + '" />&nbsp;';
                article1 += '<label for="' + item.RowKey + '" class="margin-right8">' + item.ProductName + '</label>';

                article1 += '</td>';
                article1 += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article1 += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article1 += '</tr>';


                article += '<tr>';
                article += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article += '<td>';

                article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" value="' + item.ProductName + '" />';


                article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
                article += '</td>';
                article += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '">' + Units + '</label></td>';
                article += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '" >' + Price + '</label></td>';
                article += '</tr>';
                ProductTags.push(item.ProductName);
                $("#tbodyExistingProducts").append(article);
                $("#tbodyExistingMulProducts").append(article1);

            }

            $("#txtSearchBoxProduct").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProduct").val(uidetails.item.label);
                    SearchProducts();
                }
            });

            $("#txtSearchBoxProductMul").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProductMul").val(uidetails.item.label);
                    SearchProductsMul();
                }
            });
            $("#loadingPage").fadeOut();

            var vCountMul = $("#tbodyExistingMulProducts tr").length;
            $('#compact-paginationMulProducts').pagination({
                items: vCountMul,
                itemsOnPage: 10,
                typeID: 'tbodyExistingMulProducts',
                cssStyle: 'compact-theme'
            });


            var vCount = $("#tbodyExistingProducts tr").length;
            $('#compact-paginationProducts').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tbodyExistingProducts',
                cssStyle: 'compact-theme'
            });


            clearobligationproducts();
            $('input:radio[name=ExtProducts]').each(function (i, item) { if ($(item).val() == $("#txtObligationCatalogName").val()) { $(item).prop('checked', true); } });
            //$('input:radio[name=ExtProducts][value=' + $("#txtObligationCatalogName").val() + ']').prop('checked', true);


            if ($("#hdncatalogselect").val() == "MULTIPLE" || $("#hdncatalogselect").val() == "FINANCIALMULTIPLE") {

                $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
                $("#viewProductsMulPopup").dialog("open");

            }
            else {

                $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
                $("#viewProductsPopup").dialog("open");

            }
        },
        error: function (products) {
            $("#tbodyExistingProducts").html('No item found.');
            $("#tbodyExistingMulProducts").html('No item found.');
        }
    });
}

function getProductsEdit(vTitle) {
    $("#tbodyExistingProducts").empty();
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Products',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (products) {
            $('#loadProduct').empty();

            var ProductTags = [];
            var datalenght = products.length;
            for (var i = 0; i < datalenght; i++) {
                var item = products[i];
                var article = "";
                if (i == 0) {
                    article += '<tr><th>Product Name</th><th>Units</th><th>Price</th></tr>';
                }

                var Units = "";
                var Price = "";

                if (item.Units != null && item.Units != "") {
                    Units = item.Units;
                }

                if (item.UnitPriceValue != null && item.UnitPriceValue != "") {
                    Price = item.UnitPriceValue;
                }
                else {
                    Price = "0";
                }
                if (item.UnitPriceCurrency != null && item.UnitPriceCurrency != "") {
                    Price += ' ' + item.UnitPriceCurrency;
                }
                else {
                    Price += ' ' + $("#hdnBaseCurrency").val();
                }



                article += '<tr>';
                article += '<td id="ProductUnits" style="display:none;">' + item.Units + '</td>';
                article += '<td id="ProductPrice" style="display:none;">' + item.UnitPriceValue + '</td>';
                article += '<td id="ProductCurrency" style="display:none;">' + item.UnitPriceCurrency + '</td>';
                article += '<td>';


                if (item.ProductName == vTitle) {
                    article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" checked value="' + item.ProductName + '"  />';
                    //article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" checked value="' + item.ProductName + '" onchange="handleChange1();" />';
                    article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';

                } else {
                    article += '<input id="CP' + item.RowKey + '" type="radio" name="ExtProducts" class="css-checkbox" value="' + item.ProductName + '" />';
                    article += '<label for="CP' + item.RowKey + '" class="css-label margin-right8">' + item.ProductName + '</label>';
                }
                article += '</td>';
                article += '<td><label for="PU' + item.RowKey + '" class="margin-right8" value="' + Units + '"  >' + Units + '</label></td>';
                article += '<td><label for="PP' + item.RowKey + '" class="margin-right8" value="' + Price + '"  >' + Price + '</label></td>';
                article += '</tr>';
                ProductTags.push(item.ProductName);
                $("#tbodyExistingProducts").append(article);
            }

            $("#txtSearchBoxProduct").autocomplete({
                source: ProductTags,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxProduct").val(uidetails.item.label);
                    SearchProducts();
                }
            });

            var vCount = $("#tbodyExistingProducts tr").length;
            $('#compact-paginationProducts').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tbodyExistingProducts',
                cssStyle: 'compact-theme'
            });
            $("#loadingPage").fadeOut();
            $("#viewProductsPopup").dialog("option", "title", "Products Picker");
            $("#viewProductsPopup").dialog("open");

        }
    });

}



function AddProduct() {
    var vProduct = "";
    var vProductID = "";
    $('input:radio[name="ExtProducts"]:checked').each(function () {
        if (vProduct == "") {
            vProduct = this.value;
            vProductID = this.id;
        }
        else {
            vProduct += "; " + this.value;
            vProductID += "; " + this.id;
        }
    });
    if (vProduct != "") {




        var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductUnits').text();
        var Price = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();
        var Currency = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductCurrency').text();
        if (Units != null && Units != "" && Units != "null") {
            $('#txtCatalogUnitsedit').val(Units);
            $('#txtCatalogUnits').val(Units);
        }
        else {
            $('#txtCatalogUnitsedit').val("");
            $('#txtCatalogUnits').val("");
        }
        if (Price != null && Price != "" && Price != "null") {
            $('#txtCatalogUnitPriceedit').val(Price);
            $('#txtCatalogUnitPrice').val(Price);
        }
        else {
            $('#txtCatalogUnitPriceedit').val("");
            $('#txtCatalogUnitPrice').val("");
        }
        if (Currency != null && Currency != "" && Currency != "null") {
            $('#ddlCatalogCurrencyedit').val(Currency);
            $('#ddlCatalogCurrency').val(Currency);
        }
        else {

            if ($("#hdnBaseCurrency").val() == "") {
                $("#ddlCatalogCurrencyedit").val("0");
                $("#ddlCatalogCurrency").val("0");
            }

            else {
                $("#ddlCatalogCurrencyedit").val($("#hdnBaseCurrency").val());
                $("#ddlCatalogCurrency").val($("#hdnBaseCurrency").val());

            }

        }


        $('#txtCatalogName').val(vProduct);
        $('#txtTransProductName').val(vProduct);
        $('#txtCatalogNameedit').val(vProduct);
        return true;
    } else {

        swal("", "No Product has been selected.");
        return false;
    }

}






function SaveCataloginText() {

    var vCatalog = $('#txtCatalogName').val();

    if (vCatalog == "") {
        $('#liSelectedProducts').html('<span style="font-size:11px;">please select the one product.</span>');
    }
    else {

        $(this).dialog("close");

    }


}

function Updatecatalog() {

    $("#loadingPage").fadeIn();
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('CatalogFormEdit', false)) {

        var vTitle = $("#txtCatalogNameedit").val();
        var vCatalogId = $("#txtCatalogIDedit").val();

        if (!comparedates("StartDate", "ValidTill", "Valid Till should be greater than start date")) {

            swal("", "Valid Till should be greater than start date");
            $("#loadingPage").fadeOut();
        }
        else {
            UpdateCatalog(false);
        }

    }
    else {
        $("#loadingPage").fadeOut();
    }
    $("#spInProgress").css('visibility', 'hidden');


}

function Savecatalog() {


    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('CatalogForm', false)) {

        var vTitle = $("#txtCatalogName").val();

        $("#loadingPage").fadeIn();
        if (!comparedates("StartDate", "ValidTill", "Valid Till should be greater than start date")) {

            swal("", "Valid Till should be greater than start date");
            $("#loadingPage").fadeOut();
        }
        else {
            CreateCatalog(false);
        }

    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();

}

function CheckCatalogTitleExistForEdit(contractid, catalogtitle, catalogid) {
    var vExist = true;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + contractid + '&catalogtitle=' + catalogtitle,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            if (data == null)
            { vExist = false; }
            else
            {
                if (data.RowKey == catalogid)
                { vExist = false; }
                else
                { vExist = true; }

            }
        },
        error: function (data) {
            vExist = false;
        }
    });
    return vExist;
}

//Check the Request Title is Exists in the Request Table (Catalog Title is unique For a Particular Contract)
function CheckCatalogTitleExist(contractid, catalogtitle) {
    var vExist = true;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + contractid + '&catalogtitle=' + catalogtitle,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {

            if (data == null)
            { vExist = false; }
            else
            { vExist = true; }
        },
        error: function (data) {
            vExist = false;
        }
    });
    return vExist;
}

//Update Catalog
function UpdateCatalog(isdraft) {

    var vTitle = $("#txtCatalogNameedit").val();
    var vCatalogId = $("#txtCatalogIDedit").val();
    var catalogForm = "CatalogName=" + vTitle;

    catalogForm += "&Units=" + $("#txtCatalogUnitsedit").val();
    catalogForm += "&ContractID=" + vContractID;
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&UnitPriceValue=" + $("#txtCatalogUnitPriceedit").val().trim();
    catalogForm += "&UnitPriceCurrency=" + $("#ddlCatalogCurrencyedit option:selected").text();
    catalogForm += "&ValidUpto=" + $("#dtCatalogValidTilledit").val();
    catalogForm += "&TotalPriceValue=" + "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?catalogid=' + vCatalogId,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (isdraft) { //if saved as draft

                swal("", "Item Drafted");
            } else {

                swal("", "Item Updated");
            }
            $("#catalogseditPopup").dialog("close");
            getCatalogsbycontract(vContractID);
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

//Create Catalog
function CreateCatalog(isdraft) {

    var vTitle = $("#txtCatalogName").val();

    var catalogForm = "CatalogName=" + vTitle;

    catalogForm += "&CommitmentID=" + "";
    catalogForm += "&Units=" + $("#txtCatalogUnits").val();
    catalogForm += "&TotalPriceValue=" + "";
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&UnitPriceValue=" + $("#txtCatalogUnitPrice").val().trim();
    catalogForm += "&UnitPriceCurrency=" + $("#ddlCatalogCurrency option:selected").text();
    catalogForm += "&ValidUpto=" + $("#dtCatalogValidTill").val();

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {

            if (isdraft) { //if saved as draft

                swal("", "Item Drafted");

            } else {

                swal("", "Item Added");
            }
            getCatalogsbycontract(vContractID);
            $("#catalogsAddPopup").dialog("close");

        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}


//Commitments Related Methods

function SaveCommitments() {

    $("#loadingPage").fadeIn();


    if (requiredValidator('CommitmentForm', false)) {
        var Validate = true;
        var validate1 = true;
        var validate2 = true;
        var StringMessage = "";
        if ($("input:radio[name=QtyCommitments]:checked").val() == "Yes") {
            validate1 = ValidateMinandMax($("#txtCommitmentsMinQtyUnits").val(), $("#txtCommitmentsMaxQtyUnits").val());

            if (validate1) {

            }
            else {
                StringMessage = "Quantity,";
            }


        }

        if ($("input:radio[name=PriceCommitments]:checked").val() == "Yes") {
            validate2 = ValidateMinandMax($("#txtCommitmentsMinAmountUnitPrice").val(), $("#txtCommitmentsMaxAmountUnitPrice").val())

            if (validate2) {

            }
            else {
                StringMessage = "Price,";
            }


        }

        if (validate2 == true && validate1 == true) {
            Validate = true;
        }
        else {
            Validate = false;
        }


        StringMessage = removeLastChar(StringMessage, ',');
        if (Validate) {
            CreateCommitment();
        }
        else {
            $("#loadingPage").fadeOut();
            if (StringMessage == "Quantity,Price") {
                $("#txtCommitmentsMinQtyUnits").addClass('error');
                $("#txtCommitmentsMaxQtyUnits").addClass('error');
                $("#txtCommitmentsMinAmountUnitPrice").addClass('error');
                $("#txtCommitmentsMaxAmountUnitPrice").addClass('error');
            }
            else if (StringMessage == "Quantity") {
                $("#txtCommitmentsMinQtyUnits").addClass('error');
                $("#txtCommitmentsMaxQtyUnits").addClass('error');
            }
            else {
                $("#txtCommitmentsMinAmountUnitPrice").addClass('error');
                $("#txtCommitmentsMaxAmountUnitPrice").addClass('error');
            }

        }

    }
    else {
        $("#loadingPage").fadeOut();
    }

}


var removeLastChar = function (value, char) {
    var lastChar = value.slice(-1);
    if (lastChar == char) {
        value = value.slice(0, -1);
    }
    return value;
}


function ValidateMinandMax(minValue, MaxValue) {
    var validate = true;
    var min = parseFloat(minValue);
    var max = parseFloat(MaxValue);
    if (min >= max) {
        validate = false;
    }
    return validate;
}

function UpdateCommitments() {

    $("#loadingPage").fadeIn();

    if (requiredValidator('CommitmentFormEdit', false)) {

        var Validate = true;
        var validate1 = true;
        var validate2 = true;
        var StringMessage = "";
        if ($("input:radio[name=QtyCommitmentsEdit]:checked").val() == "Yes") {
            validate1 = ValidateMinandMax($("#txtCommitmentsMinQtyUnitsEdit").val(), $("#txtCommitmentsMaxQtyUnitsEdit").val());
            if (validate1) {

            }
            else {
                StringMessage = "Quantity,";
            }

        }

        if ($("input:radio[name=PriceCommitmentsEdit]:checked").val() == "Yes") {
            validate2 = ValidateMinandMax($("#txtCommitmentsMinAmountUnitPriceEdit").val(), $("#txtCommitmentsMaxAmountUnitPriceEdit").val())
            if (validate2) {

            }
            else {
                StringMessage += "Price,"
            }
        }
        if (validate2 == true && validate1 == true) {
            Validate = true;
        }
        else {
            Validate = false;
        }
        if (StringMessage != "") { StringMessage = removeLastChar(StringMessage, ','); }

        if (Validate) {
            UpdateCommitment();
        }
        else {
            $("#loadingPage").fadeOut();
            if (StringMessage == "Quantity,Price") {
                $("#txtCommitmentsMinQtyUnitsEdit").addClass('error');
                $("#txtCommitmentsMaxQtyUnitsEdit").addClass('error');
                $("#txtCommitmentsMinAmountUnitPriceEdit").addClass('error');
                $("#txtCommitmentsMaxAmountUnitPriceEdit").addClass('error');
            }
            else if (StringMessage == "Quantity") {
                $("#txtCommitmentsMinQtyUnitsEdit").addClass('error');
                $("#txtCommitmentsMaxQtyUnitsEdit").addClass('error');
                $("#txtCommitmentsMinAmountUnitPriceEdit").removeClass('error');
                $("#txtCommitmentsMaxAmountUnitPriceEdit").removeClass('error');
            }
            else {
                $("#txtCommitmentsMinAmountUnitPriceEdit").addClass('error');
                $("#txtCommitmentsMaxAmountUnitPriceEdit").addClass('error');
                $("#txtCommitmentsMinQtyUnitsEdit").removeClass('error');
                $("#txtCommitmentsMaxQtyUnitsEdit").removeClass('error');
            }

        }

    }
    else {
        $("#loadingPage").fadeOut();
    }



}

//Update Commitment
function UpdateCommitment() {

    var commitmentId = $("#txtCommitmentIDedit").val();
    var CatalogID = $("#lblCommitmentCatalogID").text();
    var CommitmentQty = "";
    var CommitmentPrice = "";
    var CommitmentQtyPeriod = "";
    var CommitmentPricePeriod = "";
    var CommitmentMinPrice = "";
    var CommitmentMaxPrice = "";
    var CommitmentMinQty = "";
    var CommitmentMaxQty = "";
    var commitmentForm = "ContractID=" + vContractID;

    if ($("input:radio[name=QtyCommitmentsEdit]:checked").val() == "Yes") {
        CommitmentQty = "Yes";
    }
    else {
        CommitmentQty = "No";
    }
    if ($("input:radio[name=PriceCommitmentsEdit]:checked").val() == "Yes") {
        CommitmentPrice = "Yes";
    }
    else {
        CommitmentPrice = "No";
    }

    if (CommitmentPrice == "Yes") {
        if ($("input:radio[name=CommitmentPriceFrequencyEdit]:checked").val() == "Contract Validity") {
            CommitmentPricePeriod = "Contract Validity";
        }
        else if ($("input:radio[name=CommitmentPriceFrequencyEdit]:checked").val() == "Time") {
            CommitmentPricePeriod = $("#ddlCommitmentAmountDurationEdit option:selected").val();
        }
        else {
            CommitmentPricePeriod = "Each Transaction";
        }

        CommitmentMinPrice = $("#txtCommitmentsMinAmountUnitPriceEdit").val();
        CommitmentMaxPrice = $("#txtCommitmentsMaxAmountUnitPriceEdit").val();

        commitmentForm += "&PriceMin=" + CommitmentMinPrice;
        commitmentForm += "&PriceMax=" + CommitmentMaxPrice;
        commitmentForm += "&PricePeriod=" + CommitmentPricePeriod;

    }
    else {
        CommitmentPricePeriod = "";
        CommitmentMinPrice = "";
        CommitmentMaxPrice = "";
        commitmentForm += "&PriceMin=" + CommitmentMinPrice;
        commitmentForm += "&PriceMax=" + CommitmentMaxPrice;
    }

    if (CommitmentQty == "Yes") {

        if ($("input:radio[name=CommitmentQtyFrequencyEdit]:checked").val() == "Contract Validity") {
            CommitmentQtyPeriod = "Contract Validity";
        }
        else if ($("input:radio[name=CommitmentQtyFrequencyEdit]:checked").val() == "Time") {
            CommitmentQtyPeriod = $("#ddlCommitmentQtyDurationEdit option:selected").val();
        }
        else {
            CommitmentQtyPeriod = "Each Transaction";
        }
        CommitmentMinQty = $("#txtCommitmentsMinQtyUnitsEdit").val();
        CommitmentMaxQty = $("#txtCommitmentsMaxQtyUnitsEdit").val();

        commitmentForm += "&QuantityMin=" + CommitmentMinQty;
        commitmentForm += "&QuantityMax=" + CommitmentMaxQty;
        commitmentForm += "&QuantityPeriod=" + CommitmentQtyPeriod;
    }
    else {
        CommitmentQtyPeriod = "";
        CommitmentMinQty = "";
        CommitmentMaxQty = "";
        commitmentForm += "&QuantityMin=" + CommitmentMinQty;
        commitmentForm += "&QuantityMax=" + CommitmentMaxQty;
    }




    commitmentForm += "&QuantityCommitment=" + CommitmentQty;
    commitmentForm += "&PriceCommitment=" + CommitmentPrice;
    commitmentForm += "&AccountID=" + localStorage.AccountID;
    commitmentForm += "&ModifiedBy=" + localStorage.UserName;
    commitmentForm += "&CommitmentMet=" + $("input:radio[name=CommitmentMetEdit]:checked").val();
    var CommitmentMet = $("input:radio[name=CommitmentMetEdit]:checked").val();

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Commitments?commitmentid=' + commitmentId,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: commitmentForm,
        cache: false,
        success: function (data) {
            UpdateCatalogCommitID(commitmentId, CatalogID, CommitmentMet, "Updated");
            $("#commitmenteditPopup").dialog("close");

        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}


//Create Commitment
function CreateCommitment() {

    var CommitmentQty = "";
    var CommitmentPrice = "";
    var CommitmentQtyPeriod = "";
    var CommitmentPricePeriod = "";
    var CommitmentMinPrice = "";
    var CommitmentMaxPrice = "";
    var CommitmentMinQty = "";
    var CommitmentMaxQty = "";

    if ($("input:radio[name=QtyCommitments]:checked").val() == "Yes") {
        CommitmentQty = "Yes";
    }
    else {
        CommitmentQty = "No";
    }

    var commitmentForm = "QuantityCommitment=" + CommitmentQty;

    if ($("input:radio[name=PriceCommitments]:checked").val() == "Yes") {
        CommitmentPrice = "Yes";
    }
    else {
        CommitmentPrice = "No";
    }

    if (CommitmentPrice == "Yes") {
        if ($("input:radio[name=CommitmentPriceFrequency]:checked").val() == "Contract Validity") {
            CommitmentPricePeriod = "Contract Validity";
        }
        else if ($("input:radio[name=CommitmentPriceFrequency]:checked").val() == "Time") {
            CommitmentPricePeriod = $("#ddlCommitmentAmountDuration option:selected").val();
        }
        else {
            CommitmentPricePeriod = "Each Transaction";
        }

        CommitmentMinPrice = $("#txtCommitmentsMinAmountUnitPrice").val();
        CommitmentMaxPrice = $("#txtCommitmentsMaxAmountUnitPrice").val();

        commitmentForm += "&PricePeriod=" + CommitmentPricePeriod;

    }
    else {
        CommitmentPricePeriod = "";
        CommitmentMinPrice = "";
        CommitmentMaxPrice = "";
    }

    if (CommitmentQty == "Yes") {
        if ($("input:radio[name=CommitmentQtyFrequency]:checked").val() == "Contract Validity") {
            CommitmentQtyPeriod = "Contract Validity";
        }
        else if ($("input:radio[name=CommitmentQtyFrequency]:checked").val() == "Time") {
            CommitmentQtyPeriod = $("#ddlCommitmentQtyDuration option:selected").val();
        }
        else {
            CommitmentQtyPeriod = "Each Transaction";
        }

        CommitmentMinQty = $("#txtCommitmentsMinQtyUnits").val();
        CommitmentMaxQty = $("#txtCommitmentsMaxQtyUnits").val();

        commitmentForm += "&QuantityPeriod=" + CommitmentQtyPeriod;
    }
    else {
        CommitmentQtyPeriod = "";
        CommitmentMinQty = "";
        CommitmentMaxQty = "";
    }


    var CatalogID = $("#lblCommitmentCatalogID").text();

    commitmentForm += "&PriceCommitment=" + CommitmentPrice;
    commitmentForm += "&QuantityMin=" + CommitmentMinQty;
    commitmentForm += "&QuantityMax=" + CommitmentMaxQty;
    commitmentForm += "&AccountID=" + localStorage.AccountID;
    commitmentForm += "&CreatedBy=" + localStorage.UserName;
    commitmentForm += "&ModifiedBy=" + localStorage.UserName;
    commitmentForm += "&PriceMin=" + CommitmentMinPrice;
    commitmentForm += "&PriceMax=" + CommitmentMaxPrice;
    commitmentForm += "&CommitmentMet=" + $("input:radio[name=CommitmentMet]:checked").val();
    var CommitmentMet = $("input:radio[name=CommitmentMet]:checked").val();

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Commitments?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: commitmentForm,
        cache: false,
        success: function (data) {
            UpdateCatalogCommitID(data, CatalogID, CommitmentMet, "Created");
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}


function updateCommitmentMet(commitmentID, CommitmentMet, CatalogID) {
    $("#loadingPage").fadeIn();

    var commitmentForm = "ContractID=" + vContractID;
    commitmentForm += "&CommitmentMet=" + CommitmentMet;
    commitmentForm += "&ModifiedBy=" + localStorage.UserName;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/Commitments/CommitmentMet?commitmentid=' + commitmentID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: commitmentForm,
        cache: false,
        success: function (data) {
            UpdateCatalogCommitID(commitmentID, CatalogID, CommitmentMet, "Updated");


        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });

}
//Update CommitmentID Column of the Catalog Table

function UpdateCatalogCommitID(commitmentID, CatalogID, CommitmentMet, Status) {
    var catalogForm = "CommitmentID=" + commitmentID;
    catalogForm += "&CommitmentMet=" + CommitmentMet;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs/commitmentid?catalogid=' + CatalogID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            swal("", "Commitment " + Status);
            $("#CommitmentAddPopup").dialog("close");
            getCatalogsbycontract(vContractID);


        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}


function SaveLabel() {
    var allowtosave = false;
    var RestricedCategory = [];
    //manoj
    if ($("#labelEditPopupaction").text() == "New") {
        if (arrLabelCollection.length > 0) {
            var CategoriesCollection = [];
            $.each(arrLabelCollection, function (arrLabel) {
                if (arrLabel != null) {
                    if ($.trim(arrLabelCollection[arrLabel].Category) != "") {
                        CategoriesCollection.push($.trim(arrLabelCollection[arrLabel].Category));
                    }
                }
            });
            var obj1 = {};
            //manoj
            var CategoriesList = [];
            $(CategoriesCollection).each(function (iCategories, itemCategories) {
                if (!(itemCategories in obj1)) {
                    if ($.trim(itemCategories) != "") {
                        CategoriesList.push($.trim(itemCategories));
                    }
                }
                obj1[itemCategories] = true;
            });
            $(CategoriesList).each(function (iCategoriesList, itemCategoriesList) {
                //manoj
                var FilterdCategory = $.grep(LabelsCategories, function (nCategory, iCategory) {
                    return (nCategory.LabelCategory == itemCategoriesList && nCategory.Restrict == "Yes");
                });
                if (FilterdCategory.length > 0) {
                    var repeatedcategories = $.grep(arrLabelCollection, function (nrepeated, irepeated) {
                        return (nrepeated.Category == itemCategoriesList);
                    });
                    if (repeatedcategories.length > 1) {
                        var repeatedautocategories = $.grep(arrLabelCollection, function (nautorepeated, iautorepeated) {
                            return (nautorepeated.Category == itemCategoriesList && nautorepeated.Auto == true);
                        });
                        var repeatednormalcategories = $.grep(arrLabelCollection, function (nnormalrepeated, inormalrepeated) {
                            return (nnormalrepeated.Category == itemCategoriesList && nnormalrepeated.Auto == false);
                        });
                        if (repeatedautocategories.length > 0 && repeatednormalcategories.length > 0) {
                            RestricedCategory.push(itemCategoriesList);
                        } else if (repeatednormalcategories.length > 1) {
                            RestricedCategory.push(itemCategoriesList);
                        }
                    }
                }
            });
            if (RestricedCategory.length == 0) {
                allowtosave = true;
            }
        } else {
            allowtosave = true;
        }
        //manoj
    } else {
        allowtosave = true;
    }
    //manoj
    if (allowtosave) {
        var vLabels = "";
        $(ContractLabels).each(function () {
            if (vLabels == "") {
                vLabels = this.toString();
            }
            else {
                vLabels += "; " + this.toString();
            }
        });
        var contractRecord = "Labels=" + vLabels;
        contractRecord += "&ModifiedBy=" + localStorage.UserName;
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/label?contractid=' + vContractID,
            type: 'PUT',
            headers: {
                'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
            },
            dataType: 'json',
            data:
                {
                    Labels: vLabels,
                    ModifiedBy: localStorage.UserName
                },
            cache: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (data) {
                $("#loadingPage").fadeOut();
                if (data != null) {
                    var permissiontoapply = contractItem.Permission;
                    contractItem = data;
                    if (contractItem.Permission == null || contractItem.Permission == "") {
                        contractItem.Permission = permissiontoapply;
                    }
                }
                //contractItem = data;
                BindContractLabels();
                $("#labelEditPopup").dialog("close");
            },
            error: function (data) {
            }
        });
    } else {
        var swalmessage = RestricedCategory.join(',');
        swalmessage = (swalmessage.trim().charAt(0) != ",") ? swalmessage.trim() : swalmessage.substr(1);
        swalmessage = swalmessage.trim();
        if (swalmessage.lastIndexOf(",") > -1) {
            swalmessage = swalmessage.substr(0, swalmessage.lastIndexOf(",")) + ' and ' + swalmessage.substr(swalmessage.lastIndexOf(",") + 1);
            $("#labelEditPopup").dialog("close");
            $("#loadingPage").fadeOut();
        }
        swal("", " '" + swalmessage.trim() + "' are restriced category.");
    }
}

function BindContractLabels() {

    $("#LabelsAdd").hide();
    $('#LabelEdit').hide();
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = [];
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "18" && n.Status == "ON");
    });

    lstSelectedLabels = contractItem.Labels;
    var AutoLable = [];
    if (contractItem.AutoLabels != '' && contractItem.AutoLabels != null) {
        AutoLable = contractItem.AutoLabels.split(';');
    }
    if (contractItem.Labels != '') {
        var txtLabelSpans = "";
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/label?labelNames=' + encodeURIComponent(contractItem.Labels),
            type: 'GET',
            dataType: 'json',
            cache: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (data) {
                $('#dvLabelList').empty();
                var datalenght = data.length;
                if (datalenght > 0) {
                    for (var i = 0; i < datalenght; i++) {
                        var item = data[i];
                        txtLabelSpans += '<span class="label margin-right-5" style="font-size:12px;background-color:#' + item.LabelColor.trim() + ' !important;">';
                        txtLabelSpans += '<small style="float: left;">' + item.LabelTitle + '</small>';
                        if (!($.inArray(item.LabelTitle, AutoLable) > -1 && vAccFeat.length > 0))
                            txtLabelSpans += '<img src="/Content/Images/close_white.png" onclick="javascript:RemoveSelectedLabel(this);" style="float: right; margin: 2px 0px 0px 3px;">';
                        txtLabelSpans += '</span>';
                    }
                    $('#dvLabelList').append(txtLabelSpans);
                    if ($("#hdnPermission").val() != 'View')
                        $('#LabelEdit').show();
                    $("#LabelsAdd").hide();
                }
                else {

                    $('#dvLabelList').empty();
                    var clickEdit = "";
                    if ($("#hdnPermission").val() != 'View')
                        $("#LabelsAdd").show();
                    $('#LabelEdit').hide();
                    $('#dvLabelList').append(clickEdit);
                }

            }, error: function (data) {
                $('#dvLabelList').empty();
                var clickEdit = "";
                if ($("#hdnPermission").val() != 'View')
                    $("#LabelsAdd").show();
                $('#LabelEdit').hide();
                $('#dvLabelList').append(clickEdit);
            }
        });
    } else {
        //var clickEdit = "";
        //if ($("#hdnPermission").val() != 'View')
        //    $("#LabelsAdd").show();
        //$('#LabelEdit').hide();
        //$('#dvLabelList').append(clickEdit);
        $('#dvLabelList').empty();

        if ($('#dvLabelList').children().length == 0) {
            if ($("#hdnPermission").val() != 'View')
                $("#LabelsAdd").show();
            $('#LabelEdit').hide();
            $('#dvLabelList').append("");
        }
    }
}

function RemoveSelectedLabel(obj) {
    var child = obj.parentNode;
    var lblText = child.firstChild.textContent;
    swal({
        title: '',
        text: "Are you sure you want to remove '<span style=\"font-weight:700\">" + lblText + "</span>'?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
     function (confirmed) {
         if (confirmed) {
             child.parentNode.removeChild(child);
             ContractLabels = jQuery.grep(ContractLabels, function (value) {
                 return value != lblText;
             });
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/label?contractid=' + getParameterByName('ContractID') + '&label=' + encodeURIComponent(lblText),
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {
                     // contractItem = data;
                     if (data != null) {
                         var permissiontoapply = contractItem.Permission;
                         contractItem = data;
                         if (contractItem.Permission == null || contractItem.Permission == "") {
                             contractItem.Permission = permissiontoapply;
                         }
                     }
                 }
             });
             if ($('#dvLabelList').children().length == 0) {
                 if ($("#hdnPermission").val() != 'View')
                     $("#LabelsAdd").show();
                 $('#LabelEdit').hide();

                 $('#dvLabelList').append("");
             }
         }
         return;
     });

}

function SearchLabels(isnew) {
    searchLabelsNew("Search");
}

function bindLabelCategory(action) {
    $("#loadingPage").fadeIn();
    $("#selCategoryFilter").html('<option value="All">All Category</option>')
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/alllabelcategories',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (contactsJsonPayload) {
            //manoj
            LabelsCategories = contactsJsonPayload;
            //manoj
            $(contactsJsonPayload).each(function (i, item) {
                $("#selCategoryFilter").append('<option value="' + escape(item.LabelCategory) + '">' + item.LabelCategory + '</option>');
            });
            searchLabelsNew(action);
        }, error: function (data) {
            searchLabelsNew(action);
        }
    });
}

//manoj
function searchLabelsNew(action) {
    if (action == "Search") {
        if ($.trim($("#txtSearchLabel").val()) != "") {
            $("#tblLabelPopup").html('<img src="../Content/Images/icon/loading.gif"> Searching...');
        } else {
            $("#tblLabelPopup").html('<img src="../Content/Images/icon/loading.gif"> ');
        }
    }
    //get all Labels
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/label',
        type: 'GET',
        dataType: 'json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (datalabel) {
            //manoj
            var data = $.grep(datalabel, function (ndata, idata) {
                return (ndata.LabelTitle != null && ndata.LabelTitle != "");
            });
            //manoj
            BindLabelTable(data, action);
        },
        error: function (data) {
            var labeldata = [];
            BindLabelTable(labeldata, action);
        }
    });
    //get all Labels
}

function BindLabelTable(labeldata, action) {
    var actionDetails = (action == "Search") ? $.trim($("#labelEditPopupaction").text()) : action;
    //manoj
    var Labels = [];
    var AutoLabels = [];
    var IsChecked = "";
    var IsDisabled = "";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = [];
    vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "18" && n.Status == "ON");
    });
    if (contractItem.Labels != null)
        Labels = $.map(contractItem.Labels.split(";"), $.trim);
    if (contractItem.AutoLabels != null)
        AutoLabels = $.map(contractItem.AutoLabels.split(";"), $.trim);
    var AllLabelCollection = Labels;
    $(AutoLabels).each(function (iAutoLabels, itemAutoLabels) {
        if ($.trim(itemAutoLabels) != "") {
            AllLabelCollection.push($.trim(itemAutoLabels));
        }
    });
    var obj1 = {};
    //manoj
    var FilterLabelCollection = [];
    $(AllLabelCollection).each(function (iAllLabel, itemAllLabel) {
        if (!(itemAllLabel in obj1)) {
            if ($.trim(itemAllLabel) != "") {
                FilterLabelCollection.push($.trim(itemAllLabel));
            }
        }
        obj1[itemAllLabel] = true;
    });
    $(FilterLabelCollection).each(function (iFilterLabel, itemFilterLabel) {
        var FilteredLabelsDetails = $.grep(labeldata, function (nFilteredLabel, iFilteredLabel) {
            return (nFilteredLabel.LabelTitle == itemFilterLabel);
        });
        if (FilteredLabelsDetails.length > 0) {
            if (AutoLabels.indexOf(FilteredLabelsDetails[0].LabelTitle) > -1 && vAccFeat.length > 0) {
                var arrLabelAvailable = $.grep(arrLabelCollection, function (nAvailable, iAvailable) {
                    return (nAvailable.Label == FilteredLabelsDetails[0].LabelTitle && nAvailable.Category == FilteredLabelsDetails[0].LabelCategory);
                });
                if (arrLabelAvailable.length == 0) {
                    var LabelDetails = { Category: FilteredLabelsDetails[0].LabelCategory, Label: FilteredLabelsDetails[0].LabelTitle, Auto: true };
                    arrLabelCollection.push(LabelDetails);
                }
            } else if (Labels.indexOf(FilteredLabelsDetails[0].LabelTitle) > -1 && (action == "Add" || action == "New")) {
                var arrLabelAvailable = $.grep(arrLabelCollection, function (nAvailable, iAvailable) {
                    return (nAvailable.Label == FilteredLabelsDetails[0].LabelTitle && nAvailable.Category == FilteredLabelsDetails[0].LabelCategory);
                });
                if (arrLabelAvailable.length == 0) {
                    var LabelDetails = { Category: FilteredLabelsDetails[0].LabelCategory, Label: FilteredLabelsDetails[0].LabelTitle, Auto: false };
                    arrLabelCollection.push(LabelDetails);
                }
            } else if (action != "Search") {
                var arrLabelAvailable = $.grep(arrLabelCollection, function (nAvailable, iAvailable) {
                    return (nAvailable.Label == FilteredLabelsDetails[0].LabelTitle && nAvailable.Category == FilteredLabelsDetails[0].LabelCategory);
                });
                if (arrLabelAvailable.length == 0) {
                    var LabelDetails = { Category: FilteredLabelsDetails[0].LabelCategory, Label: FilteredLabelsDetails[0].LabelTitle, Auto: false };
                    arrLabelCollection.push(LabelDetails);
                }
            }
        }
    });

    var FilteredLabels = [];
    if ($("#txtSearchLabel").val() != "") {
        FilteredLabels = $.grep(labeldata, function (nlabel, ilabel) {
            return (nlabel.LabelTitle.toLowerCase().indexOf($("#txtSearchLabel").val().toLowerCase()) > -1 || nlabel.LabelCategory.toLowerCase().indexOf($("#txtSearchLabel").val().toLowerCase()) > -1);
        });
    } else {
        FilteredLabels = labeldata;
    }
    if ($("#selCategoryFilter").val() != "All" && $("#selCategoryFilter").val() != null && typeof ($("#selCategoryFilter").val()) != "undefined") {
        FilteredLabels = $.grep(FilteredLabels, function (nlabel, ilabel) {
            return (nlabel.LabelCategory == unescape($("#selCategoryFilter").val()));
        });
    }

    var lblRow = "";
    var relatedTag = [];
    $.each(FilteredLabels, function (key, row) {
        if (row.LabelTitle != "" && row.LabelTitle != null) {
            IsChecked = "";
            IsDisabled = "";
            if (Labels.length != 0 && $.inArray(row.LabelTitle, Labels) > -1) {

                if ($.inArray(row.LabelTitle, ContractLabels) == -1 && (action == "Add" || action == "New")) {
                    ContractLabels.push(row.LabelTitle);
                    IsChecked = "checked";
                }
                if (AutoLabels.length != 0 && $.inArray(row.LabelTitle, AutoLabels) > -1 && vAccFeat.length > 0) {
                    IsChecked = "checked";
                    IsDisabled = "disabled";
                }
            }
            if (ContractLabels.length != 0 && $.inArray(row.LabelTitle, ContractLabels) > -1) {
                IsChecked = "checked";
            }
            lblRow += "<tr><td ><input type='checkbox' " + IsChecked + "  id='chkLabel" + row.RowKey + "' name='chkLabel' value='" + row.LabelTitle + "' onchange='ChangeLableCheck(this)'";
            if (IsDisabled != "") {
                lblRow += "class='autodisabledlabel " + row.LabelCategory + "'";
                lblRow += "disabled='disabled'";
                lblRow += "data-category='" + row.LabelCategory + "'";
            } else {
                lblRow += "class='" + row.LabelCategory + "'";
                lblRow += "data-category='" + row.LabelCategory + "'";
            }
            lblRow += "'><label class='css-label margin-right8 lblSrchLabel'>" + row.LabelTitle + "</label></td><td><label class='css-label margin-right8 lblSrchLabel'>" + row.LabelCategory + "</label></td></tr>";
            relatedTag.push(row.LabelTitle);
        }
    });
    $("#txtSearchLabel").autocomplete({
        source: relatedTag,
        minLength: 1,
        focus: function (event, ui) {
            return false;
        },
        select: function (evn, uidetails) {
            $("#txtSearchLabel").val(uidetails.item.label);
            SearchLabels();
        }
    });
    $("#tblLabelPopup").html(lblRow);

    $('#compact-paginationLabel').pagination({
        items: $("#tblLabelPopup tr").length,
        itemsOnPage: 10,
        type: 'tbody',
        row: 'tr',
        typeID: 'tblLabelPopup',
        cssStyle: 'compact-theme'
    });

    if (action == 'New') {


        disablelabelbysearch();
        //manoj
        $("#loadingPage").fadeOut();
        $("#labelEditPopupaction").text("New");
        $("#labelEditPopup").dialog("option", "title", "Edit Label");
        $("#labelEditPopup").dialog("open");
        $("#labelEditPopup").height("auto");
    } else if (action == 'Add') {
        $("#loadingPage").fadeOut();
        $("#labelEditPopupaction").text("Add");
        $("#labelEditPopup").dialog("option", "title", "Add Label");
        $("#labelEditPopup").dialog("open");
        $("#labelEditPopup").height("auto");
    } else if (action == 'Search') {
        disablelabelbysearch();
    }
}
//manoj

//Transactions Methods


$('#addTransactionpopup').click(function () {

    $("#lblTransactionCTitle").text($("#lblContractTitle").text());

    $("#txtTransProductName").val('');

    $("#txtTransItems").val('');
    $("#txtTransAmount").val('');
    $("#dtTransDate").val('');

    $("#ddlTransactionStatus").val("0");
    $("#ddlTransactionCompliance").val("0");


    if ($("#hdnBaseCurrency").val() == "")
        $("#ddlTransactionCurrency").val("0");
    else
        $("#ddlTransactionCurrency").val($("#hdnBaseCurrency").val());


    $('#transactionAddPopup').dialog('open');
});


$('#viewTransProductDetails').click(function () {

    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();

    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Product Picker");
        $("#viewProductsPopup").dialog("open");
    }

});

function SaveMulProducts() {
    $("#loadingPage").fadeIn();

    $('input:checkbox[name="ExtProductsMul"]:checked').each(function () {

        var vProduct = this.value;
        var vProductID = this.id;
        var Units = "";
        var Price = "";
        var Currency = "";
        if ($(this).parent().parent().find('#ProductUnits').text() != null && $(this).parent().parent().find('#ProductUnits').text() != "" && $(this).parent().parent().find('#ProductUnits').text() != "null") {
            Units = $(this).parent().parent().find('#ProductUnits').text();
        }

        if ($(this).parent().parent().find('#ProductPrice').text() != null && $(this).parent().parent().find('#ProductPrice').text() != "" && $(this).parent().parent().find('#ProductPrice').text() != "null") {
            Price = $(this).parent().parent().find('#ProductPrice').text();
        }

        if ($(this).parent().parent().find('#ProductCurrency').text() != null && $(this).parent().parent().find('#ProductCurrency').text() != "" && $(this).parent().parent().find('#ProductCurrency').text() != "null") {
            Currency = $(this).parent().parent().find('#ProductCurrency').text();
        }
        else {
            Currency = $("#hdnBaseCurrency").val();
        }

        var catalogForm = "CatalogName=" + vProduct;

        catalogForm += "&CommitmentID=" + "";
        catalogForm += "&Units=" + Units;
        catalogForm += "&TotalPriceValue=" + "";
        catalogForm += "&AccountID=" + localStorage.AccountID;
        catalogForm += "&CreatedBy=" + localStorage.UserName;
        catalogForm += "&ModifiedBy=" + localStorage.UserName;
        catalogForm += "&UnitPriceValue=" + Price;
        catalogForm += "&UnitPriceCurrency=" + Currency;
        catalogForm += "&ValidUpto=" + "";

        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/catalogs?contractid=' + vContractID,
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            data: catalogForm,
            cache: false,
            success: function (data) {

            },
            error: function (data) {
                $("#loadingPage").fadeOut();
            }
        });
    });

    getCatalogsbycontract(vContractID);
    $("#loadingPage").fadeOut();
}

$("#ddlRelationshipType").change(function () {
    $("#ddlRelationshipTypeParent").empty();

    var jsLang = this.value;
    var rowK = jQuery.grep(RelationshipTypes, function (a) {
        return a[0] === jsLang;
    });
    if (rowK != null && typeof (rowK) != "undefined" && rowK.length != 0) {
        var Relationship = rowK[0];
        $("#ddlRelationshipTypeParent").append("<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>");
        $.each(Relationship[2], function (index, value) {
            var optRel2 = value.toString();
            $("#ddlRelationshipTypeParent").append("<option value='" + optRel2 + "'>" + optRel2 + "</option>");
        })
        //if ($(Relationship[2]).length == 0) {
        //    var optRel2 = Relationship[1].toString();
        //    $("#ddlRelationshipTypeParent").append("<option value='" + optRel2 + "'>" + optRel2 + "</option>");
        //}
    }
    else {
        switch (jsLang) {
            case 'Master Agreement':
                $("#ddlRelationshipTypeParent").append("<option value='Master Agreement'>Master Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Sub-Agreement'>Sub-Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='SOW'>SOW</option>");
                break;
            case 'Prime Contractor Agreement':
                $("#ddlRelationshipTypeParent").append("<option value='Prime Contractor Agreement'>Prime Contractor Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Sub Contractor Agreement'>Sub Contractor Agreement</option>");
                break;
            case 'Blanket Agreement':
                $("#ddlRelationshipTypeParent").append("<option value='Blanket Agreement'>Blanket Agreement</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Order'>Order</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Invoice'>Invoice</option>");
                break;
            case 'Original':
                $("#ddlRelationshipTypeParent").append("<option value='Original'>Original</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Duplicate'>Duplicate</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Copy'>Copy</option>");
                break;
            case 'Past Contract':
                $("#ddlRelationshipTypeParent").append("<option value='Past Contract'>Past Contract</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Renegotiated Contract'>Renegotiated Contract</option>");
                break;
            case 'Primary Contract':
                $("#ddlRelationshipTypeParent").append("<option value='Primary Contract'>Primary Contract</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Amendment'>Amendment</option>");
                $("#ddlRelationshipTypeParent").append("<option value='Modification'>Modification</option>");
                break;
            case 'Other':
                $("#ddlRelationshipTypeParent").append("<option value='Other'>Other</option>");
                break;
        }
    }

    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
        $(this).parent().parent().children(".ddl").empty();
        var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
        var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
        RelatedContractRelationShipTypeparent = jsLang;
        var jsLangType = $("#ddlRelationshipType option:selected").val();
        var rela1 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[1] === jsLang && a[0] === jsLangType);
        });
        var rela2 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
        });
        if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
            var Relationship = rela1[0];
            $.each(Relationship[2], function (index, value) {
                var optRel2 = value.toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            })
            if ($(Relationship[2]).length == 0) {
                var optRel2 = Relationship[1].toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            }
        }
        else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
            var Relationship = rela2[0];
            vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
        }
        else {
            switch (jsLang) {
                case 'Master Agreement':
                    vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                    vOptions += '<option value="SOW">SOW</option>';
                    break;
                case 'Sub-Agreement':
                case 'SOW':
                    vOptions += '<option value="Master Agreement">Master Agreement</option>';
                    break;
                case 'Prime Contractor Agreement':
                    vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                    break;
                case 'Sub Contractor Agreement':
                    vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                    break;
                case 'Blanket Agreement':
                    vOptions += '<option value="Order">Order</option>';
                    vOptions += '<option value="Invoice">Invoice</option>';
                    break;
                case 'Order':
                case 'Invoice':
                    vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                    break;
                case 'Original':
                    vOptions += '<option value="Duplicate">Duplicate</option>';
                    vOptions += '<option value="Copy">Copy</option>';
                    break;
                case 'Duplicate':
                case 'Copy':
                    vOptions += '<option value="Original">Original</option>';
                    break;
                case 'Past Contract':
                    vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                    break;
                case 'Renegotiated Contract':
                    vOptions += '<option value="Past Contract">Past Contract</option>';
                    break;
                case 'Primary Contract':
                    vOptions += '<option value="Amendment">Amendment</option>';
                    vOptions += '<option value="Modification">Modification</option>';
                    break;
                case 'Amendment':
                case 'Modification':
                    vOptions += '<option value="Primary Contract">Primary Contract</option>';
                    break;
                case 'Other':
                    vOptions += '<option value="Other">Other</option>';
                    break;
            }
        }

        vOptions += '</select>';
        $(this).parent().parent().children(".ddl").append(vOptions);
    });
    showallspans("");
});

$("#ddlRelationshipTypeParent").change(function () {

    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
        $(this).parent().parent().children(".ddl").empty();
        var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
        var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
        RelatedContractRelationShipTypeparent = jsLang;
        var jsLangType = $("#ddlRelationshipType option:selected").val();
        var rela1 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[1] === jsLang && a[0] === jsLangType);
        });
        var rela2 = jQuery.grep(RelationshipTypes, function (a) {
            return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
        });
        if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
            var Relationship = rela1[0];
            $.each(Relationship[2], function (index, value) {
                var optRel2 = value.toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            })
            if ($(Relationship[2]).length == 0) {
                var optRel2 = Relationship[1].toString();
                vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
            }
        }
        else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
            var Relationship = rela2[0];
            vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
        }
        else {
            switch (jsLang) {
                case 'Master Agreement':
                    vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                    vOptions += '<option value="SOW">SOW</option>';
                    break;
                case 'Sub-Agreement':
                case 'SOW':
                    vOptions += '<option value="Master Agreement">Master Agreement</option>';
                    break;
                case 'Prime Contractor Agreement':
                    vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                    break;
                case 'Sub Contractor Agreement':
                    vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                    break;
                case 'Blanket Agreement':
                    vOptions += '<option value="Order">Order</option>';
                    vOptions += '<option value="Invoice">Invoice</option>';
                    break;
                case 'Order':
                case 'Invoice':
                    vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                    break;
                case 'Original':
                    vOptions += '<option value="Duplicate">Duplicate</option>';
                    vOptions += '<option value="Copy">Copy</option>';
                    break;
                case 'Duplicate':
                case 'Copy':
                    vOptions += '<option value="Original">Original</option>';
                    break;
                case 'Past Contract':
                    vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                    break;
                case 'Renegotiated Contract':
                    vOptions += '<option value="Past Contract">Past Contract</option>';
                    break;
                case 'Primary Contract':
                    vOptions += '<option value="Amendment">Amendment</option>';
                    vOptions += '<option value="Modification">Modification</option>';
                    break;
                case 'Amendment':
                case 'Modification':
                    vOptions += '<option value="Primary Contract">Primary Contract</option>';
                    break;
                case 'Other':
                    vOptions += '<option value="Other">Other</option>';
                    break;
            }
        }

        vOptions += '</select>';
        $(this).parent().parent().children(".ddl").append(vOptions);
    });
    showallspans("");
});

function liRemoveRelationship(obj) {
    lblcontracttitle = $("#lblContractTitle").text();
    // alert(lblcontracttitle)
    var child = obj.parentNode;
    var relatedContractTitle = child.textContent;
    var relatedContractidtodelete = child.id;
    var selectedcontract = $.grep(OlRelatedContracts, function (n) {
        return n.RelatedContractID == relatedContractidtodelete
    })
    var relationShipType = "";
    if (selectedcontract.length > 0)
        relationShipType = selectedcontract[0].RelationshipType;

    swal({
        title: '',
        text: "Do you wish to remove the relationship between the <span style=\"font-weight:700\">'" + lblcontracttitle + "(" + relationShipType + ")" + "' and '" + relatedContractTitle + "' </span>?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
     function (confirmed) {
         if (confirmed) {

             if (!addbuttonclick) {
                 child.parentNode.removeChild(child);
                 var relatedContractID = child.id;
                 $('#loadContract').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
                 $("#loadingPage").fadeIn();
                 $('#tblPopupContracts').empty();
                 $("#txtSearchBoxContract").val("");
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName('ContractID') + '/relatedcontracts?relatedcontractid=' + relatedContractID,
                     type: 'DELETE',
                     dataType: 'json',
                     headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                     "Content-Type": "application/json",
                     cache: false,
                     success: function (data) {
                         BindRelatedContracts();
                         var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getrelatedcontracts?stage=&searchkeyword=&customquery=&sortbyfield=ContractTitle&orderby=ASC';
                         if ($('#tblPopupContracts tr').length <= 0) {
                             relatedContractsTag = [];
                             $("#txtSearchBoxContract").val("");
                             $.ajax({
                                 url: vURL,
                                 type: 'GET',
                                 dataType: 'json',
                                 "Content-Type": "application/json",
                                 headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: $("#lblBusinessAreaPath").text(), UserID: localStorage.UserID },
                                 cache: false,
                                 success: function (data) {
                                     $('#loadContract').empty();
                                     $("#hdnRelatedContracts").append(getParameterByName("ContractID"))
                                     $(data).each(function (i, item) {
                                         if ($("#hdnRelatedContracts").text().indexOf(item.RowKey) > -1) {
                                         }
                                         else {
                                             if (item.RowKey != getParameterByName("ContractID")) {
                                                 var article = '<tr><td class="width65">';
                                                 if (arrRelatedcontractRowkey.indexOf(item.RowKey) > -1) {
                                                     article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" checked onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                                                     article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                                                     article += '</td>';
                                                     article += '<td><label class="">' + item.ContractType + '</label></td>'
                                                     article += '<td><label class="">'
                                                     if (item.Counterparty != null && item.Counterparty != "") {
                                                         article += item.Counterparty
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="" style="word-break: break-all;">'
                                                     if (item.ContractNumber != null && item.ContractNumber != "") {
                                                         article += item.ContractNumber
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                                                     article += '<td class="ddl width34">';
                                                     article += "<select class='f_inpt width90' onchange='showallspans(this)'>";
                                                     var jsLangselected = RelatedContractRelationShipTypeparent;
                                                     var jsLangType = $("#ddlRelationshipType option:selected").val();
                                                     var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[1] === jsLangselected && a[0] === jsLangType);
                                                     });
                                                     var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[2].indexOf(jsLangselected) > -1 && a[0] === jsLangType);
                                                     });
                                                     if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                                         var Relationship = rela1[0];
                                                         $.each(Relationship[2], function (index, value) {
                                                             var optRel2 = value.toString();
                                                             article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         })
                                                         if ($(Relationship[2]).length == 0) {
                                                             var optRel2 = Relationship[1].toString();
                                                             article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         }
                                                     }
                                                     else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                                         var Relationship = rela2[0];
                                                         article += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                                                     }
                                                     else {
                                                         switch (jsLangselected) {
                                                             case 'Master Agreement':
                                                                 article += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                                                 article += '<option value="SOW">SOW</option>';
                                                                 break;
                                                             case 'Sub-Agreement':
                                                             case 'SOW':
                                                                 article += '<option value="Master Agreement">Master Agreement</option>';
                                                                 break;
                                                             case 'Prime Contractor Agreement':
                                                                 article += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                                                 break;
                                                             case 'Sub Contractor Agreement':
                                                                 article += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                                                 break;
                                                             case 'Blanket Agreement':
                                                                 article += '<option value="Order">Order</option>';
                                                                 article += '<option value="Invoice">Invoice</option>';
                                                                 break;
                                                             case 'Order':
                                                             case 'Invoice':
                                                                 article += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                                                 break;
                                                             case 'Original':
                                                                 article += '<option value="Duplicate">Duplicate</option>';
                                                                 article += '<option value="Copy">Copy</option>';
                                                                 break;
                                                             case 'Duplicate':
                                                             case 'Copy':
                                                                 article += '<option value="Original">Original</option>';
                                                                 break;
                                                             case 'Past Contract':
                                                                 article += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                                                 break;
                                                             case 'Renegotiated Contract':
                                                                 article += '<option value="Past Contract">Past Contract</option>';
                                                                 break;
                                                             case 'Primary Contract':
                                                                 article += '<option value="Amendment">Amendment</option>';
                                                                 article += '<option value="Modification">Modification</option>';
                                                                 break;
                                                             case 'Amendment':
                                                             case 'Modification':
                                                                 article += '<option value="Primary Contract">Primary Contract</option>';
                                                                 break;
                                                             case 'Other':
                                                                 article += '<option value="Other">Other</option>';
                                                                 break;
                                                         }
                                                     }
                                                     article += '</select></td></tr>';
                                                     $("#tblPopupContracts").append(article);

                                                 }
                                                 else {
                                                     article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                                                     article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                                                     article += '</td>';
                                                     article += '<td><label class="">' + item.ContractType + '</label></td>'
                                                     article += '<td><label class="">'
                                                     if (item.Counterparty != null && item.Counterparty != "") {
                                                         article += item.Counterparty
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="" style="word-break: break-all;">'
                                                     if (item.ContractNumber != null && item.ContractNumber != "") {
                                                         article += item.ContractNumber
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                                                     article += '<td class="ddl"></td></tr>'
                                                     article += '</tr>'
                                                     $("#tblPopupContracts").append(article);
                                                 }

                                                 relatedContractsTag.push(item.ContractTitle.trim());
                                             }
                                         }
                                         $("#" + item.RowKey).click(function () {
                                             if (this.checked) {
                                                 if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                                                     var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                                                     var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                                                     var jsLangType = $("#ddlRelationshipType option:selected").val();
                                                     var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[1] === jsLang && a[0] === jsLangType);
                                                     });
                                                     var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                                                     });
                                                     if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                                         var Relationship = rela1[0];
                                                         $.each(Relationship[2], function (index, value) {
                                                             var optRel2 = value.toString();
                                                             vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         })
                                                         if ($(Relationship[2]).length == 0) {
                                                             var optRel2 = Relationship[1].toString();
                                                             vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         }
                                                     }
                                                     else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                                         var Relationship = rela2[0];
                                                         vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                                                     }
                                                     else {
                                                         switch (jsLang) {
                                                             case 'Master Agreement':
                                                                 vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                                                 vOptions += '<option value="SOW">SOW</option>';
                                                                 break;
                                                             case 'Sub-Agreement':
                                                             case 'SOW':
                                                                 vOptions += '<option value="Master Agreement">Master Agreement</option>';
                                                                 break;
                                                             case 'Prime Contractor Agreement':
                                                                 vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                                                 break;
                                                             case 'Sub Contractor Agreement':
                                                                 vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                                                 break;
                                                             case 'Blanket Agreement':
                                                                 vOptions += '<option value="Order">Order</option>';
                                                                 vOptions += '<option value="Invoice">Invoice</option>';
                                                                 break;
                                                             case 'Order':
                                                             case 'Invoice':
                                                                 vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                                                 break;
                                                             case 'Original':
                                                                 vOptions += '<option value="Duplicate">Duplicate</option>';
                                                                 vOptions += '<option value="Copy">Copy</option>';
                                                                 break;
                                                             case 'Duplicate':
                                                             case 'Copy':
                                                                 vOptions += '<option value="Original">Original</option>';
                                                                 break;
                                                             case 'Past Contract':
                                                                 vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                                                 break;
                                                             case 'Renegotiated Contract':
                                                                 vOptions += '<option value="Past Contract">Past Contract</option>';
                                                                 break;
                                                             case 'Primary Contract':
                                                                 vOptions += '<option value="Amendment">Amendment</option>';
                                                                 vOptions += '<option value="Modification">Modification</option>';
                                                                 break;
                                                             case 'Amendment':
                                                             case 'Modification':
                                                                 vOptions += '<option value="Primary Contract">Primary Contract</option>';
                                                                 break;
                                                             case 'Other':
                                                                 vOptions += '<option value="Other">Other</option>';
                                                                 break;
                                                         }
                                                     }
                                                     vOptions += '</select>';
                                                     $(this).parent().parent().children(".ddl").append(vOptions);
                                                 }
                                             } else {

                                                 $(this).parent().parent().children(".ddl").empty();
                                             }

                                             showallspans("");

                                         });
                                     });
                                     $("#loadingPage").fadeOut();
                                     collectrelatedcontractrowkey("");
                                     var vCount = $("#tblPopupContracts tr").length;
                                     if (vCount != 0) {
                                         $("#tblPopupContracts tr td").attr('style', 'vertical-align: top');
                                         $('#compact-paginationRelatedContracts').css('display', '');
                                         $('#compact-paginationRelatedContracts').pagination({
                                             items: vCount,
                                             itemsOnPage: 10,
                                             type: 'tbody',
                                             typeID: 'tblPopupContracts',
                                             row: 'tr',
                                             cssStyle: 'compact-theme'
                                         });
                                     } else {
                                         $('#compact-paginationRelatedContracts').css('display', 'none');
                                         $('#loadContract').html('<p style="margin-left: 20px;">No items found.</p>')
                                     }
                                     $("#txtSearchBoxContract").autocomplete({
                                         source: relatedContractsTag,
                                         minLength: 1,
                                         focus: function (event, ui) {
                                             return false;
                                         },
                                         select: function (evn, uidetails) {
                                             $("#txtSearchBoxContract").val(uidetails.item.label);
                                             ViewContracts();
                                         }
                                     });
                                 },
                                 error: function () {
                                     $('#loadMA').empty();
                                     $('#loadMA').html('<p style="margin-left: 20px;">No items found.</p>');
                                 }
                             });
                         }
                         else {
                             $('#loadMA').empty();
                         }
                         vContractID = getParameterByName("ContractID");
                         BindRelatedContractsPopup(vContractID);
                     }
                 });
             }
             else {
                 child.parentNode.removeChild(child);
                 var relatedContractID = child.id;
                 var hdnContracts = $.map($("#hdnRelatedContracts").text().split(';'), $.trim);
                 var htnIndex = hdnContracts.indexOf(relatedContractID);
                 hdnContracts.splice(htnIndex, 1);
                 $("#hdnRelatedContracts").html(hdnContracts.join(';'));

                 var selectedrelatedcontract = [];
                 $.each($("#RelatedContracts").val().split(";"), function () {
                     if (this != "") {
                         if ($.trim(this) != "") {
                             selectedrelatedcontract.push($.trim(this));
                         }
                     }
                 });
                 var rtitle = child.textContent.substring(0, child.textContent.lastIndexOf('(')).trim();
                 if (selectedrelatedcontract.indexOf(rtitle) > -1) {
                     selectedrelatedcontract.splice(selectedrelatedcontract.indexOf(rtitle), 1);
                     $("#RelatedContracts").val(selectedrelatedcontract.join(";"));
                     selectedrelatedcontract = [];
                 }

                 $('#loadContract').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
                 $("#loadingPage").fadeIn();
                 $('#tblPopupContracts').empty();
                 $("#txtSearchBoxContract").val("");
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName('ContractID') + '/relatedcontracts?relatedcontractid=' + relatedContractID,
                     type: 'DELETE',
                     dataType: 'json',
                     headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                     "Content-Type": "application/json",
                     cache: false,
                     success: function (data) {
                         var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getrelatedcontracts?stage=&searchkeyword=&customquery=&sortbyfield=ContractTitle&orderby=ASC';
                         if ($('#tblPopupContracts tr').length <= 0) {
                             relatedContractsTag = [];
                             $("#txtSearchBoxContract").val("");
                             $.ajax({
                                 url: vURL,
                                 type: 'GET',
                                 dataType: 'json',
                                 "Content-Type": "application/json",
                                 headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: $("#lblBusinessAreaPath").text(), UserID: localStorage.UserID },
                                 cache: false,
                                 success: function (data) {
                                     $('#loadContract').empty();
                                     $("#hdnRelatedContracts").append(getParameterByName("ContractID"))
                                     $(data).each(function (i, item) {
                                         if ($("#hdnRelatedContracts").text().indexOf(item.RowKey) > -1) {
                                         }
                                         else {
                                             if (item.RowKey != getParameterByName("ContractID")) {
                                                 var article = '<tr><td class="width65">';
                                                 if (arrRelatedcontractRowkey.indexOf(item.RowKey) > -1) {
                                                     article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" checked onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                                                     article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                                                     article += '</td>';
                                                     article += '<td><label class="">' + item.ContractType + '</label></td>'
                                                     article += '<td><label class="">'
                                                     if (item.Counterparty != null && item.Counterparty != "") {
                                                         article += item.Counterparty
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="" style="word-break: break-all;">'
                                                     if (item.ContractNumber != null && item.ContractNumber != "") {
                                                         article += item.ContractNumber
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                                                     article += '<td class="ddl width34">';
                                                     article += "<select class='f_inpt width90' onchange='showallspans(this)'>";
                                                     var jsLangselected = RelatedContractRelationShipTypeparent;
                                                     var jsLangType = $("#ddlRelationshipType option:selected").val();
                                                     var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[1] === jsLangselected && a[0] === jsLangType);
                                                     });
                                                     var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[2].indexOf(jsLangselected) > -1 && a[0] === jsLangType);
                                                     });
                                                     if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                                         var Relationship = rela1[0];
                                                         $.each(Relationship[2], function (index, value) {
                                                             var optRel2 = value.toString();
                                                             article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         })
                                                         if ($(Relationship[2]).length == 0) {
                                                             var optRel2 = Relationship[1].toString();
                                                             article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         }
                                                     }
                                                     else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                                         var Relationship = rela2[0];
                                                         article += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                                                     }
                                                     else {
                                                         switch (jsLangselected) {
                                                             case 'Master Agreement':
                                                                 article += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                                                 article += '<option value="SOW">SOW</option>';
                                                                 break;
                                                             case 'Sub-Agreement':
                                                             case 'SOW':
                                                                 article += '<option value="Master Agreement">Master Agreement</option>';
                                                                 break;
                                                             case 'Prime Contractor Agreement':
                                                                 article += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                                                 break;
                                                             case 'Sub Contractor Agreement':
                                                                 article += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                                                 break;
                                                             case 'Blanket Agreement':
                                                                 article += '<option value="Order">Order</option>';
                                                                 article += '<option value="Invoice">Invoice</option>';
                                                                 break;
                                                             case 'Order':
                                                             case 'Invoice':
                                                                 article += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                                                 break;
                                                             case 'Original':
                                                                 article += '<option value="Duplicate">Duplicate</option>';
                                                                 article += '<option value="Copy">Copy</option>';
                                                                 break;
                                                             case 'Duplicate':
                                                             case 'Copy':
                                                                 article += '<option value="Original">Original</option>';
                                                                 break;
                                                             case 'Past Contract':
                                                                 article += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                                                 break;
                                                             case 'Renegotiated Contract':
                                                                 article += '<option value="Past Contract">Past Contract</option>';
                                                                 break;
                                                             case 'Primary Contract':
                                                                 article += '<option value="Amendment">Amendment</option>';
                                                                 article += '<option value="Modification">Modification</option>';
                                                                 break;
                                                             case 'Amendment':
                                                             case 'Modification':
                                                                 article += '<option value="Primary Contract">Primary Contract</option>';
                                                                 break;
                                                             case 'Other':
                                                                 article += '<option value="Other">Other</option>';
                                                                 break;
                                                         }
                                                     }
                                                     article += '</select></td></tr>';
                                                     $("#tblPopupContracts").append(article);
                                                 }
                                                 else {
                                                     article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                                                     article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                                                     article += '</td>';
                                                     article += '<td><label class="">' + item.ContractType + '</label></td>'
                                                     article += '<td><label class="">'
                                                     if (item.Counterparty != null && item.Counterparty != "") {
                                                         article += item.Counterparty
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="" style="word-break: break-all;">'
                                                     if (item.ContractNumber != null && item.ContractNumber != "") {
                                                         article += item.ContractNumber
                                                     } else {
                                                         article += "-"
                                                     }
                                                     article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                                                     article += '<td class="ddl"></td></tr>'
                                                     article += '</tr>'
                                                     $("#tblPopupContracts").append(article);
                                                 }

                                                 relatedContractsTag.push(item.ContractTitle.trim());
                                             }
                                         }
                                         $("#" + item.RowKey).click(function () {
                                             if (this.checked) {
                                                 if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                                                     var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                                                     var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                                                     var jsLangType = $("#ddlRelationshipType option:selected").val();
                                                     var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[1] === jsLang && a[0] === jsLangType);
                                                     });
                                                     var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                                         return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                                                     });
                                                     if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                                         var Relationship = rela1[0];
                                                         $.each(Relationship[2], function (index, value) {
                                                             var optRel2 = value.toString();
                                                             vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         })
                                                         if ($(Relationship[2]).length == 0) {
                                                             var optRel2 = Relationship[1].toString();
                                                             vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                                         }
                                                     }
                                                     else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                                         var Relationship = rela2[0];
                                                         vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                                                     }
                                                     else {
                                                         switch (jsLang) {
                                                             case 'Master Agreement':
                                                                 vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                                                 vOptions += '<option value="SOW">SOW</option>';
                                                                 break;
                                                             case 'Sub-Agreement':
                                                             case 'SOW':
                                                                 vOptions += '<option value="Master Agreement">Master Agreement</option>';
                                                                 break;
                                                             case 'Prime Contractor Agreement':
                                                                 vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                                                 break;
                                                             case 'Sub Contractor Agreement':
                                                                 vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                                                 break;
                                                             case 'Blanket Agreement':
                                                                 vOptions += '<option value="Order">Order</option>';
                                                                 vOptions += '<option value="Invoice">Invoice</option>';
                                                                 break;
                                                             case 'Order':
                                                             case 'Invoice':
                                                                 vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                                                 break;
                                                             case 'Original':
                                                                 vOptions += '<option value="Duplicate">Duplicate</option>';
                                                                 vOptions += '<option value="Copy">Copy</option>';
                                                                 break;
                                                             case 'Duplicate':
                                                             case 'Copy':
                                                                 vOptions += '<option value="Original">Original</option>';
                                                                 break;
                                                             case 'Past Contract':
                                                                 vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                                                 break;
                                                             case 'Renegotiated Contract':
                                                                 vOptions += '<option value="Past Contract">Past Contract</option>';
                                                                 break;
                                                             case 'Primary Contract':
                                                                 vOptions += '<option value="Amendment">Amendment</option>';
                                                                 vOptions += '<option value="Modification">Modification</option>';
                                                                 break;
                                                             case 'Amendment':
                                                             case 'Modification':
                                                                 vOptions += '<option value="Primary Contract">Primary Contract</option>';
                                                                 break;
                                                             case 'Other':
                                                                 vOptions += '<option value="Other">Other</option>';
                                                                 break;
                                                         }
                                                     }
                                                     vOptions += '</select>';
                                                     $(this).parent().parent().children(".ddl").append(vOptions);
                                                 }
                                             } else {

                                                 $(this).parent().parent().children(".ddl").empty();
                                             }
                                             showallspans("");

                                         });
                                     });
                                     $("#loadingPage").fadeOut();
                                     collectrelatedcontractrowkey("");
                                     var vCount = $("#tblPopupContracts tr").length;
                                     if (vCount != 0) {
                                         $("#tblPopupContracts tr td").attr('style', 'vertical-align: top');
                                         $('#compact-paginationRelatedContracts').css('display', '');
                                         $('#compact-paginationRelatedContracts').pagination({
                                             items: vCount,
                                             itemsOnPage: 10,
                                             type: 'tbody',
                                             typeID: 'tblPopupContracts',
                                             row: 'tr',
                                             cssStyle: 'compact-theme'
                                         });
                                     } else {
                                         $('#compact-paginationRelatedContracts').css('display', 'none');
                                         $('#loadContract').html('<p style="margin-left: 20px;">No items found.</p>')
                                     }
                                     $("#txtSearchBoxContract").autocomplete({
                                         source: relatedContractsTag,
                                         minLength: 1,
                                         focus: function (event, ui) {
                                             return false;
                                         },
                                         select: function (evn, uidetails) {
                                             $("#txtSearchBoxContract").val(uidetails.item.label);
                                             ViewContracts();
                                         }
                                     });
                                 },
                                 error: function () {
                                     $('#loadMA').empty();
                                     $('#loadMA').html('<p style="margin-left: 20px;">No items found.</p>');
                                 }
                             });
                         }
                         else {
                             $('#loadMA').empty();
                         }
                         vContractID = getParameterByName("ContractID");
                         BindRelatedContractsPopup(vContractID);
                     }
                 });



             }
         }
         return;
     });
}

function BindRelatedContractsPopup(contractid) {
    //if (contractid == null || contractid == "") { contractid = vContractID; }
    //$('#liSelected').empty();
    //$.ajax({
    //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/relatedcontracts?contractid=' + contractid,
    //    type: 'GET',
    //    dataType: 'json',
    //    headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
    //    cache: false,
    //    success: function (contactsJsonPayload) {
    //        var count = 0;
    //        $(contactsJsonPayload).each(function (i, item) {
    //            if (item.Permission != "")
    //                $('#liSelected').append('<span style="font-size:11px;" id=' + item.RelatedContractID + '>' + item.RelatedContractTitle + ' (' + item.RelatedRelationshipType + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationship(this);" style="float:right" /></span>');
    //        });
    //    },
    //    error: function (request) {
    //    }
    //});
}

function ViewContracts() {
    relatedContractsTag = [];
    var selectedrows = "";
    if ($("#txtSearchBoxContract").val() != "") {
        $('input:checkbox[name="RelatedContract"]:checked').each(function () {
            rowtext = this.value;
            if (rowtext != "" && rowtext.trim() == $("#txtSearchBoxContract").val().trim() && this.checked == true)
                $(this).parent().parent().remove();
        });
        selectedrows = $('input:checkbox[name="RelatedContract"]:checked').parent().parent();
    }

    var strCustomQueryRelCon = "";
    if ($("#filteroptionstatus").css('display') != 'none') {
        var RelConFilterCP = $('#ddlRelConFilterCounterparty option:selected');
        var strQryRelConFilterCP = "";
        if (RelConFilterCP != null && RelConFilterCP != "") {
            RelConFilterCP.each(function () {
                strQryRelConFilterCP += $(this).text() + "~";
            });
            strQryRelConFilterCP = removeLastChar(strQryRelConFilterCP, '~');
        }

        if (strQryRelConFilterCP != null && strQryRelConFilterCP != "") {
            strCustomQueryRelCon += "Counterparty:" + encodeURIComponent(strQryRelConFilterCP) + ";";
        }

    }

    if ($("#filteroptiontype").css('display') != 'none') {
        var RelConFilterContractTypes = $('#ddlRelConFilterContractType option:selected');
        var strQryRelConFilterCT = "";
        if (RelConFilterContractTypes != null && RelConFilterContractTypes != "") {
            RelConFilterContractTypes.each(function () {
                strQryRelConFilterCT += $(this).text() + "~";
            });
            strQryRelConFilterCT = removeLastChar(strQryRelConFilterCT, '~');
        }

        if (strQryRelConFilterCT != null && strQryRelConFilterCT != "") {
            strCustomQueryRelCon += "ContractType:" + encodeURIComponent(strQryRelConFilterCT) + ";";
        }
    }
    if (strCustomQueryRelCon != "")
        strCustomQueryRelCon = removeLastChar(strCustomQueryRelCon, ';');

    $("#tblPopupContracts").html('');
    $('#loadContract').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getrelatedcontracts?stage=&searchkeyword=' + encodeURIComponent($("#txtSearchBoxContract").val()) + '&customquery=' + strCustomQueryRelCon + '&sortbyfield=ContractTitle&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: $("#lblBusinessAreaPath").text(), UserID: localStorage.UserID },
        cache: false,
        success: function (data) {
            $('#loadContract').empty();
            $("#tblPopupContracts").html('');
            var datalenght = data.length;
            $("#hdnRelatedContracts").append(getParameterByName("ContractID"))

            var arr = [];
            var RelatedContractIDarr = [];
            var vRelatedContractTitlearr = [];
            var RelatedRelationshipTypearr = [];
            if (arrRelatedContractsSelected.length > 0) {
                $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(";"), function () {
                    if (this != "") {
                        if ($.trim(this) != "") {
                            arr.push($.trim(this));
                        }
                    }
                });
            }

            if (arr.length > 0) {
                if (arrRelatedContractsSelected.length > 0) {
                    $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";"), function () {
                        RelatedContractIDarr.push($.trim(this));
                    });
                    $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(";"), function () {
                        vRelatedContractTitlearr.push($.trim(this));
                    });
                    $.each(arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";"), function () {
                        RelatedRelationshipTypearr.push($.trim(this));
                    });
                }
            }


            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                if ($("#hdnRelatedContracts").text().indexOf(item.RowKey) > -1) {

                }
                else {
                    if (arr.indexOf(item.ContractTitle.trim()) >= 0) {
                        var article = '<tr><td>';
                        article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" checked class="css1-checkbox" value="' + item.ContractTitle + '" />';
                        article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                        article += '</td>';
                        article += '<td><label class="">' + item.ContractType + '</label></td>'
                        article += '<td><label class="">'
                        if (item.Counterparty != null && item.Counterparty != "") {
                            article += item.Counterparty
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="" style="word-break: break-all;">'
                        if (item.ContractNumber != null && item.ContractNumber != "") {
                            article += item.ContractNumber
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                        var relationtypefetch = "";
                        if (arrRelatedContractsSelected.length > 0) {
                            var indexvaluetake = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(';').indexOf(item.ContractTitle.trim());
                            relationtypefetch = RelatedRelationshipTypearr[indexvaluetake];
                        }
                        else {
                            if (arr.indexOf(item.ContractTitle.trim()) >= 0) {
                                var indexvaluetake = arr.indexOf(item.ContractTitle.trim());
                                relationtypefetch = RelatedRelationshipTypearr[indexvaluetake];
                            }
                        }
                        //var indexvaluetake = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(';').indexOf(item.ContractTitle.trim());
                        //var relationtypefetch = RelatedRelationshipTypearr[indexvaluetake];
                        article += "<td class='ddl'><select class='f_inpt width90' onchange='showallspans(this)'>";
                        var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                        switch (jsLang) {
                            case 'Master Agreement':
                                if (relationtypefetch == "Sub-Agreement") {
                                    article += '<option value="Sub-Agreement" selected>Sub-Agreement</option>';
                                    article += '<option value="SOW">SOW</option>';
                                }
                                else {
                                    article += '<option value="Sub-Agreement" >Sub-Agreement</option>';
                                    article += '<option value="SOW" selected>SOW</option>';
                                }
                                break;
                            case 'Sub-Agreement':
                            case 'SOW':
                                article += '<option value="Master Agreement">Master Agreement</option>';
                                break;
                            case 'Prime Contractor Agreement':
                                article += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                break;
                            case 'Sub Contractor Agreement':
                                article += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                break;
                            case 'Blanket Agreement':
                                if (relationtypefetch == "Order") {
                                    article += '<option value="Order" selected>Order</option>';
                                    article += '<option value="Invoice">Invoice</option>';
                                }
                                else {
                                    article += '<option value="Order">Order</option>';
                                    article += '<option value="Invoice" selected>Invoice</option>';
                                }

                                break;
                            case 'Order':
                            case 'Invoice':
                                article += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                break;
                            case 'Original':
                                if (relationtypefetch == "Duplicate") {
                                    article += '<option value="Duplicate" selected>Duplicate</option>';
                                    article += '<option value="Copy">Copy</option>';
                                }
                                else {
                                    article += '<option value="Duplicate">Duplicate</option>';
                                    article += '<option value="Copy" selected>Copy</option>';
                                }
                                break;
                            case 'Duplicate':
                            case 'Copy':
                                article += '<option value="Original">Original</option>';
                                break;
                            case 'Past Contract':
                                article += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                break;
                            case 'Renegotiated Contract':
                                article += '<option value="Past Contract">Past Contract</option>';
                                break;
                            case 'Primary Contract':
                                if (relationtypefetch == "Amendment") {
                                    article += '<option value="Amendment" selected>Amendment</option>';
                                    article += '<option value="Modification">Modification</option>';
                                }
                                else {
                                    article += '<option value="Amendment">Amendment</option>';
                                    article += '<option value="Modification" selected>Modification</option>';
                                }
                                break;
                            case 'Amendment':
                            case 'Modification':
                                article += '<option value="Primary Contract">Primary Contract</option>';
                                break;
                            case 'Other':
                                article += '<option value="Other">Other</option>';
                                break;
                        }

                        article += '</select></td></tr>';
                        $("#tblPopupContracts").append(article);

                        relatedContractsTag.push(item.ContractTitle.trim());
                    }
                    else {
                        var article = '<tr><td>';
                        article += '<input id="' + item.RowKey + '" type="checkbox"  name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);"  class="css1-checkbox" value="' + item.ContractTitle + '" />';
                        article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                        article += '</td>';
                        article += '<td><label class="">' + item.ContractType + '</label></td>'
                        article += '<td><label class="">'
                        if (item.Counterparty != null && item.Counterparty != "") {
                            article += item.Counterparty
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="" style="word-break: break-all;">'
                        if (item.ContractNumber != null && item.ContractNumber != "") {
                            article += item.ContractNumber
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                        article += '<td class="ddl"><td>';
                        article += '  </tr>'
                        relatedContractsTag.push(item.ContractTitle.trim());
                        $("#tblPopupContracts").append(article);
                    }
                }
                $("#" + item.RowKey).click(function () {
                    if (this.checked) {
                        if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                            var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                            var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                            var jsLangType = $("#ddlRelationshipType option:selected").val();
                            var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                return (a[1] === jsLang && a[0] === jsLangType);
                            });
                            var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                            });
                            if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                var Relationship = rela1[0];
                                $.each(Relationship[2], function (index, value) {
                                    var optRel2 = value.toString();
                                    vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                })
                                if ($(Relationship[2]).length == 0) {
                                    var optRel2 = Relationship[1].toString();
                                    vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                }
                            }
                            else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                var Relationship = rela2[0];
                                vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                            }
                            else {
                                switch (jsLang) {
                                    case 'Master Agreement':
                                        vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                        vOptions += '<option value="SOW">SOW</option>';
                                        break;
                                    case 'Sub-Agreement':
                                    case 'SOW':
                                        vOptions += '<option value="Master Agreement">Master Agreement</option>';
                                        break;
                                    case 'Prime Contractor Agreement':
                                        vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                        break;
                                    case 'Sub Contractor Agreement':
                                        vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                        break;
                                    case 'Blanket Agreement':
                                        vOptions += '<option value="Order">Order</option>';
                                        vOptions += '<option value="Invoice">Invoice</option>';
                                        break;
                                    case 'Order':
                                    case 'Invoice':
                                        vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                        break;
                                    case 'Original':
                                        vOptions += '<option value="Duplicate">Duplicate</option>';
                                        vOptions += '<option value="Copy">Copy</option>';
                                        break;
                                    case 'Duplicate':
                                    case 'Copy':
                                        vOptions += '<option value="Original">Original</option>';
                                        break;
                                    case 'Past Contract':
                                        vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                        break;
                                    case 'Renegotiated Contract':
                                        vOptions += '<option value="Past Contract">Past Contract</option>';
                                        break;
                                    case 'Primary Contract':
                                        vOptions += '<option value="Amendment">Amendment</option>';
                                        vOptions += '<option value="Modification">Modification</option>';
                                        break;
                                    case 'Amendment':
                                    case 'Modification':
                                        vOptions += '<option value="Primary Contract">Primary Contract</option>';
                                        break;
                                    case 'Other':
                                        vOptions += '<option value="Other">Other</option>';
                                        break;
                                }
                            }
                            vOptions += '</select>';
                            $(this).parent().parent().children(".ddl").append(vOptions);
                        }
                    } else {

                        $(this).parent().parent().children(".ddl").empty();
                    }
                    showallspans(this);

                });
            }
            collectrelatedcontractrowkey("");
            var vCount = $("#tblPopupContracts tr").length;
            if (vCount != 0) {
                $('#loadContract').html('');
                $("#tblPopupContracts tr td").attr('style', 'vertical-align: top');
                $('#compact-paginationRelatedContracts').css('display', '');
                $('#compact-paginationRelatedContracts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    type: 'tbody',
                    typeID: 'tblPopupContracts',
                    row: 'tr',
                    cssStyle: 'compact-theme'
                });
            } else {
                //  collectrelatedcontractrowkey();
                $('#loadContract').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $('#compact-paginationRelatedContracts').css('display', 'none');
            }

            //Sridhar
            if (selectedrows != null && selectedrows != "") {
                if (selectedrows != null && selectedrows != "") {
                    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
                        rowtext = $(this).parent().parent().children().find("input[type=checkbox]")[0].value;
                        if (rowtext != "") {
                            $(selectedrows).each(function (i, item) {
                                if (item.children[0].textContent.trim() == rowtext.trim()) {
                                    selectedrows.splice(i, 1);
                                }
                            });
                        }
                    });
                    $(selectedrows).each(function (i, item) {
                        $(item).hide();
                    });
                    $("#tblPopupContracts").append(selectedrows);
                }
            }
            $("#txtSearchBoxContract").autocomplete({
                source: relatedContractsTag,
                minLength: 2,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxContract").val(uidetails.item.label);
                    ViewContracts();
                }
            });
            $(".validelement").each(function (index, element) {
                $(element).removeClass("error");
                $("#errormsg_" + element.id).remove();
            });
            if ($('#dvfilter').is(':hidden')) {
            }
            else {
                $('#dvfilter').slideToggle();
            }
        },
        error: function () {
            collectrelatedcontractrowkey("");
            if ($('#dvfilter').is(':hidden')) {
            }
            else {
                $('#dvfilter').slideToggle();
            }
            $(".validelement").each(function (index, element) {
                $(element).removeClass("error");
                $("#errormsg_" + element.id).remove();
            });
            $('#compact-paginationRelatedContracts').css('display', 'none');
            $('#loadContract').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });

}

function CheckAmendmentDocumentExist() {
    var isExist = false;
    var vDocURL = "";
    var totalFileCount = $("#inTD").children("div").length;
    ExitDocuemntName = "";
    if ($("#txtNewFolderNameAmend").is(":visible")) {
        isExist = false;
    }
    else {
        var childtfl = false;
        for (var tfl = 1; tfl < totalFileCount + 1; tfl++) {
            if ($('#file' + tfl)[0].files.length > 0) {
                childtfl = true;
            }
        }
        if ($('#docAmendment')[0].files.length > 0 || childtfl) {
            var lastcharfind = $('#lblFolderUrlAmend').text();
            lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
            if (lastcharfind != "/") {
                vDocURL = localStorage.SPHostUrl + $('#lblFolderUrlAmend').text() + "/";
            } else {
                vDocURL = localStorage.SPHostUrl + $('#lblFolderUrlAmend').text();
            }
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + vContractID,
                type: 'GET',
                dataType: 'json',
                'Content-Type': 'application/json',
                cache: false,
                async: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                success: function (folder) {
                    for (var fol = 0; fol < (totalFileCount + 1) ; fol++) {
                        if (fol == 0) {
                            if ($('#docAmendment')[0].files.length > 0) {
                                var urltosearch = vDocURL + $('#docAmendment')[0].files[0].name;
                                var vAccFeat = $.grep(folder, function (n, i) {
                                    return (n.DocumentUrl == urltosearch);
                                });
                                if (vAccFeat.length > 0) {
                                    AmendmentidtoPass = vAccFeat[0].AmendmentID;
                                    isExist = true;
                                    if (ExitDocuemntName == "") {
                                        ExitDocuemntName = $('#docAmendment')[0].files[0].name;
                                    } else {
                                        ExitDocuemntName += "," + $('#docAmendment')[0].files[0].name
                                    }
                                }
                            }
                        }
                        else {
                            if ($('#file' + fol)[0].files.length > 0) {
                                var urltosearch = vDocURL + $('#file' + fol)[0].files[0].name;
                                var vAccFeat = $.grep(folder, function (n, i) {
                                    return (n.DocumentUrl == urltosearch);
                                });
                                if (vAccFeat.length > 0) {
                                    AmendmentidtoPass = vAccFeat[0].AmendmentID;
                                    isExist = true;
                                    if (ExitDocuemntName == "") {
                                        ExitDocuemntName = $('#file' + fol)[0].files[0].name;
                                    } else {
                                        ExitDocuemntName += "," + $('#file' + fol)[0].files[0].name
                                    }
                                }
                            }
                        }
                    }
                },
                error:
                    function (data) {
                        isExist = false;
                        AmendmentidtoPass = "";
                    }
            });
        }
    }
    return isExist;
}

///Obligation Methods Starts


//Add Item Click Event

// Add More Click Event

var listObligationNewData = "";
var listObligationNewEndDate = "";
var listObligationNewStartDate = "";
var recurence = "";
var recurenceCustomString = "";
var occurences = 1;
var validateproducts = true;



function clearObligationFormData() {
    $("#txtObligationNewID").val("");
    $("#txtObligationNewTitle").val("");
    $('#ddlObligationTypeNew').val("0");
    $("#txtObligationNewText").val("");
    $("#txtObligationNewDesc").val("");
    $("#txtObligationCatalogTitleInline").val("");
    $("#ddlObligationCatalogInlineUnitsType").val("0");
    $("#txtObligationCatalogQtyInline").val("");
    $("#ddlObligationCatalogUnitsInline").val("0");
    $("#ddlObligationCatalogStatusInline").val("0");
    $("#ulObligationCatalogBody").empty();
    $("#txtObligationFinancialsTitleInline").val("");
    $("#txtObligationFinancialAmountInline").val("");
    $("#ddlObligationFinancialsStatusInline").val("0");
    $("#ulObligationFinancialsBody").empty();
}





$('#addObligationNewItemPopup').click(function () {
    $('#addEditObligationNew').dialog('widget').find('.ui-dialog-buttonpane .ui-button:button:contains("Save") .pop_up_Content_Green ').html("Add");
    $("input[type=radio]").attr('disabled', false);
    $("#ulObliCompletedate").css('display', 'none');
    $("#dtObligationNewCompletedDate").val('');
    clearObligationFormDataNew();
    listObligationNewData = "";
    $("#liObligationRecurrence").css('display', '');
    $("#hdnObligationUniqueId").text('');
    $("#hdnObligationRowKey").text('');
    $('#hdnProductUpdates').text('');

    $("#PerformedPartySelf").css("display", "inline");
    $("#PerformedPartyCounterparty").css("display", "inline");

    vObligationTextEditRecurrence = "";
    var string1 = "";
    var string2 = "";
    var strCompanyProfile = "";
    var strCounterpartynew = "";

    var strEndDate = "";
    $('#txtOccurrenceCount').val("12");

    $('#NoObligationFinantials').css('display', '');
    $('#NoObligationCatalog').css('display', '');

    if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
        strEndDate = new Date(contractItem.EndDate);
        listObligationNewEndDate = strEndDate;
        $('#ObligationNewOcurrenceEndDate').text("");
        var ONewEndDate = "";
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format('MM/DD/YYYY'); }
        else { ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format(localStorage.AppDateFormat); }

        $('#ObligationNewOcurrenceEndDate').text(" (" + ONewEndDate + ")");
        $("#rdObligationNewEndOccurence").prop("checked", true);
    }
    else {
        listObligationNewEndDate = "Not Available";
        $('#ObligationNewOcurrenceEndDate').text("");
        $('#ObligationNewOcurrenceEndDate').text(" (" + listObligationNewEndDate + ")");
        $("#rdObligationNewEndOccurence").attr('disabled', true);
        $('#rdObligationNewEndOccurence').removeAttr('checked');
        $("#rdObligationNewEndOccurenceUser").prop("checked", true);


    }
    $("#divObligationOcurrenceWeekly").css('display', 'none');
    $("#divObligationOcurrenceMonthly").css('display', 'none');

    $("#dvobligationOcurrenceEnd").css('display', 'none');
    $("#divOcurrenceSummary").css('display', 'none');

    document.getElementById("ddlObligationOccurencess").disabled = true;



    if ($("#lblCompanyProfile").text() == null || $("#lblCompanyProfile").text() == "") {
        strCompanyProfile = "Not Available"
    }
    else {
        strCompanyProfile = $("#lblCompanyProfile").text();
    }

    if ($("#lblCounterparty").text() == null || $("#lblCounterparty").text() == "") {
        strCounterpartynew = "Not Available";
        document.getElementById("rdObligationNewPerformedPartyCP").disabled = true;
    }
    else {
        strCounterpartynew = $("#lblCounterparty").text();
        document.getElementById("rdObligationNewPerformedPartyCP").disabled = false;
    }


    string1 = "My Company" + " " + "(" + strCompanyProfile + ")";
    string2 = "Counterparty" + " " + "(" + strCounterpartynew + ")";

    $("#PerformedPartySelf").text(string1);
    $("#PerformedPartyCounterparty").text(string2);


    $("#lblCTitleObligationNew").text($("#lblContractTitle").text());
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    GetValuesAndAutoPopulate("ddlObligationNewOwner", $("#licontractmanagers").text());
    GetValuesAndAutoPopulate("ddlSendReminderToObligationNew", $("#licontractmanagers").text());

    $("#aobligationRecNoneEdit").css('display', 'none');
    $("#aobligationRecEdit").css('display', 'none');

    $("#obligationnewheading").text("New Obligation");
    if (IsPipeline) {
        $("#AlertObli").val('No').change();
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notification, click <a href='javascript:void(0);' id='enableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
    }
    else {
        $("#AlertObli").val('Yes').change();
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders");

    }

    $("#rdObligationNewAutoCompleteYes").prop("checked", true);
    $("#rdObligationNewAutoCompleteNo").prop("checked", false);
    $("#rdObligShowInCalendarYes").prop("checked", true);
    $("#rdObligShowInCalendarNo").prop("checked", false);

    $("#addEditObligationNew").dialog("option", "title", "");
    $("#addEditObligationNew").dialog("open");


    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
        var Id = this.id;
        $("#" + Id).css('outline', '');
    });


    $("#lblerrorreclimitObligation").css('display', 'none');



});


function SelectedObligationTitleNew(obj) {
    var curVal = $(obj).val();
    if (curVal != 0) {
        if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
            if ($("input:radio[name=PerformedParty]:checked").val() == "Self") {
                $("#txtObligationNewTitle").val(curVal + " for " + $("#lblCounterparty").text());

            }
            else {

                $("#txtObligationNewTitle").val(curVal + " from " + $("#lblCounterparty").text());

            }
        }
    }

}


$("input[name=PerformedParty]:radio").change(function () {

    var curVal = $("#ddlObligationTypeNew").val();

    if (curVal != 0) {
        if (this.value == "Self") {

            if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
                $("#txtObligationNewTitle").val(curVal + " for " + $("#lblCounterparty").text());
            }

        }
        else {

            if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
                $("#txtObligationNewTitle").val(curVal + " from " + $("#lblCounterparty").text());
            }
        }

    }



});


function ViewObligationOcurrence(obj) {
    if ($('#dtObligationNewDueDate').val() != "" && $('#dtObligationNewDueDate').val() != null) {
        if ($(obj).is(':checked')) {
            $("#ulObligationOcurrence").css('display', '');

        }
        else {
            $("#ulObligationOcurrence").css('display', 'none');
        }
    }
    else {

        swal("", "select Duedate First.");
        if ($(obj).is(':checked')) {
            $('input:checkbox[name=ObligationRepeat]').removeAttr('checked');
        }
    }
}


function ObligationDueDateSlectedEvent(obj) {

    var dateNew = new Date($.datepicker.formatDate('mm/dd/yy', $(obj).datepicker('getDate')));
    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
        this.checked = false;
    });
    var day = dateNew.getDay()
    var chkboxId = "ORC" + day;

    $("#" + chkboxId).prop('checked', true);

    if ($('#txtObligationNewText').val() != "") {

    }
    else {
        document.getElementById("ddlObligationOccurencess").disabled = false;
    }


    $('#dtObligationNewOccurrenceDueDate').val(dateNew.getDate());
    $('#dtOblOcurrMonthforYear').val(monthNames[dateNew.getMonth()]);
    $('#dtOblOcurrDateforYear').val(dateNew.getDate());


    if ($("#ddlObligationOccurencess").val() != "None") {
        GetObligationDataFinal("");
    }

}





function formatDate(date) {

    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');
}

var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

function getOcurrenceValuesForObligation(recurence, occurences, startDateNew, recurenceCustomString, strmonthly) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/ocurrencedates?ocurrence=' + recurence + '&iOcurrence=' + occurences + '&dtstart=' + startDateNew + '&ocurrencestring=' + recurenceCustomString + '&strmonthly=' + strmonthly,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (folder) {
            listObligationNewData = folder;
            var Startdate = new Date(folder.StartDate);
            var Enddate = new Date(folder.LastDate);
            var SMonth = Startdate.getMonth() + 1;
            var EMonth = Enddate.getMonth() + 1;
            var Ocurrs = folder.Values != null ? folder.Values.length : 1;;
            occurences = Ocurrs;
            var dtStartdate = "";
            var dtEnddate = "";
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
            { dtStartdate = moment(new Date(folder.StartDate)).format('MM/DD/YYYY'); }
            else { dtStartdate = moment(new Date(folder.StartDate)).format(localStorage.AppDateFormat); }
            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
            { dtEnddate = moment(new Date(folder.LastDate)).format('MM/DD/YYYY'); }
            else { dtEnddate = moment(new Date(folder.LastDate)).format(localStorage.AppDateFormat); }

            $('#ObligationOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + Ocurrs + " instances)")

        },
        error:
            function (data) {
                isExist = false;
            }
    });
}


$("#ddlRepeatMonthly").change(function (obj) {
    GetObligationdynamicRecurrenceCount();
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var Cus = "";
    var customstring = "";
    var date = new Date(fObligationNewDueDate);
    if ($("#ddlObligationOccurencess").val() == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fObligationNewDueDate);

        $('#dtObligationNewOccurrenceDueDate').val(abc.getDate());
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');

        $('#lblOcurrenceMonth').css('display', '');
        $('#lblOcurrenceYear').css('display', 'none');




        $('#divOcurrenceSummary').css('display', '');
        customstring = $("#ddlRepeatMonthly").val();
        $('#dvobligationOcurrenceEnd').css('display', '');


    }
    else if ($("#ddlObligationOccurencess").val() == "Yearly") {
        var abc = new Date(fObligationNewDueDate);
        $('#dtObligationNewOccurrenceDueDate').val(abc.getDate());
        $('#dtOblOcurrMonthforYear').val(monthNames[abc.getMonth()]);
        $('#dtOblOcurrDateforYear').val(abc.getDate());
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', '');
        customstring = $("#ddlRepeatMonthly").val();
        $('#dvobligationOcurrenceEnd').css('display', '');
        $('#lblOcurrenceMonth').css('display', 'none');
        $('#lblOcurrenceYear').css('display', '');
    }
    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {

        GetObligationDataFinal(Cus);
    }
    else {
        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, Cus, customstring);

    }

});

var dynclistObligationNewStartDate = '';
function GetObligationdynamicRecurrenceCount() {
    var fObligationDateNew = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationDateNew = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'))

    }
    var startDateNew = new Date();
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    dynclistObligationNewStartDate = fObligationDateNew;
    if (listObligationNewEndDate != "Not Available") {
        if ($("#ddlObligationOccurencess option:selected").val() == "Weekly") {
            var newTestDateNew2 = new Date();
            var sta = false;
            var OCount = 1;
            var Cus = "";
            var CustomRecWeekly = [];
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                CustomRecWeekly.push(this.value);
                Cus += (this.value) + ",";
            });

            var selectedstartdate = new Date(dynclistObligationNewStartDate);

            for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                    recst = new Date(dynclistObligationNewStartDate);
                    newTestDateNew2 = new Date(dynclistObligationNewStartDate);
                    sta = true;
                    break;
                }
            }
            if (!sta) {

                var newTestDate = new Date(dynclistObligationNewStartDate);
                var newdate = new Date(dynclistObligationNewStartDate);
                for (var s = 0; s < 6; s++) {
                    newdate.setDate(newdate.getDate() + 1);
                    newTestDate.setDate(newTestDate.getDate() + 1);
                    for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                        if (newdate.getDay() == CustomRecWeekly[crw1]) {
                            recst = newdate;
                            newTestDateNew2 = newTestDate;
                            sta = true;
                            break;
                        }
                    }
                    if (sta) {
                        break;
                    }

                }
            }

            reced = new Date(listObligationNewEndDate);


            if (reced >= recst) {
                //Get 1 day in milliseconds
                var one_day = 1000 * 60 * 60 * 24;

                // Convert both dates to milliseconds
                var date1_ms = recst.getTime();
                var date2_ms = reced.getTime();

                // Calculate the difference in milliseconds
                var difference_ms = date2_ms - date1_ms;

                // Convert back to days and return
                var diff = Math.round(difference_ms / one_day);

                var newCustomdate = newTestDateNew2;

                for (var s1 = 0; s1 < diff; s1++) {
                    newCustomdate.setDate(newCustomdate.getDate() + 1);
                    for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                        if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                            OCount = OCount + 1;
                        }
                    }
                }

                occurences = OCount;
            }
            else {
                occurences = 0;
            }

            if (occurences > 54) {
                dynamicOccCount = 54;
                $('#lblerrorreclimitObligation').css('display', '');
                $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            }
            else {
                dynamicOccCount = occurences;
                $('#lblerrorreclimitObligation').css('display', 'none');
                if (occurences == 0)
                    $('#lblerrorreclimitObligationNotZero').css('display', '');
                else
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');

            }
        }
        else if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
            var newstartrecdate = new Date(dynclistObligationNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistObligationNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listObligationNewEndDate);


            var occnew = 0;

            if (reced >= newstartrecdate) {
                while (reced >= newstartrecdate) {
                    newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlRepeatMonthly option:selected").val())));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                occurences = occnew;
            }
            else {
                occurences = 0;
            }

            if (occurences > 54) {
                dynamicOccCount = 54;
                $('#lblerrorreclimitObligation').css('display', '');
                $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            }
            else {
                dynamicOccCount = occurences;
                $('#lblerrorreclimitObligation').css('display', 'none');
                if (occurences == 0)
                    $('#lblerrorreclimitObligationNotZero').css('display', '');
                else
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            }


            recurenceCustomString = recst.getDate();
            //String need to be Added for Custom


        }
        else {
            var newstartrecdate = new Date(dynclistObligationNewStartDate);
            var selectedstartdateNewCustom = new Date(dynclistObligationNewStartDate);
            recst = selectedstartdateNewCustom;
            reced = new Date(listObligationNewEndDate);


            var occnew = 0;

            if (reced >= newstartrecdate) {

                while (reced >= newstartrecdate) {
                    newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                    occnew = parseInt(occnew) + parseInt(1);
                }
                occurences = occnew;


            }
            else {
                occurences = 0;
            }

            if (occurences > 54) {
                dynamicOccCount = 54;
                $('#lblerrorreclimitObligation').css('display', '');
                $('#lblerrorreclimitObligationNotZero').css('display', 'none');

            }
            else {
                dynamicOccCount = occurences;
                $('#lblerrorreclimitObligation').css('display', 'none');
                if (occurences == 0)
                    $('#lblerrorreclimitObligationNotZero').css('display', '');
                else
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            }

            recurenceCustomString = recst.getFullYear();

        }
    }
    else {
        dynamicOccCount = 54;
        $('#lblerrorreclimitObligation').css('display', '');
        $('#lblerrorreclimitObligationNotZero').css('display', 'none');
    }
    if ($("#txtOccurrenceCount").val() == "") {
        if (parseInt(dynamicOccCount) > 12) {
            $("#txtOccurrenceCount").val('12');
        }
        else {
            $("#txtOccurrenceCount").val(dynamicOccCount);
        }
    }

}

var userFlagObli = false;
var userFlagObliCustom = false;
$("#ddlObligationOccurencess").change(function (obj) {
    GetObligationdynamicRecurrenceCount();

    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    listObligationNewStartDate = fObligationNewDueDate;
    var date = new Date(fObligationNewDueDate);
    var Cus = "";
    var ocurrTxtnew = $("#ddlObligationOccurencess").val();

    var customstring = "";

    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        var abc = new Date(fObligationNewDueDate);

        $('#dtObligationNewOccurrenceDueDate').val(abc.getDate());
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', '');
        customstring = $("#ddlRepeatMonthly").val();
        $('#dvobligationOcurrenceEnd').css('display', '');
        $('#ddlRepeatMonthly').css('display', '');

        $('#lblOcurrenceMonth').css('display', '');
        $('#lblOcurrenceYear').css('display', 'none');
    }
    else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();
        var abc = new Date(fObligationNewDueDate);
        var text = monthNames[abc.getMonth()];

        $('#dtOblOcurrDateforYear').val(abc.getDate());

        $('#dtOblOcurrMonthforYear').val(text);
        $('#divObligationOcurrenceMonthly').css('display', '');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', '');

        $('#dvobligationOcurrenceEnd').css('display', '');
        $("#ddlRepeatMonthly").val("1");
        $('#ddlRepeatMonthly').css('display', 'none');
        $('#lblOcurrenceMonth').css('display', 'none');
        $('#lblOcurrenceYear').css('display', '');
    }
    else if (ocurrTxtnew == "Weekly") {
        $('#dtObligationNewOccurrenceDueDate').val("");
        $('#divObligationOcurrenceMonthly').css('display', 'none');
        $('#divObligationOcurrenceWeekly').css('display', '');
        $('#divOcurrenceSummary').css('display', '');

        $('#dvobligationOcurrenceEnd').css('display', '');
        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
        $("#ddlRepeatMonthly").val("1");
    }
    else {
        $('#dtObligationNewOccurrenceDueDate').val("none");
        $('#divObligationOcurrenceMonthly').css('display', 'none');
        $('#divObligationOcurrenceWeekly').css('display', 'none');
        $('#divOcurrenceSummary').css('display', 'none');

        $('#dvobligationOcurrenceEnd').css('display', 'none');
        $("#ddlRepeatMonthly").val("1");
    }



    if (userFlagObli) {
        if (userFlagObliCustom) {
            $('#rdObligationNewEndOccurenceUser').prop("checked", true);
            $("#rdObligationNewEndOccurence").removeAttr('disabled');
            $("#rdObligationNewEndOccurence").removeAttr('checked');
        }
        else {
            $("#rdObligationNewEndOccurence").removeAttr('disabled');
            $("#rdObligationNewEndOccurence").prop("checked", true);
            $('#rdObligationNewEndOccurenceUser').removeAttr('checked');
        }
    }



    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {

        GetObligationDataFinal(Cus);
    }
    else {
        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, Cus, customstring);

    }




});


//Get Final Data

function GetObligationDataFinal(customstring) {

    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var recst = new Date();
    var reced = new Date();
    var customstringnew = "";
    listObligationNewStartDate = fObligationNewDueDate;
    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {

        if (listObligationNewEndDate != "Not Available") {
            if ($("#ddlObligationOccurencess option:selected").val() == "Weekly") {
                var startDateNew = new Date();
                var newTestDateNew2 = new Date();
                recurence = "Weekly";
                var sta = false;
                var OCount = 1;
                var Cus = "";
                var CustomRecWeekly = [];
                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                    CustomRecWeekly.push(this.value);
                    Cus += (this.value) + ",";
                });

                var selectedstartdate = new Date(listObligationNewStartDate);

                for (var crw = 0; crw < CustomRecWeekly.length; crw++) {
                    if (selectedstartdate.getDay() == CustomRecWeekly[crw]) {
                        recst = new Date(listObligationNewStartDate);
                        newTestDateNew2 = new Date(listObligationNewStartDate);
                        sta = true;
                        break;
                    }
                }
                if (!sta) {

                    var newTestDate = new Date(listObligationNewStartDate);
                    var newdate = new Date(listObligationNewStartDate);
                    for (var s = 0; s < 6; s++) {
                        newdate.setDate(newdate.getDate() + 1);
                        newTestDate.setDate(newTestDate.getDate() + 1);
                        for (var crw1 = 0; crw1 < CustomRecWeekly.length; crw1++) {
                            if (newdate.getDay() == CustomRecWeekly[crw1]) {
                                recst = newdate;
                                newTestDateNew2 = newTestDate;
                                sta = true;
                                break;
                            }
                        }
                        if (sta) {
                            break;
                        }

                    }
                }

                reced = new Date(listObligationNewEndDate);


                if (reced >= recst) {
                    //Get 1 day in milliseconds
                    var one_day = 1000 * 60 * 60 * 24;

                    // Convert both dates to milliseconds
                    var date1_ms = recst.getTime();
                    var date2_ms = reced.getTime();

                    // Calculate the difference in milliseconds
                    var difference_ms = date2_ms - date1_ms;

                    // Convert back to days and return
                    var diff = Math.round(difference_ms / one_day);

                    var newCustomdate = newTestDateNew2;

                    for (var s1 = 0; s1 < diff; s1++) {
                        newCustomdate.setDate(newCustomdate.getDate() + 1);
                        for (var crw2 = 0; crw2 < CustomRecWeekly.length; crw2++) {
                            if (newCustomdate.getDay() == CustomRecWeekly[crw2]) {
                                OCount = OCount + 1;
                            }
                        }
                    }
                    occurences = OCount;
                }
                else {
                    occurences = 0;
                }
                Cus = removeLastChar(Cus, ',');


                if (occurences > 54) {
                    occurences = 12;
                    $("#rdObligationNewEndOccurence").attr('disabled', true);
                    $('#rdObligationNewEndOccurence').removeAttr('checked');
                    $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                    userFlagObli = true;

                    $('#lblerrorreclimitObligation').css('display', '');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }
                else {
                    $('#lblerrorreclimitObligation').css('display', 'none');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }


                recurenceCustomString = Cus;
                //String need to be Added for Custom

            }
            else if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
                var newstartrecdate = new Date(listObligationNewStartDate);
                recurence = "Monthly";
                var selectedstartdateNewCustom = new Date(listObligationNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listObligationNewEndDate);


                var occnew = 0;

                if (reced >= newstartrecdate) {
                    while (reced >= newstartrecdate) {
                        newstartrecdate.setMonth(newstartrecdate.getMonth() + (1 * parseInt($("#ddlRepeatMonthly option:selected").val())));
                        occnew = parseInt(occnew) + parseInt(1);
                    }

                    occurences = occnew;
                }
                else {
                    occurences = 0;
                }

                if (occurences > 54) {
                    occurences = 12;
                    $("#rdObligationNewEndOccurence").attr('disabled', true);
                    $('#rdObligationNewEndOccurence').removeAttr('checked');
                    $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                    userFlagObli = true;

                    $('#lblerrorreclimitObligation').css('display', '');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }
                else {
                    $('#lblerrorreclimitObligation').css('display', 'none');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }

                recurenceCustomString = recst.getDate();
                //String need to be Added for Custom


            }
            else {
                var newstartrecdate = new Date(listObligationNewStartDate);
                recurence = "Yearly";
                var selectedstartdateNewCustom = new Date(listObligationNewStartDate);
                recst = selectedstartdateNewCustom;
                reced = new Date(listObligationNewEndDate);


                var occnew = 0;

                if (reced >= newstartrecdate) {

                    while (reced >= newstartrecdate) {
                        newstartrecdate.setFullYear(newstartrecdate.getFullYear() + (1 * parseInt(1)));
                        occnew = parseInt(occnew) + parseInt(1);
                    }
                    occurences = occnew;


                }
                else {
                    occurences = 0;
                }

                if (occurences > 54) {
                    occurences = 12;
                    $("#rdObligationNewEndOccurence").attr('disabled', true);
                    $('#rdObligationNewEndOccurence').removeAttr('checked');
                    $("#rdObligationNewEndOccurenceUser").prop("checked", true);
                    userFlagObli = true;

                    $('#lblerrorreclimitObligation').css('display', '');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }
                else {
                    $('#lblerrorreclimitObligation').css('display', 'none');
                    $('#lblerrorreclimitObligationNotZero').css('display', 'none');
                }

                recurenceCustomString = recst.getFullYear();

            }

            startDateNew = new Date(Number(recst.getFullYear()), Number(recst.getMonth()), Number(recst.getDate()), Number(00), Number(00), Number(00), Number(00));
            startDateNew = formatDate(startDateNew);






        }
        else {
            occurences = $("#txtOccurrenceCount").val();
            recurence = $("#ddlObligationOccurencess").val();
            recurenceCustomString = "";

            if (customstring != "") {
                recurenceCustomString = customstring;
            }
            else {
                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                    recurenceCustomString += (this.value) + ",";
                });
                recurenceCustomString = removeLastChar(recurenceCustomString, ',');
            }

            startDateNew = formatDate(listObligationNewStartDate);

        }

        if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlRepeatMonthly option:selected").val();
        }

        if (occurences > 0) {
            getOcurrenceValuesForObligation(recurence, occurences, startDateNew, recurenceCustomString, customstringnew)

        }
        else {
            swal("", "contract is expired by selected date.");
        }
    }
    else {
        occurences = $("#txtOccurrenceCount").val();
        recurence = $("#ddlObligationOccurencess").val();
        recurenceCustomString = "";

        if (customstring != "") {
            recurenceCustomString = customstring;
        }
        else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }

        startDateNew = formatDate(listObligationNewStartDate);
        if ($("#ddlObligationOccurencess option:selected").val() == "Monthly") {
            customstringnew = $("#ddlRepeatMonthly option:selected").val();
        }

        getOcurrenceValuesForObligation(recurence, occurences, startDateNew, recurenceCustomString, customstringnew)

    }



}

//Self or Counterparty Change Event

var dynamicOccCount = 54;

function allowNumericsNewMonthly(field) {
    $(field).keypress(function (e) {

        var fieldValue = $(this).val();

        if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {

            return false;
        }

        if (fieldValue == "") {
            fieldValue = 0;
        }
        if (e.which != 8 && e.which != 0) {
            if (typeof (String.fromCharCode(e.which)) != "undefined")
                fieldValue += String.fromCharCode(e.which);

            if (parseInt(fieldValue) > parseInt(dynamicOccCount)) {

                return false;
            }
        }
    });
}





$("input:radio[name=SelectOccurenceEndDate]").change(function () {
    var recurenceCustomString = "";
    var Cus = "";
    var date = new Date($("#dtObligationNewOccurrenceDueDate").val())
    var ocurrTxtnew = $("#ddlObligationOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();

    }
    else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();

    }
    else {
        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }



    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {



        GetObligationDataFinal(Cus);

    } else {
        userFlagObli = false;
        var recurenceCustomString = "";

        if (Cus != "") {
            recurenceCustomString = Cus;
        }
        else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }

        var cusRecMonthstring = "";
        if ($("#ddlObligationOccurencess").val() == "Monthly") {
            cusRecMonthstring = $("#ddlRepeatMonthly option:selected").val();
        }


        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, recurenceCustomString, cusRecMonthstring);
    }
});



//Event Of Text Box count Change Event

$("#txtOccurrenceCount").focusout(function () {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    if ($("#txtOccurrenceCount").val() != "" && $('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {


        if (parseInt($("#txtOccurrenceCount").val()) == 0) {
            $('#lblerrorreclimitObligationNotZero').css('display', '');
            $('#lblerrorreclimitObligation').css('display', 'none');
        }
        else {
            $('#lblerrorreclimitObligationNotZero').css('display', 'none');
            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                $('#lblerrorreclimitObligation').css('display', '');
            }
            else {
                //$('#lblerrorreclimitObligation').css('display', 'none');

                var date = new Date(fObligationNewDueDate);
                var Cus = "";
                var cusRecMon = "";
                var ocurrTxtnew = $("#ddlObligationOccurencess").val();
                if (ocurrTxtnew == "Monthly") {
                    Cus = date.getDay();
                    cusRecMon = $("#ddlRepeatMonthly option:selected").val();
                }
                else if (ocurrTxtnew == "Yearly") {
                    Cus = date.getFullYear();

                }
                else {
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        Cus += (this.value) + ",";
                    });
                    Cus = removeLastChar(Cus, ',');
                }
                occurences = $("#txtOccurrenceCount").val();
                recurence = $("#ddlObligationOccurencess").val();
                recurenceCustomString = "";

                if (Cus != "") {
                    recurenceCustomString = Cus;
                }
                else {
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        recurenceCustomString += (this.value) + ",";
                    });
                    recurenceCustomString = removeLastChar(recurenceCustomString, ',');
                }
                getOcurrenceValuesForObligation(recurence, occurences, listObligationNewStartDate, recurenceCustomString, cusRecMon);



            }
        }

    }

});





$("#dtObligationNewDueDate").focusout(function () {

    if ($("#dtObligationNewDueDate").val() != "") {
        document.getElementById("ddlObligationOccurencess").disabled = false;
    }
    else {
        document.getElementById("ddlObligationOccurencess").disabled = true;

    }

});



//Weekly Change Event Of Check Box

$("input:checkbox[name=chkRecurrenceCustom]").change(function () {
    recurenceCustomString = "";
    var Cus = "";
    var cusRecMon = "";
    var ocurrTxtnew = $("#ddlObligationOccurencess").val();
    if (ocurrTxtnew == "Monthly") {
        Cus = date.getDay();
        cusRecMon = $("#ddlRepeatMonthly option:selected").val();
    }
    else if (ocurrTxtnew == "Yearly") {
        Cus = date.getFullYear();

    }
    else {
        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
            Cus += (this.value) + ",";
        });
        Cus = removeLastChar(Cus, ',');
    }



    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'TillEnd') {



        GetObligationDataFinal(Cus);

    } else {

        recurenceCustomString = "";

        if (Cus != "") {
            recurenceCustomString = Cus;
        }
        else {
            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                recurenceCustomString += (this.value) + ",";
            });
            recurenceCustomString = removeLastChar(recurenceCustomString, ',');
        }
        getOcurrenceValuesForObligation($("#ddlObligationOccurencess").val(), $("#txtOccurrenceCount").val(), listObligationNewStartDate, recurenceCustomString, cusRecMon);
    }
});



// Add More Click Event
$('#addObligationCatalogpopup').click(function () {

    clearobligationcatalogs();

    $("#productcompleteddate").css('display', 'none');
    $('#dtObligationProductCompletedDate').removeClass('validelement');
    $('#dtObligationProductCompletedDate').removeClass('validdate');
    $('#dtObligationProductCompletedDate').val("");


    if ($('#hdnProductUpdates').text() == "EDIT") {
        $('#hdnProductUpdates').text('');
        $('#hdnProductUpdates').text('EDITCATALOG');
    }


    $("#hdncatalogselect").val("SINGLE");

    var text = $("#hdnBaseContractCurrency").text();

    if (text != "") {
        $("#CurrencyExpected").text(text);

        $("#CurrencyActual").text(text);
    }
    else {
        $("#CurrencyExpected").text($('#hdnBaseCurrency').val());

        $("#CurrencyActual").text($('#hdnBaseCurrency').val());
    }





    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    $('#obligationcatalogsAddPopup').dialog('open', 'title', '');
});


$('#addObligationCatalogMultipopup').click(function () {

    $("#hdncatalogselect").val("MULTIPLE");

    if ($('#tbodyExistingMulProducts tr').length <= 0) {
        getProducts();
    } else {
        clearObligationproductsmul();
        $('#loadProduct').empty();
        $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsMulPopup").dialog("open");
    }

});






function AddObligationProduct() {
    var vProduct = "";
    var vProductID = "";
    $('input:radio[name="ExtProducts"]:checked').each(function () {
        if (vProduct == "") {
            vProduct = this.value;
            vProductID = this.id;
        }
        else {
            vProduct += "; " + this.value;
            vProductID += "; " + this.id;
        }
    });
    if (vProduct != "") {
        if ($("#hdncatalogselect").val() == "QUICK") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductUnits').text();

            if (Units != null && Units != "" && Units != "null") {
                $('#ddlObligationCatalogUnitsInline').val(Units);
            }
            else {
                $('#ddlObligationCatalogUnitsInline').val("0");
            }
            $('#txtObligationCatalogTitleInline').val(vProduct);

        }
        else if ($("#hdncatalogselect").val() == "SINGLE") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductUnits').text();
            var Price = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();
            var ProductCurrency = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductCurrency').text();

            if (Price != null && Price != "" && Price != "null" && Price != 0) {

                $('#txtObligationProductAmountNewEdit').autoNumeric('set', Price);
                $('#txtObligationProductAmountNew').autoNumeric('set', Price);

                if (ProductCurrency == "" || ProductCurrency == null) {

                }
                else {

                    $("#CurrencyExpected").text(ProductCurrency);

                    $("#CurrencyActual").text(ProductCurrency);
                }

            }
            else {
                $('#txtObligationProductAmountNewEdit').val("");
                $('#txtObligationProductAmountNew').val("");
            }


            if (Units != null && Units != "" && Units != "null") {
                $('#ddlObligationCatalogUnitsEdit').val(Units);
                $('#ddlObligationCatalogUnits').val(Units);
                $('#ddlObligationCatalogUnitsNew').val(Units);
                $('#ddlObligationCatalogUnitsNewEdit').val(Units);



            }
            else {
                $('#ddlObligationCatalogUnitsEdit').val("0");
                $('#ddlObligationCatalogUnits').val("0");
                $('#ddlObligationCatalogUnitsNew').val("0");
                $('#ddlObligationCatalogUnitsNewEdit').val("0");
            }


            $('#txtObligationCatalogName').val(vProduct);
            $('#txtTransProductName').val(vProduct);
            $('#txtObligationCatalogNameedit').val(vProduct);
        }
        else if ($("#hdncatalogselect").val() == "FINANCIALSINGLE") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();
            var ProductCurrency = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductCurrency').text();



            if (Units != null && Units != "" && Units != "null" && Units != 0) {

                $('#txtObligationFinancialsAmountEdit').autoNumeric('set', Units);
                $('#txtObligationFinancialsAmount').autoNumeric('set', Units);

                if (ProductCurrency == "" || ProductCurrency == null) {

                }
                else {

                    $("#CurrencyExpected").text(ProductCurrency);
                    $("#CurrencyActual").text(ProductCurrency);
                    $("#CurrencyEditExpected").text(ProductCurrency);
                    $("#CurrencyEditActual").text(ProductCurrency);

                }
            }
            else {
                $('#txtObligationFinancialsAmountEdit').val("");
                $('#txtObligationFinancialsAmount').val("");
            }


            $('#txtObligationFinancialsName').val(vProduct);
            $('#txtObligationFinancialsNameedit').val(vProduct);
        }
        else if ($("#hdncatalogselect").val() == "FINANCIALQUICK") {
            var Units = $('input[name=ExtProducts]:checked').parent().parent().find('#ProductPrice').text();

            if (Units != null && Units != "" && Units != "null" && Units != 0) {
                $('#txtObligationFinancialAmountInline').val(Units);
            }
            else {
                $('#txtObligationFinancialAmountInline').val("");
            }
            $('#txtObligationFinancialsTitleInline').val(vProduct);
        }

        return true;
    } else {
        swal("", "No Product has been selected.");
        return false;
    }

}


$('#viewObligationProductDetails').click(function () {


    //$('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    //if ($('#tbodyExistingProducts tr').length <= 0) {
    getProducts();
    //} else {
    //getProducts();

    //$('#loadProduct').empty();
    //$("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
    //$("#viewProductsPopup").dialog("open");
    //}




});



$('#viewObligationProductDetailsEdit').click(function () {


    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }




});


function SaveObligationcatalog() {


    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationCatalogForm', false)) {

        var vTitle = $("#txtObligationCatalogName").val();

        $("#loadingPage").fadeIn();
        CreateObligationCatalog();


    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();

}


function CreateObligationCatalog() {
    if ($('#hdnObligationUniqueId').text() != null && $('#hdnObligationUniqueId').text() != "" && $('#hdnObligationUniqueId').text() != "null") {
        var vTitle = $("#txtObligationCatalogName").val();
        var stringUnitType = "";
        if ($("#ddlObligationCatalogUnitType").val() != "0") {
            stringUnitType = $("#ddlObligationCatalogUnitType option:selected").text();
        }
        var obliCurrency = "";
        if ($("#CurrencyActual").text() != "") {
            obliCurrency = $("#CurrencyActual").text();
        }
        else if ($("#CurrencyExpected").text() != "") {
            obliCurrency = $("#CurrencyExpected").text();
        }
        else if ($("#hdnBaseContractCurrency").text() != "") {
            obliCurrency = $("#hdnBaseContractCurrency").text();
        }
        else {
            obliCurrency = $("#hdnBaseCurrency").val();
        }


        var completedate = null;
        if ($("#ddlObligationCatalogStatus").find('option:selected').text() == "Complete" || $("#ddlObligationCatalogStatus").find('option:selected').text() == "Cancelled") {
            completedate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationProductCompletedDate").datepicker('getDate'));

        }


        var catalogForm = "ObligationCatalogName=" + vTitle;
        catalogForm += "&ObligationText=" + $('#hdnObligationUniqueId').text();
        catalogForm += "&ObligationID=" + $('#hdnObligationRowKey').text();
        catalogForm += "&ObligationUnits=" + $("#ddlObligationCatalogUnits option:selected").text();
        catalogForm += "&AccountID=" + localStorage.AccountID;
        catalogForm += "&CreatedBy=" + localStorage.UserName;
        catalogForm += "&ModifiedBy=" + localStorage.UserName;
        catalogForm += "&ObligationQuantity=" + $("#txtObligationCatalogQty").val();
        catalogForm += "&ObligationQtyType=" + stringUnitType;
        catalogForm += "&Description=" + $("#txtObligationCatalogDesc").val();
        catalogForm += "&ObligationCatalogStatus=" + $("#ddlObligationCatalogStatus option:selected").text();
        catalogForm += "&QuantityActual=" + $("#txtObligationCatalogQtyNew").val();

        catalogForm += "&CompletedDate=" + completedate;

        //Merge the Financials
        catalogForm += "&ObligationCurrency=" + obliCurrency;
        catalogForm += "&ObligationAmountType=" + $("#ddlObligationProductAmountTypeNew option:selected").text();
        catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
        catalogForm += "&AmountActual=" + $("#txtObligationProductAmountNewActual").autoNumeric('get');
        catalogForm += "&ObligationAmount=" + $("#txtObligationProductAmountNew").autoNumeric('get');



        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?contractid=' + vContractID,
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            data: catalogForm,
            cache: false,
            success: function (data) {
                getObligationCatalogsNew(vContractID, $('#hdnObligationUniqueId').text(), $('#hdnObligationRowKey').text());
                $("#obligationcatalogsAddPopup").dialog("close");

            },
            error: function (data) {
                $("#loadingPage").fadeOut();
            }
        });

    }
    else {
        CreateObligationDuplicate();
    }

}



function CreateObligationDuplicate() {
    var catalogForm = "ObligationTitle=" + "Untitled";
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/duplicate?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (obligation) {
            $('#hdnObligationUniqueId').text(obligation.ObligationText);
            $('#hdnObligationRowKey').text(obligation.RowKey);
            CreateObligationCatalog();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}









var vCatalogCount = "No";
var vFinancialCount = "No";
function getObligationCatalogsbycontract(contractid, obligationtext) {
    $("#ulObligationCatalogBody").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/obligationtxt?obligationtext=' + obligationtext,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (data.length > 0) {
                vCatalogCount = "Yes";
                $('#txtObligationProductsCount').val("Yes");
                document.getElementById('obligationcatalogDetailsTable').style.display = '';
                document.getElementById('NoObligationCatalog').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";

                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleObligationCatalogs" onclick="checkMultipleObligationCatalogs(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationCatalogDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].ObligationCatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationCatalogs"/>';

                    var htmlContent = "<tr>";
                    htmlContent += "<td><p id='ObligationCatalogID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='ObligationCatalogTitle' style='display:none;'>" + data[i].ObligationCatalogName + "</span>";
                    htmlContent += "<span id='ObligationCatalogObligationText' style='display:none;'>" + data[i].ObligationText + "</span>";
                    htmlContent += "<span id=''ObligationCatalogUnits' style='display:none;'>" + data[i].ObligationUnits + "</span>";
                    htmlContent += "<span id=''ObligationCatalogQty' style='display:none;'>" + data[i].ObligationQuantity + "</span>";

                    htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";

                    if (data[i].ObligationQuantity != "" && data[i].ObligationQuantity != null) {
                        htmlContent += "<td><span style='margin-left: 10px;float:left' id='ObligationQty" + data[i].RowKey + "'>" + data[i].ObligationQuantity + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }

                    if (data[i].QuantityActual != "" && data[i].QuantityActual != null && data[i].QuantityActual != "null") {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='QuantityActual" + data[i].RowKey + "'>" + data[i].QuantityActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }

                    if (data[i].ObligationAmount != "" && data[i].ObligationAmount != null && data[i].ObligationAmount != "0" && data[i].ObligationAmount != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='ObligationAmount" + data[i].RowKey + "'>" + data[i].ObligationAmount + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }

                    if (data[i].AmountActual != "" && data[i].AmountActual != null && data[i].AmountActual != "0" && data[i].AmountActual != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='AmountActual" + data[i].RowKey + "'>" + data[i].AmountActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }

                    if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                        if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                            htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "</a></td>";
                        }
                        else {
                            htmlContent += "<td style='padding:2px;'><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + data[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                        }
                    }
                    else
                        htmlContent += "<td><a href='javascript:void(0);'  class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                    htmlContent += "</tr>";
                    $("#ulObligationCatalogBody").append(htmlContent);

                }
                $(".openmenuRelatedObligationCatalogs").contextMenu({ menu: 'dropdownMenuRelatedObligationCatalogs', leftButton: true }, function (action, el, pos) {
                    contextMenuObligationCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                });



                $(".openmenuObligationCatalogStatusSettings").contextMenu({
                    menu: 'dropdownMenuObligationStatusSettings', leftButton: true
                }, function (action, el, pos) {
                    contextMenuObligationCatalogStatusSettings(action, el.parent("tr"), pos);
                });



            }
            else {

            }

        },
        error: function (data) {
            document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
            vCatalogCount = "No";
            $('#NoObligationCatalog').css('display', '');

            $('#txtObligationProductsCount').val("No");
            $("#loadingPage").fadeOut();
            vExist = false;
        }
    });

}

function getObligationCatalogsNew(contractid, obligationtext, obligationId) {
    $("#ulObligationCatalogBody").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?obligationtext=' + obligationtext + '&obligationId=' + obligationId,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (data.length > 0) {

                var d = $.grep(data, function (p) { return p.ObligationCatalogStatus != "Complete" && p.ObligationCatalogStatus != "Cancelled"; })
        .map(function (p) { return p });

                if (d != null && d != "" && d.length > 0) {
                    validateproducts = false;
                }
                else {
                    validateproducts = true;
                }
                vCatalogCount = "Yes";
                $('#txtObligationProductsCount').val("Yes");
                document.getElementById('obligationcatalogDetailsTable').style.display = '';
                document.getElementById('NoObligationCatalog').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";

                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleObligationCatalogs" onclick="checkMultipleObligationCatalogs(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationCatalogDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].ObligationCatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationCatalogs"/>';

                    var htmlContent = "<tr>";
                    htmlContent += "<td><p id='ObligationCatalogID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='ObligationCatalogTitle' style='display:none;'>" + data[i].ObligationCatalogName + "</span>";
                    htmlContent += "<span id='ObligationCatalogObligationText' style='display:none;'>" + data[i].ObligationText + "</span>";
                    htmlContent += "<span id=''ObligationCatalogUnits' style='display:none;'>" + data[i].ObligationUnits + "</span>";
                    htmlContent += "<span id=''ObligationCatalogQty' style='display:none;'>" + data[i].ObligationQuantity + "</span>";

                    htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";

                    if (data[i].ObligationQuantity != "" && data[i].ObligationQuantity != null) {
                        htmlContent += "<td><span style='margin-left: 10px;float:left' id='ObligationQty" + data[i].RowKey + "'>" + data[i].ObligationQuantity + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }

                    if (data[i].QuantityActual != "" && data[i].QuantityActual != null && data[i].QuantityActual != "null") {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='QuantityActual" + data[i].RowKey + "'>" + data[i].QuantityActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationUnits + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }

                    if (data[i].ObligationAmount != "" && data[i].ObligationAmount != null && data[i].ObligationAmount != "0" && data[i].ObligationAmount != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='ObligationAmount" + data[i].RowKey + "'>" + data[i].ObligationAmount + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }

                    if (data[i].AmountActual != "" && data[i].AmountActual != null && data[i].AmountActual != "0" && data[i].AmountActual != 0) {
                        htmlContent += "<td ><span style='margin-left: 10px;float:left' id='AmountActual" + data[i].RowKey + "'>" + data[i].AmountActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + data[i].ObligationCurrency + "</lable></td>";

                    }
                    else {
                        htmlContent += '<td style="text-align: center;"> - </td>';

                    }
                    if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                        if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                            htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "</a></td>";
                        }
                        else {
                            htmlContent += "<td style='padding:2px;><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + data[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                        }
                    }
                    else
                        htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + data[i].ObligationCatalogStatus + "</a></td>";
                    htmlContent += "</tr>";
                    $("#ulObligationCatalogBody").append(htmlContent);

                }
                $(".openmenuRelatedObligationCatalogs").contextMenu({ menu: 'dropdownMenuRelatedObligationCatalogs', leftButton: true }, function (action, el, pos) {
                    contextMenuObligationCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                });



                $(".openmenuObligationCatalogStatusSettings").contextMenu({
                    menu: 'dropdownMenuObligationStatusSettings', leftButton: true
                }, function (action, el, pos) {
                    contextMenuObligationCatalogStatusSettings(action, el.parent("tr"), pos);
                });



            }
            else {

            }


        },
        error: function (data) {
            document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
            vCatalogCount = "No";
            $('#NoObligationCatalog').css('display', '');
            validateproducts = true;

            $('#txtObligationProductsCount').val("No");
            $("#loadingPage").fadeOut();
            vExist = false;
        }
    });

}





function SaveMulObligationCatalogsProducts() {
    $("#loadingPage").fadeIn();

    $('input:checkbox[name="ExtProductsMul"]:checked').each(function () {

        var vProduct = this.value;
        var vProductID = this.id;
        var Units = "";
        var Price = "";
        var Currency = "";
        if ($(this).parent().parent().find('#ProductUnits').text() != null && $(this).parent().parent().find('#ProductUnits').text() != "" && $(this).parent().parent().find('#ProductUnits').text() != "null") {
            Units = $(this).parent().parent().find('#ProductUnits').text();
        }
        if ($(this).parent().parent().find('#ProductPrice').text() != null && $(this).parent().parent().find('#ProductPrice').text() != "" && $(this).parent().parent().find('#ProductPrice').text() != "null" && $(this).parent().parent().find('#ProductPrice').text() != 0) {
            Price = $(this).parent().parent().find('#ProductPrice').text();
        }

        if ($("#hdncatalogselect").val() == "MULTIPLE") {
            var catalogForm = "ObligationCatalogName=" + vProduct;

            catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
            catalogForm += "&ObligationUnits=" + Units;
            catalogForm += "&AccountID=" + localStorage.AccountID;
            catalogForm += "&CreatedBy=" + localStorage.UserName;
            catalogForm += "&ModifiedBy=" + localStorage.UserName;
            catalogForm += "&ObligationQuantity=" + "";
            catalogForm += "&ObligationQtyType=" + "";
            catalogForm += "&Description=" + "";
            catalogForm += "&ObligationCatalogStatus=" + "";
            //Merge the Financials
            catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
            catalogForm += "&ObligationAmountType=" + "";
            catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
            catalogForm += "&AmountActual=" + "";
            catalogForm += "&ObligationAmount=" + Price;


            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?contractid=' + vContractID,
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: catalogForm,
                cache: false,
                success: function (data) {

                },
                error: function (data) {
                    $("#loadingPage").fadeOut();
                }
            });
        }
        else {

            var catalogForm = "ObligationFinancialsName=" + vProduct;

            catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
            catalogForm += "&ObligationAmount=" + Price;
            catalogForm += "&AccountID=" + localStorage.AccountID;
            catalogForm += "&CreatedBy=" + localStorage.UserName;
            catalogForm += "&ModifiedBy=" + localStorage.UserName;
            catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
            catalogForm += "&ObligationAmountType=" + "";
            catalogForm += "&Description=" + "";
            catalogForm += "&ObligationFinancialsStatus=" + "";

            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?contractid=' + vContractID,
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: catalogForm,
                cache: false,
                success: function (data) {

                },
                error: function (data) {
                    $("#loadingPage").fadeOut();
                }
            });
        }


    });

    if ($("#hdncatalogselect").val() == "MULTIPLE") {
        getObligationCatalogsbycontract(vContractID, $("#txtObligationNewText").val());
    }
    else {
        getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
    }
}




var multipleObligationProductsChecks = "";
function checkMultipleObligationCatalogs(object) {
    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#obligationCatalogAction").css('display', '');
        multipleObligationProductsChecks = multipleObligationProductsChecks + ';' + CatalogID;
    } else {
        multipleObligationProductsChecks = multipleObligationProductsChecks.replace(';' + CatalogID, '');
    }

    if (multipleObligationProductsChecks.trim() == "") {
        $("#obligationCatalogAction").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}






function contextMenuObligationCatalogMul(action, el, pos) {
    switch (action) {

        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();

             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationscatalogs?catalogids=' + multipleObligationProductsChecks,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     multipleObligationProductsChecks = "";
                     $("#obligationCatalogAction").css('display', 'none');
                     $("#loadingPage").fadeOut();
                     getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());


                 }
             });
         }
         return;
     });

                break;
            }
    }
}



$('#btnAddObligationCatalogInline').click(function () {



    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationCatalogInline', false)) {

        var vTitle = $("#txtObligationCatalogName").val();

        $("#loadingPage").fadeIn();


        CreateObligationCatalogQuick();


    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();





});


function CreateObligationCatalogQuick() {
    var vTitle = $("#txtObligationCatalogTitleInline").val();

    var catalogForm = "ObligationCatalogName=" + vTitle;

    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationUnits=" + $("#ddlObligationCatalogUnitsInline option:selected").text();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationQuantity=" + $("#txtObligationCatalogQtyInline").val();
    catalogForm += "&ObligationQtyType=" + $("#ddlObligationCatalogInlineUnitsType option:selected").text();
    catalogForm += "&Description=" + "";
    catalogForm += "&ObligationCatalogStatus=" + $("#ddlObligationCatalogStatusInline option:selected").text();
    catalogForm += "&QuantityActual=" + "";



    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {
            togglediv('tblObligationCatalog', '', '');

            getObligationCatalogsbycontract(vContractID, $("#txtObligationNewText").val());

        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}




function viewObligationCatalogProductsQuick() {

    $("#hdncatalogselect").val("QUICK");

    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
}


function viewObligationFinancialsProductsQuick() {

    $("#hdncatalogselect").val("FINANCIALQUICK");

    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();
    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
}



// Add More Click Event
$('#addObligationFinancialspopup').click(function () {

    clearobligationfinancials();
    $("#hdncatalogselect").val("FINANCIALSINGLE");

    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });

    $('#obligationfinancialsAddPopup').dialog('open');
});



$('#addObligationFinancialsMultipopup').click(function () {

    $("#hdncatalogselect").val("FINANCIALMULTIPLE");

    if ($('#tbodyExistingMulProducts tr').length <= 0) {
        getProducts();
    } else {
        clearObligationproductsmul();
        $('#loadProduct').empty();
        $("#viewProductsMulPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsMulPopup").dialog("open");
    }

});




function SaveObligationfinancials() {


    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationFinancialsForm', false)) {

        var vTitle = $("#txtObligationFinancialsName").val();

        $("#loadingPage").fadeIn();


        CreateObligationFinancial();


    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();

}

function CreateObligationFinancial() {
    var vTitle = $("#txtObligationFinancialsName").val();



    var catalogForm = "ObligationFinancialsName=" + vTitle;

    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationAmount=" + $("#txtObligationFinancialsAmount").val();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationFinancialsAmountType option:selected").text();
    catalogForm += "&Description=" + $("#txtObligationFinancialsDesc").val();
    catalogForm += "&ObligationFinancialsStatus=" + $("#ddlObligationFinancialsStatus option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {
            getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
            $("#obligationfinancialsAddPopup").dialog("close");

        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

function getObligationFinancialsbycontract(contractid, obligationtext) {
    $("#ulObligationFinancialsBody").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/obligationtxt?obligationtext=' + obligationtext,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            if (data.length > 0) {
                vFinancialCount = "Yes";
                $('#txtObligationFinancialsCount').val("Yes");

                document.getElementById('obligationFinancialsDetailsTable').style.display = '';
                document.getElementById('NoObligationFinantials').style.display = 'none';
                for (var i = 0; i < data.length; i++) {
                    var str = "";
                    var strCommitment = "";
                    var strCom = "";
                    var url = '<input type="checkbox" id="' + data[i].RowKey + '" name="MultipleObligationFinancials" onclick="checkMultipleObligationFinancials(this);" value="' + data[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationFinancialsDetail(\'' + data[i].RowKey + '\')" class="linkText">' + data[i].ObligationFinancialsName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationFinancials"/>';
                    var htmlContent = "<tr>";
                    htmlContent += "<td  ><span >&nbsp;</span><p id='FinancialsID' style='display:none;'>" + data[i].RowKey + "</p>";
                    htmlContent += "<span id='ObligationFinancialsTitle' style='display:none;'>" + data[i].ObligationFinancialsName + "</span>";
                    htmlContent += "<span id='ObligationFinancialsObligationText' style='display:none;'>" + data[i].ObligationText + "</span>";
                    htmlContent += "<span id=''ObligationFinancialsAmount' style='display:none;'>" + data[i].ObligationAmount + "</span>";
                    htmlContent += "<span id=''ObligationFinancialsAmountType' style='display:none;'>" + data[i].ObligationAmountType + "</span>";

                    htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                    htmlContent += "<td ><span style='margin-left: 10px;float: left;'  id='ObligationAmount" + data[i].RowKey + "'>" + data[i].ObligationAmount + "</span>&nbsp;<lable style='float:left;margin-left: 10px;'> (" + $("#hdnContractCurrency").text() + ") </lable></td>";

                    htmlContent += "<td  ><lable id='ObligationStatus" + data[i].RowKey + "'>" + data[i].ObligationFinancialsStatus + "</lable></td>"
                    htmlContent += "</tr>";
                    $("#ulObligationFinancialsBody").append(htmlContent);

                }
                $(".openmenuRelatedObligationFinancials").contextMenu({ menu: 'dropdownMenuRelatedObligationFinancials', leftButton: true }, function (action, el, pos) {
                    contextMenuObligationFinancials(action, el.parent("i").parent("td").parent("tr"), pos);
                });

            }
            else {

            }

        },
        error: function (data) {
            document.getElementById("cbObligationCatalogFinancialsSelect").disabled = false;
            vFinancialCount = "No";
            $('#NoObligationFinantials').css('display', '');
            $('#txtObligationFinancialsCount').val("No");
            $("#loadingPage").fadeOut();
            vExist = false;
        }
    });

}


var multipleObligationFinancialsChecks = "";
function checkMultipleObligationFinancials(object) {

    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#obligationFinancialsAction").css('display', '');
        multipleObligationFinancialsChecks = multipleObligationFinancialsChecks + ';' + CatalogID;
    } else {
        multipleObligationFinancialsChecks = multipleObligationFinancialsChecks.replace(';' + CatalogID, '');
    }

    if (multipleObligationFinancialsChecks.trim() == "") {
        $("#obligationFinancialsAction").css('display', 'none');
    }
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}



function contextMenuObligationFinancialsMul(action, el, pos) {

    switch (action) {

        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();

             var multipleChecksArray = multipleObligationFinancialsChecks.split(';');
             var multipleChecksArraylength = multipleChecksArray.length;
             for (var i = 1; i < multipleChecksArraylength; i++) {
                 $.ajax({
                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?catalogid=' + multipleChecksArray[i],
                     type: 'DELETE',
                     dataType: 'json',
                     headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                     cache: false,
                     success: function (data) {
                     }
                 });



             }
             swal("", "Items Deleted");
             getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());

             $("#obligationFinancialsAction").css('display', 'none');
             $("#loadingPage").fadeOut();

         }
         return;
     });

                break;
            }
    }
}


$('#viewObligationFinancialsProductDetails').click(function () {


    $('#loadProduct').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tbodyExistingProducts tr').length <= 0) {
        getProducts();

    } else {
        clearobligationproducts();
        $('#loadProduct').empty();
        $("#viewProductsPopup").dialog("option", "title", "Products & Services Catalog");
        $("#viewProductsPopup").dialog("open");
    }
});


$('#btnAddObligationFinancialsInline').click(function () {



    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationFinancialsInline', false)) {

        var vTitle = $("#txtObligationFinancialsTitleInline").val();

        $("#loadingPage").fadeIn();


        CreateObligationFinancialQuick();


    }
    $("#spInProgress").css('visibility', 'hidden');
    $("#loadingPage").fadeOut();





});

function CreateObligationFinancialQuick() {
    var vTitle = $("#txtObligationFinancialsTitleInline").val();

    var catalogForm = "ObligationFinancialsName=" + vTitle;

    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationAmount=" + $("#txtObligationFinancialAmountInline").val();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&CreatedBy=" + localStorage.UserName;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationFinancialsInlineAmountType option:selected").text();
    catalogForm += "&Description=" + "";
    catalogForm += "&ObligationFinancialsStatus=" + $("#ddlObligationFinancialsStatusInline option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();


    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?contractid=' + vContractID,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {

            swal("", "Item Added");
            togglediv('tblObligationFinancials', '', '');

            getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());

        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}




function contextMenuObligationCatalogs(action, el, pos) {

    switch (action) {
        case "view":
            {
                var catalogId = $(el).find("#ObligationCatalogID").text();
                ViewObligationCatalogDetail(catalogId);
                break;
            }
        case "delete":
            {
                var catalogTitle = $(el).find("#ObligationCatalogTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + catalogTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             var catalogId = $(el).find("#ObligationCatalogID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + catalogId,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {

                     if ($('#hdnProductUpdates').text() == "EDIT") {
                         $('#hdnProductUpdates').text('');
                         $('#hdnProductUpdates').text('EDITCATALOG');
                     }

                     getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                 },
                 complete: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#ObligationCatalogID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + catalogId,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {


                        if ($('#hdnProductUpdates').text() == "EDIT") {
                            $('#hdnProductUpdates').text('');
                            $('#hdnProductUpdates').text('EDITCATALOG');
                        }




                        $('#obliCatalogQtyEditsummary').text('');
                        $("#txtObligationCatalogNameedit").prop('disabled', true);
                        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
                        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
                        $("#txtObligationCatalogQtyNewEdit").val('');

                        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                        $("#txtObligationProductAmountNewActualEdit").val('');
                        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);

                        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')

                        $("#lblObligationCatalogCTitleEdit").text($("#lblContractTitle").text());
                        $("#txtObligationCatalogIDedit").val(cataloentity.RowKey);
                        $("#txtObligationCatalogNameedit").val(cataloentity.ObligationCatalogName);

                        if (cataloentity.ObligationUnits != "" && cataloentity.ObligationUnits != null) {
                            $("#ddlObligationCatalogUnitsEdit").val(cataloentity.ObligationUnits);
                            $("#ddlObligationCatalogUnitsNewEdit").val(cataloentity.ObligationUnits);


                        }
                        else {
                            $("#ddlObligationCatalogUnitsEdit").val("0");
                            $("#ddlObligationCatalogUnitsNewEdit").val("0");


                        }
                        $("#ddlObligationCatalogUnitsEdit").addClass('validelement');
                        if (cataloentity.ObligationCatalogStatus != "" && cataloentity.ObligationCatalogStatus != null) {

                            if (cataloentity.ObligationCatalogStatus == "Complete") {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);

                                if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {

                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
                                }
                                else {
                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                                }

                                if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {

                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')


                                }
                                else {
                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                                }




                            }
                            else {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val("");


                                $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                                $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')



                            }

                        }
                        else {
                            $("#ddlObligationCatalogStatusEdit").val(0);
                            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')

                        }


                        if (cataloentity.Description != "" && cataloentity.Description != null) {
                            $("#txtObligationCatalogDescEdit").val(cataloentity.Description);

                        }
                        else {
                            $("#txtObligationCatalogDescEdit").val("");

                        }


                        if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {
                            $("#txtObligationCatalogQtyEdit").val(cataloentity.ObligationQuantity);

                        }
                        else {
                            $("#txtObligationCatalogQtyEdit").val("");

                        }

                        if (cataloentity.ObligationQtyType != "" && cataloentity.ObligationQtyType != null) {
                            $("#ddlObligationCatalogUnitTypeEdit").val(cataloentity.ObligationQtyType);

                        }
                        else {
                            $("#ddlObligationCatalogUnitTypeEdit").val(0);

                        }


                        //Newly Added Columns

                        if (cataloentity.QuantityActual != "" && cataloentity.QuantityActual != null) {
                            $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);





                            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
                            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');





                            var string1 = "";
                            string1 = "Quantity Actual vs Expected, ";



                            if (parseInt(cataloentity.QuantityActual) >= parseInt(cataloentity.ObligationQuantity)) {
                                string1 += encodeURIComponent("+" + parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity));

                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_dec');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_act');

                            }
                            else {
                                string1 += parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity);

                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_act');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_dec');
                            }

                            $("#obliCatalogQtyEditsummary").text(string1);

                        }
                        else {
                            $("#txtObligationCatalogQtyNewEdit").val("");
                            $("#obliCatalogQtyEditsummary").text("");


                        }


                        var text = cataloentity.ObligationCurrency;

                        if (text != "") {
                            $("#CurrencyEditExpected").text(text);

                            $("#CurrencyEditActual").text(text);
                        }
                        else if ($('#hdnContractCurrency').text() != "") {

                            $("#CurrencyEditExpected").text($('#hdnContractCurrency').text());

                            $("#CurrencyEditActual").text($('#hdnContractCurrency').text());
                        }
                        else {
                            $("#CurrencyEditExpected").text($('#hdnBaseCurrency').val());

                            $("#CurrencyEditActual").text($('#hdnBaseCurrency').val());
                        }



                        if (cataloentity.ObligationAmountType != "" && cataloentity.ObligationAmountType != null) {
                            $("#ddlObligationProductAmountTypeNewEdit").val(cataloentity.ObligationAmountType);

                        }
                        else {
                            $("#ddlObligationProductAmountTypeNewEdit").val(0);

                        }


                        if (cataloentity.ObligationAmount != "" && cataloentity.ObligationAmount != null && cataloentity.ObligationAmount != "0" && cataloentity.ObligationAmount != 0) {

                            $('#txtObligationProductAmountNewEdit').autoNumeric('set', cataloentity.ObligationAmount);

                        }
                        else {

                            $("#txtObligationProductAmountNewEdit").val("");

                        }


                        if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {

                            $('#txtObligationProductAmountNewActualEdit').autoNumeric('set', cataloentity.AmountActual);
                            var string1 = "";
                            string1 = "Amount Actual vs Expected, ";

                            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);



                            var currency1 = cataloentity.ObligationAmount;
                            var currency2 = cataloentity.AmountActual;


                            string1 = "Amount Actual vs Expected, ";


                            $('#catalogAmountsumaryTitleEdit').text(string1);
                            if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {


                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_act')

                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_act')

                            }
                            else {

                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));

                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);


                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_dec')
                            }

                        }
                        else {
                            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
                            $("#txtObligationProductAmountNewActualEdit").val("");
                            $('#catalogAmountsumaryValueEdit').text('');
                            $('#catalogAmountsumaryTitleEdit').text('');

                        }


                        if (cataloentity.ObligationCatalogStatus == "Complete" || cataloentity.ObligationCatalogStatus == "Cancelled") {

                            if (cataloentity.CompletedDate != null && cataloentity.CompletedDate != "") {
                                var CDate;

                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { CDate = moment(new Date(cataloentity.CompletedDate)).format('MM/DD/YYYY'); }
                                else { CDate = moment(new Date(cataloentity.CompletedDate)).format(localStorage.AppDateFormat); }

                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);


                            }
                            else {
                                var CDate = new Date();
                                CDate = formatDate(CDate);

                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
                                else { CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat); }
                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);
                            }
                        }
                        else {
                            $("#productcompleteddateEdit").css('display', 'none');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validelement');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validdate');
                            $('#dtObligationProductCompletedDateEdit').val("");
                        }

                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });



                        $("#loadingPage").fadeOut();


                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });


                $("#obligationcatalogseditPopup").dialog("option", "title", "");
                $("#obligationcatalogseditPopup").dialog("open");
                break;
            }


    }
}



function ViewObligationCatalogDetail(catalogid) {
    $("#loadingPage").fadeIn();
    $('#tblObligationCatalogMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + catalogid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
        "Content-Type": "application/json",
        cache: false,
        success: function (catalogentity) {

            $("#loadingPage").fadeOut();

            if (catalogentity != null) {

                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width40">Catalog Title</td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationCatalogName + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Units </td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationUnits + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Quantity</td>';
                vMetadata += '<td class="text width60">';
                if (catalogentity.ObligationQuantity != '') {
                    vMetadata += catalogentity.ObligationQuantity + " ( " + catalogentity.ObligationQtyType + " )";
                }
                vMetadata += '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Status</td>';
                if (catalogentity.ObligationCatalogStatus != null) {
                    var vDueDate = catalogentity.ObligationCatalogStatus;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';

                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Description</td>';
                if (catalogentity.Description != null) {
                    var vDueDate = catalogentity.Description;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';

                $("#tblObligationCatalogMetadataDetail").html(vMetadata);
                setBlankValueToHyphen("tblObligationCatalogMetadataDetail");
                $("#obligationcatalogsViewPopup").dialog("option", "title", "View Catalog");
                $("#obligationcatalogsViewPopup").dialog("open");
                $("#obligationcatalogsViewPopup").height("auto");



            }
        }
    });
}





function contextMenuObligationFinancials(action, el, pos) {

    switch (action) {
        case "view":
            {
                var catalogId = $(el).find("#FinancialsID").text();
                ViewObligationFinancialsDetail(catalogId);
                break;
            }
        case "delete":
            {
                var catalogTitle = $(el).find("#ObligationFinancialsTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + catalogTitle + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             var catalogId = $(el).find("#FinancialsID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?catalogid=' + catalogId,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {
                     swal("", "Item Deleted");
                     getObligationFinancialsbycontract(vContractID, $("#txtObligationNewText").val());
                 },
                 complete: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });


                break;
            }
        case "edit":
            {
                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#FinancialsID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?financialid=' + catalogId,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {
                        $("#lblObligationFinancialsCTitleEdit").text($("#lblContractTitle").text());


                        $("#txtObligationFinancialsIDedit").val(cataloentity.RowKey);
                        $("#txtObligationFinancialsNameedit").val(cataloentity.ObligationFinancialsName);

                        if (cataloentity.Description != "" && cataloentity.Description != null) {
                            $("#txtObligationFinancialsDescEdit").val(cataloentity.Description);
                        }
                        else {
                            $("#txtObligationFinancialsDescEdit").val("");
                        }

                        if (cataloentity.ObligationAmount != "" && cataloentity.ObligationAmount != null) {
                            $("#txtObligationFinancialsAmountEdit").val(cataloentity.ObligationAmount);
                        }
                        else {
                            $("#txtObligationFinancialsAmountEdit").val("");
                        }

                        if (cataloentity.ObligationFinancialsStatus != "" && cataloentity.ObligationFinancialsStatus != null) {
                            $("#ddlObligationFinancialsStatusEdit").val(cataloentity.ObligationFinancialsStatus);
                        }
                        else {
                            $("#ddlObligationFinancialsStatusEdit").val(0);
                        }


                        if (cataloentity.ObligationAmountType != "" && cataloentity.ObligationAmountType != null) {
                            $("#ddlObligationFinancialsAmountTypeEdit").val(cataloentity.ObligationAmountType);
                        }
                        else {
                            $("#ddlObligationFinancialsAmountTypeEdit").val(0);
                        }



                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });


                $("#obligationfinancialseditPopup").dialog("option", "title", "Edit Financials");
                $("#obligationfinancialseditPopup").dialog("open");
                break;
            }


    }
}



function ViewObligationFinancialsDetail(catalogid) {
    $("#loadingPage").fadeIn();
    $('#tblObligationFinancialsMetadataDetail').html('<tr><td><img src="../Content/Images/icon/loading.gif"/> </td></tr>');

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?financialid=' + catalogid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
        "Content-Type": "application/json",
        cache: false,
        success: function (catalogentity) {

            $("#loadingPage").fadeOut();

            if (catalogentity != null) {

                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width40">Financial Title</td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationFinancialsName + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Currency </td>';
                vMetadata += '<td class="text width60">' + catalogentity.ObligationCurrency + '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Amount</td>';
                vMetadata += '<td class="text width60">';
                if (catalogentity.ObligationAmount != '') {
                    vMetadata += catalogentity.ObligationAmount + " ( " + catalogentity.ObligationAmountType + " )";
                }
                vMetadata += '</td>';
                vMetadata += '</tr>';
                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Status</td>';
                if (catalogentity.ObligationFinancialsStatus != null) {
                    var vDueDate = catalogentity.ObligationFinancialsStatus;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';

                vMetadata += '<tr>';
                vMetadata += '<td class="text_label width40">Description</td>';
                if (catalogentity.Description != null) {
                    var vDueDate = catalogentity.Description;
                    vMetadata += '<td class="text width60">' + vDueDate + '</td>';
                }
                vMetadata += '</tr>';

                $("#tblObligationFinancialsMetadataDetail").html(vMetadata);
                setBlankValueToHyphen("tblObligationFinancialsMetadataDetail");
                $("#obligationFinancialsViewPopup").dialog("option", "title", "View Catalog");
                $("#obligationFinancialsViewPopup").dialog("open");
                $("#obligationFinancialsViewPopup").height("auto");



            }
        }
    });
}



function UpdateObligationcatalog() {
    $("#loadingPage").fadeIn();
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationCatalogFormEdit', false)) {

        var vTitle = $("#txtObligationCatalogNameedit").val();
        var vCatalogId = $("#txtObligationCatalogIDedit").val();



        UpdateObligationCatalogNew();

    }
    else {
        $("#loadingPage").fadeOut();
    }
    $("#spInProgress").css('visibility', 'hidden');


}



function UpdateObligationCatalogNew() {

    var vTitle = $("#txtObligationCatalogNameedit").val();
    var vCatalogId = $("#txtObligationCatalogIDedit").val();


    var obliCurrency = "";
    if ($("#hdnContractCurrency").text() != "") {
        obliCurrency = $("#hdnContractCurrency").text();
    }
    else if ($("#hdnBaseCurrency").val() != "") {
        obliCurrency = $("#hdnBaseCurrency").val();
    }
    else {
        obliCurrency = "USD";
    }

    var completedate = null;
    if ($("#ddlObligationCatalogStatusEdit").find('option:selected').text() == "Complete" || $("#ddlObligationCatalogStatusEdit").find('option:selected').text() == "Cancelled") {
        completedate = $("#dtObligationProductCompletedDateEdit").val();
    }

    var catalogForm = "ObligationCatalogName=" + vTitle;

    catalogForm += "&ObligationText=" + $("#hdnObligationUniqueId").text();
    catalogForm += "&ObligationID=" + $("#hdnObligationRowKey").text();
    catalogForm += "&ObligationUnits=" + $("#ddlObligationCatalogUnitsEdit option:selected").text();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationQuantity=" + $("#txtObligationCatalogQtyEdit").val();
    catalogForm += "&ObligationQtyType=" + $("#ddlObligationCatalogUnitTypeEdit option:selected").text();
    catalogForm += "&Description=" + $("#txtObligationCatalogDescEdit").val();
    catalogForm += "&ObligationCatalogStatus=" + $("#ddlObligationCatalogStatusEdit option:selected").text();
    catalogForm += "&QuantityActual=" + $("#txtObligationCatalogQtyNewEdit").val();

    catalogForm += "&CompletedDate=" + completedate;

    //Merge the Financials
    catalogForm += "&ObligationCurrency=" + obliCurrency;
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationProductAmountTypeNewEdit option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();
    catalogForm += "&AmountActual=" + $("#txtObligationProductAmountNewActualEdit").autoNumeric('get');
    catalogForm += "&ObligationAmount=" + $("#txtObligationProductAmountNewEdit").autoNumeric('get');

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + vCatalogId,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {

            $("#obligationcatalogseditPopup").dialog("close");
            getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}


function UpdateObligationfinancials() {

    $("#loadingPage").fadeIn();
    $("#spInProgress").css('visibility', 'visible');
    if (requiredValidator('ObligationFinancialsFormEdit', false)) {

        var vTitle = $("#txtObligationFinancialsNameedit").val();
        var vCatalogId = $("#txtObligationFinancialsIDedit").val();


        UpdateObligationfinancialsNew();


    }
    else {
        $("#loadingPage").fadeOut();
    }
    $("#spInProgress").css('visibility', 'hidden');


}


function UpdateObligationfinancialsNew() {

    var vTitle = $("#txtObligationFinancialsNameedit").val();
    var vCatalogId = $("#txtObligationFinancialsIDedit").val();

    var catalogForm = "ObligationFinancialsName=" + vTitle;

    catalogForm += "&ObligationText=" + $("#txtObligationNewText").val();
    catalogForm += "&ObligationAmount=" + $("#txtObligationFinancialsAmountEdit").val();
    catalogForm += "&AccountID=" + localStorage.AccountID;
    catalogForm += "&ModifiedBy=" + localStorage.UserName;
    catalogForm += "&ObligationCurrency=" + $("#hdnContractCurrency").text();
    catalogForm += "&ObligationAmountType=" + $("#ddlObligationFinancialsAmountTypeEdit option:selected").text();
    catalogForm += "&Description=" + $("#txtObligationFinancialsDescEdit").val();
    catalogForm += "&ObligationFinancialsStatus=" + $("#ddlObligationFinancialsStatusEdit option:selected").text();
    catalogForm += "&ObligationTransactionType=" + $("#hdnTransactionType").text();


    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials?financialid=' + vCatalogId,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: catalogForm,
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();

            $("#obligationfinancialseditPopup").dialog("close");
            getObligationFinancialsbycontract(vContractID, $("#hdnObligationUniqueId").text());
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}


function updateObligationRecurrenceNew(status) {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var fObligationNewCompletedDate = '';
    if ($("#dtObligationNewCompletedDate").val() != "" && $("#dtObligationNewCompletedDate").val() != null) {
        fObligationNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewCompletedDate").datepicker('getDate'));
    }
    var obliCurrency = "";
    if ($("#hdnContractCurrency").text() != "") {
        obliCurrency = $("#hdnContractCurrency").text();
    }
    else if ($("#hdnBaseCurrency").val() != "") {
        obliCurrency = $("#hdnBaseCurrency").val();
    }
    else {
        obliCurrency = "USD";
    }
    if (status == "SINGLE") {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;

        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            }
            else {
                vObligationOwner += "; " + item;
            }
        });

        if ($("#txtObligationNewTitle").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Title.");
        }
        else if ($("#dtObligationNewDueDate").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Due Date.");
        }
        else if (ObligationID != "") {
            $("#inprocessObligation").css('visibility', 'visible');

            var obligationmet = "No";
            var obligationmetby = "";
            var obligationmetdate = null;
            if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                obligationmet = "Yes";
                obligationmetby = localStorage.UserName;
                obligationmetdate = fObligationNewCompletedDate;
            }
            else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                obligationmetdate = fObligationNewCompletedDate;
            }

            var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
            var vSendReminderTo = '';
            $(SendReminderToArr).each(function (i, item) {
                if (vSendReminderTo == '') {
                    vSendReminderTo = item;
                }
                else {
                    vSendReminderTo += "; " + item;
                }
            });





            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/recurrenceedit?obligationid=' + ObligationID,
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                data: {
                    RowKey: ObligationID,
                    ContractID: getParameterByName('ContractID'),
                    ContractTitle: $("#lblCTitleObligationNew").text(),
                    ObligationTitle: $("#txtObligationNewTitle").val(),
                    ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                    Description: $("#txtObligationNewDesc").val(),
                    ObligationOwner: vObligationOwner,
                    DueDate: fObligationNewDueDate,
                    ObligationMetDate: obligationmetdate,
                    ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                    ObligationMet: obligationmet,
                    ObligationMetBy: obligationmetby,
                    ModifiedBy: localStorage.UserName,
                    CompanyProfile: $("#lblCompanyProfile").text(),
                    Counterparty: $("#lblCounterparty").text(),
                    ContractEndDate: contractItem.EndDate,
                    ContractCurrency: obliCurrency,
                    SendReminderTo: vSendReminderTo,
                    Reminder1: $("#txtReminder1ObligationNew").val(),
                    Reminder2: $("#txtReminder2ObligationNew").val(),
                    Reminder3: $("#txtReminder3ObligationNew").val(),
                    Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                    Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                    Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                    AlertsEnabled: $("#AlertObli").val(),
                    ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                    Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                    AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                },
                cache: false,
                success: function (person) {
                    $('.ui-button-green-text').parent().removeAttr('disabled');
                    $("#addEditObligationNew").dialog("close");
                    $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                    GetObligationCatalogs();
                },
                complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
            });
        }
    }
    else {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;

        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            }
            else {
                vObligationOwner += "; " + item;
            }
        });

        if ($("#txtObligationNewTitle").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Title.");
        }
        else if ($("#dtObligationNewDueDate").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Due Date.");
        }
        else if (ObligationID != "") {
            if ($('#hdnProductUpdates').text() == "EDITCATALOG") {
                $("#inprocessObligation").css('visibility', 'visible');
                var obligationmet = "No";
                var obligationmetby = "";
                var obligationmetdate = null;
                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                    obligationmet = "Yes";
                    obligationmetby = localStorage.UserName;
                    obligationmetdate = fObligationNewCompletedDate;
                }
                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                    obligationmetdate = fObligationNewCompletedDate;
                }

                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                var vSendReminderTo = '';
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendReminderTo == '') {
                        vSendReminderTo = item;
                    }
                    else {
                        vSendReminderTo += "; " + item;
                    }
                });



                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updatewithcatalog?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    data: {
                        RowKey: ObligationID,
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblCTitleObligationNew").text(),
                        ObligationTitle: $("#txtObligationNewTitle").val(),
                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                        Description: $("#txtObligationNewDesc").val(),
                        ObligationOwner: vObligationOwner,
                        DueDate: fObligationNewDueDate,
                        ObligationMetDate: obligationmetdate,
                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                        ObligationMet: obligationmet,
                        ObligationMetBy: obligationmetby,
                        ModifiedBy: localStorage.UserName,
                        CompanyProfile: $("#lblCompanyProfile").text(),
                        Counterparty: $("#lblCounterparty").text(),
                        ContractEndDate: contractItem.EndDate,
                        ContractCurrency: obliCurrency,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1ObligationNew").val(),
                        Reminder2: $("#txtReminder2ObligationNew").val(),
                        Reminder3: $("#txtReminder3ObligationNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                        AlertsEnabled: $("#AlertObli").val(),
                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#addEditObligationNew").dialog("close");
                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        GetObligationCatalogs();
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            }
            else {
                $("#inprocessObligation").css('visibility', 'visible');
                var obligationmet = "No";
                var obligationmetby = "";
                var obligationmetdate = null;
                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                    obligationmet = "Yes";
                    obligationmetby = localStorage.UserName;
                    obligationmetdate = fObligationNewCompletedDate;
                }
                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                    obligationmetdate = fObligationNewCompletedDate;
                }


                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                var vSendReminderTo = '';
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendReminderTo == '') {
                        vSendReminderTo = item;
                    }
                    else {
                        vSendReminderTo += "; " + item;
                    }
                });


                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyText?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    data: {
                        RowKey: ObligationID,
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblCTitleObligationNew").text(),
                        ObligationTitle: $("#txtObligationNewTitle").val(),
                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                        Description: $("#txtObligationNewDesc").val(),
                        ObligationOwner: vObligationOwner,
                        DueDate: fObligationNewDueDate,
                        ObligationMetDate: obligationmetdate,
                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                        ObligationMet: obligationmet,
                        ObligationMetBy: obligationmetby,
                        ModifiedBy: localStorage.UserName,
                        CompanyProfile: $("#lblCompanyProfile").text(),
                        Counterparty: $("#lblCounterparty").text(),
                        ContractEndDate: contractItem.EndDate,
                        ContractCurrency: obliCurrency,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1ObligationNew").val(),
                        Reminder2: $("#txtReminder2ObligationNew").val(),
                        Reminder3: $("#txtReminder3ObligationNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                        AlertsEnabled: $("#AlertObli").val(),
                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#addEditObligationNew").dialog("close");
                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        GetObligationCatalogs();
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });

            }

        }
    }
}





function updateNewObligationsNew(status) {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var obliCurrency = "";
    if ($("#hdnContractCurrency").text() != "") {
        obliCurrency = $("#hdnContractCurrency").text();
    }
    else if ($("#hdnBaseCurrency").val() != "") {
        obliCurrency = $("#hdnBaseCurrency").val();
    }
    else {
        obliCurrency = "USD";
    }
    if (status == "SINGLE") {

        if (listObligationNewData != "") {
            $("#obligationRecurrenceEditPopup").dialog("close");
            $('#ddlObligationOccurencess').val('None');
            listObligationNewData = "";
            listAllObligations = "";
            $("#txtObligationNewID").val('');
            modalOnOpenObligationNew();
        }
        else {
            $("#loadingPage").fadeIn();
            $('.ui-button-green-text').parent().attr('disabled', 'disabled');
            var isformvalid = false;

            isformvalid = true;
            var strContractID = getParameterByName('ContractID');
            var ObligationID = $("#txtObligationNewID").val();
            var arrObligationOwner = $("#ddlObligationNewOwner").val();
            var vObligationOwner = '';
            $(arrObligationOwner).each(function (i, item) {
                if (vObligationOwner == '') {
                    vObligationOwner = item;
                }
                else {
                    vObligationOwner += "; " + item;
                }
            });

            if ($("#txtObligationNewTitle").val() == "") {
                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');
                swal("", "Enter Obligation Title.");
            }
            else if ($("#dtObligationNewDueDate").val() == "") {
                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');
                swal("", "Enter Obligation Due Date.");
            }
            else if (ObligationID != "") {
                $("#inprocessObligation").css('visibility', 'visible');
                var obligationmet = "No";
                var obligationmetby = "";
                var obligationmetdate = null;
                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                    obligationmet = "Yes";
                    obligationmetby = localStorage.UserName;
                    obligationmetdate = fObligationNewCompletedDate;
                }
                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                    obligationmetdate = fObligationNewCompletedDate;
                }


                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                var vSendReminderTo = '';
                $(SendReminderToArr).each(function (i, item) {
                    if (vSendReminderTo == '') {
                        vSendReminderTo = item;
                    }
                    else {
                        vSendReminderTo += "; " + item;
                    }
                });


                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/recurrenceedit?obligationid=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    data: {
                        RowKey: ObligationID,
                        ContractID: getParameterByName('ContractID'),
                        ContractTitle: $("#lblCTitleObligationNew").text(),
                        ObligationTitle: $("#txtObligationNewTitle").val(),
                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                        Description: $("#txtObligationNewDesc").val(),
                        ObligationOwner: vObligationOwner,
                        DueDate: fObligationNewDueDate,
                        ObligationMetDate: obligationmetdate,
                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                        ObligationMet: obligationmet,
                        ObligationMetBy: obligationmetby,
                        ModifiedBy: localStorage.UserName,
                        CompanyProfile: $("#lblCompanyProfile").text(),
                        Counterparty: $("#lblCounterparty").text(),
                        ContractEndDate: contractItem.EndDate,
                        ContractCurrency: obliCurrency,
                        SendReminderTo: vSendReminderTo,
                        Reminder1: $("#txtReminder1ObligationNew").val(),
                        Reminder2: $("#txtReminder2ObligationNew").val(),
                        Reminder3: $("#txtReminder3ObligationNew").val(),
                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                        AlertsEnabled: $("#AlertObli").val(),
                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                    },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        $("#addEditObligationNew").dialog("close");
                        $("#obligationRecurrenceEditPopup").dialog("close");
                        GetObligationCatalogs();
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });
            }
        }
    }
    else {
        $("#loadingPage").fadeIn();
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;

        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            }
            else {
                vObligationOwner += "; " + item;
            }
        });

        if ($("#txtObligationNewTitle").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Title.");
        }
        else if ($("#dtObligationNewDueDate").val() == "") {
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');
            swal("", "Enter Obligation Due Date.");
        }
        else if (ObligationID != "") {
            if ($('#hdnProductUpdates').text() == "EDITCATALOG") {
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateUpcoming?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {

                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        $("#hdnObligationUniqueId").text('');
                        $("#hdnObligationUniqueId").text(person);
                        $("#txtObligationNewID").val('');
                        modalOnOpenObligationNew();
                        $("#obligationRecurrenceEditPopup").dialog("close");

                    },
                    error: function (data) {
                        $("#obligationRecurrenceEditPopup").dialog("close");
                        $("#loadingPage").fadeOut();
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            }
            else {
                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateUpcoming?strObligationText=' + $("#txtObligationNewText").val() + '&obligationId=' + ObligationID,
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        $("#obligationcatalogsRecurrenceEditPopup").dialog("close");
                        $("#hdnObligationUniqueId").text('');
                        $("#hdnObligationUniqueId").text(person);
                        $("#txtObligationNewID").val('');
                        modalOnOpenObligationNew();
                        $("#obligationRecurrenceEditPopup").dialog("close");
                    },
                    error: function (data) {
                        $("#loadingPage").fadeOut();
                        $("#obligationRecurrenceEditPopup").dialog("close");
                        $("#inprocessObligation").css('visibility', 'none');
                    }
                });
            }
        }
    }
}

var vObligationTextEditRecurrence = "";
var vObligationFlaging = "";

function modalOnOpenObligationNew() {
    //Sridhar
    //Check if milestone owner is part of contract
    var isNotOwner = false;
    var ownervalidation = false;
    var arrNewOwners = [];
    var arrObligationOwner = $("#ddlObligationNewOwner").val();
    var isGroup = false;
    $(arrObligationOwner).each(function (i, item) {
        if (item.indexOf('{') > -1) {
            isGroup = true;
        }
    });
    if (isGroup) {
        arrNewOwners = getMilestoneOwners(arrObligationOwner.join(';'));

        var vNotObligationOwner = '';
        $(arrNewOwners).each(function (i, item) {
            if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                if (vNotObligationOwner == '') {
                    vNotObligationOwner = item;
                }
                else {
                    vNotObligationOwner += "; " + item;
                }
            }
        });
    }
    else {
        var vNotObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (contractItem.FullControlPermissions.indexOf(item) <= -1 && contractItem.ReadWritePermissions.indexOf(item) <= -1) {
                if (vNotObligationOwner == '') {
                    vNotObligationOwner = item;
                }
                else {
                    vNotObligationOwner += "; " + item;
                }
            }
        });
    }

    if (vNotObligationOwner != '') {
        swal({
            title: '',
            text: "<span style=\"font-weight:700\">'" + vNotObligationOwner + "'</span> do not have permission to access to this contract or not part of contract.",
            showCancelButton: false,
            confirmButtonText: 'OK',
            html: true
        });
        $("#loadingPage").fadeOut();
        isNotOwner = true;
    }
    //Sridhar
    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
        if (!isNotOwner) {
            if (validateproducts) {
                modalonOpenObligationNewEdit();
            }
            else {
                swal("", "Related Catalog status need to be completed.");
            }
        }
    }
    else {
        if ($("input:radio[name=ObligationNewAutoComplete]:checked").val() == "Yes") {
            if (!isNotOwner) {
                if (validateproducts) {
                    modalonOpenObligationNewEdit();
                }
                else {
                    swal("", "Obligation will be auto completed only if all the Products/Services & Commitments are completed before Start/Due date.");
                    modalonOpenObligationNewEdit();
                }
            }
        }
        else {
            if (!isNotOwner)
                modalonOpenObligationNewEdit();
        }
    }
}

function modalonOpenObligationNewEdit() {
    var fObligationNewDueDate = '';
    if ($("#dtObligationNewDueDate").val() != "" && $("#dtObligationNewDueDate").val() != null) {
        fObligationNewDueDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
    }
    var fObligationNewCompletedDate = '';
    if ($("#dtObligationNewCompletedDate").val() != "" && $("#dtObligationNewCompletedDate").val() != null) {
        fObligationNewCompletedDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewCompletedDate").datepicker('getDate'));
    }

    if ($('#hdnObligationUniqueId').text() != null && $('#hdnObligationUniqueId').text() != "" && $('#hdnObligationUniqueId').text() != "null") {
        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;

        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            }
            else {
                vObligationOwner += "; " + item;
            }
        });

        if (requiredValidator('obligationreqvalidator1')) {

            if (requiredValidator('obligationreqvalidator2')) {
                if (requiredValidator('dvObliOccurrenceDates')) {
                    if (comparedatestatus($.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')), $("#ddlObligationStatus").val())) {
                        var oValidate = true;
                        if ($('#ddlObligationOccurencess').val() == "Weekly") {
                            var strrecuobli = "";
                            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                strrecuobli += (this.value) + ",";
                            });

                            if (strrecuobli == "") {
                                oValidate = false;
                            }

                        }

                        if (oValidate) {
                            if (ObligationID != "") {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if (ObligationID != item.RowKey) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                    if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for the particular date already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            }

                                        });
                                    }
                                    else {
                                        if (listObligationNewData != "") {
                                            var txtObligationNewText = $("#txtObligationNewText").val();
                                            $(listAllObligations).each(function (i, item) {
                                                if (ObligationID != item.RowKey) {
                                                    if ($("#txtObligationNewTitle").val() == item.ObligationTitle && item.ObligationText != txtObligationNewText) {
                                                        if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                            if (oValidate) {
                                                                swal("", "Obligation title for one of the date in recurrence already exist.");
                                                            }
                                                            oValidate = false;
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                            else {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                    if (oValidate) {
                                                        swal("", "Obligation title for the particular date already exist.");
                                                    }
                                                    oValidate = false;
                                                }
                                            }
                                        });
                                    }
                                    else {
                                        if (listObligationNewData != "") {
                                            $(listAllObligations).each(function (i, item) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle && item.ObligationText != $('#hdnObligationUniqueId').text()) {
                                                    if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for one of the date in recurrence already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }

                        }

                        if (oValidate) {

                            if ($('#ddlObligationOccurencess').val() != "None") {
                                if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                    if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                        $("#lblerrorreclimitObligation").css('display', '');
                                        oValidate = false;

                                    }
                                }

                            }



                            if (oValidate) {
                                $("#loadingPage").fadeIn();
                                if (ObligationID != "") {

                                    if (vObligationEditStatus != "") {
                                        if (vObligationEditStatus == "CHANGERECURRENCE") {
                                            if ($('#ddlObligationOccurencess').val() != "None") {
                                                if (listObligationNewData != "") {
                                                    vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                    $("#txtObligationNewID").val("");
                                                    modalOnOpenObligationNew();
                                                }
                                                else {
                                                    swal("", "Please modify the occurence to update obligation.");
                                                }
                                            }
                                            else {
                                                $("#inprocessObligation").css('visibility', 'visible');

                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                //Newly Added
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;

                                                }
                                                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;

                                                }

                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                }
                                                else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                }
                                                else {
                                                    obliCurrency = "USD";
                                                }

                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    }
                                                    else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });
                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                    data: {
                                                        RowKey: ObligationID,
                                                        ContractID: getParameterByName('ContractID'),
                                                        ContractTitle: $("#lblCTitleObligationNew").text(),
                                                        ObligationTitle: $("#txtObligationNewTitle").val(),
                                                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                        Description: $("#txtObligationNewDesc").val(),
                                                        ObligationOwner: vObligationOwner,
                                                        DueDate: fObligationNewDueDate,
                                                        ObligationMetDate: obligationmetdate,
                                                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                        ObligationMet: obligationmet,
                                                        ModifiedBy: localStorage.UserName,
                                                        ObligationMetBy: obligationmetby,
                                                        CompanyProfile: $("#lblCompanyProfile").text(),
                                                        Counterparty: $("#lblCounterparty").text(),
                                                        ContractEndDate: contractItem.EndDate,
                                                        ContractCurrency: obliCurrency,
                                                        SendReminderTo: vSendReminderTo,
                                                        Reminder1: $("#txtReminder1ObligationNew").val(),
                                                        Reminder2: $("#txtReminder2ObligationNew").val(),
                                                        Reminder3: $("#txtReminder3ObligationNew").val(),
                                                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                        AlertsEnabled: $("#AlertObli").val(),
                                                        PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),

                                                    },
                                                    cache: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        $("#addEditObligationNew").dialog("close");
                                                        GetObligationCatalogs();
                                                    },
                                                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                });



                                            }
                                        }
                                        else if (vObligationEditStatus == "EDITRECURRENCE") {
                                            if (listObligationNewData != "") {

                                                vObligationTextEditRecurrence = $("#txtObligationNewText").val();

                                                $("#loadingPage").fadeOut();
                                                $("#obligationRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                $("#obligationRecurrenceEditPopup").dialog("open");


                                            }
                                            else {
                                                //if ($('#ddlObligationOccurencess').val() == "None") {

                                                vObligationTextEditRecurrence = $("#txtObligationNewText").val();

                                                $("#loadingPage").fadeOut();
                                                $("#obligationRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                $("#obligationRecurrenceEditPopup").dialog("open");



                                                //}
                                                //else {
                                                //    $("#loadingPage").fadeOut();
                                                //    swal("", "Please modify the occurence to update obligation.");
                                                //    //$("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                //    //$("#obligationcatalogsRecurrenceEditPopup").dialog("open");

                                                //}


                                            }
                                        }
                                        else {
                                            if ($('#ddlObligationOccurencess').val() == "None") {
                                                $("#inprocessObligation").css('visibility', 'visible');
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                }
                                                else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                }
                                                else {
                                                    obliCurrency = "USD";
                                                }



                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    }
                                                    else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });

                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                    data: {
                                                        RowKey: ObligationID,
                                                        ContractID: getParameterByName('ContractID'),
                                                        ContractTitle: $("#lblCTitleObligationNew").text(),
                                                        ObligationTitle: $("#txtObligationNewTitle").val(),
                                                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                        Description: $("#txtObligationNewDesc").val(),
                                                        ObligationOwner: vObligationOwner,
                                                        DueDate: fObligationNewDueDate,
                                                        ObligationMetDate: obligationmetdate,
                                                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                        ObligationMet: obligationmet,
                                                        ModifiedBy: localStorage.UserName,
                                                        ObligationMetBy: obligationmetby,
                                                        CompanyProfile: $("#lblCompanyProfile").text(),
                                                        Counterparty: $("#lblCounterparty").text(),
                                                        ContractEndDate: contractItem.EndDate,
                                                        ContractCurrency: obliCurrency,
                                                        SendReminderTo: vSendReminderTo,
                                                        Reminder1: $("#txtReminder1ObligationNew").val(),
                                                        Reminder2: $("#txtReminder2ObligationNew").val(),
                                                        Reminder3: $("#txtReminder3ObligationNew").val(),
                                                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                        AlertsEnabled: $("#AlertObli").val(),
                                                        PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                    },
                                                    cache: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                                        $("#addEditObligationNew").dialog("close");
                                                        GetObligationCatalogs();
                                                    },
                                                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                });

                                            }
                                            else {
                                                if (listObligationNewData != "") {
                                                    $("#loadingPage").fadeOut();
                                                    $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                    $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                                }
                                                else {
                                                    $("#loadingPage").fadeOut();
                                                    swal("", "Please modify the occurence to update obligation.");
                                                }

                                            }
                                        }

                                    }
                                    else {
                                        if ($('#ddlObligationOccurencess').val() == "None") {
                                            $("#inprocessObligation").css('visibility', 'visible');
                                            var obligationmet = "No";
                                            var obligationmetby = "";
                                            var obligationmetdate = null;
                                            if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                obligationmet = "Yes";
                                                obligationmetby = localStorage.UserName;
                                                obligationmetdate = fObligationNewCompletedDate;
                                            }
                                            else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                obligationmetdate = fObligationNewCompletedDate;
                                            }

                                            var obliCurrency = "";
                                            if ($("#hdnContractCurrency").text() != "") {
                                                obliCurrency = $("#hdnContractCurrency").text();
                                            }
                                            else if ($("#hdnBaseCurrency").val() != "") {
                                                obliCurrency = $("#hdnBaseCurrency").val();
                                            }
                                            else {
                                                obliCurrency = "USD";
                                            }


                                            var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                            var vSendReminderTo = '';
                                            $(SendReminderToArr).each(function (i, item) {
                                                if (vSendReminderTo == '') {
                                                    vSendReminderTo = item;
                                                }
                                                else {
                                                    vSendReminderTo += "; " + item;
                                                }
                                            });


                                            $.ajax({
                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                type: 'POST',
                                                dataType: 'json',
                                                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                data: {
                                                    RowKey: ObligationID,
                                                    ContractID: getParameterByName('ContractID'),
                                                    ContractTitle: $("#lblCTitleObligationNew").text(),
                                                    ObligationTitle: $("#txtObligationNewTitle").val(),
                                                    ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                    Description: $("#txtObligationNewDesc").val(),
                                                    ObligationOwner: vObligationOwner,
                                                    DueDate: fObligationNewDueDate,
                                                    ObligationMetDate: obligationmetdate,
                                                    ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                    ObligationMet: obligationmet,
                                                    ModifiedBy: localStorage.UserName,
                                                    ObligationMetBy: obligationmetby,
                                                    CompanyProfile: $("#lblCompanyProfile").text(),
                                                    Counterparty: $("#lblCounterparty").text(),
                                                    ContractEndDate: contractItem.EndDate,
                                                    ContractCurrency: obliCurrency,
                                                    SendReminderTo: vSendReminderTo,
                                                    Reminder1: $("#txtReminder1ObligationNew").val(),
                                                    Reminder2: $("#txtReminder2ObligationNew").val(),
                                                    Reminder3: $("#txtReminder3ObligationNew").val(),
                                                    Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                    Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                    Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                    AlertsEnabled: $("#AlertObli").val(),
                                                    PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                    ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                    Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                    AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                },
                                                cache: false,
                                                success: function (person) {
                                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                                    $("#addEditObligationNew").dialog("close");
                                                    GetObligationCatalogs();
                                                },
                                                complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                            });


                                        }
                                        else {
                                            //if (listObligationNewData != "") {
                                            $("#loadingPage").fadeOut();
                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                            //}
                                            //else {
                                            //    $("#loadingPage").fadeOut();
                                            //    swal("", "Please modify the occurence to update obligation.");
                                            //}
                                        }
                                    }
                                }
                                else {
                                    $("#inprocessObligation").css('visibility', 'visible');


                                    if ($('#ddlObligationOccurencess').val() != "None") {

                                        if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                                $("#lblerrorreclimitObligation").css('display', '');
                                                $("#loadingPage").fadeOut();

                                            }
                                            else {
                                                $("#lblerrorreclimitObligation").css('display', '');

                                                if ($('#ddlObligationOccurencess').val() == "Weekly") {

                                                    var validobli = false;

                                                    var strrecuobli = "";
                                                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                                        strrecuobli += (this.value) + ",";
                                                    });

                                                    if (strrecuobli != "") {
                                                        validobli = true;
                                                    }

                                                    if (validobli) {
                                                        var obligationmet = "No";
                                                        var obligationmetby = "";
                                                        var obligationmetdate = null;
                                                        if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                            obligationmet = "Yes";
                                                            obligationmetby = localStorage.UserName;
                                                            obligationmetdate = fObligationNewCompletedDate;
                                                        }
                                                        else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                            obligationmetdate = fObligationNewCompletedDate;
                                                        }

                                                        var obliCurrency = "";
                                                        if ($("#hdnContractCurrency").text() != "") {
                                                            obliCurrency = $("#hdnContractCurrency").text();
                                                        }
                                                        else if ($("#hdnBaseCurrency").val() != "") {
                                                            obliCurrency = $("#hdnBaseCurrency").val();
                                                        }
                                                        else {
                                                            obliCurrency = "USD";
                                                        }


                                                        var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                        var vSendReminderTo = '';
                                                        $(SendReminderToArr).each(function (i, item) {
                                                            if (vSendReminderTo == '') {
                                                                vSendReminderTo = item;
                                                            }
                                                            else {
                                                                vSendReminderTo += "; " + item;
                                                            }
                                                        });




                                                        var formData = new FormData();
                                                        var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                        contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                        contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                                        contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                        contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                                        contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                        contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                        contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                        contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                        contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                        contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                        contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                        contractForm += "&CustomString=" + encodeURIComponent(strrecuobli);
                                                        contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                        contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                        contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);

                                                        contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                        contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                        contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                        contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                        contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);



                                                        contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                        contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                        contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                        contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                        contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                        contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                        contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                        contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                                        contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                        contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                        contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());


                                                        if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                            contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                        }
                                                        else {
                                                            contractForm += "&RecMonthlyString=" + "";
                                                        }

                                                        formData.append("SearializeControls", contractForm);


                                                        var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                        occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                        occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                        var strvalues = "";
                                                        var Values = listObligationNewData.Values;
                                                        //if (typeof Values != "undefined" && Values != null) {
                                                        for (var j = 0; j < Values.length; j++) {
                                                            strvalues += Values[j] + ",";
                                                        }
                                                        strvalues = removeLastChar(strvalues, ',');
                                                        //}
                                                        occurrenceForm += "&Values=" + strvalues;

                                                        formData.append("objoccurrence", occurrenceForm);

                                                        $.ajax({
                                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                            type: 'POST',
                                                            dataType: 'json',
                                                            headers: {
                                                                'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName
                                                            },
                                                            data: formData,
                                                            cache: false,
                                                            contentType: false,
                                                            processData: false,
                                                            async: false,
                                                            success: function (person) {
                                                                $('.ui-button-green-text').parent().removeAttr('disabled');


                                                                if (vObligationFlaging == "EDIT") {

                                                                }
                                                                else {
                                                                }
                                                                if ($('#txtObligationProductsCount').val() == "Yes") {

                                                                }
                                                                if ($('#txtObligationFinancialsCount').val() == "Yes") {

                                                                    $.ajax({
                                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                        type: 'POST',
                                                                        dataType: 'json',
                                                                        headers: {
                                                                            'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                        },
                                                                        cache: false,
                                                                        success: function (data) {

                                                                        },
                                                                        error: function (data) {
                                                                            $("#loadingPage").fadeOut();
                                                                        }
                                                                    });

                                                                }


                                                                $("#addEditObligationNew").dialog("close");

                                                                clearObligationFormDataNew();
                                                                GetObligationCatalogs();

                                                            },
                                                            error: function (data) {
                                                                $("#loadingPage").fadeOut();
                                                            },
                                                            complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                        });
                                                    }
                                                    else {
                                                        $("#loadingPage").fadeOut();
                                                    }
                                                }
                                                else {
                                                    var obligationmet = "No";
                                                    var obligationmetby = "";
                                                    var obligationmetdate = null;
                                                    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                        obligationmet = "Yes";
                                                        obligationmetby = localStorage.UserName;
                                                        obligationmetdate = fObligationNewCompletedDate;

                                                    }
                                                    else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                        obligationmetdate = fObligationNewCompletedDate;

                                                    }

                                                    var obliCurrency = "";
                                                    if ($("#hdnContractCurrency").text() != "") {
                                                        obliCurrency = $("#hdnContractCurrency").text();
                                                    }
                                                    else if ($("#hdnBaseCurrency").val() != "") {
                                                        obliCurrency = $("#hdnBaseCurrency").val();
                                                    }
                                                    else {
                                                        obliCurrency = "USD";
                                                    }


                                                    var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                    var vSendReminderTo = '';
                                                    $(SendReminderToArr).each(function (i, item) {
                                                        if (vSendReminderTo == '') {
                                                            vSendReminderTo = item;
                                                        }
                                                        else {
                                                            vSendReminderTo += "; " + item;
                                                        }
                                                    });

                                                    var formData = new FormData();
                                                    var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                    contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                    contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                                    contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                    contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                                    contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                    contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                    contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                    contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                    contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                    contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                                    contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                    contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                    contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);

                                                    contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                    contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                    contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                    contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                    contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);

                                                    contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                    contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                    contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                    contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                    contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                    contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                                    contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                    contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                    contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());


                                                    if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                        contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                    }
                                                    else {
                                                        contractForm += "&RecMonthlyString=" + "";
                                                    }




                                                    formData.append("SearializeControls", contractForm);


                                                    var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                    occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                    occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                    var strvalues = "";
                                                    var Values = listObligationNewData.Values;
                                                    //if (typeof Values != "undefined" && Values != null) {
                                                    for (var j = 0; j < Values.length; j++) {
                                                        strvalues += Values[j] + ",";
                                                    }
                                                    strvalues = removeLastChar(strvalues, ',');
                                                    //}
                                                    occurrenceForm += "&Values=" + strvalues;

                                                    formData.append("objoccurrence", occurrenceForm);

                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: {
                                                            'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName
                                                        },
                                                        data: formData,
                                                        cache: false,
                                                        contentType: false,
                                                        processData: false,
                                                        async: false,
                                                        success: function (person) {
                                                            $('.ui-button-green-text').parent().removeAttr('disabled');


                                                            if (vObligationFlaging == "EDIT") {

                                                            }
                                                            else {
                                                            }
                                                            if ($('#txtObligationProductsCount').val() == "Yes") {

                                                            }
                                                            if ($('#txtObligationFinancialsCount').val() == "Yes") {

                                                                $.ajax({
                                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                    type: 'POST',
                                                                    dataType: 'json',
                                                                    headers: {
                                                                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                    },
                                                                    cache: false,
                                                                    success: function (data) {

                                                                    },
                                                                    error: function (data) {
                                                                        $("#loadingPage").fadeOut();
                                                                    }
                                                                });

                                                            }


                                                            $("#addEditObligationNew").dialog("close");

                                                            clearObligationFormDataNew();
                                                            GetObligationCatalogs();
                                                        },
                                                        error: function (data) {
                                                            $("#loadingPage").fadeOut();
                                                        },
                                                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                    });
                                                }


                                            }
                                        }
                                        else {


                                            if ($('#ddlObligationOccurencess').val() == "Weekly") {

                                                var validobli = false;

                                                var strrecuobli = "";
                                                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                                    strrecuobli += (this.value) + ",";
                                                });

                                                if (strrecuobli != "") {
                                                    validobli = true;
                                                }

                                                if (validobli) {
                                                    var obligationmet = "No";
                                                    var obligationmetby = "";
                                                    var obligationmetdate = null;
                                                    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                        obligationmet = "Yes";
                                                        obligationmetby = localStorage.UserName;
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    }
                                                    else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                        obligationmetdate = fObligationNewCompletedDate
                                                    }

                                                    var obliCurrency = "";
                                                    if ($("#hdnContractCurrency").text() != "") {
                                                        obliCurrency = $("#hdnContractCurrency").text();
                                                    }
                                                    else if ($("#hdnBaseCurrency").val() != "") {
                                                        obliCurrency = $("#hdnBaseCurrency").val();
                                                    }
                                                    else {
                                                        obliCurrency = "USD";
                                                    }


                                                    var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                    var vSendReminderTo = '';
                                                    $(SendReminderToArr).each(function (i, item) {
                                                        if (vSendReminderTo == '') {
                                                            vSendReminderTo = item;
                                                        }
                                                        else {
                                                            vSendReminderTo += "; " + item;
                                                        }
                                                    });

                                                    var formData = new FormData();
                                                    var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                    contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                    contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                                    contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                    contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                                    contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                    contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                    contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                    contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                    contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                    contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                                    contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                    contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                    contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);

                                                    contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                    contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                    contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                    contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                    contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);

                                                    contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                    contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                    contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                    contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                    contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                    contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                                    contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                    contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                    contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());

                                                    if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                        contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                    }
                                                    else {
                                                        contractForm += "&RecMonthlyString=" + "";
                                                    }




                                                    formData.append("SearializeControls", contractForm);


                                                    var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                    occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                    occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                    var strvalues = "";
                                                    var Values = listObligationNewData.Values;
                                                    //if (typeof Values != "undefined" && Values != null) {
                                                    for (var j = 0; j < Values.length; j++) {
                                                        strvalues += Values[j] + ",";
                                                    }
                                                    strvalues = removeLastChar(strvalues, ',');
                                                    //}
                                                    occurrenceForm += "&Values=" + strvalues;

                                                    formData.append("objoccurrence", occurrenceForm);

                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: {
                                                            'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName
                                                        },
                                                        data: formData,
                                                        cache: false,
                                                        contentType: false,
                                                        processData: false,
                                                        async: false,
                                                        success: function (person) {
                                                            $('.ui-button-green-text').parent().removeAttr('disabled');


                                                            if (vObligationFlaging == "EDIT") {

                                                            }
                                                            else {

                                                            }
                                                            if ($('#txtObligationProductsCount').val() == "Yes") {

                                                            }
                                                            if ($('#txtObligationFinancialsCount').val() == "Yes") {

                                                                $.ajax({
                                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                    type: 'POST',
                                                                    dataType: 'json',
                                                                    headers: {
                                                                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                    },
                                                                    cache: false,
                                                                    success: function (data) {

                                                                    },
                                                                    error: function (data) {
                                                                        $("#loadingPage").fadeOut();
                                                                    }
                                                                });

                                                            }


                                                            $("#addEditObligationNew").dialog("close");

                                                            clearObligationFormDataNew();
                                                            GetObligationCatalogs();

                                                        },
                                                        error: function (data) {
                                                            $("#loadingPage").fadeOut();
                                                        },
                                                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                    });
                                                }
                                                else {
                                                    $("#loadingPage").fadeOut();
                                                }
                                            }
                                            else {
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;

                                                }
                                                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;

                                                }

                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                }
                                                else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                }
                                                else {
                                                    obliCurrency = "USD";
                                                }


                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    }
                                                    else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });


                                                var formData = new FormData();
                                                var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                                contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                                contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                                contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);

                                                contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);

                                                contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                                contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());

                                                if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                    contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                }
                                                else {
                                                    contractForm += "&RecMonthlyString=" + "";
                                                }




                                                formData.append("SearializeControls", contractForm);


                                                var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                var strvalues = "";
                                                var Values = listObligationNewData.Values;
                                                //if (typeof Values != "undefined" && Values != null) {
                                                for (var j = 0; j < Values.length; j++) {
                                                    strvalues += Values[j] + ",";
                                                }
                                                //}

                                                strvalues = removeLastChar(strvalues, ',');
                                                occurrenceForm += "&Values=" + strvalues;

                                                formData.append("objoccurrence", occurrenceForm);

                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: {
                                                        'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName
                                                    },
                                                    data: formData,
                                                    cache: false,
                                                    contentType: false,
                                                    processData: false,
                                                    async: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');


                                                        if (vObligationFlaging == "EDIT") {


                                                        }
                                                        else {

                                                        }
                                                        if ($('#txtObligationProductsCount').val() == "Yes") {

                                                        }
                                                        if ($('#txtObligationFinancialsCount').val() == "Yes") {

                                                            $.ajax({
                                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                type: 'POST',
                                                                dataType: 'json',
                                                                headers: {
                                                                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
                                                                },
                                                                cache: false,
                                                                success: function (data) {

                                                                },
                                                                error: function (data) {
                                                                    $("#loadingPage").fadeOut();
                                                                }
                                                            });

                                                        }



                                                        $("#addEditObligationNew").dialog("close");

                                                        clearObligationFormDataNew();
                                                        GetObligationCatalogs();

                                                    },
                                                    error: function (data) {
                                                        $("#loadingPage").fadeOut();
                                                    },
                                                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                });
                                            }


                                        }





                                    }
                                    else {
                                        var vRecurrence = "";
                                        var vRecurrenceCustom = "";
                                        var vOcurence = "";
                                        vRecurrence = "None";
                                        vRecurrenceCustom = "None";
                                        vOcurence = 1;

                                        var obligationmet = "No";
                                        var obligationmetby = "";
                                        var obligationmetdate = null;
                                        if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                            obligationmet = "Yes";
                                            obligationmetby = localStorage.UserName;
                                            obligationmetdate = fObligationNewCompletedDate;

                                        }
                                        else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                            obligationmetdate = fObligationNewCompletedDate;

                                        }
                                        var obliCurrency = "";
                                        if ($("#hdnContractCurrency").text() != "") {
                                            obliCurrency = $("#hdnContractCurrency").text();
                                        }
                                        else if ($("#hdnBaseCurrency").val() != "") {
                                            obliCurrency = $("#hdnBaseCurrency").val();
                                        }
                                        else {
                                            obliCurrency = "USD";
                                        }

                                        var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                        var vSendReminderTo = '';
                                        $(SendReminderToArr).each(function (i, item) {
                                            if (vSendReminderTo == '') {
                                                vSendReminderTo = item;
                                            }
                                            else {
                                                vSendReminderTo += "; " + item;
                                            }
                                        });


                                        var formData = new FormData();
                                        var contractForm = "ContractID=" + getParameterByName('ContractID');
                                        contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                        contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                        contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                        contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                        contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                        contractForm += "&DueDate=" + encodeURIComponent(fObligationNewDueDate);
                                        contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                        contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                        contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                        contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                        contractForm += "&Ocurrences=" + encodeURIComponent(vOcurence);
                                        contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                        contractForm += "&CustomString=" + encodeURIComponent(vRecurrenceCustom);
                                        contractForm += "&RecMonthlyString=" + encodeURIComponent("None");
                                        contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                        contractForm += "&RecMonthlyString=" + "";
                                        contractForm += "&ObligationMet=" + obligationmet;
                                        contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                        contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                        contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                        contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                        contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                        contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);

                                        contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                        contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                        contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                        contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                        contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                        contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                        contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());

                                        contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                        contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                        contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                        contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());

                                        formData.append("SearializeControls", contractForm);

                                        formData.append("objoccurrence", "");

                                        $.ajax({
                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewadvanced?obligationtext=' + $('#hdnObligationUniqueId').text() + '&obligationId=' + $('#hdnObligationRowKey').text(),
                                            type: 'POST',
                                            dataType: 'json',
                                            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                            data: formData,
                                            cache: false,
                                            contentType: false,
                                            processData: false,
                                            async: false,
                                            success: function (person) {
                                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                                $("#addEditObligationNew").dialog("close"); $("#loadingPage").fadeOut();


                                                $("#addEditObligationNew").dialog("close");
                                                $("#loadingPage").fadeOut();
                                                clearObligationFormDataNew();
                                                GetObligationCatalogs();
                                            },
                                            error: function (data) {
                                                $("#loadingPage").fadeOut();
                                            },
                                            complete: function () { clearObligationFormDataNew(); $("#loadingPage").fadeOut(); $("#inprocessObligation").css('visibility', 'none'); }
                                        });
                                    }


                                }
                            }
                        }
                        else {
                            $("#loadingPage").fadeOut();
                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                var Id = this.id;
                                $("#" + Id).css('outline', '1px solid #F00');
                            });

                        }
                    }
                    else {
                        $("#loadingPage").fadeOut();
                        isformvalid = false;
                        $("#ddlObligationStatus").addClass('error');
                        $('html, body').animate({ scrollTop: 0 }, 'fast');

                    }

                }
                else {


                    var oValidate = true;
                    if ($('#ddlObligationOccurencess').val() == "Weekly") {
                        var strrecuobli = "";
                        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                            strrecuobli += (this.value) + ",";
                        });
                        if (strrecuobli == "") {
                            oValidate = false;
                        }

                    }

                    if (oValidate) {
                        if ($('#ddlObligationOccurencess').val() != "None") {
                            if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                    $("#lblerrorreclimitObligation").css('display', '');
                                    oValidate = false;

                                }
                            }

                        }
                    }
                    else {
                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                            var Id = this.id;
                            $("#" + Id).css('outline', '1px solid #F00');
                        });
                    }

                    //if ($('#dvObliOccurrenceDates').is(':hidden')) {
                    //    //do something
                    //    $('#dvObliOccurrenceDates').slideToggle();
                    //    $('#imgObliga').attr("title", "Collapse");
                    //    $('#imgObliga').attr("src", "../Content/Images/e-close.png");


                    //}
                    $("#loadingPage").fadeOut();
                    $('.ui-button-green-text').parent().removeAttr('disabled');

                }

            }
            else {


                if (requiredValidator('dvObliOccurrenceDates')) { }
                //else
                //{
                //    if ($('#dvObliOccurrenceDates').is(':hidden')) {
                //        //do something
                //        $('#dvObliOccurrenceDates').slideToggle();
                //        $('#imgObliga').attr("title", "Collapse");
                //        $('#imgObliga').attr("src", "../Content/Images/e-close.png");


                //    }
                //}

                var oValidate = true;

                if ($('#ddlObligationOccurencess').val() == "Weekly") {
                    var strrecuobli = "";
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        strrecuobli += (this.value) + ",";
                    });
                    if (strrecuobli == "") {
                        oValidate = false;
                    }

                }

                if (oValidate) {

                    if ($('#ddlObligationOccurencess').val() != "None") {
                        if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                $("#lblerrorreclimitObligation").css('display', '');
                                oValidate = false;

                            }
                        }

                    }
                }
                else {
                    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                        var Id = this.id;
                        $("#" + Id).css('outline', '1px solid #F00');
                    });
                }

                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');

            }

        }
        else {
            if (requiredValidator('obligationreqvalidator2')) { }
            if (requiredValidator('dvObliOccurrenceDates')) { }
            //else
            //{
            //    if ($('#dvObliOccurrenceDates').is(':hidden')) {
            //        //do something
            //        $('#dvObliOccurrenceDates').slideToggle();
            //        $('#imgObliga').attr("title", "Collapse");
            //        $('#imgObliga').attr("src", "../Content/Images/e-close.png");


            //    }
            //}

            var oValidate = true;

            if ($('#ddlObligationOccurencess').val() == "Weekly") {
                var strrecuobli = "";
                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                    strrecuobli += (this.value) + ",";
                });
                if (strrecuobli == "") {
                    oValidate = false;
                }

            }

            if (oValidate) {

                if ($('#ddlObligationOccurencess').val() != "None") {
                    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                        if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                            $("#lblerrorreclimitObligation").css('display', '');
                            oValidate = false;

                        }
                    }

                }
            }
            else {
                $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                    var Id = this.id;
                    $("#" + Id).css('outline', '1px solid #F00');
                });
            }
            $("#loadingPage").fadeOut();
            $('.ui-button-green-text').parent().removeAttr('disabled');

        }
        $('.ui-button-green-text').parent().removeAttr('disabled');

        return isformvalid;




    }
    else {

        $('.ui-button-green-text').parent().attr('disabled', 'disabled');
        var isformvalid = false;

        isformvalid = true;
        var strContractID = getParameterByName('ContractID');
        var ObligationID = $("#txtObligationNewID").val();
        var arrObligationOwner = $("#ddlObligationNewOwner").val();
        var vObligationOwner = '';
        $(arrObligationOwner).each(function (i, item) {
            if (vObligationOwner == '') {
                vObligationOwner = item;
            }
            else {
                vObligationOwner += "; " + item;
            }
        });

        if (requiredValidator('obligationreqvalidator1')) {
            if (requiredValidator('obligationreqvalidator2')) {
                if (requiredValidator('dvObliOccurrenceDates')) {
                    if (comparedatestatus($.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')), $("#ddlObligationStatus").val())) {
                        var oValidate = true;
                        if ($('#ddlObligationOccurencess').val() == "Weekly") {
                            var strrecuobli = "";
                            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                strrecuobli += (this.value) + ",";
                            });
                            if (strrecuobli == "") {
                                oValidate = false;
                            }

                        }
                        if (oValidate) {
                            if (ObligationID != "") {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if (ObligationID != item.RowKey) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                    if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for the particular date already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            }

                                        });
                                    }
                                    else {
                                        if (listObligationNewData != "") {
                                            $(listAllObligations).each(function (i, item) {
                                                if (ObligationID != item.RowKey) {
                                                    if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                        if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                            if (oValidate) {
                                                                swal("", "Obligation title for one of the date in recurrence already exist.");
                                                            }
                                                            oValidate = false;
                                                        }
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                            else {
                                if (listAllObligations != "") {
                                    if ($('#ddlObligationOccurencess').val() == "None") {
                                        $(listAllObligations).each(function (i, item) {
                                            if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                    if (oValidate) {
                                                        swal("", "Obligation title for the particular date already exist.");
                                                    }
                                                    oValidate = false;
                                                }
                                            }
                                        });
                                    }
                                    else {
                                        if (listObligationNewData != "") {
                                            $(listAllObligations).each(function (i, item) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                    if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for one of the date in recurrence already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                            if (oValidate) {
                                if (ObligationID != "") {
                                    if (listAllObligations != "") {
                                        if ($('#ddlObligationOccurencess').val() == "None") {
                                            $(listAllObligations).each(function (i, item) {
                                                if (ObligationID != item.RowKey) {
                                                    if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                        if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                            if (oValidate) {
                                                                swal("", "Obligation title for the particular date already exist.");
                                                            }
                                                            oValidate = false;
                                                        }
                                                    }
                                                }

                                            });
                                        }
                                        else {
                                            if (listObligationNewData != "") {
                                                $(listAllObligations).each(function (i, item) {
                                                    if (ObligationID != item.RowKey) {
                                                        if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                            if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                                if (oValidate) {
                                                                    swal("", "Obligation title for one of the date in recurrence already exist.");
                                                                }
                                                                oValidate = false;
                                                            }
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (listAllObligations != "") {
                                        if ($('#ddlObligationOccurencess').val() == "None") {
                                            $(listAllObligations).each(function (i, item) {
                                                if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                    if (!comparedatesequal(moment(new Date(item.DueDate)).utc().format('MM/DD/YYYY'), $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate')))) {
                                                        if (oValidate) {
                                                            swal("", "Obligation title for the particular date already exist.");
                                                        }
                                                        oValidate = false;
                                                    }
                                                }
                                            });
                                        }
                                        else {
                                            if (listObligationNewData != "") {
                                                $(listAllObligations).each(function (i, item) {
                                                    if ($("#txtObligationNewTitle").val() == item.ObligationTitle) {
                                                        if (!comparedatesequalrecurrence(item.DueDate, listObligationNewData)) {
                                                            if (oValidate) {
                                                                swal("", "Obligation title for one of the date in recurrence already exist.");
                                                            }
                                                            oValidate = false;
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    }
                                }

                            }




                            if (oValidate) {
                                if ($('#ddlObligationOccurencess').val() != "None") {
                                    if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                        if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                            $("#lblerrorreclimitObligation").css('display', '');
                                            oValidate = false;

                                        }
                                    }

                                }
                                if (oValidate) {
                                    $("#loadingPage").fadeIn();
                                    if (ObligationID != "") {

                                        if (vObligationEditStatus != "") {
                                            if (vObligationEditStatus == "CHANGERECURRENCE") {

                                                if ($('#ddlObligationOccurencess').val() != "None") {
                                                    if (listObligationNewData != "") {
                                                        vObligationTextEditRecurrence = $("#txtObligationNewText").val();
                                                        $.ajax({
                                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + ObligationID,
                                                            type: 'DELETE',
                                                            dataType: 'json',
                                                            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                                                            "Content-Type": "application/json",
                                                            cache: false,
                                                            success: function (data) {
                                                                $("#txtObligationNewID").val("");
                                                                modalOnOpenObligationNew();
                                                            }
                                                        });
                                                    }
                                                    else {
                                                        $("#loadingPage").fadeOut();
                                                        swal("", "Please modify the occurence to update obligation.");
                                                    }
                                                }
                                                else {
                                                    $("#inprocessObligation").css('visibility', 'visible');

                                                    var obligationmet = "No";
                                                    var obligationmetby = "";
                                                    var obligationmetdate = null;
                                                    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                        obligationmet = "Yes";
                                                        obligationmetby = localStorage.UserName;
                                                        obligationmetdate = fObligationNewCompletedDate;

                                                    }
                                                    else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                        obligationmetdate = fObligationNewCompletedDate;

                                                    }
                                                    var obliCurrency = "";
                                                    if ($("#hdnContractCurrency").text() != "") {
                                                        obliCurrency = $("#hdnContractCurrency").text();
                                                    }
                                                    else if ($("#hdnBaseCurrency").val() != "") {
                                                        obliCurrency = $("#hdnBaseCurrency").val();
                                                    }
                                                    else {
                                                        obliCurrency = "USD";
                                                    }

                                                    var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                    var vSendReminderTo = '';
                                                    $(SendReminderToArr).each(function (i, item) {
                                                        if (vSendReminderTo == '') {
                                                            vSendReminderTo = item;
                                                        }
                                                        else {
                                                            vSendReminderTo += "; " + item;
                                                        }
                                                    });



                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                        data: {
                                                            RowKey: ObligationID,
                                                            ContractID: getParameterByName('ContractID'),
                                                            ContractTitle: $("#lblCTitleObligationNew").text(),
                                                            ObligationTitle: $("#txtObligationNewTitle").val(),
                                                            ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                            Description: $("#txtObligationNewDesc").val(),
                                                            ObligationOwner: vObligationOwner,
                                                            DueDate: fObligationNewDueDate,
                                                            ObligationMetDate: obligationmetdate,
                                                            ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                            ObligationMet: obligationmet,
                                                            ModifiedBy: localStorage.UserName,
                                                            ObligationMetBy: obligationmetby,
                                                            CompanyProfile: $("#lblCompanyProfile").text(),
                                                            Counterparty: $("#lblCounterparty").text(),
                                                            ContractEndDate: contractItem.EndDate,
                                                            ContractCurrency: obliCurrency,
                                                            SendReminderTo: vSendReminderTo,
                                                            Reminder1: $("#txtReminder1ObligationNew").val(),
                                                            Reminder2: $("#txtReminder2ObligationNew").val(),
                                                            Reminder3: $("#txtReminder3ObligationNew").val(),
                                                            Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                            Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                            Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                            AlertsEnabled: $("#AlertObli").val(),
                                                            PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                            ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                            Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                            AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),

                                                        },
                                                        cache: false,
                                                        success: function (person) {
                                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                                            $("#addEditObligationNew").dialog("close");
                                                            GetObligationCatalogs();
                                                        },
                                                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                    });
                                                }




                                            }
                                            else if (vObligationEditStatus == "EDITRECURRENCE") {
                                                if (listObligationNewData != "") {

                                                    vObligationTextEditRecurrence = $("#txtObligationNewText").val();

                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteobligations?strObligationText=' + $("#txtObligationNewText").val(),
                                                        type: 'DELETE',
                                                        dataType: 'json',
                                                        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                                                        "Content-Type": "application/json",
                                                        cache: false,
                                                        success: function (data) {
                                                            $("#txtObligationNewID").val("");
                                                            modalOnOpenObligationNew();
                                                        }
                                                    });
                                                }
                                                else {
                                                    if ($('#ddlObligationOccurencess').val() == "None") {

                                                        vObligationTextEditRecurrence = $("#txtObligationNewText").val();

                                                        $.ajax({
                                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteobligations?strObligationText=' + $("#txtObligationNewText").val(),
                                                            type: 'DELETE',
                                                            dataType: 'json',
                                                            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                                                            "Content-Type": "application/json",
                                                            cache: false,
                                                            success: function (data) {
                                                                $("#txtObligationNewID").val("");
                                                                modalOnOpenObligationNew();
                                                            }
                                                        });
                                                    }
                                                    else {
                                                        if (listObligationNewData != "") {
                                                            $("#loadingPage").fadeOut();
                                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                            $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                                        }
                                                        else {
                                                            $("#loadingPage").fadeOut();
                                                            swal("", "Please modify the occurence to update obligation.");
                                                        }

                                                    }


                                                }
                                            }
                                            else {
                                                if ($('#ddlObligationOccurencess').val() == "None") {
                                                    $("#inprocessObligation").css('visibility', 'visible');
                                                    var obligationmet = "No";
                                                    var obligationmetby = "";
                                                    var obligationmetdate = null;
                                                    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                        obligationmet = "Yes";
                                                        obligationmetby = localStorage.UserName;
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    }
                                                    else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    }
                                                    var obliCurrency = "";
                                                    if ($("#hdnContractCurrency").text() != "") {
                                                        obliCurrency = $("#hdnContractCurrency").text();
                                                    }
                                                    else if ($("#hdnBaseCurrency").val() != "") {
                                                        obliCurrency = $("#hdnBaseCurrency").val();
                                                    }
                                                    else {
                                                        obliCurrency = "USD";
                                                    }

                                                    var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                    var vSendReminderTo = '';
                                                    $(SendReminderToArr).each(function (i, item) {
                                                        if (vSendReminderTo == '') {
                                                            vSendReminderTo = item;
                                                        }
                                                        else {
                                                            vSendReminderTo += "; " + item;
                                                        }
                                                    });

                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                        data: {
                                                            RowKey: ObligationID,
                                                            ContractID: getParameterByName('ContractID'),
                                                            ContractTitle: $("#lblCTitleObligationNew").text(),
                                                            ObligationTitle: $("#txtObligationNewTitle").val(),
                                                            ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                            Description: $("#txtObligationNewDesc").val(),
                                                            ObligationOwner: vObligationOwner,
                                                            DueDate: fObligationNewDueDate,
                                                            ObligationMetDate: obligationmetdate,
                                                            ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                            ObligationMet: obligationmet,
                                                            ModifiedBy: localStorage.UserName,
                                                            ObligationMetBy: obligationmetby,
                                                            CompanyProfile: $("#lblCompanyProfile").text(),
                                                            Counterparty: $("#lblCounterparty").text(),
                                                            ContractEndDate: contractItem.EndDate,
                                                            ContractCurrency: obliCurrency,
                                                            SendReminderTo: vSendReminderTo,
                                                            Reminder1: $("#txtReminder1ObligationNew").val(),
                                                            Reminder2: $("#txtReminder2ObligationNew").val(),
                                                            Reminder3: $("#txtReminder3ObligationNew").val(),
                                                            Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                            Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                            Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                            AlertsEnabled: $("#AlertObli").val(),
                                                            PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                            ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                            Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                            AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                        },
                                                        cache: false,
                                                        success: function (person) {
                                                            $('.ui-button-green-text').parent().removeAttr('disabled');
                                                            $("#addEditObligationNew").dialog("close");
                                                            GetObligationCatalogs();
                                                        },
                                                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                    });

                                                }
                                                else {
                                                    //if (listObligationNewData != "") {
                                                    $("#loadingPage").fadeOut();
                                                    $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                    $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                                    //}
                                                    //else {
                                                    //    $("#loadingPage").fadeOut();
                                                    //    swal("", "Please modify the occurence to update obligation.");
                                                    //}
                                                    //$("#loadingPage").fadeOut();
                                                    //$("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                    //$("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                                }
                                            }

                                        }
                                        else {
                                            if ($('#ddlObligationOccurencess').val() == "None") {
                                                $("#inprocessObligation").css('visibility', 'visible');
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }
                                                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;
                                                }

                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                }
                                                else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                }
                                                else {
                                                    obliCurrency = "USD";
                                                }

                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    }
                                                    else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });


                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?obligationid=' + ObligationID,
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                    data: {
                                                        RowKey: ObligationID,
                                                        ContractID: getParameterByName('ContractID'),
                                                        ContractTitle: $("#lblCTitleObligationNew").text(),
                                                        ObligationTitle: $("#txtObligationNewTitle").val(),
                                                        ObligationType: $("#ddlObligationTypeNew").find('option:selected').text(),
                                                        Description: $("#txtObligationNewDesc").val(),
                                                        ObligationOwner: vObligationOwner,
                                                        DueDate: fObligationNewDueDate,
                                                        ObligationMetDate: obligationmetdate,
                                                        ObligationStatus: $("#ddlObligationStatus").find('option:selected').text(),
                                                        ObligationMet: obligationmet,
                                                        ModifiedBy: localStorage.UserName,
                                                        ObligationMetBy: obligationmetby,
                                                        CompanyProfile: $("#lblCompanyProfile").text(),
                                                        Counterparty: $("#lblCounterparty").text(),
                                                        ContractEndDate: contractItem.EndDate,
                                                        ContractCurrency: obliCurrency,
                                                        SendReminderTo: vSendReminderTo,
                                                        Reminder1: $("#txtReminder1ObligationNew").val(),
                                                        Reminder2: $("#txtReminder2ObligationNew").val(),
                                                        Reminder3: $("#txtReminder3ObligationNew").val(),
                                                        Reminder1Condition: encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text()),
                                                        Reminder2Condition: encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text()),
                                                        Reminder3Condition: encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text()),
                                                        AlertsEnabled: $("#AlertObli").val(),
                                                        PerformedBy: encodeURIComponent($("input:radio[name=PerformedParty]:checked").val()),
                                                        ShowInCalendar: $("input:radio[name=ShowInObligCalendar]:checked").val(),
                                                        Priority: $("#ddlObligationNewPriority").find('option:selected').val(),
                                                        AutoComplete: $("input:radio[name=ObligationNewAutoComplete]:checked").val(),
                                                    },
                                                    cache: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');

                                                        $("#addEditObligationNew").dialog("close");
                                                        GetObligationCatalogs();

                                                    },
                                                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                });


                                            }
                                            else {
                                                //if (listObligationNewData != "") {
                                                $("#loadingPage").fadeOut();
                                                $("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                $("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                                //}
                                                //else {
                                                //    $("#loadingPage").fadeOut();
                                                //    swal("", "Please modify the occurence to update obligation.");
                                                //}
                                                //$("#loadingPage").fadeOut();
                                                //$("#obligationcatalogsRecurrenceEditPopup").dialog("option", "title", "Edit Repeat Obligation");
                                                //$("#obligationcatalogsRecurrenceEditPopup").dialog("open");
                                            }
                                        }
                                    }
                                    else {
                                        $("#inprocessObligation").css('visibility', 'visible');


                                        if ($('#ddlObligationOccurencess').val() != "None") {

                                            if ($('#ddlObligationOccurencess').val() == "Weekly") {

                                                var validobli = false;

                                                var strrecuobli = "";
                                                $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                                    strrecuobli += (this.value) + ",";
                                                });

                                                if (strrecuobli != "") {
                                                    validobli = true;
                                                }

                                                if (validobli) {
                                                    var obligationmet = "No";
                                                    var obligationmetby = "";
                                                    var obligationmetdate = null;
                                                    if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                        obligationmet = "Yes";
                                                        obligationmetby = localStorage.UserName;
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    }
                                                    else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                        obligationmetdate = fObligationNewCompletedDate;
                                                    }

                                                    var obliCurrency = "";
                                                    if ($("#hdnContractCurrency").text() != "") {
                                                        obliCurrency = $("#hdnContractCurrency").text();
                                                    }
                                                    else if ($("#hdnBaseCurrency").val() != "") {
                                                        obliCurrency = $("#hdnBaseCurrency").val();
                                                    }
                                                    else {
                                                        obliCurrency = "USD";
                                                    }


                                                    var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                    var vSendReminderTo = '';
                                                    $(SendReminderToArr).each(function (i, item) {
                                                        if (vSendReminderTo == '') {
                                                            vSendReminderTo = item;
                                                        }
                                                        else {
                                                            vSendReminderTo += "; " + item;
                                                        }
                                                    });

                                                    var formData = new FormData();
                                                    var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                    contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                    contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                                    contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                    contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                                    contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                    contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                    contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                    contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                    contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                    contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                    contractForm += "&CustomString=" + encodeURIComponent(strrecuobli);
                                                    contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                    contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                    contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);

                                                    contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                    contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                    contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                    contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                    contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);

                                                    contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                    contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                    contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                    contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                    contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                    contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                    contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                                    contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                    contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                    contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());

                                                    if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                        contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                    }
                                                    else {
                                                        contractForm += "&RecMonthlyString=" + "";
                                                    }




                                                    formData.append("SearializeControls", contractForm);


                                                    var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                    occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                    occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                    var strvalues = "";
                                                    var Values = listObligationNewData.Values;
                                                    //if (typeof Values != "undefined" && Values != null) {
                                                    for (var j = 0; j < Values.length; j++) {
                                                        strvalues += Values[j] + ",";
                                                    }
                                                    strvalues = removeLastChar(strvalues, ',');
                                                    //}
                                                    occurrenceForm += "&Values=" + strvalues;

                                                    formData.append("objoccurrence", occurrenceForm);

                                                    $.ajax({
                                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew',
                                                        type: 'POST',
                                                        dataType: 'json',
                                                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                        data: formData,
                                                        cache: false,
                                                        contentType: false,
                                                        processData: false,
                                                        async: false,
                                                        success: function (person) {
                                                            $('.ui-button-green-text').parent().removeAttr('disabled');


                                                            if (vObligationFlaging == "EDIT") {

                                                            }
                                                            else {

                                                            }

                                                            if ($('#txtObligationFinancialsCount').val() == "Yes") {

                                                                $.ajax({
                                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                    type: 'POST',
                                                                    dataType: 'json',
                                                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                                                                    cache: false,
                                                                    success: function (data) {

                                                                    },
                                                                    error: function (data) {
                                                                        $("#loadingPage").fadeOut();
                                                                    }
                                                                });

                                                            }
                                                            $("#addEditObligationNew").dialog("close");

                                                            clearObligationFormDataNew();
                                                            GetObligationCatalogs();

                                                        },
                                                        error: function (data) {
                                                            $("#loadingPage").fadeOut();
                                                        },
                                                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                    });

                                                }
                                                else {
                                                    $("#loadingPage").fadeOut();
                                                }
                                            }
                                            else {
                                                var obligationmet = "No";
                                                var obligationmetby = "";
                                                var obligationmetdate = null;
                                                if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                    obligationmet = "Yes";
                                                    obligationmetby = localStorage.UserName;
                                                    obligationmetdate = fObligationNewCompletedDate;

                                                }
                                                else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                    obligationmetdate = fObligationNewCompletedDate;

                                                }

                                                var obliCurrency = "";
                                                if ($("#hdnContractCurrency").text() != "") {
                                                    obliCurrency = $("#hdnContractCurrency").text();
                                                }
                                                else if ($("#hdnBaseCurrency").val() != "") {
                                                    obliCurrency = $("#hdnBaseCurrency").val();
                                                }
                                                else {
                                                    obliCurrency = "USD";
                                                }


                                                var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                                var vSendReminderTo = '';
                                                $(SendReminderToArr).each(function (i, item) {
                                                    if (vSendReminderTo == '') {
                                                        vSendReminderTo = item;
                                                    }
                                                    else {
                                                        vSendReminderTo += "; " + item;
                                                    }
                                                });

                                                var formData = new FormData();
                                                var contractForm = "ContractID=" + getParameterByName('ContractID');
                                                contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                                contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                                contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                                contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                                contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                                contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                                contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                                contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                                contractForm += "&Ocurrences=" + encodeURIComponent(occurences);
                                                contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                                contractForm += "&CustomString=" + encodeURIComponent(recurenceCustomString);
                                                contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                                contractForm += "&ObligationMet=" + encodeURIComponent(obligationmet);
                                                contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);

                                                contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                                contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                                contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                                contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                                contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);

                                                contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                                contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                                contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                                contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                                contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                                contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                                contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                                contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                                contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                                contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());

                                                if ($('#ddlObligationOccurencess').val() == "Monthly") {
                                                    contractForm += "&RecMonthlyString=" + encodeURIComponent($("#ddlRepeatMonthly").find('option:selected').text());
                                                }
                                                else {
                                                    contractForm += "&RecMonthlyString=" + "";
                                                }




                                                formData.append("SearializeControls", contractForm);


                                                var occurrenceForm = "EndDate=" + listObligationNewData.EndDate;
                                                occurrenceForm += "&LastDate=" + encodeURIComponent(listObligationNewData.LastDate);
                                                occurrenceForm += "&StartDate=" + encodeURIComponent(listObligationNewData.StartDate);
                                                var strvalues = "";
                                                var Values = listObligationNewData.Values;
                                                //if (typeof Values != "undefined" && Values != null) {
                                                for (var j = 0; j < Values.length; j++) {
                                                    strvalues += Values[j] + ",";
                                                }
                                                strvalues = removeLastChar(strvalues, ',');
                                                //}

                                                strvalues = removeLastChar(strvalues, ',');
                                                occurrenceForm += "&Values=" + strvalues;

                                                formData.append("objoccurrence", occurrenceForm);

                                                $.ajax({
                                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew',
                                                    type: 'POST',
                                                    dataType: 'json',
                                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                    data: formData,
                                                    cache: false,
                                                    contentType: false,
                                                    processData: false,
                                                    async: false,
                                                    success: function (person) {
                                                        $('.ui-button-green-text').parent().removeAttr('disabled');


                                                        if (vObligationFlaging == "EDIT") {


                                                        }
                                                        else {

                                                        }

                                                        if ($('#txtObligationFinancialsCount').val() == "Yes") {

                                                            $.ajax({
                                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                                type: 'POST',
                                                                dataType: 'json',
                                                                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                                                                cache: false,
                                                                success: function (data) {

                                                                },
                                                                error: function (data) {
                                                                    $("#loadingPage").fadeOut();
                                                                }
                                                            });

                                                        }
                                                        $("#addEditObligationNew").dialog("close");
                                                        clearObligationFormDataNew();
                                                        GetObligationCatalogs();
                                                    },
                                                    error: function (data) {
                                                        $("#loadingPage").fadeOut();
                                                    },
                                                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                                });
                                            }



                                        }
                                        else {
                                            var vRecurrence = "";
                                            var vRecurrenceCustom = "";
                                            var vOcurence = "";
                                            vRecurrence = "None";
                                            vRecurrenceCustom = "None";
                                            vOcurence = 1;

                                            var obligationmet = "No";
                                            var obligationmetby = "";
                                            var obligationmetdate = null;
                                            if ($("#ddlObligationStatus").find('option:selected').text() == "Complete") {
                                                obligationmet = "Yes";
                                                obligationmetby = localStorage.UserName;
                                                obligationmetdate = fObligationNewCompletedDate;

                                            }
                                            else if ($("#ddlObligationStatus").find('option:selected').text() == "Cancelled") {
                                                obligationmetdate = fObligationNewCompletedDate;

                                            }
                                            var obliCurrency = "";
                                            if ($("#hdnContractCurrency").text() != "") {
                                                obliCurrency = $("#hdnContractCurrency").text();
                                            }
                                            else if ($("#hdnBaseCurrency").val() != "") {
                                                obliCurrency = $("#hdnBaseCurrency").val();
                                            }
                                            else {
                                                obliCurrency = "USD";
                                            }


                                            var SendReminderToArr = $("#ddlSendReminderToObligationNew").val();
                                            var vSendReminderTo = '';
                                            $(SendReminderToArr).each(function (i, item) {
                                                if (vSendReminderTo == '') {
                                                    vSendReminderTo = item;
                                                }
                                                else {
                                                    vSendReminderTo += "; " + item;
                                                }
                                            });

                                            var formData = new FormData();
                                            var contractForm = "ContractID=" + getParameterByName('ContractID');
                                            contractForm += "&ContractTitle=" + encodeURIComponent($("#lblCTitleObligationNew").text());
                                            contractForm += "&ObligationTitle=" + encodeURIComponent($("#txtObligationNewTitle").val());

                                            contractForm += "&ObligationType=" + $("#ddlObligationTypeNew").find('option:selected').text();
                                            contractForm += "&Description=" + $("#txtObligationNewDesc").val();

                                            contractForm += "&ObligationOwner=" + encodeURIComponent(vObligationOwner);
                                            contractForm += "&DueDate=" + encodeURIComponent(fObligationNewDueDate);
                                            contractForm += "&CreatedBy=" + encodeURIComponent(localStorage.UserName);
                                            contractForm += "&ModifiedBy=" + encodeURIComponent(localStorage.UserName);
                                            contractForm += "&PerformedBy=" + encodeURIComponent($("input:radio[name=PerformedParty]:checked").val());
                                            contractForm += "&ObligationStatus=" + encodeURIComponent($("#ddlObligationStatus").find('option:selected').text());
                                            contractForm += "&Ocurrences=" + encodeURIComponent(vOcurence);
                                            contractForm += "&Recurrences=" + encodeURIComponent($('#ddlObligationOccurencess').val());
                                            contractForm += "&CustomString=" + encodeURIComponent(vRecurrenceCustom);
                                            contractForm += "&RecMonthlyString=" + encodeURIComponent("None");
                                            contractForm += "&ObligationEndTerm=" + encodeURIComponent($("input:radio[name=SelectOccurenceEndDate]:checked").val());
                                            contractForm += "&RecMonthlyString=" + "";
                                            contractForm += "&ObligationMet=" + obligationmet;
                                            contractForm += "&ObligationMetBy=" + encodeURIComponent(obligationmetby);
                                            contractForm += "&CompanyProfile=" + encodeURIComponent($("#lblCompanyProfile").text());
                                            contractForm += "&Counterparty=" + encodeURIComponent($("#lblCounterparty").text());
                                            contractForm += "&ContractEndDate=" + encodeURIComponent(contractItem.EndDate);
                                            contractForm += "&ContractCurrency=" + encodeURIComponent(obliCurrency);
                                            contractForm += "&ObligationMetDate=" + encodeURIComponent(obligationmetdate);


                                            contractForm += "&SendReminderTo=" + encodeURIComponent(vSendReminderTo);
                                            contractForm += "&Reminder1=" + $("#txtReminder1ObligationNew").val();
                                            contractForm += "&Reminder2=" + $("#txtReminder2ObligationNew").val();
                                            contractForm += "&Reminder3=" + $("#txtReminder3ObligationNew").val();
                                            contractForm += "&Reminder1Condition=" + encodeURIComponent($("#ddlReminder1ObligationNew").find('option:selected').text());
                                            contractForm += "&Reminder2Condition=" + encodeURIComponent($("#ddlReminder2ObligationNew").find('option:selected').text());
                                            contractForm += "&Reminder3Condition=" + encodeURIComponent($("#ddlReminder3ObligationNew").find('option:selected').text());
                                            contractForm += "&AlertsEnabled=" + $("#AlertObli").val();

                                            contractForm += "&ShowInCalendar=" + encodeURIComponent($("input:radio[name=ShowInObligCalendar]:checked").val());
                                            contractForm += "&Priority=" + encodeURIComponent($("#ddlObligationNewPriority").find('option:selected').val());
                                            contractForm += "&AutoComplete=" + encodeURIComponent($("input:radio[name=ObligationNewAutoComplete]:checked").val());

                                            formData.append("SearializeControls", contractForm);

                                            formData.append("objoccurrence", "");

                                            $.ajax({
                                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew',
                                                type: 'POST',
                                                dataType: 'json',
                                                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                                data: formData,
                                                cache: false,
                                                contentType: false,
                                                processData: false,
                                                async: false,
                                                success: function (person) {
                                                    $('.ui-button-green-text').parent().removeAttr('disabled');


                                                    if ($('#txtObligationFinancialsCount').val() == "Yes") {

                                                        $.ajax({
                                                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationfinancials/updateobligationtext?obligationtext=' + person,
                                                            type: 'POST',
                                                            dataType: 'json',
                                                            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                                                            cache: false,
                                                            success: function (data) {

                                                            },
                                                            error: function (data) {
                                                                $("#loadingPage").fadeOut();
                                                            }
                                                        });

                                                    }


                                                    if (vObligationFlaging == "EDIT") {


                                                    }
                                                    else {

                                                    }


                                                    $("#addEditObligationNew").dialog("close");
                                                    $("#loadingPage").fadeOut();
                                                    clearObligationFormDataNew();
                                                    GetObligationCatalogs();
                                                },
                                                error: function (data) {
                                                    $("#loadingPage").fadeOut();
                                                },
                                                complete: function () { clearObligationFormDataNew(); $("#loadingPage").fadeOut(); $("#inprocessObligation").css('visibility', 'none'); }
                                            });
                                        }


                                    }
                                }




                            }
                            else {

                                $("#loadingPage").fadeOut();
                                $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                    var Id = this.id;
                                    $("#" + Id).css('outline', '1px solid #F00');
                                });


                            }

                        }
                        else {
                            $("#loadingPage").fadeOut();
                            isformvalid = false;
                            $("#ddlObligationStatus").addClass('error');
                            $('html, body').animate({ scrollTop: 0 }, 'fast');
                        }


                    }
                    else {

                        //if ($('#dvObliOccurrenceDates').is(':hidden')) {
                        //    //do something
                        //    $('#dvObliOccurrenceDates').slideToggle();
                        //    $('#imgObliga').attr("title", "Collapse");
                        //    $('#imgObliga').attr("src", "../Content/Images/e-close.png");


                        //}
                        var oValidate = true;

                        if ($('#ddlObligationOccurencess').val() == "Weekly") {
                            var strrecuobli = "";
                            $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                                strrecuobli += (this.value) + ",";
                            });
                            if (strrecuobli == "") {
                                oValidate = false;
                            }

                        }

                        if (oValidate) {

                            if ($('#ddlObligationOccurencess').val() != "None") {
                                if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                    if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                        $("#lblerrorreclimitObligation").css('display', '');
                                        oValidate = false;

                                    }
                                }

                            }
                        }
                        else {
                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                var Id = this.id;
                                $("#" + Id).css('outline', '1px solid #F00');
                            });
                        }
                        $("#loadingPage").fadeOut();
                        $('.ui-button-green-text').parent().removeAttr('disabled');

                    }

                }
                else {
                    if (requiredValidator('dvObliOccurrenceDates')) { }
                    //else
                    //{
                    //    if ($('#dvObliOccurrenceDates').is(':hidden')) {
                    //        //do something
                    //        $('#dvObliOccurrenceDates').slideToggle();
                    //        $('#imgObliga').attr("title", "Collapse");
                    //        $('#imgObliga').attr("src", "../Content/Images/e-close.png");


                    //    }
                    //}

                    var oValidate = true;

                    if ($('#ddlObligationOccurencess').val() == "Weekly") {
                        var strrecuobli = "";
                        $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                            strrecuobli += (this.value) + ",";
                        });
                        if (strrecuobli == "") {
                            oValidate = false;
                        }

                    }

                    if (oValidate) {

                        if ($('#ddlObligationOccurencess').val() != "None") {
                            if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                                if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                    $("#lblerrorreclimitObligation").css('display', '');
                                    oValidate = false;

                                }
                            }

                        }
                    }
                    else {
                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                            var Id = this.id;
                            $("#" + Id).css('outline', '1px solid #F00');
                        });
                    }
                    $("#loadingPage").fadeOut();
                    $('.ui-button-green-text').parent().removeAttr('disabled');

                }

            }
            else {
                if (requiredValidator('obligationreqvalidator2')) { }
                if (requiredValidator('dvObliOccurrenceDates')) { }
                //else
                //{
                //    if ($('#dvObliOccurrenceDates').is(':hidden')) {
                //        //do something
                //        $('#dvObliOccurrenceDates').slideToggle();
                //        $('#imgObliga').attr("title", "Collapse");
                //        $('#imgObliga').attr("src", "../Content/Images/e-close.png");


                //    }
                //}

                var oValidate = true;

                if ($('#ddlObligationOccurencess').val() == "Weekly") {
                    var strrecuobli = "";
                    $("input:checkbox[name=chkRecurrenceCustom]:checked").each(function () {
                        strrecuobli += (this.value) + ",";
                    });
                    if (strrecuobli == "") {
                        oValidate = false;
                    }

                }

                if (oValidate) {

                    if ($('#ddlObligationOccurencess').val() != "None") {
                        if ($('input[name=SelectOccurenceEndDate]:checked').val() == 'Custom') {
                            if (parseInt($("#txtOccurrenceCount").val()) > 54) {
                                $("#lblerrorreclimitObligation").css('display', '');
                                oValidate = false;

                            }
                        }

                    }
                }
                else {
                    $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                        var Id = this.id;
                        $("#" + Id).css('outline', '1px solid #F00');
                    });
                }
                $("#loadingPage").fadeOut();
                $('.ui-button-green-text').parent().removeAttr('disabled');

            }
            $('.ui-button-green-text').parent().removeAttr('disabled');

            return isformvalid;
        }
    }
}

function BindObligationsNew(contractid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/deleteempty?strDelete=' + "Catalog",
        type: 'DELETE',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName, contractId: getParameterByName("ContractID") },
        "Content-Type": "application/json",
        cache: false,
        success: function (data) {
            if (contractid == null || contractid == "") { contractid = vContractID; }
            $("#ObligationNewDetailsTableBody").empty();
            $("#dvObligationAlertNew").empty();
            $("#dvObligationAlertNew").css('display', 'none');
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsNew?contractid=' + contractid,
                type: 'GET',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                success: function (contactsJsonPayload) {
                    listAllObligations = "";
                    listAllObligations = contactsJsonPayload;
                    $('#obligationgroup').removeClass('active');
                    $('#obligationungroup').addClass('active');
                    $("#ObligationNewDetailsTable").css('display', '');
                    $("#ObligationNewDetailsTableGroup").css('display', 'none');
                    $("#obligationNewActionsdiv").css('display', '');
                    var count = 0;
                    $("#NoObligationNewDetails").css('display', 'none');
                    var htmlContent = "";
                    $(contactsJsonPayload).each(function (i, item) {
                        count++;

                        var vDueDate = '';
                        if (item.DueDate != null) {


                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { vDueDate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                            else {
                                if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vDueDate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                                else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vDueDate = item.DueDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                            }
                        }
                        else {
                            vDueDate = "-";
                        }
                        var url = '<input type="checkbox" id="' + item.RowKey + '" name="MultipleObligationsNew" onclick="checkMultipleObligationsNew(this);" value="' + item.RowKey + '">&nbsp;<a title="' + item.ObligationTitle + '"  href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')" class="linkText">' + item.ObligationTitle + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuObligationNew"/>';
                        htmlContent += "<tr>";
                        htmlContent += "<td><p id='ObligationID' style='display:none;'>" + item.RowKey + "</p>";
                        htmlContent += "<span id='ObligationTitle' style='display:none;'>" + item.ObligationTitle + "</span>";
                        htmlContent += "<span id='ObligationText' style='display:none;'>" + item.ObligationText + "</span>";
                        htmlContent += "<span id='ObligationRecurrence' style='display:none;'>" + item.Recurrences + "</span>";
                        htmlContent += "<span id='ObligationStatus' style='display:none;'>" + item.ObligationStatus + "</span>";


                        htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                        htmlContent += "<td ><span  id='ObligationType" + item.RowKey + "'>" + item.ObligationType + "</span></td>";

                        htmlContent += "<td  ><lable id='ObligationDue" + item.RowKey + "'>" + vDueDate + "</lable></td>";

                        if (listAllObligationCatalogs != null && listAllObligationCatalogs != "") {
                            var obligproducts = "";
                            var ID = item.RowKey;
                            obligproducts = $.grep(listAllObligationCatalogs, function (p) { return p.ObligationID == ID; }).map(function (p) { return p });

                            if (obligproducts != null && obligproducts != "" && obligproducts.length > 0) {
                                htmlContent += "<td><lable>" + obligproducts.length + "</lable></td>";
                            }
                            else {
                                htmlContent += "<td><lable>-</lable></td>";
                            }
                        }
                        else {
                            htmlContent += "<td><lable>-</lable></td>";
                        }


                        if (item.PerformedBy == "Self") {

                            if ($("#lblCompanyProfile").text() != null && $("#lblCompanyProfile").text() != "") {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + $("#lblCompanyProfile").text() + "</lable></td>";
                            }
                            else {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + "-" + "</lable></td>";
                            }

                        }
                        else {
                            if ($("#lblCounterparty").text() != null && $("#lblCounterparty").text() != "") {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + $("#lblCounterparty").text() + "</lable></td>";

                            }
                            else {
                                htmlContent += "<td><lable id='PerformrdBy" + item.RowKey + "'>" + "-" + "</lable></td>";

                            }


                        }
                        if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                            if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                                htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + item.ObligationStatus + "</a></td>";
                            }
                            else {
                                htmlContent += "<td><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationStatusSettings'>" + item.ObligationStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                            }
                        }
                        else
                            htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + item.ObligationStatus + "</a></td>";


                        //if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null)
                        //    htmlContent += "<td><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationStatusSettings'>" + item.ObligationStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                        //else
                        //    htmlContent += "<td><a href='javascript:void(0);' style='pointer-events: none;' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationStatusSettings'>" + item.ObligationStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";


                        htmlContent += "</tr>";

                    });
                    $("#ObligationNewDetailsTableBody").html(htmlContent);



                    $("#lblObligationNewCount").text(count);


                    $(".openmenuObligationNew").contextMenu({ menu: 'dropdownMenuobligation', leftButton: true }, function (action, el, pos) {
                        contextMenuObligationNew(action, el.parent("i").parent("td").parent("tr"), pos);
                    });

                    $(".openmenuObligationStatusSettings").contextMenu({
                        menu: 'dropdownMenuObligationStatusSettings', leftButton: true
                    }, function (action, el, pos) {
                        contextMenuObligationStatusSettings(action, el.parent("td").parent("tr"), pos);
                    });

                    $("#loadingPage").fadeOut();
                },
                error: function (request) {
                    listAllObligations = "";
                    $("#NoObligationNewDetails").css('display', '');
                    $("#obligationNewActionsdiv").css('display', 'none');
                    $("#loadingPage").fadeOut();
                    $("#lblObligationNewCount").text('0');
                    $("#ulObligationNew").append('No items found.');
                }

            });
        }
    });

}

function GetObligationCatalogs() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (dataUser) {


            listAllObligationCatalogs = dataUser;
            BindObligationsNew(vContractID);

        },
        error:
            function (dataUser) {
                listAllObligationCatalogs = "";
                BindObligationsNew(vContractID);
            }
    });
}





function ShowObligationsNew() {
    $('#obligationgroup').removeClass('active');
    $('#obligationungroup').addClass('active');

    $("#ObligationNewDetailsTable").css('display', '');
    $("#ObligationNewDetailsTableGroup").css('display', 'none');
    $("#obligationNewActionsdiv").css('display', '');
    $("#NoObligationNewDetails").css('display', 'none');
}

function BindObligationsNewGroup(contractid) {

    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#ObligationNewDetailsTableBodyGroup").empty();
    $("#dvObligationAlertNew").empty();
    $("#dvObligationAlertNew").css('display', 'none');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnewgroup',
        type: 'POST',
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'BusinessAreaLocation': localStorage.GlobalBusinessAreaLocation },
        data: JSON.stringify(listAllObligations),
        cache: false,
        async: false,
        success: function (contactsJsonPayload) {

            $('#obligationungroup').removeClass('active');
            $('#obligationgroup').addClass('active');

            $("#ObligationNewDetailsTable").css('display', 'none');
            $("#ObligationNewDetailsTableGroup").css('display', '');
            $("#obligationNewActionsdiv").css('display', '');
            var count = 0;
            $("#NoObligationNewDetails").css('display', 'none');
            $(contactsJsonPayload).each(function (i, item) {
                count++;




                var vDueDate = '';
                if (item.ObligationStartDate != null) {
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { vDueDate = item.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vDueDate = item.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                        else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vDueDate = item.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    }
                }
                else {
                    vDueDate = "-";
                }

                if (item.ObligationEndDate != null) {
                    vDueDate += " to ";
                    if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                    { vDueDate += item.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    else {
                        if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vDueDate += item.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                        else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vDueDate += item.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                    }
                }
                else {
                    vDueDate += " to ";
                    vDueDate += "-";
                }

                var url = '<a  href="javascript:void(0)" onclick="ViewObligationDetail(\'' + item.RowKey + '\')" class="linkText">' + item.ObligationTitle + '</a>';

                var htmlContent = "<tr>";
                htmlContent += "<td><p id='ObligationID' style='display:none;'>" + item.RowKey + "</p>";
                htmlContent += "<span id='ObligationTitle' style='display:none;'>" + item.ObligationTitle + "</span>";
                htmlContent += "<span id='ObligationText' style='display:none;'>" + item.ObligationText + "</span>";
                htmlContent += "<span id='ObligationRecurrence' style='display:none;'>" + item.Recurrences + "</span>";
                htmlContent += "<span id='ObligationStatus' style='display:none;'>" + item.ObligationStatus + "</span>";


                htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";
                htmlContent += "<td ><span id='ObligationTypeGroup" + item.RowKey + "'>" + item.ObligationType + "</span></td>";

                htmlContent += "<td  ><lable id='ObligationRecGroup" + item.RowKey + "'>" + item.Recurrences + "</lable></td>";

                htmlContent += "<td  ><lable id='ObligationOcuGroup" + item.RowKey + "'>" + item.Ocurrences + "</lable></td>";

                htmlContent += "<td  ><lable id='ObligationDueDateGroup" + item.RowKey + "'>" + vDueDate + "</lable></td>";



                htmlContent += "</tr>";
                $("#ObligationNewDetailsTableBodyGroup").append(htmlContent);

            });


            $(".openmenuObligationNewGroup").contextMenu({ menu: 'dropdownMenuobligation', leftButton: true }, function (action, el, pos) {
                contextMenuObligationNew(action, el.parent("i").parent("td").parent("tr"), pos);
            });

            $("#loadingPage").fadeOut();
        },
        error: function (request) {
            $("#NoObligationNewDetails").css('display', '');
            $("#obligationNewActionsdiv").css('display', 'none');
            $("#loadingPage").fadeOut();
            $("#lblObligationNewCount").text('0');
            $("#ulObligationNew").append('No items found.');
        }

    });
}



function contextMenuObligationNew(action, el, pos) {

    switch (action) {
        case "view":
            {
                var obligationID = $(el).find("#ObligationID").text();
                ViewObligationDetail(obligationID);
                break;
            }
        case "delete":
            {
                var termTitle = $(el).find("#ObligationTitle").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + termTitle + "'</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             var obligationID = $(el).find("#ObligationID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 "Content-Type": "application/json",
                 cache: false,
                 success: function (data) {

                     GetObligationCatalogs();

                 }
             });
         }
         return;
     });

                break;
            }
        case "edit":
            {
                $('#addEditMilestoneNew').dialog('widget').find('.ui-dialog-buttonpane .ui-button:button:contains("Add") .pop_up_Content_Green ').html("Save");
                $("#loadingPage").fadeIn();
                clearObligationFormDataNew();
                listObligationNewData = "";
                vObligationFlaging = "EDIT";

                $("#inprocessObligation").css("visibility", "hidden");
                var obligationID = $(el).find("#ObligationID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (obligationentity) {

                        $('#hdnProductUpdates').text('EDIT');
                        $("#hdnObligationUniqueId").text(obligationentity.ObligationText);
                        $("#hdnObligationRowKey").text(obligationentity.RowKey);

                        var strCompanyProfile = "";
                        var strCounterpartynew = "";

                        if ($("#lblCompanyProfile").text() == null || $("#lblCompanyProfile").text() == "") {
                            strCompanyProfile = "Not Available"
                        }
                        else {
                            strCompanyProfile = $("#lblCompanyProfile").text();
                        }

                        if ($("#lblCounterparty").text() == null || $("#lblCounterparty").text() == "") {
                            strCounterpartynew = "Not Available";
                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = true;

                        }
                        else {
                            strCounterpartynew = $("#lblCounterparty").text();
                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = false;

                        }


                        string1 = "My Company" + " " + "(" + strCompanyProfile + ")";
                        string2 = "Counterparty" + " " + "(" + strCounterpartynew + ")";

                        $("#PerformedPartySelf").text(string1);
                        $("#PerformedPartyCounterparty").text(string2);
                        vObligationTextEditRecurrence = "";



                        GetValuesAndAutoPopulate("ddlSendReminderToObligationNew", obligationentity.SendReminderTo);


                        if (obligationentity.Reminder1 != null && obligationentity.Reminder1 != "" && obligationentity.Reminder1 != 0) {
                            $("#txtReminder1ObligationNew").val(obligationentity.Reminder1);
                        }
                        else {
                            $("#txtReminder1ObligationNew").val("");
                        }

                        if (obligationentity.Reminder2 != null && obligationentity.Reminder2 != "" && obligationentity.Reminder2 != 0) {
                            $("#txtReminder2ObligationNew").val(obligationentity.Reminder2);
                        }
                        else {
                            $("#txtReminder2ObligationNew").val("");
                        }
                        if (obligationentity.Reminder3 != null && obligationentity.Reminder3 != "" && obligationentity.Reminder3 != 0) {
                            $("#txtReminder3ObligationNew").val(obligationentity.Reminder3);
                        }
                        else {
                            $("#txtReminder3ObligationNew").val("");
                        }

                        if (obligationentity.Reminder1Condition != '') {
                            $("#ddlReminder1ObligationNew option").filter(function (index) { return $(this).text() === obligationentity.Reminder1Condition; }).prop('selected', true);
                        }
                        else {
                            $("#ddlReminder1ObligationNew").val('before')
                        }
                        if (obligationentity.Reminder2Condition != '') {
                            $("#ddlReminder2ObligationNew option").filter(function (index) { return $(this).text() === obligationentity.Reminder2Condition; }).prop('selected', true);
                        }
                        else {
                            $("#ddlReminder2ObligationNew").val('before')
                        }
                        if (obligationentity.Reminder3Condition != '') {
                            $("#ddlReminder3ObligationNew option").filter(function (index) { return $(this).text() === obligationentity.Reminder3Condition; }).prop('selected', true);
                        }
                        else {
                            $("#ddlReminder3ObligationNew").val('before')
                        }

                        $("#ddlObligationNewPriority option").filter(function (index) { return $(this).text() === obligationentity.Priority; }).prop('selected', true);
                        $('input[type="radio"][name="ObligationNewAutoComplete"][value="' + obligationentity.AutoComplete + '"]').prop('checked', true);
                        $('input[type="radio"][name="ShowInObligCalendar"][value="' + obligationentity.ShowInCalendar + '"]').prop('checked', true);

                        $("#lblCTitleObligationNew").text(obligationentity.ContractTitle)
                        var duedate = "";

                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { duedate = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY'); }
                        else { duedate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat); }
                        $("#txtObligationNewID").val(obligationentity.RowKey);
                        $("#txtObligationNewText").val(obligationentity.ObligationText);
                        $("#txtObligationNewTitle").val(obligationentity.ObligationTitle);
                        $("#ddlObligationTypeNew option").filter(function (index) { return $(this).text() === obligationentity.ObligationType; }).prop('selected', true);
                        $("#txtObligationNewDesc").val(obligationentity.Description);
                        GetValuesAndAutoPopulate("ddlObligationNewOwner", obligationentity.ObligationOwner);
                        //$("#dtObligationNewDueDate").val(duedate);
                        $('#dtObligationNewDueDate').datepicker('setDate', duedate);

                        $('input[type="radio"][name="PerformedParty"][value="' + obligationentity.PerformedBy + '"]').prop('checked', true);
                        $("#ddlObligationStatus option").filter(function (index) { return $(this).text() === obligationentity.ObligationStatus; }).prop('selected', true);

                        $("#ddlObligationOccurencess option").filter(function (index) { return $(this).text() === obligationentity.Recurrences; }).prop('selected', true);
                        var newDate = new Date(obligationentity.DueDate);
                        listObligationNewStartDate = $.datepicker.formatDate('mm/dd/yy', $("#dtObligationNewDueDate").datepicker('getDate'));
                        //listObligationNewStartDate = duedate;
                        var strEndDate = "";
                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                            strEndDate = new Date(contractItem.EndDate);
                            listObligationNewEndDate = formatDate(strEndDate);
                            $('#ObligationNewOcurrenceEndDate').text("");
                            var ONewEndDate = "";
                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                            { ONewEndDate = moment(new Date(listObligationNewEndDate)).format('MM/DD/YYYY'); }
                            else { ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format(localStorage.AppDateFormat); }

                            $('#ObligationNewOcurrenceEndDate').text(" (" + ONewEndDate + ")");
                            $("#rdObligationNewEndOccurence").prop("checked", true);
                        }
                        else {
                            listObligationNewEndDate = "Not Available";
                            $('#ObligationNewOcurrenceEndDate').text("");
                            $('#ObligationNewOcurrenceEndDate').text(" (" + listObligationNewEndDate + ")");
                            $("#rdObligationNewEndOccurence").attr('disabled', true);
                            $('#rdObligationNewEndOccurence').removeAttr('checked');
                            $("#rdObligationNewEndOccurenceUser").prop("checked", true);


                        }

                        if (obligationentity.ObligationStatus == "Complete" || obligationentity.ObligationStatus == "Cancelled") {
                            $("#ulObliCompletedate").css('display', '');
                            $('#dtObligationNewCompletedDate').addClass('validelement');
                            $('#dtObligationNewCompletedDate').addClass('validdate');
                            if (obligationentity.ObligationMetDate != null && obligationentity.ObligationMetDate != "") {

                                var OMetDate = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { OMetDate = moment(new Date(obligationentity.ObligationMetDate)).utc().format('MM/DD/YYYY'); }
                                else { OMetDate = moment(new Date(obligationentity.ObligationMetDate)).utc().format(localStorage.AppDateFormat); }
                                $('#dtObligationNewCompletedDate').val(OMetDate);
                            }
                            else {
                                var CEDate = new Date();
                                CEDate = formatDate(CEDate);

                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { CEDate = moment(new Date(CEDate)).format('MM/DD/YYYY'); }
                                else { CEDate = moment(new Date(CEDate)).utc().format(localStorage.AppDateFormat); }

                                $('#dtObligationNewCompletedDate').val(CEDate);
                            }

                        }
                        else {
                            $("#ulObliCompletedate").css('display', 'none');
                            $('#dtObligationNewCompletedDate').removeClass('validelement');
                            $('#dtObligationNewCompletedDate').removeClass('validdate');
                            $('#dtObligationNewCompletedDate').val('');
                        }

                        userFlagObli = true;


                        $("#dtOblOcurrMonthforYear").val(monthNames[newDate.getMonth()]);
                        $("#dtOblOcurrDateforYear").val(newDate.getDate());


                        $("#dtObligationNewOccurrenceDueDate").val(newDate.getDate());

                        $('input[type="radio"][name="SelectOccurenceEndDate"][value="' + obligationentity.ObligationEndTerm + '"]').prop('checked', true);

                        if (obligationentity.ObligationEndTerm == "Custom") {
                            userFlagObliCustom = true;
                            $("#txtOccurrenceCount").val(obligationentity.Ocurrences);

                        }
                        else {
                            $("#txtOccurrenceCount").val("12");
                        }

                        //var dtStartdate = obligationentity.ObligationStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                        //var dtEnddate = obligationentity.ObligationEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1');

                        var fObligationStartDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).utc().format('MM/DD/YYYY'); }
                        else { fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).utc().format(localStorage.AppDateFormat); }
                        var dtStartdate = fObligationStartDate;

                        var fObligationEndDate = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format('MM/DD/YYYY'); }
                        else { fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat); }
                        var dtEnddate = fObligationEndDate;



                        $('#ObligationOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + obligationentity.Ocurrences + " instances)")

                        vObligationEditStatus = "";

                        var dateNew = new Date(obligationentity.DueDate);

                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                            this.checked = false;
                            var Id = this.id;
                            $("#" + Id).css('outline', '');


                        });

                        $("#lblerrorreclimitObligation").css('display', 'none');
                        var day = dateNew.getDay()
                        var chkboxId = "ORC" + day;

                        $("#" + chkboxId).prop('checked', true);


                        if (obligationentity.Recurrences == "Weekly") {


                            $("#dtObligationNewDueDate").attr("disabled", "disabled");
                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                this.checked = false;

                            });

                            var strRecString = obligationentity.CustomString.split(',');

                            $(strRecString).each(function (index, element) {
                                var value = parseInt(element);
                                var chkboxId = "ORC" + value;
                                $("#" + chkboxId).prop('checked', true);
                            });

                            $("#divOcurrenceSummary").css('display', '');
                            $("#obligationEditOcursumary").css('display', '');

                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');

                            $("#aobligationRecNoneEdit").css('display', 'none');
                            $("#aobligationRecEdit").css('display', '');

                            $("#dvobligationOcurrenceEnd").css('display', 'none');

                            $("#liObligationRecurrence").css('display', 'none');



                        }
                        else if (obligationentity.Recurrences == "None") {
                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divOcurrenceSummary").css('display', '');

                            $("#obligationEditOcursumary").css('display', '');


                            $("#aobligationRecNoneEdit").css('display', '');
                            $("#aobligationRecEdit").css('display', 'none');
                            $("#liObligationRecurrence").css('display', 'none');
                            $('#ObligationOcurrenceSummary').text("(" + "Never" + ")")


                        }
                        else if (obligationentity.Recurrences == "Monthly") {
                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                            $("#ddlRepeatMonthly").css('display', '');
                            $("#ddlRepeatMonthly").val(obligationentity.RecMonthlyString);


                            $("#dtObligationNewDueDate").attr("disabled", "disabled");


                            $("#divOcurrenceSummary").css('display', '');
                            $("#obligationEditOcursumary").css('display', '');


                            $("#lblOcurrenceMonth").css('display', '');
                            $("#lblOcurrenceYear").css('display', 'none');

                            $("#aobligationRecNoneEdit").css('display', 'none');
                            $("#aobligationRecEdit").css('display', '');
                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                            $("#liObligationRecurrence").css('display', 'none');


                        }
                        else {
                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                            $("#ddlRepeatMonthly").css('display', 'none');

                            $("#lblOcurrenceMonth").css('display', 'none');
                            $("#lblOcurrenceYear").css('display', '');


                            $("#dtObligationNewDueDate").attr("disabled", "disabled");


                            $("#divOcurrenceSummary").css('display', '');
                            $("#obligationEditOcursumary").css('display', '');

                            $("#aobligationRecNoneEdit").css('display', 'none');
                            $("#aobligationRecEdit").css('display', '');
                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                            $("#liObligationRecurrence").css('display', 'none');

                        }

                        $("#lblCTitleObli").text($("#lblContractTitle").text());

                        getObligationCatalogsNew(vContractID, $("#txtObligationNewText").val(), obligationentity.RowKey);

                        var foblnewdate1 = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { foblnewdate1 = moment(new Date(obligationentity.DueDate)).utc().format('MM/DD/YYYY'); }
                        else { foblnewdate1 = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat); }
                        var oblnewdate1 = foblnewdate1;

                        var foblnewdate2 = "";
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { foblnewdate2 = moment(new Date(obligationentity.ObligationEndDate)).format('MM/DD/YYYY'); }
                        else { foblnewdate2 = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat); }
                        var oblnewdate2 = foblnewdate2;

                        $('#orepupdatesingle').text("");
                        $('#orepupdaterecurrence').text("");
                        $('#ornepupdatesingle').text("");
                        $('#ornepupdaterecurrence').text("");

                        $('#orepupdatesingle').text("(" + oblnewdate1 + ")");
                        $('#orepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");
                        $('#ornepupdatesingle').text("(" + oblnewdate1 + ")");
                        $('#ornepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");


                        if (vCatalogCount == "Yes") {
                            $("#trObliFinShow").css('display', 'none');
                            document.getElementById("cbObligationCatalogProductsSelect").checked = true;

                            document.getElementById("cbObligationCatalogProductsSelect").disabled = true;
                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "10" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                $("#dvObligationCatalogProducts").css('display', '');
                            }

                        }
                        if (obligationentity.AlertsEnabled == "Yes") {
                            $("#AlertObli").val('Yes').change();
                        }
                        else {
                            $("#AlertObli").val('No').change();
                        }
                    }
                });






                $(".validelement").each(function (index, element) {
                    $(element).removeClass("error");
                    $("#errormsg_" + element.id).remove();
                });


                $("#obligationnewheading").text("Edit Obligation");
                $("#addEditObligationNew").dialog("option", "title", "");
                $("#addEditObligationNew").dialog("open");
                break;
            }
    }
}


function contextMenuObligationStatusSettings(action, el, pos) {

    switch (action) {
        case "Upcoming":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();

                var duedateid = "ObligationDue" + obligationID;
                var obligationDueDate = $(el).find("#" + duedateid).text();
                var obligationStatus = $(el).find("#ObligationStatus").text();
                var mydate = moment(obligationDueDate, 'DD/MM/YYYY');
                mydate = moment(mydate).format("MM/DD/YYYY");

                if (comparedatestatus(mydate, action)) {

                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Upcoming',
                        type: 'POST',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');

                            GetObligationCatalogs();
                            $("#obligationNewActions").css('display', 'none');
                        },
                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                    });

                } else {
                    swal("", "Due Date is past date. So Status can not be Upcoming");
                }
                break;
            }
        case "Delayed":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();
                var duedateid = "ObligationDue" + obligationID;
                var obligationDueDate = $(el).find("#" + duedateid).text();
                var obligationStatus = $(el).find("#ObligationStatus").text();
                var mydate = moment(obligationDueDate, 'DD/MM/YYYY');
                mydate = moment(mydate).format("MM/DD/YYYY");

                if (comparedatestatus(mydate, action)) {

                    $("#inprocessObligation").css('visibility', 'visible');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Delayed',
                        type: 'POST',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        cache: false,
                        success: function (person) {
                            $('.ui-button-green-text').parent().removeAttr('disabled');
                            GetObligationCatalogs();
                            $("#obligationNewActions").css('display', 'none');
                        },
                        complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                    });
                } else {
                    swal("", "Due Date is future date. So Status can not be Delayed");
                }
                break;
            }
        case "Partial":
            {

                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();


                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Partial',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');

                        GetObligationCatalogs();
                        $("#obligationNewActions").css('display', 'none');
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });

                break;
            }
        case "Cancelled":
            {

                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();


                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Cancelled',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');

                        swal("", "Obligation Updated");
                        GetObligationCatalogs();
                        $("#obligationNewActions").css('display', 'none');
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });


                break;
            }
        case "Complete":
            {
                var obligationID = $(el).find("#ObligationID").text();
                var obligationText = $(el).find("#ObligationText").text();
                var obligationRecurrence = $(el).find("#ObligationRecurrence").text();
                $("#loadingPage").fadeIn();
                $("#inprocessObligation").css("visibility", "hidden");
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?obligationtext=' + obligationText + '&obligationId=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    async: false,
                    success: function (catalogs) {

                        if (catalogs != null && catalogs.length > 0) {
                            var catalogitems = "";

                            catalogitems = $.grep(catalogs, function (p) { return p.ObligationCatalogStatus != "Complete" && p.ObligationCatalogStatus != "Cancelled"; })
       .map(function (p) { return p });


                            if (catalogitems != null && catalogitems != "") {
                                clearObligationFormDataNew();
                                vObligationFlaging = "EDIT";
                                validateproducts = false;


                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations?obligationid=' + obligationID,
                                    type: 'GET',
                                    dataType: 'json',
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    "Content-Type": "application/json",
                                    cache: false,
                                    success: function (obligationentity) {
                                        $("#loadingPage").fadeOut();
                                        $('#hdnProductUpdates').text('EDIT');
                                        $("#hdnObligationUniqueId").text(obligationentity.ObligationText);
                                        $("#hdnObligationRowKey").text(obligationentity.RowKey);

                                        var strCompanyProfile = "";
                                        var strCounterpartynew = "";

                                        if ($("#lblCompanyProfile").text() == null || $("#lblCompanyProfile").text() == "") {
                                            strCompanyProfile = "Not Available"
                                        }
                                        else {
                                            strCompanyProfile = $("#lblCompanyProfile").text();
                                        }

                                        if ($("#lblCounterparty").text() == null || $("#lblCounterparty").text() == "") {
                                            strCounterpartynew = "Not Available";
                                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = true;

                                        }
                                        else {
                                            strCounterpartynew = $("#lblCounterparty").text();
                                            document.getElementById("rdObligationNewPerformedPartyCP").disabled = false;

                                        }


                                        string1 = "My Company" + " " + "(" + strCompanyProfile + ")";
                                        string2 = "Counterparty" + " " + "(" + strCounterpartynew + ")";

                                        $("#PerformedPartySelf").text(string1);
                                        $("#PerformedPartyCounterparty").text(string2);
                                        vObligationTextEditRecurrence = "";

                                        $("#lblCTitleObligationNew").text(obligationentity.ContractTitle)
                                        var duedate = "";

                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                        { duedate = moment(new Date(obligationentity.DueDate)).format('MM/DD/YYYY'); }
                                        else { duedate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat); }
                                        $("#txtObligationNewID").val(obligationentity.RowKey);
                                        $("#txtObligationNewText").val(obligationentity.ObligationText);
                                        $("#txtObligationNewTitle").val(obligationentity.ObligationTitle);
                                        $("#ddlObligationTypeNew option").filter(function (index) { return $(this).text() === obligationentity.ObligationType; }).prop('selected', true);
                                        $("#txtObligationNewDesc").val(obligationentity.Description);
                                        GetValuesAndAutoPopulate("ddlObligationNewOwner", obligationentity.ObligationOwner);
                                        $("#dtObligationNewDueDate").val(duedate);

                                        $('input[type="radio"][name="PerformedParty"][value="' + obligationentity.PerformedBy + '"]').prop('checked', true);
                                        $("#ddlObligationStatus option").filter(function (index) { return $(this).text() === obligationentity.ObligationStatus; }).prop('selected', true);

                                        $("#ddlObligationOccurencess option").filter(function (index) { return $(this).text() === obligationentity.Recurrences; }).prop('selected', true);
                                        var newDate = new Date(obligationentity.DueDate);
                                        listObligationNewStartDate = duedate;
                                        var strEndDate = "";
                                        if (contractItem.EndDate != "" && contractItem.EndDate != null && contractItem.EndDate != "null") {
                                            strEndDate = new Date(contractItem.EndDate);
                                            listObligationNewEndDate = formatDate(strEndDate);
                                            $('#ObligationNewOcurrenceEndDate').text("");
                                            var ONewEndDate = "";
                                            if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                            { ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format('MM/DD/YYYY'); }
                                            else { ONewEndDate = moment(new Date(listObligationNewEndDate)).utc().format(localStorage.AppDateFormat); }

                                            $('#ObligationNewOcurrenceEndDate').text(" (" + ONewEndDate + ")");
                                            $("#rdObligationNewEndOccurence").prop("checked", true);
                                        }
                                        else {
                                            listObligationNewEndDate = "Not Available";
                                            $('#ObligationNewOcurrenceEndDate').text("");
                                            $('#ObligationNewOcurrenceEndDate').text(" (" + listObligationNewEndDate + ")");
                                            $("#rdObligationNewEndOccurence").attr('disabled', true);
                                            $('#rdObligationNewEndOccurence').removeAttr('checked');
                                            $("#rdObligationNewEndOccurenceUser").prop("checked", true);


                                        }

                                        if (obligationentity.ObligationStatus == "Complete" || obligationentity.ObligationStatus == "Cancelled") {
                                            $("#ulObliCompletedate").css('display', '');
                                            $('#dtObligationNewCompletedDate').addClass('validelement');
                                            $('#dtObligationNewCompletedDate').addClass('validdate');
                                            if (obligationentity.ObligationMetDate != null && obligationentity.ObligationMetDate != "") {

                                                var OMetDate = "";
                                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                                { OMetDate = moment(new Date(obligationentity.ObligationMetDate)).format('MM/DD/YYYY'); }
                                                else { OMetDate = moment(new Date(obligationentity.ObligationMetDate)).utc().format(localStorage.AppDateFormat); }
                                                $('#dtObligationNewCompletedDate').val(OMetDate);
                                            }
                                            else {
                                                var CEDate = new Date();
                                                CEDate = formatDate(CEDate);

                                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                                { CEDate = moment(new Date(CEDate)).format('MM/DD/YYYY'); }
                                                else { CEDate = moment(new Date(CEDate)).utc().format(localStorage.AppDateFormat); }
                                                $('#dtObligationNewCompletedDate').val(CEDate);
                                            }

                                        }
                                        else {
                                            $("#ulObliCompletedate").css('display', 'none');
                                            $('#dtObligationNewCompletedDate').removeClass('validelement');
                                            $('#dtObligationNewCompletedDate').removeClass('validdate');
                                            $('#dtObligationNewCompletedDate').val('');
                                        }




                                        $("#dtOblOcurrMonthforYear").val(monthNames[newDate.getMonth()]);
                                        $("#dtOblOcurrDateforYear").val(newDate.getDate());


                                        $("#dtObligationNewOccurrenceDueDate").val(newDate.getDate());

                                        $('input[type="radio"][name="SelectOccurenceEndDate"][value="' + obligationentity.ObligationEndTerm + '"]').prop('checked', true);

                                        if (obligationentity.ObligationEndTerm == "Custom") {
                                            $("#txtOccurrenceCount").val(obligationentity.Ocurrences);

                                        }
                                        else {
                                            $("#txtOccurrenceCount").val("12");
                                        }

                                        var fObligationStartDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                        { fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).format('MM/DD/YYYY'); }
                                        else { fObligationStartDate = moment(new Date(obligationentity.ObligationStartDate)).utc().format(localStorage.AppDateFormat); }
                                        var dtStartdate = fObligationStartDate;

                                        var fObligationEndDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                        { fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).format('MM/DD/YYYY'); }
                                        else { fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat); }
                                        var dtEnddate = fObligationEndDate;


                                        $('#ObligationOcurrenceSummary').text("(" + dtStartdate + " to " + dtEnddate + ", " + obligationentity.Ocurrences + " instances)")

                                        vObligationEditStatus = "";

                                        var dateNew = new Date(obligationentity.DueDate);

                                        $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                            this.checked = false;
                                        });
                                        var day = dateNew.getDay()
                                        var chkboxId = "ORC" + day;

                                        $("#" + chkboxId).prop('checked', true);


                                        if (obligationentity.Recurrences == "Weekly") {


                                            $("#dtObligationNewDueDate").attr("disabled", "disabled");


                                            var strRecString = obligationentity.CustomString;
                                            var value = parseInt(strRecString);
                                            $("input:checkbox[name=chkRecurrenceCustom]").each(function () {
                                                this.checked = false;

                                            });

                                            var chkboxId = "ORC" + value;

                                            $("#" + chkboxId).prop('checked', true);
                                            $("#divOcurrenceSummary").css('display', '');
                                            $("#obligationEditOcursumary").css('display', '');

                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');

                                            $("#aobligationRecNoneEdit").css('display', 'none');
                                            $("#aobligationRecEdit").css('display', '');

                                            $("#dvobligationOcurrenceEnd").css('display', 'none');

                                            $("#liObligationRecurrence").css('display', 'none');



                                        }
                                        else if (obligationentity.Recurrences == "None") {
                                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divOcurrenceSummary").css('display', '');

                                            $("#obligationEditOcursumary").css('display', '');


                                            $("#aobligationRecNoneEdit").css('display', '');
                                            $("#aobligationRecEdit").css('display', 'none');
                                            $("#liObligationRecurrence").css('display', 'none');
                                            $('#ObligationOcurrenceSummary').text("(" + "Never" + ")")


                                        }
                                        else if (obligationentity.Recurrences == "Monthly") {
                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                                            $("#ddlRepeatMonthly").css('display', '');
                                            $("#ddlRepeatMonthly").val(obligationentity.RecMonthlyString);


                                            $("#dtObligationNewDueDate").attr("disabled", "disabled");


                                            $("#divOcurrenceSummary").css('display', '');
                                            $("#obligationEditOcursumary").css('display', '');


                                            $("#lblOcurrenceMonth").css('display', '');
                                            $("#lblOcurrenceYear").css('display', 'none');

                                            $("#aobligationRecNoneEdit").css('display', 'none');
                                            $("#aobligationRecEdit").css('display', '');
                                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                                            $("#liObligationRecurrence").css('display', 'none');


                                        }
                                        else {
                                            $("#divObligationOcurrenceWeekly").css('display', 'none');
                                            $("#divObligationOcurrenceMonthly").css('display', 'none');
                                            $("#ddlRepeatMonthly").css('display', 'none');

                                            $("#lblOcurrenceMonth").css('display', 'none');
                                            $("#lblOcurrenceYear").css('display', '');


                                            $("#dtObligationNewDueDate").attr("disabled", "disabled");


                                            $("#divOcurrenceSummary").css('display', '');
                                            $("#obligationEditOcursumary").css('display', '');

                                            $("#aobligationRecNoneEdit").css('display', 'none');
                                            $("#aobligationRecEdit").css('display', '');
                                            $("#dvobligationOcurrenceEnd").css('display', 'none');
                                            $("#liObligationRecurrence").css('display', 'none');

                                        }

                                        $("#lblCTitleObli").text($("#lblContractTitle").text());

                                        if (catalogs.length > 0) {
                                            vCatalogCount = "Yes";
                                            $('#txtObligationProductsCount').val("Yes");
                                            document.getElementById('obligationcatalogDetailsTable').style.display = '';
                                            document.getElementById('NoObligationCatalog').style.display = 'none';
                                            for (var i = 0; i < catalogs.length; i++) {
                                                var str = "";
                                                var strCommitment = "";
                                                var strCom = "";

                                                var url = '<input type="checkbox" id="' + catalogs[i].RowKey + '" name="MultipleObligationCatalogs" onclick="checkMultipleObligationCatalogs(this);" value="' + catalogs[i].RowKey + '">&nbsp;<a  href="javascript:void(0)" onclick="ViewObligationCatalogDetail(\'' + catalogs[i].RowKey + '\')" class="linkText">' + catalogs[i].ObligationCatalogName + '</a>&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuRelatedObligationCatalogs"/>';

                                                var htmlContent = "<tr>";
                                                htmlContent += "<td><p id='ObligationCatalogID' style='display:none;'>" + catalogs[i].RowKey + "</p>";
                                                htmlContent += "<span id='ObligationCatalogTitle' style='display:none;'>" + catalogs[i].ObligationCatalogName + "</span>";
                                                htmlContent += "<span id='ObligationCatalogObligationText' style='display:none;'>" + catalogs[i].ObligationText + "</span>";
                                                htmlContent += "<span id=''ObligationCatalogUnits' style='display:none;'>" + catalogs[i].ObligationUnits + "</span>";
                                                htmlContent += "<span id=''ObligationCatalogQty' style='display:none;'>" + catalogs[i].ObligationQuantity + "</span>";

                                                htmlContent += "<i class='obligation_Products_Items'>" + url + "</i></td>";

                                                if (catalogs[i].ObligationQuantity != "" && catalogs[i].ObligationQuantity != null) {
                                                    htmlContent += "<td><span style='margin-left: 10px;float:left' id='ObligationQty" + catalogs[i].RowKey + "'>" + catalogs[i].ObligationQuantity + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationUnits + "</lable></td>";

                                                }
                                                else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';

                                                }

                                                if (catalogs[i].QuantityActual != "" && catalogs[i].QuantityActual != null && catalogs[i].QuantityActual != "null") {
                                                    htmlContent += "<td ><span style='margin-left: 10px;float:left' id='QuantityActual" + catalogs[i].RowKey + "'>" + catalogs[i].QuantityActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationUnits + "</lable></td>";

                                                }
                                                else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';

                                                }

                                                if (catalogs[i].ObligationAmount != "" && catalogs[i].ObligationAmount != null && catalogs[i].ObligationAmount != "0" && catalogs[i].ObligationAmount != 0) {
                                                    htmlContent += "<td ><span style='margin-left: 10px;float:left' id='ObligationAmount" + catalogs[i].RowKey + "'>" + catalogs[i].ObligationAmount + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationCurrency + "</lable></td>";

                                                }
                                                else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';

                                                }

                                                if (catalogs[i].AmountActual != "" && catalogs[i].AmountActual != null && catalogs[i].AmountActual != "0" && catalogs[i].AmountActual != 0) {
                                                    htmlContent += "<td ><span style='margin-left: 10px;float:left' id='AmountActual" + catalogs[i].RowKey + "'>" + catalogs[i].AmountActual + "</span>&nbsp;<lable style=''margin-left: 10px;float:left;'>" + catalogs[i].ObligationCurrency + "</lable></td>";

                                                }
                                                else {
                                                    htmlContent += '<td style="text-align: center;"> - </td>';

                                                }
                                                if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                                                    if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                                                        htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + catalogs[i].ObligationCatalogStatus + "</a></td>";
                                                    }
                                                    else {
                                                        htmlContent += "<td style='padding:2px;><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + catalogs[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                                                    }
                                                }
                                                else
                                                    htmlContent += "<td><a href='javascript:void(0);' class='wit-btn obli_status_chang'>" + catalogs[i].ObligationCatalogStatus + "</a></td>";



                                                //if ($("#hdnPermission").val() != 'View' && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null)
                                                //    htmlContent += "<td><a href='javascript:void(0);' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + catalogs[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                                                //else
                                                //    htmlContent += "<td><a href='javascript:void(0);' style='pointer-events: none;' onclick='checkObligationsstatusupdateNew(this);' class='wit-btn obli_status_chang openmenuObligationCatalogStatusSettings'>" + catalogs[i].ObligationCatalogStatus + "<img class='margin_left_5px' src='/Content/Images/card.png'></a></td>";
                                                htmlContent += "</tr>";
                                                $("#ulObligationCatalogBody").append(htmlContent);

                                            }
                                            $(".openmenuRelatedObligationCatalogs").contextMenu({ menu: 'dropdownMenuRelatedObligationCatalogs', leftButton: true }, function (action, el, pos) {
                                                contextMenuObligationCatalogs(action, el.parent("i").parent("td").parent("tr"), pos);
                                            });



                                            $(".openmenuObligationCatalogStatusSettings").contextMenu({
                                                menu: 'dropdownMenuObligationStatusSettings', leftButton: true
                                            }, function (action, el, pos) {
                                                contextMenuObligationCatalogStatusSettings(action, el.parent("tr"), pos);
                                            });



                                        }
                                        else {
                                            document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
                                            vCatalogCount = "No";
                                            $('#NoObligationCatalog').css('display', '');

                                            $('#txtObligationProductsCount').val("No");

                                            vExist = false;
                                        }
                                        if (vCatalogCount == "Yes") {
                                            $("#trObliFinShow").css('display', 'none');
                                            document.getElementById("cbObligationCatalogProductsSelect").checked = true;

                                            document.getElementById("cbObligationCatalogProductsSelect").disabled = true;
                                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                                return (n.RowKey == "10" && n.Status == "ON");
                                            });
                                            if (vAccFeat.length > 0) {
                                                $("#dvObligationCatalogProducts").css('display', '');
                                            }

                                        }

                                        var fDueDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                        { fDueDate = moment(new Date(obligationentity.DueDate)).format('MM/DD/YYYY'); }
                                        else { fDueDate = moment(new Date(obligationentity.DueDate)).utc().format(localStorage.AppDateFormat); }
                                        var oblnewdate1 = fDueDate;

                                        var fObligationEndDate = "";
                                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                        { fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).format('MM/DD/YYYY'); }
                                        else { fObligationEndDate = moment(new Date(obligationentity.ObligationEndDate)).utc().format(localStorage.AppDateFormat); }
                                        var oblnewdate2 = fObligationEndDate;


                                        $('#orepupdatesingle').text("");
                                        $('#orepupdaterecurrence').text("");
                                        $('#ornepupdatesingle').text("");
                                        $('#ornepupdaterecurrence').text("");

                                        $('#orepupdatesingle').text("(" + oblnewdate1 + ")");
                                        $('#orepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");
                                        $('#ornepupdatesingle').text("(" + oblnewdate1 + ")");
                                        $('#ornepupdaterecurrence').text("(" + oblnewdate1 + " to " + oblnewdate2 + ")");




                                        $(".validelement").each(function (index, element) {
                                            $(element).removeClass("error");
                                            $("#errormsg_" + element.id).remove();
                                        });


                                        $("#obligationnewheading").text("Edit Obligation");
                                        $("#addEditObligationNew").dialog("option", "title", "");
                                        $("#addEditObligationNew").dialog("open");

                                    }
                                });

                            }
                            else {
                                validateproducts = true;

                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Complete',
                                    type: 'POST',
                                    dataType: 'json',
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                    cache: false,
                                    success: function (person) {
                                        $('.ui-button-green-text').parent().removeAttr('disabled');
                                        GetObligationCatalogs();
                                    },
                                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                                });
                            }

                        }
                        else {
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Complete',
                                type: 'POST',
                                dataType: 'json',
                                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                                cache: false,
                                success: function (person) {
                                    $('.ui-button-green-text').parent().removeAttr('disabled');
                                    GetObligationCatalogs();
                                },
                                complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                            });
                        }


                        $("#obligationNewActions").css('display', 'none');

                    },
                    error: function (catalogs) {


                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationID + '&obligationstatus=' + 'Complete',
                            type: 'POST',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                            cache: false,
                            success: function (person) {
                                $('.ui-button-green-text').parent().removeAttr('disabled');
                                GetObligationCatalogs();
                            },
                            complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                        });

                    }
                });


                break;
            }
    }
}


function contextMenuObligationCatalogStatusSettings(action, el, pos) {

    switch (action) {
        case "Upcoming":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();

                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Upcoming',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });




                break;
            }
        case "Delayed":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();



                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Delayed',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });





                break;
            }
        case "Partial":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();



                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Partial',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });



                break;
            }
        case "Cancelled":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();



                $("#inprocessObligation").css('visibility', 'visible');
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs/updatecatalogstatus?catalogid=' + obligationID + '&status=' + 'Cancelled',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        $('.ui-button-green-text').parent().removeAttr('disabled');
                        getObligationCatalogsNew(vContractID, $("#hdnObligationUniqueId").text(), $("#hdnObligationRowKey").text());
                    },
                    complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
                });



                break;
            }
        case "Complete":
            {
                var obligationID = $(el).find("#ObligationCatalogID").text();


                $("#loadingPage").fadeIn();
                var catalogId = $(el).find("#ObligationCatalogID").text();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?catalogid=' + obligationID,
                    type: 'GET',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    "Content-Type": "application/json",
                    cache: false,
                    success: function (cataloentity) {


                        if ($('#hdnProductUpdates').text() == "EDIT") {
                            $('#hdnProductUpdates').text('');
                            $('#hdnProductUpdates').text('EDITCATALOG');
                        }


                        cataloentity.ObligationCatalogStatus = "Complete";

                        $('#obliCatalogQtyEditsummary').text('');

                        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
                        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
                        $("#txtObligationCatalogQtyNewEdit").val('');

                        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                        $("#txtObligationProductAmountNewActualEdit").val('');
                        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);

                        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')





                        $("#lblObligationCatalogCTitleEdit").text($("#lblContractTitle").text());
                        $("#txtObligationCatalogIDedit").val(cataloentity.RowKey);
                        $("#txtObligationCatalogNameedit").val(cataloentity.ObligationCatalogName);

                        if (cataloentity.ObligationUnits != "" && cataloentity.ObligationUnits != "--Select--" && cataloentity.ObligationUnits != null) {
                            $("#ddlObligationCatalogUnitsEdit").val(cataloentity.ObligationUnits);
                            $("#ddlObligationCatalogUnitsNewEdit").val(cataloentity.ObligationUnits);


                        }
                        else {
                            $("#ddlObligationCatalogUnitsEdit").val("0");
                            $("#ddlObligationCatalogUnitsNewEdit").val("0");


                        }

                        if (cataloentity.ObligationCatalogStatus != "" && cataloentity.ObligationCatalogStatus != null) {

                            if (cataloentity.ObligationCatalogStatus == "Complete") {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);

                                if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {

                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
                                }
                                else {
                                    $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
                                }

                                if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {

                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')


                                }
                                else {
                                    $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                    $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                                }




                            }
                            else {
                                $("#ddlObligationCatalogStatusEdit").val(cataloentity.ObligationCatalogStatus);
                                $("#txtObligationCatalogQtyNewEdit").val("");


                                $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                                $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                                $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')



                            }

                        }
                        else {
                            $("#ddlObligationCatalogStatusEdit").val(0);
                            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

                            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
                            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')

                        }


                        if (cataloentity.Description != "" && cataloentity.Description != null) {
                            $("#txtObligationCatalogDescEdit").val(cataloentity.Description);

                        }
                        else {
                            $("#txtObligationCatalogDescEdit").val("");

                        }


                        if (cataloentity.ObligationQuantity != "" && cataloentity.ObligationQuantity != null) {
                            $("#txtObligationCatalogQtyEdit").val(cataloentity.ObligationQuantity);

                        }
                        else {
                            $("#txtObligationCatalogQtyEdit").val("");

                        }

                        if (cataloentity.ObligationQtyType != "" && cataloentity.ObligationQtyType != null) {
                            $("#ddlObligationCatalogUnitTypeEdit").val(cataloentity.ObligationQtyType);

                        }
                        else {
                            $("#ddlObligationCatalogUnitTypeEdit").val(0);

                        }


                        //Newly Added Columns

                        if (cataloentity.QuantityActual != "" && cataloentity.QuantityActual != null) {
                            $("#txtObligationCatalogQtyNewEdit").val(cataloentity.QuantityActual);





                            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
                            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');





                            var string1 = "";
                            string1 = "Quantity Actual vs Expected, ";



                            if (parseInt(cataloentity.QuantityActual) >= parseInt(cataloentity.ObligationQuantity)) {
                                string1 += encodeURIComponent("+" + parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity));

                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_dec');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_act');

                            }
                            else {
                                string1 += parseInt(cataloentity.QuantityActual) - parseInt(cataloentity.ObligationQuantity);

                                $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_act');
                                $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_dec');
                            }

                            $("#obliCatalogQtyEditsummary").text(string1);

                        }
                        else {
                            $("#txtObligationCatalogQtyNewEdit").val("");
                            $("#obliCatalogQtyEditsummary").text("");


                        }

                        var text = cataloentity.ObligationCurrency;

                        if (text != "") {
                            $("#CurrencyEditExpected").text(text);

                            $("#CurrencyEditActual").text(text);
                        }
                        else if ($('#hdnContractCurrency').text() != "") {

                            $("#CurrencyEditExpected").text($('#hdnContractCurrency').text());

                            $("#CurrencyEditActual").text($('#hdnContractCurrency').text());
                        }
                        else {
                            $("#CurrencyEditExpected").text($('#hdnBaseCurrency').val());

                            $("#CurrencyEditActual").text($('#hdnBaseCurrency').val());
                        }



                        if (cataloentity.ObligationAmountType != "" && cataloentity.ObligationAmountType != null) {
                            $("#ddlObligationProductAmountTypeNewEdit").val(cataloentity.ObligationAmountType);

                        }
                        else {
                            $("#ddlObligationProductAmountTypeNewEdit").val(0);

                        }

                        if (cataloentity.ObligationAmount != "" && cataloentity.ObligationAmount != null && cataloentity.ObligationAmount != "0" && cataloentity.ObligationAmount != 0) {

                            $('#txtObligationProductAmountNewEdit').autoNumeric('set', cataloentity.ObligationAmount);

                        }
                        else {
                            $("#txtObligationProductAmountNewEdit").val("");

                        }


                        if (cataloentity.AmountActual != "" && cataloentity.AmountActual != null && cataloentity.AmountActual != "0" && cataloentity.AmountActual != 0) {

                            $('#txtObligationProductAmountNewActualEdit').autoNumeric('set', cataloentity.AmountActual);
                            var string1 = "";
                            string1 = "Amount Actual vs Expected, ";

                            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);



                            var currency1 = cataloentity.ObligationAmount;
                            var currency2 = cataloentity.AmountActual;


                            string1 = "Amount Actual vs Expected, ";


                            $('#catalogAmountsumaryTitleEdit').text(string1);
                            if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {


                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_act')

                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_act')

                            }
                            else {

                                var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));

                                $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);


                                $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_dec')
                                $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_act')
                                $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_dec')
                            }

                        }
                        else {
                            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
                            $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
                            $("#txtObligationProductAmountNewActualEdit").val("");
                            $('#catalogAmountsumaryValueEdit').text('');
                            $('#catalogAmountsumaryTitleEdit').text('');

                        }
                        if (cataloentity.ObligationCatalogStatus == "Complete") {
                            if ($('#txtObligationCatalogQtyEdit').val() != "") {
                                $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
                                $('#txtObligationCatalogQtyNewEdit').addClass('validelement');

                                $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
                                $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')

                            }

                            if ($('#txtObligationProductAmountNewEdit').val() != "") {
                                $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
                                $('#txtObligationProductAmountNewActualEdit').addClass('validelement');

                                $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
                                $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')

                            }
                        }



                        if (cataloentity.ObligationCatalogStatus == "Complete" || cataloentity.ObligationCatalogStatus == "Cancelled") {

                            if (cataloentity.CompletedDate !== null && cataloentity.CompletedDate !== "" && cataloentity.CompletedDate !== "null") {

                                var CDate = "";
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { CDate = moment(new Date(cataloentity.CompletedDate)).format('MM/DD/YYYY'); }
                                else { CDate = moment(new Date(cataloentity.CompletedDate)).format(localStorage.AppDateFormat); }


                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);


                            }
                            else {
                                var CDate = new Date();
                                CDate = formatDate(CDate);
                                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                                { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
                                else { CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat); }
                                $("#productcompleteddateEdit").css('display', '');
                                $('#dtObligationProductCompletedDateEdit').addClass('validelement');
                                $('#dtObligationProductCompletedDateEdit').addClass('validdate');
                                $('#dtObligationProductCompletedDateEdit').val(CDate);
                            }
                        }
                        else {
                            $("#productcompleteddateEdit").css('display', 'none');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validelement');
                            $('#dtObligationProductCompletedDateEdit').removeClass('validdate');
                            $('#dtObligationProductCompletedDateEdit').val("");
                        }




                        $(".validelement").each(function (index, element) {
                            $(element).removeClass("error");
                            $("#errormsg_" + element.id).remove();
                        });



                        $("#loadingPage").fadeOut();


                    },
                    complete: function () {
                        $("#loadingPage").fadeOut();
                    }
                });


                $("#obligationcatalogseditPopup").dialog("option", "title", "");
                $("#obligationcatalogseditPopup").dialog("open");
                break;
            }
    }
}









function updateObligationStatusRecurrenceNew(status, obligationId, obligationText, obligationStatus) {
    if (status == "SINGLE") {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + obligationId + '&obligationstatus=' + obligationStatus,
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            cache: false,
            success: function (person) {
                $('.ui-button-green-text').parent().removeAttr('disabled');

                GetObligationCatalogs();

            },
            complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
        });
    }
    else {

        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyText?strObligationText=' + obligationText + '&obligationstatus=' + obligationStatus,
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            cache: false,
            success: function (person) {
                $('.ui-button-green-text').parent().removeAttr('disabled');

                $("#obligationRecurrenceStatusEditPopup").dialog("close");
                GetObligationCatalogs();

            },
            complete: function () { $("#inprocessObligation").css('visibility', 'none'); }
        });

    }
}



function checkObligationsstatusupdateNew(obj) {
    var text = "MenuObligationStatus" + obj.text;
    $('#dropdownMenuObligationStatusSettings').find('li').each(function () {

        var id = $(this).attr('id');
        if (id == text) {
            $(this).css('display', 'none');
        }
        else {
            $(this).css('display', '');

        }
    });

}


var vObligationEditStatus = "";

$('#aobligationRecNoneEdit').click(function () {
    vObligationEditStatus = "CHANGERECURRENCE";
    $("#liObligationRecurrence").css('display', '');
    $("#divOcurrenceSummary").css('display', 'none');
    document.getElementById("ddlObligationOccurencess").disabled = false;
    document.getElementById("dtObligationNewDueDate").disabled = false;

    $("#aobligationRecNoneEdit").css('display', 'none');
    $("#aobligationRecEdit").css('display', 'none');
});

$('#aobligationRecEdit').click(function () {
    vObligationEditStatus = "EDITRECURRENCE";

    if ($("#ddlObligationOccurencess").val() == "None") {

        $("#liObligationRecurrence").css('display', '');
        $("#divOcurrenceSummary").css('display', 'none');
        document.getElementById("ddlObligationOccurencess").disabled = false;

    }
    else if ($("#ddlObligationOccurencess").val() == "Weekly") {
        $("#divObligationOcurrenceWeekly").css('display', '');
        $("#divObligationOcurrenceMonthly").css('display', 'none');
        $("#ddlRepeatMonthly").css('display', 'none');

        $("#lblOcurrenceMonth").css('display', 'none');
        $("#lblOcurrenceYear").css('display', 'none');

        $("#divOcurrenceSummary").css('display', '');
        $("#obligationEditOcursumary").css('display', 'none');
        document.getElementById("ddlObligationOccurencess").disabled = false;

        document.getElementById("dtObligationNewDueDate").disabled = false;



        $("#dvobligationOcurrenceEnd").css('display', '');
        $("#liObligationRecurrence").css('display', '');
    }
    else if ($("#ddlObligationOccurencess").val() == "Monthly") {
        $("#divObligationOcurrenceWeekly").css('display', 'none');
        $("#divObligationOcurrenceMonthly").css('display', '');
        $("#ddlRepeatMonthly").css('display', '');

        $("#lblOcurrenceMonth").css('display', '');
        $("#lblOcurrenceYear").css('display', 'none');

        $("#divOcurrenceSummary").css('display', '');
        $("#obligationEditOcursumary").css('display', 'none');
        document.getElementById("ddlObligationOccurencess").disabled = false;
        document.getElementById("dtObligationNewDueDate").disabled = false;


        $("#dvobligationOcurrenceEnd").css('display', '');
        $("#liObligationRecurrence").css('display', '');
    }
    else {
        $("#divObligationOcurrenceWeekly").css('display', 'none');
        $("#divObligationOcurrenceMonthly").css('display', '');
        $("#ddlRepeatMonthly").css('display', 'none');

        $("#lblOcurrenceMonth").css('display', 'none');
        $("#lblOcurrenceYear").css('display', '');

        $("#divOcurrenceSummary").css('display', '');
        $("#obligationEditOcursumary").css('display', 'none');

        document.getElementById("ddlObligationOccurencess").disabled = false;
        document.getElementById("dtObligationNewDueDate").disabled = false;


        $("#dvobligationOcurrenceEnd").css('display', '');
        $("#liObligationRecurrence").css('display', '');
    }


    $("#aobligationRecNoneEdit").css('display', 'none');
    $("#aobligationRecEdit").css('display', 'none');




});





function clearobligationproducts() {
    if ($('#txtObligationCatalogName').val() == "" || $('#txtObligationCatalogName').val() == null) {
        $('#txtSearchBoxProduct').val('');
        $('input:radio[name=ExtProducts]').attr('checked', false);
    }
    else {
        $('#txtSearchBoxProduct').val('');
    }

    // $('input:radio[name=ExtProducts]').attr('checked', false);
}

function clearObligationproductsmul() {
    $('#txtSearchBoxProductMul').val('');
    $('input:checkbox[name=ExtProductsMul]').removeAttr('checked');
}

function clearobligationcatalogs() {
    $('#ddlObligationCatalogStatus').val('Upcoming');
    $('#txtObligationCatalogName').val('');
    $('#txtObligationCatalogDesc').val('');
    $('#ddlObligationCatalogUnits').val('');
    $('#txtObligationCatalogQty').val('');
    $('#ddlObligationCatalogUnitType').val('0');

    $('#txtObligationCatalogQtyNew').val('');
    $('#ddlObligationCatalogUnitsNew').val('0');
    $('#trObligationActualQty').css('display', '');

    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });


    $("#txtObligationProductAmountNewActual").prop('disabled', true);
    $("#txtObligationCatalogQtyNew").prop('disabled', true);

    $("#txtObligationCatalogQtyNew").val('');
    $("#txtObligationProductAmountNewActual").val('');

    $('#txtObligationCatalogQtyNew').removeClass('validelement');
    $('#txtObligationProductAmountNewActual').removeClass('validelement');

    $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
    $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')

    $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
    $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')

    $('#obliCatalogQtysummary').text('');


    $('#catalogAmountsumaryTitle').text('');
    $('#catalogAmountsumaryValue').text('');

    $('#txtObligationProductAmountNew').val('');
    $('#txtObligationProductAmountNewActual').val('');
    $('#ddlObligationFinancialsAmountTypeActual').val('0');
    $('#trObligationAmountActual').css('display', '');
}


function clearobligationfinancials() {
    $('#ddlObligationFinancialsStatus').val('0');
    $('#txtObligationFinancialsName').val('');
    $('#txtObligationFinancialsDesc').val('');
    $('#txtObligationFinancialsAmount').val('');
    $('#ddlObligationFinancialsAmountType').val('0');
}





$('#addObligationFinancialsQuickpopup').click(function () {
    clearobligationfinancialsQuick();

});

$('#addObligationCatalogQuickpopup').click(function () {
    clearobligationcatalogsQuick();
});





function clearobligationcatalogsQuick() {
    $('#ddlObligationCatalogInlineUnitsType').val('0');
    $('#txtObligationCatalogTitleInline').val('');
    $('#txtObligationCatalogQtyInline').val('');
    $('#ddlObligationCatalogUnitsInline').val('0');
    $('#ddlObligationCatalogStatusInline').val('0');
}


function clearobligationfinancialsQuick() {
    $('#ddlObligationFinancialsInlineAmountType').val('0');
    $('#txtObligationFinancialsTitleInline').val('');
    $('#txtObligationFinancialAmountInline').val('');
    $('#ddlObligationFinancialsStatusInline').val('0');
}



function clearObligationFormDataNew() {

    vObligationFlaging = "";

    $('#ddlObligationStatus').val('Upcoming');

    $('#txtObligationProductsCount').val('');

    $('#dtObligationNewDueDate').val('');

    $('#txtObligationFinancialsCount').val('');

    $('#txtObligationNewID').val('');

    $('#txtObligationNewText').val('');

    $('#ddlObligationTypeNew').val('0');

    $('#ObligationNewTitle').val('');

    $('#txtObligationNewTitle').val('');
    $('#txtObligationNewDesc').val('');

    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "10" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        $('#trObliCatShow').css('display', '');
    }
    $('#trObliFinShow').css('display', 'none')



    $("#txtReminder1ObligationNew").val("");
    $("#txtReminder2ObligationNew").val("");
    $("#txtReminder3ObligationNew").val("");
    $("#ddlReminder1ObligationNew").val("before");
    $("#ddlReminder2ObligationNew").val("before");
    $("#ddlReminder3ObligationNew").val("before");




    $('#ddlObligationOccurencess').val('None');

    $('input:checkbox[name=ObligationFinancialCB]').attr('checked', false);

    $('input:checkbox[name=ObligationCatalogCB]').attr('checked', false);



    $('#ulObligationCatalogBody').empty();
    $('#ulObligationFinancialsBody').empty();
    $('#dvObligationCatalogProducts').css('display', 'none');
    $('#dvObligationCatalogFinancials').css('display', 'none');


    document.getElementById("cbObligationCatalogProductsSelect").disabled = false;
    document.getElementById("cbObligationCatalogFinancialsSelect").disabled = false;

    $('#imgObliga').attr("title", "Expand");
    $('#imgObliga').attr("src", "../Content/Images/e-open.png");

    $('#imgObliga1').attr("title", "Expand");
    $('#imgObliga1').attr("src", "../Content/Images/e-open.png");


    //$('#dvObliOccurrenceDates').css('display', 'none');
}

var multipleObligationNewChecks = "";
function checkMultipleObligationsNew(object) {
    var CatalogID = object.id
    var isChecked = object.checked;
    if (isChecked) {
        $("#obligationNewActions").css('display', '');

        multipleObligationNewChecks = multipleObligationNewChecks + ';' + CatalogID;
    } else {
        multipleObligationNewChecks = multipleObligationNewChecks.replace(';' + CatalogID, '');
    }

    if (multipleObligationNewChecks.trim() == "") {
        $("#obligationNewActions").css('display', 'none');

    }
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}




function contextMenuObligationNewMul(action, el, pos) {
    switch (action) {
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew?strObligationText=' + multipleObligationNewChecks,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     multipleObligationNewChecks = "";

                     GetObligationCatalogs();
                     $("#obligationNewActions").css('display', 'none');


                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "update":
            {
                $("input:radio[value='Upcoming']").attr('checked', true);
                showObligationStatusMultiple();
                break;
            }

    }
}




function checkMultipleMilestonesNewMul(object) {
    var hidecomplete = false;
    //manoj
    $.each($('input:checkbox[name="chkmilestone"]:checked'), function () {
        if (typeof (this) != 'undefined' && $.trim(this) != null) {
            if ($(this).hasClass("delmilestone") && (!hidecomplete)) {
                hidecomplete = true;
            }
        }
    });
    if (hidecomplete) {
        $("#limilestonecomplete").css("display", "none");
    } else {
        if (contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
            $("#limilestonecomplete").css("display", "none");
        } else if ($("#hdnPermission").val() == "Contribute" || $("#hdnPermission").val() == "Manage") {
            $("#limilestonecomplete").css("display", "");
        }
    }
    if ($('input:checkbox[name="chkmilestone"]:checked').length > 0) {
        $("#milestonesNewActions").css('display', '');
    } else {
        $("#milestonesNewActions").css('display', 'none');
    }
    //manoj
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}

function contextMenuMilestoneNewMul(action, el, pos) {
    switch (action) {
        case "delete":
            {
                swal({
                    title: '',
                    text: "Are you sure you want to '<span style=\"font-weight:700\">delete</span>' Items?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             //manoj
             var selectedmilestoneid = Getvaluebynameattr('chkmilestone');
             //manoj
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/milestonenew?milestoneids=' + selectedmilestoneid + '&contractid=' + vContractID,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     selectedmilestoneid = "";
                     BindMilestone(vContractID);
                     $("#milestonesNewActions").css('display', 'none');
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "update":
            {
                var selectedmilestoneid = Getvaluebynameattr('chkmilestone');
                var formDataStatusMile = new FormData();
                formDataStatusMile.append("MilestoneIDs", selectedmilestoneid);
                $("#loadingPage").fadeIn();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/changestatus?status=Complete',
                    type: 'PUT',
                    dataType: 'json',
                    data: formDataStatusMile,
                    contentType: false,
                    processData: false,
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (result) {
                        $("#loadingPage").fadeOut();
                        selectedmilestoneid = "";
                        BindMilestone(vContractID);
                        $("#milestonesNewActions").css('display', 'none');
                    },
                    error: function (result) {
                        $("#loadingPage").fadeOut();
                        selectedmilestoneid = "";
                        BindMilestone(vContractID);
                    }
                });

                break;
            }

    }
}



function showMilestoneStatusMultiple() {
    $('#addEditMilestoneStatusMultiple').dialog('open');
}



function showObligationStatusMultiple() {
    $('#addEditStatusMultiple').dialog('open');
}


function changestatusmultiple() {
    var selectedValue = decodeURI($("input:radio[name=rdobligationstatus]:checked").val());
    if (selectedValue == "undefined" || selectedValue == "0" || selectedValue == "") {
        swal("", "Select Status");
        return false;
    } else {
        changestatusM();
        return true;
    }
}



function changemilestonestatusmultiple() {
    var selectedValue = decodeURI($("input:radio[name=rdmilestonestatus]:checked").val());
    if (selectedValue == "undefined" || selectedValue == "0" || selectedValue == "") {
        swal("", "Select Status");
        return false;
    } else {
        changemilestonestatusM();
        return true;
    }
}





function changemilestonestatusM() {
    $("#loadingPage").fadeIn();
    var selectedmilestoneid = Getvaluebynameattr('chkmilestone');
    var formDataStatusMile = new FormData();
    formDataStatusMile.append("MilestoneIDs", selectedmilestoneid);
    var stat = decodeURI($("input:radio[name=rdmilestonestatus]:checked").val());
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/changestatus?status=' + stat,
        type: 'PUT',
        dataType: 'json',
        data: formDataStatusMile,
        contentType: false,
        processData: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        cache: false,
        success: function (result) {
            $("#loadingPage").fadeOut();
            selectedmilestoneid = "";
            BindMilestone(vContractID);

            $("#milestonesNewActions").css('display', 'none');
            $('#addEditMilestoneStatusMultiple').dialog('close');

        },
        error: function (result) {
            $("#loadingPage").fadeOut();
        }
    });
}







function changestatusM() {
    $("#loadingPage").fadeIn();
    var stat = decodeURI($("input:radio[name=rdobligationstatus]:checked").val());
    var formDataStatus = new FormData();
    formDataStatus.append("ObligationIDs", multipleObligationNewChecks);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/changestatus?status=' + stat,
        type: 'PUT',
        data: formDataStatus,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        cache: false,
        contentType: false,
        processData: false,
        success: function (result) {
            $("#loadingPage").fadeOut();
            multipleObligationNewChecks = "";

            GetObligationCatalogs();
            $("#obligationNewActions").css('display', 'none');
            $('#addEditStatusMultiple').dialog('close');

        },
        error: function (result) {
            $("#loadingPage").fadeOut();
        }
    });
}

function BindProjects(items) {
    $("#tblRelatedProjects").empty();
    if (items.indexOf(';') >= 0) {
        var vrelated = "";
        $.each(items.split(";"), function (a, itemname) {
            vrelated += '<tr>';
            vrelated += '<td height="10" align="left" valign="top" class="content-text clr999"><a href="javascript:void(0);" onclick="ViewProject(\'' + itemname.split(':')[0] + '\')">' + itemname.split(':')[0] + '</a></td>';
            if (itemname.split(':')[1] == "Default Task") {
                vrelated += '<td height="10" align="left" valign="top" class="content-text">(' + itemname.split(':')[1] + ')</td>';
            } else {
                vrelated += '<td height="10" align="left" valign="top" class="content-text"><a href="javascript:void(0);" onclick="ViewProjectTask(\'' + itemname + '\')">(' + itemname.split(':')[1] + ')</a></td>';
            }
            vrelated += '</tr>';
        });
        $("#tblRelatedProjects").html(vrelated);
    } else {
        var vrelated1 = "";
        vrelated1 = '<tr>';
        vrelated1 += '<td height="10" align="left" valign="top" class="content-text clr999"><a href="javascript:void(0);" onclick="ViewProject(\'' + items.split(':')[0] + '\')">' + items.split(':')[0] + '</a></td>';
        if (items.split(':')[1] == "Default Task") {
            vrelated1 += '<td height="10" align="left" valign="top" class="content-text">(' + items.split(':')[1] + ')</td>';
        } else {
            vrelated1 += '<td height="10" align="left" valign="top" class="content-text"><a href="javascript:void(0);" onclick="ViewProjectTask(\'' + items + '\')">(' + items.split(':')[1] + ')</a></td>';
        }
        vrelated1 += '</tr>';
        $("#tblRelatedProjects").html(vrelated1);
    }
}

function ViewProject(projectname) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project?projectName=' + projectname.trim(),
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (entity) {
            $("#dvProjectID").html(entity.ProjectID);
            $("#dvProjectName").html(entity.ProjectName);
            if (entity.Description == null || entity.Description == "") {
                $("#dvDescription").html("-");
            } else {
                $("#dvDescription").html(entity.Description);
            }
            $("#dvStatus").html(entity.Status);
            if (entity.StartDate == null || entity.StartDate == "") {
                $("#dvStartDate").html("-")
            }
            else {
                var fStartDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fStartDate = moment(new Date(entity.StartDate)).format('MM/DD/YYYY'); }
                else { fStartDate = moment(new Date(entity.StartDate)).format(localStorage.AppDateFormat); }
                $("#dvStartDate").html(fStartDate);
            }
            if (entity.EndDate == null || entity.EndDate == "") {
                $("#dvEndDate").html("-")
            }
            else {
                var fEndDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fEndDate = moment(new Date(entity.EndDate)).format('MM/DD/YYYY'); }
                else { fEndDate = moment(new Date(entity.EndDate)).format(localStorage.AppDateFormat); }
                $("#dvEndDate").html(fEndDate);
            }
            if (entity.SubAccount == null || entity.SubAccount == "") {
                $("#dvSubAccount").html("-")
            }
            else {
                $("#dvSubAccount").html(entity.SubAccount);
            }
            $("#dvProjectManager").html(entity.ProjectManager);
            $("#dvBusinessManager").html(entity.BusinessManager);
            if (entity.CustomerID == null || entity.CustomerID == "") {
                $("#dvCustomerID").html("-")
            }
            else {
                $("#dvCustomerID").html(entity.CustomerID);
            }
            if (entity.Country == "--Select--") {
                $("#dvCountry").html("-");
            } else {
                $("#dvCountry").html(entity.Country);
            }
            if (entity.Division == null || entity.Division == "") {
                $("#dvDivision").html("-")
            }
            else {
                $("#dvDivision").html(entity.Division);
            }
            if (entity.PracticeArea == null || entity.PracticeArea == "") {
                $("#dvPracticeArea").html("-")
            }
            else {
                $("#dvPracticeArea").html(entity.PracticeArea);
            }

            $("#dvViewProject").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();
            }
    });
}

function ViewProjectTask(taskid) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/projecttaskbytaskid?taskid=' + taskid.trim(),
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (entity) {
            $("#dvTaskID").html(entity.TaskID);
            $("#dvTaskDescription").html(entity.TaskDescription);
            if (entity.StartDate == null || entity.StartDate == "") {
                $("#dvManager").html("-");
            } else {
                $("#dvManager").html(entity.Manager);
            }
            if (entity.StartDate == null || entity.StartDate == "") {
                $("#dvTaskStartDate").html("-");
            }
            else {
                var fStartDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fStartDate = moment(new Date(entity.StartDate)).format('MM/DD/YYYY'); }
                else { fStartDate = moment(new Date(entity.StartDate)).format(localStorage.AppDateFormat); }
                $("#dvTaskStartDate").html(fStartDate);
            }
            if (entity.EndDate == null || entity.EndDate == "") {
                $("#dvTaskEndDate").html("-");
            }
            else {
                var fEndDate = "";
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { fEndDate = moment(new Date(entity.EndDate)).format('MM/DD/YYYY'); }
                else { fEndDate = moment(new Date(entity.EndDate)).format(localStorage.AppDateFormat); }
                $("#dvTaskEndDate").html(fEndDate);
            }
            $("#dvViewProjectTask").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();
            }
    });
}


function BindUnitTypes() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/unittypes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            $(documenttypes).each(function (i, item) {
                $("#ddlObligationCatalogUnits").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlObligationCatalogUnitsInline").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlObligationCatalogUnitsEdit").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlProductUnits").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlObligationCatalogUnitsNew").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
                $("#ddlObligationCatalogUnitsNewEdit").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>");
            });
        }
    });
}


$("#txtObligationCatalogQty").focusout(function () {

    if ($("#txtObligationCatalogQty").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatus").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationCatalogQtyNew").prop('disabled', false);
            $('#txtObligationCatalogQtyNew').addClass('validelement');

            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_enable')
        }
        else {
            $("#txtObligationCatalogQtyNew").prop('disabled', true);
            $('#txtObligationCatalogQtyNew').removeClass('validelement');
            $("#txtObligationCatalogQtyNew").val('');
            $('#txtObligationProductAmountNewActual').removeClass('validelement');
            $("#txtObligationProductAmountNewActual").val('');
            $("#txtObligationCatalogQtyNew").prop('disabled', true);

            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')

            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')

        }
    }
    else {
        $("#txtObligationCatalogQtyNew").prop('disabled', true);
        $('#txtObligationCatalogQtyNew').removeClass('validelement');
        $("#txtObligationCatalogQtyNew").val('');

        $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')
    }

});


$("#txtObligationProductAmountNew").focusout(function () {


    if ($("#txtObligationProductAmountNew").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatus").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationProductAmountNewActual").prop('disabled', false);
            $('#txtObligationProductAmountNewActual').addClass('validelement');


            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_enable')

        }
        else {
            $("#txtObligationCatalogQtyNew").prop('disabled', true);
            $('#txtObligationCatalogQtyNew').removeClass('validelement');
            $("#txtObligationCatalogQtyNew").val('');

            $('#txtObligationProductAmountNewActual').removeClass('validelement');
            $("#txtObligationProductAmountNewActual").val('');
            $("#txtObligationProductAmountNewActual").prop('disabled', true);

            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')

            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')


        }
    }
    else {
        $('#txtObligationProductAmountNewActual').removeClass('validelement');
        $("#txtObligationProductAmountNewActual").val('');
        $("#txtObligationProductAmountNewActual").prop('disabled', true);

        $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')
    }


});


$("#ddlObligationCatalogStatus").change(function (obj) {

    var catlogStatus = $("#ddlObligationCatalogStatus").val();

    if (catlogStatus == "Complete") {

        var CDate = new Date();
        CDate = formatDate(CDate);

        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
        else { CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat); }
        $("#productcompleteddate").css('display', '');
        $('#dtObligationProductCompletedDate').addClass('validelement');
        $('#dtObligationProductCompletedDate').addClass('validdate');
        $('#dtObligationProductCompletedDate').val(CDate);

        if ($('#txtObligationCatalogQty').val() != "") {
            $("#txtObligationCatalogQtyNew").prop('disabled', false);
            $('#txtObligationCatalogQtyNew').addClass('validelement');

            $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNew').addClass('obli_catalog_enable')

        }

        if ($('#txtObligationProductAmountNew').val() != "") {
            $("#txtObligationProductAmountNewActual").prop('disabled', false);
            $('#txtObligationProductAmountNewActual').addClass('validelement');

            $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActual').addClass('obli_catalog_enable')

        }
    }
    else if (catlogStatus == "Cancelled") {

        var CDate = new Date();
        CDate = formatDate(CDate);

        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
        else { CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat); }

        $("#productcompleteddate").css('display', '');
        $('#dtObligationProductCompletedDate').addClass('validelement');
        $('#dtObligationProductCompletedDate').addClass('validdate');
        $('#dtObligationProductCompletedDate').val(CDate);



        $("#txtObligationProductAmountNewActual").prop('disabled', true);
        $("#txtObligationCatalogQtyNew").prop('disabled', true);

        $("#txtObligationCatalogQtyNew").val('');
        $("#txtObligationProductAmountNewActual").val('');

        $('#txtObligationCatalogQtyNew').removeClass('validelement');
        $('#txtObligationProductAmountNewActual').removeClass('validelement');

        $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')

        $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')


    }
    else {

        $("#productcompleteddate").css('display', 'none');
        $('#dtObligationProductCompletedDate').removeClass('validelement');
        $('#dtObligationProductCompletedDate').removeClass('validdate');
        $('#dtObligationProductCompletedDate').val("");


        $("#txtObligationProductAmountNewActual").prop('disabled', true);
        $("#txtObligationCatalogQtyNew").prop('disabled', true);

        $("#txtObligationCatalogQtyNew").val('');
        $("#txtObligationProductAmountNewActual").val('');

        $('#txtObligationCatalogQtyNew').removeClass('validelement');
        $('#txtObligationProductAmountNewActual').removeClass('validelement');

        $('#txtObligationProductAmountNewActual').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActual').addClass('obli_catalog_disable')

        $('#txtObligationCatalogQtyNew').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNew').addClass('obli_catalog_disable')

        $('#obliCatalogQtysummary').text('');
        $('#catalogAmountsumaryTitle').text('');
        $('#catalogAmountsumaryValue').text('');

    }

});

$("#ddlObligationStatus").change(function (obj) {

    var obligationStatus = $("#ddlObligationStatus").val();

    if (obligationStatus == "Complete" || obligationStatus == "Cancelled") {

        var CDate = new Date();
        CDate = formatDate(CDate);

        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
        else { CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat); }
        $("#ulObliCompletedate").css('display', '');
        $('#dtObligationNewCompletedDate').addClass('validelement');
        $('#dtObligationNewCompletedDate').addClass('validdate');
        $('#dtObligationNewCompletedDate').val(CDate);

    }
    else {
        $("#ulObliCompletedate").css('display', 'none');
        $('#dtObligationNewCompletedDate').removeClass('validelement');
        $('#dtObligationNewCompletedDate').removeClass('validdate');
        $('#dtObligationNewCompletedDate').val("");

    }

});



$("#ddlMilestoneNewStatus").change(function (obj) {
    var milestoneStatus = $("#ddlMilestoneNewStatus").val();

    if (milestoneStatus == "Complete") {
        var CDate = new Date();
        CDate = formatDate(CDate);
        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
        else { CDate = moment(new Date(CDate)).utc().format(localStorage.AppDateFormat); }

        $("#ulMilestoneNewCompletedDate").css('display', '');
        $('#dtMilestoneNewCompletedDate').addClass('validelement');
        $('#dtMilestoneNewCompletedDate').addClass('validdate');
        $('#dtMilestoneNewCompletedDate').val(CDate);

    }
    else {

        $("#ulMilestoneNewCompletedDate").css('display', 'none');
        $('#dtMilestoneNewCompletedDate').removeClass('validelement');
        $('#dtMilestoneNewCompletedDate').removeClass('validdate');
        $('#dtMilestoneNewCompletedDate').val("");
    }

})



$("#ddlObligationCatalogUnits").change(function (obj) {
    if ($('#ddlObligationCatalogUnits').val() != "0") {
        $('#ddlObligationCatalogUnitsNew').val($('#ddlObligationCatalogUnits').val())
    }
    else {
        $('#ddlObligationCatalogUnitsNew').val("0");
    }
});



$("#ddlObligationCatalogUnitsEdit").change(function (obj) {
    if ($('#ddlObligationCatalogUnitsEdit').val() != "0") {
        $('#ddlObligationCatalogUnitsNewEdit').val($('#ddlObligationCatalogUnitsEdit').val())
    }
    else {
        $('#ddlObligationCatalogUnitsNewEdit').val("0");
    }
});



$("#txtObligationCatalogQtyEdit").focusout(function () {

    if ($("#txtObligationCatalogQtyEdit").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatusEdit").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');

            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')
        }
        else {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
            $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
            $("#txtObligationCatalogQtyNewEdit").val('');
            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
            $("#txtObligationProductAmountNewActualEdit").val('');
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);

            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')

        }
    }
    else {
        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
        $("#txtObligationCatalogQtyNewEdit").val('');

        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')
    }

});


$("#txtObligationProductAmountNewEdit").focusout(function () {


    if ($("#txtObligationProductAmountNewEdit").val() != "") {
        var catlogStatus = $("#ddlObligationCatalogStatusEdit").val();
        if (catlogStatus == "Complete") {
            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');


            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')

        }
        else {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);
            $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
            $("#txtObligationCatalogQtyNewEdit").val('');

            $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
            $("#txtObligationProductAmountNewActualEdit").val('');
            $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);

            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')

            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable')


        }
    }
    else {
        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');
        $("#txtObligationProductAmountNewActualEdit").val('');
        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);

        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable')
        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable')
    }


});

$("#txtObligationCatalogQtyNew").focusout(function () {

    if ($("#txtObligationCatalogQtyNew").val() != "") {
        var string1 = "";
        string1 = "Quantity Actual vs Expected, ";



        if (parseInt($("#txtObligationCatalogQtyNew").val()) >= parseInt($("#txtObligationCatalogQty").val())) {
            string1 += "+" + parseInt($("#txtObligationCatalogQtyNew").val()) - parseInt($("#txtObligationCatalogQty").val());

            $('#obliCatalogQtysummary').removeClass('oblig_cat_sum_dec')
            $('#obliCatalogQtysummary').addClass('oblig_cat_sum_act')

        }
        else {
            string1 += parseInt($("#txtObligationCatalogQtyNew").val()) - parseInt($("#txtObligationCatalogQty").val());

            $('#obliCatalogQtysummary').removeClass('oblig_cat_sum_act')
            $('#obliCatalogQtysummary').addClass('oblig_cat_sum_dec')
        }

        $("#obliCatalogQtysummary").text(string1)

    }
    else {
        $("#obliCatalogQtysummary").text("");
    }

});


$("#txtObligationProductAmountNewActual").focusout(function () {

    if ($("#txtObligationProductAmountNewActual").val() != "") {
        var string1 = "";
        var currency1 = $("#txtObligationProductAmountNew").val();
        var currency2 = $("#txtObligationProductAmountNewActual").val();
        currency1 = currency1.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');
        currency2 = currency2.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');

        string1 = "Amount Actual vs Expected, ";

        $('#catalogAmountsumaryTitle').text(string1);

        if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {


            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
            $('#catalogAmountsumaryValue').autoNumeric('set', diff);
            $('#catalogAmountsumaryValue').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryValue').addClass('oblig_cat_sum_act')

            $('#catalogAmountsumaryTitle').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitle').addClass('oblig_cat_sum_act')

        }
        else {

            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));

            $('#catalogAmountsumaryValue').autoNumeric('set', diff);


            $('#catalogAmountsumaryValue').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryValue').addClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitle').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryTitle').addClass('oblig_cat_sum_dec')
        }


    }
    else {

        $('#catalogAmountsumaryValue').text('');
        $('#catalogAmountsumaryTitle').text('');
    }


});

function caluculatedifference(currency1, currency2) {

    var c1 = currency1.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');
    var c2 = currency2.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');

    var res = Number(parseFloat(c2).toFixed(2)) - Number(parseFloat(c1).toFixed(2));

    return res;
}

$("#txtObligationCatalogQtyNewEdit").focusout(function () {

    if ($("#txtObligationCatalogQtyNewEdit").val() != "") {
        var string1 = "";
        string1 = "Quantity Actual vs Expected, ";



        if (parseInt($("#txtObligationCatalogQtyNewEdit").val()) >= parseInt($("#txtObligationCatalogQtyEdit").val())) {
            string1 += "+" + parseInt($("#txtObligationCatalogQtyNewEdit").val()) - parseInt($("#txtObligationCatalogQtyEdit").val());

            $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_dec')
            $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_act')

        }
        else {
            string1 += parseInt($("#txtObligationCatalogQtyNewEdit").val()) - parseInt($("#txtObligationCatalogQtyEdit").val());

            $('#obliCatalogQtyEditsummary').removeClass('oblig_cat_sum_act')
            $('#obliCatalogQtyEditsummary').addClass('oblig_cat_sum_dec')
        }

        $("#obliCatalogQtyEditsummary").text(string1)

    }
    else {
        $("#obliCatalogQtyEditsummary").text("");
    }

});


$("#txtObligationProductAmountNewActualEdit").focusout(function () {

    if ($("#txtObligationProductAmountNewActualEdit").val() != "") {
        var string1 = "";
        var currency1 = $("#txtObligationProductAmountNewEdit").val();
        var currency2 = $("#txtObligationProductAmountNewActualEdit").val();
        currency1 = currency1.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');
        currency2 = currency2.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, '');

        string1 = "Amount Actual vs Expected, ";

        $('#catalogAmountsumaryTitleEdit').text(string1);

        if (Number(parseFloat(currency2).toFixed(2)) >= Number(parseFloat(currency1).toFixed(2))) {


            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));
            $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);
            $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_act')

            $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_act')

        }
        else {

            var diff = Number(parseFloat(currency2).toFixed(2)) - Number(parseFloat(currency1).toFixed(2));

            $('#catalogAmountsumaryValueEdit').autoNumeric('set', diff);


            $('#catalogAmountsumaryValueEdit').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryValueEdit').addClass('oblig_cat_sum_dec')
            $('#catalogAmountsumaryTitleEdit').removeClass('oblig_cat_sum_act')
            $('#catalogAmountsumaryTitleEdit').addClass('oblig_cat_sum_dec')
        }


    }
    else {
        $('#catalogAmountsumaryValueEdit').text('');
        $('#catalogAmountsumaryTitleEdit').text('');

    }


});








$("#ddlObligationCatalogStatusEdit").change(function (obj) {

    var catlogStatus = $("#ddlObligationCatalogStatusEdit").val();
    if (catlogStatus == "Complete") {

        var CDate = new Date();
        CDate = formatDate(CDate);

        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
        else { CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat); }

        $("#productcompleteddateEdit").css('display', '');
        $('#dtObligationProductCompletedDateEdit').addClass('validelement');
        $('#dtObligationProductCompletedDateEdit').addClass('validdate');
        $('#dtObligationProductCompletedDateEdit').val(CDate);

        if ($('#txtObligationCatalogQtyEdit').val() != "") {
            $("#txtObligationCatalogQtyNewEdit").prop('disabled', false);
            $('#txtObligationCatalogQtyNewEdit').addClass('validelement');

            $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_disable')
            $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_enable')

        }

        if ($('#txtObligationProductAmountNewEdit').val() != "") {
            $("#txtObligationProductAmountNewActualEdit").prop('disabled', false);
            $('#txtObligationProductAmountNewActualEdit').addClass('validelement');

            $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_disable')
            $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_enable')

        }
    }
    else if (catlogStatus == "Cancelled") {

        var CDate = new Date();
        CDate = formatDate(CDate);

        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
        { CDate = moment(new Date(CDate)).format('MM/DD/YYYY'); }
        else { CDate = moment(new Date(CDate)).format(localStorage.AppDateFormat); }

        $("#productcompleteddateEdit").css('display', '');
        $('#dtObligationProductCompletedDateEdit').addClass('validelement');
        $('#dtObligationProductCompletedDateEdit').addClass('validdate');
        $('#dtObligationProductCompletedDateEdit').val(CDate);

        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);

        $("#txtObligationCatalogQtyNewEdit").val('');
        $("#txtObligationProductAmountNewActualEdit").val('');

        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');

        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable');
        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable');

        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable');
        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable');
    }
    else {

        $("#productcompleteddateEdit").css('display', 'none');
        $('#dtObligationProductCompletedDateEdit').removeClass('validelement');
        $('#dtObligationProductCompletedDateEdit').removeClass('validdate');
        $('#dtObligationProductCompletedDateEdit').val("");



        $("#txtObligationProductAmountNewActualEdit").prop('disabled', true);
        $("#txtObligationCatalogQtyNewEdit").prop('disabled', true);

        $("#txtObligationCatalogQtyNewEdit").val('');
        $("#txtObligationProductAmountNewActualEdit").val('');

        $('#txtObligationCatalogQtyNewEdit').removeClass('validelement');
        $('#txtObligationProductAmountNewActualEdit').removeClass('validelement');

        $('#txtObligationProductAmountNewActualEdit').removeClass('obli_catalog_enable');
        $('#txtObligationProductAmountNewActualEdit').addClass('obli_catalog_disable');

        $('#txtObligationCatalogQtyNewEdit').removeClass('obli_catalog_enable');
        $('#txtObligationCatalogQtyNewEdit').addClass('obli_catalog_disable');
        //manoj
        $("#obliCatalogQtyEditsummary").text("");
        $('#catalogAmountsumaryTitleEdit').text('');
        $('#catalogAmountsumaryValueEdit').text('');
        //manoj

    }



});


function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

$('#cbObligationCatalogProductsSelect').click(function () {

    if ($("#cbObligationCatalogProductsSelect").is(':checked'))
        $("#trObliFinShow").css('display', 'none');  // checked
    else
        $("#trObliFinShow").css('display', 'none');
});

$('#cbObligationCatalogFinancialsSelect').click(function () {

    if ($("#cbObligationCatalogFinancialsSelect").is(':checked'))
        $("#trObliCatShow").css('display', 'none');  // checked
    else
        $("#trObliCatShow").css('display', '');
});



$('#btnNewNotes').click(function () {

    $(".validelement").each(function (index, element) {

        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $(".validNicEdit").each(function (index, element) {

        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });


    var vActiveParticipants = contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees + ";" + contractItem.Requestor;
    //*Harshitha

    var regexp = new RegExp(escapeRegExp(localStorage.UserName), 'g');
    vActiveParticipants = vActiveParticipants.replace(regexp, '');
    $("#ddlSendTo option").removeClass('hideUserlocal');
    //$("#ddlSendTo option[value='" + localStorage.UserName + "']").addClass('hideUserlocal');
    $("#ddlSendTo option").each(function (index, element) {
        if (element.value == localStorage.UserName) {
            $(element).addClass('hideUserlocal');
        }
    });


    var nicInstance = nicEditors.findEditor('txtNotes');
    nicInstance.setContent('');
    NicEditorPasteEvent();
    $("#txtNoteID").val("");
    GetValuesAndAutoPopulate("ddlSendTo", vActiveParticipants);

    $("#dvAddNotes").dialog("option", "title", "Add a Note");
    $("#dvAddNotes").dialog("open");
});

function GetNoteDetail(noteid) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/notes?noteid=' + noteid,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $("#txtNoteID").val(data.RowKey);
            //*Harshitha
            var nicInstance = nicEditors.findEditor('txtNotes');
            nicInstance.setContent(data.Note);
            NicEditorPasteEvent();
            GetValuesAndAutoPopulate("ddlSendTo", data.SendTo);

            $("#loadingPage").fadeOut();
            $("#dvAddNotes").dialog("option", "title", "Edit a Note");
            $("#dvAddNotes").dialog("open");
        },
        error: function (request) {
            $("#loadingPage").fadeOut();
        }
    });
}

function DeleteNote(noteid) {
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span>?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/notes?noteid=' + noteid + '&username=' + localStorage.UserName,
                 type: 'DELETE',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey },
                 cache: false,
                 success: function (data) {
                     $("#loadingPage").fadeOut();
                     BindNotes(vContractID);
                 },
                 error: function (request) {
                     $("#loadingPage").fadeOut();
                     BindNotes(vContractID);
                 }
             });
         }
         return;
     });

}

function AddNotes() {
    if (requiredValidator('dvAddNotes')) {
        //*Harshitha 
        var nicInstance = nicEditors.findEditor('txtNotes');
        var vNotesText = CleanWordFormatFromHTML(nicInstance.getContent());
        if (vNotesText.length <= 26500) {
            $("#loadingPage").fadeIn();
            vNotesText = $('<div/>').text(vNotesText).html();
            var globalConOwners = getGlobalContractOwners();
            var toRemove = (contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees
                + ";" + contractItem.ContractAreaAdministrators + ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadOnlyPermissions
                + ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager + ";" + globalConOwners).split(';');
            toRemove = $.map(toRemove, $.trim);
            var myArray = $('#ddlSendTo').val();
            if (myArray == null)
                myArray = [];
            myArray = myArray.filter(function (el) {
                return toRemove.indexOf(el) < 0;
            });
            var vAllowToAdd = true;
            if (myArray.length > 0) {
                swal({
                    title: '',
                    text: "'" + myArray.join(', ') + "'  do not have access to this contract. Do you want to provide access?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
          function (confirmed) {
              if (confirmed) {
                  var sendTo = '';
                  $('#ddlSendTo_chosen').find('.chosen-choices li').find('span').each(function () {
                      if (sendTo == '') {
                          sendTo = $(this).text();
                      }
                      else {
                          sendTo += "; " + $(this).text();
                      }
                  });
                  vContractID = getParameterByName("ContractID");
                  var vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes';
                  var vType = 'POST';
                  if ($("#txtNoteID").val() != "") {
                      vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes?noteid=' + $("#txtNoteID").val();
                      vType = 'PUT';
                  }
                  $.ajax({
                      url: vUrl,
                      type: vType,
                      dataType: 'json',
                      headers: { 'eContracts-ApiKey': localStorage.APIKey },
                      data: {
                          ContractID: vContractID,
                          Note: vNotesText,
                          SendTo: sendTo,
                          CreatedBy: localStorage.UserName
                      },
                      cache: false,
                      success: function (person) {

                          BindNotes(vContractID);
                          if (myArray.length > 0) {
                              var ReadOnlyUsers = contractItem.ReadOnlyPermissions;
                              if (ReadOnlyUsers == '')
                                  ReadOnlyUsers = myArray.join('; ');
                              else
                                  ReadOnlyUsers += "; " + myArray.join('; ');
                              contractItem.ReadOnlyPermissions = ReadOnlyUsers;

                              $.ajax({
                                  url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/permission',
                                  type: 'PUT',
                                  dataType: 'json',
                                  headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                                  data: {

                                      ReadOnlyPermissions: ReadOnlyUsers,
                                      ReadWritePermissions: contractItem.ReadWritePermissions,
                                      FullControlPermissions: contractItem.FullControlPermissions,
                                      ModifiedBy: localStorage.UserName,
                                      CustomPermission: "Yes"
                                  },
                                  cache: false,
                                  success: function (person) {
                                  }
                              });
                          }
                          $("#dvAddNotes").dialog("close");
                      },
                      complete: function () {
                          $("#loadingPage").fadeOut();
                      }
                  });
              }
              else {
                  $("#loadingPage").fadeOut();
              }
              return;
          });

            }
            else {
                if (vAllowToAdd) {
                    var sendTo = '';
                    $('#ddlSendTo_chosen').find('.chosen-choices li').find('span').each(function () {
                        if (sendTo == '') {
                            sendTo = $(this).text();
                        }
                        else {
                            sendTo += "; " + $(this).text();
                        }
                    });
                    vContractID = getParameterByName("ContractID");
                    var vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes';
                    var vType = 'POST';
                    if ($("#txtNoteID").val() != "") {
                        vUrl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes?noteid=' + $("#txtNoteID").val();
                        vType = 'PUT';
                    }
                    $.ajax({
                        url: vUrl,
                        type: vType,
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        data: {
                            ContractID: vContractID,
                            Note: vNotesText,
                            SendTo: sendTo,
                            CreatedBy: localStorage.UserName,
                            CustomPermission: "Yes"
                        },
                        cache: false,
                        success: function (person) {
                            BindNotes(vContractID);
                            if (myArray.length > 0) {
                                var ReadOnlyUsers = contractItem.ReadOnlyPermissions;
                                if (ReadOnlyUsers == '')
                                    ReadOnlyUsers = myArray.join('; ');
                                else
                                    ReadOnlyUsers += "; " + myArray.join('; ');
                                contractItem.ReadOnlyPermissions = ReadOnlyUsers;

                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/permission',
                                    type: 'PUT',
                                    dataType: 'json',
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                                    data: {
                                        ReadOnlyPermissions: ReadOnlyUsers,
                                        ReadWritePermissions: contractItem.ReadWritePermissions,
                                        FullControlPermissions: contractItem.FullControlPermissions,
                                        ModifiedBy: localStorage.UserName
                                    },
                                    cache: false,
                                    success: function (person) {
                                    }
                                });
                            }
                            $("#dvAddNotes").dialog("close");
                        },
                        complete: function () {
                            $("#loadingPage").fadeOut();
                        }
                    });
                } else {
                    $("#loadingPage").fadeOut();
                }
            }
        }
        else {
            swal("", "Note can not exceed 26500 characters");
        }
    }

}

function AddNotes2() {
    if (requiredValidator('dvAddNotes')) {
        $("#loadingPage").fadeIn();
        var sendTo = '';
        $('#ddlSendTo_chosen').find('.chosen-choices li').find('span').each(function () {
            if (sendTo == '') {
                sendTo = $(this).text();
            }
            else {
                sendTo += "; " + $(this).text();
            }
        });
        vContractID = getParameterByName("ContractID");
        //*Harshitha
        var nicInstance = nicEditors.findEditor('txtNotes');
        var vNotesText = CleanWordFormatFromHTML(nicInstance.getContent());
        if (vNotesText.length <= 26500) {
            vNotesText = $.trim(vNotesText);
            vNotesText = $('<div/>').text(vNotesText).html();

            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + vContractID + '/notes',
                type: 'POST',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                data: {
                    ContractID: vContractID,
                    Note: vNotesText,
                    SendTo: sendTo,
                    CreatedBy: localStorage.UserName
                },
                cache: false,
                success: function (person) {

                    BindNotes(vContractID);
                    $("#dvAddNotes").dialog("close");
                },
                complete: function () {
                    $("#loadingPage").fadeOut();
                }
            });
        }
        else {
            $("#loadingPage").fadeOut();
            swal("", "Note can not exceed 26500 characters");
        }
    }
}

function BindNotes(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    $("#ulNotesBody").empty();
    $("#dvNotes").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracts/' + contractid + '/notes',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            var count = 0;
            var datalenght = data == null ? 0 : data.length;
            if (datalenght > 0) {
                var article = '';
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    count++;
                    var vTimedesc = '';
                    if (item.Created != null && item.Created != "") {
                        var vTime = moment(new Date(item.Created)).format('MMMM Do YYYY');
                        var vTimeExact = moment(new Date(item.Created)).format('h:mm A');
                        vTimedesc = ' on ' + vTime + ' at ' + vTimeExact;
                    }

                    if (count <= 10)
                        article += '<li>';
                    else
                        article += '<li class="ShowMoreNotes" style="display:none;">';


                    article += '<span style="display: block;clear: both;width: 700px !important" class="color_dark width100">' + item.Note + '</span>';
                    article += '<span class="color_lightgrey" style="float: left; width: 99%; margin: 10px 0px;" >Posted by ' + item.CreatedBy + vTimedesc;
                    if (item.CreatedBy == localStorage.UserName)
                        article += '<span style="float: right; width: 4%;"><img src="../Content/Images/edit-quick.png" class="margin-left-5" onclick="GetNoteDetail(\'' + item.RowKey + '\')" /><img src="../Content/Images/close-quick.png" class="margin-left-5" onclick="DeleteNote(\'' + item.RowKey + '\')" /></span>';
                    article += '</span>';
                    article += '<span><small class="color_lightgrey">&nbsp;</small></span>';
                    article += '</li>';

                }

                $("#ulNotesBody").html(article);
            }
            else {
                $("#ulNotesBody").append('<li><b class="color_lightgrey">No items found.</b></li>');
            }

            if (count > 10) {
                var more = count - 10;
                $("#dvNotes").html('<a id="ShowMoreNotes" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreNotes()">' + more + ' More Notes </a>' +
                                      '<a id="ShowLessNotes" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessNotes()" style="display:none;">Show less</a>');
            }

            $("#lblNotesCount").text(count);

            if (!$("#lblNotesCount").text().trim()) {
                $("#ulNotesBody").append('<li>No items found.</li>');
            }
        },
        error: function (request) {
            $("#lblNotesCount").text('0');
            $("#ulNotesBody").append('No items found.');
        }
    });
}

function ShowMoreNotes() {
    $('.ShowMoreNotes').css("display", "");
    $('#ShowMoreNotes').css("display", "none");
    $('#ShowLessNotes').css("display", "");
}

function ShowLessNotes() {
    $('.ShowMoreNotes').css("display", "none");
    $('#ShowMoreNotes').css("display", "");
    $('#ShowLessNotes').css("display", "none");
}

function getcontracttypemetadata(strcontracttype) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + encodeURIComponent(strcontracttype),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (metadataFields) {
            var numberexists = false;
            $(metadataFields).each(function (i, item) {
                if (item.FieldName == "ContractNumber") {
                    numberexists = true;
                }
            });
            if (numberexists) {

                $("#trContractMetadataNumber").css('display', '')
            } else {
                $("#trContractMetadataNumber").css('display', 'none')
            }
        }
    });
}

function BindRequestDetails(requestid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Requests/requestsbyrequestid?requestid=' + requestid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        processData: false,
        success: function (item) {
            var vUsers = '';
            var projMgrs = item.Requestor;
            if (projMgrs.indexOf(';') >= 0) {
                var userDisable = '';
                var userTitle = '';
                $.each(item.Requestor.split(";"), function (a, itemname) {
                    userDisable = '';
                    usertitle = '';
                    if (vActiveUsers.indexOf(itemname.trim()) < 0 && vActiveUsers.length > 0) {
                        userDisable = ' disabled_item_link';
                        usertitle = 'title="This user is no longer available."';
                    }
                    if (vUsers == '') {
                        vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + itemname + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + itemname + '</a>';
                    } else {
                        vUsers += '; <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + itemname + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + itemname + '</a>';
                    }
                });
            } else {
                if (item.Requestor != null) {
                    if (vActiveUsers.indexOf(item.Requestor.trim()) < 0 && vActiveUsers.length > 0) {
                        userDisable = ' disabled_item_link';
                        usertitle = 'title="This user is no longer available."';
                    }
                    vUsers = '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + item.Requestor + '\')" class="Link_UserProfile' + userDisable + '" ' + usertitle + '>' + item.Requestor + '</a>';
                }

            }
            $("#spRequestor").html(vUsers)
            if (item.InRecycleBin == "Yes")
                $("#summRelatedRequest").html('<a href="/Pipeline/RequestDetails?RequestID=' + requestid + '">' + item.RequestTitle + '</a>');
            else
                $("#summRelatedRequest").html('<a href="/Pipeline/RequestDetails?RequestID=' + requestid + '">' + item.RequestTitle + '</a>');
        },
        error: function (request) {
        }
    });
}


$(document).ready(function () {
    $("#dvManageContractStatus").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Manage Contract Record Status",
        buttons: {
            "OK": function () {

                ChangeContractStatus();
            },
            Cancel: function () {
                $(this).dialog("close");
            }
        },
        modal: true
    });

    //Popup for the single document status by ID start
    $("#dvManageDocumentStatus").dialog({
        autoOpen: false,
        closeText: "",
        width: "60%",
        title: "Manage Document Status",
        buttons: {
            "OK": function () {
                ChangeDocumentStatusByID();
            },
            Cancel: function () {
                changedocumentstatusbyid = '';
                $(this).dialog("close");
            }
        },
        modal: true
    });
    //Popup for the single document status by ID End

    $(".openmenuTerm").contextMenu({ menu: 'dropdownMenuTerm', leftButton: true }, function (action, el, pos) { contextMenuTerm(action, el.parent("div"), pos); });
    $(".openmenuFixedTerm").contextMenu({ menu: 'dropdownMenuFixedTerm', leftButton: true }, function (action, el, pos) { contextMenuFixedTerm(action, el.parent("div"), pos); });
    $(".openmenuRenewalTerm").contextMenu({ menu: 'dropdownMenuRenewalTerm', leftButton: true }, function (action, el, pos) { contextMenuRenewalTerm(action, el.parent("div"), pos); });
});

function contextMenuTerm(action, el, pos) {
    switch (action) {
        case "view":
            {
                var vTermType = contractItem.ContractTermType;
                var vTermTypeDisplay = TermTypeDisplayName[vTermType];
                var vMetadata = '<tr>';
                vMetadata += '<td class="text_label width40">Term Type</td>';
                vMetadata += '<td class="text width60">' + vTermTypeDisplay + '</td>';
                vMetadata += '</tr>';
                if (vTermType == "Fixed Term") {
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width40">Start Date</td>';
                    vMetadata += '<td class="text width60">';
                    if (contractItem.StartDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</td></tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width40">Next Evaluation Date</td>';
                    vMetadata += '<td class="text width60">';
                    if (contractItem.NextEvaluationDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</td></tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width40">End Date</td>';
                    vMetadata += '<td class="text width60">';
                    if (contractItem.EndDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.EndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</td></tr>';
                } else if (vTermType == "Evergreen / Perpetual") {
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width40">Start Date</td>';
                    vMetadata += '<td class="text width60">';
                    if (contractItem.StartDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</td></tr>';
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width40">Next Evaluation Date</td>';
                    vMetadata += '<td class="text width60">';
                    if (contractItem.NextEvaluationDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextEvaluationDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</td></tr>';
                } else if (vTermType == "Executed / Performance") {
                    vMetadata += '<tr>';
                    vMetadata += '<td class="text_label width40">Date of Execution</td>';
                    vMetadata += '<td class="text width60">';
                    if (contractItem.StartDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.StartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</td></tr>';
                } else if (vTermType == "Renewable") {
                    var vRenewOn = '';
                    vMetadata = '';
                    $("#MetaRenewalViewHistoryLink").css("display", "");
                    //$("#tblMetadataDetail").css("display", "none");
                    //$("#viewMetadataDetailForRenew").css("display", "");
                    vMetadata += '';
                    vMetadata += '<small>Renew On or Before:</small>';
                    if (contractItem.CounterpartyNoticesRenewal != null && contractItem.CounterpartyNoticesRenewalDate != null) {
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vRenewOn = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vRenewOn = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vRenewOn = contractItem.CounterpartyNoticesRenewalDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                        vMetadata += '<small class="small_text">' + vRenewOn + '</small></br></br>';
                    }
                    else {
                        vMetadata += '</br></br>';
                    }
                    vMetadata += '<small>Upcoming Term :</small>';
                    vMetadata += '<small class="small_text">';
                    if (contractItem.NextTermStartDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</small>';
                    vMetadata += '<small>-</small>';
                    vMetadata += '<small class="small_text">';
                    if (contractItem.NextTermEndDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</small></br></br>';
                    vMetadata += '<small>Current Term :</small>';
                    vMetadata += '<small class="small_text">';
                    if (contractItem.EffectiveDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.EffectiveDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</small>';
                    vMetadata += '<small>-</small>';
                    vMetadata += '<small class="small_text">';
                    if (contractItem.TermEndDate != null)
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { vMetadata += contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.TermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                    vMetadata += '</small></br></br>';
                    vMetadata += '<h2 class="pop_heading">Renewal Terms & Conditions</h2></br>';
                    var RenewalTypes = '';
                    if (contractItem.RequiresAuth != null && contractItem.AutoRenew != null) {
                        if (contractItem.AutoRenew == 'Yes')
                            RenewalTypes += 'Auto Renewal ';
                        else
                            RenewalTypes += 'Manual Renewal ';

                        if (contractItem.RequiresAuth == 'Yes')
                            RenewalTypes += 'With Authorisation';
                        else
                            RenewalTypes += 'Without Authorisation';
                    }
                    vMetadata += '<small>Renewal Types :</small><small class="small_text">' + RenewalTypes + '</small></br></br>';
                    vMetadata += '<small>Renewal/Termination Conditions :</small><small class="small_text">' + contractItem.ContractTermNotes + '</small></br></br>';
                    var CounterNoticeON = '';
                    var vDiffNoticON = '';
                    var vFromDate = moment(new Date());
                    if (contractItem.CounterpartyNoticesCancel != null && contractItem.CounterpartyNoticesCancelDate != null) {
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { CounterNoticeON = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        else {
                            if (localStorage.AppDateFormat == 'DD/MM/YYYY') { CounterNoticeON = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                            else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { CounterNoticeON = contractItem.CounterpartyNoticesCancelDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                        }
                        vDiffNoticON = DiffBetDate(vFromDate, contractItem.CounterpartyNoticesCancelDate);
                        vMetadata += '<small class="small_text">Counterparty Notice for Termination ' + vDiffNoticON + ' Prior (' + CounterNoticeON + ')</small></br></br>';
                    }

                    vMetadata += '<h2 class="pop_heading">Renewal Activity & Status</h2></br>';
                    vMetadata += '<small class="small_text">' + UpcomingChecklist + '</small></br>';
                    vMetadata += '<small class="small_text">' + UpComingNotes + '</small>';
                }
                $("#tblMetadataDetail").html(vMetadata);
                setBlankValueToHyphen("tblMetadataDetail");
                $("#viewMetadataDetail").dialog("option", "title", "Contract Record Term & Renewals");
                $("#viewMetadataDetail").dialog("open");
                break;
            }
        case "manage":

            {
                OpenManageContractTerm(contractItem);

                break;
            }
    }
}

function contextMenuFixedTerm(action, el, pos) {
    switch (action) {
        
        case "manage":
            {
                OpenManageContractTerm(contractItem);
                break;
            }
        case "Cancel":
            {
                $("#txtReasonOfCancel").val("");
                $("#ddlSendToCancel").val('');
                $("#dvCancelContract").dialog("open");
                break;
            }
    }
}
function contextMenuRenewalTerm(action, el, pos) {
    switch (action) {

        case "manage":
            {
                OpenManageContractTerm(contractItem);
                break;
            }
        case "Expire":
            {
                ExpireContract();
                break;
            }
    }
}


function toggledivsingle(object, imgObject) {
    $("#" + object).slideToggle();

    var imgObj = $("#" + imgObject);

    if (imgObj.attr("title") == "Collapse") {
        imgObj.attr("title", "Expand");
        imgObj.attr("src", "../Content/Images/e-open.png");
    } else {
        imgObj.attr("title", "Collapse");
        imgObj.attr("src", "../Content/Images/e-close.png");
    }
}

$("#linkAddValidity").click(function () {
    $("#formValidity").toggle();
    $("#formValidityForm").toggle();

    if ($("#linkAddValidity").text() == "Track document expiration date") {
        $('#linkAddValidity').text("Document does not expire");
    } else {
        $('#linkAddValidity').text("Track document expiration date");
    }
});

$("#ddlHistoryFilter").change(function () {
    var option = $(this).find('option:selected').val();
    if (option == "All") {
        CreateContractActivityList();
    } else {
        CreateContractActivityList(option);
    }
});

$("#linkAddValidity1").click(function () {
    $("#formValidity1").toggle();
    $("#formDocImg1").toggle();
    $("#ulvalidity1").toggle();

    if ($("#linkAddValidity1").text() == "Track document expiration date") {
        $('#linkAddValidity1').text("Document does not expire");
    } else {
        $('#linkAddValidity1').text("Track document expiration date");
    }
});

function GetdocumentIsStandard(contractid) {
    articleDocumentMileStone = '';
    multipleChecksDocumentID = '';
    multipleChecksDocumentName = '';
    $("#documentMultiActions").css('display', 'none');
    if (contractid == null || contractid == "") { contractid = vContractID; }
    var vGetTime = new Date();
    $.ajax({
        url: '/Documents/GetTime',
        type: 'GET',
        dataType: 'json',
        cache: false,
        success: function (data) {
            var jsObject = JSON.parse(data);
            vGetTime = new Date(jsObject);
        }
    });
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";

    vFinalSignature = "dropdownMenuFinalSignature";
    vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
    $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $("#ddlDocumentList").empty();
    $("#alertsListUpcomingDocument").empty();
    try {
        var article = '';
        DocumentCount = 0;
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + contractid,
            type: 'GET',
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            processData: false,
            success: function (data) {
                if (data == null) {//NoContent HttpStatusCode Update
                    $("#ulDocument").empty();
                    $("#lblDocumentsCount").text('0');
                    $("#ulDocument").html('<li>No items found.</li>');
                } else {//NoContent HttpStatusCode Update
                    $("#ulDocument").empty();
                    var count = 0;
                    var countStandard = 0;
                    var vPermission = $("#hdnPermission").val();

                    var settings = {
                        pattern: /\.[0-9a-z]+$/i,
                        knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
                        WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
                    };

                    var datalenght = data.length;

                    if (datalenght > 0) {
                        for (var vi = 0; vi < datalenght; vi++) {
                            if (data[vi].ContractArea != "") {
                                docdefaultview(data[vi].ContractArea);
                                break;
                            }
                        }
                    }
                    var DocDefaultView = ""
                    if (thisDocumentLibrarySettings != '' && thisDocumentLibrarySettings != 'undefined' && typeof thisDocumentLibrarySettings != "undefined") {
                        DocDefaultView = thisDocumentLibrarySettings.DocDefaultView;
                        DocVersion = thisDocumentLibrarySettings.DocVersion;
                    }
                    for (var i = 0; i < datalenght; i++) {
                        var item = data[i];
                        count++
                        if (item.IsStandard == "Yes") {
                            countStandard++;
                        }
                        var vClass = "openmenuDocumentFinal";
                        var vv = moment(new Date(item.Modified));
                        var vTime = vv.fromNow();
                        vTime = vv.from(vGetTime);
                        var vDocIcon = "";//'<img src="../Content/Images/Doc_draft.png" class="doc_type margin-left-5" alt="Draft Document" title="Draft Document" />';
                        if (item.IsFinalized == "Yes") {
                            vClass = "openmenuDocument";
                            vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized/Ready for Signature" title="Finalized/Ready for Signature" />';
                            if (item.CreationMode == "Amendment") {
                                vClass = "openmenuAmendmentDocumentFinal";
                                vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                            }
                        } else if (item.CreationMode == "Amendment") {
                            vClass = "openmenuAmendmentDocument";
                            vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';

                        }

                        if (item.IsPrimary == "Yes") {
                            vDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                        }
                        vURLDoc = encodeURI(item.DocumentUrl);
                        var ext = vURLDoc.match(settings.pattern);
                        var vFileType = '<dd class="file-icon none"></dd>';
                        if (ext != null) {
                            if (ext.length > 0) { ext = ext[0].slice(1); }
                            if (vURLDoc.toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                                if (jQuery.inArray(ext, settings.WopiFrameFileTypes) > -1) {
                                    vRawURLDoc = vURLDoc;
                                    vURLDoc = localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + vURLDoc + "&action=default";
                                } else {
                                    vRawURLDoc = "";
                                }
                            }

                            if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                                vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                            }
                        }

                        if (count <= 5)
                            article += '<li class=" margin-bottom-5">';
                        else
                            article += '<li class="ShowMoreDocuments margin-bottom-5" style="display:none;">';

                        article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
                        article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
                        article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
                        article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
                        article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
                        article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
                        article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
                        var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
                        article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';
                        if ($("#hdnPermission").val() != "View" && $("#hdnPermission").val() != "" && $("#hdnPermission").val() != null) {
                            article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';
                        }


                        switch (item.DocumentStatus) {
                            case "New":
                                article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                                break;
                            case "Ready for Signature":
                                article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                                break;
                            case "Awaiting Signatures":
                                article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                                break;
                            case "Active":
                                article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                                break;
                            case "Signed":
                                article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                                break;
                            case "Expired":
                                article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                                break;
                            case "Awaiting Review":
                                article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                                break;
                            case "Reviewed":
                                article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                                break;
                            case "In Negotiation":
                                article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                                break;
                            case "Negotiation Complete":
                                article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                                break;
                        }

                        if (vRawURLDoc != "") {
                            if (DocDefaultView == "WordClient") {
                                article += vFileType + '<a href="javascript:void(0);" seqe ="' + vRawURLDoc + '" onclick="viewdocinword(\'' + vRawURLDoc + '\')">' + item.DocumentName + '</a>';
                            } else {
                                article += vFileType + '<a href="' + vURLDoc + '" target="_blank">' + item.DocumentName + '</a>';
                            }
                        } else {
                            article += vFileType + '<a href="' + vURLDoc + '" target="_blank">' + item.DocumentName + '</a>';
                        }

                        article += '<span class="sub-text"> ' + vTime + '</span>';
                        article += '';
                        article += '';
                        article += vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
                        article += '</li>';
                        DocumentCount++;
                        articleDocMiletstone = BindDocumentMilestones(item);
                        var doclist = '<option value="' + item.RowKey + '">' + item.DocumentName + '</option>';
                        $("#ddlDocumentList").append(doclist);
                        $("#ddlDocumentList").trigger('chosen:updated');
                        articleDocumentMileStone += articleDocMiletstone;
                        //BindDocumentAlert(item);

                    }
                    //$("#ulDocument").html(article);
                    if (DocVersion == "No") {
                        $('li.history').hide();
                    }
                    //         if (datalenght == countStandard) {
                    //             if (contractItem.IsStandard != "Yes") {
                    //                 swal({
                    //                     title: '',
                    //                     text: "Marking the document as standard will make the contract as standard. Are you sure you want to make this Contract as standard?",
                    //                     type: 'warning',
                    //                     showCancelButton: true,
                    //                     confirmButtonText: 'Yes',
                    //                     cancelButtonText: 'No',
                    //                     html: true
                    //                 },
                    //function (confirmed) {
                    //    if (confirmed) {
                    //        SetStandardFlag("Yes");
                    //    }
                    //    return;
                    //});

                    //             }
                    //         }


                    //$("#lblDocumentsCount").text(count);

                    //if (!$("#lblDocumentsCount").text().trim()) {
                    //    $("#ulDocument").empty();
                    //    $("#ulDocument").append('<li>No items found.</li>');
                    //}

                    $(".openmenuDocument").contextMenu({ menu: vFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                    $(".openmenuDocumentFinal").contextMenu({ menu: vMarkFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                    $(".openmenuAmendmentDocument").contextMenu({ menu: "dropdownMenuAmendment", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
                }
            },
            error: function (request) {
                $("#ulDocument").empty();
                $("#lblDocumentsCount").text('0');
                $("#ulDocument").html('<li>No items found.</li>');
                //$("#btnAddContractDocument").css('display', '');
                //$("#lblAddContractDocument").css('display', '');

            },
            complete: function () {

                //*Harshitha
                //manoj
                if (documentview == null || documentview == "" || documentview == 'folder') {
                    if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                        var selectedfoldervalue = $('#showAll').find("a");
                        var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                        var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                        var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                        showfolderdocuments(parentdocumentdetails);
                    }
                    else {
                        // $("#ulDocument").html(article);
                        BindDocument(vContractID);
                    }
                } else {
                    DisplayDocument(documentview);
                }
                //GetContractPendingAction(true, "BindPeoples");
                $("#hdnFolderDocumentView").text('');
                $("#hdnShowAllTextValue").html('');
                PrvFolderselection = '';
                //Bind primary and pined document based on new feature
                if ($("#hdnnewdocumentfeature").text() == "Yes") {
                    CreateDocumentListPinView(vContractID);
                }
                //manoj
                BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
            }

        });
    } catch (e) {

    }

}

function SetStandardFlag(strisstandard) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + vContractID + '&isstandard=' + strisstandard + '&username=' + localStorage.UserName,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        cache: false,
        success: function (data) {
            if (strisstandard == "Yes") {
                //$("#iStandardCont").css('display', '');
                //$("#iNonStandardCont").css('display', 'none');
                $("#liContractStandard").css('display', '');
                $("#liContractNonStandard").css('display', 'none');
                contractItem.IsStandard = "Yes";
            }
            else {
                //$("#iStandardCont").css('display', 'none');
                //$("#iNonStandardCont").css('display', '');
                $("#liContractStandard").css('display', 'none');
                $("#liContractNonStandard").css('display', '');
                contractItem.IsStandard = "No";
            }
            if (contractItem.IsDraft == "Yes") {
                $(".draft").css('display', 'none');
            }
            $("#loadingPage").fadeOut();
        },
        error: function () {
            $("#loadingPage").fadeOut();
        }
    });
}

function contextMenuAmendmentDocument(action, el, pos) {

    switch (action) {
        case "view":
            {
                var amendmentID = $(el).find("#AmendmentID").text();
                ViewAmendment(amendmentID);
                break;
            }
        case "replace":
            {
                ClearReplaceDocFrom();
                var documentID = $(el).find("#DocumentID").text();
                var documentName = $(el).find("#DocumentName").text();
                $("#txtdocumentToReplaceName").val(documentName.substring(0, documentName.lastIndexOf('.')));
                $('#lblDocumentExtension').val(documentName.split('.').pop());
                $("#lblReplaceTemplateDescription").text("");
                //addbuttonclick = true;
                $('#hdnDocumentID').val(documentID);
                $("#trTop").css('display', 'none');
                $("#divReplaceDocument").dialog("option", "title", "Replace Document");
                $("#divReplaceDocument").dialog("open");
                break;
            }
        case "delete":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to delete '<span style=\"font-weight:700\">" + documentName + "</span>'?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + documentID,
                 type: 'DELETE',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                 cache: false,
                 success: function (data) {
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj
                     //*Harshitha

                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     $("#ddlDocumentList").trigger('chosen:updated');
                     $("#loadingPage").fadeOut();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

                break;
            }
        case "remove":
            {
                //manoj
                var ContractLibUrl = "";
                //manoj
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                swal({
                    title: '',
                    text: "Are you sure you want to remove '<span style=\"font-weight:700\">" + documentName + "</span>' from this Contract?",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             var documentID = $(el).find("#DocumentID").text();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/untag?contractid=' + getParameterByName('ContractID') + '&documentid=' + documentID,
                 type: 'PUT',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                 cache: false,
                 success: function (data) {
                     $("#loadingPage").fadeOut();
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj

                     $("#ddlDocumentList option[value='" + documentID + "']").remove();
                     $("#ddlDocumentList").trigger('chosen:updated');
                     //*Harshitha
                     BindMilestone();
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });


                break;
            }
        case "edit":
            {
                $('#editNewDocument').css("pointer-events", "auto");
                var documentID = $(el).find("#DocumentID").text();
                $("#hdIsPrimaryDoc").val($(el).find("#IsPrimaryDoc").text());
                EditDocumentMetadata(documentID);
                break;
            }
        case "final":
            {
                //Check if document is having any revisions
                //var isrevisionexists = true;
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#") {
                    LinkURL = $(el).find("a").attr('seqe')
                }
                //var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                //$.ajax({
                //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + DocumentUrl,
                //    type: 'GET',
                //    dataType: 'json',
                //    async: false,
                //    "Content-Type": "application/json",
                //    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //    cache: false,
                //    success: function (revisiondata) {
                //        if (revisiondata) {
                //            isrevisionexists = true;
                //        }
                //    },
                //    error: function () {

                //    }
                //});
                var CanSend = false;
                var ext = $(el).find("dd").attr("class");
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1)
                        CanSend = true;
                if (CanSend) {
                    swal({
                        title: '',
                        text: "Please make sure that you have accepted track changes and cleaned up the document. Are you sure you want to mark selected documents as <span style='font-weight:700'>Finalized/Ready for Signature</span>?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                 function (confirmed) {
                     if (confirmed) {
                         $("#loadingPage").fadeIn();
                         var entityid = $(el).find("#DocumentID").text();
                         $.ajax({
                             url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                             type: 'PUT',
                             cache: false,
                             contentType: false,
                             headers: {
                                 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                             },
                             processData: false,
                             success: function (document) {
                                 //manoj
                                 $("#loadingPage").fadeOut();
                                 if (documentview == null || documentview == "" || documentview == 'folder') {
                                     if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                         var selectedfoldervalue = $('#showAll').find("a");
                                         var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                         var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                         var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                         showfolderdocuments(parentdocumentdetails);
                                     }
                                     else {
                                         BindDocument(vContractID);
                                     }
                                 } else {
                                     DisplayDocument(documentview);
                                 }
                                 pendingStarted = false;
                                 GetContractPendingAction(true, "BindPeoples");
                                 $("#hdnFolderDocumentView").text('');
                                 $("#hdnShowAllTextValue").html('');
                                 PrvFolderselection = '';
                                 //Bind primary and pined document based on new feature
                                 if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                     CreateDocumentListPinView(vContractID);
                                 }
                                 //manoj      

                             },
                             error: function () {
                                 $("#loadingPage").fadeOut();
                             }
                         });
                     }
                     return;
                 });
                } else {
                    swal({
                        title: '',
                        text: "Do you want to mark this document as Finalized/Ready for Signature?",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                        html: true
                    },
                    function (confirmed) {
                        if (confirmed) {
                            $("#loadingPage").fadeIn();
                            var entityid = $(el).find("#DocumentID").text();
                            $.ajax({
                                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + entityid,
                                type: 'PUT',
                                cache: false,
                                contentType: false,
                                headers: {
                                    'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                },
                                processData: false,
                                success: function (document) {
                                    //manoj
                                    $("#loadingPage").fadeOut();
                                    if (documentview == null || documentview == "" || documentview == 'folder') {
                                        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                            var selectedfoldervalue = $('#showAll').find("a");
                                            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                            showfolderdocuments(parentdocumentdetails);
                                        }
                                        else {
                                            BindDocument(vContractID);
                                        }
                                    } else {
                                        DisplayDocument(documentview);
                                    }
                                    pendingStarted = false;
                                    GetContractPendingAction(true, "BindPeoples");
                                    $("#hdnFolderDocumentView").text('');
                                    $("#hdnShowAllTextValue").html('');
                                    PrvFolderselection = '';
                                    //Bind primary and pined document based on new feature
                                    if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                        CreateDocumentListPinView(vContractID);
                                    }
                                    //manoj

                                },
                                error: function () {
                                    $("#loadingPage").fadeOut();
                                }
                            });
                        }
                        return;
                    });
                }

                break;
            }
        case "download":
            {
                var LinkURL = $(el).find("a").attr('href');
                var SourceUrl = "";
                if (LinkURL == "#") {
                    SourceUrl = $(el).find("a").attr('seqe')
                } else {
                    SourceUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                    //SourceUrl = encodeURIComponent(SourceUrl);
                    var formatarray = "doc,xls,ppt,docx,xlsx,pptx,dotx";
                    var filename = SourceUrl;
                    filename = filename.split("/").pop().split(".").pop();
                    if ($.inArray(filename, formatarray.split(',')) > -1) {
                        SourceUrl = encodeURIComponent(SourceUrl);
                    }
                    else {
                        SourceUrl = decodeURIComponent(SourceUrl);
                        SourceUrl = encodeURIComponent(SourceUrl);
                    }
                }
                location = localStorage.SPHostUrl + "/_layouts/15/download.aspx?SourceUrl=" + SourceUrl;
                break;
            }
        case "signature":
            {
                ClearSignatureForm();
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                    type: 'GET',
                    dataType: 'json',
                    "Content-Type": "application/json",
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    cache: false,
                    success: function (settings) {
                        $("#txtExpIn").val(settings.TaskDuration);
                    },
                    error: function () {

                    }
                });
                var documentName = $(el).find("#DocumentName").text();
                var sentForSign = $(el).find("#SentForSign").text();
                var documentID = $(el).find("#DocumentID").text();
                var isFinalized = $(el).find("#IsFinalized").text();
                var PrimaryDocumentCheck = $(el).find("#IsPrimaryDoc").text();
                var CanSend = false;
                var ext = $(el).find("dd").attr("class");
                if (typeof (ext) != "undefined" && ext != "")
                    if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1 || ext.indexOf("pdf") > -1)
                        CanSend = true;
                if (CanSend) {
                    if (sentForSign == '') {
                        if (PrimaryDocumentCheck == 'Yes')
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document & Contract Record status based on this Workflow.");
                        else
                            $("#lblAutoUpdateStatusSignDoc").html("Auto update Document status based on this Workflow.");
                        if (isFinalized != 'Yes') {
                            var finaltext = "Only <span style='font-weight:700'>Finalized/Ready for Signature</span> documents can be sent out for <span style='font-weight:700'>eSignature</span>. Do you want to mark this document as <span style='font-weight:700'>Finalized/Ready for Signature</span>?";
                            if (ext.indexOf("doc") > -1 || ext.indexOf("docx") > -1) {
                                finaltext = "Are you sure all edit/ redlines have been accepted and the document is cleaned up. Mark this document as Finalized/Ready for Signature now?";
                            }
                            swal({
                                title: '',
                                text: finaltext,
                                type: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes',
                                cancelButtonText: 'No',
                                html: true
                            },
                                  function (confirmed) {
                                      if (confirmed) {
                                          $(el).find("#IsFinalized").text('Yes');
                                          isFinalized = 'Yes';
                                          $.ajax({
                                              url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/MarkFinal?documentid=' + documentID,
                                              type: 'PUT',
                                              cache: false,
                                              contentType: false,
                                              headers: {
                                                  'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, username: localStorage.UserName
                                              },
                                              processData: false,
                                              success: function (document) {
                                              }
                                          });
                                      }
                                      if (isFinalized == 'Yes') {
                                          $("#hdMarkAsFinal").val("Y");
                                          var LinkURL = $(el).find("a").attr('href');
                                          if (LinkURL == "#") {
                                              LinkURL = $(el).find("a").attr('seqe')
                                          }
                                          var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                                          $("#hdDocumentID").val(documentID);
                                          $("#hdDocumentURL").val(DocumentUrl);
                                          $("#tdDocument").html("<b>" + documentName + "</b>");
                                          getNameAndEmailSignDocument();
                                          $("#sendForSignature").dialog("open");
                                      }
                                      return;
                                  });

                        }
                        else {
                            if (isFinalized == 'Yes') {
                                $("#hdMarkAsFinal").val("Y");
                                var LinkURL = $(el).find("a").attr('href');
                                if (LinkURL == "#") {
                                    LinkURL = $(el).find("a").attr('seqe')
                                }
                                var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                                $("#hdDocumentID").val(documentID);
                                $("#hdDocumentURL").val(DocumentUrl);
                                $("#tdDocument").html("<b>" + documentName + "</b>");
                                getNameAndEmailSignDocument();
                                $("#sendForSignature").dialog("open");
                            }
                        }
                    }
                    else {

                        swal("", "This document has already been sent for signature: " + sentForSign);

                    }
                }
                else {
                    swal("", "This document cannot be sent for signature: Only <span style='font-weight:700'>doc,docx</span> and <span style='font-weight:700'>pdf</span> type files can be sent for signature.");
                }
                break;
            }
        case "editO365":
            {
                var LinkURL = $(el).find("a").attr('href');
                if (LinkURL == "#") {
                    var rawUrl = $(el).find("a").attr('seqe');
                    viewdocinword(rawUrl);
                } else {
                    window.open(LinkURL);
                }
                break;
            }
        case "sharelink":
            {
                var documentStatus = $(el).find("b").attr('title');
                var shareWorkflow = $(el).find("#ShareWorkflow").text();
                if (shareWorkflow == "In Progress") {
                    swal("", "Negotiation/External Review is in progress for this document.");
                }
                else {
                    //if (primarydocchecking == 'Yes')
                    //    $("#lblAutoUpdateStatus").html("Auto update Document & Contract Record status to 'Negotiation Complete' when this Negotiation/External Review is completed.");
                    //else
                    $("#lblAutoUpdateStatusShareDoc").html("Auto update Document status to 'Negotiation Complete' when this External Share is completed.");
                    //Check if document is having any revisions
                    var isrevisionexists = false;
                    var LinkURL = $(el).find("a").attr('href');
                    if (LinkURL == "#") {
                        LinkURL = $(el).find("a").attr('seqe')
                    }
                    var DocumentUrl = getQueryStringFromValue(LinkURL, 'sourcedoc');
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/revisionexists?docurl=' + DocumentUrl,
                        type: 'GET',
                        dataType: 'json',
                        async: false,
                        "Content-Type": "application/json",
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        cache: false,
                        success: function (revisiondata) {
                            if (revisiondata) {
                                isrevisionexists = true;
                            }
                        },
                        error: function () {

                        }
                    });
                    if (isrevisionexists) {
                        swal({
                            title: '',
                            text: "Revisions (comments or track changes) exists inside the document, do you really want to share this as a link?",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No',
                            html: true
                        },
                         function (confirmed) {
                             if (confirmed) {
                                 $.ajax({
                                     url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                                     type: 'GET',
                                     dataType: 'json',
                                     "Content-Type": "application/json",
                                     headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                     cache: false,
                                     success: function (settings) {
                                         $("#txtShareExpIn").val(settings.TaskDuration);
                                         if ($("#txtShareExpIn").val() != "") {
                                             $("#txtShareExpIn").trigger("onchange");
                                         } else {
                                             $("#lblValidLinkDate").empty();
                                         }
                                     },
                                     error: function () {

                                     }
                                 });
                                 ClearShareForm();
                                 var documentName = $(el).find("#DocumentName").text();
                                 var documentID = $(el).find("#DocumentID").text();
                                 $("#hdDocumentID").val(documentID);
                                 $("#hdDocumentURL").val(DocumentUrl);
                                 $("#tdShareDocument").html("<b>" + documentName + "</b>");
                                 getNameAndEmailShareDocument();
                                 GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                                 //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                                 $("#shareDocument").dialog("open");
                             }
                             return;
                         });
                    } else {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                            type: 'GET',
                            dataType: 'json',
                            "Content-Type": "application/json",
                            headers: { 'eContracts-ApiKey': localStorage.APIKey },
                            cache: false,
                            success: function (settings) {
                                $("#txtShareExpIn").val(settings.TaskDuration);
                                if ($("#txtShareExpIn").val() != "") {
                                    $("#txtShareExpIn").trigger("onchange");
                                } else {
                                    $("#lblValidLinkDate").empty();
                                }
                            },
                            error: function () {

                            }
                        });
                        ClearShareForm();
                        var LinkURL = $(el).find("a").attr('href');
                        if (LinkURL == "#") {
                            LinkURL = $(el).find("a").attr('seqe')
                        }
                        var documentName = $(el).find("#DocumentName").text();
                        var documentID = $(el).find("#DocumentID").text();
                        $("#hdDocumentID").val(documentID);
                        $("#hdDocumentURL").val(DocumentUrl);
                        $("#tdShareDocument").html("<b>" + documentName + "</b>");
                        getNameAndEmailShareDocument();
                        GetValuesAndAutoPopulate("ddlDocumentShareInternal", "");
                        //getShareNameandEmailIdInternal(vContractID, "ddlDocumentShareInternal");
                        $("#shareDocument").dialog("open");
                    }
                }

                if (documentStatus != "In Negotiation") {

                }
                else {
                    swal("", "Negotiation/External Review is in progress for this document.");
                }
                break;
            }
        case "approve":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                $("#txtTodoTitle").val('Approval for ' + documentName.split('.')[0]);
                $("#ddlTodoType option").filter(function (index) { return $(this).text() === "Document Approval"; }).prop('selected', true);
                $("#txtBrowseElement").val(documentName);
                $("#txtBrowseElementID").val(documentID);
                $("#trBrowse").css("display", "");
                $("#browse").css("display", "none");
                $("#tdBrowseElement").html("Documents");
                $('#ddlTodoType').attr('disabled', 'disabled');

                GetValuesAndAutoPopulate("ddlApprovers", "");
                $("#txtDueDate").val("");
                //*Harshitha
                var nicInstance = nicEditors.findEditor('txtNotes');
                nicInstance.setContent('');
                NicEditorPasteEvent();
                $("#chkNotifyMe").prop('checked', false);
                $("#dvTodo").dialog("open");
                break;
            }
        case "review":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var reviewWorkflow = $(el).find("#ReviewWorkflow").text();
                if (reviewWorkflow == "In Progress") {
                    //swal("", "Document Review is in progress for this document.");
                    $("#alertText1").html("Document Review is in progress for this document.");
                    $("#textingdetails").html('<a target="_blank" title="View Workflow Details" href=' + workflowurltoshowDOCUMENT + '><font color="#44A6D8">View Workflow Details</font></a>');
                    $("#dvAlertDetails1").dialog("open");
                }
                else {
                    $("#loadingPage").fadeIn();

                    var businessArea = $("#lblBusinessArea").text();
                    var contractArea = $("#lblContractArea").text();
                    $("#tblStage").empty();
                    $("#ddlRule").empty();
                    if (contractItem.IsFinalized == 'Yes') {
                        $("#liAutoUpdateStatus").css('display', 'none');
                    } else {
                        $("#liAutoUpdateStatus").css('display', '');
                    }
                    $("#txtWorkflowTitle").val('Review for ' + documentName);
                    //manoj
                    $("#txtWorkflowTitle").prop('readonly', false);
                    //manoj
                    $("#lblAutoUpdateStatus").text('Auto update Document status based on this Workflow.');
                    $("#txtDuration").val("");
                    //*Harshitha
                    var nicInstance = nicEditors.findEditor('txtComment');
                    nicInstance.setContent('');
                    NicEditorPasteEvent();
                    $("#hdWorkflowType").val("Document Review");
                    $("#hdWorkflowObjectID").val(documentID);
                    $("#hdWorkflowObjectTitle").val(documentName);
                    GetValuesAndAutoPopulate("ddlWorkflowCC", "");

                    var vWorkflowSettings = [];
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/evaluate?workflowType=Document Review&contractArea=' + encodeURIComponent(contractArea) + '&businessArea=' + encodeURIComponent(businessArea) + '&contractid=' + documentID,
                        type: 'GET',
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        processData: false,
                        success: function (item) {
                            vWorkflowSettings = item.WorkflowSettings;

                            var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                            var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                                return (n.RowKey == "8" && n.Status == "ON");
                            });
                            if (vAccFeat.length > 0) {
                                vWorkflowRules = item.WorkflowRules;
                            }
                            if (item.WorkflowSettings != null) {
                                workflowRoutingOptions = vWorkflowSettings.WorkflowRoutingOptions.split(";");
                                workflowRoutingOptions = $.map(workflowRoutingOptions, $.trim);
                                if (workflowRoutingOptions.indexOf("Allow adding additional Stages") == -1) {
                                    if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                        $("#spAddStage").css("display", "none");
                                    }
                                }
                                $("#txtDuration").val(vWorkflowSettings.TaskDuration);
                                if ($("#txtDuration").val() != "") {
                                    $("#txtDuration").trigger("onchange");
                                } else {
                                    $("#lblDurationDate").empty();
                                }
                            }
                            if (vWorkflowRules.length > 0) {
                                $(vWorkflowRules).each(function (i, rule) {
                                    $("#ddlRule").append('<option value="' + rule.RuleName + '">' + rule.RuleName + '</option>');
                                });
                                var workflowRules = vWorkflowRules[0];
                                $("#ddlRule").find('option[value="' + workflowRules.RuleName + '"]').prop("selected", true);
                                if (vWorkflowRules.length == 1) {
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text(workflowRules.RuleName);
                                    $("#ddlRule").attr('disabled', 'disabled');
                                }
                                else {
                                    $("#lblddlRule").text("");
                                    $("#lblddlRule").css("display", "none");
                                    $("#ddlRule").css("display", "");
                                    $("#ddlRule").removeAttr("disabled");
                                }
                                var participantsInXML = workflowRules.ParticipantsInXML;
                                var totalFileCount = 0;
                                if (workflowRules.RuleName == "Default")
                                    $("#txtWorkflowTitle").val('Review for ' + documentName);
                                else
                                    $("#txtWorkflowTitle").val(workflowRules.RuleName);
                                //If the rule is ad-hoc 
                                if (participantsInXML != "") {
                                    $(participantsInXML).find('WorkflowPaticipant').each(function () {
                                        var StageTitle = $(this).find('StageTitle').text();
                                        var Participants = $(this).find('Participants').text();
                                        var Order = $(this).find('Order').text();
                                        totalFileCount++;
                                        var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                        htmlFormatFile += '<td class="width30 wf_approval">';
                                        htmlFormatFile += '<input id="txtStage' + totalFileCount + '" value="' + StageTitle + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width46">';
                                        htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width20 padding_top_3px v_align_top">';
                                        htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32">';
                                        if (Order == "Serial")
                                            htmlFormatFile += '<option value="Serial" selected="selected">Serial</option><option value="Parallel">Parallel</option></select>';
                                        else
                                            htmlFormatFile += '<option value="Serial">Serial</option><option value="Parallel" selected="selected">Parallel</option></select>';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '<td class="width4">';
                                        if (totalFileCount > 1)
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="width: 20px" onclick="DeleteStage(this)" />';
                                        else
                                            htmlFormatFile += '<img id="imgStageDelete' + totalFileCount + '" src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                        htmlFormatFile += '</td>';
                                        htmlFormatFile += '</tr>';

                                        $("#tblStage").append(htmlFormatFile);
                                        var $options = $("#ddlApprovers > option").clone();
                                        $('#ddlAssignTo' + totalFileCount).append($options);
                                        $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                            var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                            if ($(this).val() != null) {
                                                if ($(this).val().length > 1 && (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") >= 0 ||
                                                    workflowRoutingOptions.indexOf("Allow replacing participants") >= 0))
                                                    $("#ddlOrder" + vasstoid).prop('disabled', false);
                                                else {
                                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                    $("#ddlOrder" + vasstoid).val('Serial');
                                                }
                                            }
                                            else {
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                $("#ddlOrder" + vasstoid).val('Serial');
                                            }
                                        });
                                        GetValuesAndAutoPopulate("ddlAssignTo" + totalFileCount, Participants);
                                        var vParticipantsArr = Participants.split(";");
                                        if (vParticipantsArr.length > 1)
                                            $("#ddlOrder" + totalFileCount).prop('disabled', false);
                                        else
                                            $("#ddlOrder" + totalFileCount).prop('disabled', true);


                                        if (item.WorkflowSettings != null) {
                                            if (workflowRoutingOptions.indexOf("Allow over-ride of Admin Configuration") == -1) {
                                                if (workflowRoutingOptions.indexOf("Allow replacing participants") == -1) {
                                                    $("#ddlAssignTo" + totalFileCount).prop('disabled', true).trigger("chosen:updated");
                                                    $("#ddlOrder" + totalFileCount).prop('disabled', true);
                                                }
                                                $("#txtStage" + totalFileCount).prop('disabled', true);
                                                $("#imgStageDelete" + totalFileCount).css("visibility", "hidden");
                                            }
                                        }
                                    });
                                }
                                else {
                                    if ($("#ddlRule").html() == "") {
                                        $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                        $("#lblddlRule").css("display", "");
                                        $("#ddlRule").css("display", "none");
                                        $("#lblddlRule").text("Ad-hoc");
                                    }
                                    if (!workflowAdHoc)
                                        $("#ddlRule").attr('disabled', 'disabled');
                                    var totalFileCount = 1;
                                    var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                    htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                    htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                    htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                    htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '<td class="width4">';
                                    htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                    htmlFormatFile += '</td>';
                                    htmlFormatFile += '</tr>';

                                    $("#tblStage").append(htmlFormatFile);
                                    var $options = $("#ddlApprovers > option").clone();
                                    $('#ddlAssignTo' + totalFileCount).append($options);

                                    $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                        var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                        if ($(this).val() != null) {
                                            if ($(this).val().length > 1)
                                                $("#ddlOrder" + vasstoid).prop('disabled', false);
                                            else {
                                                $("#ddlOrder" + vasstoid).prop('disabled', true);
                                                $("#ddlOrder" + vasstoid).val('Serial');
                                            }
                                        }
                                        else {
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            $("#ddlOrder" + vasstoid).val('Serial');
                                        }
                                    });
                                }
                            }
                            else {
                                if ($("#ddlRule").html() == "") {
                                    $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                                    $("#lblddlRule").css("display", "");
                                    $("#ddlRule").css("display", "none");
                                    $("#lblddlRule").text("Ad-hoc");
                                }
                                if (!workflowAdHoc)
                                    $("#ddlRule").attr('disabled', 'disabled');
                                var totalFileCount = 1;
                                var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                                htmlFormatFile += '<td class="width30" style="vertical-align: middle; padding-right: 11px;padding-top: 2px;">';
                                htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width46 v_align_middle" style="padding-top: 2px;">';
                                htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width20" style="vertical-align: middle;">';
                                htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '<td class="width4">';
                                htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                                htmlFormatFile += '</td>';
                                htmlFormatFile += '</tr>';

                                $("#tblStage").append(htmlFormatFile);
                                var $options = $("#ddlApprovers > option").clone();
                                $('#ddlAssignTo' + totalFileCount).append($options);

                                $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                    var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                    if ($(this).val() != null) {
                                        if ($(this).val().length > 1)
                                            $("#ddlOrder" + vasstoid).prop('disabled', false);
                                        else {
                                            $("#ddlOrder" + vasstoid).prop('disabled', true);
                                            $("#ddlOrder" + vasstoid).val('Serial');
                                        }
                                    }
                                    else {
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        $("#ddlOrder" + vasstoid).val('Serial');
                                    }
                                });
                            }
                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        },
                        error: function () {
                            $("#ddlRule").append('<option value="Ad-hoc">Ad-hoc</option>');
                            $("#lblddlRule").css("display", "");
                            $("#ddlRule").css("display", "none");
                            $("#lblddlRule").text("Ad-hoc");
                            if (!workflowAdHoc)
                                $("#ddlRule").attr('disabled', 'disabled');
                            var totalFileCount = 1;
                            var htmlFormatFile = '<tr id="trStage' + totalFileCount + '">';
                            htmlFormatFile += '<td class="width30 wf_approval">';
                            htmlFormatFile += '<input id="txtStage' + totalFileCount + '" name="Stage' + totalFileCount + '" title="Stage" placeholder="Stage Name" type="text" class="f_inpt width95 validelement" value="Stage ' + totalFileCount + '"/>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width46">';
                            htmlFormatFile += '<select id="ddlAssignTo' + totalFileCount + '" name="AssignTo' + totalFileCount + '"  multiple="multiple" data-placeholder="Select" class="width97 a-Workflow-height validmultiselect"></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width20 padding_top_3px v_align_top">';
                            htmlFormatFile += '<select id="ddlOrder' + totalFileCount + '" name="Order' + totalFileCount + '"  class="f_inpt width97 height32" disabled="disabled"><option selected="selected">Serial</option><option>Parallel</option></select>';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '<td class="width4 padding_top_10px v_align_top">';
                            htmlFormatFile += '<img src="../Content/Images/icon/delete.png" style="visibility: hidden; width: 20px" onclick="DeleteStage(this)" />';
                            htmlFormatFile += '</td>';
                            htmlFormatFile += '</tr>';

                            $("#tblStage").append(htmlFormatFile);
                            var $options = $("#ddlApprovers > option").clone();
                            $('#ddlAssignTo' + totalFileCount).append($options);
                            $("#ddlAssignTo" + totalFileCount).chosen().change(function () {
                                var vasstoid = $(this).attr('id').replace("ddlAssignTo", "");
                                if ($(this).val() != null) {
                                    if ($(this).val().length > 1)
                                        $("#ddlOrder" + vasstoid).prop('disabled', false);
                                    else {
                                        $("#ddlOrder" + vasstoid).prop('disabled', true);
                                        $("#ddlOrder" + vasstoid).val('Serial');
                                    }
                                }
                                else {
                                    $("#ddlOrder" + vasstoid).prop('disabled', true);
                                    $("#ddlOrder" + vasstoid).val('Serial');
                                }
                            });

                            $("#loadingPage").fadeOut();
                            $("#dvWorkflow").dialog("option", "title", "Document Review Workflow");
                            $("#dvWorkflow").dialog("open");
                            $("#dvWorkflow").height("auto");
                        }
                    });
                }
                break;
            }
        case "version": {
            $("#tblVersionHistory").empty();
            $("#loadingPage").fadeIn();
            var documentID = $(el).find("#DocumentID").text();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/' + documentID + '/versions',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'RefreshToken': localStorage.RefreshToken },
                cache: false,
                success: function (data) {
                    var datalenght = data.length;
                    for (var i = datalenght - 1 ; i >= 0; i--) {
                        var item = data[i];
                        var formatModifiedDate = '';
                        if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                        { formatModifiedDate = moment(new Date(item.Modified)).format('MM/DD/YYYY'); }
                        else { formatModifiedDate = moment(new Date(item.Modified)).format(localStorage.AppDateFormat); }

                        var article = "";
                        article += '<tr>';
                        article += '<td>' + item.VersionNo + '</td>';
                        article += '<td>' + item.Size + '</td>';
                        article += '<td>' + formatModifiedDate + '</td>';
                        article += '<td>' + item.ModifiedBy + '</td>';
                        article += '</tr>';
                        $("#tblVersionHistory").append(article);
                    }

                    $("#loadingPage").fadeOut();
                    $("#dvVersionHistory").dialog("open");
                },
                error: function () {
                    $("#loadingPage").fadeOut();
                }
            });
            break;
        }
    }
}

var droppedControls = 0;
function readfiles(files) {
    var documentidcount = "";
    var filelistexit = "";
    var unvalidfile = "";
    var FileList = "";
    var rejectedfile = '';
    var vControl = "";
    var controluploadsetion = "";
    var uploingsectionid = 1;
    var lesscharfilename = "";
    var dropexitfilenamevalue = "";
    var fileslength = files.length;
    if (document.getElementById("tbBulkControls").rows.length > 0) {
        droppedControls = document.getElementById("tbBulkControls").rows.length - 1;
        uploingsectionid = document.getElementById("tbBulkControls").rows.length;
    }

    //manoj
    var headerid = $("#lblContractTitle").text();
    headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
    var finalurl = "";
    //var newurl = "";
    //if ($('#hdnContractDocumentsUrl').text() != "") {
    finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
    finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
    finalurl = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurl + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurl + headerid + '/';
    //if ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
    //    $('#hdnContractDocumentsUrl').text(newurl + "/" + $('#showAll').text().replace(/ \/ /g, '/') + '/')
    //} else {
    //    $('#hdnContractDocumentsUrl').text(newurl + "/");
    //}
    //} else {
    //    finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
    //    //finalurl = $('#hdContAreaDocLibName').val();
    //    finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
    //    finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
    //    finalurl = (headerid != "" && (!$.isEmptyObject(headerid))) ? finalurl + headerid + '/' : finalurl;
    //    $("#hdnContractDocumentsUrl").text(finalurl)
    //}
    //if ($("#hdnContractDocumentsUrl").text() != "") {
    //    var lastcharfind = $("#hdnContractDocumentsUrl").text();
    //    finalurl = (lastcharfind.substr(lastcharfind.length - 1) != "/") ? $("#hdnContractDocumentsUrl").text() + "/" : $("#hdnContractDocumentsUrl").text();
    //    //lastcharfind = lastcharfind.substr(lastcharfind.length - 1)
    //    //if (lastcharfind == "/") {
    //    //    finalurl = $("#hdnContractDocumentsUrl").text();
    //    //}
    //    //else {
    //    //    finalurl = $("#hdnContractDocumentsUrl").text() + "/";
    //    //}
    //}
    //else {

    //}
    //manoj

    for (var i = 0; i < fileslength; i++) {
        var file = files[i];
        var acceptExtension = ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'dotx', 'xps', 'rtf', 'odt', 'dotm', 'docm','zip','ZIP'];
        var ext = file.name.split('.').pop().toString();
        if (acceptExtension.indexOf(ext.trim().toLowerCase()) > -1) {
            if ('size' in file) {
                var Filelengthcol = Math.round((file.size / 1048576));
                if (Filelengthcol > (Math.round(parseInt(localStorage.MaxRequestLength) / 1000))) {
                    //swal("", "The maximum permissible size is " + Math.round(((localStorage.MaxRequestLength / 1024) / 1024) * 10) / 10 + " MB, Please upload a file which is less than " + Math.round(((localStorage.MaxRequestLength / 1024) / 1024) * 10) / 10 + " MB");
                    if (FileList == "") {
                        FileList = files[i].name;
                    } else {
                        FileList += "," + files[i].name;
                    }
                    var index = droppedfiles.indexOf(files[i]);
                    if (index > -1) {
                        droppedfiles.splice(index, 1);
                    }
                } else if (dropexitfilename.indexOf(files[i].name) > -1) {
                    if (dropexitfilenamevalue == "") {
                        dropexitfilenamevalue = files[i].name;
                    } else {
                        dropexitfilenamevalue += "," + files[i].name;
                    }
                    var index = droppedfiles.lastIndexOf(files[i]);
                    if (index > -1) {
                        droppedfiles.splice(index, 1);
                    }
                }
                else {
                    if (IsFileValid(files[i].name)) {

                        var isNameValid = isSpecialCharacterFileName(files[i].name.substr(0, files[i].name.lastIndexOf('.')));
                        var isExists = true;
                        if (isNameValid == true) {
                            isExists = CheckDocumentExist(finalurl, files[i].name)
                        }
                        if (!isExists && isNameValid && (isContainsThreeAlphabets(files[i].name.substr(0, files[i].name.lastIndexOf('.'))))) {
                            if (droppedControls == 0) {
                                vControl += "<thead><tr class='bulknocolor'>";
                                vControl += "<th width='30%'> Document Name";
                                vControl += "</th>";
                                vControl += "<th width='30%'> Document Status";
                                vControl += "</th>";
                                vControl += "<th width='25%'> Document Type";
                                vControl += "</th>";
                                vControl += "<th  width='25%' style='display:none;'> Document Path";
                                vControl += "</th>";
                                vControl += "<th  width='25%'>Upload Status";
                                vControl += "</th>";
                                vControl += "<th style='display:none;'></th></tr></thead>";
                            }
                            var trid = 'tr_' + droppedControls + '';
                            var vContractTitle = 'ContractTitle_' + droppedControls + '';
                            var docid = 'ddlDocumentType_' + droppedControls + '';
                            var vDocumentPath = 'PathContractTitle_' + droppedControls + '';
                            var vDocumentPathLabel = 'LabelPathContractTitle_' + droppedControls + '';
                            var checkboxid = 'chkbx_' + droppedControls + '';


                            vControl += "<tr id=" + trid + ">";
                            vControl += "<td width='30%'><label class='width60' title='date field'>" + files[i].name + "</label>";
                            vControl += "</td>";
                            vControl += "<td width='30%'><select id='ddlDocumentStatus" + droppedControls + "' name='ddlDocumentStatus" + droppedControls + "' class='f_inpt width60 validelement'>";
                            vControl += "<option value='0'>--Select--</option>";
                            vControl += "<option value='New' selected='selected'>New</option>";
                            vControl += "<option value='Awaiting Review'>Awaiting Review</option>";
                            vControl += "<option value='Reviewed'>Reviewed</option>";
                            vControl += "<option value='In Negotiation'>In Negotiation</option>";
                            vControl += "<option value='Negotiation Complete'>Negotiation Complete</option>";
                            vControl += "<option value='Ready for Signature'>Ready for Signature</option>";
                            vControl += "<option value='Awaiting Signatures'>Awaiting Signatures</option>";
                            vControl += "<option value='Signed'>Signed</option>";
                            vControl += "<option value='Active'>Active</option>";
                            vControl += "<option value='Expired'>Expired</option>";
                            vControl += "</select></td>";
                            vControl += "<td width='30%'>";
                            vControl += "<select id=" + docid + " name=" + docid + " class='f_inpt width60'>";
                            vControl += "<option value='0'>--Select--</option></td>";
                            vControl += "<td width='25%' style='display:none;'>";
                            vControl += "<input id=" + vDocumentPath + " style='display:none;' class='width60' readonly type='text' value='" + finalurl + "' name=" + vDocumentPath + ">";
                            vControl += "<label id=" + vDocumentPathLabel + "> " + finalurl + " </label>";
                            vControl += "</td>";
                            vControl += "<td style='display:none;'><img src='../Content/Images/Icon/delete.png' title='Remove' onclick='deleteDoc(" + trid + ");' style='float:right; padding-top:7px; cursor:pointer;'></td>"
                            vControl += '<td><label id="uploadprogresslbl' + uploingsectionid + '"></label><span id="idLoading' + uploingsectionid + '" style="font-size:14px; margin-right:10px;display:none;"><img src="../Content/Images/loading.gif" /> Uploading Documents...</span><span id="idLoadingstart' + uploingsectionid + '" style="font-size:14px; margin-right:10px;">Start</span><span id="idLoadingcomplete' + uploingsectionid + '" style="font-size:14px; margin-right:10px;display:none;">Uploaded</span></td></tr>';
                            documentidcount += ";" + docid;
                            droppedControls++;
                            uploingsectionid++;
                            dropexitfilename.push(files[i].name);
                        }
                        else {
                            if (!isNameValid) {
                                if (unvalidfile == "") {
                                    unvalidfile = files[i].name;
                                }
                                else {
                                    unvalidfile += "," + files[i].name;
                                }
                            }
                            else if (isExists) {
                                if (filelistexit == "") {
                                    filelistexit = files[i].name;
                                }
                                else {
                                    filelistexit += "," + files[i].name;
                                }
                            } else {
                                if (lesscharfilename == "") {
                                    lesscharfilename = files[i].name;
                                } else {
                                    lesscharfilename += "," + files[i].name;
                                }
                            }
                            var index = droppedfiles.indexOf(files[i]);
                            if (index > -1) {
                                droppedfiles.splice(index, 1);
                            }
                        }
                    }
                }
            }
        }
        else {
            if (rejectedfile == "") {
                rejectedfile = files[i].name;
            } else {
                rejectedfile += "," + files[i].name;
            }
            var index = droppedfiles.indexOf(files[i]);
            if (index > -1) {
                droppedfiles.splice(index, 1);
            }
        }
    }
    Collectcontractdocument = false;
    ContractDocumentDetails = [];
    if (FileList != null && FileList != "") {
        //swal("", "The maximum permissible size is 50MB, Please upload files which is less than 50MB");
        //swal("", "The maximum permissible size is " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB, Please upload a file which is less than " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB");
        swal("", "File exceeds " + Math.round((parseInt(localStorage.MaxRequestLength) / 1000)) + "MB size limit.");
        if (droppedfiles.length <= 0) {
            $("#tbBulkControls").empty();
            $("#file").empty();
            droppedfiles = [];
            dropexitfilename = [];
            opmlFile = null;
            droppedControls = 0;
            $("#lblFilesCount").text(droppedfiles + " file(s) uploaded.")
            loadinffdfdsf = 1;

        }
        FileList = "";
    } else {
        var alertvalue = "";
        if (filelistexit != null && filelistexit != "") {
            alertvalue = filelistexit + " already exists";
        }
        if (unvalidfile != null && unvalidfile != "") {
            if ((rejectedfile == null || rejectedfile == "") && (lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            else if ((rejectedfile == null || rejectedfile == "") && (lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            } else {
                alertvalue += ", " + unvalidfile + " File(s) names can't contain the following characters /:*\\?\"<>|#%";
            }
        }

        if (rejectedfile != null && rejectedfile != "") {
            if ((lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = rejectedfile + " File(s) are not allowed";
            else if ((lesscharfilename == null || lesscharfilename == "") && (dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + rejectedfile + " File(s) are not allowed";
            } else {
                alertvalue += ", " + rejectedfile + " File(s) are not allowed";
            }
        }

        if (lesscharfilename != null && lesscharfilename != "") {
            if ((dropexitfilenamevalue == null && dropexitfilenamevalue == "") && (alertvalue == null || alertvalue == ""))
                alertvalue = lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            else if ((dropexitfilenamevalue == null && dropexitfilenamevalue == "")) {
                alertvalue += " and " + lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            } else {
                alertvalue += ", " + lesscharfilename + " File(s) names should contain the minimum of 3 alphabets";
            }
        }

        if (dropexitfilenamevalue != null && dropexitfilenamevalue != "") {
            if ((alertvalue == null || alertvalue == ""))
                alertvalue = dropexitfilenamevalue + " File(s)  are already selected";
            else {
                alertvalue += " and " + dropexitfilenamevalue + " File(s) are already selected";
            }
        }

        if (alertvalue != null && alertvalue != "") {
            if (alertvalue.trim().indexOf('and') == 0) {
                alertvalue = alertvalue.replace('and', "");
                alertvalue = alertvalue.trim();
            }

            if (alertvalue.indexOf(',') == 0) {
                alertvalue = alertvalue.replace(',', "");
                alertvalue = alertvalue.trim();
            }
            alertvalue = alertvalue + ".";
            swal("", " '" + alertvalue.trim() + "'");
        }
        alertvalue = "";
    }

    $("#lblFilesCount").text(droppedControls + " file(s) selected.")
    $("#tbBulkControls").append(vControl);
    getdocumenttypes(documentidcount);
    document.getElementById("holderbulk").style.border = "2px dashed white";
    $('#holderbulk').css("opacity", "1");
    $('#holderbulk').css("pointer-events", "auto");
}

var holder;
//holder.ondragover = function (e) {
//    if (document.getElementById("btnAddContractDocument").style.display != "none") {
//        e.preventDefault();
//        document.getElementById("holder").style.border = "1px solid blue ";
//        document.getElementById("holder").style.opacity = "0.5";
//        e.dataTransfer.setData('text/html', "You dragged the image!");
//    }
//};
//holder.ondragend = function () { this.className = ''; return false; };
//holder.ondragleave = function () {
//    document.getElementById("holder").style.border = "1px solid white";
//    $('#holder').css("opacity", "1");
//    $('#holder').css("pointer-events", "auto");
//};
//var totalfiles = "";
//holder.ondrop = function (e) {
//    if (contractItem.Permission != 'View' && contractItem.Permission != '' && contractItem.Permission != null) {
//        $("#loadingPage").fadeIn();
//        this.className = '';
//        e.preventDefault();
//        var files = e.dataTransfer.files;
//        var fileslength = files.length;
//        if (document.getElementById("tbBulkControls").rows.length < 6) {
//            if (fileslength <= 5) {
//                for (var i = 0; i < fileslength; i++) {
//                    droppedfiles.push(files[i]);
//                }
//                totalfiles = files;
//                removedItems = [];
//                readfiles(files);
//                if (droppedfiles.length > 0) {
//                    $('#btnBulkUploadSave').css('display', '');
//                    $('#btnBulkUploadCancel').css('display', '');
//                    $("#bulkuploaddoc").dialog("option", "title", "Bulk Document Upload");
//                    $("#bulkuploaddoc").dialog("open");
//                    $("#bulkuploaddoc").height("auto");
//                }
//                else {
//                    document.getElementById("holder").style.border = "1px solid white";
//                    $('#holder').css("opacity", "1");
//                    $('#holder').css("pointer-events", "auto");
//                }
//                $("#loadingPage").fadeOut();
//            }
//            else {
//                $("#loadingPage").fadeOut();
//                swal("", "Maximum 5 file(s) only allowed at a time....!");
//                document.getElementById("holder").style.border = "1px solid white";
//                $('#holder').css("opacity", "1");
//                $('#holder').css("pointer-events", "auto");
//            }
//        }
//        else {
//            $("#loadingPage").fadeOut();
//            swal("", "Maximum 5 file(s) only allowed at a time....!");
//            document.getElementById("holder").style.border = "1px solid white";
//            $('#holder').css("opacity", "1");
//            $('#holder').css("pointer-events", "auto");
//        }
//    }
//}


function getdocumenttypes(obj) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=' + encodeURIComponent(connamechecking),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (documenttypes) {
            var datalenght = documenttypes.DocumentTypes.split(';');
            datalenght = stringArrayUnique(datalenght);
            if (obj.indexOf(';') > -1) {
                var objsplit = obj.split(';');
                for (var m = 0; m < objsplit.length; m++) {
                    if (objsplit[m] != "") {
                        if (datalenght.length > 0) {
                            for (var i = 0; i < datalenght.length; i++) { //Bug:eO311012 - 'Primary Agreement' not visible in Document Type Dropdown
                                if (datalenght[i] != null && datalenght[i] != "") { // && datalenght[i] != "Primary Agreement"
                                    $("#" + objsplit[m]).append("<option value='" + datalenght[i] + "'>" + datalenght[i] + "</option>")
                                }
                            }
                        }
                        //else {
                        //    $("#" + objsplit[m]).append("<option value='Primary Agreement'>Primary Agreement</option>")
                        //}
                        if ($("#" + objsplit[m] + " option[value='Others']").length == 0) {
                            $("#" + objsplit[m]).append("<option value='Others'>Others</option>");
                        }
                        //$("#" + objsplit[m]).find('option[value="Primary Agreement"]').prop("selected", true);
                    }
                }
            }
            else {
                //$("#" + obj).append("<option value='Primary Agreement'>Primary Agreement</option>")
                $("#" + obj).append("<option value='Others'>Others</option>")
                //$("#" + obj).find('option[value="Primary Agreement"]').prop("selected", true);
            }
        },
        error:
            function (data) {
            }
    });
}

function deleteDoc(obj) {
    $("#" + obj).empty();
    removedItems.push(obj.split(/[_ ]+/).pop());
    droppedControls--;
    document.getElementById('files').addEventListener('change', handleFileSelect, false);
    $("#lblFilesCount").text(droppedControls + " file(s) selected.");
    if (droppedControls == 0) {
        $("#tbBulkControls").empty();
        dropexitfilename = [];
    }
}

function DocumentTypeClick(object) {
    cTitle = object.id
    cFlag = object.value
    $(".hhide").hide();

    $('#loadMA').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    var contractTags = [];
    if ($('#tblDocumentType li').length <= 0) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documenttypes',
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            success: function (data) {
                $('#loadMA').empty();
                var datalenght = data.length;
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    contractTags.push(item.TypeName);
                    var article = '<li>';
                    article += '<input id="' + item.TypeName + '" type="radio" name="rdContract" class="css-checkbox" value="' + item.TypeName + '" />';
                    article += '<label for="' + item.TypeName + '" class="css-label">' + item.TypeName + '</label>';
                    article += '</li>';
                    $("#tblDocumentType").append(article);
                }
                var vCount = $("#tblDocumentType li").length;
                $('#compact-paginationDocumentType').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    type: 'ul',
                    row: 'li',
                    typeID: 'tblDocumentType',
                    cssStyle: 'compact-theme'
                });
            },
            error: function () {
                $('#loadMA').html('<p style="margin-left: 20px;">No Contract Found!</p>')
            }
        });
    } else {
        $('#loadMA').empty();
    }
    $("#browseDocumentType").dialog("option", "title", "Document Type");
    $("#browseDocumentType").dialog("open");

}

function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object
    var fileslength = files.length;
    for (var i = 0; i < fileslength; i++) {
        droppedfiles.push(files[i]);
    }

    removedItems = [];
    readfiles(files);
}
document.getElementById('files').addEventListener('change', handleFileSelect, false);


function IsFileValid(filename) {
    var ext = filename.match(/\.(.+)$/)[1];
    switch (ext) {
        case 'exe':
        //case 'zip':
        case 'rar':
            swal("", ext + " files are not allowed. File name - " + filename);
            return false;
        default:
            return true;
    }

}

function CheckDocumentExist(folderurl, documentname) {
    var isExist = false;
    if (DocumentCount > 0) {
        var vDocURL = localStorage.SPHostUrl + folderurl + documentname;
        if (Collectcontractdocument == false) {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + vContractID,
                type: 'GET',
                dataType: 'json',
                'Content-Type': 'application/json',
                cache: false,
                async: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                success: function (folder) {
                    Collectcontractdocument = true;
                    ContractDocumentDetails = folder;
                    var Exit = $.grep(ContractDocumentDetails, function (n, i) {
                        return (n.DocumentUrl == vDocURL);
                    });
                    if (Exit.length > 0) {
                        isExist = true;
                    }
                },
                error:
                    function (data) {
                        Collectcontractdocument = true;
                        isExist = false;
                    }
            });
        }
        else {
            var Exit = $.grep(ContractDocumentDetails, function (n, i) {
                return (n.DocumentUrl == vDocURL);
            });
            if (Exit.length > 0) {
                isExist = true;
            }
        }
    }
    return isExist;
}

//manoj
//For Uploading File using Chunk
var bulkdocumentuploadchunk = function () {
    if (droppedfiles.length > 0) {
        dropdownlength = droppedfiles.length;
        var fileControl = droppedfiles;
        if (fileControl.length > 0) {
            uploaders.uploaderCollection.removeAll();
            for (var i = 0; i < fileControl.length; i++) {
                cful = Object.create(chunkedFileUploader);
                cful.init(fileControl[i], i);
                uploaders.uploaderCollection.push(cful);
            }
            //$(".progressBar").progressbar(0);
            uploaders.uploadAll();
        }
    }
}

var uploaders = {
    uploaderCollection: ko.observableArray([]),
    uploadAll: function () {
        for (var i = 0; i < this.uploaderCollection().length; i++) {
            var cful = this.uploaderCollection()[i];
            cful.uploadMetaData();
        }
    }
}

var chunkedFileUploader =
{
    maxRetries: 3,
    //blockLength: 1048576,
    blockLength: 1048576,
    numberOfBlocks: 1,
    currentChunk: 1,
    retryAfterSeconds: 3,
    fileToBeUploaded: null,
    size: 0,
    fileIndex: 0,
    name: "",

    init: function (file, index) {
        this.fileToBeUploaded = file;
        this.size = file.size;
        this.name = file.name;
        this.fileIndex = index;
    },

    uploadMetaData: function () {
        this.numberOfBlocks = Math.ceil(this.size / this.blockLength);
        this.currentChunk = 1;
        var formData = new FormData();
        formData.append("AccountID", localStorage.AccountID);
        formData.append("ContractID", getParameterByName("ContractID"));
        formData.append("ParentFoldertoPass", parentfolderidtopass);
        formData.append("CreatedBy", localStorage.UserName);
        formData.append("ModifiedBy", localStorage.UserName);
        formData.append("DocumentStatus", $("#ddlDocumentStatus" + this.fileIndex).val());
        formData.append("DocumentType", $("#ddlDocumentType_" + this.fileIndex).val());
        $.ajax({
            type: "POST",
            async: false,
            data: formData,
            dataType: 'json',
            processData: false,
            headers: { 'AntiReqVerificationToken': $("#forgeryToken").val(), 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            contentType: false,
            url: "/Documents/SetMetadata?blocksCount=" + this.numberOfBlocks
                + "&fileName=" + this.name
                + "&fileSize=" + this.size
                + "&fileIndex=" + this.fileIndex,

        }).done(function (state) {
            if (state.success == true) {
                var cufl = uploaders.uploaderCollection()[state.index]
                cufl.displayStatusMessage(cufl, "0%");
                cufl.sendFile(cufl);
            }
        }).fail(function () {
            dropdownlength = dropdownlength - 1;
            this.displayStatusMessage("Failed to send MetaData");
        });
    },

    sendFile: function (uploader) {
        var start = 0,
            end = Math.min(uploader.blockLength, uploader.fileToBeUploaded.size),
            retryCount = 0,
            sendNextChunk, fileChunk;
        //this.displayStatusMessage(uploader, "");
        var cful = uploader;
        sendNextChunk = function () {
            fileChunk = new FormData();

            if (uploader.fileToBeUploaded.slice) {
                fileChunk.append('Slice', uploader.fileToBeUploaded.slice(start, end));
            }
            else if (uploader.fileToBeUploaded.webkitSlice) {
                fileChunk.append('Slice', uploader.fileToBeUploaded.webkitSlice(start, end));
            }
            else if (uploader.fileToBeUploaded.mozSlice) {
                fileChunk.append('Slice', uploader.fileToBeUploaded.mozSlice(start, end));
            }
            else {
                displayStatusMessage(cful, operationType.UNSUPPORTED_BROWSER);
                return;
            }
            jqxhr = $.ajax({
                async: true,
                url: ('/Documents/UploadChunk?id=' + uploader.currentChunk + "&fileIndex=" + uploader.fileIndex),
                data: fileChunk,
                headers: { 'AntiReqVerificationToken': $("#forgeryToken").val() },
                cache: false,
                contentType: false,
                processData: false,
                type: 'POST'
            }).fail(function (request, error) {
                if (error !== 'abort' && retryCount < maxRetries) {
                    ++retryCount;
                    setTimeout(sendNextChunk, retryAfterSeconds * 1000);
                }
                if (error === 'abort') {
                    dropdownlength = dropdownlength - 1;
                    displayStatusMessage(cful, "Aborted");
                }
                else {
                    if (retryCount === maxRetries) {
                        displayStatusMessage(cful, "Upload timed out.");
                        resetControls();
                        uploader = null;
                        dropdownlength = dropdownlength - 1;
                    }
                    else {
                        displayStatusMessage(cful, "Resuming Upload");
                    }
                }
                return;
            }).done(function (state) {
                if (state.error || state.isLastBlock) {
                    uploadedfilecount++;
                    cful.displayStatusMessage(cful, "100%");
                    //manoj
                    CreateDocumentListNewBlob(state.DocDetails);
                    $('#idLoading' + state.FileIndex).css('display', 'none');
                    $('#idLoadingstart' + state.FileIndex).css('display', 'none');
                    $('#idLoadingcomplete' + state.FileIndex).css('display', '');
                    if (uploadedfilecount == dropdownlength) {
                        PrvFolderselection = '';
                        $("#tbBulkControls").empty();
                        $("#file").empty();
                        droppedfiles = [];
                        dropexitfilename = [];
                        //opmlFile = null;
                        droppedControls = 0;
                        $("#lblFilesCount").text(droppedfiles + " file(s) uploaded.")
                        $('#tbBulkControls').css("pointer-events", "auto");
                        $("#bulkuploaddoc").dialog("close");
                        applybulkdocumetdraganddrop();
                        $("#divchunkfileupload").css("display", "none");
                        parentfolderidtopass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        setTimeout(refreshdocuemnt, 10000);
                        //manoj
                        return;
                    }
                }
                ++cful.currentChunk;
                start = (cful.currentChunk - 1) * cful.blockLength;
                end = Math.min(cful.currentChunk * cful.blockLength, cful.fileToBeUploaded.size);
                retryCount = 0;
                cful.updateProgress(cful);
                if (cful.currentChunk <= cful.numberOfBlocks) {
                    sendNextChunk();
                }
            });
        }
        sendNextChunk();
    },

    displayStatusMessage: function (uploader, message) {
        if (typeof (message) != 'undefined' && message != null && message != "") {
            var updatevalue = uploader.fileIndex + 1;
            if (message == "100%") {
                message = "Completed";
            }
            $("#uploadprogresslbl" + updatevalue).text(message);
            $('#idLoading' + updatevalue).css('display', 'none');
            $('#idLoadingstart' + updatevalue).css('display', 'none');
            $('#idLoadingcomplete' + updatevalue).css('display', 'none');
        }
    },

    updateProgress: function (uploader) {
        var progress = uploader.currentChunk / uploader.numberOfBlocks * 100;
        if (progress <= 100) {
            //$("#progressBar" + uploader.fileIndex).progressbar("option", "value", parseInt(progress));
            var percentage = Math.round(progress);
            uploader.displayStatusMessage(uploader, percentage + "%");
        }
    }
}
//For Uploading File using Chunk
//manoj

function bulkdocumentupload1() {
    if (requiredValidator('formBulkControls', false)) {
        //manoj
        holderbulk.ondragover = function (e) { return false; }
        holderbulk.ondragend = function () { return false; }
        holderbulk.ondragleave = function () { return false; }
        holderbulk.ondrop = function (ev) { return false; }
        //manoj
        document.getElementById("tbBulkControls").style.pointerEvents = "none";
        for (var axh = 1; axh < document.getElementById("tbBulkControls").rows.length; axh++) {
            $('#idLoading' + axh).css('display', '');
            $('#idLoadingstart' + axh).css('display', 'none');
            $('#idLoadingcomplete' + axh).css('display', 'none');
        }
        $('#btnBulkUploadSave').css('display', 'none');
        $('#btnBulkUploadCancel').css('display', 'none');
        //manoj
        $(".cldraganddrop").css('display', '');
        //manoj

        //manoj
        var formDataFolder = new FormData();
        //formDataFolder.append("opmlFile" + ii + "", droppedfiles[ii]);
        formDataFolder.append("AccountID", localStorage.AccountID);
        formDataFolder.append("ContractID", getParameterByName("ContractID"))
        formDataFolder.append("CreatedBy", localStorage.UserName);
        formDataFolder.append("ModifiedBy", localStorage.UserName);
        formDataFolder.append("DocumentAuthor", localStorage.UserName);

        var headeridst = $("#lblContractTitle").text();
        headeridst = headeridst.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
        var finalurlst = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
        finalurlst = (finalurlst.charAt(0) != '/') ? '/' + finalurlst : finalurlst;
        finalurlst = ((finalurlst.substr(finalurlst.length - 1)) != "/") ? finalurlst + "/" : finalurlst;
        finalurlst = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurlst + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurlst + headeridst + '/';
        formDataFolder.append("FolderPathFinal", finalurlst);
        if (typeof (formDataFolder) != 'undefined' && formDataFolder != null) {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/foldercreation',
                type: 'POST',
                data: formDataFolder,
                cache: false,
                contentType: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken },
                processData: false,
                success: function (ParentFolderdata) {
                    var loadinffdfdsf = 1;
                    var uplosingdetailseperation = null;
                    var formData = new FormData();
                    var opmlFile = $('#files')[0];
                    if (opmlFile.files.length > 0) {
                        var droppedfileslength = droppedfiles.length;
                        var canCreate = false;
                        for (var ii = 0; ii < droppedfileslength; ii++) {
                            if (ii == droppedfileslength - 1) {
                                canCreate = true;
                            }
                            else {
                                canCreate = false;
                            }
                            formData.append("opmlFile" + ii + "", droppedfiles[ii]);
                            formData.append("AccountID", localStorage.AccountID);
                            formData.append("ContractID", getParameterByName("ContractID"));
                            formData.append("ParentFoldertoPass", ParentFolderdata);
                            if (uplosingdetailseperation == null) {
                                uplosingdetailseperation = $("#formBulkControls").serialize();

                                var arravaluesplitop = uplosingdetailseperation.split("&ddlDocumentStatus");
                                formData.append("SearializeControls", arravaluesplitop[0]);
                                uplosingdetailseperation = null;
                                for (var arrop = 1; arrop < arravaluesplitop.length; arrop++) {
                                    if (uplosingdetailseperation == null) {
                                        uplosingdetailseperation = arravaluesplitop[arrop];
                                    }
                                    else {
                                        uplosingdetailseperation = uplosingdetailseperation + "&ddlDocumentStatus" + arravaluesplitop[arrop];
                                    }
                                }
                            }
                            else {
                                var jointandsplitop = "ddlDocumentStatus" + uplosingdetailseperation;
                                var arravaluesplithereop = jointandsplitop.split("&ddlDocumentStatus");
                                formData.append("SearializeControls", arravaluesplithereop[0]);
                                uplosingdetailseperation = null;
                                for (var arrrop = 1; arrrop < arravaluesplithereop.length; arrrop++) {
                                    if (uplosingdetailseperation == null) {
                                        uplosingdetailseperation = arravaluesplithereop[arrrop];
                                    }
                                    else {
                                        uplosingdetailseperation = uplosingdetailseperation + "&ddlDocumentStatus" + arravaluesplithereop[arrr];
                                    }
                                }

                            }
                            formData.append("CreatedBy", localStorage.UserName);
                            formData.append("ModifiedBy", localStorage.UserName);
                            formData.append("DocumentAuthor", localStorage.UserName);

                            //Sridhar
                            formData.append("Counterparty", $("#lblCounterparty").text());

                            if (contractItem.IsStandard == "Yes")
                                formData.append("IsStandard", "Yes");
                            else
                                formData.append("IsStandard", "No");
                            if (typeof (formData) != 'undefined' && formData != null) {
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/bulkupload/Chunckmultifile',
                                    type: 'POST',
                                    data: formData,
                                    cache: false,
                                    contentType: false,
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, 'CreateParentFolder': canCreate },
                                    processData: false,
                                    success: function (data) {
                                        CreateDocumentListNewBlob(data);
                                        $('#idLoading' + loadinffdfdsf).css('display', 'none');
                                        $('#idLoadingstart' + loadinffdfdsf).css('display', 'none');
                                        $('#idLoadingcomplete' + loadinffdfdsf).css('display', '');
                                        loadinffdfdsf++;
                                        if (droppedfileslength < loadinffdfdsf) {
                                            //GetdocumentIsStandard(vContractID);
                                            //manoj
                                            //if (documentview == null || documentview == "" || documentview == 'folder') {
                                            //    GetdocumentIsStandard(vContractID);
                                            //} else {
                                            //    DisplayDocument(documentview);
                                            //}
                                            //$("#hdnFolderDocumentView").text('');
                                            //$("#hdnShowAllTextValue").html('');
                                            PrvFolderselection = '';
                                            //Bind primary and pined document based on new feature
                                            //if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                            //    CreateDocumentListPinView(vContractID);
                                            //}
                                            //manoj
                                            //var headerid = $("#lblContractTitle").text();
                                            //headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                                            //var finalurl = "";
                                            //if ($("#hdnContractDocumentsUrl").text() != "") {
                                            //}
                                            //else {
                                            //    if ($('#hdContAreaDocLibName').val() != "") {
                                            //        finalurl = $('#hdContAreaDocLibName').val();
                                            //        if (finalurl.charAt(0) != '/') {
                                            //            finalurl = '/' + finalurl;
                                            //        }
                                            //        if ((finalurl.substr(finalurl.length - 1)) != "/") {
                                            //            finalurl = finalurl + "/";
                                            //        }
                                            //        finalurl = finalurl + headerid + '/';
                                            //    }
                                            //    else {
                                            //        finalurl = '/Contract Documents/' + headerid + '/';

                                            //    }
                                            //    $("#hdnContractDocumentsUrl").text(finalurl);
                                            //    $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                            //}
                                            $("#tbBulkControls").empty();
                                            $("#file").empty();
                                            droppedfiles = [];
                                            dropexitfilename = [];
                                            opmlFile = null;
                                            droppedControls = 0;
                                            $("#lblFilesCount").text(droppedfiles + " file(s) uploaded.")
                                            loadinffdfdsf = 1;
                                            uplosingdetailseperation == null;
                                            $('#tbBulkControls').css("pointer-events", "auto");
                                            $("#bulkuploaddoc").dialog("close");
                                            applybulkdocumetdraganddrop();
                                        }
                                    },
                                    error: function (ex) {
                                        $('#tbBulkControls').css("pointer-events", "auto");
                                        $('#btnBulkUpload').attr('disabled', 'disabled');
                                        $('#idLoading').css('display', 'none');
                                        $("#loadingPage").fadeOut();
                                        return false;
                                    }
                                });
                            }
                            formData = new FormData();
                        }
                    } else {
                        var droppedfileslength = droppedfiles.length;
                        var canCreate = false;
                        for (var i = 0; i < droppedfileslength; i++) {
                            if (i == 0) {
                                canCreate = true;
                            }
                            else {
                                canCreate = false;
                            }
                            formData.append("opmlFile" + i + "", droppedfiles[i]);
                            formData.append("AccountID", localStorage.AccountID);
                            formData.append("ContractID", getParameterByName("ContractID"));
                            formData.append("ParentFoldertoPass", ParentFolderdata);
                            if (uplosingdetailseperation == null) {
                                uplosingdetailseperation = $("#formBulkControls").serialize();


                                var arravaluesplit = uplosingdetailseperation.split("&ddlDocumentStatus");
                                formData.append("SearializeControls", arravaluesplit[0]);
                                uplosingdetailseperation = null;
                                for (var arr = 1; arr < arravaluesplit.length; arr++) {
                                    if (uplosingdetailseperation == null) {
                                        uplosingdetailseperation = arravaluesplit[arr];
                                    }
                                    else {
                                        uplosingdetailseperation = uplosingdetailseperation + "&ddlDocumentStatus" + arravaluesplit[arr];
                                    }
                                }
                            }
                            else {
                                var jointandsplit = "ddlDocumentStatus" + uplosingdetailseperation;
                                var arravaluesplithere = jointandsplit.split("&ddlDocumentStatus");
                                formData.append("SearializeControls", arravaluesplithere[0]);
                                uplosingdetailseperation = null;
                                for (var arrr = 1; arrr < arravaluesplithere.length; arrr++) {
                                    if (uplosingdetailseperation == null) {
                                        uplosingdetailseperation = arravaluesplithere[arrr];
                                    }
                                    else {
                                        uplosingdetailseperation = uplosingdetailseperation + "&ddlDocumentStatus" + arravaluesplithere[arrr];
                                    }
                                }

                            }
                            formData.append("CreatedBy", localStorage.UserName);
                            formData.append("ModifiedBy", localStorage.UserName);
                            formData.append("DocumentAuthor", localStorage.UserName);

                            //Sridhar
                            formData.append("Counterparty", $("#lblCounterparty").text());

                            if (contractItem.IsStandard == "Yes")
                                formData.append("IsStandard", "Yes");
                            else
                                formData.append("IsStandard", "No");

                            if (typeof (formData) != 'undefined' && formData != null) {
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/bulkupload/Chunckmultifile',
                                    type: 'POST',
                                    data: formData,
                                    cache: false,
                                    contentType: false,
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken, 'CreateParentFolder': canCreate },
                                    processData: false,
                                    success: function (data) {
                                        CreateDocumentListNewBlob(data);
                                        $('#idLoading' + loadinffdfdsf).css('display', 'none');
                                        $('#idLoadingstart' + loadinffdfdsf).css('display', 'none');
                                        $('#idLoadingcomplete' + loadinffdfdsf).css('display', '');
                                        loadinffdfdsf++;
                                        if (droppedfileslength < loadinffdfdsf) {
                                            //GetdocumentIsStandard(vContractID);
                                            //manoj
                                            //if (documentview == null || documentview == "" || documentview == 'folder') {
                                            //    GetdocumentIsStandard(vContractID);
                                            //} else {
                                            //    DisplayDocument(documentview);
                                            //}
                                            //$("#hdnFolderDocumentView").text('');
                                            //$("#hdnShowAllTextValue").html('');
                                            PrvFolderselection = '';
                                            //Bind primary and pined document based on new feature
                                            //if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                            //    CreateDocumentListPinView(vContractID);
                                            //}
                                            //manoj
                                            //var headerid = $("#lblContractTitle").text();
                                            //headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                                            //var finalurl = "";
                                            //if ($("#hdnContractDocumentsUrl").text() != "") {
                                            //}
                                            //else {
                                            //    if ($('#hdContAreaDocLibName').val() != "") {
                                            //        finalurl = $('#hdContAreaDocLibName').val();
                                            //        if (finalurl.charAt(0) != '/') {
                                            //            finalurl = '/' + finalurl;
                                            //        }
                                            //        if ((finalurl.substr(finalurl.length - 1)) != "/") {
                                            //            finalurl = finalurl + "/";
                                            //        }
                                            //        finalurl = finalurl + headerid + '/';
                                            //    }
                                            //    else {
                                            //        finalurl = '/Contract Documents/' + headerid + '/';

                                            //    }
                                            //    $("#hdnContractDocumentsUrl").text(finalurl);
                                            //    $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                            //}
                                            $("#tbBulkControls").empty();
                                            $("#file").empty();
                                            droppedfiles = [];
                                            dropexitfilename = [];
                                            opmlFile = null;
                                            droppedControls = 0;
                                            $("#lblFilesCount").text(droppedfiles + " file(s) uploaded.")
                                            loadinffdfdsf = 1;
                                            uplosingdetailseperation == null;
                                            $('#tbBulkControls').css("pointer-events", "auto");
                                            $("#bulkuploaddoc").dialog("close");
                                            applybulkdocumetdraganddrop();
                                        }
                                    },
                                    error: function (ex1) {
                                        $('#tbBulkControls').css("pointer-events", "auto");
                                        $('#btnBulkUpload').attr('disabled', 'disabled');
                                        $('#idLoading').css('display', 'none');
                                        $("#loadingPage").fadeOut();
                                        return false;
                                    }
                                });
                            }
                            formData = new FormData();
                        }
                    }
                },
                error: function (ex2) {
                    swal("", "Please Try Again Later....!");
                    return false;
                }
            });
        }
        //manoj
    }
}

//manoj
function bulkdocumentupload() {
    if (requiredValidator('formBulkControls', false)) {
        holderbulk.ondragover = function (e) { return false; }
        holderbulk.ondragend = function () { return false; }
        holderbulk.ondragleave = function () { return false; }
        holderbulk.ondrop = function (ev) { return false; }
        var createdParentFolder = false;
        document.getElementById("tbBulkControls").style.pointerEvents = "none";
        for (var axh = 1; axh < document.getElementById("tbBulkControls").rows.length; axh++) {
            $('#idLoading' + axh).css('display', '');
            $('#idLoadingstart' + axh).css('display', 'none');
            $('#idLoadingcomplete' + axh).css('display', 'none');
        }
        $('#btnBulkUploadSave').css('display', 'none');
        $('#btnBulkUploadCancel').css('display', 'none');
        $(".cldraganddrop").css('display', '');
        parentfolderidtopass = "";
        dropdownlength = 0;
        uploadedfilecount = 0;
        if ((documentview == 'folder' || documentview == "" || documentview == null)) {
            if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                var valuetocheck = $("#showAll")[0].lastChild;
                parentfolderidtopass = valuetocheck.id;
            } else {
                createdParentFolder = true;
            }
        } else {
            if (contractparentfolderid != null && contractparentfolderid != "" && typeof (contractparentfolderid) != "undefined") {
                parentfolderidtopass = contractparentfolderid;
            } else {
                parentfolderidtopass = "";
                createdParentFolder = true;
            }

        }
        if (!createdParentFolder) {
            bulkdocumentuploadchunk();
        }
        else {
            var formDataFolder = new FormData();
            formDataFolder.append("AccountID", localStorage.AccountID);
            formDataFolder.append("ContractID", getParameterByName("ContractID"))
            formDataFolder.append("CreatedBy", localStorage.UserName);
            formDataFolder.append("ModifiedBy", localStorage.UserName);
            formDataFolder.append("DocumentAuthor", localStorage.UserName);

            var headeridst = $("#lblContractTitle").text();
            headeridst = headeridst.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
            var finalurlst = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
            finalurlst = (finalurlst.charAt(0) != '/') ? '/' + finalurlst : finalurlst;
            finalurlst = ((finalurlst.substr(finalurlst.length - 1)) != "/") ? finalurlst + "/" : finalurlst;
            finalurlst = ($('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? finalurlst + $('#showAll').text().replace(/ \/ /g, '/') + '/' : finalurlst + headeridst + '/';
            formDataFolder.append("FolderPathFinal", finalurlst);
            if (typeof (formDataFolder) != 'undefined' && formDataFolder != null) {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/foldercreation',
                    type: 'POST',
                    data: formDataFolder,
                    cache: false,
                    contentType: false,
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, 'RefreshToken': localStorage.RefreshToken },
                    processData: false,
                    success: function (ParentFolderdata) {
                        //parentFoldeIDtoPass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        parentfolderidtopass = ParentFolderdata;
                        bulkdocumentuploadchunk();
                    },
                    error: function (ex2) {
                        parentfolderidtopass = "";
                        dropdownlength = 0;
                        uploadedfilecount = 0;
                        return false;
                    }
                });
            }
        }
    }
}
function bulkdocumentuploadCancel() {
    $("#tbBulkControls").empty();
    dropexitfilename = [];
    $("#file").empty();
    droppedfiles.splice(0, droppedfiles.length)
    droppedControls = 0;
    $("#bulkuploaddoc").dialog("close");
    applybulkdocumetdraganddrop();
    document.getElementById("holder").style.border = "2px dashed white";
    $("#ulDocument").css("min-height", "0px");
    $('#holder').css("opacity", "1");
    $('#holder').css("pointer-events", "auto");
    document.getElementById("holderbulk").style.border = "2px dashed white";
    $('#holderbulk').css("opacity", "1");
    $('#holderbulk').css("pointer-events", "auto");
    parentfolderidtopass = "";
    dropdownlength = 0;
    uploadedfilecount = 0;
}

function CreateFolderToMove(parentFolderName, ContarctNameselection) {
    $("#browseFolderMove").html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    newurl = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?documentlibrary=' + parentFolderName;
    $.ajax({
        url: newurl,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (folder) {
            try {
                $("#btnaddsubfolder").css("display", "");
                $("#browseFolderMove").html('<div id="treeviewFolderMoveOption" class="demo-section"></div><input id="txtFolder" type="hidden" /><input id="txtFolderURL" type="hidden" />');
                $('#treeviewFolderMoveOption').empty();
                $('#treeviewFolderMoveOption').tree({
                    data: folder,
                    autoOpen: 0
                });
            } catch (ex) {
                // alert(ex);
            }
        },
        error:
            function (data) {
                $("#btnaddsubfolder").css("display", "none");
                $("#browseFolderMove").html('No items found.');
            }
    });
}

function FileToMove(passingurl) {
    $("#loadingPage").fadeIn();
    var formData1 = new FormData();
    formData1.append("ContractID", getParameterByName('ContractID'));
    formData1.append("AccountID", localStorage.AccountID);
    formData1.append("ModifiedBy", localStorage.UserName);
    var splturl = passingurl.split($("#hdnContractDocumentsUrlFixed").text());
    var urltoaccess = "";
    var typetoaccess = "";
    if ($("#hdntreeviewFolderMove").val() == 'move') {
        urltoaccess = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/movedocument?documentid=' + multipleChecksDocumentID + '&newurl=' + splturl[1] + '&validationurldetails=' + urldetailsforcontact;
        typetoaccess = "PUT";
    } else {
        urltoaccess = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?documents=' + multipleChecksDocumentID + '&locationurl=' + urldetailsforcontact + '&newfolder=' + splturl[1];
        typetoaccess = "POST";
    }
    $.ajax({
        url: urltoaccess,
        type: typetoaccess,
        data: formData1,
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        processData: false,
        success: function (document) {
            fileurldetails = "";
            //manoj
            if (documentview == null || documentview == "" || documentview == 'folder') {
                if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                    var selectedfoldervalue = $('#showAll').find("a");
                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                    var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                    showfolderdocuments(parentdocumentdetails);
                }
                else {
                    BindDocument(vContractID);
                }
            } else {
                DisplayDocument(documentview);
            }
            //GetContractPendingAction(true, "BindPeoples");
            $("#hdnFolderDocumentView").text('');
            $("#hdnShowAllTextValue").html('');
            PrvFolderselection = '';
            //Bind primary and pined document based on new feature
            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                CreateDocumentListPinView(vContractID);
            }
            //manoj
            $("#loadingPage").fadeOut();
            $("#documentMultiActions").css('display', 'none');
            $("#treeviewFolderMove").dialog("close");
        },
        error: function (document) {
            fileurldetails = "";
            //manoj
            if (documentview == null || documentview == "" || documentview == 'folder') {
                if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                    var selectedfoldervalue = $('#showAll').find("a");
                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                    var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                    showfolderdocuments(parentdocumentdetails);
                }
                else {
                    BindDocument(vContractID);
                }
            } else {
                DisplayDocument(documentview);
            }
            //GetContractPendingAction(true, "BindPeoples");
            $("#hdnFolderDocumentView").text('');
            $("#hdnShowAllTextValue").html('');
            PrvFolderselection = '';
            //Bind primary and pined document based on new feature
            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                CreateDocumentListPinView(vContractID);
            }
            //manoj
            $("#loadingPage").fadeOut();
            $("#documentMultiActions").css('display', 'none');
            $("#treeviewFolderMove").dialog("close");
        }
    });
}
function MultipleDocumentRemove() {
    var documentName = multipleChecksDocumentName;
    var documentID = multipleChecksDocumentID;
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>Untag</span> selected documents from this Contract?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
     function (confirmed) {
         if (confirmed) {
             $("#loadingPage").fadeIn();
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/untag?contractid=' + getParameterByName('ContractID') + '&documentid=' + documentID,
                 type: 'PUT',
                 dataType: 'json',
                 "Content-Type": "application/json",
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, 'RefreshToken': localStorage.RefreshToken },
                 cache: false,
                 success: function (data) {
                     $("#loadingPage").fadeOut();
                     //manoj
                     if (documentview == null || documentview == "" || documentview == 'folder') {
                         if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                             var selectedfoldervalue = $('#showAll').find("a");
                             var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                             var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                             var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                             showfolderdocuments(parentdocumentdetails);
                         }
                         else {
                             BindDocument(vContractID);
                         }
                     } else {
                         DisplayDocument(documentview);
                     }
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     $("#hdnFolderDocumentView").text('');
                     $("#hdnShowAllTextValue").html('');
                     PrvFolderselection = '';
                     //Bind primary and pined document based on new feature
                     if ($("#hdnnewdocumentfeature").text() == "Yes") {
                         CreateDocumentListPinView(vContractID);
                     }
                     //manoj                     
                 },
                 error: function () {
                     $("#loadingPage").fadeOut();
                 }
             });
         }
         return;
     });

}

function ViewGeneric(obj) {
    vGlobalObjForGeneric = obj;
    $("#loadingPage").fadeIn();
    $("#tblGeneric").empty();
    $("#tblGenericheader").empty();
    $("#liSelectedRU").empty();
    var art = '<tr><td><article style="width:100%; text-align:center;">';
    art += '<input id="txtSearchBoxGeneric" class="f_inpt cl width80" type="text"  style="text-wrap:none" placeholder="Type to Search" />';
    art += '<img title="Search" style="cursor: pointer; position: relative; left: -40px; top:-2px;" onclick="javascript: SearchGeneric();" src="../Content/Images/search_over.png" />';
    art += "<a href='javascript:void(0)' class='linkPickerClear' onclick='ClearGeneric();'>Clear</a>";
    art += '</article></td></tr>';
    $("#tblGenericheader").append(art);

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractfieldbydisplayname?fielddisplayname=' + encodeURIComponent(obj.id),
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var prevSelected = $("#" + obj.title).val();
            arrprevRU = [];
            $.each(prevSelected.split(";"), function () {
                arrprevRU.push($.trim(this));
            });
            var arraysplitRU = [];
            myArrayRU = [];
            arraysplitRU = data[0].ChoiceValues.split("\n")
            var obj1 = {};
            for (var i = 0; i < arraysplitRU.length; i++) {
                if (!(arraysplitRU[i] in obj1)) {
                    if (arraysplitRU[i].trim() != "") {
                        myArrayRU.push(arraysplitRU[i]);
                    }
                }
                obj1[arraysplitRU[i]] = true;
            }
            var resultfound = true;
            var myArraylength = myArrayRU.length;
            $("#browseGeneric").data('param_1', obj.title).dialog("option", "title", obj.id + " Picker");
            CreateReportUnitList(0);
            var vCount = myArraylength;

            $('#compact-paginationGeneric').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tblGeneric',
                cssStyle: 'compact-theme',
                listname: 'ReportUnit'
            });
            $('#compact-paginationGeneric').css("display", "");
            $("#txtSearchBoxGeneric").autocomplete({
                source: myArrayRU,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxGeneric").val(uidetails.item.label);
                    SearchGeneric();
                }
            });
            $("#loadingPage").fadeOut();
            $("#browseGeneric").dialog("open");

        },
        error:
            function (data) {
                $("#tblGeneric").html("No item found.");
                $("#browseGeneric").dialog("open");
                $("#loadingPage").fadeOut();
            }
    });

    $('#txtSearchBoxGeneric').keypress(function (e) {
        if ($('#txtSearchBoxGeneric').val() != "") {
            if (e.keyCode == 13) {
                $(".ui-autocomplete").css('display', 'none');
                SearchGeneric();
            }
        }
    });
}
function ClearGeneric() {
    $('#loadGen').html('<img src="../Content/Images/icon/loading.gif">');
    $("#tblGeneric").find("tr:gt(0)").remove();
    $("#txtSearchBoxGeneric").val("")
    var searchKeyword = "";
    filtergeneric(searchKeyword);
}
function SearchGeneric() {
    $('#loadGen').html('<img src="../Content/Images/icon/loading.gif">Searching...');
    $("#tblGeneric").find("tr:gt(0)").remove();
    var searchKeyword = $("#txtSearchBoxGeneric").val();
    filtergeneric(searchKeyword);
}
function filtergeneric(searchKeyword) {
    $("#tblGeneric").empty();
    $("#liSelectedRU").empty();
    multipleChecksDocumentID = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractfieldbydisplayname?fielddisplayname=' + encodeURIComponent(vGlobalObjForGeneric.id),
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var prevSelected = $("#" + vGlobalObjForGeneric.title).val();
            arrprevRU = [];
            $.each(prevSelected.split(";"), function () {
                arrprevRU.push($.trim(this));
            });
            var arraysplitRU = [];
            myArrayRU = [];
            arraysplitRU = data[0].ChoiceValues.split("\n")
            var obj1 = {};
            for (var i = 0; i < arraysplitRU.length; i++) {
                if (!(arraysplitRU[i] in obj1)) {
                    if (arraysplitRU[i].trim() != "") {
                        if (arraysplitRU[i].toLowerCase().indexOf(searchKeyword.toLowerCase()) > -1 || searchKeyword == "") {
                            myArrayRU.push(arraysplitRU[i]);
                        }
                        obj1[arraysplitRU[i]] = true;
                    }
                }
            }
            var resultfound = true;
            var myArraylength = myArrayRU.length;
            CreateReportUnitList(0);

            var vCount = myArraylength;

            var vCount = $("#tblGeneric tr").length;

            $('#compact-paginationGeneric').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tblGeneric',
                cssStyle: 'compact-theme',
                listname: 'ReportUnit'
            });
            $('#compact-paginationGeneric').css("display", "");
            $("#txtSearchBoxGeneric").autocomplete({
                source: arraysplitRU,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxGeneric").val(uidetails.item.label);
                    SearchGeneric();
                }
            });
            $('#loadGen').empty();
        },
        error:
            function (data) {
                $('#loadGen').empty();
                $("#tblGeneric").html('No item found.')
            }
    });

    $('#txtSearchBoxGeneric').keypress(function (e) {
        if ($('#txtSearchBoxGeneric').val() != "") {
            if (e.keyCode == 13) {
                $(".ui-autocomplete").css('display', 'none');
                SearchGeneric();
            }
        }
    });
}

function BindUpdatedContractDetails(contractid) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
        processData: false,
        success: function (item) {
            contractItem = item;
            vContractTile = item.ContractTitle;

            BindContractPeopleMetadata(item);
            BindContractRolesMetadata();
            ContractTopActions();
            if (item.InRecycleBin == "Yes") {
                $("#hdnPermission").val('View');
                $("#liContractstatus").hide()
                $("#dvRecyclebinMessage").css('display', '');
            }
            else {
                $("#hdnPermission").val(item.Permission);

            }
            ApplyPermissionToMenu($("#hdnPermission").val());
            if (item.IsStandard == "Yes") {
                //$("#iStandardCont").css('display', '');
                //$("#iNonStandardCont").css('display', 'none');

                $("#liContractStandard").css('display', 'none');
                $("#liContractNonStandard").css('display', '');
            } else {
                //$("#iStandardCont").css('display', 'none');
                //$("#iNonStandardCont").css('display', '');
                $("#liContractStandard").css('display', '');
                $("#liContractNonStandard").css('display', 'none');
            }
            if (item.InRecycleBin == "Yes" && item.Permission == "Manage") {
                $("#DeleteContract").show();
                $("#DeleteContractRecycle").show();
            }
            BindContractTermDetail(contractItem);
            $("#loadingPage").fadeOut();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();

            BindContractTermDetail(contractItem);

            $("#loadingPage").fadeOut();
        },
        error: function (data) {
            $("#loadingPage").fadeOut();
        }
    });
}

$("#rad_ReplaceComputer").click(function () {
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
});

$("#rad_ReplaceTemplate").click(function () {
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
    $("#lblTemplateDescription").text("");
});

$("#btnCancel").click(function () {
    $('#txtAddUser').val('').trigger('chosen:updated');
    $("#ddlPermission").val("0");
    $("#divBtn").hide();
});

$("#btnSave").click(function () {
    if (requiredValidator("addEditPermission")) {
        var string = "";
        var UserDesignation = "";
        var arrApprovers = $.map(contractItem.Approvers.split(";"), $.trim);
        var arrReviewers = $.map(contractItem.Reviewers.split(";"), $.trim);
        var arrContractManagers = $.map(contractItem.ContractManagers.split(";"), $.trim);
        var arrRequestor = $.map(contractItem.Requestor.split(";"), $.trim);
        var PermissionToUser = $("#txtAddUser").val();
        var vLastRow = $("#newPopup li:last").attr('id');
        var totalPermissionCount = "1";
        if (typeof vLastRow == "undefined") {
            totalPermissionCount = "1";
        }
        else {
            vLastRow = $("#newPopup li").length;
            totalPermissionCount = parseInt(vLastRow);
            totalPermissionCount = parseInt(totalPermissionCount) + 1;
        }
        $(PermissionToUser).each(function (i, item) {
            if ($.inArray(item, arrApprovers) > -1) {
                UserDesignation = "(Approver)";
            }
            else if ($.inArray(item, arrReviewers) > -1) {
                UserDesignation = "(Reviewer)";
            }
            else if ($.inArray(item, arrContractManagers) > -1) {
                UserDesignation = "(Contract Owner)";
            }
            else if ($.inArray(item, arrRequestor) > -1) {
                UserDesignation = "(Requestor)";
            }
            string += "<li id='PermissionList" + totalPermissionCount + "'><div class='share-pop-up-Middle'><div><p id='PermissionUser" + totalPermissionCount + "'>" + item + "</p>";
            string += "<span >" + UserDesignation + "</span></div></div>";
            string += "<div class='share-pop-up-Right'><span id='UserPermission" + totalPermissionCount + "'><select id='PermissionOption" + totalPermissionCount + "'>";
            if ($("#ddlPermission option:selected").text() == "Full Control") {
                string += "<option value='FullControl' selected >Full Control</option>";
                string += "<option value='Read/Write'>Read/Write</option>";
                string += "<option value='ReadOnly'>Read Only</option>";
            }
            else if ($("#ddlPermission option:selected").text() == "Read/Write") {
                string += "<option value='FullControl'  >Full Control</option>";
                string += "<option value='Read/Write' selected >Read/Write</option>";
                string += "<option value='ReadOnly'>Read Only</option>";
            }
            else if ($("#ddlPermission option:selected").text() == "Read Only") {
                string += "<option value='FullControl'>Full Control</option>";
                string += "<option value='Read/Write'>Read/Write</option>";
                string += "<option value='ReadOnly' selected >Read Only</option>";
            }
            string += "</select><img id=" + totalPermissionCount + " src='/Content/Images/close.png' onclick='Remove(this)'/></span></div></li>";
            arrPermsnUser.push(item.trim());
            totalPermissionCount = parseInt(totalPermissionCount) + 1;
            UserDesignation = "";
        });
        $('#newPopup').append(string);
        var arrForPermission = [];

        $("#txtAddUser").empty();

        arrUser = arrUser.filter(function (x) { return arrPermsnUser.indexOf(x) < 0 })
        var datalenght = arrUser.length;
        for (var i = 0; i < datalenght; i++) {
            var sUserName = arrUser[i];
            var article = '<option value="' + sUserName + '">' + sUserName + '</option>';
            $("#txtAddUser").append(article);

        }
        $("#txtAddUser").chosen();
        $('#txtAddUser').trigger('chosen:updated');
        $("#ddlPermission").val("0");

        $("#divBtn").hide();
    }

});

function Remove(obj) {
    swal({
        title: '',
        text: "Are you sure you want to <span style='font-weight:700'>delete</span>?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
      function (confirmed) {
          if (confirmed) {
              var strPermissionUser = "";
              strPermissionUser = $("#PermissionUser" + obj.id).html();
              $("#txtAddUser").empty();
              arrUser.push(strPermissionUser);
              var i = arrPermsnUser.indexOf(strPermissionUser);
              if (i != -1)
                  arrPermsnUser.splice(i, 1);
              var datalenght = arrUser.length;
              for (var i = 0; i < datalenght; i++) {
                  var sUserName = arrUser[i];
                  var article = '<option value="' + sUserName + '">' + sUserName + '</option>';
                  $("#txtAddUser").append(article);
              }
              $("#txtAddUser").chosen();
              $('#txtAddUser').trigger('chosen:updated');
              $("#PermissionList" + obj.id).remove();
          }
          return;
      });

}

$("#txtAddUser").change(function () {
    $("#divBtn").show();

});
$('#chkPublicContract').change(function () {
    var isChecked = this.checked;
    if (isChecked) {
        $("#chkpermission").attr("disabled", "disabled");
        $("#chkpermission").prop('checked', false);
    } else {
        $("#chkpermission").removeAttr("disabled");
        $("#chkpermission").prop('checked', false);
    }
});

function GetValueAndPopulateManager(controlname, manager, values) {
    var vLastRow = $("#newPopup li:last").attr('id');
    var strPermission = "";
    var strnewManager = "";
    var arrFullControl = $.map(contractItem.FullControlPermissions.split(";"), $.trim);
    var arrReadWrite = $.map(contractItem.ReadWritePermissions.split(";"), $.trim);
    var arrReadOnly = $.map(contractItem.ReadOnlyPermissions.split(";"), $.trim);
    var arrAccessUser = arrFullControl.concat(arrReadWrite);
    arrAccessUser = arrAccessUser.concat(arrReadOnly);
    var arrApprovers = $.map(contractItem.Approvers.split(";"), $.trim);
    var arrReviewers = $.map(contractItem.Reviewers.split(";"), $.trim);
    var arrContractManagers = $.map(contractItem.ContractManagers.split(";"), $.trim);
    var arrRequestor = $.map(contractItem.Requestor.split(";"), $.trim);
    var totalPermissionCount = "1";
    if (typeof vLastRow == "undefined") {
        totalPermissionCount = "1";
    }
    else {
        totalPermissionCount = parseInt(vLastRow.replace("PermissionList", ""));
        totalPermissionCount += 1;
    }

    if (values != null && values != "") {
        var string = "";
        var res = values.split(";");
        var reslength = res.length;
        for (var i = 0; i < reslength; i++) {
            var strUserRole = "";
            if ($.inArray(res[i].trim(), arrAccessUser) > -1) {
                if ($.inArray(res[i].trim(), arrApprovers) > -1) {
                    strnewManager = ",Approver";
                }
                else if ($.inArray(res[i].trim(), arrReviewers) > -1) {
                    strnewManager = ",Reviewer";
                }
                else if ($.inArray(res[i].trim(), arrContractManagers) > -1) {
                    strnewManager = ",Contract Owner";
                }
                else if ($.inArray(res[i].trim(), arrRequestor) > -1) {
                    strnewManager = ",Requestor";
                }
                if (strnewManager != "") {
                    strUserRole = manager + strnewManager;
                }
                if ($.inArray(res[i].trim(), arrFullControl) > -1) { strPermission = "Full Control"; }
                else if ($.inArray(res[i].trim(), arrReadWrite) > -1) { strPermission = "Read/Write"; }

                arrAdminUser.push(res[i].trim());
            }
            if (strnewManager == "") {
                strUserRole = manager;
            }
            string += "<li id='PermissionList" + totalPermissionCount + "'><div class='share-pop-up-Middle'><div><p id='PermissionUser" + totalPermissionCount + "'>" + res[i].trim() + "</p>";
            string += "<span id='UserRole" + totalPermissionCount + "'>" + "(" + strUserRole + ")" + "</span></div></div>";
            if (controlname == "ddlFullControl") {
                strPermission = "Full Control";
                string += "<div class='share-pop-up-Right'><span id='UserPermission" + totalPermissionCount + "'>" + strPermission + "</span></div></li>";
            }
            else if (controlname == "ddlReadOnly") {
                string += "<div class='share-pop-up-Right'><span id='UserPermission" + totalPermissionCount + "'>";
                if (strPermission == "Full Control" || strPermission == "Read/Write") {
                    string += "<select id='PermissionOption" + totalPermissionCount + "'>";
                    if (strPermission == "Full Control") {
                        string += "<option value='FullControl' selected >Full Control</option>";
                        string += "<option value='Read/Write'>Read/Write</option>";
                        string += "<option value='ReadOnly'>Read Only</option>";
                    }
                    else if (strPermission == "Read/Write") {
                        string += "<option value='FullControl'  >Full Control</option>";
                        string += "<option value='Read/Write' selected >Read/Write</option>";
                        string += "<option value='ReadOnly'>Read Only</option>";
                    }
                    string += "</select>";
                }
                else
                    if (strPermission == "" || strPermission == "Read Only") {
                        strPermission = "Read Only";
                        string += "" + strPermission + "";
                    }
                string += "</span></div></li>";
            }
            strPermission = "";
            strnewManager = "";

            totalPermissionCount++;
        } $('#newPopup').append(string);

    }
}

function GetValueAndPopulateUsers(controlname, values) {
    var UserDesignation = "";
    var arrApprovers = $.map(contractItem.Approvers.split(";"), $.trim);
    var arrReviewers = $.map(contractItem.Reviewers.split(";"), $.trim);
    var arrContractManagers = $.map(contractItem.ContractManagers.split(";"), $.trim);
    var arrRequestor = $.map(contractItem.Requestor.split(";"), $.trim);

    if (values != null) {
        var vLastRow = $("#newPopup li:last").attr('id');
        var totalPermissionCount = "1";
        if (typeof vLastRow == "undefined") {
            totalPermissionCount = "1";
        }
        else {
            totalPermissionCount = parseInt(vLastRow.replace("PermissionList", ""));
            totalPermissionCount += 1;
        }
        var string = "";
        var res = values.split(";");
        var reslength = res.length;
        for (var i = 0; i < reslength; i++) {
            if (res[i].trim() != "" && res[i].trim() != null) {
                if ($.inArray(res[i].trim(), arrAdminUser) <= -1) {

                    if ($.inArray(res[i].trim(), arrApprovers) > -1) {
                        UserDesignation = "(Approver)";
                    }
                    else if ($.inArray(res[i].trim(), arrReviewers) > -1) {
                        UserDesignation = "(Reviewer)";
                    }
                    else if ($.inArray(res[i].trim(), arrContractManagers) > -1) {
                        UserDesignation = "(Contract Owner)";
                    }
                    else if ($.inArray(res[i].trim(), arrRequestor) > -1) {
                        UserDesignation = "(Requestor)";
                    }
                    string += "<li id='PermissionList" + totalPermissionCount + "'><div class='share-pop-up-Middle'><div><p id='PermissionUser" + totalPermissionCount + "'>" + res[i].trim() + "</p>";
                    string += "<span >" + UserDesignation + "</span></div></div>";
                    string += "<div class='share-pop-up-Right'><span id='UserPermission" + totalPermissionCount + "'><select  id='PermissionOption" + totalPermissionCount + "'>";
                    if (controlname == "ddlFullControl") {
                        string += "<option value='FullControl' selected >Full Control</option>";
                        string += "<option value='Read/Write'>Read/Write</option>";
                        string += "<option value='ReadOnly'>Read Only</option>";
                    }
                    else if (controlname == "ddlReadWrite") {
                        string += "<option value='FullControl'  >Full Control</option>";
                        string += "<option value='Read/Write' selected >Read/Write</option>";
                        string += "<option value='ReadOnly'>Read Only</option>";
                    }
                    else if (controlname == "ddlReadOnly") {
                        string += "<option value='FullControl'>Full Control</option>";
                        string += "<option value='Read/Write'>Read/Write</option>";
                        string += "<option value='ReadOnly' selected >Read Only</option>";
                    }
                    string += "</select>";
                    if (UserDesignation == "") {
                        string += "<img id=" + totalPermissionCount + " src='/Content/Images/close.png' onclick='Remove(this)'/>";
                    }
                    string += "</span></div></li>";
                    arrPermsnUser.push(res[i].trim());
                    totalPermissionCount++;
                    UserDesignation = "";
                }

            }
        } $('#newPopup').append(string);
    }
}


function GetValueAndPopulateManagerNew(contractItem, item) {
    contractAccessUsers = [];
    var users = [];
    if (contractItem.ProjectManager != null && contractItem.ProjectManager != "" && contractItem.ProjectManager != "Not Assigned") {
        users = contractItem.ProjectManager.split(';');
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });
    }

    if (contractItem.BusinessAreaOwners != null && contractItem.BusinessAreaOwners != "" && contractItem.BusinessAreaOwners != "Not Assigned") {
        users = contractItem.BusinessAreaOwners.split(';');
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });
    }

    if (contractItem.ContractAreaAdministrators != null && contractItem.ContractAreaAdministrators != "" && contractItem.ContractAreaAdministrators != "Not Assigned") {
        users = contractItem.ContractAreaAdministrators.split(';');
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });
    }

    users = $.map(contractItem.Approvers.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.Reviewers.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.ContractManagers.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.Requestor.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.SharedWith.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });

    users = $.map(contractItem.Requestor.split(";"), $.trim);
    $.each(users, function (index, value) {
        contractAccessUsers.push(value.trim());
    });
    $(ContractRoles).each(function () {
        var itemfield = $(this)[0];
        var itemfieldPerm = $(this)[1];
        if ($(RecvMetadatavaluetofinalize).find(itemfield).text() != "undefined" && $(RecvMetadatavaluetofinalize).find(itemfield).text() != null && $(RecvMetadatavaluetofinalize).find(itemfield).text() != "") {
            users = $.map($(RecvMetadatavaluetofinalize).find(itemfield).text().split(";"), $.trim);
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }
    });
    if (item != null && item != "") {
        users = $.map(item.FullControl.split(";"), $.trim);
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });

        users = $.map(item.Contribute.split(";"), $.trim);
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });

        users = $.map(item.Readonly.split(";"), $.trim);
        $.each(users, function (index, value) {
            contractAccessUsers.push(value.trim());
        });

    } else {

        if (contractItem.FullControlPermissions != null && contractItem.FullControlPermissions != "") {
            users = contractItem.FullControlPermissions.split(';');
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }

        if (contractItem.ReadWritePermissions != null && contractItem.ReadWritePermissions != "") {
            users = contractItem.ReadWritePermissions.split(';');
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }


        if (contractItem.ReadOnlyPermissions != null && contractItem.ReadOnlyPermissions != "") {
            users = contractItem.ReadOnlyPermissions.split(';');
            $.each(users, function (index, value) {
                contractAccessUsers.push(value.trim());
            });
        }
    }

    contractAccessUsers = contractAccessUsers.filter(function (e) { return e });
    contractAccessUsers = contractAccessUsers.sort();
    contractAccessUsers = stringArrayUnique(contractAccessUsers).sort();

    arrPermsnUser = contractAccessUsers;
    var vLastRow = $("#newPopup li:last").attr('id');

    var totalPermissionCount = "1";
    if (typeof vLastRow == "undefined") {
        totalPermissionCount = "1";
    }
    else {
        vLastRow = $("#newPopup li").length;
        totalPermissionCount = vLastRow;
        totalPermissionCount = parseInt(totalPermissionCount) + 1;
    }

    var string = "";
    $.each(contractAccessUsers, function (index, value) {
        var vUserClass = '';
        var userTitle = '';
        var fullpermission = false;
        var strUserRole = "";
        var strPermission = "";
        if ($.inArray(value, $.map(contractItem.BusinessAreaOwners.split(";"), $.trim)) > -1) {
            strUserRole = "Business Area Owner";
            strPermission = "Full Control";
            fullpermission = true;
        }
        if ($.inArray(value, $.map(contractItem.ProjectManager.split(";"), $.trim)) > -1) {
            strPermission = "Full Control";
            fullpermission = true;
            if (strUserRole != "") {
                strUserRole += ",Project Manager";
            }
            else {
                strUserRole = "Project Manager";
            }
        }


        if ($.inArray(value, $.map(contractItem.ContractAreaAdministrators.split(";"), $.trim)) > -1) {
            if (strPermission == "") {
                strPermission = "Read Only";
            }
            if (strUserRole != "") {
                strUserRole += ",Contract Area Administrator";
            }
            else {
                strUserRole = "Contract Area Administrator";
            }
        }

        if ($.inArray(value, $.map(contractItem.Approvers.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Approver";
            }
            else {
                strUserRole = "Approver";
            }
        }

        if ($.inArray(value, $.map(contractItem.Reviewers.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Reviewer";
            }
            else {
                strUserRole = "Reviewer";
            }
        }

        if ($.inArray(value, $.map(contractItem.ContractManagers.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Contract Owner";
            }
            else {
                strUserRole = "Contract Owner";
            }
        }
        if ($.inArray(value, $.map(contractItem.Requestor.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += ",Requestor";
            }
            else {
                strUserRole = "Requestor";
            }
        }

        $(ContractRoles).each(function () {
            var itemfield = $(this)[0];
            var itemfieldPerm = $(this)[1];
            var itemfieldDis = $(this)[2];
            if ($(RecvMetadatavaluetofinalize).find(itemfield).text() != "undefined" && $(RecvMetadatavaluetofinalize).find(itemfield).text() != null && $(RecvMetadatavaluetofinalize).find(itemfield).text() != "") {
                if ($.inArray(value, $.map($(RecvMetadatavaluetofinalize).find(itemfield).text().split(";"), $.trim)) > -1) {
                    if (strUserRole != "") {
                        strUserRole += "," + itemfieldDis;
                    }
                    else {
                        strUserRole = itemfieldDis;
                    }
                }
            }
        });


        if (item != null && item != "") {
            if ($.inArray(value, $.map(item.FullControl.split(";"), $.trim)) > -1) {
                strPermission = "Full Control";
            }

            if ($.inArray(value, $.map(item.Contribute.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read/Write";
                }
            }

            if ($.inArray(value, $.map(item.Readonly.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read Only";
                }
            }
        } else {
            if ($.inArray(value, $.map(contractItem.FullControlPermissions.split(";"), $.trim)) > -1) {
                strPermission = "Full Control";
            }

            if ($.inArray(value, $.map(contractItem.ReadWritePermissions.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read/Write";
                }
            }

            if ($.inArray(value, $.map(contractItem.ReadOnlyPermissions.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read Only";
                }
            }
        }

        if ($.inArray(value, $.map(contractItem.SharedWith.split(";"), $.trim)) > -1) {
            if (strUserRole != "") {
                strUserRole += "";
                strPermission = "Share";
                vUserClass = "Share"
            }
            else {
                strUserRole = "";
                strPermission = "Share";
                vUserClass = "Share";
            }
        }

        if (item != null && item != "") {

            if ($.inArray(value, $.map(item.FullControl.split(";"), $.trim)) > -1) {
                strPermission = "Full Control";
            }

            if ($.inArray(value, $.map(item.Contribute.split(";"), $.trim)) > -1) {
                if (strPermission == "" || strPermission == "Read Only") {
                    strPermission = "Read/Write";
                }
            }

            if ($.inArray(value, $.map(item.Readonly.split(";"), $.trim)) > -1) {
                if (strPermission == "") {
                    strPermission = "Read Only";
                }
            }

        }

        if (vUserClass == '') {
            if (vActiveUsers.indexOf(value.trim()) < 0 && vActiveUsers.length > 0) {
                vUserClass = 'disabled_item_link';
                usertitle = "title='This user is no longer available.'";
            }
        }
        else {
            vUserClass = '';
            usertitle = '';
        }

        string += "<li id='PermissionList" + totalPermissionCount + "'><div class='share-pop-up-Middle'><div class='Link_UserProfile'><p id='PermissionUser" + totalPermissionCount + "' class='" + vUserClass + "' " + usertitle + ">" + value.trim() + "</p>";

        if (strUserRole != "") {
            string += "<span id='UserRole" + totalPermissionCount + "'>" + "(" + strUserRole + ")" + "</span></div></div>";

        }
        else {
            string += "<span id='UserRole" + totalPermissionCount + "'>" + "" + strUserRole + "" + "</span></div></div>";
        }

        if (fullpermission) {
            strPermission = "Full Control";
            string += "<div class='share-pop-up-Right'><span class='sortSpanUserPermission' id='UserPermission" + totalPermissionCount + "'><label>" + strPermission + "</label></span></div></li>";

        }
        else {
            string += "<div class='share-pop-up-Right'><span class='sortSpanUserPermission' id='UserPermission" + totalPermissionCount + "'>";
            if (strPermission == "Full Control" || strPermission == "Read/Write" || strPermission == "Read Only") {
                string += "<select id='PermissionOption" + totalPermissionCount + "'>";
                if (strPermission == "Full Control") {
                    string += "<option value='FullControl' selected >Full Control</option>";
                    string += "<option value='Read/Write'>Read/Write</option>";
                    string += "<option value='ReadOnly'>Read Only</option>";
                }
                else if (strPermission == "Read/Write") {
                    string += "<option value='FullControl'  >Full Control</option>";
                    string += "<option value='Read/Write' selected >Read/Write</option>";
                    string += "<option value='ReadOnly'>Read Only</option>";
                }
                else if (strPermission == "Read Only") {
                    string += "<option value='FullControl'>Full Control</option>";
                    string += "<option value='Read/Write'>Read/Write</option>";
                    string += "<option value='ReadOnly' selected>Read Only</option>";
                }
                string += "</select>";
            }
            else {
                if (strPermission == "") {
                    strPermission = "Read Only";
                    string += "<label>" + strPermission + "</label>";
                }
                else if (strPermission == "Share") {
                    strPermission = "Shared As Link";
                    string += "<label>" + strPermission + "</label>";
                }
            }

            if (strUserRole == "" && strPermission != "Share" && strPermission != "Shared As Link") {
                string += "<img id=" + totalPermissionCount + " src='/Content/Images/close.png' onclick='Remove(this)'/>";
            }
            string += "</span></div></li>";
        }

        strPermission = "";
        totalPermissionCount = parseInt(totalPermissionCount) + 1;
    });

    $('#newPopup').append(string);
    var nonEditLI = $('#newPopup li').has('span.sortSpanUserPermission label');
    var editLI = $('#newPopup li').has('span.sortSpanUserPermission select');

    $('#newPopup').empty();

    $(nonEditLI).each(function () {
        $('#newPopup').append($(this));
    });

    $(editLI).each(function () {
        $('#newPopup').append($(this));
    });
}



var holderbulk = document.getElementById('holderbulk');
function applybulkdocumetdraganddrop() {
    holderbulk.ondragover = function (e) {
        e.preventDefault();
        document.getElementById("holderbulk").style.border = "2px dashed #428bca ";
        document.getElementById("holderbulk").style.opacity = "0.5";
        e.dataTransfer.setData('text/html', "You dragged the image!");
    };
    holderbulk.ondragend = function () { this.className = ''; return false; };
    holderbulk.ondragleave = function () {
        document.getElementById("holderbulk").style.border = "2px dashed white";
        $('#holderbulk').css("opacity", "1");
        $('#holderbulk').css("pointer-events", "auto");
    };

    var totalfiles = "";
    holderbulk.ondrop = function (e) {
        if (contractItem.Permission != 'View' && contractItem.Permission != '' && contractItem.Permission != null) {
            $("#loadingPage").fadeIn();
            this.className = '';
            e.preventDefault();
            var files = e.dataTransfer.files;
            var fileslength = files.length;
            //if (document.getElementById("tbBulkControls").rows.length < 6) {
            //    if (((document.getElementById("tbBulkControls").rows.length - 1) + fileslength) <= 5) {
            for (var i = 0; i < fileslength; i++) {
                droppedfiles.push(files[i]);
            }
            totalfiles = files;
            removedItems = [];
            readfiles(files);
            if (droppedfiles.length > 0) {
                $(".cldraganddrop").css('display', 'none');
                $('#btnBulkUploadSave').css('display', '');
                $('#btnBulkUploadCancel').css('display', '');
                $("#bulkuploaddoc").dialog("option", "title", "Bulk Document Upload");
                $("#bulkuploaddoc").dialog("open");
                $("#bulkuploaddoc").height("auto");
                //applybulkdocumetdraganddrop();
            }
            else {
                document.getElementById("holderbulk").style.border = "2px dashed white";
                $('#holderbulk').css("opacity", "1");
                $('#holderbulk').css("pointer-events", "auto");
            }
            $("#loadingPage").fadeOut();
            //    }
            //    else {
            //        $("#loadingPage").fadeOut();
            //        swal("", "Maximum 5 file(s) only allowed at a time....!");
            //        document.getElementById("holderbulk").style.border = "2px dashed white";
            //        $('#holderbulk').css("opacity", "1");
            //        $('#holderbulk').css("pointer-events", "auto");
            //    }
            //}
            //else {
            //    $("#loadingPage").fadeOut();
            //    swal("", "Maximum 5 file(s) only allowed at a time....!");
            //    document.getElementById("holderbulk").style.border = "2px dashed white";
            //    $('#holderbulk').css("opacity", "1");
            //    $('#holderbulk').css("pointer-events", "auto");
            //}
        }
    }
}

var vCounterpartyFields = [];

function getCounterpartyprimaryFields() {

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/primaryfields',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (metadataFields) {
            vCounterpartyFields = [];
            $(metadataFields).each(function (i, item) {
                if ((item.FieldName == "CounterpartyName") || (item.FieldName == "CounterpartyType") || (item.FieldName == "Status")) {
                    if (item.FieldName == "CounterpartyType") {
                        vCounterpartyFields.push(item.FieldName)
                    }
                }
                else {
                    vCounterpartyFields.push(item.FieldName)
                }
            });

        },
        error: function (metadataFields) {
            vCounterpartyFields = [];
        }
    });
}




function liRemoveSelectedCouterParty(obj) {
    var child = obj.parentNode;
    //manoj
    var tablebind = $('#tblCounterparties').DataTable();
    $.each($('input:checkbox[name="Counterparty"]:checked', tablebind.rows().nodes()), function () {
        if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null) {
            if (unescape($.trim(this.value)) == child.textContent) {
                this.checked = false;
            }
        }
    });
    child.parentNode.removeChild(child);

    if ($('input:checkbox[name="Counterparty"]:checked').length == $('input:checkbox[name="Counterparty"]').length && $('input:checkbox[name="Counterparty"]:checked').length != 0) {
        $("#selectallCounterParty").attr('checked', true);
    } else {
        $("#selectallCounterParty").attr('checked', false);
    }
    //manoj

}


function funselectall(obj) {
    if (obj.checked) { // check select status  
        $('input:checkbox[name=Generic]').attr('checked', true);
        //checkMultipleDocumentsd("");
        checkGeneric("");
    } else {
        $('input:checkbox[name=Generic]').attr('checked', false);

        //checkMultipleDocumentsd("");
        checkGeneric("");
    }
}


function checkGeneric(object) {
    $('#liSelectedRU').empty();
    var checkboxcheck = true;
    $('input[type=checkbox][name="Generic"]').each(function () {
        var DocumentID = this.id;
        var duplicatechecking = false;
        var isChecked = this.checked;
        if (isChecked) {
            if ((multipleChecksDocumentIDd.indexOf(DocumentID.trim())) == -1) {
                multipleChecksDocumentIDd.push(DocumentID.trim());
            }
        }
        else {
            if (multipleChecksDocumentIDd.indexOf(DocumentID.trim()) != -1) {
                var ind = multipleChecksDocumentIDd.indexOf(DocumentID.trim());
                multipleChecksDocumentIDd.splice(ind, 1);
            }
            checkboxcheck = false;
        }
    });
    for (var spl = 0; spl < multipleChecksDocumentIDd.length; spl++) {
        if (multipleChecksDocumentIDd[spl].trim() != "") {
            $('#liSelectedRU').append('<span style="font-size:13px;">' + multipleChecksDocumentIDd[spl].trim() + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedRU(this);" style="float:right" /></span>');
        }
    }
    if (checkboxcheck == true) {
        $("#selectall").attr('checked', true);
    }
    else {
        $("#selectall").attr('checked', false);
    }
    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}

function liRemoveSelectedRU(obj) {
    var child = obj.parentNode;
    var child12 = child.firstChild.nodeValue;
    child12 = child12.trim();
    if (multipleChecksDocumentIDd.indexOf(child12) != -1) {
        var ind = multipleChecksDocumentIDd.indexOf(child12);
        multipleChecksDocumentIDd.splice(ind, 1);
    }

    $("#" + child12).attr('checked', false);
    var checkboxcheck = true;
    child.parentNode.removeChild(child);
    $('input[type=checkbox][name="Generic"]').each(function () {
        var DocumentID = this.value;
        var duplicatechecking = false;
        if (multipleChecksDocumentIDd.indexOf(DocumentID.trim()) > -1) {
        }
        else {
            this.checked = false;
        }
        var isChecked = this.checked;
        if (!isChecked) {
            checkboxcheck = false;
        }
    });
    if (checkboxcheck == true) {
        $("#selectall").attr('checked', true);
    }
    else {
        $("#selectall").attr('checked', false);
    }
}

function CreateReportUnitList(page) {
    $("#tblGeneric").css("display", "");
    var startIndex = page * 10;
    var endIndex = startIndex + 10;
    $('#tblGeneric').empty();
    if (endIndex > myArrayRU.length) endIndex = myArrayRU.length;
    $("#spResult").html((startIndex + 1) + '&nbsp;to&nbsp;' + endIndex + '&nbsp;of&nbsp;' + myArrayRU.length);
    var resultfound = false;
    var checkboxchecking = true;
    if (startIndex == endIndex) {
        var art = "No items found.";
        $("#tblGeneric").html(art);
        checkboxchecking = false;
        $('#loadGen').empty();
    }
    else {
        $("#tblGeneric").html('');
        var spltarrprevRUstr = arrprevRU.toString();
        if (spltarrprevRUstr.indexOf(";") > -1) {
            var spltarrprevRU = spltarrprevRUstr.split(';');
            arrprevRU = [];
            for (var arrli = 0; arrli < spltarrprevRU.length; arrli++) {
                if (spltarrprevRU[arrli].trim() != "") {
                    arrprevRU.push(spltarrprevRU[arrli]);
                }
            }
        }
        for (var i = startIndex; i < endIndex; i++) {
            var article = "";
            if (i == startIndex) {
                article += '<tr><th><input id="selectall" onclick="funselectall(this);" type="checkbox"/> Select/Deselect All</th></tr>';
            }

            article += '<tr><td>';
            if (arrprevRU != null && multipleChecksDocumentIDd.length > 0) {
                if (arrprevRU.indexOf(myArrayRU[i]) >= 0 && multipleChecksDocumentIDd.indexOf(myArrayRU[i].trim()) > -1) {
                    article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                }
                else if (multipleChecksDocumentIDd.indexOf(myArrayRU[i].trim()) > -1) {
                    article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                }
                else {
                    article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);"  class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                    checkboxchecking = false;
                }
            }
            else if (arrprevRU.indexOf(myArrayRU[i]) >= 0 && multipleChecksDocumentIDd.length == 0) {
                article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
            }
            else if (multipleChecksDocumentIDd.indexOf(myArrayRU[i].trim()) > -1) {
                article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
            }
            else {
                article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);"  class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                checkboxchecking = false;
            }
            article += '<label for="' + myArrayRU[i] + '" class="css1-label">' + myArrayRU[i] + '</label>';
            article += '</td></tr>';
            $("#tblGeneric").append(article);
            $('#loading').empty();
            resultfound = true;

        }
    }
    if (checkboxchecking == true) {
        $("#selectall").attr('checked', true);
    }
    else {
        $("#selectall").attr('checked', false);
    }
    var checkingsdivchild = document.getElementById("liSelectedRU").hasChildNodes();
    if (!checkingsdivchild) {
        if (multipleChecksDocumentIDd.length > 0) {
            for (var spl = 0; spl < multipleChecksDocumentIDd.length; spl++) {
                if (multipleChecksDocumentIDd[spl].trim() != "") {
                    $('#liSelectedRU').append('<span style="font-size:13px;">' + multipleChecksDocumentIDd[spl].trim() + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedRU(this);" style="float:right" /></span>');
                }
            }
        }
        else {
            var idtext = $("#browseGeneric").data('param_1');
            if (typeof idtext != 'undefined') {
                var textvalid = $('#' + idtext).val();
                if (typeof textvalid != 'undefined' && textvalid != "") {
                    var splitmulicheckforbind = textvalid.split(';');
                    for (var spl = 0; spl < splitmulicheckforbind.length; spl++) {
                        if (splitmulicheckforbind[spl].trim() != "") {
                            $('#liSelectedRU').append('<span style="font-size:13px;">' + splitmulicheckforbind[spl] + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedRU(this);" style="float:right" /></span>');
                            multipleChecksDocumentIDd.push(splitmulicheckforbind[spl].trim());
                        }
                    }
                }
                else {
                    checkGeneric("");
                }
            }
            else {
                checkGeneric("");
            }
        }
    }
    $('#loadGen').empty();
}

function ViewProjects() {
    $('#loadPro').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tblProjects tr').length <= 0) {
        ProjectsFunc();
    } else {
        $('#loadPro').empty();
        $("#browseProjects").dialog("option", "title", "Project Picker");
        $("#browseProjects").dialog("open");
    }
}

function ViewProjectTasks() {
    if ($("#Project").val() != "") {
        $('#loadPro').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
        ProjectTasksFunc();
    } else {
        //  alert("Please select project")
        swal("", "Please select project");
    }
}

function ProjectsFunc() {
    $("#tblProjects").empty();
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $('#loadPro').empty();
            var arr = [];
            var counterpartyTags = [];
            $.each($('#Project').val().split(";"), function () {
                arr.push($.trim(this));
            });
            var datalength = data.length;
            if (datalength > 0) {
                for (var i = 0; i < datalength; i++) {
                    var item = data[i];
                    var article = "";
                    if (i == 0) {
                        article += '<tr><th>Project Name</th></tr>';
                    }

                    article += '<tr><td>';
                    if (arr.indexOf(item.ProjectName) >= 0) {
                        article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" checked value="' + item.ProjectName + '" />';
                    } else {
                        article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" value="' + item.ProjectName + '" />';
                    }
                    article += '<label for="Pro' + item.RowKey + '" class="css1-label">' + item.ProjectName + '</label>';

                    article += '<input type="text" name="ProjectManager" style="display: none;" value="' + item.ProjectManager + '" />';
                    article += '</td></tr>';

                    counterpartyTags.push(item.ProjectName);
                    $("#tblProjects").append(article);
                }

                $("#txtSearchBoxProjects").autocomplete({
                    source: counterpartyTags,
                    minLength: 1,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxProjects").val(uidetails.item.label);
                        SearchProjects();
                    }
                });

                var vCount = $("#tblProjects tr").length;
                $('#compact-paginationProjects').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    currentPage: 1,
                    cssStyle: 'compact-theme',
                    type: 'tdbody',
                    row: 'tr',
                    typeID: 'tblProjects'
                });
                $("#loadingPage").fadeOut();
                $("#browseProjects").dialog("option", "title", "Project Picker");
                $("#browseProjects").dialog("open");
            } else {
                $("#loadingPage").fadeOut();
                $("#browseProjects").dialog("option", "title", "Project Picker");
                $("#browseProjects").dialog("open");
                $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
            }
        },
        error: function () {
            $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });
}

function ProjectTasksFunc() {
    $("#tblProjectTasks").empty();
    $("#loadingPage").fadeIn();

    var vVarDataLength = 0;
    var isProjectSelected = false;
    var nproject = [];
    $.each($('#Project').val().split(";"), function () {
        nproject.push($.trim(this));
    });
    nproject = nproject.sort();
    $.each(nproject, function () {
        isProjectSelected = true;
        var vVarProjectName = $.trim(this);
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/projecttasks?projectnames=' + encodeURIComponent(vVarProjectName),
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            success: function (data) {
                $('#loadProTask').empty();
                var arr = [];
                var counterpartyTags = [];
                $.each($('#ProjectTask').val().split(";"), function () {
                    arr.push($.trim(this));
                });
                var datalength = data.length;
                if (datalength > 0) {
                    for (var i = 0; i < datalength; i++) {
                        var item = data[i];
                        var article = "";
                        if (i == 0) {
                            if (arr.indexOf(vVarProjectName + ':Default Task') >= 0) {
                                article += '<tr><th><input id="' + vVarProjectName + '" onclick="funselectalltasks(this);" type="checkbox" checked name="ProjectTask" value="' + vVarProjectName + ':Default Task" class="float_left margin-right-5" />' + vVarProjectName + ' (Default Task)</th></tr>';
                            } else {
                                article += '<tr><th><input id="' + vVarProjectName + '" onclick="funselectalltasks(this);" type="checkbox" name="ProjectTask" value="' + vVarProjectName + ':Default Task" class="float_left margin-right-5" />' + vVarProjectName + ' (Default Task)</th></tr>';
                            }
                        }

                        article += '<tr><td>';
                        if (arr.indexOf(vVarProjectName + ':' + item.TaskID) >= 0) {
                            article += '<input id="' + vVarProjectName + item.RowKey + '" type="checkbox" title="' + vVarProjectName + '" onclick="funselecttask(this);" name="ProjectTask" class="css1-checkbox" checked   value="' + vVarProjectName + ':' + item.TaskID + '" />';
                        } else {
                            article += '<input id="' + vVarProjectName + item.RowKey + '" type="checkbox" title="' + vVarProjectName + '" onclick="funselecttask(this);" name="ProjectTask" class="css1-checkbox"  value="' + vVarProjectName + ':' + item.TaskID + '" />';
                        }
                        article += '<label for="' + vVarProjectName + item.RowKey + '" class="css1-label">' + item.TaskID + ':' + item.TaskDescription + '</label>';
                        article += '</td></tr>';

                        counterpartyTags.push(item.TaskID);
                        $("#tblProjectTasks").append(article);
                    }
                    if (vVarDataLength == 0) {
                        vVarDataLength = datalength;
                    }

                } else {

                }
            },
            error: function () {
                $('#loadProTask').empty();
            }
        });
    });

    if (vVarDataLength == 0) {
        $("#loadingPage").fadeOut();
        $("#browseProjectTasks").dialog("option", "title", "Project Task Picker");
        $("#browseProjectTasks").dialog("open");
        $('#loadProTask').empty();
        if (!isProjectSelected) {
            $('#loadProTask').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    } else {
        $("#txtSearchBoxProjectTasks").autocomplete({
            source: counterpartyTags,
            minLength: 1,
            focus: function (event, ui) {
                return false;
            }
        });

        var vCount = $("#tblProjectTasks tr").length;
        $('#compact-paginationProjectTasks').pagination({
            items: vCount,
            itemsOnPage: 10,
            typeID: 'tblProjectTasks',
            cssStyle: 'compact-theme'
        });
        $("#loadingPage").fadeOut();
        $("#browseProjectTasks").dialog("option", "title", "Project Task Picker");
        $("#browseProjectTasks").dialog("open");
    }

}

//function AddProject() {
//    if ($('input[type="radio"][name=PickProject]:checked').val() == 'Existing') {
//        var vProjects = "";
//        var vProjectName = "";
//        var arrTasks = [];
//        $('input:checkbox[name="Project"]:checked').each(function () {
//            vProjectName = this.value;
//            if (vProjects == "") {
//                vProjects = this.value;
//                projectManager = this.nextSibling.nextSibling.value;

//                $.each($('#ProjectTask').val().split(";"), function () {
//                    if (vProjectName == $.trim(this).split(':')[0]) {
//                        arrTasks.push($.trim(this));
//                    }
//                });
//            }
//            else {
//                vProjects += "; " + this.value;
//                projectManager += ";" + this.nextSibling.nextSibling.value;
//                $.each($('#ProjectTask').val().split(";"), function () {
//                    if (vProjectName == $.trim(this).split(':')[0]) {
//                        arrTasks.push($.trim(this));
//                    }
//                });
//            }
//        });
//        $('#ProjectTask').val(arrTasks.join("; "));

//        if (vProjects != "") {
//            $('#Project').val(vProjects);
//            return true;
//        } else {
//            //alert('No project has been selected.');
//            swal("", "No project has been selected.");
//            return false;
//        }
//    }
//    // else { SaveProject(); }
//}

//function AddProjectTask() {
//    var vProjectTasks = "";
//    $('input:checkbox[name="ProjectTask"]:checked').each(function () {
//        if (vProjectTasks == "") {
//            vProjectTasks = this.value;
//        }
//        else {
//            vProjectTasks += "; " + this.value;
//        }
//    });

//    if (vProjectTasks != "") {
//        $('#ProjectTask').val(vProjectTasks);
//        return true;
//    } else {
//        //alert('No task has been selected.');
//        swal("", "No task has been selected.");
//        return false;
//    }
//}

function SaveProjectTask() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project?projectName=' + $("#txtProjectName").val().trim(),
        type: 'GET',
        dataType: 'json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#txtProjectRowKey").val(data.RowKey);
        }
    });
    var txtProjectManager = '';
    var sprojectManager = $("#ddlProjectManager").val();
    var bao = '';
    $(sprojectManager).each(function (i, itm) {
        if (bao == '') {
            bao = itm;
        }
        else {
            bao += ";" + itm;
        }
    });
    if (bao == '')
        txtProjectManager = 'Not Assigned';
    else
        txtProjectManager = bao;

    $("#loadingPage").fadeIn();
    $.ajax({
        url: '/Settings/SaveProjectTask',
        type: 'POST',
        dataType: 'json',
        headers: {
            'AntiReqVerificationToken': $("#forgeryToken").val(), 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: {
            // RowKey: $("#txtTaskRowKey").val(),
            ProjectRowKey: $("#txtProjectRowKey").val(),
            TaskID: 'DEFAULT',
            TaskDescription: '' + $("#txtProjectName").val() + '(Default Task)',
            Manager: txtProjectManager,
            StartDate: '',
            EndDate: '',
        },
        cache: false,
        success: function (person) {
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();
            }
    });

}

//function GetValuesAndAutoPopulate(controlname, values) {
//    var multiarr = [];
//    var res = values != null ? values.split(";") : [];
//    var reslength = res.length;
//    var resValue = "";
//    for (var i = 0; i < reslength; i++) {
//        //   multiarr.push(res[i].trim());
//        resValue = res[i].trim();
//        if (resValue != "") {
//            if ($('#' + controlname + ' option[value="' + resValue + '"]').length > 0 && multiarr.indexOf(resValue) == -1)
//                multiarr.push(resValue);
//        }
//    }

//    ChosenOrder.setSelectionOrder($('#' + controlname), multiarr, true);

//}

function ClearProjectSearch() {
    $('#txtSearchBoxProjects').val('');
    $('input:checkbox[name=Project]').attr('checked', false);
    $("#Project").val("");
    projectManager = "";
    SearchProjects();
}
function SearchProjects() {
    $("#tblProjects").html('');
    $('#loadPro').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project?searchkeyword=' + encodeURIComponent($("#txtSearchBoxProjects").val()) + '&customquery=&sortbyfield=ProjectName&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            var arr = [];
            $.each($('#Project').val().split(";"), function () {
                arr.push($.trim(this));
            });
            var datalength = data.length;
            var article = '';
            for (var i = 0; i < datalength; i++) {
                var item = data[i];
                if (i == 0) {
                    article += '<tr><th>Project Name</th></tr>';
                }
                article = '<tr><td>';
                if (arr.indexOf(item.ProjectName) >= 0) {
                    article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" checked value="' + item.ProjectName + '" />';
                } else {
                    article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" value="' + item.ProjectName + '" />';
                }

                article += '<label for="Pro' + item.RowKey + '" class="css1-label">' + item.ProjectName + '</label>';
                article += '<input type="text" name="ProjectManager" style="display: none;" value="' + item.ProjectManager + '" />';
                article += '</td></tr>';
            }
            $('#loadPro').empty();
            $("#tblProjects").html(article);
            article = '';
            //$("#tblProjects").append(article);
            var vCount = $("#tblProjects tr").length;
            if (vCount != 0) {
                $('#loadPro').html('');
                $('#compact-paginationProjects').css('display', '');
                $('#compact-paginationProjects').pagination({
                        items: vCount,
                        itemsOnPage: 10,
                        currentPage: 1,
                    cssStyle: 'compact-theme',
                type: 'tdbody',
                row: 'tr',
                    typeID: 'tblProjects'
                });
            } else {
                $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $('#compact-paginationProjects').css('display', 'none');
            }
        },
        error: function () {
            $('#compact-paginationProjects').css('display', 'none');
            $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });

}

function ViewRelatedContracts() {
    $("#lblRelatedPopup_ContractTitle").text("Select Relationship for " + $("#lblContractTitle").text())
    $("#loadingPage").fadeIn();
    $('#loadContract').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    $('#tblPopupContracts').empty();
    $("#txtSearchBoxContract").val("");
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getrelatedcontracts?stage=&searchkeyword=&customquery=&sortbyfield=ContractTitle&orderby=ASC';
    relatedContractsTag = [];
    $("#txtSearchBoxContract").val("");
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: $("#lblBusinessAreaPath").text(), UserID: localStorage.UserID },
        cache: false,
        success: function (data) {
            $('#loadContract').empty();
            $('#tblPopupContracts').empty();
            var arrdetailssplit = [];
            $.each(oldRelatedcontract.split(";"), function () {
                if (this != "") {
                    if ($.trim(this) != "") {
                        arrdetailssplit.push($.trim(this));
                    }
                }
            });
            oldRelatedcontract = arrdetailssplit.join("; ");
            oldRelatedcontract = oldRelatedcontract.trim();
            arroldRelatedcontract = arrdetailssplit;
            var arr = [];
            var RelatedContractIDarr = [];
            var vRelatedContractTitlearr = [];
            var RelatedRelationshipTypearr = [];
            var counterpartyTags = [];
            $.each($('#RelatedContracts').val().split(";"), function () {
                if (this != "") {
                    if ($.trim(this) != "") {
                        arr.push($.trim(this));
                    }
                }
            });
            if ($('#RelatedContracts').val() != "") {
                $.each($('#RelatedContracts').val().split(";"), function () {
                    if (!(arr.indexOf($.trim(this)) > -1)) {
                        arr.push($.trim(this));
                    }
                });
                if (arr.length > 0) {
                    if (arrRelatedContracts.length > 0) {
                        $.each(arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractID.split(";"), function () {
                            RelatedContractIDarr.push($.trim(this));
                        });
                        $.each(arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractTitle.split(";"), function () {
                            vRelatedContractTitlearr.push($.trim(this));
                        });
                        $.each(arrRelatedContracts[arrRelatedContracts.length - 1].RelatedRelationshipType.split(";"), function () {
                            RelatedRelationshipTypearr.push($.trim(this));
                        });
                    }
                }
            }
            $(data).each(function (i, item) {
                if ($("#hdnRelatedContracts").text().indexOf(item.RowKey) > -1) { }
                else {
                    if (arroldRelatedcontract.indexOf(item.ContractTitle.trim()) >= 0) {

                    } else if (SavedRelatedContract.indexOf(item.ContractTitle.trim()) == -1) {
                        var article = '<tr><td>';
                        if (arr.indexOf(item.ContractTitle.trim()) >= 0) {
                            article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" checked />';
                        } else {
                            article += '<input id="' + item.RowKey + '" type="checkbox" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                        }
                        article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                        article += '</td>';
                        article += '<td><label class="">' + item.ContractType + '</label></td>'
                        article += '<td><label class="">'
                        if (item.Counterparty != null && item.Counterparty != "") {
                            article += item.Counterparty
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="" style="word-break: break-all;">'
                        if (item.ContractNumber != null && item.ContractNumber != "") {
                            article += item.ContractNumber
                        } else {
                            article += "-"
                        }
                        article += '</label></td><td><label class="">' + item.Status + '</label></td>'
                        if (arr.indexOf(item.ContractTitle.trim()) >= 0) {
                            var indexvaluetake = arr.indexOf(item.ContractTitle.trim());
                            var relationtypefetch = RelatedRelationshipTypearr[indexvaluetake];
                            article += "<td class='ddl'><select class='f_inpt width90' onchange='showallspans(this)'>";
                            var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                            var jsLangType = $("#ddlRelationshipType option:selected").val();
                            var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                return (a[1] === jsLang && a[0] === jsLangType);
                            });
                            var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                            });
                            if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                var Relationship = rela1[0];
                                $.each(Relationship[2], function (index, value) {
                                    var optRel2 = value.toString();
                                    article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                })
                                if ($(Relationship[2]).length == 0) {
                                    var optRel2 = Relationship[1].toString();
                                    article += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                }
                            }
                            else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                var Relationship = rela2[0];
                                article += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                            }
                            else {
                                switch (jsLang) {
                                    case 'Master Agreement':
                                        if (relationtypefetch == "Sub-Agreement") {
                                            article += '<option value="Sub-Agreement" selected>Sub-Agreement</option>';
                                            article += '<option value="SOW">SOW</option>';
                                        }
                                        else {
                                            article += '<option value="Sub-Agreement" >Sub-Agreement</option>';
                                            article += '<option value="SOW" selected>SOW</option>';
                                        }
                                        break;
                                    case 'Sub-Agreement':
                                    case 'SOW':
                                        article += '<option value="Master Agreement">Master Agreement</option>';
                                        break;
                                    case 'Prime Contractor Agreement':
                                        article += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                        break;
                                    case 'Sub Contractor Agreement':
                                        article += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                        break;
                                    case 'Blanket Agreement':
                                        if (relationtypefetch == "Order") {
                                            article += '<option value="Order" selected>Order</option>';
                                            article += '<option value="Invoice">Invoice</option>';
                                        }
                                        else {
                                            article += '<option value="Order">Order</option>';
                                            article += '<option value="Invoice" selected>Invoice</option>';
                                        }

                                        break;
                                    case 'Order':
                                    case 'Invoice':
                                        article += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                        break;
                                    case 'Original':
                                        if (relationtypefetch == "Duplicate") {
                                            article += '<option value="Duplicate" selected>Duplicate</option>';
                                            article += '<option value="Copy">Copy</option>';
                                        }
                                        else {
                                            article += '<option value="Duplicate">Duplicate</option>';
                                            article += '<option value="Copy" selected>Copy</option>';
                                        }
                                        break;
                                    case 'Duplicate':
                                    case 'Copy':
                                        article += '<option value="Original">Original</option>';
                                        break;
                                    case 'Past Contract':
                                        article += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                        break;
                                    case 'Renegotiated Contract':
                                        article += '<option value="Past Contract">Past Contract</option>';
                                        break;
                                    case 'Primary Contract':
                                        if (relationtypefetch == "Amendment") {
                                            article += '<option value="Amendment" selected>Amendment</option>';
                                            article += '<option value="Modification">Modification</option>';
                                        }
                                        else {
                                            article += '<option value="Amendment">Amendment</option>';
                                            article += '<option value="Modification" selected>Modification</option>';
                                        }
                                        break;
                                    case 'Amendment':
                                    case 'Modification':
                                        article += '<option value="Primary Contract">Primary Contract</option>';
                                        break;
                                    case 'Other':
                                        article += '<option value="Other">Other</option>';
                                        break;
                                }
                            }

                            article += '</select><td></tr>';
                        }
                        else {
                            article += '<td class="ddl"><td></tr>'
                        }
                        $("#tblPopupContracts").append(article);
                        if (item.ContractTitle != $("#lblContractTitle").text().trim())
                            relatedContractsTag.push(item.ContractTitle.trim());

                        $("#" + item.RowKey).click(function () {
                            if (this.checked) {
                                if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                                    var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                                    var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                                    var jsLangType = $("#ddlRelationshipType option:selected").val();
                                    var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                                        return (a[1] === jsLang && a[0] === jsLangType);
                                    });
                                    var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                                        return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                                    });
                                    if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                                        var Relationship = rela1[0];
                                        $.each(Relationship[2], function (index, value) {
                                            var optRel2 = value.toString();
                                            vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                        })
                                        if ($(Relationship[2]).length == 0) {
                                            var optRel2 = Relationship[1].toString();
                                            vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                                        }
                                    }
                                    else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                                        var Relationship = rela2[0];
                                        vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                                    }
                                    else {
                                        switch (jsLang) {
                                            case 'Master Agreement':
                                                vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                                vOptions += '<option value="SOW">SOW</option>';
                                                break;
                                            case 'Sub-Agreement':
                                            case 'SOW':
                                                vOptions += '<option value="Master Agreement">Master Agreement</option>';
                                                break;
                                            case 'Prime Contractor Agreement':
                                                vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                                break;
                                            case 'Sub Contractor Agreement':
                                                vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                                break;
                                            case 'Blanket Agreement':
                                                vOptions += '<option value="Order">Order</option>';
                                                vOptions += '<option value="Invoice">Invoice</option>';
                                                break;
                                            case 'Order':
                                            case 'Invoice':
                                                vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                                break;
                                            case 'Original':
                                                vOptions += '<option value="Duplicate">Duplicate</option>';
                                                vOptions += '<option value="Copy">Copy</option>';
                                                break;
                                            case 'Duplicate':
                                            case 'Copy':
                                                vOptions += '<option value="Original">Original</option>';
                                                break;
                                            case 'Past Contract':
                                                vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                                break;
                                            case 'Renegotiated Contract':
                                                vOptions += '<option value="Past Contract">Past Contract</option>';
                                                break;
                                            case 'Primary Contract':
                                                vOptions += '<option value="Amendment">Amendment</option>';
                                                vOptions += '<option value="Modification">Modification</option>';
                                                break;
                                            case 'Amendment':
                                            case 'Modification':
                                                vOptions += '<option value="Primary Contract">Primary Contract</option>';
                                                break;
                                            case 'Other':
                                                vOptions += '<option value="Other">Other</option>';
                                                break;
                                        }
                                    }

                                    vOptions += '</select>';
                                    $(this).parent().parent().children(".ddl").append(vOptions);
                                }
                            } else {
                                $(this).parent().parent().children(".ddl").empty();
                            }
                            showallspans(this);
                        });
                    }
                }
            });

            var vCount = $("#tblPopupContracts tr").length;
            if (vCount != 0) {
                $("#tblPopupContracts tr td").attr('style', 'vertical-align: top');
                $('#compact-paginationRelatedContracts').css('display', '');
                $('#compact-paginationRelatedContracts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    type: 'tbody',
                    typeID: 'tblPopupContracts',
                    row: 'tr',
                    cssStyle: 'compact-theme'
                });
            } else {
                $('#compact-paginationRelatedContracts').css('display', 'none');
                $('#loadContract').html('<p style="margin-left: 20px;">No items found.</p>')
            }
            $("#txtSearchBoxContract").autocomplete({
                source: relatedContractsTag,
                minLength: 2,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxContract").val(uidetails.item.label);
                    ViewContracts();
                }
            });
            $("#popupContracts").dialog("option", "title", "Related Contract Record(s)");
            $("#popupContracts").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error: function () {
            $('#loadMA').empty();
            $('#loadMA').html('<p style="margin-left: 20px;">No items found.</p>');
            $("#loadingPage").fadeOut();
        }
    });
    vContractID = getParameterByName("ContractID");
    BindRelatedContractsPopup(vContractID);
}

//Check document sent for automation and once document automation is done call BindDocument()
function BindPendingDocAutomation(vContractID) {
    $("#ulDocument").css('display', 'none');
    try {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/automation?contractid=' + vContractID,
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            //async: false,
            success: function (data) {
                var datalength = data.length;
                docInAutomationList++;
                //if document generation taking long time, assuming its not created. Hence deleting entry from documentInAutomation table
                if (docInAutomationList == 50) {
                    $("#ulDocument").css('display', '');
                    $(data).each(function (itma, itemauto) {
                        deletePendingDocAutomation(itemauto);
                    });
                } else {
                    //if document is still being generated
                    if (datalength > 0) {
                        $("#ulDocumentLoading").css('display', '');
                        //$("#ulDocumentLoading").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
                        BindDocument(vContractID);
                    } else {
                        docInAutomationList = "";
                        $("#ulDocumentLoading").css('display', 'none');
                        $("#ulDocument").css('display', '');
                    }
                }
            },
            error: function () {
            }
        });
    } catch (e) {
    }
}


//deleting document automation entry
function deletePendingDocAutomation(itemauto) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/automation?documentid=' + itemauto.RowKey,
        type: 'DELETE',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function () {
            swal("", "Unable to create document: " + itemauto.DocumentName + ". Please try again.");
        }
    });
}

//add new counterparty on document add
function documentstatuschange() {
    if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
        $("#dtValidFrom").val("");
        $("#dtValidTill").val("");
        if ($("#linkAddValidity").text() == "Track document expiration date") {
            $("#linkAddValidity").css('display', 'none');
        }
        else {
            $("#linkAddValidity").click();
            $("#linkAddValidity").css('display', 'none');
        }
    }
    else {
        $("#linkAddValidity").css('display', 'block');
    }
}
function SelectExistingCounterparty() {
    $('#dvCPExistingCounterparty').css("display", "");
    $('#dvCPAddCounterparty').css("display", "none");
}

function SelectAddCounterparty() {
    $('#dvCPExistingCounterparty').css("display", "none");
    $('#dvCPAddCounterparty').css("display", "");
}
function ClearAddCounterparty() {
    $("#txtSearchBox").val("");
    $("#txtCounterpartyID").val("");
    $("#txtCounterpartyName").val("");
    $("#txtOwnerofBusinessArea").val('');
    $('input[type="radio"][name=IsGlobal][value="Yes"]').prop('checked', true);
    $("#trcp-RgBusi").hide();
    $("#txtOwnerofBusinessArea").removeClass("validelement");
    $('#ddlCounterpartyType').val('0');
    $("#txtAddressLine1").val("");
    $("#txtAddressLine2").val("");
    $("#txtCity").val("");
    $("#txtState").val("");
    $("#txtZip").val("");
    $('#ddlCountry').val('0');
    $("#txtContactNo").val("");
    $("#txtEmailID").val("");
    $("#ddlStatus").val("Active");
    $("#chkCounterpartyNotInList").attr("checked", false);
    $('.CP_Det').css('display', 'none');
    $('.CP_Det1').css('display', 'none');
    $("#ddlCounterpartyType").removeClass('validelement');
    $("#txtEmailID").removeClass('validemail');
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
}
//$('#chkCounterpartyNotInList').click(function () {
//    if ($("#chkCounterpartyNotInList").is(':checked')) {
//        $('.CP_Det').css('display', '');
//        $('.CP_Det1').css('display', '');
//        $("#ddlCounterpartyType").addClass('validelement');
//        $("#txtEmailID").addClass('validemail');
//        getCounterpartyFields();
//    } else {
//        $('.CP_Det').remove();
//        $('.CP_Det1').css('display', 'none');
//        $("#ddlCounterpartyType").removeClass('validelement');
//        $("#txtEmailID").removeClass('validemail');
//    }
//});

function getCounterpartyFields() {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/primaryfields',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (metadataFields) {
            vCounterpartyFields = [];
            $(metadataFields).each(function (i, item) {
                if ((item.FieldName == "CounterpartyName") || (item.FieldName == "CounterpartyType") || (item.FieldName == "Status")) {
                    if (item.FieldName == "CounterpartyType") {
                        vCounterpartyFields.push(item.FieldName);
                    }
                }
                else {
                    vCounterpartyFields.push(item.FieldName);
                    if (item.ShowInCreateForm == "true") {
                        var vControls = "";
                        var vDate = "";
                        var vNumber = "";
                        var vEmail = "";
                        var vMultiDDL = "";
                        var vUser = "";
                        var vUserList = "";
                        if (item.Required == "true") {
                            vControls += '<li class="removableCounterpartyField CP_Det"><p><b>' + item.FieldDisplayName + '</b><small>*</small></p><div>';
                        } else {
                            vControls += '<li class="removableCounterpartyField CP_Det"><p><b>' + item.FieldDisplayName + '</b></p><div>';
                        }
                        if (item.FieldType == "Single Line Text") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " maxlength='100' name=" + item.FieldName + " class='validelement'>";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " maxlength='100' name=" + item.FieldName + ">";
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                        }
                        else if (item.FieldType == "Multi Line Text") {
                            if (item.Required == "true") {
                                vControls += "<textarea name=" + item.FieldName + " maxlength='300' id=" + item.FieldName + " title='" + item.FieldDisplayName + "' cols='25' rows='3' class=' validelement'></textarea>";
                            } else {
                                vControls += "<textarea name=" + item.FieldName + " maxlength='300' id=" + item.FieldName + " title='" + item.FieldDisplayName + "' cols='25' rows='3'></textarea>";
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                        }
                        else if (item.FieldType == "Hyperlink") {
                            //manoj
                            //for Hyperlink
                            var Hyperlinkvalue = item.DefaultURL;
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=CP" + item.FieldName + " maxlength='2083' name=" + item.FieldName + " placeholder='http://www.' value = '" + Hyperlinkvalue + "' class='validelement validwebsite'>";
                            } else {
                                vControls += "<input type='text' id=CP" + item.FieldName + " maxlength='2083' name=" + item.FieldName + " placeholder='http://www.' value = '" + Hyperlinkvalue + "' class='validwebsite'>";
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            vControls += '<a href="javascript:void(0)" class="linkText" title="' + item.FieldDisplayName + '" onclick="navigateurl(\'CP' + item.FieldName + '\')"> Navigate</a>';
                            vControls += '</div></li>';
                            //for Hyperlink
                            //manoj
                        }
                        else if (item.FieldType == "Date") {

                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement validdate fielddatecontrol " + item.FieldName + "'/>";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + "  title='" + item.FieldDisplayName + "' class='validdate fielddatecontrol " + item.FieldName + "'/>";
                            }

                            //if (item.Required == "true") {
                            //    vControls += "<input type='text' id=" + item.FieldName + " title='" + item.FieldDisplayName + "' name=" + item.FieldName + " class='validelement validdate'/>";
                            //} else {
                            //    vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validdate'/>";
                            //}
                            if (item.FieldHelp == "true") {
                                vControls += '<span> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            vControls += '</div></li>';

                            vDate = item.FieldName;
                        }
                        else if (item.FieldType == "Choice") {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement'>";

                            } else {
                                vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'>";
                            }
                            vControls += "<option value='0'>--Select--</option>";
                            var myArray = [];
                            myArray = item.ChoiceValues.split("\n")
                            var myArraylength = myArray.length;

                            for (var i = 0; i < myArraylength; i = i + 1) {
                                do {
                                    myArray[i] = myArray[i].replace("&amp;", "&");
                                } while (myArray[i].indexOf("&amp;") > -1)
                                vControls += "<option value='" + myArray[i] + "'>" + myArray[i] + "</option>";
                            }

                            vControls += '</select>';
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                        } else if (item.FieldType == "Lookup") {
                            if (item.FieldName == "RelatedCounterparties") {
                                if (item.Required == "true") {
                                    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement' readonly='readonly' type='text' />";
                                } else {
                                    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' readonly='readonly' type='text' />";
                                }
                                vControls += '<label class="p-text">' + item.Description + '</label>';
                                if (item.FieldHelp == "true") {
                                    vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                                }
                                vControls += "<a href='javascript:void(0)' class='linkText' id='" + item.FieldDisplayName + "' title='" + item.FieldName + "' onclick='ViewCounterpartyRelated(this)'> Browse</a>";
                                vControls += '</div></li>';
                            } else {
                                if (item.Required == "true") {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement'>";
                                } else {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'>";
                                }
                                vControls += "<option value='0'>--Select--</option>";

                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                    type: 'GET',
                                    dataType: 'json',
                                    "Content-Type": "application/json",
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    cache: false,
                                    success: function (data) {
                                        var datalength1 = data.LookupFields.split(';');
                                        var datalength = datalength1.length;
                                        for (var i = 0; i < datalength; i++) {
                                            var itemname = datalength1[i];
                                            $("#" + item.FieldName).append("<option value='" + itemname + "'>" + itemname + "</option>")
                                        }
                                    }
                                });
                                vControls += '<label class="p-text">' + item.Description + '</label>';
                                if (item.FieldHelp == "true") {
                                    vControls += '<span> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                                }
                                vControls += '</div></li>';
                            }
                        }
                        else if (item.FieldType.indexOf("Dropdown") > -1 || item.FieldType.indexOf("Multi Select") > -1) {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='width90 chosenmulti validuser' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            } else {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='width90 chosenmulti' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            }
                            if (item.FieldType.indexOf("Dropdown") > -1) {
                                var vMultiDDL1 = "";
                                if (vMultiDDL1 == '') {
                                    var myArray = [];
                                    myArray = item.ChoiceValues.split("\n")
                                    var myArraylength = myArray.length;
                                    for (var i = 0; i < myArraylength; i = i + 1) {
                                        vMultiDDL1 += "<option value='" + myArray[i] + "'>" + myArray[i] + "</option>";
                                    }
                                }
                                vControls += vMultiDDL1;
                            } else {
                                var vMultiDDL1 = "";
                                if (vMultiDDL1 == '') {
                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                        type: 'GET',
                                        dataType: 'json',
                                        "Content-Type": "application/json",
                                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                        cache: false,
                                        async: false,
                                        success: function (data) {
                                            var datalength1 = data.LookupFields.split(';');
                                            var datalength = datalength1.length;
                                            for (var i = 0; i < datalength; i++) {
                                                var itemname = datalength1[i];
                                                vMultiDDL1 += "<option value='" + itemname + "'>" + itemname + "</option>";
                                            }
                                        }
                                    });
                                }
                                vControls += vMultiDDL1;
                            }

                            vControls += '</select>';
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                            vMultiDDL = item.FieldName;
                        }
                        else if (item.FieldType == "Number") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement form_input' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='form_input' />";
                            }

                            if (item.FieldHelp == "true") {
                                vControls += '<span > <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            vControls += '</div></li>';
                            vNumber = item.FieldName;
                        }
                        else if (item.FieldType == "Yes/No") {

                            vControls += "	<div style='width: auto; margin-right: 15px;'><input style='float: left; width: auto;' type='radio' name=" + item.FieldName + " value='Yes'><span style='float: left; margin: 7px 0px 0px 5px;'>Yes </span></div>";
                            vControls += "	<div style='width: auto;'><input style='float: left; width: auto;' type='radio' name=" + item.FieldName + " checked value='No'><span style='float: left; margin: 7px 0px 0px 5px;'>No </span></div>";
                            //vControls += "	<input type='radio' name=" + item.FieldName + " value='Yes'>Yes ";
                            //vControls += "	<input type='radio' name=" + item.FieldName + " checked value='No'>No";

                            vControls += '<label style="width:auto;margin:7px 0px 0px 5px;" class="col12 p-text text-left help">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span style="width:auto;margin:7px 0px 0px 5px;"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                        } else if (item.FieldType == "Email") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validemail validelement' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validemail' />";
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                        } else if (item.FieldType.indexOf("Browse") > -1) {
                            if (item.Required == "true") {
                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement' readonly='readonly' type='text' />";
                            } else {
                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' readonly='readonly' type='text' />";
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += "<a href='javascript:void(0)' class='linkText' id='" + item.FieldDisplayName + "' title='" + item.FieldName + "' onclick='ViewGenericCounterparty(this)'> Browse</a>";
                            vControls += '</div></li>';
                        } else if (item.FieldType == "File Upload") {
                            if (item.Required == "true") {
                                vControls += "<input type='file' id=" + item.FieldName + " name='docAttachment' title='" + item.FieldDisplayName + "' class='form-contro validelement browse-file-doc' onchange='javascript:changeinupload(this);' />";
                            } else {
                                vControls += "<input type='file' id=" + item.FieldName + " name='docAttachment' title='" + item.FieldDisplayName + "' class='form-contro browse-file-doc' onchange='javascript:changeinupload(this);' />";
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                        } else if (item.FieldType == "Currency" || item.FieldType == "Value / Financials") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' />";
                            }
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vControls += '</div></li>';
                        } else if (item.FieldType == "User") {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='form-contro f_inpt width90 chosenmulti validuser' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            } else {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='form-contro f_inpt width90 chosenmulti' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            }

                            if (vUserList == "")
                            { vUserList = GetUserList(); }
                            vControls += vUserList;
                            vControls += '</select>';
                            vControls += '<label class="p-text">' + item.Description + '</label>';
                            if (item.FieldHelp == "true") {
                                vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                            }
                            vUser = item.FieldName;
                            vControls += '</div></li>';
                        }

                        $("#counterpartyItems").append(vControls);
                        if (vDate != "") {

                            if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                $("#" + vDate + "").datepicker({
                                    changeMonth: true,
                                    changeYear: true
                                });
                            }
                            else {
                                var dateformate = localStorage.AppDateFormat.toLowerCase().slice(0, -2);

                                $("#" + vDate + "").datepicker({
                                    changeMonth: true,
                                    changeYear: true,
                                    dateFormat: dateformate
                                });

                            }
                            vDate = "";
                        }
                        if (vNumber != "") {
                            allowOnlyNumberInInputBox(vNumber);
                            vNumber == "";
                        }

                        if (vMultiDDL != "") {
                            $("#" + vMultiDDL + "").chosen().trigger("chosen:updated");
                            $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                $('.result-selected').css('display', 'none');
                            });
                            vMultiDDL = "";
                        }

                        if (vUser != "") {
                            $("#" + vUser + "").chosen().trigger("chosen:updated");
                            $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                $('.result-selected').css('display', 'none');
                            });
                            if (vUser == "ContractManagers") {
                                if (localStorage.UserName != "") {
                                    GetValuesAndAutoPopulate("ContractManagers", localStorage.UserName);
                                }
                            }
                            vUser = "";
                        }
                    }
                }
            });
            $("#loadingPage").fadeOut();
        },
        error: function (metadataFields) {
            vCounterpartyFields = [];
            $("#loadingPage").fadeOut();
        }

    });
}

function ViewCounterpartyRelated(obj) {
    var baname = "";
    //if (typeof localStorage.GlobalBusinessAreaLocation != "undefined" && localStorage.GlobalBusinessAreaLocation != "" && localStorage.GlobalBusinessAreaLocation != "All") {
    //    baname = encodeURIComponent(localStorage.GlobalBusinessAreaLocation);
    //}
    vGlobalObjForGeneric = obj;
    $("#lblRelatedPopup_Counterparties").text("Select Relationship for " + $("#txtCounterpartyName").val())
    $("#loadingPage").fadeIn();
    $('#loadCounterparties').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    $('#tblPopupCounterparties').empty();
    $("#txtSearchBoxCounterparties").val("");
    if ($('#tblPopupCounterparties tr').length <= 0) {
        var relatedCounterpartiesTag = [];
        $("#txtSearchBoxCounterparties").val("");
        var arrcounterpartyIDarry = [];
        var arrcounterpartyNamearry = [];
        var arrcounterpartyRelationshipTypearr = [];

        //manoj
        var strBusinessAreaOwnerof = "";
        if ($('input[type="radio"][name=IsGlobal]:checked').val() == "No") {
            if ($("#txtOwnerofBusinessArea").val() != "") {
                if ($("#txtOwnerofBusinessArea").val() != "") {
                    for (var i = 0; i < selectedBusinessAreaID11.length; i++) {

                        var rowKPath = jQuery.grep(BusinessAreaPathRowKey, function (a) {
                            return a[1] === selectedBusinessAreaID11[i][1];
                        });
                        if (rowKPath != null && typeof (rowKPath) != "undefined" && rowKPath.length != 0)
                            strBusinessAreaOwnerof += rowKPath[0][0] + "; ";
                    }

                    strBusinessAreaOwnerof = strBusinessAreaOwnerof.slice(0, -1)
                }
            } else {

                strBusinessAreaOwnerof = "";
            }
        }
        else {
            $("#txtOwnerofBusinessArea").val('');
            strBusinessAreaOwnerof = "";
        }
        //manoj
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/relatedcounterpartypicker',
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID, BusinessAreaLocation: strBusinessAreaOwnerof },
            cache: false,
            success: function (data) {
                $('#loadCounterparties').empty();
                $("#hdnRelatedCounterparties").append(getParameterByName("ContractID"))
                //manoj
                curRelatedCounterparities = PrvRelatedCounterparities.slice();
                //manoj
                var arr = [];
                var counterpartyTags = [];
                var prevSelected = $("#RelatedCounterparties").val();
                $.each(prevSelected.split(";"), function () {
                    arr.push($.trim(this));
                });
                var vCounterpartyList = '';
                $(data).each(function (i, item) {
                    if ($("#txtCounterpartyID").val().indexOf(item.RowKey) > -1) {
                    }
                    else {
                        if (arr.length > 0) {
                            if (arrRelatedCounterparities.length > 0) {
                                $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyID.split(";"), function () {
                                    arrcounterpartyIDarry.push($.trim(this));
                                });
                                $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyTitle.split(";"), function () {
                                    arrcounterpartyNamearry.push($.trim(this));
                                });
                                $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedRelationshipType.split(";"), function () {
                                    arrcounterpartyRelationshipTypearr.push($.trim(this));
                                });
                                if (arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType != "") {
                                    //$("#ddlRelationshipTypeCounterparties").val(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType);
                                    //manoj
                                    $("#ddlRelationshipTypeCounterparties option:selected").text(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType);
                                    //manoj
                                }
                                if (arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType != "") {
                                    $("#ddlRelationshipTypeParentcounterparties").val(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType);
                                }
                            }
                        }
                        if (arr.indexOf(item.CounterpartyName.trim()) >= 0) {
                            var article = '<tr><td>';
                            article += '<input id="rel' + item.RowKey + '" type="checkbox" name="RelatedCounterparty" checked class="css1-checkbox" value="' + escape(item.CounterpartyName) + '" onchange="javascript:currentrelatedcounterparty(this);"  />';
                            article += '<label for="' + item.RowKey + '" class="css1-label">' + item.CounterpartyName + '</label>';
                            article += '</td>';
                            article += '<td class="ddl"><select class="f_inpt width90" onchange="showallspans(this)">';
                            var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
                            switch (jsLang) {
                                case 'Parent':
                                    article += '<option value="Subsidiary" selected>Subsidiary</option>';
                                    break;
                                case 'Subsidiary':
                                    article += '<option value="Parent" selected>Parent</option>';
                                    break;
                                case 'Supplier':
                                    article += '<option value="Customer" selected>Customer</option>';
                                    break;
                                case 'Customer':
                                    article += '<option value="Supplier" selected>Supplier</option>';
                                    break;
                                case 'Prime Contractor':
                                    article += '<option value="Sub Contractor" selected>Sub Contractor</option>';
                                    break;
                                case 'Sub Contractor':
                                    article += '<option value="Prime Contractor" selected>Prime Contractor</option>';
                                    break;
                                case 'Dissolved on Merger':
                                    article += '<option value="Merged into" selected>Merged into</option>';
                                    break;
                                case 'Merged into':
                                    article += '<option value="Dissolved on Merger" selected>Dissolved on Merger</option>';
                                    break;
                                case 'Other':
                                    article += '<option value="Other" selected>Other</option>';
                                    break;
                            }
                            article += '</select><td></tr>'
                            //$("#tblPopupCounterparties").append(article);
                            vCounterpartyList += article;
                            relatedCounterpartiesTag.push(item.CounterpartyName);
                        } else {
                            var article = '<tr><td>';
                            article += '<input id="rel' + item.RowKey + '" type="checkbox" name="RelatedCounterparty" class="css1-checkbox" value="' + escape(item.CounterpartyName) + '" onchange="javascript:currentrelatedcounterparty(this);" />';
                            article += '<label for="' + item.RowKey + '" class="css1-label">' + item.CounterpartyName + '</label>';
                            article += '</td>';
                            article += '<td class="ddl"><td></tr>'
                            //$("#tblPopupCounterparties").append(article);
                            vCounterpartyList += article;
                            relatedCounterpartiesTag.push(item.CounterpartyName);
                        }

                        //$("#rel" + item.RowKey).click(function () {
                        //$("input[id='rel" + item.RowKey + "'][name='RelatedCounterparty']:checkbox").click(function () {
                        //    if (this.checked) {
                        //        if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                        //            var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                        //            var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
                        //            switch (jsLang) {
                        //                case 'Parent':
                        //                    vOptions += '<option value="Subsidiary">Subsidiary</option>';
                        //                    break;
                        //                case 'Subsidiary':
                        //                    vOptions += '<option value="Parent">Parent</option>';
                        //                    break;
                        //                case 'Supplier':
                        //                    vOptions += '<option value="Customer">Customer</option>';
                        //                    break;
                        //                case 'Customer':
                        //                    vOptions += '<option value="Supplier">Supplier</option>';
                        //                    break;
                        //                case 'Prime Contractor':
                        //                    vOptions += '<option value="Sub Contractor">Sub Contractor</option>';
                        //                    break;
                        //                case 'Sub Contractor':
                        //                    vOptions += '<option value="Prime Contractor">Prime Contractor</option>';
                        //                    break;
                        //                case 'Dissolved on Merger':
                        //                    vOptions += '<option value="Merged into">Merged into</option>';
                        //                    break;
                        //                case 'Merged into':
                        //                    vOptions += '<option value="Dissolved on Merger">Dissolved on Merger</option>';
                        //                    break;
                        //                case 'Other':
                        //                    vOptions += '<option value="Other">Other</option>';
                        //                    break;
                        //            }

                        //            vOptions += '</select>';
                        //            $(this).parent().parent().children(".ddl").append(vOptions);
                        //        }
                        //    } else {
                        //        $(this).parent().parent().children(".ddl").empty();
                        //    }
                        //    showallspans(this);

                        //});
                    }
                });

                $("#tblPopupCounterparties").append(vCounterpartyList);
                $("input[id^='rel'][name='RelatedCounterparty']:checkbox").click(function () {
                    if (this.checked) {
                        if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                            var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                            var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
                            switch (jsLang) {
                                case 'Parent':
                                    vOptions += '<option value="Subsidiary">Subsidiary</option>';
                                    break;
                                case 'Subsidiary':
                                    vOptions += '<option value="Parent">Parent</option>';
                                    break;
                                case 'Supplier':
                                    vOptions += '<option value="Customer">Customer</option>';
                                    break;
                                case 'Customer':
                                    vOptions += '<option value="Supplier">Supplier</option>';
                                    break;
                                case 'Prime Contractor':
                                    vOptions += '<option value="Sub Contractor">Sub Contractor</option>';
                                    break;
                                case 'Sub Contractor':
                                    vOptions += '<option value="Prime Contractor">Prime Contractor</option>';
                                    break;
                                case 'Dissolved on Merger':
                                    vOptions += '<option value="Merged into">Merged into</option>';
                                    break;
                                case 'Merged into':
                                    vOptions += '<option value="Dissolved on Merger">Dissolved on Merger</option>';
                                    break;
                                case 'Other':
                                    vOptions += '<option value="Other">Other</option>';
                                    break;
                            }

                            vOptions += '</select>';
                            $(this).parent().parent().children(".ddl").append(vOptions);
                        }
                    } else {
                        $(this).parent().parent().children(".ddl").empty();
                    }
                    showallspans(this);

                });

                var vCount = $("#tblPopupCounterparties tr").length;
                if (vCount != 0) {
                    $('#compact-paginationRelatedCounterparties').pagination({
                        items: vCount,
                        itemsOnPage: 10,
                        currentPage: 1,
                        cssStyle: 'compact-theme',
                        type: 'tdbody',
                        row: 'tr',
                        typeID: 'tblPopupCounterparties'
                        //items: vCount,
                        //itemsOnPage: 10,
                        //typeID: 'tblPopupCounterparties',
                        //cssStyle: 'compact-theme'
                    });
                } else {
                    $('#loadCounterparties').html('<p style="margin-left: 20px;">No items found.</p>')
                }

                $("#txtSearchBoxCounterparties").autocomplete({
                    source: relatedCounterpartiesTag,
                    minLength: 2,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxCounterparties").val(uidetails.item.label);
                        ViewCounterparties();
                    }
                });
                addselectedcounterparties();
                $("#popupCounterparties").dialog("option", "title", "Related Counterparties");
                $("#popupCounterparties").dialog("open");
                $("#loadingPage").fadeOut();
            },
            error: function () {
                addselectedcounterparties();
                $('#loadMA').empty();
                $('#loadCounterparties').html('No items found.');
                $("#tblPopupCounterparties").html('');
                $("#popupCounterparties").dialog("option", "title", "Related Counterparties");
                $("#popupCounterparties").dialog("open");
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        addselectedcounterparties();
        $('#loadMA').empty();
        $("#popupCounterparties").dialog("option", "title", "Related Contract Record(s)");
        $("#popupCounterparties").dialog("open");
        $("#loadingPage").fadeOut();
    }
}
function MilestoneNewEndOccurence() {
    $("#txtMilestoneOccurrenceCount").removeClass('validelement');
}

function MilestoneNewEndOccurenceUser() {
    $("#txtMilestoneOccurrenceCount").addClass('validelement');
}
//function RelatedCounterpartiesPush() {
//    if (requiredValidator('popupCounterparties', false)) {
//        var vRelatedCounterpartyID = "";
//        var vRelatedCounterpartyTitle = "";
//        var vChildRelation = "";

//        $('input:checkbox[name="RelatedCounterparty"]:checked').each(function () {
//            if (vRelatedCounterpartyID == "") {
//                vRelatedCounterpartyID = this.id.replace("rel", "").trim();
//                vRelatedCounterpartyTitle = this.value;
//                vChildRelation = $(this).parent().parent().children(".ddl").find('option:selected').text();

//            }
//            else {
//                vRelatedCounterpartyID += "; " + this.id.replace("rel", "").trim();
//                vRelatedCounterpartyTitle += "; " + this.value;
//                vChildRelation += "; " + $(this).parent().parent().children(".ddl").find('option:selected').text();
//            }
//        });
//        if (vRelatedCounterpartyID != "") {
//            arrRelatedCounterparities.push({
//                CounterpartyID: $("#txtCounterpartyID").val(),
//                CounterpartyTitle: $("#txtCounterpartyName").val(),
//                RelatedCounterpartyID: vRelatedCounterpartyID,
//                RelatedCounterpartyTitle: vRelatedCounterpartyTitle,
//                RelationshipType: $("#ddlRelationshipTypeParentcounterparties").find('option:selected').text(),
//                RootRelationshipType: $("#ddlRelationshipTypeCounterparties").find('option:selected').text(),
//                RelatedRelationshipType: vChildRelation,
//                CreatedBy: localStorage.UserName,
//                ModifiedBy: localStorage.UserName,
//            });
//            $("#popupCounterparties").dialog("close");
//            $('#RelatedCounterparties').val(vRelatedCounterpartyTitle);
//            return true;
//        } else {
//            $('#RelatedCounterparties').val("");
//            //swal("", "No Counterparty has been selected.");
//            return false;
//        }
//    }
//}
$("#ddlRelationshipTypeCounterparties").change(function () {
    $("#ddlRelationshipTypeParentcounterparties").empty();

    var jsLang = this.value;
    switch (jsLang) {
        case 'Parent':
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Parent'>Parent</option>");
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Subsidiary'>Subsidiary</option>");
            break;
        case 'Supplier':
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Supplier'>Supplier</option>");
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Customer'>Customer</option>");
            break;
        case 'Prime Contractor':
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Prime Contractor'>Prime Contractor</option>");
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Sub Contractor'>Sub Contractor</option>");
            break;
        case 'Dissolved on Merger':
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Dissolved on Merger'>Dissolved on Merger</option>");
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Merged into'>Merged into</option>");
            break;
        case 'Other':
            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Other'>Other</option>");
            break;
    }
    var Action = 0;
    $('input:checkbox[name="RelatedCounterparty"]:checked').each(function () {
        $(this).parent().parent().children(".ddl").empty();
        var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
        var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
        switch (jsLang) {
            case 'Parent':
                vOptions += '<option value="Subsidiary">Subsidiary</option>';
                break;
            case 'Subsidiary':
                vOptions += '<option value="Parent">Parent</option>';
                break;
            case 'Supplier':
                vOptions += '<option value="Customer">Customer</option>';
                break;
            case 'Customer':
                vOptions += '<option value="Supplier">Supplier</option>';
                break;
            case 'Prime Contractor':
                vOptions += '<option value="Sub Contractor">Sub Contractor</option>';
                break;
            case 'Sub Contractor':
                vOptions += '<option value="Prime Contractor">Prime Contractor</option>';
                break;
            case 'Dissolved on Merger':
                vOptions += '<option value="Merged into">Merged into</option>';
                break;
            case 'Merged into':
                vOptions += '<option value="Dissolved on Merger">Dissolved on Merger</option>';
                break;
            case 'Other':
                vOptions += '<option value="Other">Other</option>';
                break;
        }

        vOptions += '</select>';
        $(this).parent().parent().children(".ddl").append(vOptions);
        if (Action == 0) {
            changecounterpartychildrelationship($(this).parent().parent().children(".ddl").find('option:selected').text());
            Action = 1;
        }
    });
});

$("#ddlRelationshipTypeParentcounterparties").change(function () {
    var Action = 0;
    $('input:checkbox[name="RelatedCounterparty"]:checked').each(function () {
        $(this).parent().parent().children(".ddl").empty();
        var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
        var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
        switch (jsLang) {
            case 'Parent':
                vOptions += '<option value="Subsidiary">Subsidiary</option>';
                break;
            case 'Subsidiary':
                vOptions += '<option value="Parent">Parent</option>';
                break;
            case 'Supplier':
                vOptions += '<option value="Customer">Customer</option>';
                break;
            case 'Customer':
                vOptions += '<option value="Supplier">Supplier</option>';
                break;
            case 'Prime Contractor':
                vOptions += '<option value="Sub Contractor">Sub Contractor</option>';
                break;
            case 'Sub Contractor':
                vOptions += '<option value="Prime Contractor">Prime Contractor</option>';
                break;
            case 'Dissolved on Merger':
                vOptions += '<option value="Merged into">Merged into</option>';
                break;
            case 'Merged into':
                vOptions += '<option value="Dissolved on Merger">Dissolved on Merger</option>';
                break;
            case 'Other':
                vOptions += '<option value="Other">Other</option>';
                break;
        }

        vOptions += '</select>';
        $(this).parent().parent().children(".ddl").append(vOptions);
        if (Action == 0) {
            changecounterpartychildrelationship($(this).parent().parent().children(".ddl").find('option:selected').text());
            Action = 1;
        }
    });
});
//function CreateRelatedCounterparies(conterpartyid, counterpartyname) {
//    $.ajax({
//        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + conterpartyid.trim() + '/relatedcounterparties',
//        type: 'POST',
//        dataType: 'json',
//        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
//        data: {
//            CounterpartyID: conterpartyid,
//            CounterpartyTitle: counterpartyname,
//            RelatedCounterpartyID: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyID,
//            RelatedCounterpartyTitle: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyTitle,
//            RelationshipType: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType,
//            RelatedRelationshipType: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedRelationshipType,
//            CreatedBy: localStorage.UserName,
//            ModifiedBy: localStorage.UserName,
//        },
//        cache: false,
//        success: function (person) {
//            arrRelatedCounterparities = [];
//        },
//        error: function (request) {
//            arrRelatedCounterparities = [];
//        }
//    });
//}



function documentstatuseditchange() {
    if ($("#ddlDocumentStatusEdit").val() != 0 && $("#ddlDocumentStatusEdit").val() == "Expired") {
        $("#dtValidFromEdit").val("");
        $("#dtValidTillEdit").val("");
        if ($("#linkAddValidity1").text() == "Track document expiration date") {
            $("#linkAddValidity1").css('display', 'none');
        }
        else {
            $("#linkAddValidity1").click();
            $("#linkAddValidity1").css('display', 'none');
        }
    }
    else {
        $("#linkAddValidity1").css('display', 'block');
    }
}


var vCounterpartyFields = [];

function getCounterpartyprimaryFields() {

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/primaryfields',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (metadataFields) {
            vCounterpartyFields = [];
            $(metadataFields).each(function (i, item) {
                if ((item.FieldName == "CounterpartyName") || (item.FieldName == "CounterpartyType") || (item.FieldName == "Status")) {
                    if (item.FieldName == "CounterpartyType") {
                        vCounterpartyFields.push(item.FieldName)
                    }
                }
                else {
                    vCounterpartyFields.push(item.FieldName)
                }
            });

        },
        error: function (metadataFields) {
            vCounterpartyFields = [];
        }
    });
}


function funselectallCounterParty(obj) {
    if (obj.checked) { // check select status  
        $('input:checkbox[name=Counterparty]').attr('checked', true);
    } else {
        $('input:checkbox[name=Counterparty]').attr('checked', false);
    }
    checkMultipleDocumentsCounterParty("");
}

function checkMultipleDocumentsCounterParty(object) {
    //manoj
    var arrselectedcunterparty = [];
    $.each($('#liSelectedCounterParty').children(), function () {
        if (arrselectedcunterparty.indexOf($.trim(this.textContent)) == -1)
            arrselectedcunterparty.push($.trim(this.textContent));
    });
    $('#liSelectedCounterParty').empty();

    var tablebind = $('#tblCounterparties').DataTable();
    $.each($('input:checkbox[name="Counterparty"]', tablebind.rows().nodes()), function () {
        if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null) {
            if ($.trim(this.value) != "") {
                if (this.checked) {
                    if (arrselectedcunterparty.indexOf(unescape($.trim(this.value))) == -1) {
                        arrselectedcunterparty.push(unescape($.trim(this.value)))
                    }
                } else if (arrselectedcunterparty.indexOf(unescape($.trim(this.value))) > -1) {
                    arrselectedcunterparty.splice(arrselectedcunterparty.indexOf(unescape($.trim(this.value))), 1);
                }
            }
        }
    });
    arrselectedcunterparty.sort();
    $.each(arrselectedcunterparty, function () {
        $('#liSelectedCounterParty').append('<span style="font-size:13px;">' + $.trim(this) + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedCouterParty(this);" style="float:right" /></span>');
    });
    arrselectedcunterparty = [];

    if ($('input:checkbox[name="Counterparty"]:checked').length == $('input:checkbox[name="Counterparty"]').length && $('input:checkbox[name="Counterparty"]:checked').length != 0) {
        $("#selectallCounterParty").attr('checked', true);
    } else {
        $("#selectallCounterParty").attr('checked', false);
    }
    //manoj

    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}



function togglelanguagediv(firstObject, object2) {
    $("#" + firstObject).slideToggle();
    //$("#" + object2).slideToggle();

    //var imgObj = $("#" + imgObject);

    //if (imgObj.attr("title") == "Collapse") {
    //    imgObj.attr("title", "Expand");
    //    imgObj.attr("src", "../Content/Images/e-open.png");
    //} else {
    //    imgObj.attr("title", "Collapse");
    //    imgObj.attr("src", "../Content/Images/e-close.png");
    //}
}

function Displaylanguage(rkey) {
    areaforclause12 = null;
    countareaforclause = 1;
    GroupCollectionforclause = [];
    $("#liGroupTermsClause").empty();
    var selectlanguagerkey = $.grep(arrClauseLangage, function (n, i) {
        return (n.RowKey == rkey || n.ParentLanguageID == rkey);
    });

    var selectlanguagerkeyfrmdelete = $.grep(arrChangestoSave, function (n, i) {
        return (n.RowKey == rkey || n.ParentLanguageID == rkey);
    });
    if (selectlanguagerkey.length > 0) {
        for (var sel = 0; sel < selectlanguagerkey.length; sel++) {
            var selectedrkey = '';
            if (arrfinalclauselanguage.indexOf(selectlanguagerkey[sel].RowKey) > -1) {
                if (selectlanguagerkeyfrmdelete.length == 0) {
                    var FilterRestore = $.grep(arrPrvwClause, function (n, i) {
                        return (n.RowKey == selectlanguagerkey[sel].RowKey);
                    });
                    if (FilterRestore.length > 0) {
                        selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '> <div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" checked value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a><a href="javascript:void(0);" onclick="RestoreDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i ><img src="../Content/Images/restore.png" title="Restore"></i></a></span></div>'
                        if (FilterRestore[0].Status != "" && FilterRestore[0].Status != "Required" && FilterRestore[0].Status != "Optional") {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success">' + FilterRestore[0].Status + '</span></div>'
                        }
                        else {
                            if (selectlanguagerkey[sel].IsDefaultLanguage == "Yes") {

                                selectedrkey += '<div class="pull-right"><span><span class="bg-success">Default</span></div>'
                            }
                            else {
                                selectedrkey += '<div class="pull-right"><span><span class="bg-success">Alternate</span></div>'
                            }
                        }
                        selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(FilterRestore[0].LanguageText) + '</div>'
                    }
                    else {
                        selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '><div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" checked value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a></span></div>'
                        if (selectlanguagerkey[sel].IsAlternativeLanguage == "Yes") {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success" > Alternate</span></div>'
                        }
                        else {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success"> Default </span></div>'
                        }
                        //selectedrkey += '<div class="pull-right">' + selectlanguagerkey[sel].Status + '</div>'
                        selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(selectlanguagerkey[sel].LanguageText) + '</div>'
                    }
                }
                else {
                    var FilterRestore = $.grep(arrChangestoSave, function (n, i) {
                        return (n.RowKey == selectlanguagerkey[sel].RowKey);
                    });

                    if (FilterRestore.length > 0) {
                        selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '><div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" checked value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a><a href="javascript:void(0);" onclick="RestoreDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i ><img src="../Content/Images/restore.png" title="Restore"></i></a></span></div>'
                        if (FilterRestore[0].Status != "" && FilterRestore[0].Status != "Required" && FilterRestore[0].Status != "Optional") {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success">' + FilterRestore[0].Status + '</span></div>'
                        }
                        else {
                            if (selectlanguagerkey[sel].IsDefaultLanguage == "Yes") {
                                selectedrkey += '<div class="pull-right"><span><span class="btn bg-success" type="button">Default</span></div>'
                            }
                            else {
                                selectedrkey += '<div class="pull-right"><span><span class="btn bg-success" type="button">Alternate</span></div>'
                            }
                        }
                        selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(FilterRestore[0].LanguageText) + '</div>'
                    }
                    else {

                        var FilterRestore1 = $.grep(arrPrvwClause, function (n, i) {
                            return (n.RowKey == selectlanguagerkey[sel].RowKey);
                        });
                        if (FilterRestore1.length > 0) {
                            selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '><div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" checked value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a><a href="javascript:void(0);" onclick="RestoreDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i ><img src="../Content/Images/restore.png" title="Restore"></i></a></span></div>'
                            if (FilterRestore1[0].Status != "" && FilterRestore[0].Status != "Required" && FilterRestore[0].Status != "Optional") {
                                selectedrkey += '<div class="pull-right"><span><span class="bg-success">' + FilterRestore1[0].Status + '</span></div>'
                            }
                            else {
                                if (selectlanguagerkey[sel].IsDefaultLanguage == "Yes") {
                                    selectedrkey += '<div class="pull-right"><span><span class="bg-success">Default</span></div>'
                                }
                                else {
                                    selectedrkey += '<div class="pull-right"><span><span class="bg-success">Alternate</span></div>'
                                }
                            }
                            selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(FilterRestore1[0].LanguageText) + '</div>'
                        }
                        else {
                            selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '><div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" checked value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a></span></div>'
                            if (selectlanguagerkey[sel].IsAlternativeLanguage == "Yes") {
                                selectedrkey += '<div class="pull-right"><span><span class="bg-success"> Alternate </span></div>'
                            }
                            else {
                                selectedrkey += '<div class="pull-right"><span><span class="bg-success"> Default </span></div>'
                            }
                            selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(selectlanguagerkey[sel].LanguageText) + '</div>'
                        }
                    }
                }
            }
            else {
                if (selectlanguagerkeyfrmdelete.length == 0) {
                    selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '><div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a></span></div>'
                    if (selectlanguagerkey[sel].IsAlternativeLanguage == "Yes") {
                        selectedrkey += '<div class="pull-right"><span><span class="bg-success"> Alternate </span></div>'
                    }
                    else {
                        if (selectlanguagerkey[sel].IsDefaultLanguage == "Yes") {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success">Default</span></div>'
                        }
                        else {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success">Alternate</span></div>'
                        }
                    }
                    selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(selectlanguagerkey[sel].LanguageText) + '</div>'
                }
                else {
                    var FilterRestore = $.grep(arrChangestoSave, function (n, i) {
                        return (n.RowKey == selectlanguagerkey[sel].RowKey);
                    });
                    if (FilterRestore.length > 0) {
                        selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '><div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a><a href="javascript:void(0);" onclick="RestoreDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i ><img src="../Content/Images/restore.png" title="Restore"></i></a></span></div>'
                        if (FilterRestore[0].Status != "" && FilterRestore[0].Status != "Required" && FilterRestore[0].Status != "Optional") {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success">' + FilterRestore[0].Status + '</span></div>'
                        }
                        else {
                            if (selectlanguagerkey[sel].IsDefaultLanguage == "Yes") {
                                selectedrkey += '<div class="pull-right"><span><span class="bg-success">Default</span></div>'
                            }
                            else {
                                selectedrkey += '<div class="pull-right"><span><span class="bg-success">Alternate</span></div>'
                            }
                        }
                        selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(FilterRestore[0].LanguageText) + '</div>'
                    }
                    else {
                        selectedrkey = '<div class="middle-content" id=maindiv' + selectlanguagerkey[sel].RowKey + '><div class="middle-content-head clearfix"><div class="pull-left"><input id=sel' + selectlanguagerkey[sel].RowKey + ' type="checkbox" onclick="selectlanguge(this);" name="SelectedClauseLanguage" class="css1-checkbox" value=' + selectlanguagerkey[sel].LanguageTitle + ' /><span>' + selectlanguagerkey[sel].LanguageTitle + '</span><span><a href="javascript:void(0);" onclick="EditDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-pencil"></i></a><a href="javascript:void(0);" onclick="UpdateDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-save" title="Save" style="display:none;"></i></a><a href="javascript:void(0);" style="margin-left:5px;" onclick="cancellanguagetext(\'' + selectlanguagerkey[sel].RowKey + '\')"><i class="fa fa-remove" title="Cancel" style="display:none;"></i></a><a href="javascript:void(0);" onclick="RestoreDesctiption(\'' + selectlanguagerkey[sel].RowKey + '\')"><i ><img src="../Content/Images/restore.png" title="Restore"></i></a></span></div>'
                        if (selectlanguagerkey[sel].Status != "") {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success">' + selectlanguagerkey[sel].Status + '</span></div>'
                        }
                        else {
                            selectedrkey += '<div class="pull-right"><span><span class="bg-success">Default</span></div>'
                        }
                        selectedrkey += '<div class="middle-content-text" id=dive' + selectlanguagerkey[sel].RowKey + ' contentEditable="false">' + decodeURIComponent(selectlanguagerkey[sel].LanguageText) + '</div>'
                    }
                }
            }
            $("#liGroupTermsClause").append(selectedrkey);
        }
    }
}

function selectlanguge(object) {
    $("input:checkbox[name=SelectedClauseLanguage]").each(function () {
        if (this.checked) {
            if (arrfinalclauselanguage.indexOf(this.id) == (-1)) {
                var idwithsel = this.id;
                idwithsel = idwithsel.substr(3, idwithsel.length - 1)
                if (arrfinalclauselanguage.indexOf(idwithsel) == (-1)) {
                    arrfinalclauselanguage.push(this.id)
                }
            }
        }
        else {
            if (arrfinalclauselanguage.indexOf(this.id) > -1) {
                var indexvalue = arrfinalclauselanguage.indexOf(this.id);
                arrfinalclauselanguage.splice(indexvalue, 1);
            }
            else {
                var idwithsel = this.id;
                idwithsel = idwithsel.substr(3, idwithsel.length - 1)
                if (arrfinalclauselanguage.indexOf(idwithsel) > -1) {
                    var indexvalue = arrfinalclauselanguage.indexOf(idwithsel);
                    arrfinalclauselanguage.splice(indexvalue, 1);
                }
            }
        }
    });
    // alert(arrfinalclauselanguage.toString());
}

function selectlangugeinindex(object) {
    $("input:checkbox[name=viewClauseLanguage]").each(function () {
        if (this.checked) {
            if (arrfinalclauselanguage.indexOf(this.id) == (-1)) {
                var idwithsel = "sel" + this.id;
                if (arrfinalclauselanguage.indexOf(idwithsel) == (-1)) {
                    arrfinalclauselanguage.push(this.id)

                }
            }
        }
        else {
            if (arrfinalclauselanguage.indexOf(this.id) > -1) {
                var indexvalue = arrfinalclauselanguage.indexOf(this.id);
                arrfinalclauselanguage.splice(indexvalue, 1);
            }
            else {
                var idwithsel = "sel" + this.id;
                if (arrfinalclauselanguage.indexOf(idwithsel) > -1) {
                    var indexvalue = arrfinalclauselanguage.indexOf(idwithsel);
                    arrfinalclauselanguage.splice(indexvalue, 1);
                }
            }
        }
    });
    // alert(arrfinalclauselanguage.toString());
}

function EditDesctiption(rkey) {
    var arrchangingedit = { RowKey: rkey, };
    arrchangingedit.RowKey = rkey;
    arrchangingedit.Text = document.getElementById("dive" + rkey).innerHTML;
    arrforeditandcancel.push(arrchangingedit);
    arrchangingedit = [];
    if (!areaforclause12 && countareaforclause == 1) {
        areaforclause12 = new nicEditor({ buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'ol', 'ul', 'forecolor', 'bgcolor'] }).panelInstance('dive' + rkey, { hasPanel: true });
    }
    else {
        window['areaforclause' + countareaforclause] = new nicEditor({ buttonList: ['bold', 'italic', 'underline', 'strikethrough', 'ol', 'ul', 'forecolor', 'bgcolor'] }).panelInstance('dive' + rkey, { hasPanel: true });
        var person = { id: rkey, VName: 'areaforclause' + countareaforclause };
        countareaforclause++;
        GroupCollectionforclause.push(person);
    }
    $("#dive" + rkey).css("background-color", "#fff");
    $("#dive" + rkey).css("border", "1px solid gray");
    document.getElementById("dive" + rkey).contentEditable = true;
    $("#dive" + rkey).focus();

    $("#maindiv" + rkey).find('.fa.fa-pencil').css('display', 'none');
    $("#maindiv" + rkey).find('.fa.fa-save').css('display', '');
    $("#maindiv" + rkey).find('.fa.fa-remove').css('display', '');
}

function UpdateDesctiption(rkey) {
    var chakingtotrans = JSON.parse(JSON.stringify(arrClauseLangage));
    try {
        var nicInstance = nicEditors.findEditor('dive' + rkey);
        var vAlertText = CleanWordFormatFromHTML(nicInstance.getContent());
        if (vAlertText.length <= 26500) {
            vAlertText = $('<div/>').text(vAlertText).html();
            var arrupdatedforclause = $.grep(GroupCollectionforclause, function (n, i) {
                return (n.id == rkey);
            });
            if (arrupdatedforclause.length > 0) {
                var arrynametoremove = arrupdatedforclause[0].VName;
                window[arrynametoremove].removeInstance(rkey);
                window[arrynametoremove] = null;
            }
            else {
                areaforclause12.removeInstance('dive' + rkey);
                areaforclause12 = null;
            }
            var arrupdated12forclause = $.grep(GroupCollectionforclause, function (n, i) {
                return (n.id != 'dive' + rkey);
            });
            GroupCollectionforclause = arrupdated12forclause;
            document.getElementById("dive" + rkey).contentEditable = false;
            var arrupdated = $.grep(chakingtotrans, function (n, i) {
                return (n.RowKey == rkey);
            });
            if (arrupdated.length > 0) {
                arrupdated[0].Status = "Language Edited";
                arrupdated[0].LanguageText = document.getElementById("dive" + rkey).innerHTML;
                //arrupdated[0].LanguageNicText = vAlertText;
                var arrupdated12 = $.grep(arrChangestoSave, function (n, i) {
                    return (n.RowKey == arrupdated[0].RowKey);
                });
                if (arrupdated12.length > 0) {
                    var arrupdated13 = $.grep(arrChangestoSave, function (n, i) {
                        if (n.RowKey == arrupdated12[0].RowKey) {
                            n.Status = "Language Edited";
                            n.LanguageText = document.getElementById("dive" + rkey).innerHTML;
                            //n.LanguageNicText = vAlertText;
                        }
                        arrChangestoSave = arrupdated13;
                        return arrupdated13;
                    });
                }
                else {
                    arrChangestoSave.push(arrupdated[0])
                }
            }




            $("#up" + rkey).css('display', 'none');
            if (arrupdated.length > 0) {
                if (arrupdated[0].ParentLanguageID == "") {
                    Displaylanguage(rkey);
                }
                else {
                    Displaylanguage(arrupdated[0].ParentLanguageID);
                }
            }

        }
        else {
            $("#loadingPage").fadeOut();
            swal("", "Alert Text can not exceed 26500 characters");
        }
    }
    catch (ex) {
        //  alert(ex);
    }
}

function cancellanguagetext(rkey) {
    $("#dive" + rkey).css("background-color", "none");
    $("#dive" + rkey).css("border", "none");
    var arrupdated = $.grep(arrforeditandcancel, function (n, i) {
        return (n.RowKey == rkey);
    });
    if (arrupdated.length > 0) {
        document.getElementById("dive" + rkey).innerHTML = arrupdated[arrupdated.length - 1].Text;
        arrupdated = $.grep(arrforeditandcancel, function (n, i) {
            return (n.RowKey != rkey);
        });
        arrforeditandcancel = arrupdated;
    }

    var arrupdatedfoclause = $.grep(GroupCollectionforclause, function (n, i) {
        return (n.id == rkey);
    });
    if (arrupdatedfoclause.length > 0) {
        var arrynametoremove = arrupdatedfoclause[0].VName;
        window[arrynametoremove].removeInstance(rkey);
        window[arrynametoremove] = null;
    }
    else {
        areaforclause12.removeInstance('dive' + rkey);
        areaforclause12 = null;
    }
    var arrupdated12foclause = $.grep(GroupCollectionforclause, function (n, i) {
        return (n.id != rkey);
    });
    GroupCollectionforclause = arrupdated12foclause;
    document.getElementById("dive" + rkey).contentEditable = false;

    $("#maindiv" + rkey).find('.fa.fa-pencil').css('display', '');
    $("#maindiv" + rkey).find('.fa.fa-save').css('display', 'none');
    $("#maindiv" + rkey).find('.fa.fa-remove').css('display', 'none');
}

function RestoreDesctiption(rkey) {
    try {
        var arrupdated = $.grep(arrClauseLangage, function (n, i) {
            return (n.RowKey == rkey);
        });
        var arrupdatedparent = arrupdated;
        var DefaultDescr = arrupdated[0].LanguageText;
        var arrupdated = $.grep(arrChangestoSave, function (n, i) {
            return (n.RowKey == rkey);
        });
        var arrupdatedprev = $.grep(arrPrvwClause, function (n, i) {
            return (n.RowKey == rkey);
        });
        if (arrupdated.length > 0) {
            var arrupdated12 = $.grep(arrChangestoSave, function (n, i) {
                return (n.RowKey != arrupdated[0].RowKey);
            });
            arrChangestoSave = arrupdated12;
        }
        else if (arrupdatedprev.length > 0) {

            var arrupdated12 = $.grep(arrPrvwClause, function (n, i) {
                return (n.RowKey != arrupdatedprev[0].RowKey);
            });
            arrPrvwClause = arrupdated12;
        }

        if (arrupdatedparent.length > 0) {
            if (arrupdatedparent[0].ParentLanguageID == "") {
                Displaylanguage(rkey);
            }
            else {
                Displaylanguage(arrupdatedparent[0].ParentLanguageID);
            }
        }
    }
    catch (ex) {
        // alert(ex);
    }
}

var usercommnetadded = false;
function ViewClausecomments(rkey) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/clausecomment?objectid=' + rkey + '&commenttype=ContractClause&contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#ViewCommnetlanguagecollection").empty();
            if (data.length > 0) {
                $(data).each(function (i, item) {
                    var vComment = '';
                    if (i < 5) {
                        vComment = '<li><span>&nbsp;</span>';
                    } else {
                        vComment = '<li class="hiddencomment"><span>&nbsp;</span>';
                    }
                    vComment += '<p>';
                    vComment += item.Comment;
                    vComment += '<P style="padding-top: 5px;"><small style="color: #ababab !important;font-size: 12px;">Posted By: ' + item.CreatedBy + ' on ' + moment(new Date(item.Timestamp)).format('Do MMM, h:mm A') + '</small></p>';
                    vComment += '</p></li>';
                    $("#ViewCommnetlanguagecollection").append(vComment);
                });

                $("#counetcomment" + rkey).html(data.length);
                $(".hiddencomment").css("display", "none");
                if (data.length > 5) { $("#aCommentsMore").css("display", ""); }
            }
            else {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/clausecomment?objectid=' + rkey + '&commenttype=UserAdded&contractid=' + getParameterByName("ContractID"),
                    type: 'GET',
                    dataType: 'json',
                    cache: false,
                    async: false,
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    success: function (userdatadetail) {
                        $("#ViewCommnetlanguagecollection").empty();
                        if (userdatadetail.length > 0) {
                            $(userdatadetail).each(function (i, item) {
                                var vComment = '';
                                if (i < 5) {
                                    vComment = '<li><span>&nbsp;</span>';
                                } else {
                                    vComment = '<li class="hiddencomment"><span>&nbsp;</span>';
                                }
                                vComment += '<p>';
                                vComment += item.Comment;
                                vComment += '<P style="padding-top: 5px;"><small style="color: #ababab !important;font-size: 12px;">Posted By: ' + item.CreatedBy + ' on ' + moment(new Date(item.Timestamp)).format('Do MMM, h:mm A') + '</small></p>';
                                vComment += '</p></li>';
                                $("#ViewCommnetlanguagecollection").append(vComment);
                            });
                            usercommnetadded = true;
                            $("#counetcomment" + rkey).html(userdatadetail.length);
                            $(".hiddencomment").css("display", "none");
                            if (userdatadetail.length > 5) { $("#aCommentsMore").css("display", ""); }
                        }
                        else {
                            usercommnetadded = true;
                            $("#ViewCommnetlanguagecollection").append("<div>No item found.</div>");
                        }
                    },
                    error: function (userdatadetail) {
                        usercommnetadded = true;
                        $("#ViewCommnetlanguagecollection").html("<div>No item found.</div>");
                    }
                });
            }
            //$("#cmtCount").text(data.length);
            $("#txtlanguagecommnet").val("");
            $("#divbuttonfunction").empty();
            var articalbutton = '<div><a href="javascript:void(0);" class="f_button_blue" onclick="addnewlanguage(\'' + rkey + '\')" >Post</a><a href="javascript:void(0);" onclick="cancelnewlanguage(\'' + rkey + '\')"> Clear</a></div>'
            $("#divbuttonfunction").append(articalbutton);
            $("#loadingPage").fadeOut();
            $("#addViewclanguaheCommnetpopup").dialog("option", "title", "Comment");
            $("#addViewclanguaheCommnetpopup").dialog("open");
        },
        error: function () {
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/clausecomment?objectid=' + rkey + '&commenttype=UserAdded&contractid=' + getParameterByName("ContractID"),
                type: 'GET',
                dataType: 'json',
                cache: false,
                async: false,
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                success: function (userdata) {
                    $("#ViewCommnetlanguagecollection").empty();
                    if (userdata.length > 0) {
                        $(userdata).each(function (i, item) {
                            var vComment = '';
                            if (i < 5) {
                                vComment = '<li><span>&nbsp;</span>';
                            } else {
                                vComment = '<li class="hiddencomment"><span>&nbsp;</span>';
                            }
                            vComment += '<p>';
                            vComment += item.Comment;
                            vComment += '<P style="padding-top: 5px;"><small style="color: #ababab !important;font-size: 12px;">Posted By: ' + item.CreatedBy + ' on ' + moment(new Date(item.Timestamp)).format('Do MMM, h:mm A') + '</small></p>';
                            vComment += '</p></li>';
                            $("#ViewCommnetlanguagecollection").append(vComment);
                        });
                        usercommnetadded = true;
                        $("#counetcomment" + rkey).html(userdata.length);
                        $(".hiddencomment").css("display", "none");
                        if (userdata.length > 5) { $("#aCommentsMore").css("display", ""); }
                    }
                    else {
                        usercommnetadded = true;
                        $("#ViewCommnetlanguagecollection").append("<div>No item found.</div>");
                    }
                    //$("#cmtCount").text(data.length);

                },
                error: function (userdata) {
                    $("#ViewCommnetlanguagecollection").html("<div>No item found.</div>");
                }
            });
            $("#txtlanguagecommnet").val("");
            $("#divbuttonfunction").empty();
            var articalbutton = '<div><a href="javascript:void(0);" class="f_button_blue" onclick="addnewlanguage(\'' + rkey + '\')" >Post</a><a href="javascript:void(0);" onclick="cancelnewlanguage(\'' + rkey + '\')"> Clear</a></div>'
            $("#divbuttonfunction").append(articalbutton);
            $("#loadingPage").fadeOut();
            $("#addViewclanguaheCommnetpopup").dialog("option", "title", "Comment");
            $("#addViewclanguaheCommnetpopup").dialog("open");
        }
    });
}

function addnewlanguage(rkey) {
    if (requiredValidator('frmaddCommentLanguageText')) {
        $("#loadingPage").fadeIn();
        var typecomnet = "ContractClause";
        if (usercommnetadded) {
            typecomnet = "UserAdded";
        }
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/clausecomment',
            type: 'POST',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
            data: {
                ObjectID: rkey,
                Comment: $("#txtlanguagecommnet").val(),
                CommentType: typecomnet,
                CreatedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName,
                ContractID: getParameterByName("ContractID")
            },
            cache: false,
            success: function (data) {
                ViewClausecomments(rkey);
            },
            error: function () {
                $("#loadingPage").fadeOut();
                $("#txtlanguagecommnet").val("");
            },
            complete: function () {
                $("#loadingPage").fadeOut();
                $("#txtlanguagecommnet").val("");
            }
        });
    }
    else {
        $('.ui-button-green-text').parent().removeAttr('disabled');
    }
}

function cancelnewlanguage() {
    $("#txtlanguagecommnet").val("");
    $("#txtlanguagecommnet").focus();
}

function toggledivcomment(firstObject, imgObject) {
    $("#" + firstObject).slideToggle();
    var imgObj = $("#" + imgObject);

    if (imgObj.attr("title") == "Collapse") {
        imgObj.attr("title", "Expand");
        imgObj.attr("src", "../Content/Images/e-open.png");
    } else {
        imgObj.attr("title", "Collapse");
        imgObj.attr("src", "../Content/Images/e-close.png");
    }
}

function getallcontracttypecomment(rkeycollection) {
    var rowkeysplit = rkeycollection;
    if (rowkeysplit.length > 0) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/allcommnettypeclausecomment?commenttype=ContractClause',
            type: 'GET',
            dataType: 'json',
            cache: false,
            async: false,
            success: function (data) {
                var vAccFeat = $.grep(data, function (n, i) {
                    return (n.ContractID == getParameterByName("ContractID"));
                });
                if (vAccFeat.length > 0) {
                    $(rowkeysplit).each(function (i, item12) {
                        var vAccFeat12 = $.grep(vAccFeat, function (n, i) {
                            return (n.ObjectID == item12);
                        });
                        if (vAccFeat12.length > 0) {
                            $("#counetcomment" + item12).html(vAccFeat12.length);
                        }
                        else {
                            $("#counetcomment" + item12).html("0");
                        }
                    });
                }
                else {
                    $(rowkeysplit).each(function (i, item) {
                        $("#counetcomment" + item).html("0");
                    });
                }
            },
            error: function () {
                $(rowkeysplit).each(function (i, item) {
                    $("#counetcomment" + item).html("0");
                });
            }
        });
    }
}

function getallcontracttypecommentbytitle(rkeycollection) {
    var rowkeysplit = rkeycollection;
    if (rowkeysplit.length > 0) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/allcommnettypeclausecomment?commenttype=UserAdded',
            type: 'GET',
            dataType: 'json',
            cache: false,
            async: false,
            success: function (data) {
                var vAccFeat = $.grep(data, function (n, i) {
                    return (n.ContractID == getParameterByName("ContractID"));
                });
                if (vAccFeat.length > 0) {
                    $(rowkeysplit).each(function (i, item12) {
                        var vAccFeat12 = $.grep(vAccFeat, function (n, i) {
                            return (n.ObjectID == item12);
                        });
                        if (vAccFeat12.length > 0) {
                            $("#counetcomment" + item12).html(vAccFeat12.length);
                        }
                        else {
                            $("#counetcomment" + item12).html("0");
                        }
                    });
                }
                else {
                    $(rowkeysplit).each(function (i, item) {
                        $("#counetcomment" + item).html("0");
                    });
                }
            },
            error: function () {
                $(rowkeysplit).each(function (i, item) {
                    $("#counetcomment" + item).html("0");
                });
            }
        });
    }
}

function ShowAllComment() {
    $(".hiddencomment").css("display", "");
    $("#aCommentsMore").css("display", "none");
    $("#aCommentsLess").css("display", "");
}

function ShowLessComment() {
    $(".hiddencomment").css("display", "none");
    $("#aCommentsMore").css("display", "");
    $("#aCommentsLess").css("display", "none");
}

function collcettemplate() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        processData: false,
        success: function (data) {
            var vAccFeat = $.grep(data, function (n, i) {
                return (n.CreationMode == "Template");
            });
            if (vAccFeat.length > 0) {
                DocumnetTemplateCollection.push(vAccFeat[i]);
            }
        },
        error: function (request) {

        },
        complete: function () {
        }
    });
}

$("#ddlclauselanguagetemplate").change(function (obj) {
    var selectedtext = $("#ddlclauselanguagetemplate option:selected").val();
    var languagerowkeycollection = [];
    var languagetitlecollection = [];
    if (selectedtext != "All") {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/clausestepmplate?ObjectType=ContractTemplate&TemplateName=' + selectedtext,
            type: 'GET',
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            processData: false,
            success: function (data) {
                var articlelanguage = "";
                if (data != null) {
                    $("#ulTermsClauseBody").empty();
                    if (data.length > 0) {
                        $(data).each(function (i, item) {
                            var vAccFeat = $.grep(arrPrvwClause, function (n, i) {
                                return (n.RowKey == item.RowKey);
                            });
                            $(vAccFeat).each(function (i, item123) {
                                languagerowkeycollection.push(item123.RowKey);
                                articlelanguage += '<div class="tagged-inner-cont clearfix"><div class="tagged-inner-left"></div>'//<input id=sel' + item123.RowKey + ' onclick="selectlanguge(this);" type="checkbox" name="SelectedClauseLanguagedetails" value=' + item123.LanguageTitle + '></div>'
                                articlelanguage += '<div class="tagged-inner-right"><p class="action-heading">' + item123.LanguageTitle + '<a href="javascript:void(0)"></a>'//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="margin-left-5"></a>'
                                switch (item123.Status) {
                                    case 'Same as Library': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                                    }
                                        break;
                                    case 'User Added': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/red-icon.jpg" title="Not available in Library,User Added"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                                    }
                                        break;
                                    case 'Language Edited': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/yellow-icon.jpg" title="Not same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                                    }
                                        break;
                                    case 'Removed': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/flag-icon.jpg" title="Required Term Removed From Contract"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                                    }
                                        break;
                                    default: {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                                    }
                                        break;
                                }
                                articlelanguage += '<p>' + item123.LanguageText + '</p></div></div>'
                            });
                            $("#ulTermsClauseBody").html(articlelanguage);
                            articlelanguage = "";
                            if (languagerowkeycollection.length > 0) {
                                getallcontracttypecomment(languagerowkeycollection);
                            }
                        });
                        var vAccFeat123 = $.grep(arrPrvwClause, function (n, i) {
                            return (n.RowKey == "");
                        });
                        $(vAccFeat123).each(function (i, item1234) {
                            languagetitlecollection.push(item1234.LanguageTitle);
                            articlelanguage += '<div class="tagged-inner-cont clearfix"><div class="tagged-inner-left"></div>'//<input id=sel' + item123.RowKey + ' onclick="selectlanguge(this);" type="checkbox" name="SelectedClauseLanguagedetails" value=' + item123.LanguageTitle + '></div>'
                            articlelanguage += '<div class="tagged-inner-right"><p class="action-heading">' + item123.LanguageTitle + '<a href="javascript:void(0)"></a>'//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="margin-left-5"></a>'
                            switch (item1234.Status) {
                                case 'Same as Library': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item1234.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item1234.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                case 'User Added': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/red-icon.jpg" title="Not available in Library,User Added"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item1234.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item1234.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                case 'Language Edited': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/yellow-icon.jpg" title="Not same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item1234.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item1234.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                case 'Removed': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/flag-icon.jpg" title="Required Term Removed From Contract"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item1234.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item1234.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                default: {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                            }
                            articlelanguage += '<p>' + item1234.LanguageText + '</p></div></div>'
                        });
                        $("#ulTermsClauseBody").html(articlelanguage);
                        articlelanguage = '';
                        if (languagetitlecollection.length > 0) {
                            getallcontracttypecommentbytitle(languagetitlecollection);
                        }
                    }
                    else {
                        $("#ulTermsClauseBody").empty();
                        var vAccFeat123 = $.grep(arrPrvwClause, function (n, i) {
                            return (n.RowKey == "");
                        });
                        if (vAccFeat123.length > 0) {
                            $(vAccFeat123).each(function (i, item123) {
                                languagetitlecollection.push(item123.LanguageTitle);
                                articlelanguage += '<div class="tagged-inner-cont clearfix"><div class="tagged-inner-left"></div>'//<input id=sel' + item123.RowKey + ' onclick="selectlanguge(this);" type="checkbox" name="SelectedClauseLanguagedetails" value=' + item123.LanguageTitle + '></div>'
                                articlelanguage += '<div class="tagged-inner-right"><p class="action-heading">' + item123.LanguageTitle + '<a href="javascript:void(0)"></a>'//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="margin-left-5"></a>'
                                switch (item123.Status) {
                                    case 'Same as Library': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                    }
                                        break;
                                    case 'User Added': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/red-icon.jpg" title="Not available in Library,User Added"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                    }
                                        break;
                                    case 'Language Edited': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/yellow-icon.jpg" title="Not same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                    }
                                        break;
                                    case 'Removed': {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/flag-icon.jpg" title="Required Term Removed From Contract"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                    }
                                        break;
                                    default: {
                                        articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                    }
                                        break;
                                }
                                articlelanguage += '<p>' + item123.LanguageText + '</p></div></div>'
                            });
                            $("#ulTermsClauseBody").html(articlelanguage);
                            articlelanguage = '';
                            if (languagetitlecollection.length > 0) {
                                getallcontracttypecommentbytitle(languagetitlecollection);
                            }
                        }
                        else {
                            $("#ulTermsClauseBody").html("<li style='margin-top: 10px'>No items found.</li>");
                        }
                    }
                }
                else {
                    $("#ulTermsClauseBody").empty();
                    articlelanguage = '';
                    var vAccFeat123 = $.grep(arrPrvwClause, function (n, i) {
                        return (n.RowKey == "");
                    });
                    if (vAccFeat123.length > 0) {
                        $(vAccFeat123).each(function (i, item123) {
                            languagetitlecollection.push(item123.LanguageTitle);
                            articlelanguage += '<div class="tagged-inner-cont clearfix"><div class="tagged-inner-left"></div>'//<input id=sel' + item123.RowKey + ' onclick="selectlanguge(this);" type="checkbox" name="SelectedClauseLanguagedetails" value=' + item123.LanguageTitle + '></div>'
                            articlelanguage += '<div class="tagged-inner-right"><p class="action-heading">' + item123.LanguageTitle + '<a href="javascript:void(0)"></a>'//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="margin-left-5"></a>'
                            switch (item123.Status) {
                                case 'Same as Library': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                case 'User Added': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/red-icon.jpg" title="Not available in Library,User Added"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                case 'Language Edited': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/yellow-icon.jpg" title="Not same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                case 'Removed': {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/flag-icon.jpg" title="Required Term Removed From Contract"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                                default: {
                                    articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.LanguageTitle + '></span>)</span></p>';
                                }
                                    break;
                            }
                            articlelanguage += '<p>' + item123.LanguageText + '</p></div></div>'
                        });
                        $("#ulTermsClauseBody").html(articlelanguage);
                        articlelanguage = ''
                        if (languagetitlecollection.length > 0) {
                            getallcontracttypecommentbytitle(languagetitlecollection);
                        }
                    }
                    else {
                        $("#ulTermsClauseBody").html("<li style='margin-top: 10px'>No items found.</li>");
                    }
                }
            },
            error: function (request) {
                $("#ulTermsClauseBody").empty();
                var articlelanguage = '';
                var vAccFeat123 = $.grep(arrPrvwClause, function (n, i) {
                    return (n.RowKey == "");
                });
                if (vAccFeat123.length > 0) {
                    $(vAccFeat123).each(function (i, item123) {
                        languagetitlecollection.push(item123.LanguageTitle);
                        articlelanguage += '<div class="tagged-inner-cont clearfix"><div class="tagged-inner-left"></div>'//<input id=sel' + item123.RowKey + ' onclick="selectlanguge(this);" type="checkbox" name="SelectedClauseLanguagedetails" value=' + item123.LanguageTitle + '></div>'
                        articlelanguage += '<div class="tagged-inner-right"><p class="action-heading">' + item123.LanguageTitle + '<a href="javascript:void(0)"></a>'//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="margin-left-5"></a>'
                        switch (item123.Status) {
                            case 'Same as Library': {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id="counetcomment' + item123.LanguageTitle + '"></span>)</span></p>';
                            }
                                break;
                            case 'User Added': {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/red-icon.jpg" title="Not available in Library,User Added"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id="counetcomment' + item123.LanguageTitle + '"></span>)</span></p>';
                            }
                                break;
                            case 'Language Edited': {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/yellow-icon.jpg" title="Not same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id="counetcomment' + item123.LanguageTitle + '"></span>)</span></p>';
                            }
                                break;
                            case 'Removed': {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/flag-icon.jpg" title="Required Term Removed From Contract"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id="counetcomment' + item123.LanguageTitle + '"></span>)</span></p>';
                            }
                                break;
                            default: {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.LanguageTitle + '\')" ><img src="../Content/Images/comment.png"></a>(<span id="counetcomment' + item123.LanguageTitle + '"></span>)</span></p>';
                            }
                                break;
                        }
                        articlelanguage += '<p>' + item123.LanguageText + '</p></div></div>'
                    });
                    $("#ulTermsClauseBody").html(articlelanguage);
                    articlelanguage = '';
                    if (languagetitlecollection.length > 0) {
                        getallcontracttypecommentbytitle(languagetitlecollection);
                    }
                }
                else {
                    $("#ulTermsClauseBody").html("<li style='margin-top: 10px'>No items found.</li>");
                }
            },
            complete: function () {
            }
        });
    }
    else {
        if (arrPrvwClause != null) {
            if (arrPrvwClause.length > 0) {
                $("#ulTermsClauseBody").empty();
                var articlelanguage = '';
                $(arrPrvwClause).each(function (i, item123) {
                    if (item123.RowKey != "" && item123.RowKey != null) {
                        languagerowkeycollection.push(item123.RowKey);
                    }
                    articlelanguage += '<div class="tagged-inner-cont clearfix"><div class="tagged-inner-left"></div>'//<input id=sel' + item123.RowKey + ' onclick="selectlanguge(this);" type="checkbox" name="SelectedClauseLanguagedetails" value=' + item123.LanguageTitle + '></div>'
                    articlelanguage += '<div class="tagged-inner-right"><p class="action-heading">' + item123.LanguageTitle + '<a href="javascript:void(0)"></a>'//<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="margin-left-5"></a>'
                    switch (item123.Status) {
                        case 'Same as Library': {
                            articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                        }
                            break;
                        case 'User Added': {
                            articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/red-icon.jpg" title="Not available in Library,User Added"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                        }
                            break;
                        case 'Language Edited': {
                            articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/yellow-icon.jpg" title="Not same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                        }
                            break;
                        case 'Removed': {
                            articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/flag-icon.jpg" title="Required Term Removed From Contract"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                        }
                            break;
                        default: {
                            articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + item123.RowKey + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + item123.RowKey + '></span>)</span></p>';
                        }
                            break;
                    }
                    articlelanguage += '<p>' + item123.LanguageText + '</p></div></div>'
                });
                $("#ulTermsClauseBody").html(articlelanguage);
                articlelanguage = ''
                if (languagerowkeycollection.length > 0) {
                    getallcontracttypecomment(languagerowkeycollection);
                }
            }
            else {
                $("#ulTermsClauseBody").html("<li style='margin-top: 10px'>No items found.</li>");
            }
        }
        else {
            $("#ulTermsClauseBody").html("<li style='margin-top: 10px'>No items found.</li>");
        }
    }
});

$("#ddlTemplateAndClauses").change(function (obj) {
    $("#ulTermsClauseBody").html('<img src="../Content/Images/icon/loading.gif">');
    var selectedtext = $("#ddlTemplateAndClauses option:selected").val();
    if (selectedtext != "0") {
        var docversionnum = '';
        var docversionby = '';
        var docversiondate = '';
        var docversioncollection = false;
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/' + selectedtext + '/versions',
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            async: false,
            success: function (data) {
                var datalength = data.length;
                docversioncollection = true;
                docversionnum = data[datalength - 1].VersionNo;
                docversionby = data[datalength - 1].ModifiedBy;
                docversiondate = data[datalength - 1].Modified;
            },
            error: function () {
                docversioncollection = true;
                docversionnum = "0.0";
                docversionby = "None";
                docversiondate = "None";
            }
        });
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/clause/clausesindocument?documentid=' + selectedtext,
            type: 'GET',
            dataType: 'json',
            cache: false,
            async: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (Languagecollection) {
                if (Languagecollection != null) {

                    arrfinalclauselanguage = [];
                    arrPrvwClause = [];
                    arrforeditandcancel = [];
                    $("#ulTermsClauseBody").empty();
                    //$("#lblTermsClauseCount").empty();
                    languagerowkeycollection = [];
                    languagetitlecollection = [];
                    var articlelanguage = '';
                    var docurlkeyword = '';
                    for (var arrdsp = 0; arrdsp < Languagecollection.length; arrdsp++) {
                        var viewleveldata = '';
                        if (Languagecollection[arrdsp].RowKey != "" && Languagecollection[arrdsp].RowKey != null) {
                            languagerowkeycollection.push(Languagecollection[arrdsp].RowKey);
                            viewleveldata = Languagecollection[arrdsp].RowKey;
                        }
                        else {
                            languagetitlecollection.push(Languagecollection[arrdsp].LanguageTitle);
                            viewleveldata = Languagecollection[arrdsp].LanguageTitle;
                        }
                        arrfinalclauselanguage.push(Languagecollection[arrdsp].RowKey);
                        arrPrvwClause.push(Languagecollection[arrdsp]);
                        articlelanguage += '<div class="tagged-inner-cont clearfix"><div class="tagged-inner-left"></div>'//<input id=sel' + Languagecollection[arrdsp].RowKey + ' onclick="selectlanguge(this);" type="checkbox" name="SelectedClauseLanguagedetails" value=' + Languagecollection[arrdsp].LanguageTitle + '>
                        articlelanguage += '<div class="tagged-inner-right"><p class="action-heading">' + Languagecollection[arrdsp].LanguageTitle + '<a href="javascript:void(0)"></a>' //<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="margin-left-5"></a>'
                        var isremoved = "false"
                        switch (Languagecollection[arrdsp].Status) {
                            case 'User Added': {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/red-icon.jpg" title="Not available in Library,User Added"></a><span style="float:right;"><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + viewleveldata + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + viewleveldata + '></span>)</span></p>';
                            }
                                break;
                            case 'Language Edited': {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/yellow-icon.jpg" title="Not same as Library"></a><span style="float:right;"><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + viewleveldata + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + viewleveldata + '></span>)</span></p>';
                            }
                                break;
                            case 'Removed': {
                                isremoved = "true";
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/flag-icon.jpg" title="Required Term Removed From Contract"></a><span style="float:right;"><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + viewleveldata + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + viewleveldata + '></span>)</span></p>';
                            }
                                break;
                            case 'Same as Library':
                            default: {
                                articlelanguage += '<a class="bars-green" href="javascript:void(0)"><img src="../Content/Images/green-icon.jpg" title="Same as Library"></a><span style="float:right;"><a href="javascript:void(0)" title="Comments" onclick="ViewClausecomments(\'' + viewleveldata + '\')" ><img src="../Content/Images/comment.png"></a>(<span id=counetcomment' + viewleveldata + '></span>)</span></p>';
                            }
                                break;
                        }
                        if (isremoved == "true") {
                            var cleanText = Languagecollection[arrdsp].LanguageText.replace(/<\/?[^>]+(>|$)/g, "");
                            //articlelanguage += '<p style="text-decoration:line-through;">' + cleanText + '</p></div></div>'
                            articlelanguage += '<p>' + cleanText + '</p></div></div>'
                        } else {
                            articlelanguage += '<p>' + Languagecollection[arrdsp].LanguageText + '</p></div></div>'
                        }
                        docurlkeyword = Languagecollection[arrdsp].Keywords;
                    }
                    $("#ulTermsClauseBody").html(articlelanguage);
                    var divVersions = '<span>Current Version </span>';
                    divVersions += '<span class="ViewDoc_version">' + docversionnum + '</span>';
                    divVersions += '<span> By</span>';
                    divVersions += '<span class="grey"> ' + docversionby + '</span>';
                    divVersions += '<span> on</span>';
                    divVersions += '<span class="grey"> ' + moment(new Date(docversiondate)).format('Do MMM YYYY') + '</span> ';
                    //divVersions += '<span><button type="button" class="Viewdoc_word" style="cursor:pointer" onclick="viewdocinword(\'' + docurlkeyword + '\')">View in word</button></span>';
                    divVersions += '<span class="Viewdoc_word" ><span class="dropdown">'
                    divVersions += '<a aria-expanded="false" aria-haspopup="true" role="button" data-toggle="dropdown" href="javascript:void(0);" data-target="#" id="dLabel">'
                    divVersions += 'View Document'
                    divVersions += '<span class="caret"></span>'
                    divVersions += '</a>'
                    divVersions += '<ul class="dropdown-menu" aria-labelledby="dLabel">'
                    divVersions += '<li><a href="javascript:void(0);" onclick="viewdocinword(\'' + docurlkeyword + '\')">Open in Word</a></li>'
                    divVersions += '<li><a href="' + localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + docurlkeyword + "&action=default" + '" target="_blank">Open in Word Online</a></li>'
                    divVersions += '</ul>'
                    divVersions += '</span>'
                    divVersions += '</span>'

                    $("#docversion").html(divVersions);

                    //$("#docversion").html('<span>Current Version</span><span class="ViewDoc_version">' + docversionnum + '</span><span><button type="button" class="Viewdoc_word"  style="cursor:pointer" onclick="viewdocinword(\'' + docurlkeyword + '\')">View in word</button ></span>')
                    $("#docversion").css("display", "inline-block");
                    articlelanguage = '';
                    if (languagerowkeycollection.length > 0) {
                        getallcontracttypecomment(languagerowkeycollection);
                    }

                    //if (languagetitlecollection.length > 0) {
                    //    getallcontracttypecommentbytitle(languagetitlecollection);
                    //}
                    //var optiontemplate = '<option value="All">All</option>';
                    //if (DocumnetTemplateCollection.length > 0) {
                    //    $(DocumnetTemplateCollection).each(function (i, Templatecollection) {
                    //        optiontemplate += '<option value="' + Templatecollection.DocumentName + '">' + Templatecollection.DocumentName + '</option>'
                    //    });
                    //    $("#ddlclauselanguagetemplate").append(optiontemplate);
                    //}
                    //else {
                    //    $("#ddlclauselanguagetemplate").append(optiontemplate);
                    //}
                    //$("#lblTermsClauseCount").empty();
                    //$("#lblTermsClauseCount").append(Languagecollection.length);
                } else {
                    $("#ulTermsClauseBody").html("<li style='margin-top: 10px'>No items found.</li>");
                    $("#docversion").css("display", "none");
                }
            },
            error: function () {
                $("#ulTermsClauseBody").html("<li style='margin-top: 10px'>No items found.</li>");
                $("#docversion").css("display", "none");
                //$("#lblTermsClauseCount").empty();
                //$("#lblTermsClauseCount").append("0");
            }
        });
    } else {
        $("#docversion").css("display", "none");
        $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
    }
});

function viewdocinword(docurl) {
    var fileextension = docurl.split('.').pop();
    if (fileextension == 'docx' || fileextension == 'doc') {
        window.open("ms-word:ofe|u|" + decodeURIComponent(docurl), "_self");
        $("#showMSWordPopup_head").html("We're opening your document in Microsoft Word...");
        $("#showMSWordPopup_head").removeClass("red-text");
        $("#showMSWordPopup_head").removeClass("green-text");
        $("#showMSWordPopup_head").addClass("blue-text");
        $("#editwordlink").removeClass("redbg");
        $("#editwordlink").removeClass("greenbg");
        $("#editwordlink").addClass("bluebg");
        $("#linkEditInWordOnline").html('<p><img src="../Content/Images/wordonline.png" alt=""></p><p>Edit in Word Online</p>')

    } else if (fileextension == 'pptx' || fileextension == 'ppt') {
        window.open("ms-powerpoint:ofe|u|" + decodeURIComponent(docurl), "_self");
        $("#showMSWordPopup_head").html("We're opening your document in Microsoft PowerPoint...");
        $("#showMSWordPopup_head").removeClass("blue-text");
        $("#showMSWordPopup_head").removeClass("green-text");
        $("#showMSWordPopup_head").addClass("red-text");

        $("#editwordlink").removeClass("greenbg");
        $("#editwordlink").removeClass("bluebg");
        $("#editwordlink").addClass("redbg");
        $("#linkEditInWordOnline").html('<p><img src="../Content/Images/powerpointonline.png" alt=""></p><p>Edit in PowerPoint Online</p>')

    } else if (fileextension == 'xlsx' || fileextension == 'xls') {
        window.open("ms-excel:ofe|u|" + decodeURIComponent(docurl), "_self");
        $("#showMSWordPopup_head").html("We're opening your document in Microsoft Excel...");
        $("#showMSWordPopup_head").removeClass("blue-text");
        $("#showMSWordPopup_head").removeClass("red-text");
        $("#showMSWordPopup_head").addClass("green-text");
        $("#editwordlink").removeClass("bluebg");
        $("#editwordlink").removeClass("redbg");
        $("#editwordlink").addClass("greenbg");
        $("#linkEditInWordOnline").html('<p><img src="../Content/Images/excelonline.png" alt=""></p><p>Edit in Excel Online</p>')

    }

    $("#linkEditInWordOnline").attr('href', localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + docurl + "&action=default")
    $("#showMSWordPopup").dialog("option", "title", "");
    $("#showMSWordPopup").dialog("open");
}

var vCounterpartyFields = [];

function getCounterpartyprimaryFields() {

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/primaryfields',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (metadataFields) {
            vCounterpartyFields = [];
            $(metadataFields).each(function (i, item) {
                if ((item.FieldName == "CounterpartyName") || (item.FieldName == "CounterpartyType") || (item.FieldName == "Status")) {
                    if (item.FieldName == "CounterpartyType") {
                        vCounterpartyFields.push(item.FieldName)
                    }
                }
                else {
                    vCounterpartyFields.push(item.FieldName)
                }
            });

        },
        error: function (metadataFields) {
            vCounterpartyFields = [];
        }
    });
}

function CreateCounterPartyListUnit(page) {
    $("#tblCounterparties").css("display", "");
    var startIndex = page * 10;
    var endIndex = startIndex + 10;
    $('#tblCounterparties').empty();
    if (endIndex > myCounterPartyArray.length) endIndex = myCounterPartyArray.length;
    $("#spResult").html((startIndex + 1) + '&nbsp;to&nbsp;' + endIndex + '&nbsp;of&nbsp;' + myCounterPartyArray.length);
    var resultfound = false;
    var checkboxchecking = true;
    if (startIndex == endIndex) {
        var art = "No items found.";
        $("#tblCounterparties").html(art);
        checkboxchecking = false;
        $('#loadGenCounterParty').empty();
    }
    else {
        $("#tblCounterparties").html('');
        var spltarrprevRUstr = CounterPartyArrayprev.toString();
        if (spltarrprevRUstr.indexOf(";") > -1) {
            var spltarrprevRU = spltarrprevRUstr.split(';');
            CounterPartyArrayprev = [];
            for (var arrli = 0; arrli < spltarrprevRU.length; arrli++) {
                if (spltarrprevRU[arrli].trim() != "") {
                    CounterPartyArrayprev.push(spltarrprevRU[arrli].trim());
                }
            }
        }
        var article = "";
        for (var i = startIndex; i < endIndex; i++) {

            if (i == startIndex) {
                article += '<tr><th style="width:35%;"><input id="selectallCounterParty" onclick="funselectallCounterParty(this);" type="checkbox"/> Select/Deselect All</th><th style="width:20%;">Counterparty Type</th><th>Global or Regional</th></tr>';
            }

            article += '<tr><td>';
            if (CounterPartyArrayprev != null && multipleChecksDocumentIDd.length > 0) {
                if (CounterPartyArrayprev.indexOf(myCounterPartyArray[i].CounterpartyName.trim()) >= 0 && multipleChecksDocumentIDd.indexOf(myCounterPartyArray[i].CounterpartyName.trim()) > -1) {
                    article += '<input id="CP' + myCounterPartyArray[i].RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);" checked class="css1-checkbox" value="' + escape(myCounterPartyArray[i].CounterpartyName.trim()) + '" />';
                }
                else if (multipleChecksDocumentIDd.indexOf(myCounterPartyArray[i].CounterpartyName.trim()) > -1) {
                    article += '<input id="' + myCounterPartyArray[i].RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);" checked class="css1-checkbox" value="' + escape(myCounterPartyArray[i].CounterpartyName.trim()) + '" />';
                }
                else {
                    article += '<input id="' + myCounterPartyArray[i].RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);"  class="css1-checkbox" value="' + escape(myCounterPartyArray[i].CounterpartyName.trim()) + '" />';
                    checkboxchecking = false;
                }
            }
            else if (CounterPartyArrayprev.indexOf(myCounterPartyArray[i].CounterpartyName.trim()) >= 0 && multipleChecksDocumentIDd.length == 0) {
                article += '<input id="' + myCounterPartyArray[i].RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);" checked class="css1-checkbox" value="' + escape(myCounterPartyArray[i].CounterpartyName.trim()) + '" />';
            }
            else if (multipleChecksDocumentIDd.indexOf(myCounterPartyArray[i].CounterpartyName.trim()) > -1) {
                article += '<input id="' + myCounterPartyArray[i].RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);" checked class="css1-checkbox" value="' + escape(myCounterPartyArray[i].CounterpartyName.trim()) + '" />';
            }
            else {
                article += '<input id="' + myCounterPartyArray[i].RowKey + '" type="checkbox" name="Counterparty" onclick="checkMultipleDocumentsCounterParty(this);"  class="css1-checkbox" value="' + escape(myCounterPartyArray[i].CounterpartyName.trim()) + '" />';
                checkboxchecking = false;
            }
            article += '<label for="CP' + myCounterPartyArray[i].RowKey + '" class="css1-label"  style="display: inline;">' + myCounterPartyArray[i].CounterpartyName.trim() + '</label></td>';
            article += '<td>' + myCounterPartyArray[i].CounterpartyType + '';
            article += '</td>';
            article += '<td>' + (myCounterPartyArray[i].IsGlobal == "Yes" ? "Global" : myCounterPartyArray[i].BusinessAreas) + '';
            article += '</td></tr>';
            resultfound = true;
        }
        $("#tblCounterparties").html(article);
        article = '';
        $('#loading').empty();
    }
    if (checkboxchecking == true) {
        $("#selectallCounterParty").attr('checked', true);
    }
    else {
        $("#selectallCounterParty").attr('checked', false);
    }
    var checkingsdivchild = document.getElementById("liSelectedCounterParty").hasChildNodes();
    if (!checkingsdivchild) {
        if (multipleChecksDocumentIDd.length > 0) {
            for (var spl = 0; spl < multipleChecksDocumentIDd.length; spl++) {
                if (multipleChecksDocumentIDd[spl].trim() != "") {
                    $('#liSelectedCounterParty').append('<span style="font-size:13px;">' + multipleChecksDocumentIDd[spl].trim() + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedCouterParty(this);" style="float:right" /></span>');
                }
            }
        }
        else {
            var textvalid = "";
            if (strSelCounterPartyField != "") {
                $("#" + strSelCounterPartyField + "").val()
            }
            else {
                $("#Counterparty").val()
            }
            if (typeof textvalid != 'undefined' && textvalid != "") {
                var splitmulicheckforbind = textvalid.split(';');
                for (var spl = 0; spl < splitmulicheckforbind.length; spl++) {
                    if (splitmulicheckforbind[spl].trim() != "") {
                        $('#liSelectedCounterParty').append('<span style="font-size:13px;">' + splitmulicheckforbind[spl] + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedCouterParty(this);" style="float:right" /></span>');
                        multipleChecksDocumentIDd.push(splitmulicheckforbind[spl].trim());
                    }
                }
            }
            else {
                checkMultipleDocumentsCounterParty("");
            }
        }
    }
    $('#loadGenCounterParty').empty();
}


function SearchCounterparty() {
    var baname = "";
    if (typeof localStorage.GlobalBusinessAreaLocation != "undefined" && localStorage.GlobalBusinessAreaLocation != "" && localStorage.GlobalBusinessAreaLocation != "All") {
        baname = encodeURIComponent(localStorage.GlobalBusinessAreaLocation);
    }
    $("#tblCounterparties").html('<img src="../Content/Images/icon/loading.gif"> ');
    $("#liSelectedCounterParty").empty();
    multipleChecksDocumentIDd = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/getrelatedcounterparty?searchkeyword=' + encodeURIComponent($("#txtSearchBox").val()) + '&customquery=&sortbyfield=CounterpartyName&orderby=ASC',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: localStorage.GlobalBusinessAreaLocation },
        cache: false,
        success: function (data) {
            $("#tblCounterparties").empty();
            $("#liSelectedCounterParty").empty();
            CounterPartyArrayprev = [];
            if (strSelCounterPartyField != "") {
                $.each($('#' + strSelCounterPartyField + '').val().split(";"), function () {
                    CounterPartyArrayprev.push($.trim(this));
                });
            }
            else {
                $.each($('#Counterparty').val().split(";"), function () {
                    CounterPartyArrayprev.push($.trim(this));
                });
            }

            myCounterPartyArray = [];
            var obj1 = {};
            //manoj
            for (var i = 0; i < data.length; i++) {
                if (!(data[i].CounterpartyName in obj1)) {
                    if (data[i].CounterpartyName.trim() != "") {
                        if (data[i].IsGlobal == "Yes")
                            myCounterPartyArray.push(data[i]);
                        else {
                            if (typeof (data[i].BusinessAreasPath) != "undefined" && data[i].BusinessAreasPath != "") {
                                var contractarea = "";
                                var Businesssarea = "";
                                var splitbusinessPath = data[i].BusinessAreasPath.split(';');
                                $(splitbusinessPath).each(function (index) {
                                    if (this != null && this.toString() != "") {
                                        var contBusi = this.split('>');
                                        if (typeof (contBusi) != "undefined") {
                                            if (contBusi.length > 0) {
                                                contractarea = contBusi[0].trim();
                                                Businesssarea = contBusi[contBusi.length - 1].trim();
                                                if (thisBusinessAreaNameC == Businesssarea && thisContractAreaNameC == contractarea)
                                                    myCounterPartyArray.push(data[i]);
                                            }
                                        }
                                    }
                                })

                            }
                        }
                    }
                }
                obj1[data[i].CounterpartyName] = true;
            }
            //manoj
            //for (var i = 0; i < data.length; i++) {
            //    if (!(data[i].CounterpartyName in obj1)) {
            //        if (data[i].CounterpartyName.trim() != "") {
            //            myCounterPartyArray.push(data[i]);
            //        }
            //    }
            //    obj1[data[i].CounterpartyName] = true;
            //}
            var resultfound = true;
            var myArraylength = myCounterPartyArray.length;
            CreateCounterPartyListUnit(0);
            var vCount = myArraylength;
            var columncounterparty = [];
            $('#compact-paginationCounterparties').css("display", "");
            $(myCounterPartyArray).each(function (imyCounterPartyArray, itmmyCounterPartyArray) {
                columncounterparty.push(itmmyCounterPartyArray.CounterpartyName);
            });
            //for (var ci = 0; ci < myCounterPartyArray.length; ci++) {
            //    columncounterparty.push(myCounterPartyArray[ci].CounterpartyName);
            //}
            $("#txtSearchBox").autocomplete({
                source: columncounterparty,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBox").val(uidetails.item.label);
                    SearchCounterparty();
                }
            });
            $('#compact-paginationCounterparties').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tblCounterparties',
                cssStyle: 'compact-theme',
                listname: 'CounterPartyListUnit'
            });
            $("#loadingPage").fadeOut();
            $("#browseCounterparty").dialog("option", "title", "Counterparty Picker");
            $("#browseCounterparty").dialog("open");
        },
        error:
            function (data) {
                $('#compact-paginationCounterparties').css("display", "none");
                $("#liSelectedCounterParty").empty();
                $("#tblCounterparties").html('No items found.');
                $("#browseCounterparty").dialog("option", "title", "Counterparty Picker");
                $("#browseCounterparty").dialog("open");
                $("#loadingPage").fadeOut();
            }
    });
}

function amendmentsucessbinding() {
    if (amendmentcompletedchecking == true) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + getParameterByName("ContractID"),
            type: 'GET',
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
            processData: false,
            success: function (item) {
                //if (item.ContractValue != "0") {
                //    $("#lblContractValue").text("Not available");
                //    $("#txtContractValueCurrent").val("Not Available");
                //    $("#lblContractCurrency").text("");

                //    $.ajax({
                //        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
                //        type: 'GET',
                //        dataType: 'json',
                //        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                //        cache: false,
                //        success: function (data) {
                //            if (data.CurrencyDisplayStyle == "UK") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init');
                //                vCurrencyDisplayStyle = "UK";
                //            } else if (data.CurrencyDisplayStyle == "CAN") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: ' ', aDec: '.' });
                //                vCurrencyDisplayStyle = "CAN";
                //            } else if (data.CurrencyDisplayStyle == "EU") {
                //                $('#txtContractValueAfterAmend').autoNumeric('init', { aSep: '.', aDec: ',' });
                //                vCurrencyDisplayStyle = "EU";
                //            }
                //            $("#loadingPage").fadeOut();
                //        }
                //    });

                //} else {
                GetContractValueSetting(item);
                amendmentcompletedchecking = false;
                //}
            },
            error:
                       function (data) {
                           $("#loadingPage").fadeOut();
                       }
        });
    }
    else {
        $("#loadingPage").fadeOut();
    }
}



function funselectall(obj) {
    if (obj.checked) { // check select status  
        $('input:checkbox[name=Generic]').attr('checked', true);
        checkGeneric("");
    } else {
        $('input:checkbox[name=Generic]').attr('checked', false);

        checkGeneric("");
    }
}


//function checkMultipleDocumentsd(object) {
//    $('#liSelectedRU').empty();
//    var checkboxcheck = true;
//    $('input[type=checkbox][name="Generic"]').each(function () {
//        var DocumentID = this.id;
//        var duplicatechecking = false;
//        var isChecked = this.checked;
//        if (isChecked) {
//            if ((multipleChecksDocumentIDd.indexOf(DocumentID.trim())) == -1) {
//                multipleChecksDocumentIDd.push(DocumentID.trim());
//            }
//        }
//        else {
//            if (multipleChecksDocumentIDd.indexOf(DocumentID.trim()) != -1) {
//                var ind = multipleChecksDocumentIDd.indexOf(DocumentID.trim());
//                multipleChecksDocumentIDd.splice(ind, 1);
//            }
//            checkboxcheck = false;
//        }
//    });
//    for (var spl = 0; spl < multipleChecksDocumentIDd.length; spl++) {
//        if (multipleChecksDocumentIDd[spl].trim() != "") {
//            $('#liSelectedRU').append('<span style="font-size:13px;">' + multipleChecksDocumentIDd[spl].trim() + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedCouterParty(this);" style="float:right" /></span>');
//        }
//    }
//    if (checkboxcheck == true) {
//        $("#selectall").attr('checked', true);
//    }
//    else {
//        $("#selectall").attr('checked', false);
//    }
//    try {
//        hideAllMenuAndStopPro(event);
//    }
//    catch (ex) {

//    }
//}

//function liRemoveSelectedRU(obj) {
//    var child = obj.parentNode;
//    var child12 = child.firstChild.nodeValue;
//    child12 = child12.trim();
//    if (multipleChecksDocumentIDd.indexOf(child12) != -1) {
//        var ind = multipleChecksDocumentIDd.indexOf(child12);
//        multipleChecksDocumentIDd.splice(ind, 1);
//    }

//    $("#" + child12).attr('checked', false);
//    var checkboxcheck = true;
//    child.parentNode.removeChild(child);
//    $('input[type=checkbox][name="Generic"]').each(function () {
//        var DocumentID = this.value;
//        var duplicatechecking = false;
//        if (multipleChecksDocumentIDd.indexOf(DocumentID.trim()) > -1) {
//        }
//        else {
//            this.checked = false;
//        }
//        var isChecked = this.checked;
//        if (!isChecked) {
//            checkboxcheck = false;
//        }
//    });
//    if (checkboxcheck == true) {
//        $("#selectall").attr('checked', true);
//    }
//    else {
//        $("#selectall").attr('checked', false);
//    }
//}

function CreateReportUnitList(page) {
    $("#tblGeneric").css("display", "");
    var startIndex = page * 10;
    var endIndex = startIndex + 10;
    $('#tblGeneric').empty();
    if (endIndex > myArrayRU.length) endIndex = myArrayRU.length;
    $("#spResult").html((startIndex + 1) + '&nbsp;to&nbsp;' + endIndex + '&nbsp;of&nbsp;' + myArrayRU.length);
    var resultfound = false;
    var checkboxchecking = true;
    if (startIndex == endIndex) {
        var art = "No items found.";
        $("#tblGeneric").html(art);
        checkboxchecking = false;
        $('#loadGen').empty();
    }
    else {
        $("#tblGeneric").html('');
        var spltarrprevRUstr = arrprevRU.toString();
        if (spltarrprevRUstr.indexOf(";") > -1) {
            var spltarrprevRU = spltarrprevRUstr.split(';');
            arrprevRU = [];
            for (var arrli = 0; arrli < spltarrprevRU.length; arrli++) {
                if (spltarrprevRU[arrli].trim() != "") {
                    arrprevRU.push(spltarrprevRU[arrli]);
                }
            }
        }
        for (var i = startIndex; i < endIndex; i++) {
            var article = "";
            if (i == startIndex) {
                article += '<tr><th><input id="selectall" onclick="funselectall(this);" type="checkbox"/> Select/Deselect All</th></tr>';
            }

            article += '<tr><td>';
            if (arrprevRU != null && multipleChecksDocumentIDd.length > 0) {
                if (arrprevRU.indexOf(myArrayRU[i]) >= 0 && multipleChecksDocumentIDd.indexOf(myArrayRU[i].trim()) > -1) {
                    article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                }
                else if (multipleChecksDocumentIDd.indexOf(myArrayRU[i].trim()) > -1) {
                    article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                }
                else {
                    article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);"  class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                    checkboxchecking = false;
                }
            }
            else if (arrprevRU.indexOf(myArrayRU[i]) >= 0 && multipleChecksDocumentIDd.length == 0) {
                article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
            }
            else if (multipleChecksDocumentIDd.indexOf(myArrayRU[i].trim()) > -1) {
                article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);" checked class="css1-checkbox" value="' + myArrayRU[i] + '" />';
            }
            else {
                article += '<input id="' + myArrayRU[i] + '" type="checkbox" name="Generic" onclick="checkGeneric(this);"  class="css1-checkbox" value="' + myArrayRU[i] + '" />';
                checkboxchecking = false;
            }
            article += '<label for="' + myArrayRU[i] + '" class="css1-label">' + myArrayRU[i] + '</label>';
            article += '</td></tr>';
            $("#tblGeneric").append(article);
            $('#loading').empty();
            resultfound = true;

        }
    }
    if (checkboxchecking == true) {
        $("#selectall").attr('checked', true);
    }
    else {
        $("#selectall").attr('checked', false);
    }
    var checkingsdivchild = document.getElementById("liSelectedRU").hasChildNodes();
    if (!checkingsdivchild) {
        if (multipleChecksDocumentIDd.length > 0) {
            for (var spl = 0; spl < multipleChecksDocumentIDd.length; spl++) {
                if (multipleChecksDocumentIDd[spl].trim() != "") {
                    $('#liSelectedRU').append('<span style="font-size:13px;">' + multipleChecksDocumentIDd[spl].trim() + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedRU(this);" style="float:right" /></span>');
                }
            }
        }
        else {
            var idtext = $("#browseGeneric").data('param_1');
            if (typeof idtext != 'undefined') {
                var textvalid = $('#' + idtext).val();
                if (typeof textvalid != 'undefined' && textvalid != "") {
                    var splitmulicheckforbind = textvalid.split(';');
                    for (var spl = 0; spl < splitmulicheckforbind.length; spl++) {
                        if (splitmulicheckforbind[spl].trim() != "") {
                            $('#liSelectedRU').append('<span style="font-size:13px;">' + splitmulicheckforbind[spl] + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedRU(this);" style="float:right" /></span>');
                            multipleChecksDocumentIDd.push(splitmulicheckforbind[spl].trim());
                        }
                    }
                }
                else {
                    checkGeneric("");
                }
            }
            else {
                checkGeneric("");
            }
        }
    }
    $('#loadGen').empty();
}

function ViewProjects() {
    $('#loadPro').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tblProjects tr').length <= 0) {
        ProjectsFunc();
    } else {
        $('#loadPro').empty();
        $("#browseProjects").dialog("option", "title", "Project Picker");
        $("#browseProjects").dialog("open");
    }
}

function ViewProjectTasks() {
    if ($("#Project").val() != "") {
        $('#loadPro').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
        ProjectTasksFunc();
    } else {

        swal("", "Please select project");
    }
}

function ProjectsFunc() {
    $("#tblProjects").empty();
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            $('#loadPro').empty();
            var arr = [];
            var counterpartyTags = [];
            $.each($('#Project').val().split(";"), function () {
                arr.push($.trim(this));
            });
            var datalength = data.length;
            if (datalength > 0) {
                for (var i = 0; i < datalength; i++) {
                    var item = data[i];
                    var article = "";
                    if (i == 0) {
                        article += '<tr><th>Project Name</th></tr>';
                    }

                    article += '<tr><td>';
                    if (arr.indexOf(item.ProjectName) >= 0) {
                        article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" checked value="' + item.ProjectName + '" />';
                    } else {
                        article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" value="' + item.ProjectName + '" />';
                    }
                    article += '<label for="Pro' + item.RowKey + '" class="css1-label">' + item.ProjectName + '</label>';

                    article += '<input type="text" name="ProjectManager" style="display: none;" value="' + item.ProjectManager + '" />';
                    article += '</td></tr>';

                    counterpartyTags.push(item.ProjectName);
                    $("#tblProjects").append(article);
                }

                $("#txtSearchBoxProjects").autocomplete({
                    source: counterpartyTags,
                    minLength: 1,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxProjects").val(uidetails.item.label);
                        SearchProjects();
                    }
                });

                var vCount = $("#tblProjects tr").length;
                $('#compact-paginationProjects').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    currentPage: 1,
                    cssStyle: 'compact-theme',
                    type: 'tdbody',
                    row: 'tr',
                    typeID: 'tblProjects'
                });
                $("#loadingPage").fadeOut();
                $("#browseProjects").dialog("option", "title", "Project Picker");
                $("#browseProjects").dialog("open");
            } else {
                $("#loadingPage").fadeOut();
                $("#browseProjects").dialog("option", "title", "Project Picker");
                $("#browseProjects").dialog("open");
                $('#loadPro').empty();
                $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
            }
        },
        error: function () {
            $('#loadPro').empty();
            $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });
}

function ProjectTasksFunc() {
    $("#tblProjectTasks").empty();
    $("#loadingPage").fadeIn();

    var vVarDataLength = 0;
    var isProjectSelected = false;
    var nproject = [];
    $.each($('#Project').val().split(";"), function () {
        nproject.push($.trim(this));
    });
    nproject = nproject.sort();
    $.each(nproject, function () {
        isProjectSelected = true;
        var vVarProjectName = $.trim(this);
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/projecttasks?projectnames=' + encodeURIComponent(vVarProjectName),
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            success: function (data) {
                $('#loadProTask').empty();
                var arr = [];
                var counterpartyTags = [];
                $.each($('#ProjectTask').val().split(";"), function () {
                    arr.push($.trim(this));
                });
                var datalength = data.length;
                if (datalength > 0) {
                    for (var i = 0; i < datalength; i++) {
                        var item = data[i];
                        var article = "";
                        if (i == 0) {
                            if (arr.indexOf(vVarProjectName + ':Default Task') >= 0) {
                                article += '<tr><th><input id="' + vVarProjectName + '" onclick="funselectalltasks(this);" type="checkbox" checked name="ProjectTask" value="' + vVarProjectName + ':Default Task" class="float_left margin-right-5" />' + vVarProjectName + ' (Default Task)</th></tr>';
                            } else {
                                article += '<tr><th><input id="' + vVarProjectName + '" onclick="funselectalltasks(this);" type="checkbox" name="ProjectTask" value="' + vVarProjectName + ':Default Task" class="float_left margin-right-5" />' + vVarProjectName + ' (Default Task)</th></tr>';
                            }
                        }

                        article += '<tr><td>';
                        if (arr.indexOf(vVarProjectName + ':' + item.TaskID) >= 0) {
                            article += '<input id="' + vVarProjectName + item.RowKey + '" type="checkbox" title="' + vVarProjectName + '" onclick="funselecttask(this);" name="ProjectTask" class="css1-checkbox" checked  value="' + vVarProjectName + ':' + item.TaskID + '" />';
                        } else {
                            article += '<input id="' + vVarProjectName + item.RowKey + '" type="checkbox" title="' + vVarProjectName + '" onclick="funselecttask(this);" name="ProjectTask" class="css1-checkbox"  value="' + vVarProjectName + ':' + item.TaskID + '" />';
                        }
                        article += '<label for="' + vVarProjectName + item.RowKey + '" class="css1-label">' + item.TaskID + ' : ' + item.TaskDescription + '</label>';
                        article += '</td></tr>';

                        counterpartyTags.push(item.TaskID);
                        $("#tblProjectTasks").append(article);
                    }
                    if (vVarDataLength == 0) {
                        vVarDataLength = datalength;
                    }

                } else {

                }
            },
            error: function () {
                $('#loadProTask').empty();
            }
        });
    });

    if (vVarDataLength == 0) {
        $("#loadingPage").fadeOut();
        $("#browseProjectTasks").dialog("option", "title", "Project Task Picker");
        $("#browseProjectTasks").dialog("open");
        $('#loadProTask').empty();
        if (!isProjectSelected) {
            $('#loadProTask').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    } else {
        $("#txtSearchBoxProjectTasks").autocomplete({
            source: counterpartyTags,
            minLength: 1,
            focus: function (event, ui) {
                return false;
            }
        });

        var vCount = $("#tblProjectTasks tr").length;
        $('#compact-paginationProjectTasks').pagination({
            items: vCount,
            itemsOnPage: 10,
            typeID: 'tblProjectTasks',
            cssStyle: 'compact-theme'
        });
        $("#loadingPage").fadeOut();
        $("#browseProjectTasks").dialog("option", "title", "Project Task Picker");
        $("#browseProjectTasks").dialog("open");
    }

}

function AddProject() {
    if ($('input[type="radio"][name=PickProject]:checked').val() == 'Existing') {
        var vProjects = "";
        var vProjectName = "";
        var arrTasks = [];
        $('input:checkbox[name="Project"]:checked').each(function () {
            vProjectName = this.value;
            if (vProjects == "") {
                vProjects = this.value;
                projectManager = this.nextSibling.nextSibling.value;

                $.each($('#ProjectTask').val().split(";"), function () {
                    if (vProjectName == $.trim(this).split(':')[0]) {
                        arrTasks.push($.trim(this));
                    }
                });
            }
            else {
                vProjects += "; " + this.value;
                projectManager += ";" + this.nextSibling.nextSibling.value;
                $.each($('#ProjectTask').val().split(";"), function () {
                    if (vProjectName == $.trim(this).split(':')[0]) {
                        arrTasks.push($.trim(this));
                    }
                });
            }
        });
        $('#ProjectTask').val(arrTasks.join("; "));

        if (vProjects != "") {
            $('#Project').val(vProjects);
            if (!($("#ProjectTask").hasClass("validelement"))) {
                $("#ProjectTask").addClass("validelement");
                $("#lblprojecttasktocheck").html("Project Tasks<span class='text-red'>*</span>");
            }
            return true;
        } else {
            $('#Project').val('');
            $("#ProjectTask").removeClass("validelement");
            if (!($("#Project").hasClass("validelement"))) {
                $("#ProjectTask").removeClass("validelement");
                $("#lblprojecttasktocheck").html("Project Tasks");
            } else {
                $("#ProjectTask").addClass("validelement");
                $("#lblprojecttasktocheck").html("Project Tasks<span class='text-red'>*</span>");
            }
            swal("", "No project has been selected.");
            return false;
        }
    }

}
function AddProjectTask() {
    var vProjectTasks = "";
    $('input:checkbox[name="ProjectTask"]:checked').each(function () {
        if (vProjectTasks == "") {
            vProjectTasks = this.value;
        }
        else {
            vProjectTasks += "; " + this.value;
        }
    });

    if (vProjectTasks != "") {
        $('#ProjectTask').val(vProjectTasks);
        return true;
    } else {

        swal("", "No task has been selected.");
        return false;
    }
}

function SaveProjectTask() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project?projectName=' + $("#txtProjectName").val().trim(),
        type: 'GET',
        dataType: 'json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $("#txtProjectRowKey").val(data.RowKey);
        }
    });
    var txtProjectManager = '';
    var sprojectManager = $("#ddlProjectManager").val();
    var bao = '';
    $(sprojectManager).each(function (i, itm) {
        if (bao == '') {
            bao = itm;
        }
        else {
            bao += ";" + itm;
        }
    });
    if (bao == '')
        txtProjectManager = 'Not Assigned';
    else
        txtProjectManager = bao;

    $("#loadingPage").fadeIn();
    $.ajax({
        url: '/Settings/SaveProjectTask',
        type: 'POST',
        dataType: 'json',
        headers: {
            'AntiReqVerificationToken': $("#forgeryToken").val(), 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging
        },
        data: {

            ProjectRowKey: $("#txtProjectRowKey").val(),
            TaskID: 'DEFAULT',
            TaskDescription: '' + $("#txtProjectName").val() + '(Default Task)',
            Manager: txtProjectManager,
            StartDate: '',
            EndDate: '',
        },
        cache: false,
        success: function (person) {
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();
            }
    });

}

function GetValuesAndAutoPopulate(controlname, values) {
    var multiarr = [];
    var res = values != null ? values.split(";") : [];
    var reslength = res.length;
    var resValue = "";
    for (var i = 0; i < reslength; i++) {
        //   multiarr.push(res[i].trim());
        resValue = res[i].trim();
        if (resValue != "") {
            if ($('#' + controlname + ' option[value="' + resValue + '"]').length > 0 && multiarr.indexOf(resValue) == -1)
                multiarr.push(resValue);
        }
    }
    //manoj
    if ($('.ContractRoleType#' + controlname).length > 0) {
        ChosenOrder.setSelectionOrder($("." + controlname + '#' + controlname), multiarr, true);
        ChosenOrder.setSelectionOrder($('.ContractRoleType#' + controlname), multiarr, true);
    }
    //manoj

    ChosenOrder.setSelectionOrder($('#' + controlname), multiarr, true);

}

function HideOptionsNotRequiredExcept(controlname, values) {

    var multiarr = [];
    var res = values != null ? values.split(";") : [];
    var reslength = res.length;
    var resValue = "";
    $("#" + controlname).children('option').hide();
    $('#' + controlname).chosen().trigger("chosen:updated");

    for (var i = 0; i < reslength; i++) {
        //   multiarr.push(res[i].trim());
        resValue = res[i].trim();
        if (resValue != "") {
            if ($('#' + controlname).children('option').filter(function () { return $(this).text() == resValue; }).length > 0 && multiarr.indexOf(resValue) == -1) {
                $('#' + controlname).children('option').filter(function () { return $(this).text() == resValue; }).show();
                multiarr.push(resValue);
            }
        }
    }
    if (multiarr.length == 0) {
        $('#' + controlname).attr("data-placeholder", "No users available").chosen();
    }
    else {
        $('#' + controlname).attr("data-placeholder", "Select User(s)").chosen();
    }
    $('#' + controlname).chosen().trigger("chosen:updated");
}



function ClearProjectSearch() {
    $('#txtSearchBoxProjects').val('');
    $('input:checkbox[name=Project]').attr('checked', false);
    $("#Project").val("");
    projectManager = "";
    SearchProjects();
}
function SearchProjects() {
    $("#tblProjects").html('');
    $('#loadPro').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/project?searchkeyword=' + encodeURIComponent($("#txtSearchBoxProjects").val()) + '&customquery=&sortbyfield=ProjectName&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey
        },
        cache: false,
        success: function (data) {
            var arr = [];
            $.each($('#Project').val().split(";"), function () {
                arr.push($.trim(this));
            });
            var datalength = data.length;
            var article = '';
            for (var i = 0; i < datalength; i++) {
                var item = data[i];
                if (i == 0) {
                    article += '<tr><th>Project Name</th></tr>';
                }
                article = '<tr><td>';
                if (arr.indexOf(item.ProjectName) >= 0) {
                    article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" checked value="' + item.ProjectName + '" />';
                } else {
                    article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="Project" class="css1-checkbox" value="' + item.ProjectName + '" />';
                }

                article += '<label for="Pro' + item.RowKey + '" class="css1-label">' + item.ProjectName + '</label>';
                article += '<input type="text" name="ProjectManager" style="display: none;" value="' + item.ProjectManager + '" />';
                article += '</td></tr>';
            }
            $('#loadPro').empty();
            $("#tblProjects").html(article);
            article = '';
            var vCount = $("#tblProjects tr").length;
            if (vCount != 0) {
                $('#loadPro').html('');
                $('#compact-paginationProjects').css('display', '');
                $('#compact-paginationProjects').pagination({
                        items: vCount,
                        itemsOnPage: 10,
                        currentPage: 1,
                    cssStyle: 'compact-theme',
                type: 'tdbody',
                row: 'tr',
                    typeID: 'tblProjects'
                });
            } else {
                $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $('#compact-paginationProjects').css('display', 'none');
            }
        },
        error: function () {
            $('#compact-paginationProjects').css('display', 'none');
            $('#loadPro').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });

}

function ViewRelatedRequest() {
    $('#loadProContract').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
    if ($('#tblRequests tr').length <= 0) {
        RelatedRequestCollection();
    } else {
        $('#loadProContract').empty();
        $("#browseRequest").dialog("option", "title", "Request Picker");
        $("#browseRequest").dialog("open");
    }
}

function RelatedRequestCollection() {
    $("#tblRequests").empty();
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Requests/relatedrequestsearch?businessarea=' + $("#txtBusinessArea").val() + '&sortbyfield=RequestTitle&orderby=ASC',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: {
            'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID
        },
        cache: false,
        success: function (data) {
            $('#loadProRequest').empty();
            var arr = [];
            var RequestTileTag = [];
            $.each($('#RelatedRequests').val().split(";"), function () {
                arr.push($.trim(this));
            });
            var datalength = data.length;
            if (datalength > 0) {
                for (var i = 0; i < datalength; i++) {
                    var item = data[i];
                    var article = "";
                    if (i == 0) {
                        article += '<tr><th>Request Title</th></tr>';
                    }
                    article += '<tr><td>';
                    if (arr.indexOf(item.RequestTitle) >= 0) {
                        article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="RelatedRequest" class="css1-checkbox" checked value="' + item.RequestTitle + '" />';
                    } else {
                        article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="RelatedRequest" class="css1-checkbox" value="' + item.RequestTitle + '" />';
                    }
                    article += '<label for="Pro' + item.RowKey + '" class="css1-label">' + item.RequestTitle + '</label>';
                    article += '</td></tr>';
                    RequestTileTag.push(item.RequestTitle);
                    $("#tblRequests").append(article);
                }
                $("#txtSearchBoxRequest").autocomplete({
                    source: RequestTileTag,
                    minLength: 1,
                    focus: function (event, ui) {
                        return false;
                    },
                    select: function (evn, uidetails) {
                        $("#txtSearchBoxRequest").val(uidetails.item.label);
                        SearchRequest();
                    }
                });

                var vCount = $("#tblRequests tr").length;
                $('#compact-paginationContracts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    typeID: 'tblRequests',
                    cssStyle: 'compact-theme'
                });
                try {
                    $("#browseRequest").dialog("option", "title", "Request Picker");
                    $("#browseRequest").dialog("open");
                }
                catch (ex) {
                }
                $("#loadingPage").fadeOut();
            } else {
                $('#loadProRequest').empty();
                $('#loadProRequest').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $("#browseRequest").dialog("option", "title", "Request Picker");
                $("#browseRequest").dialog("open");
                $("#loadingPage").fadeOut();
            }
        },
        error: function () {
            $('#loadProRequest').empty();
            $('#loadProRequest').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
            $("#browseRequest").dialog("option", "title", "Request Picker");
            $("#browseRequest").dialog("open");
            $("#loadingPage").fadeOut();

        }
    });

}

function SearchRequest() {
    $("#tblRequests").empty();
    $('#loadProRequest').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Requests?searchkeyword=' + encodeURIComponent($("#txtSearchBoxRequest").val()) + '&customquery=BusinessArea:' + $("#txtBusinessArea").val() + '&sortbyfield=RequestTitle&orderby=ASC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            var arr = [];
            $.each($('#RelatedRequests').val().split(";"), function () {
                arr.push($.trim(this));
            });
            var datalength = data.length;
            var article = '';
            for (var i = 0; i < datalength; i++) {
                var item = data[i];
                if (i == 0) {
                    article += '<tr><th>Request Title</th></tr>';
                }
                article += '<tr><td>';
                if (arr.indexOf(item.RequestTitle) >= 0) {
                    article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="RelatedRequest" class="css1-checkbox" checked value="' + item.RequestTitle + '" />';
                } else {
                    article += '<input id="Pro' + item.RowKey + '" type="checkbox" name="RelatedRequest" class="css1-checkbox" value="' + item.RequestTitle + '" />';
                }
                article += '<label for="' + item.RowKey + '" class="css1-label">' + item.RequestTitle + '</label>';
                article += '</td></tr>';

            }
            $('#loadProRequest').empty();
            $("#tblRequests").html(article);;
            article = '';
            var vCount = $("#tblRequests tr").length;
            if (vCount != 0) {
                $('#loadProRequest').html('');
                $('#compact-paginationContracts').css('display', '');
                $('#compact-paginationContracts').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    typeID: 'tblRequests',
                    cssStyle: 'compact-theme'
                });
            } else {
                $('#loadProRequest').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
                $('#compact-paginationContracts').css('display', 'none');
            }
        },
        error: function () {
            $('#compact-paginationContracts').css('display', 'none');
            $('#loadProRequest').html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>')
        }
    });

}


function AddRequest() {
    var vRequest = "";
    var vRequestName = "";
    $('input:checkbox[name="RelatedRequest"]:checked').each(function () {
        vRequestName = this.value;
        if (vRequest == "") {
            vRequest = this.value;
        }
        else {
            vRequest += "; " + this.value;
        }
    });

    if (vRequest != "") {
        $('#RelatedRequests').val(vRequest);
        return true;
    } else {
        swal("", "No request has been selected.");
        return false;
    }

}

function getpaymenttype(obj) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/paymenttypes',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $(data).each(function (i, item) {
                if (item.TypeName == obj) {
                    $("#PaymentType").append("<option value='" + item.TypeName + "' selected='selected'>" + item.TypeName + "</option>")
                } else {
                    $("#PaymentType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                }
            });

        }
    });
}
function getlicencetype(obj) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/licencetypes',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            $(data).each(function (i, item) {
                if (item.TypeName == obj) {
                    $("#LicenceType").append("<option value='" + item.TypeName + "' selected='selected'>" + item.TypeName + "</option>")
                } else {
                    $("#LicenceType").append("<option value='" + item.TypeName + "'>" + item.TypeName + "</option>")
                }
            });

        }
    });
}

function showallspans(obj) {
    if (obj == "") {
        var reltypeselected = $("#ddlRelationshipType").find('option:selected').val();
        if (reltypeselected != 0 && $(this).parent().parent().children(".ddl").find('option:selected').text() != "") {
            $('#liSelectedRelatedContract').empty();
            $('input:checkbox[name="RelatedContract"]:checked').each(function () {
                $('#liSelectedRelatedContract').append('<span style="font-size:11px;" id=' + this.id + '>' + this.value + ' (' + $(this).parent().parent().children(".ddl").find('option:selected').text() + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationshipselected(this);" style="float:right" /></span>');

                if (arrRelatedContractsSelected.length > 0) {
                    var rtypeindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";").indexOf(this.id);
                    var rtypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";");
                    var reltypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType.split(";");
                    rtypetoremove[rtypeindex] = $(this).parent().parent().children(".ddl").find('option:selected').text();
                    reltypetoremove[rtypeindex] = $("#ddlRelationshipTypeParent").find('option:selected').text();
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType = rtypetoremove.join(";");
                    arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType = reltypetoremove.join(";");
                }
            });
        }

    }
    else {
        var spanid = $(obj).parent().parent().children().find("input[type=checkbox]")[0].id;
        if (spanid != "") {
            var chkObj = $("#" + spanid)[0];
            $("#liSelectedRelatedContract #" + spanid).remove();
            if ($(chkObj).parent().parent().children(".ddl").find('option:selected').text() != "") {
                $('#liSelectedRelatedContract').append('<span style="font-size:11px;" id=' + chkObj.id + '>' + chkObj.value + ' (' + $(chkObj).parent().parent().children(".ddl").find('option:selected').text() + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationshipselected(this);" style="float:right" /></span>');
            }
            if (arrRelatedContractsSelected.length > 0) {
                var rtypeindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";").indexOf(chkObj.id);
                var rtypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";");
                var reltypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType.split(";");
                rtypetoremove[rtypeindex] = $(chkObj).parent().parent().children(".ddl").find('option:selected').text();
                reltypetoremove[rtypeindex] = $("#ddlRelationshipTypeParent").find('option:selected').text();
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType = rtypetoremove.join(";");
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType = reltypetoremove.join(";");
            }
        }
    }

}

//Check document sent for automation and once document automation is done call BindDocument()
function collectrelatedcontractrowkey(obj) {
    if (requiredValidator('popupContracts', false)) {
        //$('#liSelectedRelatedContract').empty();
        //$('input:checkbox[name="RelatedContract"]:checked').each(function () {
        if (obj != "" && obj.checked == true) {
            //manoj
            $("#liSelectedRelatedContract #" + obj.id).remove();
            //manoj
            //$("#" + obj.id).trigger("click");
            $('#liSelectedRelatedContract').append('<span style="font-size:11px;" id=' + obj.id + '>' + obj.value + ' (' + $(obj).parent().parent().children(".ddl").find('option:selected').text() + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveRelationshipselected(this);" style="float:right" /></span>');
        }

        //});

        arrRelatedcontractRowkey = [];
        $('input:checkbox[name="RelatedContract"]:checked').each(function () {
            arrRelatedcontractRowkey.push(this.id);
        });
        if (arrRelatedcontractRowkey.length > 0) {
            $("#relatedrole").css('display', '');
        } else {
            //$("#relatedrole").html("");
            $("#relatedrole").css('display', 'none');
        }

        if (obj != "" && obj.checked == true) {
            if (arrRelatedContractsSelected.length > 0) {
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID += ";" + obj.id;
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle += ";" + obj.value;
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType += ";" + $(obj).parent().parent().children(".ddl").find('option:selected').text();
                arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType += ";" + $("#ddlRelationshipTypeParent").find('option:selected').text();
            }
            else {
                arrRelatedContractsSelected.push({
                    ContractID: "",
                    ContractTitle: "",
                    RelatedContractID: obj.id,
                    RelatedContractTitle: obj.value,
                    RelationshipType: $("#ddlRelationshipTypeParent").find('option:selected').text(),
                    RelatedRelationshipType: $(obj).parent().parent().children(".ddl").find('option:selected').text(),
                    CreatedBy: localStorage.UserName,
                    ModifiedBy: localStorage.UserName
                });
            }
        }
        else if (obj != "" && obj.checked == false) {
            var rtypeindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";").indexOf(obj.id);
            var rtindex = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID.split(";");
            var rtitle = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle.split(";");
            var rtypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType.split(";");
            var reltypetoremove = arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType.split(";");
            rtindex[rtypeindex] = "";
            rtitle[rtypeindex] = "";
            rtypetoremove[rtypeindex] = "";
            reltypetoremove[rtypeindex] = "";
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractID = rtindex.join(";").replace(";;", "");
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedContractTitle = rtitle.join(";").replace(";;", "");
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelatedRelationshipType = rtypetoremove.join(";").replace(";;", "");
            arrRelatedContractsSelected[arrRelatedContractsSelected.length - 1].RelationshipType = reltypetoremove.join(";").replace(";;", "");
            $("#liSelectedRelatedContract").find('span#' + obj.id).remove();
        }
        RelatedContractRelationShipTypeparent = $("#ddlRelationshipTypeParent option:selected").val();

    } else {
        //$("#relatedrole").html("");
        $("#" + obj.id).attr('checked', false);
        $("#" + obj.id).parent().parent().children(".ddl").empty();
    }
}



//deleting document automation entry

//Popup for the single document status by ID start
function ChangeDocumentStatus(obj) {

    if ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) {
        return;
    }
    var CheckBindDocumentData = parseInt($("#tdDocumentList").children().length)
    var Parentnodetitle = obj.title;
    changedocumentstatusbyid = obj.id;
    if (CheckBindDocumentData != 0) {
        $("#dvManageDocumentStatus").dialog("open");
    }
    else {
        var primarydocumentcheck = $(obj).parent();
        var primarydocumentcheckdetails = $(primarydocumentcheck).find("#IsPrimaryDoc").text();
        $("#hdIsPrimaryDoc").val(primarydocumentcheckdetails);
        var ctrl = "<input id='rdDocumentNew' type='radio' name='DocumentStatus' value='New' class='css-checkbox' /><b title='New' class='status_green_another details_documentstatus'><img src='../Content/Images/status/new.png'>new</b><label for='rdDocumentNew' class='css-label'>New</label><br />";
        ctrl += "<input id='rdDocumentAwaitingReview' type='radio' name='DocumentStatus' value='Awaiting Review' class='css-checkbox' /><b title='Awaiting Review' class='status_yellow details_documentstatus'><img src='../Content/Images/status/renew.png'>Rev</b><label for='rdDocumentAwaitingReview' class='css-label'>Awaiting Review</label><br />";
        ctrl += "<input id='rdDocumentReviewed' type='radio' name='DocumentStatus' value='Reviewed' class='css-checkbox' /><b title='Reviewed' class='status_blue details_documentstatus'><img src='../Content/Images/status/tick.png'>Rev</b><label for='rdDocumentReviewed' class='css-label'>Reviewed</label><br />";
        ctrl += "<input id='rdDocumentInNegotiation' type='radio' name='DocumentStatus' value='In Negotiation' class='css-checkbox' /><b title='In Negotiation' class='status_yellow details_documentstatus'><img src='../Content/Images/status/renew.png'>nego</b><label for='rdDocumentInNegotiation' class='css-label'>In Negotiation</label><br />";
        ctrl += "<input id='rdDocumentNegotiationComplete' type='radio' name='DocumentStatus' value='Negotiation Complete' class='css-checkbox' /><b title='Negotiation Complete' class='status_blue details_documentstatus'><img src='../Content/Images/status/tick.png'>nego</b><label for='rdDocumentNegotiationComplete' class='css-label'>Negotiation Complete</label><br />";
        ctrl += "<input id='rdDocumentReadySignature' type='radio' name='DocumentStatus' value='Ready for Signature' class='css-checkbox' /><b title='Ready for Signature' class='status_green details_documentstatus'><img src='../Content/Images/status/active.png'>sign</b><label for='rdDocumentReadySignature' class='css-label'>Ready for Signature</label><br />";
        ctrl += "<input id='rdDocumentAwaitingSignatures' type='radio' name='DocumentStatus' value='Awaiting Signatures' class='css-checkbox' /><b title='Awaiting Signatures' class='status_yellow details_documentstatus'><img src='../Content/Images/status/renew.png'>sign</b><label for='rdDocumentAwaitingSignatures' class='css-label'>Awaiting Signatures</label><br />";
        ctrl += "<input id='rdDocumentSigned' type='radio' name='DocumentStatus' value='Signed' class='css-checkbox' /><b title='Signed' class='status_blue details_documentstatus'><img src='../Content/Images/status/tick.png'>Sign</b><label for='rdPipelineSigned' class='css-label'>Signed</label><br />";
        ctrl += "<input id='rdDocumentActive' type='radio' name='DocumentStatus' value='Active' class='css-checkbox' /><b title='Active' class='status_green details_documentstatus'><img src='../Content/Images/status/active.png'>actv</b><label for='rdDocumentActive' class='css-label'>Active</label><br />";
        ctrl += "<input id='rdDocumentExpired' type='radio' name='DocumentStatus' value='Expired' class='css-checkbox' /><b title='Expired' class='status_Gray details_documentstatus'><img src='../Content/Images/status/expried.png'>exp</b><label for='rdDocumentExpired' class='css-label'>Expired</label><br />";
        $("#tdDocumentList").append(ctrl);
    }
    $('input:radio[name="DocumentStatus"][value="' + Parentnodetitle + '"]').prop('checked', true);
    $("#dvManageDocumentStatus").dialog("open");
}
//Popup for the single document status by ID End

//change the single document status by ID start
function ChangeDocumentStatusByID() {
    if (requiredValidator("dvManageDocumentStatus", false)) {
        $("#loadingPage").fadeIn();
        var stat = '';
        stat = decodeURI($("input:radio[name=DocumentStatus]:checked").val());
        if (stat != "" && changedocumentstatusbyid != '') {
            if (stat.trim() != '' && changedocumentstatusbyid.trim() != '') {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/changestatus?documentid=' + changedocumentstatusbyid.trim() + '&status=' + stat,
                    type: 'PUT',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    contentType: false,
                    cache: false,
                    success: function (result) {
                        if ($("#hdIsPrimaryDoc").val() == "Yes") {
                            try {
                                BindContractDetails(vContractID);
                            } catch (ex) {

                            }
                        }
                        BindDocument(vContractID);
                        changedocumentstatusbyid = '';
                        $("#loadingPage").fadeOut();
                        $("#dvManageDocumentStatus").dialog("close");
                    },
                    error: function (person) {
                        $("#loadingPage").fadeOut();
                    },
                });
            }
        }
    }
}
//change the single document status by ID End

//add new counterparty on document add
function documentstatuschange() {
    if ($("#ddlDocumentStatus").val() != 0 && $("#ddlDocumentStatus").val() == "Expired") {
        $("#dtValidFrom").val("");
        $("#dtValidTill").val("");
        if ($("#linkAddValidity").text() == "Track document expiration date") {
            $("#linkAddValidity").css('display', 'none');
        }
        else {
            $("#linkAddValidity").click();
            $("#linkAddValidity").css('display', 'none');
        }
    }
    else {
        $("#linkAddValidity").css('display', 'block');
    }
}
function SelectExistingCounterparty() {
    $('#dvCPExistingCounterparty').css("display", "");
    $('#dvCPAddCounterparty').css("display", "none");
}

function SelectAddCounterparty() {
    $('#dvCPExistingCounterparty').css("display", "none");
    $('#dvCPAddCounterparty').css("display", "");
}
function ClearAddCounterparty() {
    $("#txtSearchBox").val("");
    $("#txtCounterpartyID").val("");
    $("#txtCounterpartyName").val("");
    $('#ddlCounterpartyType').val('0');
    $("#txtOwnerofBusinessArea").val('');
    $('input[type="radio"][name=IsGlobal][value="Yes"]').prop('checked', true);
    $("#trcp-RgBusi").hide();
    $("#txtOwnerofBusinessArea").removeClass("validelement");
    $("#txtAddressLine1").val("");
    $("#txtAddressLine2").val("");
    $("#txtCity").val("");
    $("#txtState").val("");
    $("#txtZip").val("");
    $('#ddlCountry').val('0');
    $("#txtContactNo").val("");
    $("#txtEmailID").val("");
    $("#ddlStatus").val("Active");
    $("#chkCounterpartyNotInList").attr("checked", false);
    $('.CP_Det').css('display', 'none');
    $('.CP_Det1').css('display', 'none');
    $("#ddlCounterpartyType").removeClass('validelement');
    $("#txtEmailID").removeClass('validemail');
    $(".validelement").each(function (index, element) {
        $(element).removeClass("error");
        $("#errormsg_" + element.id).remove();
    });
}
$('#chkCounterpartyNotInList').click(function () {
    if ($("#chkCounterpartyNotInList").is(':checked')) {
        if ($("#txtCounterpartyName").val() != "") {
            if ($("#txtCounterpartyName").val().trim() != "") {
                $('.CP_Det').css('display', '');
                $('.CP_Det1').css('display', '');
                $("#ddlCounterpartyType").addClass('validelement');
                $("#txtEmailID").addClass('validemail');
                getCounterpartyFields();
            }
            else {
                swal("", "Enter counterparty name.");
                $("#chkCounterpartyNotInList").prop('checked', false);
                $("#txtCounterpartyName").val("");
                $("#txtCounterpartyName").focus();
            }
        } else {
            swal("", "Enter counterparty name.");
            $("#chkCounterpartyNotInList").prop('checked', false);
            $("#txtCounterpartyName").val("");
            $("#txtCounterpartyName").focus();
        }
    } else {
        $('.CP_Det').remove();
        $('.CP_Det1').css('display', 'none');
        $("#ddlCounterpartyType").removeClass('validelement');
        $("#txtEmailID").removeClass('validemail');
        $("#txtOwnerofBusinessArea").val('');
        $('input[type="radio"][name=IsGlobal][value="Yes"]').prop('checked', true);
        $("#trcp-RgBusi").hide();
        $("#txtOwnerofBusinessArea").removeClass("validelement");
    }
});

function getCounterpartyFields() {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/primaryfields',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (metadataFields) {
            vCounterpartyFields = [];
            $(metadataFields).each(function (i, item) {
                if ((item.FieldName == "CounterpartyName") || (item.FieldName == "CounterpartyType") || (item.FieldName == "Status")) {
                    if (item.FieldName == "CounterpartyType") {
                        vCounterpartyFields.push(item.FieldName);
                    }
                }
                else {
                    vCounterpartyFields.push(item.FieldName);
                    if (item.ShowInCreateForm == "true") {
                        var vControls = "";
                        var vDate = "";
                        var vNumber = "";
                        var vEmail = "";
                        var vMultiDDL = "";
                        var vUser = "";
                        var vUserList = "";
                        //manoj
                        var vCurrency = "";
                        //manoj
                        if (item.Required == "true") {
                            vControls += '<li class="removableCounterpartyField CP_Det"><p><b>' + item.FieldDisplayName + '</b><small>*</small>';
                        } else {
                            vControls += '<li class="removableCounterpartyField CP_Det"><p><b>' + item.FieldDisplayName + '</b>';
                        }
                        if (item.FieldHelp == "true") {
                            vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                        }
                        vControls += '</p><div>';
                        if (item.FieldType == "Single Line Text") {
                            if (item.FieldName == "Country") {
                                if (item.Required == "true") {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement'>";

                                } else {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'>";
                                }
                                vControls += "<option value='0'>--Select--</option>";
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/countrynames',
                                    type: 'GET',
                                    dataType: 'json',
                                    'Content-Type': 'application/json',
                                    cache: false,
                                    async: false,
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    success: function (data) {
                                        $(data).each(function (i, item) {
                                            vControls += '<option value="' + item + '">' + item + '</option>';
                                        });
                                    },
                                    error:
                                        function (data) {

                                        }
                                });

                                vControls += '</select>';
                                vControls += '<label>' + item.Description + '</label>';
                            } else {
                                if (item.Required == "true") {
                                    vControls += "<input type='text' id=" + item.FieldName + " maxlength='100' name=" + item.FieldName + " class='validelement'>";
                                } else {
                                    vControls += "<input type='text' id=" + item.FieldName + " maxlength='100' name=" + item.FieldName + ">";
                                }
                                vControls += '<label>' + item.Description + '</label>';
                            }
                            vControls += '</div></li>';
                        }
                        else if (item.FieldType == "Multi Line Text") {
                            if (item.Required == "true") {
                                vControls += "<textarea name=" + item.FieldName + " maxlength='300' id=" + item.FieldName + " title='" + item.FieldDisplayName + "' cols='25' rows='3' class=' validelement'></textarea>";
                            } else {
                                vControls += "<textarea name=" + item.FieldName + " maxlength='300' id=" + item.FieldName + " title='" + item.FieldDisplayName + "' cols='25' rows='3'></textarea>";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</div></li>';
                        }
                        else if (item.FieldType == "Hyperlink") {
                            //manoj
                            //for Hyperlink
                            var Hyperlinkvalue = item.DefaultURL;
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=CP" + item.FieldName + " maxlength='2083' name=" + item.FieldName + " placeholder='http://www.' value = '" + Hyperlinkvalue + "' class='validelement validwebsite'>";
                            } else {
                                vControls += "<input type='text' id=CP" + item.FieldName + " maxlength='2083' name=" + item.FieldName + " placeholder='http://www.' value = '" + Hyperlinkvalue + "' class='validwebsite'>";
                            }
                            vControls += '<a href="javascript:void(0)" class="linkText" title="' + item.FieldDisplayName + '" onclick="navigateurl(\'CP' + item.FieldName + '\')"> Navigate</a>';
                            vControls += '</div></li>';
                            //for Hyperlink
                            //manoj
                        }
                        else if (item.FieldType == "Date") {

                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement validdate fielddatecontrol " + item.FieldName + "'/>";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + "  title='" + item.FieldDisplayName + "' class='validdate fielddatecontrol " + item.FieldName + "'/>";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</div></li>';

                            vDate = item.FieldName;
                        }
                        else if (item.FieldType == "Choice") {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement f_inpt width90'>";

                            } else {
                                vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width90'>";
                            }
                            vControls += "<option value='0'>--Select--</option>";
                            var myArray = [];
                            myArray = item.ChoiceValues.split("\n")
                            var myArraylength = myArray.length;

                            for (var i = 0; i < myArraylength; i = i + 1) {
                                do {
                                    myArray[i] = myArray[i].replace("&amp;", "&");
                                } while (myArray[i].indexOf("&amp;") > -1)
                                vControls += "<option value='" + myArray[i] + "'>" + myArray[i] + "</option>";
                            }

                            vControls += '</select>';
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</div></li>';
                        } else if (item.FieldType == "Lookup") {
                            if (item.FieldName == "RelatedCounterparties") {
                                if (item.Required == "true") {
                                    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement' readonly='readonly' type='text' />";
                                } else {
                                    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' readonly='readonly' type='text' />";
                                }
                                vControls += '<label>' + item.Description + '</label>';
                                vControls += "<a href='javascript:void(0)' class='linkText' id='" + item.FieldDisplayName + "' title='" + item.FieldName + "' onclick='ViewCounterpartyRelated(this)'> Browse</a>";
                                vControls += '</div></li>';
                            } else {
                                if (item.Required == "true") {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement'>";
                                } else {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'>";
                                }
                                vControls += "<option value='0'>--Select--</option>";

                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                    type: 'GET',
                                    dataType: 'json',
                                    "Content-Type": "application/json",
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    cache: false,
                                    success: function (data) {
                                        var datalength1 = data.LookupFields.split(';');
                                        var datalength = datalength1.length;
                                        for (var i = 0; i < datalength; i++) {
                                            var itemname = datalength1[i];
                                            $("#" + item.FieldName).append("<option value='" + itemname + "'>" + itemname + "</option>")
                                        }
                                    }
                                });
                                vControls += '<label>' + item.Description + '</label>';
                                vControls += '</div></li>';
                            }
                        }
                        else if (item.FieldType.indexOf("Dropdown") > -1 || item.FieldType.indexOf("Multi Select") > -1) {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='width90 chosenmulti validuser' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            } else {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='width90 chosenmulti' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            }
                            if (item.FieldType.indexOf("Dropdown") > -1) {
                                var vMultiDDL1 = "";
                                if (vMultiDDL1 == '') {
                                    var myArray = [];
                                    myArray = item.ChoiceValues.split("\n")
                                    var myArraylength = myArray.length;
                                    for (var i = 0; i < myArraylength; i = i + 1) {
                                        vMultiDDL1 += "<option value='" + myArray[i] + "'>" + myArray[i] + "</option>";
                                    }
                                }
                                vControls += vMultiDDL1;
                            } else {
                                var vMultiDDL1 = "";
                                if (vMultiDDL1 == '') {
                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                        type: 'GET',
                                        dataType: 'json',
                                        "Content-Type": "application/json",
                                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                        cache: false,
                                        async: false,
                                        success: function (data) {
                                            var datalength1 = data.LookupFields.split(';');
                                            var datalength = datalength1.length;
                                            for (var i = 0; i < datalength; i++) {
                                                var itemname = datalength1[i];
                                                vMultiDDL1 += "<option value='" + itemname + "'>" + itemname + "</option>";
                                            }
                                        }
                                    });
                                }
                                vControls += vMultiDDL1;
                            }

                            vControls += '</select>';
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</div></li>';
                            vMultiDDL = item.FieldName;
                        }
                        else if (item.FieldType == "Number") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement width90 form_input f_inpt' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='width90 form_input f_inpt' />";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</div></li>';
                            vNumber = item.FieldName;
                        }
                        else if (item.FieldType == "Yes/No") {

                            vControls += "	<div style='width: auto; margin-right: 15px;'><input style='float: left; width: auto;' type='radio' name=" + item.FieldName + " value='Yes'><span style='float: left; margin: 7px 0px 0px 5px;'>Yes </span></div>";
                            vControls += "	<div style='width: auto;'><input style='float: left; width: auto;' type='radio' name=" + item.FieldName + " checked value='No'><span style='float: left; margin: 7px 0px 0px 5px;'>No </span></div>";

                            vControls += '<label style="width:auto;margin:7px 0px 0px 5px;" class="col12 p-text text-left help">' + item.Description + '</label>';
                            vControls += '</div></li>';
                        } else if (item.FieldType == "Email") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validemail validelement' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validemail' />";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</div></li>';
                        } else if (item.FieldType.indexOf("Browse") > -1) {
                            if (item.Required == "true") {
                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement' readonly='readonly' type='text' />";
                            } else {
                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' readonly='readonly' type='text' />";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += "<a href='javascript:void(0)' class='linkText' id='" + item.FieldDisplayName + "' title='" + item.FieldName + "' onclick='ViewGenericCounterparty(this)'> Browse</a>";
                            vControls += '</div></li>';
                        } else if (item.FieldType == "File Upload") {
                            if (item.Required == "true") {
                                vControls += "<input type='file' id=" + item.FieldName + " name='docAttachment' title='" + item.FieldDisplayName + "' class='form-contro validelement browse-file-doc' onchange='javascript:changeinupload(this);' />";
                            } else {
                                vControls += "<input type='file' id=" + item.FieldName + " name='docAttachment' title='" + item.FieldDisplayName + "' class='form-contro browse-file-doc' onchange='javascript:changeinupload(this);' />";
                            }
                            vControls += '<label">' + item.Description + '</label>';
                            vControls += '</div></li>';
                        } else if (item.FieldType == "Currency" || item.FieldType == "Value / Financials") {
                            if (item.Required == "true") {
                                //vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement' />";
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement validcontractvalue' />";
                            } else {
                                //vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' />";
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validcontractvalue' />";
                            }
                            vControls += '<label">' + item.Description + '</label>';
                            vControls += '</div></li>';
                            vCurrency = item.FieldName;
                        } else if (item.FieldType == "User") {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='form-contro f_inpt width90 chosenmulti validuser' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            } else {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='form-contro f_inpt width90 chosenmulti' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            }

                            if (vUserList == "")
                            { vUserList = GetUserList(); }
                            vControls += vUserList;
                            vControls += '</select>';
                            vControls += '<label>' + item.Description + '</label>';
                            vUser = item.FieldName;
                            vControls += '</div></li>';
                        }

                        $("#counterpartyItems").append(vControls);
                        if (vDate != "") {

                            if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                $("#" + vDate + "").datepicker({
                                    changeMonth: true,
                                    changeYear: true
                                });
                            }
                            else {
                                var dateformate = localStorage.AppDateFormat.toLowerCase().slice(0, -2);

                                $("#" + vDate + "").datepicker({
                                    changeMonth: true,
                                    changeYear: true,
                                    dateFormat: dateformate
                                });

                            }
                            vDate = "";
                        }
                        if (vNumber != "") {
                            allowOnlyNumberInInputBox(vNumber);
                            vNumber == "";
                        }

                        if (vMultiDDL != "") {
                            $("#" + vMultiDDL + "").chosen().trigger("chosen:updated");
                            $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                $('.result-selected').css('display', 'none');
                            });
                            vMultiDDL = "";
                        }

                        if (vUser != "") {
                            $("#" + vUser + "").chosen().trigger("chosen:updated");
                            $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                $('.result-selected').css('display', 'none');
                            });
                            if (vUser == "ContractManagers") {
                                if (localStorage.UserName != "") {
                                    GetValuesAndAutoPopulate("ContractManagers", localStorage.UserName);
                                }
                            }
                            vUser = "";
                        }
                        //manoj
                        if (vCurrency != "") {
                            if (vCurrencyDisplayStyle == "UK") {
                                $('#' + vCurrency).autoNumeric();
                            } else if (vCurrencyDisplayStyle == "CAN") {
                                $('#' + vCurrency).autoNumeric({
                                    aSep: ' ',
                                    aDec: '.',
                                });

                            } else if (vCurrencyDisplayStyle == "EU") {
                                $('#' + vCurrency).autoNumeric({
                                    aSep: '.',
                                    aDec: ',',
                                });
                            } else if (vCurrencyDisplayStyle == "IND") {
                                $('#' + vCurrency).autoNumeric({
                                    dGroup: '2',
                                });
                            }
                            vCurrency == "";
                        }
                        //manoj
                    }
                }
            });
            $("#loadingPage").fadeOut();
        },
        error: function (metadataFields) {
            vCounterpartyFields = [];
            $("#loadingPage").fadeOut();
        }

    });
}
function BindCounterpartyType() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterpartytypes',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $(data).each(function (i, item) {
                //var find = " ";
                //var re = new RegExp(find, 'g');

                //var str = item.TypeName.replace(re, '');
                $("#ddlCounterpartyType").append('<option value="' + item.TypeName + '">' + item.TypeName + '</option>');
                $("#ddlCounterpartyTypeadd").append('<option value="' + item.TypeName + '">' + item.TypeName + '</option>');
            });
        },
        error:
            function (data) {
            }
    });
}
//function ViewCounterpartyRelated(obj) {
//    var baname = "";
//    if (typeof localStorage.GlobalBusinessAreaLocation != "undefined" && localStorage.GlobalBusinessAreaLocation != "" && localStorage.GlobalBusinessAreaLocation != "All") {
//        baname = encodeURIComponent(localStorage.GlobalBusinessAreaLocation);
//    }
//    vGlobalObjForGeneric = obj;
//    $("#lblRelatedPopup_Counterparties").text("Select Relationship for " + $("#txtCounterpartyName").val())
//    $("#loadingPage").fadeIn();
//    $('#loadCounterparties').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
//    $('#tblPopupCounterparties').empty();
//    $("#txtSearchBoxCounterparties").val("");
//    if ($('#tblPopupCounterparties tr').length <= 0) {
//        var relatedCounterpartiesTag = [];
//        $("#txtSearchBoxCounterparties").val("");
//        var arrcounterpartyIDarry = [];
//        var arrcounterpartyNamearry = [];
//        var arrcounterpartyRelationshipTypearr = [];

//        $.ajax({
//            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/counterpartypicker',
//            type: 'GET',
//            dataType: 'json',
//            "Content-Type": "application/json",
//            headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID, BusinessAreaLocation: baname },
//            cache: false,
//            success: function (data) {
//                $('#loadCounterparties').empty();
//                $("#hdnRelatedCounterparties").append(getParameterByName("ContractID"))
//                var arr = [];
//                var counterpartyTags = [];
//                var prevSelected = $("#RelatedCounterparties").val();
//                $.each(prevSelected.split(";"), function () {
//                    arr.push($.trim(this));
//                });
//                $(data).each(function (i, item) {
//                    if ($("#txtCounterpartyID").val().indexOf(item.RowKey) > -1) {
//                    }
//                    else {
//                        if (arr.length > 0) {
//                            if (arrRelatedCounterparities.length > 0) {
//                                $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyID.split(";"), function () {
//                                    arrcounterpartyIDarry.push($.trim(this));
//                                });
//                                $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyTitle.split(";"), function () {
//                                    arrcounterpartyNamearry.push($.trim(this));
//                                });
//                                $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedRelationshipType.split(";"), function () {
//                                    arrcounterpartyRelationshipTypearr.push($.trim(this));
//                                });
//                                if (arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType != "") {
//                                    $("#ddlRelationshipTypeCounterparties").val(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType);
//                                }
//                                if (arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType != "") {
//                                    $("#ddlRelationshipTypeParentcounterparties").val(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType);
//                                }
//                            }
//                        }
//                        if (arr.indexOf(item.CounterpartyName.trim()) >= 0) {
//                            var article = '<tr><td>';
//                            article += '<input id="rel' + item.RowKey + '" type="checkbox" name="RelatedCounterparty" checked class="css1-checkbox" value="' + escape(item.CounterpartyName) + '" />';
//                            article += '<label for="' + item.RowKey + '" class="css1-label">' + item.CounterpartyName + '</label>';
//                            article += '</td>';
//                            article += '<td class="ddl"><select class="f_inpt width90" onchange="showallspans(this)">';
//                            var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
//                            switch (jsLang) {
//                                case 'Parent':
//                                    article += '<option value="Subsidiary" selected>Subsidiary</option>';
//                                    break;
//                                case 'Subsidiary':
//                                    article += '<option value="Parent" selected>Parent</option>';
//                                    break;
//                                case 'Supplier':
//                                    article += '<option value="Customer" selected>Customer</option>';
//                                    break;
//                                case 'Customer':
//                                    article += '<option value="Supplier" selected>Supplier</option>';
//                                    break;
//                                case 'Prime Contractor':
//                                    article += '<option value="Sub Contractor" selected>Sub Contractor</option>';
//                                    break;
//                                case 'Sub Contractor':
//                                    article += '<option value="Prime Contractor" selected>Prime Contractor</option>';
//                                    break;
//                                case 'Dissolved on Merger':
//                                    article += '<option value="Merged into" selected>Merged into</option>';
//                                    break;
//                                case 'Merged into':
//                                    article += '<option value="Dissolved on Merger" selected>Dissolved on Merger</option>';
//                                    break;
//                                case 'Other':
//                                    article += '<option value="Other" selected>Other</option>';
//                                    break;
//                            }
//                            article += '</select><td></tr>'
//                            $("#tblPopupCounterparties").append(article);
//                            relatedCounterpartiesTag.push(item.CounterpartyName);
//                        } else {
//                            var article = '<tr><td>';
//                            article += '<input id="rel' + item.RowKey + '" type="checkbox" name="RelatedCounterparty" class="css1-checkbox" value="' + escape(item.CounterpartyName) + '" />';
//                            article += '<label for="' + item.RowKey + '" class="css1-label">' + item.CounterpartyName + '</label>';
//                            article += '</td>';
//                            article += '<td class="ddl"><td></tr>'
//                            $("#tblPopupCounterparties").append(article);
//                            relatedCounterpartiesTag.push(item.CounterpartyName);
//                        }

//                        $("#rel" + item.RowKey).click(function () {
//                            if (this.checked) {
//                                if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
//                                    var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
//                                    var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
//                                    switch (jsLang) {
//                                        case 'Parent':
//                                            vOptions += '<option value="Subsidiary">Subsidiary</option>';
//                                            break;
//                                        case 'Subsidiary':
//                                            vOptions += '<option value="Parent">Parent</option>';
//                                            break;
//                                        case 'Supplier':
//                                            vOptions += '<option value="Customer">Customer</option>';
//                                            break;
//                                        case 'Customer':
//                                            vOptions += '<option value="Supplier">Supplier</option>';
//                                            break;
//                                        case 'Prime Contractor':
//                                            vOptions += '<option value="Sub Contractor">Sub Contractor</option>';
//                                            break;
//                                        case 'Sub Contractor':
//                                            vOptions += '<option value="Prime Contractor">Prime Contractor</option>';
//                                            break;
//                                        case 'Dissolved on Merger':
//                                            vOptions += '<option value="Merged into">Merged into</option>';
//                                            break;
//                                        case 'Merged into':
//                                            vOptions += '<option value="Dissolved on Merger">Dissolved on Merger</option>';
//                                            break;
//                                        case 'Other':
//                                            vOptions += '<option value="Other">Other</option>';
//                                            break;
//                                    }

//                                    vOptions += '</select>';
//                                    $(this).parent().parent().children(".ddl").append(vOptions);

//                                }
//                            } else {
//                                $(this).parent().parent().children(".ddl").empty();
//                            }
//                            showallspans(this);

//                        });
//                    }
//                });

//                var vCount = $("#tblPopupCounterparties tr").length;
//                if (vCount != 0) {
//                    $('#compact-paginationRelatedCounterparties').pagination({
//                        items: vCount,
//                        itemsOnPage: 10,
//                        typeID: 'tblPopupCounterparties',
//                        cssStyle: 'compact-theme'
//                    });
//                } else {
//                    $('#loadCounterparties').html('<p style="margin-left: 20px;">No items found.</p>')
//                }

//                $("#txtSearchBoxCounterparties").autocomplete({
//                    source: relatedCounterpartiesTag,
//                    minLength: 2,
//                    focus: function (event, ui) {
//                        return false;
//                    },
//                    select: function (evn, uidetails) {
//                        $("#txtSearchBoxCounterparties").val(uidetails.item.label);
//                        ViewCounterparties();
//                    }
//                });

//                $("#popupCounterparties").dialog("option", "title", "Related Counterparties");
//                $("#popupCounterparties").dialog("open");
//                $("#loadingPage").fadeOut();
//            },
//            error: function () {
//                $('#loadMA').empty();
//                $('#loadCounterparties').html('No items found.');
//                $("#tblPopupCounterparties").html('');
//                $("#popupCounterparties").dialog("option", "title", "Related Counterparties");
//                $("#popupCounterparties").dialog("open");
//                $("#loadingPage").fadeOut();
//            }
//        });
//    } else {
//        $('#loadMA').empty();
//        $("#popupCounterparties").dialog("option", "title", "Related Contract Record(s)");
//        $("#popupCounterparties").dialog("open");
//        $("#loadingPage").fadeOut();
//    }
//}
function MilestoneNewEndOccurence() {
    $("#txtMilestoneOccurrenceCount").removeClass('validelement');
}

function MilestoneNewEndOccurenceUser() {
    $("#txtMilestoneOccurrenceCount").addClass('validelement');
}
function RelatedCounterpartiesPush() {
    if (requiredValidator('popupCounterparties', false)) {
        var vRelatedCounterpartyID = "";
        var vRelatedCounterpartyTitle = "";
        var vChildRelation = "";
        //manoj
        $(curRelatedCounterparities).each(function (i, item) {
            if (item != null) {
                vRelatedCounterpartyID += ";" + item.RowKey;
                vRelatedCounterpartyTitle += ";" + item.CounterpartyName;
                vChildRelation += ";" + item.ChildRelationship;
            }
        });
        vRelatedCounterpartyID = (vRelatedCounterpartyID.charAt(0) === ';') ? vRelatedCounterpartyID.substr(1) : vRelatedCounterpartyID;
        vRelatedCounterpartyTitle = (vRelatedCounterpartyTitle.charAt(0) === ';') ? vRelatedCounterpartyTitle.substr(1) : vRelatedCounterpartyTitle;
        vChildRelation = (vChildRelation.charAt(0) === ';') ? vChildRelation.substr(1) : vChildRelation;
        //manoj
        //$('input:checkbox[name="RelatedCounterparty"]:checked').each(function () {
        //    if (vRelatedCounterpartyID == "") {
        //        vRelatedCounterpartyID = this.id.replace("rel", "").trim();
        //        vRelatedCounterpartyTitle = unescape(this.value);
        //        vChildRelation = $(this).parent().parent().children(".ddl").find('option:selected').text();

        //    }
        //    else {
        //        vRelatedCounterpartyID += "; " + this.id.replace("rel", "").trim();
        //        vRelatedCounterpartyTitle += "; " + unescape(this.value);
        //        vChildRelation += "; " + $(this).parent().parent().children(".ddl").find('option:selected').text();
        //    }
        //});
        if (vRelatedCounterpartyID != "") {
            arrRelatedCounterparities = [];
            arrRelatedCounterparities.push({
                CounterpartyID: $("#txtCounterpartyID").val(),
                CounterpartyTitle: $("#txtCounterpartyName").val(),
                RelatedCounterpartyID: vRelatedCounterpartyID,
                RelatedCounterpartyTitle: vRelatedCounterpartyTitle,
                RelationshipType: $("#ddlRelationshipTypeParentcounterparties").find('option:selected').text(),
                RootRelationshipType: $("#ddlRelationshipTypeCounterparties").find('option:selected').text(),
                RelatedRelationshipType: vChildRelation,
                CreatedBy: localStorage.UserName,
                ModifiedBy: localStorage.UserName,
            });
            PrvRelatedCounterparities = curRelatedCounterparities.slice();
            $("#popupCounterparties").dialog("close");
            $('#RelatedCounterparties').val(vRelatedCounterpartyTitle);
            return true;
        } else {
            PrvRelatedCounterparities = [];
            arrRelatedCounterparities = [];
            curRelatedCounterparities = [];
            $('#RelatedCounterparties').val("");
            swal("", "No Counterparty has been selected.");
            $("#popupCounterparties").dialog("close");
            return false;
        }
    }
}
//$("#ddlRelationshipTypeCounterparties").change(function () {
//    $("#ddlRelationshipTypeParentcounterparties").empty();

//    var jsLang = this.value;
//    switch (jsLang) {
//        case 'Parent':
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Parent'>Parent</option>");
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Subsidiary'>Subsidiary</option>");
//            break;
//        case 'Supplier':
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Supplier'>Supplier</option>");
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Customer'>Customer</option>");
//            break;
//        case 'Prime Contractor':
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Prime Contractor'>Prime Contractor</option>");
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Sub Contractor'>Sub Contractor</option>");
//            break;
//        case 'Dissolved on Merger':
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Dissolved on Merger'>Dissolved on Merger</option>");
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Merged into'>Merged into</option>");
//            break;
//        case 'Other':
//            $("#ddlRelationshipTypeParentcounterparties").append("<option value='Other'>Other</option>");
//            break;
//    }

//    $('input:checkbox[name="RelatedCounterparty"]:checked').each(function () {
//        $(this).parent().parent().children(".ddl").empty();
//        var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
//        var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
//        switch (jsLang) {
//            case 'Parent':
//                vOptions += '<option value="Subsidiary">Subsidiary</option>';
//                break;
//            case 'Subsidiary':
//                vOptions += '<option value="Parent">Parent</option>';
//                break;
//            case 'Supplier':
//                vOptions += '<option value="Customer">Customer</option>';
//                break;
//            case 'Customer':
//                vOptions += '<option value="Supplier">Supplier</option>';
//                break;
//            case 'Prime Contractor':
//                vOptions += '<option value="Sub Contractor">Sub Contractor</option>';
//                break;
//            case 'Sub Contractor':
//                vOptions += '<option value="Prime Contractor">Prime Contractor</option>';
//                break;
//            case 'Dissolved on Merger':
//                vOptions += '<option value="Merged into">Merged into</option>';
//                break;
//            case 'Merged into':
//                vOptions += '<option value="Dissolved on Merger">Dissolved on Merger</option>';
//                break;
//            case 'Other':
//                vOptions += '<option value="Other">Other</option>';
//                break;
//        }

//        vOptions += '</select>';
//        $(this).parent().parent().children(".ddl").append(vOptions);
//    });
//});
function CreateRelatedCounterparies(conterpartyid, counterpartyname) {
    //manoj
    //Remove "rel" in Counterparty ID
    var RelCountID = arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyID;
    RelCountID = $.trim(RelCountID);
    var liRelCountID = "";
    $.each(RelCountID.split(";"), function (iRelCountID, itemnameRelCountID) {
        liRelCountID += ";" + itemnameRelCountID.replace("rel", "");
    });
    arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyID = (liRelCountID.charAt(0) === ';') ? liRelCountID.substr(1) : liRelCountID;
    //Remove "rel" in Counterparty ID
    //manoj
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/' + conterpartyid.trim() + '/relatedcounterparties',
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: {
            CounterpartyID: conterpartyid,
            CounterpartyTitle: counterpartyname,
            RelatedCounterpartyID: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyID,
            RelatedCounterpartyTitle: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyTitle,
            RelationshipType: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType,
            RelatedRelationshipType: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedRelationshipType,
            RootRelationshipType: arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType,
            CreatedBy: localStorage.UserName,
            ModifiedBy: localStorage.UserName,
        },
        cache: false,
        success: function (person) {
            PrvRelatedCounterparities = [];
            arrRelatedCounterparities = [];
            curRelatedCounterparities = [];
        },
        error: function (request) {
            PrvRelatedCounterparities = [];
            arrRelatedCounterparities = [];
            curRelatedCounterparities = [];
        }
    });
}



function documentstatuseditchange() {
    if ($("#ddlDocumentStatusEdit").val() != 0 && $("#ddlDocumentStatusEdit").val() == "Expired") {
        $("#dtValidFromEdit").val("");
        $("#dtValidTillEdit").val("");
        if ($("#linkAddValidity1").text() == "Track document expiration date") {
            $("#linkAddValidity1").css('display', 'none');
        }
        else {
            $("#linkAddValidity1").click();
            $("#linkAddValidity1").css('display', 'none');
        }
    }
    else {
        $("#linkAddValidity1").css('display', 'block');
    }
}

//check amendmant title start
function CheckAmendmentTitle(amnedmentid, amnedmenttitle) {
    var returnvalue = false;
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?contractid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (AmendmentCollection) {
            var vAccFeat = $.grep(AmendmentCollection, function (n, i) {
                return (n.AmendmentTitle.toLowerCase() == amnedmenttitle.trim().toLowerCase());
            });
            if (vAccFeat.length > 0) {
                if (amnedmentid != null && amnedmentid != "") {
                    vAccFeat = $.grep(vAccFeat, function (n, i) {
                        return (n.RowKey == amnedmentid.trim());
                    });
                    if (vAccFeat.length > 0) {
                        returnvalue = false;
                    } else {
                        returnvalue = true;
                    }
                } else {
                    returnvalue = true;
                }
            }
        },
        error: function (request) {
        }
    });
    return returnvalue;
}
//check amendmant title end



//get the Unique Array Start
function stringArrayUnique(array) {
    return $.grep(array, function (el, index) {
        return index === $.inArray(el, array);
    });
}
//get the Unique Array End

function bindcountry() {
    $("#ddlCountry").empty();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/countrynames',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var vControls = "<option value='0'>--Select--</option>";
            $(data).each(function (i, item) {
                var find = " ";
                var re = new RegExp(find, 'g');
                var str = item.replace(re, '');
                vControls += '<option value="' + str + '">' + str + '</option>';
            });
            $("#ddlCountry").html(vControls);
            $("#ddlCountryadd").html(vControls);
            vControls = '';
        },
        error:
            function (data) {
                $("#ddlCountry").html("<option value='0'>--Select--</option>");
                $("#ddlCountryadd").html("<option value='0'>--Select--</option>");
            }
    });
}

function liRemoveRelationshipselected(obj) {
    var child = obj.parentNode;
    var removechildname = child.textContent;
    removechildname = removechildname.split('(')[0].trim();;
    child.parentNode.removeChild(child);
    if (child.id != "") {
        $("#" + child.id).attr('checked', false);
        $("#" + child.id).parent().parent().children(".ddl").empty();
    }
    arrRelatedcontractRowkey = [];
    $('input:checkbox[name="RelatedContract"]:checked').each(function () {
        arrRelatedcontractRowkey.push(this.id);
    });
    if (arrRelatedcontractRowkey.length > 0) {
        $("#relatedrole").css('display', '');
    } else {
        //$("#relatedrole").html("");
        $("#relatedrole").css('display', 'none');
    }
    var selectedrelatedcontract = [];
    if (addbuttonclick) {
        $.each($("#RelatedContracts").val().split(";"), function () {
            if (this != "") {
                if ($.trim(this) != "") {
                    selectedrelatedcontract.push($.trim(this));
                }
            }
        });
        if (selectedrelatedcontract.indexOf(removechildname) > -1) {
            selectedrelatedcontract.splice(selectedrelatedcontract.indexOf(removechildname), 1);
            $("#RelatedContracts").val(selectedrelatedcontract.join(";"))
            selectedrelatedcontract = [];
        }
    }

    if (arrRelatedContracts.length > 0) {
        var chkObj = $("#" + child.id);
        var rtypeindex = arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractID.split(";").indexOf(chkObj[0].id);
        var rtindex = arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractID.split(";");
        var rtitle = arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractTitle.split(";");
        var rtypetoremove = arrRelatedContracts[arrRelatedContracts.length - 1].RelatedRelationshipType.split(";");
        var reltypetoremove = arrRelatedContracts[arrRelatedContracts.length - 1].RelationshipType.split(";");
        rtindex[rtypeindex] = "";
        rtitle[rtypeindex] = "";
        rtypetoremove[rtypeindex] = "";
        reltypetoremove[rtypeindex] = "";
        arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractID = rtindex.join(";").replace(";;", "");
        arrRelatedContracts[arrRelatedContracts.length - 1].RelatedContractTitle = rtitle.join(";").replace(";;", "");
        arrRelatedContracts[arrRelatedContracts.length - 1].RelatedRelationshipType = rtypetoremove.join(";").replace(";;", "");
        arrRelatedContracts[arrRelatedContracts.length - 1].RelationshipType = reltypetoremove.join(";").replace(";;", "");
    }
}

function MarkContractAsCloseout() {
    $("#loadingPage").fadeIn();
    var requiredavalible = false;
    var vMetadatavaluetofinalize;
    var metadataFields = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (mainmetadataFields) {
            vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
        },
    });
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + strSelectedContractType.trim(),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (metadataFieldsvalue) {
            metadataFields = $.grep(metadataFieldsvalue, function (n, i) {
                return (n.Closeoutform == "Required");
            });
        },
    });
    $(metadataFields).each(function (i, item) {
        if ($(vMetadatavaluetofinalize).find(item.FieldName).text() == null || $(vMetadatavaluetofinalize).find(item.FieldName).text() == "") {
            requiredavalible = true;
        }
    });
    if (!requiredavalible) {
        swal({
            title: '',
            text: "Are you sure you want to <span style=\"font-weight:700\">mark</span> this Contract Record for <span style=\"font-weight:700\">Closeout</span>?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true
        },
     function (confirmed) {
         if (confirmed) {
             $.ajax({
                 url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + getParameterByName("ContractID") + '/changecloseout?closeout=Yes',
                 type: 'PUT',
                 dataType: 'json',
                 headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                 cache: false,
                 success: function (data) {
                     //manoj
                     $("#loadingPage").fadeOut();
                     //$("#spancloseout").html('Yes');
                     $("#dvCancelContract").dialog("close");
                     $("#dvContractTerm").dialog("close");
                     $("#dvManageContractStatus").dialog("close");
                     contractItem = data;
                     //manoj
                     pendingStarted = false;
                     GetContractPendingAction(true, "BindPeoples");
                     //manoj
                     ContractTopActions();
                     ApplyPermissionToMenu($("#hdnPermission").val());
                     //$("#trCloseOutContract").html('<td class="labelleft padding_left_5px"><div class="mark_Con-Final"><a href="javascript:void(0);" onclick="DeleteContractRecord()"><span class="f_button_green">Delete Contract Record</span></a></div></td>');
                     //$("#rtarchived").css("display", "");
                     //$("#loadingPage").fadeOut();
                     //manoj
                 },
                 error: function (person) {
                     $("#loadingPage").fadeOut();
                 }
             });
         } else {
             $("#loadingPage").fadeOut();
             $("#dvManageContractStatus").dialog("close");
         }
     });

    } else {
        swal({
            title: '',
            text: "Some fields required for Contract Record Closeout are not filled. Do you want to edit now?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true
        },
        function (confirmed) {
            if (confirmed) {
                contextMenuContractSettings("edit", "", "Closeout")
            } else {
                $("#loadingPage").fadeOut();
                $("#dvManageContractStatus").dialog("close");
            }
        });
    }
}

function DeleteContractRecord() {
    swal({
        title: '',
        text: "Are you sure you want to <span style=\"font-weight:700\">delete</span> Contract Record?",
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No',
        html: true
    },
function (confirmed) {
    if (confirmed) {
        var contractID = getParameterByName("ContractID");
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + contractID,
            type: 'DELETE',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
            cache: false,
            success: function (data) {
                swal("", data);
                var vContractStatus = ["Ready for Signature", "Awaiting Signatures", "Signed", "Active", "Up for Renewal", "Renewed", "Extended", "On Hold", "Replaced", "Expired", "Cancelled", "Terminated", "Archived", "About to Expire"];
                if ($.inArray(contractItem.Status, vContractStatus) !== -1)
                    location = "/Contracts";
                else
                    location = "/Pipeline";
            }
        });
    }

});
}

function docdefaultview(doccontractarea) {
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vDocLibFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "14" && n.Status == "ON");
    });
    var dURL = "";
    //multiple document library
    if (vDocLibFeat.length > 0) {
        dURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=' + encodeURIComponent(doccontractarea)
    } else {
        dURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/contractareadetailsbyname?contractareaname=Business Area'
    }

    $.ajax({
        url: dURL,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        async: false,
        success: function (data) {
            thisDocumentLibrarySettings = data;
        },
        error: function (data) {

        }
    });
}

function req() {
    window.open("https://support.office.com/en-US/client/results?Shownav=true&lcid=1033&ns=WDWAEndUser&version=15&omkt=en-US&ver=15&apps=WDWAENDUSER%2cXLWAENDUSER%2cPPWAENDUSER%2cONWAENDUSER&HelpID=OICFailure&ui=en-US&rs=en-US&ad=US", "Ratting", "width=550,height=500,0,status=0,");
}

$('#linkEditInWordOnline').click(function () {
    $("#showMSWordPopup").dialog("close");
});

function showfolderdocuments(parentfolderid) {
    //manoj
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    selectedamnddoc = false;
    selectedamnddocname = [];
    $("#documentMultiActions").css('display', 'none');
    //manoj
    var Istagexist = false;
    $("#showAll").find("a").each(function (e) {
        var tid = this.id;
        if (tid == parentfolderid.id) {
            Istagexist = true;
        }
    });
    if (Istagexist) {
        var splitsection = Folderselection.split('~8Y92YagH');
        $("#showAll").empty();
        for (spl = 0; spl < splitsection.length; spl++) {
            if (splitsection[spl] != "") {
                if (spl == 0) {
                    $("#showAll").append(splitsection[spl]);
                    Folderselection = splitsection[spl];
                }
                if (splitsection[spl].indexOf(parentfolderid.id) > -1) {
                    if (spl != 0) {
                        $("#showAll").append('/' + splitsection[spl]);
                        Folderselection += "~8Y92YagH" + splitsection[spl];
                    }
                    break;
                }
                else {
                    if (spl != 0) {
                        $("#showAll").append('/' + splitsection[spl]);
                        Folderselection += "~8Y92YagH" + splitsection[spl];
                    }
                }
            }
        }
    }


    if ($("#showAll").text().indexOf("/") >= 0) {
        var texttille = parentfolderid.id
        Istagexist = false;
        $("#showAll").find("a").each(function (e) {
            var tid = this.id;
            if (tid == parentfolderid.id) {
                Istagexist = true;
            }
        });
        if (Istagexist) {
            $("#showAll").empty();
            var splitsection = Folderselection.split('~8Y92YagH');
            for (spl = 0; spl < splitsection.length; spl++) {
                if (splitsection[spl] != "") {
                    if (splitsection[spl].indexOf(texttille) > -1) {
                        if (spl == 0) {
                            $("#showAll").append(splitsection[spl]);
                            //spl = splitsection.length;
                            Folderselection = splitsection[spl];
                        }
                        else {
                            $("#showAll").append('/' + splitsection[spl]);
                            Folderselection += "~8Y92YagH" + splitsection[spl];
                            //spl = splitsection.length;
                        }
                    }
                    else {
                        if (spl == 0) {
                            $("#showAll").empty();
                            $("#showAll").append(splitsection[spl]);
                            Folderselection = splitsection[spl];
                        }
                        else {
                            $("#showAll").append('/' + splitsection[spl]);
                            Folderselection += "~8Y92YagH" + splitsection[spl];
                        }
                    }
                }
            }
        }
        else {
            var Isexist = false;
            var id;
            $("#showAll").find("a").each(function (e) {
                id = this.id;
                if (id == parentfolderid.id) {
                    Isexist = true;
                }
            });
            if (!Isexist) {
                $("#showAll").append(' / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
                Folderselection += ' ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';
            }
            $("#showAll").css('display', '');
        }
    } else {
        $("#showAll").empty();
        if (parentdocid == parentfolderid.id) {
            $("#showAll").append('<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>');
            Folderselection = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>';
        } else {
            $("#showAll").append('<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a> / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
            Folderselection = '<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a> ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';
        }

        $("#showAll").css('display', '');
    }
    $("#ulDocument").empty();
    $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/documentsinfolder?parentfolderid=' + parentfolderid.id + '&contractid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data.length == 0) {
                $("#ulDocument").empty();
                $("#ulDocument").append('No items found.');
                $("#documentsort").css('display', 'none');
                $('.ShowMoreDocuments').css("display", "none");
                $('#ShowMoreDocuments').css("display", "none");
                $('#ShowLessDocuments').css("display", "none");
            } else {
                $('#ulDocument').empty();
                CreateDocumentListNew(data);
            }
        },
        error:
            function (data) {
                var Isexist = false;
                var id;
                $("#showAll").find("a").each(function (e) {
                    id = this.id;
                    if (id == parentfolderid.id) {
                        Isexist = true;
                    }
                });

                if (!Isexist) {
                    $("#showAll").append(' / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
                    Folderselection += ' ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';

                }
                $("#showAll").css('display', '');
                $("#documentsort").css('display', 'none');
                //$("#ulFolderDocumentView").css('display', 'none');
                //$("#dvdocumentkeyword").css('display', 'none');
                $('#ulDocument').empty();
                $("#lblDocumentsCount").text('0');
                $("#ulDocument").append('No items found.');
                $('.ShowMoreDocuments').css("display", "none");
                $('#ShowMoreDocuments').css("display", "none");
                $('#ShowLessDocuments').css("display", "none");
            },
        complete: function () {
            BindSystemMilestoneTest(articleSystemMileStone, articleDocumentMileStone, articleMileStone, articleObligationMileStone);
        }
    });
}






function BindDocument(contractid) {
    multipleChecksDocumentID = '';
    multipleChecksDocumentName = '';
    articleDocumentMileStone = '';
    $("#documentMultiActions").css('display', 'none');
    if (contractid == null || contractid == "") { contractid = vContractID; }

    $("#ulDocument").empty();
    $("#alertsListUpcomingDocument").empty();
    $("#ddlDocumentList").empty();
    $("#dvDocument").empty();
    DocumentCount = 0;
    $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/parentfolder?contractid=' + contractid,
        type: 'GET',
        cache: false,
        contentType: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            parentdocid = data.RowKey;
            parentdocname = data.DocumentName;
            $("#lblFolderUrlAmend").text(data.FolderUrl);
            $("#showAll").empty();
            $("#showAll").append('<a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>');
            Folderselection = '<a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>';
            $("#showAll").css('display', '');
            var parentdoc = { id: parentdocid, text: parentdocname };
            showfolderdocuments(parentdoc)
        },
        error: function (request) {
            $("#documentsort").css('display', 'none');
            //$("#ulFolderDocumentView").css('display', 'none');
            //$("#dvdocumentkeyword").css('display', 'none');
            $("#lblDocumentsCount").text('0');
            $("#ulDocumentLoading").css('display', 'none');
            $("#ulDocument").html('No items found.');
            $('.ShowMoreDocuments').css("display", "none");
            $('#ShowMoreDocuments').css("display", "none");
            $('#ShowLessDocuments').css("display", "none");
        }
    });
}

function CreateDocumentListNew(data) {
    var DefaultDocLength = ($("#hdnnewdocumentfeature").text() == "Yes") ? 20 : 10;
    articleDocumentMileStone = "";
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        vFinalSignature = "dropdownMenuFinalSignature";
        vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
        $("#dropdownMenuAmendment .signature").show();
        $("#dropdownMenuAmendmentFinal .signature").show();
    }
    else {
        $("#dropdownMenuAmendment .signature").hide();
        $("#dropdownMenuAmendmentFinal .signature").hide();
    }
    var vGetTime = new Date();
    $.ajax({
        url: '/Documents/GetTime',
        type: 'GET',
        dataType: 'json',
        cache: false,
        success: function (data) {
            var jsObject = JSON.parse(data);
            vGetTime = new Date(jsObject);
        }
    });

    var count = 0;
    var vPermission = $("#hdnPermission").val();

    var settings = {
        pattern: /\.[0-9a-z]+$/i,
        knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
        WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
    };
    var datalenght = data.length;
    //clause
    //$("#ddlTemplateAndClauses").empty();
    //$("#ddlTemplateAndClauses").append('<option value="0">--Select--</option>');
    //$("#docversion").css("display", "none");
    //$("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
    $("#ulDocument").empty();
    var vTitle = '';
    var article = '';
    var articleSubFolder = '';
    if (datalenght > 0) {
        for (var vi = 0; vi < datalenght; vi++) {
            if (data[vi].ContractArea != "") {
                docdefaultview(data[vi].ContractArea);
                break;
            }
        }
    }
    var DocDefaultView = "";
    if (thisDocumentLibrarySettings != '' && thisDocumentLibrarySettings != 'undefined' && typeof thisDocumentLibrarySettings != "undefined") {
        DocDefaultView = thisDocumentLibrarySettings.DocDefaultView;
        DocVersion = thisDocumentLibrarySettings.DocVersion;
    }
    //if (datalenght > 0) {
    //    $("#ulFolderDocumentView").css('display', '');
    //    $("#dvdocumentkeyword").css('display', '');
    //    if (datalenght > 1) {
    //        $("#documentsort").css('display', '');
    //    } else {
    //        $("#documentsort").css('display', 'none');
    //    }
    //} else {
    //    $("#documentsort").css('display', 'none');
    //    $("#ulFolderDocumentView").css('display', 'none');
    //    $("#dvdocumentkeyword").css('display', 'none');
    //}

    for (var i = 0; i < datalenght; i++) {
        var item = data[i];
        var vv = moment(new Date(item.Modified));
        var vTime = vv.fromNow();
        vTime = vv.from(vGetTime);

        count++
        if (item.IsFolder == "True") {
            articleSubFolder += '<li class=" margin-bottom-5"><b title="Folder" style="margin-left: 21px; background-color: #888; " class="status_blue details_documentstatus">Folder</b><img src="../Content/Images/icon/folder.png" style="margin-top: -5px; margin-right: 7px;"><a style="display: inline-block; margin: 3px 0px 0px 0px;" href="javascript:void(0)" id=' + item.RowKey + ' onclick="javascript:showfolderdocuments(this);">' + item.DocumentName + '</a><span class="sub-text"> ' + vTime + '</span>';
            articleSubFolder += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
            articleSubFolder += '<label id="FolderCreationMode" style="display:none;">' + item.CreationMode + '</label>';
            articleSubFolder += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
            if (contractItem.Status != "Expired" && contractItem.Status != "Cancelled" && contractItem.Status != "Replaced" && contractItem.Status != "Archived" && contractItem.Permission != "View" && contractItem.Permission != '' && contractItem.Permission != null) {
                articleSubFolder += '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="openmenuFolder margin-left-5">';
            }
            articleSubFolder += '</li>';
        } else {
            var vClass = "openmenuDocumentFinal";
            var vDocIcon = "";// '<img src="../Content/Images/Doc_draft.png" class="doc_type margin-left-5" alt="Draft Document" title="Draft Document" />';
            var vPrimDocIcon = '';
            if (item.IsFinalized == "Yes") {
                vClass = "openmenuDocument";
                vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized Document" title="Finalized Document" />';
                if (item.CreationMode == "Amendment") {
                    vClass = "openmenuAmendmentDocumentFinal";
                    vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                }
            } else if (item.CreationMode == "Amendment") {
                vClass = "openmenuAmendmentDocument";
                vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
            }
            //manoj
            if (item.IsPined == "Yes" && item.IsPrimary != "Yes") {
                vClass += "UnPin";
            }
            if (item.IsPrimary == "Yes") {
                vPrimDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                vClass += "UnPin" + " hideItem primarydocument";
            } else {
                vClass += " showitem";
            }
            // Bug (eO37060, eO37244)
            if (item.DocumentStatus == "Expired" || contractItem.IsDraft == "Yes" || contractItem.Status == "Expired"
                || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived") {
                vClass = "openmenuExpiredDocument";
            }

            //manoj
            vURLDoc = encodeURI(item.DocumentUrl);
            var ext = vURLDoc.match(settings.pattern);
            var vFileType = '<dd class="file-icon none"></dd>';
            if (ext != null) {
                if (ext.length > 0) { ext = ext[0].slice(1); }
                if (vURLDoc.toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                    if (jQuery.inArray(ext, settings.WopiFrameFileTypes) > -1) {
                        vRawURLDoc = encodeURIComponent(item.DocumentUrl);
                        vURLDoc = localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + vRawURLDoc + "&action=default";
                    } else {
                        vRawURLDoc = "";
                    }
                }

                if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                    vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                }
            }

            if (count <= DefaultDocLength)
                article += '<li class=" margin-bottom-5">';
            else
                article += '<li class="ShowMoreDocuments margin-bottom-5" style="display:none;">';

            article += '<label id="FolderCreationMode" style="display:none;">' + item.CreationMode + '</label>';
            article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
            article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
            article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
            article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
            article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
            article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
            article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
            var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
            article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';

            if (item.CreationMode == "Amendment") {
                article += '<label id="AmendmentID" style="display:none;">' + item.AmendmentID + '</label>';
            }
            if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0))) {

            }
            else {
                article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" class="Contribute" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';
            }

            switch (item.DocumentStatus) {
                case "New":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="New" style="cursor:default" id="' + item.RowKey + '" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5" style="cursor:default">new</b>';
                    else
                        article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                    break;
                case "Ready for Signature":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Ready for Signature" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">sign</b>';
                    else
                        article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                    break;
                case "Awaiting Signatures":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Awaiting Signatures" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">sign</b>';
                    else
                        article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                    break;
                case "Active":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Active" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">actv</b>';
                    else
                        article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                    break;
                case "Signed":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Signed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Sign</b>';
                    else
                        article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                    break;
                case "Expired":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Expired" style="cursor:default" id="' + item.RowKey + '" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5" style="cursor:default">exp</b>';
                    else
                        article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                    break;
                case "Awaiting Review":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Awaiting Review" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">Rev</b>';
                    else
                        article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                    break;
                case "Reviewed":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Reviewed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Rev</b>';
                    else
                        article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                    break;
                case "In Negotiation":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="In Negotiation" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">nego</b>';
                    else
                        article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                    break;
                case "Negotiation Complete":
                    if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                        article += '<b title="Negotiation Complete" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">nego</b>';
                    else
                        article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                    break;
            }

            vTitle = item.DocumentName;
            if (vTitle.length > 61)
            { vTitle = vTitle.substring(0, 60) + '...'; }
            if (item.IsActive == "No") {
                article += vFileType + '<a data-value="' + encodeURI(item.DocumentUrl) + '" href="javascript:void(0);" title="' + item.DocumentName + '" onclick="ViewDocument(\'' + encodeURI(item.DocumentUrl) + '\')" target="_blank" >' + item.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New">';
            } else {
                if (vRawURLDoc != "") {
                    if (DocDefaultView == "WordClient") {
                        if (item.IsActive)
                            article += vFileType + '<a href="javascript:void(0);" seqe = "' + vRawURLDoc + '" onclick="viewdocinword(\'' + vRawURLDoc + '\')" title="' + item.DocumentName + '">' + vTitle + '</a>';
                    } else {
                        article += vFileType + '<a href="' + vURLDoc + '" target="_blank" title="' + item.DocumentName + '">' + vTitle + '</a>';
                    }
                } else {
                    article += vFileType + '<a href="' + vURLDoc + '" target="_blank" title="' + item.DocumentName + '">' + vTitle + '</a>';
                }
            }

            article += '<span class="sub-text"> ' + vTime + '</span>';
            article += '';
            article += '';
            if (item.IsActive !== "No") {
                article += vPrimDocIcon + vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
            } else {
                article += vPrimDocIcon + vDocIcon;
            }
            if (item.IsMetadataMismatch == "Yes") {
                article += '<a href="javascript:void(0);" data="' + item.ContractAndDocumentMetadata + '" onclick="javascript: openmismatched(this)"><img src="../Content/Images/icon/mismatch_icon.png"  style="cursor:pointer;" title="Mismatched Document and Contract Record Metadata." class="margin-left-5" /></a>';
            }
            if (documentview != 'folder' && documentview != "" && documentview != null) {
                var the_arr = item.DocumentUrl.replace(localStorage.SPHostUrl + "/", "").split('/');
                the_arr.pop();
                var changedUrl = the_arr.join('/');
                article += '<div class="documenturlclass" style="margin-left:0px"><label title="' + changedUrl + '"><img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;">' + changedUrl + '</label></div>'
            }
            article += '</li>';
            DocumentCount++;

            articleDocMiletstone = BindDocumentMilestones(item);
            var doclist = '<option value="' + item.RowKey + '">' + item.DocumentName + '</option>';
            $("#ddlDocumentList").append(doclist);
            articleDocumentMileStone += articleDocMiletstone;
            //BindDocumentAlert(item);
            //Clause
            //$("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
        }
    }
    $("#ulDocument").html(articleSubFolder + article);
    //manoj
    if (documentview != 'folder' && documentview != "" && documentview != null) {
        $("#ulDocument").addClass('ulmarginclass');
    } else {
        $("#ulDocument").removeClass('ulmarginclass');
    }
    //manoj
    if ($("#ulDocument")[0].childNodes.length > 1) {
        $("#documentsort").css('display', '');
    } else {
        $("#documentsort").css('display', 'none');
    }
    if (count > DefaultDocLength) {
        //var more = count - 5;
        //$("#dvDocument").html('<a id="ShowMoreDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreDocuments()">' + more + ' More Document(s) </a>' +
        //                        '<a id="ShowLessDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessDocuments()" style="display:none;">Show less</a>');        
        $("#dvDocument").html('<a id="ShowMoreDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMoreDocuments()">More Document(s) </a>' +
                                '<a id="ShowLessDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessDocuments()" style="display:none;">Show less</a>');
    } else {
        $('.ShowMoreDocuments').css("display", "none");
        $('#ShowMoreDocuments').css("display", "none");
        $('#ShowLessDocuments').css("display", "none");
    }

    $("#lblDocumentsCount").text(count);

    //if ($("#showAll").text().indexOf("/") >= 0) {
    //    $('.ShowMoreDocuments').css("display", "none");
    //    $('#ShowMoreDocuments').css("display", "none");
    //    $('#ShowLessDocuments').css("display", "none");
    //}
    if (!$("#lblDocumentsCount").text().trim()) {
        $("#ulDocument").empty();
        $("#ulDocument").append('No items found.');
    }
    if (DocVersion == "No") {
        $('li.history').hide();
    }
    $(".openmenuDocument").contextMenu({ menu: vFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuDocumentFinal").contextMenu({ menu: vMarkFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuExpiredDocument").contextMenu({ menu: "dropdownExpiredDocument", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); }); // Bug (eO37060)
    $(".openmenuAmendmentDocument").contextMenu({ menu: "dropdownMenuAmendment", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentFinal").contextMenu({ menu: "dropdownMenuAmendmentFinal", leftButton: true }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //manoj
    //Un Pin Document Document
    $(".openmenuDocumentUnPin").contextMenu({ menu: vFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuDocumentFinalUnPin").contextMenu({ menu: vMarkFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentUnPin").contextMenu({ menu: "dropdownMenuAmendmentUnPin", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentFinalUnPin").contextMenu({ menu: "dropdownMenuAmendmentFinalUnPin", leftButton: true }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //manoj
    $(".openmenuFolder").contextMenu({ menu: 'myMenuFolder', leftButton: true }, function (action, el, pos) { contextMenuWorkFolder(action, el.parent("li"), pos); });
    if ($("#hdnnewdocumentfeature").text() != "Yes") {
        $(".pinhide").css("display", "none");
    } else {
        if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $('.pinhide').css("display", "");
        } else {
            $('.pinhide').css("display", "none");
        }
        //manoj
        $(".hideItem").click(function () {
            if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                $(".unpindocument").hide();
                $(".pindocument").hide();
                $(".primary").show();
            }
        })
        $(".showitem").click(function () {
            if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                $(".unpindocument").show();
                $(".pindocument").show();
                $(".primary").show();
            }
        })
        $(".primarydocument").click(function () {
            //if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute' && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $(".primary").hide();
            //}
        })
        //manoj
    }
    //manoj
    if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
        $('.Contribute').css("display", "");
    } else if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') {
        $('.StatusPermission').css("display", "");
    } else {
        $('.Contribute').css("display", "none");
    }
    //manoj
    if (vAccFeat.length > 0) {
        $("#dropdownMenuAmendment .signature").show();
        $("#dropdownMenuAmendmentFinal .signature").show();
    }
    else {
        $("#dropdownMenuAmendment li.signature.Contribute").hide();
        $("#dropdownMenuAmendmentFinal li.signature.Contribute").hide();
    }
    $("#contractLogs").empty();
    TermsAndClauseDocument(vContractID);

    //pendingStarted = false;
    $("#tblContractSettingMetadata").empty();
    //GetContractPendingAction(false);    
}

//manoj
function CreateDocumentListNewBlob(data) {
    var DefaultDocLength = ($("#hdnnewdocumentfeature").text() == "Yes") ? 20 : 10;
    articleDocumentMileStone = "";
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        vFinalSignature = "dropdownMenuFinalSignature";
        vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
        $("#dropdownMenuAmendment .signature").show();
        $("#dropdownMenuAmendmentFinal .signature").show();
    }
    else {
        $("#dropdownMenuAmendment .signature").hide();
        $("#dropdownMenuAmendmentFinal .signature").hide();
    }
    var vGetTime = new Date();
    $.ajax({
        url: '/Documents/GetTime',
        type: 'GET',
        dataType: 'json',
        cache: false,
        success: function (dataValue) {
            var jsObject = JSON.parse(dataValue);
            vGetTime = new Date(jsObject);
        }
    });

    var count = 0;
    var vPermission = $("#hdnPermission").val();

    var settings = {
        pattern: /\.[0-9a-z]+$/i,
        knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
        WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
    };
    var ChildCoumetcount = $("#ulDocument").children().length;
    var vTitle = '';
    var article = '';
    var articleSubFolder = '';

    var item = data;
    var vv = moment(new Date(item.Modified));
    var vTime = vv.fromNow();
    vTime = vv.from(vGetTime);

    count++
    if (item.IsFolder == "True") {
    } else {
        var vClass = "openmenuDocumentFinal";
        var vDocIcon = "";// '<img src="../Content/Images/Doc_draft.png" class="doc_type margin-left-5" alt="Draft Document" title="Draft Document" />';
        var vPrimDocIcon = '';
        if (item.IsFinalized == "Yes") {
            vClass = "openmenuDocument";
            vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized Document" title="Finalized Document" />';
            if (item.CreationMode == "Amendment") {
                vClass = "openmenuAmendmentDocumentFinal";
                vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
            }
        } else if (item.CreationMode == "Amendment") {
            vClass = "openmenuAmendmentDocument";
            vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
        }
        //manoj
        if (item.IsPined == "Yes" && item.IsPrimary != "Yes") {
            vClass += "UnPin";
        }
        if (item.IsPrimary == "Yes") {
            vPrimDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
            vClass += "UnPin" + " hideItem primarydocument";
        } else {
            vClass += " showitem";
        }
        //manoj
        vURLDoc = encodeURI(item.DocumentUrl);
        var ext = vURLDoc.match(settings.pattern);
        var vFileType = '<dd class="file-icon none"></dd>';
        if (ext != null) {
            if (ext.length > 0) { ext = ext[0].slice(1); }
            if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                vFileType = '<dd class="file-icon ' + ext + '"></dd>';
            }
        }

        if (count <= DefaultDocLength)
            article += '<li class=" margin-bottom-5">';
        else
            article += '<li class="ShowMoreDocuments margin-bottom-5" style="display:none;">';

        article += '<label id="FolderCreationMode" style="display:none;">' + item.CreationMode + '</label>';
        article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
        article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
        article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
        article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
        article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
        article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
        article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
        var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
        article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';

        if (item.CreationMode == "Amendment") {
            article += '<label id="AmendmentID" style="display:none;">' + item.AmendmentID + '</label>';
        }
        article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" class="Contribute" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';

        switch (item.DocumentStatus) {
            case "New":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="New" style="cursor:default" id="' + item.RowKey + '" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5" style="cursor:default">new</b>';
                else
                    article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                break;
            case "Ready for Signature":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Ready for Signature" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">sign</b>';
                else
                    article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                break;
            case "Awaiting Signatures":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Awaiting Signatures" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">sign</b>';
                else
                    article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                break;
            case "Active":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Active" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">actv</b>';
                else
                    article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                break;
            case "Signed":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Signed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Sign</b>';
                else
                    article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                break;
            case "Expired":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Expired" style="cursor:default" id="' + item.RowKey + '" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5" style="cursor:default">exp</b>';
                else
                    article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                break;
            case "Awaiting Review":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Awaiting Review" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">Rev</b>';
                else
                    article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                break;
            case "Reviewed":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Reviewed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Rev</b>';
                else
                    article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                break;
            case "In Negotiation":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="In Negotiation" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">nego</b>';
                else
                    article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                break;
            case "Negotiation Complete":
                if (contractItem.Status == "Expired" || contractItem.Status == "Archived" || ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)))
                    article += '<b title="Negotiation Complete" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">nego</b>';
                else
                    article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                break;
        }

        vTitle = item.DocumentName;
        if (vTitle.length > 61)
        { vTitle = vTitle.substring(0, 60) + '...'; }
        //if (vRawURLDoc != "") {
        article += vFileType + '<a data-value="' + encodeURI(item.DocumentUrl) + '" href="javascript:void(0);" title="' + item.DocumentName + '" onclick="ViewDocument(\'' + encodeURI(item.DocumentUrl) + '\')" target="_blank" >' + item.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New">';
        //} else {
        //    article += vFileType + '<a data-value="' + encodeURI(item.DocumentUrl); + '" href="javascript:void(0);" title="' + item.DocumentName + '">' + vTitle + '</a>';
        //}

        article += '<span class="sub-text"> ' + vTime + '</span>';
        article += '';
        article += '';
        article += vPrimDocIcon + vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
        if (item.IsMetadataMismatch == "Yes") {
            article += '<a href="javascript:void(0);" data="' + item.ContractAndDocumentMetadata + '" onclick="javascript: openmismatched(this)"><img src="../Content/Images/icon/mismatch_icon.png"  style="cursor:pointer;" title="Mismatched Document and Contract Record Metadata." class="margin-left-5" /></a>';
        }
        if (documentview != 'folder' && documentview != "" && documentview != null) {
            var the_arr = item.DocumentUrl.replace(localStorage.SPHostUrl + "/", "").split('/');
            the_arr.pop();
            var changedUrl = the_arr.join('/');
            article += '<div class="documenturlclass" style="margin-left:0px"><label title="' + changedUrl + '"><img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;">' + changedUrl + '</label></div>'
        }
        article += '</li>';
        DocumentCount++;

        articleDocMiletstone = BindDocumentMilestones(item);
        articleDocumentMileStone += articleDocMiletstone;
    }
    //}
    $("#ulDocument").prepend(article);
    //manoj
    //if (documentview != 'folder' && documentview != "" && documentview != null) {
    //    $("#ulDocument").addClass('ulmarginclass');
    //} else {
    //    $("#ulDocument").removeClass('ulmarginclass');
    //}
    ////manoj
    //if ($("#ulDocument")[0].childNodes.length > 1) {
    //    $("#documentsort").css('display', '');
    //} else {
    //    $("#documentsort").css('display', 'none');
    //}

    //if (!$("#lblDocumentsCount").text().trim()) {
    //    $("#ulDocument").empty();
    //    $("#ulDocument").append('No items found.');
    //}
    if (DocVersion == "No") {
        $('li.history').hide();
    }
    $(".openmenuDocument").contextMenu({ menu: vFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuDocumentFinal").contextMenu({ menu: vMarkFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocument").contextMenu({ menu: "dropdownMenuAmendment", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentFinal").contextMenu({ menu: "dropdownMenuAmendmentFinal", leftButton: true }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //manoj
    //Un Pin Document Document
    $(".openmenuDocumentUnPin").contextMenu({ menu: vFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuDocumentFinalUnPin").contextMenu({ menu: vMarkFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentUnPin").contextMenu({ menu: "dropdownMenuAmendmentUnPin", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentFinalUnPin").contextMenu({ menu: "dropdownMenuAmendmentFinalUnPin", leftButton: true }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //manoj
    $(".openmenuFolder").contextMenu({ menu: 'myMenuFolder', leftButton: true }, function (action, el, pos) { contextMenuWorkFolder(action, el.parent("li"), pos); });
    if ($("#hdnnewdocumentfeature").text() != "Yes") {
        $(".pinhide").css("display", "none");
    } else {
        if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $('.pinhide').css("display", "");
        } else {
            $('.pinhide').css("display", "none");
        }
        //manoj
        $(".hideItem").click(function () {
            if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                $(".unpindocument").hide();
                $(".pindocument").hide();
                $(".primary").show();
            }
        })
        $(".showitem").click(function () {
            if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                $(".unpindocument").show();
                $(".pindocument").show();
                $(".primary").show();
            }
        })
        $(".primarydocument").click(function () {
            //if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute' && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $(".primary").hide();
            //}
        })
        //manoj
    }
    //manoj
    if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
        $('.Contribute').css("display", "");
    } else if (contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') {
        $('.StatusPermission').css("display", "");
    } else {
        $('.Contribute').css("display", "none");
    }
    //manoj
}
//manoj


//manoj
function CreateDocumentListPinView(contractid) {
    articleDocumentMileStone = "";
    $('.ShowMorePinDocuments').css("display", "none");
    $('#ShowMorePinDocuments').css("display", "none");
    $('#ShowLessPinDocuments').css("display", "none");
    $("#hdnPinDocumentCount").text("No");
    $("#ulPinDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + contractid,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (Documentcollections) {
            //manoj 
            //Filter document(s) by primary and pined
            var data = $.grep(Documentcollections, function (n, i) {
                return (n.IsPined == "Yes" || n.IsPrimary == "Yes");
            });
            if (data.length > 0) {
                if (data.length >= 5) {
                    $("#hdnPinDocumentCount").text("Yes");
                } else {
                    $("#hdnPinDocumentCount").text("No");
                }
                if (data.length > 1) {
                    $("#pindocumentsort").css('display', '');
                } else {
                    $("#pindocumentsort").css('display', 'none');
                }
                //manoj
                var vFinalSignature = "dropdownMenuFinal";
                var vMarkFinalSignature = "dropdownMenuMarkFinal";
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                var vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "1" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    vFinalSignature = "dropdownMenuFinalSignature";
                    vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
                    $("#dropdownMenuAmendment .signature").show();
                    $("#dropdownMenuAmendmentFinal .signature").show();
                }
                else {
                    $("#dropdownMenuAmendment .signature").hide();
                    $("#dropdownMenuAmendmentFinal .signature").hide();
                }
                var vGetTime = new Date();
                $.ajax({
                    url: '/Documents/GetTime',
                    type: 'GET',
                    dataType: 'json',
                    cache: false,
                    success: function (data) {
                        var jsObject = JSON.parse(data);
                        vGetTime = new Date(jsObject);
                    }
                });
                var count = 0;
                var vPermission = $("#hdnPermission").val();

                var settings = {
                    pattern: /\.[0-9a-z]+$/i,
                    knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
                    WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
                };
                var datalenght = data.length;
                var vTitle = '';
                var article = '';
                var articleSubFolder = '';
                if (datalenght > 0) {
                    for (var vi = 0; vi < datalenght; vi++) {
                        if (data[vi].ContractArea != "") {
                            docdefaultview(data[vi].ContractArea);
                            break;
                        }
                    }
                }
                var DocDefaultView = "";
                if (thisDocumentLibrarySettings != '' && thisDocumentLibrarySettings != 'undefined' && typeof thisDocumentLibrarySettings != "undefined") {
                    DocDefaultView = thisDocumentLibrarySettings.DocDefaultView;
                    DocVersion = thisDocumentLibrarySettings.DocVersion;
                }
                for (var i = 0; i < datalenght; i++) {
                    var item = data[i];
                    var vv = moment(new Date(item.Modified));
                    var vTime = vv.fromNow();
                    vTime = vv.from(vGetTime);

                    count++
                    var vClass = "openmenuDocumentFinal";
                    var vDocIcon = "";// '<img src="../Content/Images/Doc_draft.png" class="doc_type margin-left-5" alt="Draft Document" title="Draft Document" />';
                    var vPrimDocIcon = '';
                    if (item.IsFinalized == "Yes") {
                        vClass = "openmenuDocument";
                        vDocIcon = '<img src="../Content/Images/icon/final_doc.png" class="doc_type margin-left-5" alt="Finalized Document" title="Finalized Document" />';
                        if (item.CreationMode == "Amendment") {
                            vClass = "openmenuAmendmentDocumentFinal";
                            vDocIcon += '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                        }
                    } else if (item.CreationMode == "Amendment") {
                        vClass = "openmenuAmendmentDocument";
                        vDocIcon = '<img src="../Content/Images/amendments.png" style="height:16px; width:16px;" class="doc_type margin-left-5" alt="Amendment Document" title="Amendment Document" />';
                    }
                    //manoj
                    if (item.IsPined == "Yes" && item.IsPrimary != "Yes") {
                        vClass += "UnPin";
                    }
                    if (item.IsPrimary == "Yes") {
                        vPrimDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                        vClass += "UnPin" + " hideItem primarydocument";
                    } else {
                        vClass += " showitem";
                    }
                    //manoj
                    //if (item.IsPrimary == "Yes") {
                    //    vPrimDocIcon = '<img src="../Content/Images/primary_doc.png" class="doc_type margin-left-5" alt="Primary Document" title="Primary Document" />';
                    //}

                    vURLDoc = encodeURI(item.DocumentUrl);
                    var ext = vURLDoc.match(settings.pattern);
                    var vFileType = '<dd class="file-icon none"></dd>';
                    if (ext != null) {
                        if (ext.length > 0) { ext = ext[0].slice(1); }
                        if (vURLDoc.toLowerCase().indexOf(localStorage.SPHostUrl.toLowerCase()) >= 0) {
                            if (jQuery.inArray(ext, settings.WopiFrameFileTypes) > -1) {
                                vRawURLDoc = encodeURIComponent(item.DocumentUrl);
                                vURLDoc = localStorage.SPHostUrl + "/_layouts/WopiFrame.aspx?sourcedoc=" + vRawURLDoc + "&action=default";
                            } else {
                                vRawURLDoc = "";
                            }
                        }

                        if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                            vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                        }
                    }

                    if (count <= 10)
                        article += '<li class=" margin-bottom-5">';
                    else
                        article += '<li class="ShowMorePinDocuments margin-bottom-5" style="display:none;">';

                    article += '<label id="FolderCreationMode" style="display:none;">' + item.CreationMode + '</label>';
                    article += '<label id="DocumentID" style="display:none;">' + item.RowKey + '</label>';
                    article += '<label id="SentForSign" style="display:none;">' + item.SentForSign + '</label>';
                    article += '<label id="DocumentName" style="display:none;">' + item.DocumentName + '</label>';
                    article += '<label id="ShareWorkflow" style="display:none;">' + item.ShareWorkflow + '</label>';
                    article += '<label id="ReviewWorkflow" style="display:none;">' + item.ReviewWorkflow + '</label>';
                    article += '<label id="BusinessArea" style="display:none;">' + item.BusinessArea + '</label>';
                    article += '<label id="IsFinalized" style="display:none;">' + item.IsFinalized + '</label>';
                    var primarydocchecking = (item.IsPrimary != null && item.IsPrimary != "") ? item.IsPrimary : "No";
                    article += '<label id="IsPrimaryDoc" style="display:none;">' + primarydocchecking + '</label>';

                    if (item.CreationMode == "Amendment") {
                        article += '<label id="AmendmentID" style="display:none;">' + item.AmendmentID + '</label>';
                    }
                    //article += '<input type="checkbox" id="' + item.RowKey + '" name="MultipleDocuments" class="Contribute" onclick="checkMultipleDocuments(this);" value=' + item.RowKey + ' /> ';

                    switch (item.DocumentStatus) {
                        case "New":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="New" style="cursor:default" id="' + item.RowKey + '" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5" style="cursor:default">new</b>';
                            else
                                article += '<b title="New" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green_another details_documentstatus"><img src="../Content/Images/status/new.png" class="margin-right-5">new</b>';
                            break;
                        case "Ready for Signature":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Ready for Signature" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">sign</b>';
                            else
                                article += '<b title="Ready for Signature" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">sign</b>';
                            break;
                        case "Awaiting Signatures":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Awaiting Signatures" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">sign</b>';
                            else
                                article += '<b title="Awaiting Signatures" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">sign</b>';
                            break;
                        case "Active":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Active" style="cursor:default" id="' + item.RowKey + '" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5" style="cursor:default">actv</b>';
                            else
                                article += '<b title="Active" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_green details_documentstatus"><img src="../Content/Images/status/active.png" class="margin-right-5">actv</b>';
                            break;
                        case "Signed":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Signed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Sign</b>';
                            else
                                article += '<b title="Signed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Sign</b>';
                            break;
                        case "Expired":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Expired" style="cursor:default" id="' + item.RowKey + '" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5" style="cursor:default">exp</b>';
                            else
                                article += '<b title="Expired" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_Gray details_documentstatus"><img src="../Content/Images/status/expried.png" class="margin-right-5">exp</b>';
                            break;
                        case "Awaiting Review":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Awaiting Review" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">Rev</b>';
                            else
                                article += '<b title="Awaiting Review" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">Rev</b>';
                            break;
                        case "Reviewed":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Reviewed" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">Rev</b>';
                            else
                                article += '<b title="Reviewed" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">Rev</b>';
                            break;
                        case "In Negotiation":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="In Negotiation" style="cursor:default" id="' + item.RowKey + '" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5" style="cursor:default">nego</b>';
                            else
                                article += '<b title="In Negotiation" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_yellow details_documentstatus"><img src="../Content/Images/status/renew.png" class="margin-right-5">nego</b>';
                            break;
                        case "Negotiation Complete":
                            if (item.ContractStatus == 'Expired' || item.ContractStatus == 'Archived')
                                article += '<b title="Negotiation Complete" style="cursor:default" id="' + item.RowKey + '" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5" style="cursor:default">nego</b>';
                            else
                                article += '<b title="Negotiation Complete" style="cursor:pointer" id="' + item.RowKey + '" onclick="ChangeDocumentStatus(this)" class="status_blue details_documentstatus"><img src="../Content/Images/status/tick.png" class="margin-right-5">nego</b>';
                            break;
                    }

                    vTitle = item.DocumentName;
                    if (vTitle.length > 61)
                    { vTitle = vTitle.substring(0, 60) + '...'; }
                    if (item.IsActive == "No") {
                        article += vFileType + '<a data-value="' + encodeURI(item.DocumentUrl) + '" href="javascript:void(0);" title="' + item.DocumentName + '" onclick="ViewDocument(\'' + encodeURI(item.DocumentUrl) + '\')" target="_blank" >' + item.DocumentName + '</a><img src="../Content/Images/new_item.png" alt="New" title="New">';
                    } else {
                        if (vRawURLDoc != "") {
                            if (DocDefaultView == "WordClient") {
                                article += vFileType + '<a href="javascript:void(0);" seqe = "' + vRawURLDoc + '" onclick="viewdocinword(\'' + vRawURLDoc + '\')" title="' + item.DocumentName + '">' + vTitle + '</a>';
                            } else {
                                article += vFileType + '<a href="' + vURLDoc + '" target="_blank" title="' + item.DocumentName + '">' + vTitle + '</a>';
                            }
                        } else {
                            article += vFileType + '<a href="' + vURLDoc + '" target="_blank" title="' + item.DocumentName + '">' + vTitle + '</a>';
                        }
                    }

                    article += '<span class="sub-text"> ' + vTime + '</span>';
                    article += '';
                    article += '';
                    if (item.IsActive != "No") {
                        article += vPrimDocIcon + vDocIcon + '&nbsp;<img src="../Content/Images/context_Menu.png" alt="Open Menu" title="Open Menu" class="' + vClass + ' margin-left-5" />';
                    } else {
                        article += vPrimDocIcon + vDocIcon;
                    }
                    if (item.IsMetadataMismatch == "Yes") {
                        article += '<a href="javascript:void(0);" data="' + item.ContractAndDocumentMetadata + '" onclick="javascript: openmismatched(this)"><img src="../Content/Images/icon/mismatch_icon.png"  style="cursor:pointer;" title="Mismatched Document and Contract Record Metadata." class="margin-left-5" /></a>';
                    }
                    article += '</li>';
                }
                $("#ulPinDocument").html(articleSubFolder + article);
                if (count > 10) {
                    $("#dvPinDocument").html('<a id="ShowMorePinDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowMorePinDocuments()">More Document(s) </a>' +
                                            '<a id="ShowLessPinDocuments" href="javascript:void(0);" class="pad-all close1" onclick="ShowLessPinDocuments()" style="display:none;">Show less</a>');
                } else {
                    $('.ShowMorePinDocuments').css("display", "none");
                    $('#ShowMorePinDocuments').css("display", "none");
                    $('#ShowLessPinDocuments').css("display", "none");
                }

                $("#lblPinDocumentsCount").text(count);

                if (!$("#lblPinDocumentsCount").text().trim()) {
                    $("#ulPinDocument").empty();
                    $("#ulPinDocument").append('No items found.');
                }
                if (DocVersion == "No") {
                    $('li.history').hide();
                }
                //Un Pin Document

                $(".openmenuDocumentUnPin").contextMenu({ menu: vFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                $(".openmenuDocumentFinalUnPin").contextMenu({ menu: vMarkFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
                $(".openmenuAmendmentDocumentUnPin").contextMenu({ menu: "dropdownMenuAmendmentUnPin", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
                $(".openmenuAmendmentDocumentFinalUnPin").contextMenu({ menu: "dropdownMenuAmendmentFinalUnPin", leftButton: true }, function (action, el, pos) {
                    contextMenuAmendmentDocument(action, el.parent("li"), pos);
                });
                //manoj
                $(".openmenuFolder").contextMenu({ menu: 'myMenuFolder', leftButton: true }, function (action, el, pos) { contextMenuWorkFolder(action, el.parent("li"), pos); });
                //if ($("#hdnnewdocumentfeature").text() != "Yes") {
                //    $(".pinhide").css("display", "none");
                //} else {
                //$('.pinhide').css("display", "");
                //manoj
                $(".hideItem").click(function () {
                    if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                        $(".unpindocument").hide();
                        $(".pindocument").hide();
                        $(".primary").show();
                    }
                })
                $(".showitem").click(function () {
                    if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                        $(".unpindocument").show();
                        $(".pindocument").show();
                        $(".primary").show();
                    }
                })
                $(".primarydocument").click(function () {
                    $(".primary").hide();
                })
                //manoj
                //}

            } else {
                $("#pindocumentsort").css('display', 'none');
                $("#lblPinDocumentsCount").text('0');
                $("#ulPinDocument").html('No items found.');
                $("#hdnPinDocumentCount").text("No");
            }
        }, error:
                function (data) {
                    $("#pindocumentsort").css('display', 'none');
                    $("#lblPinDocumentsCount").text('0');
                    $("#ulPinDocument").html('No items found.');
                    $("#hdnPinDocumentCount").text("No");

                },
        complete: function (data) {
            //$("#ulPinDocument").parent().prepend('<div class="warning-msg clearfix" style="display:none;"><img src="/Content/Images/icon/warning-icon.png" alt=""><table id="tblDocumentMissing"></table><a href="javascript:void(0);" class="close1" onclick="GetContractPendingAction(true)" title="View All"><img src="/Content/Images/view-all-new.png" style="cursor:pointer;">&nbsp;</a></div>')
        }
    });
}
//manoj

function contextMenuWorkFolder(action, el, pos) {

    switch (action) {
        case "open":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var LinkURL = $("#" + documentID)[0];
                showfolderdocuments(LinkURL);
                break;
            }
        case "delete":
            {
                var documentName = $(el).find("#DocumentName").text();
                var documentID = $(el).find("#DocumentID").text();
                var FolderCreationMode = $(el).find("#FolderCreationMode").text();
                swal({
                    title: '',
                    text: "Are you sure you want to <span style=\"font-weight:700\">delete</span> the folder <span style=\"font-weight:700\">'" + documentName + "'</span>? All its documents will be deleted.",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    html: true
                },
                 function (confirmed) {
                     if (confirmed) {
                         $("#loadingPage").fadeIn();
                         var documentID = $(el).find("#DocumentID").text();
                         var contractIDToPass = getParameterByName("ContractID");
                         $.ajax({
                             url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folder?contractid=' + contractIDToPass + '&folderid=' + documentID,
                             type: 'DELETE',
                             dataType: 'json',
                             "Content-Type": "application/json",
                             headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
                             cache: false,
                             success: function (data) {
                                 //manoj
                                 if (documentview == null || documentview == "" || documentview == 'folder') {
                                     if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
                                         var selectedfoldervalue = $('#showAll').find("a");
                                         var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                         var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                         var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
                                         showfolderdocuments(parentdocumentdetails);
                                     }
                                     else {
                                         BindDocument(vContractID);
                                     }
                                 } else {
                                     DisplayDocument(documentview);
                                 }
                                 pendingStarted = false;
                                 GetContractPendingAction(true, "BindPeoples");
                                 $("#hdnFolderDocumentView").text('');
                                 $("#hdnShowAllTextValue").html('');
                                 PrvFolderselection = '';
                                 //Bind primary and pined document based on new feature
                                 if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                     CreateDocumentListPinView(vContractID);
                                 }
                                 //manoj
                                 if (typeof FolderCreationMode != "undefined" && FolderCreationMode != null && FolderCreationMode != "") {
                                     if (FolderCreationMode.trim() == "Amendment") {
                                         if (contractItem.ContractDocumentsUrl == "") {
                                             $('#lblFolderUrlAmend').text("/" + $('#hdContAreaDocLibName').val() + "/" + contractItem.ContractTitle.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim() + "/");
                                             $('#txtNewFolderNameAmend').val("Amendments");
                                         } else {
                                             $('#lblFolderUrlAmend').text(((contractItem.ContractDocumentsUrl.charAt(contractItem.ContractDocumentsUrl.length - 1)) != "/") ? contractItem.ContractDocumentsUrl + "/" : contractItem.ContractDocumentsUrl);
                                             //if ((contractItem.ContractDocumentsUrl.charAt(contractItem.ContractDocumentsUrl.length - 1)) != "/") {
                                             //    $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl + "/");
                                             //} else {
                                             //    $('#lblFolderUrlAmend').text(contractItem.ContractDocumentsUrl);
                                             //}
                                             $('#txtNewFolderNameAmend').val("Amendments");
                                         }
                                         $('#txtNewFolderNameAmend').css('display', '');
                                         $('#txtNewFolderNameAmend').addClass('validelement');
                                     }
                                 }
                                 $("#ddlDocumentList option[value='" + documentID + "']").remove();
                                 $("#ddlDocumentList").trigger('chosen:updated');
                                 $("#loadingPage").fadeOut();
                             },
                             error: function () {
                                 $("#loadingPage").fadeOut();
                             }
                         });
                     }
                     return;
                 });
                break;
            }
    }
}

$(".switch_val").change(function () {
    var obj = jQuery(this).parent();
    var input_val = obj.children('input').val();
    $(obj).removeClass('switch_enable');
    $(obj).removeClass('switch_disable');
    if ("0" == input_val || "No" == input_val) {
        $(obj).addClass('switch_disable');
    } else if ("1" == input_val || "Yes" == input_val) {
        $(obj).addClass('switch_enable');
    }

});

function GetTheAttachments(URI, lsFilenames, CorrespondanceRowKey) {
    var articleattc = '';
    if (lsFilenames != "") {
        var settings = {
            pattern: /\.[0-9a-z]+$/i,
            knownFileTypes: ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'zip', 'rar', 'gzip', 'arj', 'wav', 'mp3', 'aif', 'aiff', 'm4a', 'ogg', 'wma', 'psd', 'ai', 'swf', 'fla', 'css', 'js', 'avi', 'mov', 'wmv', 'dotx'],
            WopiFrameFileTypes: ['doc', 'xls', 'ppt', 'docx', 'xlsx', 'pptx', 'dotx']
        };
        var URIStart = URI.substring(0, URI.lastIndexOf("_"));
        var URIRequire = URIStart + "_" + CorrespondanceRowKey + "_";
        var FilenamesSplit = [];
        if (lsFilenames.split('|').length == 1)
            FilenamesSplit.push(lsFilenames.split('|'));
        else
            FilenamesSplit = lsFilenames.split('|');
        $(FilenamesSplit).each(function () {
            var vRawURLDoc = '';
            var filen = $(this)[0];
            var DocumentUrl = URIRequire + filen;
            vURLDoc = encodeURIComponent(DocumentUrl);
            var ext = vURLDoc.match(settings.pattern);
            var vFileType = '<dd class="file-icon none"></dd>';
            if (ext != null) {
                if (ext.length > 0) { ext = ext[0].slice(1); }
                if (jQuery.inArray(ext.toLowerCase(), settings.knownFileTypes) > -1) {
                    vFileType = '<dd class="file-icon ' + ext + '"></dd>';
                }
            }
            var filenameOriginal = "";
            if (filen.split('_').length > 1) {
                filenameOriginal = filen.split('_')[1];
            }
            else {
                filenameOriginal = filen;
            }
            articleattc += vFileType + '<a data-value="' + vURLDoc + '" href="javascript:void(0);" onclick="ViewCorrespondenceDocument(this)">' + filenameOriginal + '</a><br/>';

            //if (vURLDoc.indexOf(".doc") >= 0 || vURLDoc.indexOf(".ppt") >= 0 || vURLDoc.indexOf(".xls") >= 0 || vURLDoc.indexOf(".dotx") >= 0) {
            //articleattc += vFileType + '<a data-value="' + vURLDoc + '" href="javascript:void(0);" onclick="ViewCorrespondenceDocument(this)">' + filen + '</a><br/>';
            //}
            //else {
            //    articleattc += vFileType + '<a href="' + vURLDoc + '" target="_blank">' + filen + '</a><br/>';
            //}
        });

    }
    return articleattc;

}


function ViewCorrespondenceDocument(docurl) {
    if (docurl != '') {
        if (typeof docurl === "string") {
            docurl = decodeURIComponent(docurl);
        }
        else {
            docurl = decodeURIComponent($(docurl).attr('data-value'));
        }
        var srcurl = docurl;
        var IsView = true;
        if (srcurl.indexOf("%") >= 0) {
            var fileName = srcurl.split('/').pop();
            fileName = encodeURIComponent(fileName);
            srcurl = srcurl.substring(0, srcurl.lastIndexOf('/')) + "/" + fileName;
            docurl = srcurl;
            IsView = false;
        }
        if ((docurl.indexOf(".doc") >= 0 || docurl.indexOf(".ppt") >= 0 || docurl.indexOf(".xls") >= 0 || docurl.indexOf(".dotx") >= 0) && IsView) {
            srcurl = "https://view.officeapps.live.com/op/embed.aspx?src=" + docurl + "?" + randomString() + "=" + randomString() + "&wdStartOn=1";
        }
        if (docurl.indexOf(".pdf") >= 0 && IsView) {
            window.open("http://docs.google.com/gview?url=" + srcurl + "?" + randomString() + "=" + randomString(), '_blank');
        } else {
            window.open(srcurl);
        }
    }
}


function randomString() {
    var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
    var string_length = 8;
    var randomstring = '';
    for (var i = 0; i < string_length; i++) {
        var rnum = Math.floor(Math.random() * chars.length);
        randomstring += chars.substring(rnum, rnum + 1);
    }
    return randomstring;
}

function getCounterpartyFieldsadd() {
    $("#loadingPage").fadeIn();
    $("#counterpartyItemsadd tbody tr.removableCounterpartyField").remove(); // remove all added removable fields before loading - Bug (eO37106)
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/primaryfields',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (metadataFields) {
            vCounterpartyFields = [];
            $(metadataFields).each(function (i, item) {
                if ((item.FieldName == "CounterpartyName") || (item.FieldName == "CounterpartyType") || (item.FieldName == "Status")) {
                    if (item.FieldName == "CounterpartyType") {
                        vCounterpartyFields.push(item.FieldName);
                    }
                }
                else {
                    vCounterpartyFields.push(item.FieldName);
                    if (item.ShowInCreateForm == "true") {
                        var vControls = "";
                        var vDate = "";
                        var vNumber = "";
                        var vEmail = "";
                        var vMultiDDL = "";
                        var vUser = "";
                        var vUserList = "";
                        if (item.Required == "true") {
                            vControls += '<tr class="removableCounterpartyField CP_Det"><td class="f_head"><b>' + item.FieldDisplayName + '</b><small class="required">*</small>';
                        } else {
                            vControls += '<tr class="removableCounterpartyField CP_Det"><td class="f_head"><b>' + item.FieldDisplayName + '</b>';
                        }
                        if (item.FieldHelp == "true") {
                            vControls += '<span class="p-text help"> <img src="../Content/Images/input-help.png" title="' + item.HelpText + '"></span>'
                        }
                        vControls += '</td><td class="labelright">';

                        if (item.FieldType == "Single Line Text") {
                            if (item.FieldName == "Country") {
                                if (item.Required == "true") {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement f_inpt width90'>";

                                } else {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width90'>";
                                }
                                vControls += "<option value='0'>--Select--</option>";
                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/countrynames',
                                    type: 'GET',
                                    dataType: 'json',
                                    'Content-Type': 'application/json',
                                    cache: false,
                                    async: false,
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    success: function (data) {
                                        $(data).each(function (i, item) {
                                            vControls += '<option value="' + item + '">' + item + '</option>';
                                        });
                                    },
                                    error:
                                        function (data) {

                                        }
                                });

                                vControls += '</select>';
                                vControls += '<label>' + item.Description + '</label>';
                            } else {
                                if (item.Required == "true") {
                                    vControls += "<input type='text' id=" + item.FieldName + " maxlength='100' name=" + item.FieldName + " class='validelement f_inpt width90'>";
                                } else {
                                    vControls += "<input type='text' id=" + item.FieldName + " maxlength='100' name=" + item.FieldName + "  class='f_inpt width90'>";
                                }
                                vControls += '<label>' + item.Description + '</label>';
                            }
                            vControls += '</td></tr>';
                        }
                        else if (item.FieldType == "Multi Line Text") {
                            if (item.Required == "true") {
                                vControls += "<textarea name=" + item.FieldName + " maxlength='500' id=" + item.FieldName + " title='" + item.FieldDisplayName + "' cols='40' rows='5' class=' validelement height70 f_inpt width90'></textarea>";
                            } else {
                                vControls += "<textarea name=" + item.FieldName + " maxlength='500' id=" + item.FieldName + " title='" + item.FieldDisplayName + "' cols='40' rows='5' class='f_inpt height70 width90'></textarea>";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</td></tr>';
                        }
                        else if (item.FieldType == "Hyperlink") {
                            //manoj
                            //for Hyperlink
                            var Hyperlinkvalue = item.DefaultURL;
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=CP" + item.FieldName + " maxlength='2083' name=" + item.FieldName + " placeholder='http://www.' value = '" + Hyperlinkvalue + "' class='validelement validwebsite'>";
                            } else {
                                vControls += "<input type='text' id=CP" + item.FieldName + " maxlength='2083' name=" + item.FieldName + " placeholder='http://www.' value = '" + Hyperlinkvalue + "' class='validwebsite'>";
                            }
                            vControls += '<a href="javascript:void(0)" class="linkText" title="' + item.FieldDisplayName + '" onclick="navigateurl(\'CP' + item.FieldName + '\')"> Navigate</a>';
                            vControls += '</div></li>';
                            //for Hyperlink
                            //manoj
                        }
                        else if (item.FieldType == "Date") {

                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement validdate fielddatecontrol f_inpt" + item.FieldName + "'/>";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + "  title='" + item.FieldDisplayName + "' class='validdate fielddatecontrol f_inpt" + item.FieldName + "'/>";
                            }

                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</td></tr>';

                            vDate = item.FieldName;
                        }
                        else if (item.FieldType == "Choice") {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='validelement f_inpt'>";

                            } else {
                                vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt'>";
                            }
                            vControls += "<option value='0'>--Select--</option>";
                            var myArray = [];
                            myArray = item.ChoiceValues.split("\n")
                            var myArraylength = myArray.length;

                            for (var i = 0; i < myArraylength; i = i + 1) {
                                do {
                                    myArray[i] = myArray[i].replace("&amp;", "&");
                                } while (myArray[i].indexOf("&amp;") > -1)
                                vControls += "<option value='" + myArray[i] + "'>" + myArray[i] + "</option>";
                            }

                            vControls += '</select>';
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</td></tr>';
                        } else if (item.FieldType == "Lookup") {
                            if (item.FieldName == "RelatedCounterparties") {
                                if (item.Required == "true") {
                                    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement f_inpt width90' readonly='readonly' type='text' />";
                                } else {
                                    vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' readonly='readonly' class='f_inpt width90' type='text' />";
                                }
                                vControls += '<label>' + item.Description + '</label>';
                                vControls += "<a href='javascript:void(0)' class='linkText' id='" + item.FieldDisplayName + "' title='" + item.FieldName + "' onclick='ViewCounterpartyRelated(this)'> Browse</a>";
                                vControls += '</td></tr>';
                            } else {
                                if (item.Required == "true") {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement f_inpt width90'>";
                                } else {
                                    vControls += "<select id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='f_inpt width90'>";
                                }
                                vControls += "<option value='0'>--Select--</option>";

                                $.ajax({
                                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                    type: 'GET',
                                    dataType: 'json',
                                    "Content-Type": "application/json",
                                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                    cache: false,
                                    success: function (data) {
                                        var datalength1 = data.LookupFields.split(';');
                                        datalength1 = datalength1.sort();
                                        datalength1 = sortArrOfObjectsByParam(datalength1);
                                        var datalength = datalength1.length;
                                        for (var i = 0; i < datalength; i++) {
                                            var itemname = datalength1[i];
                                            $("#" + item.FieldName).append("<option value='" + itemname + "'>" + itemname + "</option>")
                                        }
                                    }
                                });
                                vControls += '<label>' + item.Description + '</label>';
                                vControls += '</td></tr>';
                            }
                        }
                        else if (item.FieldType.indexOf("Dropdown") > -1 || item.FieldType.indexOf("Multi Select") > -1) {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='width90 f_inpt chosenmulti validuser' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            } else {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='width90 f_inpt chosenmulti' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            }
                            if (item.FieldType.indexOf("Dropdown") > -1) {
                                var vMultiDDL1 = "";
                                if (vMultiDDL1 == '') {
                                    var myArray = [];
                                    myArray = item.ChoiceValues.split("\n")
                                    var myArraylength = myArray.length;
                                    for (var i = 0; i < myArraylength; i = i + 1) {
                                        vMultiDDL1 += "<option value='" + myArray[i] + "'>" + myArray[i] + "</option>";
                                    }
                                }
                                vControls += vMultiDDL1;
                            } else {
                                var vMultiDDL1 = "";
                                if (vMultiDDL1 == '') {
                                    $.ajax({
                                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/customlookupvaluedetails?lookupname=' + item.ChoiceValues,
                                        type: 'GET',
                                        dataType: 'json',
                                        "Content-Type": "application/json",
                                        headers: { 'eContracts-ApiKey': localStorage.APIKey },
                                        cache: false,
                                        async: false,
                                        success: function (data) {
                                            var datalength1 = data.LookupFields.split(';');
                                            datalength1 = datalength1.sort();
                                            datalength1 = sortArrOfObjectsByParam(datalength1);
                                            var datalength = datalength1.length;
                                            for (var i = 0; i < datalength; i++) {
                                                var itemname = datalength1[i];
                                                vMultiDDL1 += "<option value='" + itemname + "'>" + itemname + "</option>";
                                            }
                                        }
                                    });
                                }
                                vControls += vMultiDDL1;
                            }

                            vControls += '</select>';
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</td></tr>';
                            vMultiDDL = item.FieldName;
                        }
                        else if (item.FieldType == "Number") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement width40 form_input' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='width40 form_input' />";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</td></tr>';
                            vNumber = item.FieldName;
                        }
                        else if (item.FieldType == "Yes/No") {

                            vControls += "	<div style='width: auto; margin-right: 15px;'><input style='float: left; width: auto;' type='radio' class='f_inpt' name=" + item.FieldName + " value='Yes'><span style='float: left; margin: 7px 0px 0px 5px;'>Yes </span></div>";
                            vControls += "	<div style='width: auto;'><input style='float: left; width: auto;' type='radio' name=" + item.FieldName + " class='f_inpt' checked value='No'><span style='float: left; margin: 7px 0px 0px 5px;'>No </span></div>";

                            vControls += '<label style="width:auto;margin:7px 0px 0px 5px;" class="col12 p-text text-left help">' + item.Description + '</label>';
                            vControls += '</td></tr>';
                        } else if (item.FieldType == "Email") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validemail width90 validelement f_inpt' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validemail width90 f_inpt' />";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += '</td></tr>';
                        } else if (item.FieldType.indexOf("Browse") > -1) {
                            if (item.Required == "true") {
                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement width90 f_inpt' readonly='readonly' type='text' />";
                            } else {
                                vControls += "<input id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' readonly='readonly' type='text' class='f_inpt width90'/>";
                            }
                            vControls += '<label>' + item.Description + '</label>';
                            vControls += "<a href='javascript:void(0)' class='linkText' id='" + item.FieldDisplayName + "' title='" + item.FieldName + "' onclick='ViewGenericCounterparty(this)'> Browse</a>";
                            vControls += '</td></tr>';
                        } else if (item.FieldType == "File Upload") {
                            if (item.Required == "true") {
                                vControls += "<input type='file' id=" + item.FieldName + " name='docAttachment' title='" + item.FieldDisplayName + "' class='form-contro  validelement browse-file-doc' onchange='javascript:changeinupload(this);' />";
                            } else {
                                vControls += "<input type='file' id=" + item.FieldName + " name='docAttachment' title='" + item.FieldDisplayName + "' class='form-contro browse-file-doc' onchange='javascript:changeinupload(this);' />";
                            }
                            vControls += '<label">' + item.Description + '</label>';
                            vControls += '</td></tr>';
                        } else if (item.FieldType == "Currency" || item.FieldType == "Value / Financials") {
                            if (item.Required == "true") {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "' class='validelement f_inpt' />";
                            } else {
                                vControls += "<input type='text' id=" + item.FieldName + " name=" + item.FieldName + " title='" + item.FieldDisplayName + "'  class='f_inpt'/>";
                            }
                            vControls += '<label">' + item.Description + '</label>';
                            vControls += '</td></tr>';
                        } else if (item.FieldType == "User") {
                            if (item.Required == "true") {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='form-contro f_inpt width90 chosenmulti validuser' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            } else {
                                vControls += "<select id=" + item.FieldName + " multiple='multiple' class='form-contro f_inpt width90 chosenmulti' name=" + item.FieldName + " title='" + item.FieldDisplayName + "' data-placeholder='--Select--'>"
                            }

                            if (vUserList == "")
                            { vUserList = GetUserList(); }
                            vControls += vUserList;
                            vControls += '</select>';
                            vControls += '<label>' + item.Description + '</label>';
                            vUser = item.FieldName;
                            vControls += '</td></tr>';
                        }

                        $("#counterpartyItemsadd").append(vControls);
                        if (vDate != "") {

                            if (localStorage.AppDateFormat == null || localStorage.AppDateFormat == "" || localStorage.AppDateFormat == 'undefined') {
                                $("#" + vDate + "").datepicker({
                                    changeMonth: true,
                                    changeYear: true
                                });
                            }
                            else {
                                var dateformate = localStorage.AppDateFormat.toLowerCase().slice(0, -2);

                                $("#" + vDate + "").datepicker({
                                    changeMonth: true,
                                    changeYear: true,
                                    dateFormat: dateformate
                                });

                            }
                            vDate = "";
                        }
                        if (vNumber != "") {
                            allowOnlyNumberInInputBox(vNumber);
                            vNumber == "";
                        }

                        if (vMultiDDL != "") {
                            $("#" + vMultiDDL + "").chosen().trigger("chosen:updated");
                            $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                $('.result-selected').css('display', 'none');
                            });
                            vMultiDDL = "";
                        }

                        if (vUser != "") {
                            $("#" + vUser + "").chosen().trigger("chosen:updated");
                            $('.chosenmulti').on('chosen:showing_dropdown', function (evt, params) {
                                $('.result-selected').css('display', 'none');
                            });
                            if (vUser == "ContractManagers") {
                                if (localStorage.UserName != "") {
                                    GetValuesAndAutoPopulate("ContractManagers", localStorage.UserName);
                                }
                            }
                            vUser = "";
                        }
                    }
                }
            });

            $(".validelement").each(function (index, element) {
                $(element).removeClass("error");
                $("#errormsg_" + element.id).remove();
            });
            $("#addEditCounterparty").dialog("option", "title", "New Counterparty");
            $("#addEditCounterparty").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error: function (metadataFields) {
            vCounterpartyFields = [];
            $("#loadingPage").fadeOut();
        }

    });
}

//manoj
//Add New Folder in JQTree
function addnewnode() {
    var $tree = $('#treeviewFolderMoveOption');
    var nodeselected = $tree.tree('getSelectedNode');
    if (nodeselected == false) {
        nodeselected = $tree.tree('getTree');
        var parent_node = $tree.tree('getNodeById', nodeselected.children[0].id);
        $tree.tree(
         'appendNode',
         {
             name: 'New folder',
             id: nodeselected.children[0].id + '/New folder'
         },
         parent_node

     );
        var nodeexpand = $tree.tree('getNodeById', nodeselected.children[0].id);
        $tree.tree('openNode', nodeexpand);
        var nodeselect = $tree.tree('getNodeById', nodeselected.children[0].id + '/New folder');
        $tree.tree('selectNode', nodeselect);
        $("#hdnnewfolderurl").val(nodeselected.children[0].id + '/New folder');

    } else {
        var parent_node = $tree.tree('getNodeById', nodeselected.id);
        $tree.tree(
         'appendNode',
         {
             name: 'New folder',
             id: nodeselected.id + '/New folder'
         },
         parent_node
     );
        var nodeexpand = $tree.tree('getNodeById', nodeselected.id);
        $tree.tree('openNode', nodeexpand);
        var nodeselect = $tree.tree('getNodeById', nodeselected.id + '/New folder');
        $tree.tree('selectNode', nodeselect);
        $("#hdnnewfolderurl").val(nodeselected.id + '/New folder');
    }
    $("#hdnnewfoldercreatedfrom").val("jqtree");
    $("#txtnewfoldervalue").removeClass('error');
    $("#errormsg_txtnewfoldervalue").remove();
    $("#dvfoldercreation").dialog("option", "title", "Create Folder");
    $("#dvfoldercreation").dialog("open");
}

//Create New Folder in JQTree with user given name
function createnewfoldermove() {
    if (requiredValidator('dvfoldercreationvalidate', false)) {
        if ($("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "new folder" && $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "amendments") {
            $("#loadingPage").fadeIn();
            if ($("#hdnnewfoldercreatedfrom").val() == "jqtree") {
                var $tree = $('#treeviewFolderMoveOption');
                var nodeselect = $tree.tree('getNodeById', $("#hdnnewfolderurl").val());
                var parent_node = nodeselect.parent;
                var folderexit = false;
                $(parent_node.children).each(function (i, childrendata) {
                    if (childrendata.name.toLowerCase() == $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim().toLowerCase() && folderexit == false) {
                        folderexit = true;
                    }
                });
                if (!folderexit) {
                    var headerid = $("#lblContractTitle").text();
                    headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                    var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                    finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
                    finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
                    finalurl += headerid + "/";
                    var nodetoupdate = $("#hdnnewfolderurl").val().replace('New folder', $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim());
                    var contractdocumenturl = ($("#hdnContractDocumentsUrl").text() != null && $("#hdnContractDocumentsUrl").text() != "") ? $("#hdnContractDocumentsUrl").text() : finalurl;
                    var contractdocumenturl = $("#hdnContractDocumentsUrlFixed").text();
                    if (contractdocumenturl != "") {
                        contractdocumenturl = contractdocumenturl.substring(1);
                        if (contractdocumenturl != "") {
                            contractdocumenturl = contractdocumenturl.trim();
                        } else {
                            contractdocumenturl = 'Contract Documents/';
                        }
                    } else {
                        contractdocumenturl = 'Contract Documents/';
                    }
                    var splturl = nodetoupdate.split(contractdocumenturl);
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?locationurl=' + encodeURIComponent(contractdocumenturl) + '&newfolder=' + splturl[1],
                        type: 'POST',
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, contractId: getParameterByName("ContractID") },
                        processData: false,
                        success: function (folder) {
                            if (folder == true) {
                                $tree = $('#treeviewFolderMoveOption');
                                nodeselect = $tree.tree('getNodeById', $("#hdnnewfolderurl").val());
                                $tree.tree(
                                    'updateNode',
                                    nodeselect,
                                    {
                                        name: $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim(),
                                        id: nodetoupdate
                                    }
                                );
                                $("#hdnnewfolderurl").val('');
                                $("#txtnewfoldervalue").val("");
                                $("#hdnnewfoldercreatedfrom").val("");
                                $("#dvfoldercreation").dialog("close");
                                $("#loadingPage").fadeOut();
                            } else {
                                var $tree = $('#treeviewFolderMoveOption');
                                var nodeselect = $tree.tree('getNodeById', $("#hdnnewfolderurl").val());
                                $('#treeviewFolderMoveOption').tree('removeNode', nodeselect);
                                $("#hdnnewfolderurl").val("");
                                $("#txtnewfoldervalue").val("");
                                $("#hdnnewfoldercreatedfrom").val("");
                                $("#dvfoldercreation").dialog("close");
                                $("#loadingPage").fadeOut();
                            }
                        },
                        error: function (document) {
                            var $tree = $('#treeviewFolderMoveOption');
                            var nodeselect = $tree.tree('getNodeById', $("#hdnnewfolderurl").val());
                            $('#treeviewFolderMoveOption').tree('removeNode', nodeselect);
                            $("#hdnnewfolderurl").val("");
                            $("#txtnewfoldervalue").val("");
                        }
                    });

                } else {
                    swal("", "Folder name <span style='font-weight:700'>" + $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim() + "</span> is already exist");
                    $("#loadingPage").fadeOut();
                }
            } else {
                var ul = document.getElementById("ulDocument");
                var folderexsist = false;
                var exitchecking = 0;
                var getpatentfolder = [];
                if (ul.childNodes.length > 0) {
                    $(ul.childNodes).each(function (i, childnodevalue) {
                        if (childnodevalue.childNodes.length > 0) {
                            var innertextvalue = $(childnodevalue).find("a").text();
                            if (innertextvalue.indexOf('.') == -1) {
                                if ($("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim().toLowerCase() == innertextvalue.toLowerCase() && exitchecking == 0) {

                                    folderexsist = true;
                                    exitchecking = 1;
                                }
                            }
                        }
                    });
                }
                if (!folderexsist) {
                    //var headerid = document.getElementById('lblContractTitle').innerHTML;
                    //headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
                    //var finalurl = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
                    //finalurl = (finalurl.charAt(0) != '/') ? '/' + finalurl : finalurl;
                    //finalurl = ((finalurl.substr(finalurl.length - 1)) != "/") ? finalurl + "/" : finalurl;
                    //finalurl += headerid + "/";
                    var nodetoupdate = $("#hdnnewfolderurl").val().replace('New folder', $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim());
                    var contractdocumenturl = "";
                    if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
                        contractdocumenturl = $('#showAll').text().replace(/ \/ /g, '/') + '/';
                    }
                    var finalurlstr = ($("#hdContAreaDocLibName").val().charAt(0) != '/') ? '/' + $("#hdContAreaDocLibName").val() : $("#hdContAreaDocLibName").val();
                    finalurlstr = ((finalurlstr.substr(finalurlstr.length - 1)) != "/") ? finalurlstr + "/" : finalurlstr;
                    finalurlstr = (contractdocumenturl != null && contractdocumenturl != "") ? finalurlstr + contractdocumenturl : finalurlstr
                    //if ($("#hdContAreaDocLibName").val() != "") {
                    //    contractdocumenturl = $("#hdContAreaDocLibName").val() + contractdocumenturl;
                    //} else {
                    //    contractdocumenturl = "Contract Documents/" + contractdocumenturl;
                    //}
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/folderstructurejqtree?locationurl=' + encodeURIComponent(finalurlstr) + '&newfolder=' + $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim(),
                        type: 'POST',
                        cache: false,
                        contentType: false,
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName, contractId: getParameterByName("ContractID") },
                        processData: false,
                        success: function (folder) {
                            $("#hdnnewfolderurl").val('');
                            //$("#txtnewfoldervalue").val("");
                            $("#hdnnewfoldercreatedfrom").val("");
                            $("#dvfoldercreation").dialog("close");
                            $("#loadingPage").fadeOut();
                            //manoj
                            if (documentview == null || documentview == "" || documentview == 'folder') {
                                if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
                                    var selectedfoldervalue = $('#showAll').find("a");
                                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                    var person = { id: idvalueselected, text: textvalueselected };
                                    showfolderdocuments(person);
                                } else {
                                    $("#hdnContractDocumentsUrl").text(finalurlstr + $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim() + '/');
                                    $("#hdnContractDocumentsUrlFixed").text($("#hdnContractDocumentsUrl").text());
                                    BindDocument(vContractID);
                                }
                            } else {
                                DisplayDocument(documentview);
                            }
                            $("#txtnewfoldervalue").val("");
                            //GetContractPendingAction(true, "BindPeoples");
                            $("#hdnFolderDocumentView").text('');
                            $("#hdnShowAllTextValue").html('');
                            PrvFolderselection = '';
                            //Bind primary and pined document based on new feature
                            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                CreateDocumentListPinView(vContractID);
                            }
                            //manoj
                        },
                        error: function (document) {
                            $("#hdnnewfolderurl").val('');
                            $("#txtnewfoldervalue").val("");
                            $("#hdnnewfoldercreatedfrom").val("");
                            $("#dvfoldercreation").dialog("close");
                            $("#loadingPage").fadeOut();
                            //manoj
                            if (documentview == null || documentview == "" || documentview == 'folder') {
                                if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
                                    var selectedfoldervalue = $('#showAll').find("a");
                                    var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
                                    var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
                                    var person = { id: idvalueselected.id, text: textvalueselected };
                                    showfolderdocuments(person);
                                } else {
                                    BindDocument(vContractID);
                                }
                            } else {
                                DisplayDocument(documentview);
                            }
                            //GetContractPendingAction(true, "BindPeoples");
                            $("#hdnFolderDocumentView").text('');
                            $("#hdnShowAllTextValue").html('');
                            PrvFolderselection = '';
                            //Bind primary and pined document based on new feature
                            if ($("#hdnnewdocumentfeature").text() == "Yes") {
                                CreateDocumentListPinView(vContractID);
                            }
                            //manoj
                        }
                    });
                } else {
                    swal("", "Folder name <span style='font-weight:700'>" + $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim() + "</span> already exists.");
                    $("#loadingPage").fadeOut();
                }
            }
        } else {
            swal("", "Folder name <span style='font-weight:700'>" + $("#txtnewfoldervalue").val().replace(/\s\s+/g, " ").trim() + "</span> already exists (or) Reserved.");
        }
    }
}

//Remove the selected folder(if user dosen't given name to that folder)
function removecreatedfolder() {
    var $tree = $('#treeviewFolderMoveOption');
    var nodeselect = $tree.tree('getNodeById', $("#hdnnewfolderurl").val());
    $('#treeviewFolderMoveOption').tree('removeNode', nodeselect);
    $("#hdnnewfolderurl").val("");
    $("#hdnnewfoldercreatedfrom").val("");
    $("#txtnewfoldervalue").val("");
}

//$('#btnaddnewsubfolder').click(function () {
//    //manoj
//    var selectedparentdocument = "";
//    var headerid = $("#lblContractTitle").text();
//    headerid = headerid.replace(/[\*\|\,\"\:\<\>\[\}\{\}\'\(\)\&\#\%\.\-\!]/g, '').replace(/\//g, '').replace(/\s\s+/g, " ").trim();
//    selectedparentdocument = ($('#hdContAreaDocLibName').val() != null && $('#hdContAreaDocLibName').val() != "") ? $('#hdContAreaDocLibName').val() : '/Contract Documents/';
//    selectedparentdocument = (selectedparentdocument.charAt(0) != '/') ? '/' + selectedparentdocument : selectedparentdocument;
//    selectedparentdocument = ((selectedparentdocument.substr(selectedparentdocument.length - 1)) != "/") ? selectedparentdocument + "/" : selectedparentdocument;
//    //if (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") {
//    selectedparentdocument = (typeof ($('#showAll').text()) != "undefined" && $('#showAll').text().replace(/ \/ /g, '/') != null && $('#showAll').text().replace(/ \/ /g, '/') != "") ? selectedparentdocument + $('#showAll').text().replace(/ \/ /g, '/') + '/' : selectedparentdocument + headerid + '/';
//    $("#hdnnewfolderurl").val(selectedparentdocument);
//    $("#hdnnewfoldercreatedfrom").val("detailspage");
//    $("#txtnewfoldervalue").removeClass('error');
//    $("#errormsg_txtnewfoldervalue").remove();
//    $("#dvfoldercreation").dialog("option", "title", "Create Folder");
//    $("#dvfoldercreation").dialog("open");
//});


//manoj
function TermsAndClauseDocument(objContractIDvalue) {
    $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
    $("#docversion").css("display", "none");
    $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + objContractIDvalue,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (filescount) {
            if (filescount == null) {
                $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
                $("#docversion").css("display", "none");
                $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
            } else {
                $("#ddlTemplateAndClauses").html('<option value="0">--Select--</option>');
                $(filescount).each(function (i, item) {
                    if (item != null) {
                        //if (item.CreationMode == "Template" && item.IsFolder != "True") {
                        //    $("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
                        //}
                        if (item.IsFolder != "True") {
                            $("#ddlTemplateAndClauses").append('<option value="' + item.RowKey + '">' + item.DocumentName + '</option>');
                        }
                    }
                });
            }
        },
        error:
            function (filescount) {
                $("#ddlTemplateAndClauses").html('<option value="-1">No Document Available</option>');
                $("#docversion").css("display", "none");
                $("#ulTermsClauseBody").html("<li Style='margin-top: 10px;'>Select available document.<li>");
            }
    });
}

function changeinuploadfiles(obj) {
    var id = obj.id;
    var filecontrol = document.getElementById(id);
    var txt = "";
    if ('files' in filecontrol) {
        if (filecontrol.files.length == 0) {
        } else {
            for (var i = 0; i < filecontrol.files.length; i++) {
                var acceptExtension = ['pdf', 'png', 'jpg', 'gif', 'bmp', 'doc', 'xls', 'ppt', 'docx', 'xlsx', 'txt', 'pptx', 'dotx', 'xps', 'rtf', 'odt', 'dotm', 'docm', 'msg', 'tif', 'tiff', 'csv','zip','ZIP'];
                var file = filecontrol.files[i];
                var ext = file.name.split('.').pop().toString();
                if (acceptExtension.indexOf(ext.trim().toLowerCase()) > -1) {
                    if ('size' in file) {
                        if (file.size > 0) {
                            var Filelengthcol = Math.round((file.size / 1048576));
                            if (Filelengthcol > (Math.round(parseInt(localStorage.MaxRequestLength) / 1000))) {
                                //swal("", "The maximum permissible size is " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB, Please upload a file which is less than " + Math.round(parseInt(localStorage.MaxRequestLength) / 1024) + " MB");
                                swal("", "File exceeds " + Math.round((parseInt(localStorage.MaxRequestLength) / 1000)) + "MB size limit.");
                                $("#" + id).replaceWith($("#" + id).val('').clone(true));
                            } else {
                                if (!isSpecialCharacterFileName(file.name.substr(0, file.name.lastIndexOf('.')))) {
                                    swal({
                                        title: '',
                                        //text: "File names can't contain the following characters /:*\\?\"<>|#%.",
                                        // For Brookfield allow dot in filename
                                        text: "File names can't contain the following characters /:*\\?\"<>|#%",
                                        // For Brookfield allow dot in filename
                                        type: 'warning',
                                        showCancelButton: false,
                                        confirmButtonText: 'OK',
                                        html: true
                                    },
                                    function (confirmed) {
                                        $("#" + id).replaceWith($("#" + id).val('').clone(true));
                                    });
                                } else if (!isContainsThreeAlphabets(file.name.substr(0, file.name.lastIndexOf('.')))) {
                                    swal({
                                        title: '',
                                        text: "File names should contain the minimum of 3 alphabets.",
                                        type: 'warning',
                                        showCancelButton: false,
                                        confirmButtonText: 'OK',
                                        html: true
                                    },
                                    function (confirmed) {
                                        $("#" + id).replaceWith($("#" + id).val('').clone(true));
                                    });
                                } else {
                                    var selecteddifffilename = [];
                                    $('input[type="file"]').each(function () {
                                        var thisid = this.id;
                                        var classnamevalue = (this.className.indexOf("HLeyckU8") > -1) ? true : false
                                        if (id != thisid && classnamevalue) {
                                            var filecontroltocheck = document.getElementById(thisid);
                                            if (filecontroltocheck.files.length > 0) {
                                                var filetocheck = filecontroltocheck.files[0];
                                                selecteddifffilename.push(filetocheck.name);
                                            }
                                        }
                                    });
                                    //manoj
                                    if (selecteddifffilename.indexOf(file.name) > -1) {
                                        swal("", "<span style='font-weight:700'>" + file.name + "</span> already selected.");
                                        $("#" + id).replaceWith($("#" + id).val('').clone(true));
                                    }
                                    //manoj
                                }
                            }
                        } else {
                            swal("", "File cannot be empty.");
                            $("#" + id).replaceWith($("#" + id).val('').clone(true));
                        }
                    }
                }
                else {
                    swal({
                        title: '',
                        text: "Only file type pdf, png, jpg, gif, bmp, doc, xls, ppt, docx, xlsx, txt, pptx, dotx, xps, rtf, odt, dotm, docm, msg are allowed.",
                        type: 'warning',
                        showCancelButton: false,
                        confirmButtonText: 'OK',
                        html: true
                    },
                               function (confirmed) {
                                   $("#" + id).replaceWith($("#" + id).val('').clone(true));
                               });
                }
            }
        }
    }
}
//manoj

//sridhar
function change_date(txtBox, lblDate) {
    var lblSelected = document.getElementById(lblDate);
    if (typeof ($(txtBox).val()) != "undefined" && $(txtBox).val() != null && $(txtBox).val() != "") {
        var noofdays = parseInt($(txtBox).val());
        $(lblSelected).empty();
        $(lblSelected).html(moment(new Date()).add(noofdays, "days").format('MM/DD/YYYY'));
    } else {
        $(lblSelected).empty();
    }
}

function autoheight(a) {
    if (!$(a).prop('scrollTop')) {
        do {
            var b = $(a).prop('scrollHeight');
            var h = $(a).height();
            $(a).height(h - 5);
        }
        while (b && (b != $(a).prop('scrollHeight')));
    };
    $(a).height($(a).prop('scrollHeight'));
}

//$("#txtContractTitle").on("input", function (e) {
//    autoheight(this);
//});
//$("#txtContractDescription").on("input", function (e) {
//    autoheight(this);
//});

//manoj
function DisplayDocument(objvalue) {
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    selectedamnddoc = false;
    selectedamnddocname = [];
    $("#documentMultiActions").css('display', 'none');
    $("#hdnShowAllTextValue").html('');
    $("#hdnFolderDocumentView").text('');
    PrvFolderselection = '';
    $(".tablinks").removeClass('active');
    documentview = objvalue;
    if (objvalue == 'folder' || documentview == "" || documentview == null) {
        $("#listfolderdocumentview").addClass("active");
        //$("#btnaddnewsubfolder").css('display', '');
        if ((documentview == 'folder' || documentview == "" || documentview == null) && ($("#hdnPermission").val() == 'Manage' || $("#hdnPermission").val() == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $("#btnaddnewsubfolder").css('display', '');
        } else {
            $("#btnaddnewsubfolder").css('display', 'none');
        }
        //ApplyPermissionToMenu($("#hdnPermission").val());
        $("#showAll").empty();
        $("#showAll").css('display', '');
        BindDocument(vContractID);
    } else {
        $("#listdocumentview").addClass("active");
        $("#btnaddnewsubfolder").css('display', 'none');
        if ($("#showAll").text().indexOf("/") >= 0) {
            bindfolderupload($("#showAll").find("a:first")[0])
        } else {
            $("#showAll").css('display', 'none');
        }
        $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Please wait...');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + vContractID,
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (documentcollection) {
                var ParentFolderDatadata = $.grep(documentcollection, function (nparent, iparent) {
                    return (nparent.ParentFolderID == "" || nparent.ParentFolderID == null);
                });
                if (ParentFolderDatadata.length > 0) {
                    contractparentfolderid = ParentFolderDatadata.RowKey;
                } else {
                    contractparentfolderid = "";
                }
                var data = $.grep(documentcollection, function (n, i) {
                    return (n.IsFolder != "Yes");
                });
                if (data.length == 0) {
                    contractparentfolderid = "";
                    $("#lblDocumentsCount").text('0');
                    $("#documentsort").css('display', 'none');
                    $("#ulDocument").html('No items found.');
                } else {
                    $('#ulDocument').empty();
                    CreateDocumentListNew(data);
                    if ((documentview == 'folder' || documentview == "" || documentview == null) && ($("#hdnPermission").val() == 'Manage' || $("#hdnPermission").val() == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                        $("#btnaddnewsubfolder").css('display', '');
                    } else {
                        $("#btnaddnewsubfolder").css('display', 'none');
                    }
                }
            },
            error:
                function (data) {
                    $("#lblDocumentsCount").text('0');
                    $("#ulDocument").html('No items found.');
                    $("#documentsort").css('display', 'none');
                },
            complete: function () {
            }
        });
    }
}

function bindfolderupload(parentfolderid) {
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    selectedamnddoc = false;
    selectedamnddocname = [];
    $("#documentMultiActions").css('display', 'none');
    var Istagexist = false;
    $("#showAll").find("a").each(function (e) {
        var tid = this.id;
        if (tid == parentfolderid.id) {
            Istagexist = true;
        }
    });
    if (Istagexist) {
        var splitsection = Folderselection.split('~8Y92YagH');
        $("#showAll").empty();
        for (spl = 0; spl < splitsection.length; spl++) {
            if (splitsection[spl] != "") {
                if (spl == 0) {
                    $("#showAll").append(splitsection[spl]);
                    Folderselection = splitsection[spl];
                }
                if (splitsection[spl].indexOf(parentfolderid.id) > -1) {
                    if (spl != 0) {
                        $("#showAll").append('/' + splitsection[spl]);
                        Folderselection += "~8Y92YagH" + splitsection[spl];
                    }
                    break;
                }
                else {
                    if (spl != 0) {
                        $("#showAll").append('/' + splitsection[spl]);
                        Folderselection += "~8Y92YagH" + splitsection[spl];
                    }
                }
            }
        }
    }


    if ($("#showAll").text().indexOf("/") >= 0) {
        var texttille = parentfolderid.id
        Istagexist = false;
        $("#showAll").find("a").each(function (e) {
            var tid = this.id;
            if (tid == parentfolderid.id) {
                Istagexist = true;
            }
        });
        if (Istagexist) {
            $("#showAll").empty();
            var splitsection = Folderselection.split('~8Y92YagH');
            for (spl = 0; spl < splitsection.length; spl++) {
                if (splitsection[spl] != "") {
                    if (splitsection[spl].indexOf(texttille) > -1) {
                        if (spl == 0) {
                            $("#showAll").append(splitsection[spl]);
                            Folderselection = splitsection[spl];
                        }
                        else {
                            $("#showAll").append('/' + splitsection[spl]);
                            Folderselection += "~8Y92YagH" + splitsection[spl];
                        }
                    }
                    else {
                        if (spl == 0) {
                            $("#showAll").empty();
                            $("#showAll").append(splitsection[spl]);
                            Folderselection = splitsection[spl];
                        }
                        else {
                            $("#showAll").append('/' + splitsection[spl]);
                            Folderselection += "~8Y92YagH" + splitsection[spl];
                        }
                    }
                }
            }
        }
        else {
            var Isexist = false;
            var id;
            $("#showAll").find("a").each(function (e) {
                id = this.id;
                if (id == parentfolderid.id) {
                    Isexist = true;
                }
            });
            if (!Isexist) {
                $("#showAll").append(' / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
                Folderselection += ' ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';
            }
            $("#showAll").css('display', 'none');
        }
    } else {
        $("#showAll").empty();
        if (parentdocid == parentfolderid.id) {
            $("#showAll").append('<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>');
            Folderselection = '<img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a>';
        } else {
            $("#showAll").append('<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a> / <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>');
            Folderselection = '<img src="../Content/Images/icon/folder.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentdocid + ' onclick="javascript:showfolderdocuments(this);">' + parentdocname + '</a> ~8Y92YagH <img src="../Content/Images/icon/folder_open.png" style="margin-right: 5px;"><a href="javascript:void(0)" id=' + parentfolderid.id + ' onclick="javascript:showfolderdocuments(this);">' + parentfolderid.text + '</a>';
        }

        $("#showAll").css('display', 'none');
    }
}


function orderinglist(objvalue, objcountvalue, actionvalue) {
    var DefaultDocumentList = $("#hdnnewdocumentfeature").text() == "Yes" && objvalue == "ulDocument" ? 20 : 10;
    var ul = document.getElementById(objvalue)
    var arr = $.makeArray(ul.children);
    if ((documentview == null || documentview == "" || documentview == "folder") && objvalue == "ulDocument") {
        var arr1 = [];
        var arr2 = [];
        if (actionvalue == "asc") {
            $.each(arr, function () {
                if ($(this).find('b').text() == "Folder") {
                    arr1.push(this);
                } else {
                    arr2.push(this);
                }
            })
            arr1.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return -1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return 1;
                return 0;
            });
            arr2.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return -1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return 1;
                return 0;
            });
            arr = arr1;
            $.each(arr2, function () {
                arr.push(this);
            });
        } else {
            $.each(arr, function () {
                if ($(this).find('b').text() == "Folder") {
                    arr1.push(this);
                } else {
                    arr2.push(this);
                }
            })
            arr1.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return 1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return -1;
                return 0;
            });
            arr2.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return 1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return -1;
                return 0;
            });
            arr = arr1;
            $.each(arr2, function () {
                arr.push(this);
            });
        }
    } else {
        if (actionvalue == "asc") {
            arr.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return -1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return 1;
                return 0;
            });
        } else {
            arr.sort(function (a, b) {
                if (($(a).find('a').text().toLowerCase()) < ($(b).find('a').text().toLowerCase())) return 1;
                if (($(a).find('a').text().toLowerCase()) > ($(b).find('a').text().toLowerCase())) return -1;
                return 0;
            });
        }
    }

    $("#" + objvalue).empty();
    var appendcount = 1;
    var addclassvalue = (objvalue == "ulDocument") ? "ShowMoreDocuments" : "ShowMorePinDocuments";
    var oppclassvalue = (addclassvalue == 'ShowMoreDocuments') ? 'ShowLessDocuments' : 'ShowLessPinDocuments';
    $.each(arr, function () {
        $(this).removeClass("ShowMoreDocuments");
        $(this).removeClass("ShowLessDocuments");
        $(this).removeClass("ShowMorePinDocuments");
        $(this).removeClass("ShowLessPinDocuments");
        $(this).css("display", "")
        if (appendcount >= DefaultDocumentList + 1) {
            $(this).addClass(addclassvalue);
            $(this).css("display", "none")
        }
        $("#" + objvalue).append(this);
        appendcount++;
    });
    if (arr.length > DefaultDocumentList) {
        var objvaluetobind = addclassvalue == "ShowMoreDocuments" ? "dvDocument" : "dvPinDocument";
        $("#" + objvaluetobind).html('<a id="' + addclassvalue + '" href="javascript:void(0);" class="pad-all close1" onclick="' + addclassvalue + '()">More Document(s) </a>' +
                                '<a id="' + oppclassvalue + '" href="javascript:void(0);" class="pad-all close1" onclick="' + oppclassvalue + '()" style="display:none;">Show less</a>');
    } else {
        $('.' + addclassvalue).css("display", "none");
        $('#' + addclassvalue).css("display", "none");
        $('#' + oppclassvalue).css("display", "none");
    }

    $("#" + objcountvalue).text(arr.length);
    if (!$("#" + objcountvalue).text().trim()) {
        $("#" + objvalue).empty();
        $("#" + objvalue).append('No items found.');
    }
    if (DocVersion == "No") {
        $('li.history').hide();
    }
    var vFinalSignature = "dropdownMenuFinal";
    var vMarkFinalSignature = "dropdownMenuMarkFinal";
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "1" && n.Status == "ON");
    });
    if (vAccFeat.length > 0) {
        vFinalSignature = "dropdownMenuFinalSignature";
        vMarkFinalSignature = "dropdownMenuMarkFinalSignature";
        $("#dropdownMenuAmendment .signature").show();
        $("#dropdownMenuAmendmentFinal .signature").show();
    }
    else {
        $("#dropdownMenuAmendment .signature").hide();
        $("#dropdownMenuAmendmentFinal .signature").hide();
    }
    $(".openmenuDocument").contextMenu({ menu: vFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuDocumentFinal").contextMenu({ menu: vMarkFinalSignature, leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocument").contextMenu({ menu: "dropdownMenuAmendment", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentFinal").contextMenu({ menu: "dropdownMenuAmendmentFinal", leftButton: true }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    //Un Pin Document
    $(".openmenuDocumentUnPin").contextMenu({ menu: vFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuDocumentFinalUnPin").contextMenu({ menu: vMarkFinalSignature + "UnPin", leftButton: true }, function (action, el, pos) { contextMenuDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentUnPin").contextMenu({ menu: "dropdownMenuAmendmentUnPin", leftButton: true }, function (action, el, pos) { contextMenuAmendmentDocument(action, el.parent("li"), pos); });
    $(".openmenuAmendmentDocumentFinalUnPin").contextMenu({ menu: "dropdownMenuAmendmentFinalUnPin", leftButton: true }, function (action, el, pos) {
        contextMenuAmendmentDocument(action, el.parent("li"), pos);
    });
    $(".openmenuFolder").contextMenu({ menu: 'myMenuFolder', leftButton: true }, function (action, el, pos) { contextMenuWorkFolder(action, el.parent("li"), pos); });
    //manoj
    $(".hideItem").click(function () {
        if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $(".unpindocument").hide();
            $(".pindocument").hide();
            $(".primary").show();
        }
    })
    $(".showitem").click(function () {
        if ((contractItem.Permission == 'Manage' || contractItem.Permission == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
            $(".unpindocument").show();
            $(".pindocument").show();
            $(".primary").show();
        }
    })
    $(".primarydocument").click(function () {
        $(".primary").hide();
    })
    //manoj
    $("#contractLogs").empty();
}

function SearchDocumentKeyword() {
    multipleChecksDocumentID = "";
    multipleChecksDocumentName = "";
    multipleChecksDocumentReview = "";
    selectedamnddoc = false;
    selectedamnddocname = [];
    $("#documentMultiActions").css('display', 'none');
    if (requiredValidator("dvdocumentkeyword", true)) {
        if (typeof ($('#hdnFolderDocumentView').text()) != "undefined" && $("#hdnFolderDocumentView").text() != null && $("#hdnFolderDocumentView").text() != "") {

        } else {
            $("#hdnShowAllTextValue").html($("#showAll")[0].innerHTML);
            PrvFolderselection = Folderselection;
            $(".tablinks").each(function (index, element) {
                if ($(element).hasClass("active")) {
                    $("#hdnFolderDocumentView").text($(element).attr('data-value'));
                }
            });
        }
        if (typeof ($('#hdnFolderDocumentView').text()) == "undefined" || $("#hdnFolderDocumentView").text() == null || $("#hdnFolderDocumentView").text() == "") {
            $("#hdnFolderDocumentView").text('folder');
        }
        $(".tablinks").removeClass('active');
        documentview = 'document';
        $("#listdocumentview").addClass("active");
        $("#btnaddnewsubfolder").css('display', 'none');
        if ($("#showAll").text().indexOf("/") >= 0) {
            bindfolderupload($("#showAll").find("a:first")[0])
        } else {
            $("#showAll").css('display', 'none');
        }
        $("#ulDocument").html('<img src="../Content/Images/icon/loading.gif"> Searching...');
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?contractid=' + vContractID + '&searchkeyword=' + encodeURIComponent($("#txtdocumentkeyword").val()),
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (documentcollection) {
                var data = $.grep(documentcollection, function (n, i) {
                    return (n.IsFolder != "Yes");
                });
                if (data.length == 0) {
                    $("#lblDocumentsCount").text('0');
                    $("#ulDocument").html('No items found.');
                    $("#documentsort").css('display', 'none');
                } else {
                    $('#ulDocument').empty();
                    CreateDocumentListNew(data);
                }
            },
            error:
                function (data) {
                    $("#lblDocumentsCount").text('0');
                    $("#ulDocument").html('No items found.');
                    $("#documentsort").css('display', 'none');
                    $('.ShowMoreDocuments').css("display", "none");
                    $('#ShowMoreDocuments').css("display", "none");
                    $('#ShowLessDocuments').css("display", "none");
                },
            complete: function () {
            }
        });
    }
}

function ClearDocumentKeyword() {
    if ($("#hdnFolderDocumentView").text() == "") {
        $("#txtdocumentkeyword").val('');
    } else {
        multipleChecksDocumentID = "";
        multipleChecksDocumentName = "";
        multipleChecksDocumentReview = "";
        selectedamnddoc = false;
        selectedamnddocname = [];
        $("#documentMultiActions").css('display', 'none');
        $("#txtdocumentkeyword").val('');
        $(".tablinks").removeClass('active');
        documentview = (typeof ($('#hdnFolderDocumentView').text()) != "undefined" && $('#hdnFolderDocumentView').text() != null && $('#hdnFolderDocumentView').text() != "") ? $('#hdnFolderDocumentView').text() : 'folder';
        if (documentview == 'document') {
            DisplayDocument('document');
        } else {
            $("#showAll").html($("#hdnShowAllTextValue")[0].innerHTML);
            Folderselection = PrvFolderselection;
            $("#showAll").css("display", "");
            $("#listfolderdocumentview").addClass("active");
            if ((documentview == 'folder' || documentview == "" || documentview == null) && ($("#hdnPermission").val() == 'Manage' || $("#hdnPermission").val() == 'Contribute') && (!(contractItem.Status == "Expired" || contractItem.Status == "Cancelled" || contractItem.Status == "Replaced" || contractItem.Status == "Archived"))) {
                $("#btnaddnewsubfolder").css('display', '');
            } else {
                $("#btnaddnewsubfolder").css('display', 'none');
            }
            //ApplyPermissionToMenu($("#hdnPermission").val());
            if ($("#showAll").text().indexOf("/") >= 0) {
                showfolderdocuments($("#showAll").find("a:last")[0])
            } else {
                BindDocument(vContractID);
            }
        }
        $("#hdnFolderDocumentView").text('');
        $("#hdnShowAllTextValue").html('');
        PrvFolderselection = '';
    }
}
//manoj
//CounterParty Businessarea

var BAOwnersselecteditems = [];
function ViewOwnerofBusinessArea() {

    $('#txtBAOwnerofPath').val("");
    $('#txtBAOwnerof').val("");


    if ($("#txtOwnerofBusinessArea").val() != "" || $("#txtNewCpBusinessArea").val() != "") {
        //BAOwnersselecteditems = $("#txtOwnerofBusinessArea").val().split(';');
        var selecteditemslength = BAOwnersselecteditems.length;
        selectedBusinessAreaID11Temp = [];
        $(selectedBusinessAreaID11).each(function (i, item) {
            selectedBusinessAreaID11Temp.push(item);
        })


        $('#liSelectedBAOwners').html("");
        var arrRemovedIndexs = [];
        for (var i = 0; i < selecteditemslength; i++) {
            var re = new RegExp(" ", 'g');
            var str = BAOwnersselecteditems[i].trim().replace(re, '').trim();
            str = str.substring(str.lastIndexOf(">") + 1, str.length);
            if (selectedBusinessAreaID11.length >= i + 1) {
                if (thisBusinessAreaNameRowKey == selectedBusinessAreaID11[i][1])
                    $('#liSelectedBAOwners').append('<span id="BAF_' + str + '" style="font-size:11px;">' + BAOwnersselecteditems[i].trim().substring(BAOwnersselecteditems[i].trim().lastIndexOf(">") + 1, BAOwnersselecteditems[i].trim().length).trim() + '</span>');
                else
                    $('#liSelectedBAOwners').append('<span id="BAF_' + str + '" style="font-size:11px;">' + BAOwnersselecteditems[i].trim().substring(BAOwnersselecteditems[i].trim().lastIndexOf(">") + 1, BAOwnersselecteditems[i].trim().length).trim() + '<img src="/Content/Images/close-quick.png" id=' + selectedBusinessAreaID11[i][1] + ' onclick="javascript:liRemoveBAOwnersselecteditems(this,' + BAOwnersselecteditems.indexOf(BAOwnersselecteditems[i]) + ');" style="float:right" /></span>');
            }
            else {
                arrRemovedIndexs.push(BAOwnersselecteditems[i]);
            }
        }
        if (arrRemovedIndexs.length > 0) {
            $.each(arrRemovedIndexs, function (index, value) {
                var index = BAOwnersselecteditems.indexOf(value);
                BAOwnersselecteditems.splice(index, 1);
            });
        }
    }
    else {
        $('#liSelectedBAOwners').html("");
        BAOwnersselecteditems = [];
    }

    $("#browseBAOwners").dialog("option", "title", "Browse Business Area");
    $("#browseBAOwners").dialog("open");
}

var article11 = "";
var articleBusinessAreaCounterp = "";
var BusinessAreaAccessCounterp = [];
function BindBusinessAreaPicker11() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/entities',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            //if (localStorage.UserType.indexOf("Global Contract Owner") >= 0) {
            //    recursiveIteration11(data)
            //    $("#tbodyBusinessArea11").append(article11);
            //    if (article11 == "") {
            //        $("#tbodyBusinessArea11").append("<tr><td><p class='f_p-error'>No items found.</p></td></tr>");
            //    }
            //}
            //else {
            BindBusinessAreMenuCounterp(data);
            //}

            //$("#example-basic-11").treetable({ expandable: true, initialState: "expanded" });
        },
        error:
            function (data) {
            }
    });
}

function recursiveIteration11(object) {
    if (object.ChildrenData.length != 0) {

        for (var i = 0; i < object.ChildrenData.length; i++) {
            var item = object.ChildrenData[i];
            // if (item.RowKey != "GenBA" && item.RowKey != "GenCA") {
            var additional = "";

            if (item.ParentBusinessAreaID == 0) {
                additional = '<span>' + item.BusinessAreaName + '</span>'
                strContractAreaName11 = item.BusinessAreaName;
                strContractAreaName11Owner = item.Owner;
                article11 += '<tr data-tt-id="tre-' + item.RowKey + '" class="branch expanded">';
                article11 += '<td class="treeHead"><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaName11 + '</span><span id="ContractAreaAdmin" style="display:none;">' + strContractAreaName11Owner + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/globset.png" /><small>' + additional + '</small></td></tr>';
            } else {
                if (strContractAreaName11 == thisContractAreaNameC && item.BusinessAreaName == thisBusinessAreaNameC) {
                    thisBusinessAreaNameRowKey = item.RowKey;
                    thisContractAreaNameRowKey = strContractAreabusinesarearowkeyCounterp;
                }
                additional = '<span style="color:#3487ce; cursor:pointer;" onclick="javascript:treeviewclick11(this)">' + item.BusinessAreaName + '</span>'
                article11 += '<tr data-tt-id="tre-' + item.RowKey + '" data-tt-parent-id="tre-' + item.ParentBusinessAreaID + '" class="branch collapsed" style="display: table-row;">';
                article11 += '<td><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaName11 + '</span><span id="ContractAreaAdmin" style="display:none;">' + strContractAreaName11Owner + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/gen.png" /><small>' + additional + '</small></td></tr>';
            }
        }

        recursiveIteration11(object.ChildrenData[i])
        // }
    }
}

$('input[type=radio][name=IsGlobal]').change(function () {
    if (this.value == 'Yes') {
        $("#trcp-RgBusi").hide();
        $("#txtOwnerofBusinessArea").removeClass("validelement");

        selectedBusinessAreaID11 = [];
        selectedBusinessAreaID11Temp = [];
        BAOwnersselecteditems = [];
    }
    else if (this.value == 'No') {
        $("#trcp-RgBusi").show();
        if (thisBusinessAreaNameC != "")
            addDefaultBusinessareaCounterparty();
        $("#txtOwnerofBusinessArea").addClass("validelement");
    }
    //manoj
    $("#RelatedCounterparties").val('');
    PrvRelatedCounterparities = [];
    arrRelatedCounterparities = [];
    curRelatedCounterparities = [];
    //manoj
});
function addDefaultBusinessareaCounterparty() {


    $('#txtBAOwnerofPath').val(thisContractAreaNameRowKey);
    $('#txtBAOwnerof').val(thisBusinessAreaNameC);

    // Find and remove item from an array
    var i = BAOwnersselecteditems.indexOf(thisBusinessAreaPath);
    if (i != -1) {

    } else {
        BAOwnersselecteditems.push(thisBusinessAreaPath);
        $('#liSelectedBAOwners').append('<span style="font-size:11px;">' + thisBusinessAreaNameC + '</span>');
    }
    $('#txtBAOwnerof').val(BAOwnersselecteditems);

    var found = $.grep(selectedBusinessAreaID11, function (value) {
        return value[1] == thisBusinessAreaNameRowKey;
    });

    //  var i = selectedBusinessAreaID11.indexOf(rowKey);
    if (found != null && typeof (found) != "undefined" && found.length != 0) {

    } else {
        var rowK = jQuery.grep(BusinessAreaPathRowKey, function (a) {
            return a[1] === thisBusinessAreaNameRowKey;
        });
        if (rowK != null && typeof (rowK) != "undefined" && rowK.length != 0) {
            selectedBusinessAreaID11 = $.grep(selectedBusinessAreaID11, function (value) {
                return value[1] != rowK[0][1];
            });
            selectedBusinessAreaID11.push([rowK[0][0], rowK[0][1]]);
            selectedBusinessAreaID11Temp.push([rowK[0][0], rowK[0][1]]);
        }

    }
    var strValue = "";
    $(selectedBusinessAreaID11).each(function (i, item) {
        strValue = item[0].trim().substring(item[0].trim().lastIndexOf(">") + 1, item[0].trim().length).trim() + ";";
    });
    var lastChar = strValue.slice(-1);
    if (lastChar == ";") {
        strValue = strValue.slice(0, -1);
    }
    $("#txtOwnerofBusinessArea").val(strValue);
    $("#txtNewCpBusinessArea").val(strValue);
}
var selectedBusinessAreaID11 = [];
var selectedBusinessAreaID11Temp = [];
var DeletedBusinessAreaID = [];
function treeviewclick11(obj) {
    var strBusinessAreaName = obj.textContent;
    var rowKey = obj.parentNode.parentNode.childNodes[2].textContent;
    var parentBusinessAreaID = obj.parentNode.parentNode.childNodes[1].textContent;
    var contractAreaName = obj.parentNode.parentNode.childNodes[3].textContent;
    var contractAreaNameOwner = obj.parentNode.parentNode.childNodes[4].textContent;


    $('#txtBAOwnerofPath').val(parentBusinessAreaID);
    $('#txtBAOwnerof').val(strBusinessAreaName);

    // Find and remove item from an array
    //var i = BAOwnersselecteditems.indexOf(strBusinessAreaName);
    //if (i != -1) {

    //} else {
    //    BAOwnersselecteditems.push(strBusinessAreaName);
    //    $('#liSelectedBAOwners').append('<span style="font-size:11px;">' + strBusinessAreaName + '<img src="/Content/Images/close-quick.png" id=' + rowKey + ' onclick="javascript:liRemoveBAOwnersselecteditems(this);" style="float:right" /></span>');
    //}
    //$('#txtBAOwnerof').val(BAOwnersselecteditems);

    var found = $.grep(selectedBusinessAreaID11Temp, function (value) {
        return value[1] == rowKey;
    });

    //  var i = selectedBusinessAreaID11.indexOf(rowKey);
    if (found != null && typeof (found) != "undefined" && found.length != 0) {

    } else {
        var rowK = jQuery.grep(BusinessAreaPathRowKey, function (a) {
            return a[1] === rowKey;
        });
        if (rowK != null && typeof (rowK) != "undefined" && rowK.length != 0) {
            selectedBusinessAreaID11Temp = $.grep(selectedBusinessAreaID11Temp, function (value) {
                return value[1] != rowK[0][1];
            });
            selectedBusinessAreaID11Temp.push([rowK[0][0], rowK[0][1]]);

            // Find and remove item from an array
            var i = BAOwnersselecteditems.indexOf(rowK[0][0]);
            if (i != -1) {

            } else {
                BAOwnersselecteditems.push(rowK[0][0]);
                $('#liSelectedBAOwners').append('<span style="font-size:11px;">' + strBusinessAreaName + '<img src="/Content/Images/close-quick.png" id=' + rowKey + ' onclick="javascript:liRemoveBAOwnersselecteditems(this);" style="float:right" /></span>');
            }
            $('#txtBAOwnerof').val(BAOwnersselecteditems);
        }

    }
}


function liRemoveBAOwnersselecteditems(obj) {

    var child = obj.parentNode;
    var rowK = jQuery.grep(BusinessAreaPathRowKey, function (a) {
        return a[1] === obj.id;
    });
    var i = BAOwnersselecteditems.indexOf(rowK[0][0]);
    if (i != -1) {
        BAOwnersselecteditems.splice(i, 1);
    }
    child.parentNode.removeChild(child);

    //remove id from array
    selectedBusinessAreaID11Temp = $.grep(selectedBusinessAreaID11Temp, function (value) {
        return value[1] != obj.id;
    });

}
function liRemoveBAOwnersselecteditems(obj, index) {

    var child = obj.parentNode;
    var rowK = jQuery.grep(BusinessAreaPathRowKey, function (a) {
        return a[1] === obj.id;
    });
    var innertextvale = child.textContent;
    index = BAOwnersselecteditems.indexOf(rowK[0][0]);
    child.parentNode.removeChild(child);
    if (index != -1) {
        BAOwnersselecteditems.splice(index, 1);
    }
    DeletedBusinessAreaID.push(obj.id);
    //remove id from array
    selectedBusinessAreaID11Temp = $.grep(selectedBusinessAreaID11Temp, function (value) {
        return value[1] != obj.id;
    });
}
function BindBusinessAreMenuCounterp(data) {
    if (typeof (BusinessAreaAccess) == "undefined" || BusinessAreaAccess == null || BusinessAreaAccess.length == 0) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/users/' + localStorage.UserID + '/businessareapermission',
            type: 'GET',
            dataType: 'json',
            'Content-Type': 'application/json',
            cache: true,
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            success: function (entity) {
                var BAreaAccess = entity.BusinessArea + ";" + entity.BusinessAreaContribute + ";" + entity.OwnerOfBusinessAreas;

                var newArray = BAreaAccess.split(';').filter(function (v) { return v !== '' }); // remove empty
                BusinessAreaAccessCounterp = newArray;

                /* Business Area Popup Start */

                recursiveIterationCounterp("", data)
                $("#tbodyBusinessArea11").append(articleBusinessAreaCounterp);
                if (articleBusinessAreaCounterp == "") {
                    $('#tbodyBusinessArea11').empty();
                    $("#tbodyBusinessArea11").append("<tr><td><p class='f_p-error'>No items found.</p></td></tr>");
                }
                articleBusinessAreaCounterp = "";
                $("#example-basic-11").treetable({ expandable: true, initialState: "expanded" }, true);


            },
            error:
                function (data) {
                }
        });

    }
    else {
        if (typeof (BusinessAreaAccess) == "object" && BusinessAreaAccess.length > 1) {
            BusinessAreaAccessCounterp = BusinessAreaAccess;
        }
        else
            BusinessAreaAccessCounterp.push(BusinessAreaAccess);


        recursiveIterationCounterp("", data)
        $("#tbodyBusinessArea11").append(articleBusinessAreaCounterp);
        if (articleBusinessAreaCounterp == "") {
            $('#tbodyBusinessArea11').empty();
            $("#tbodyBusinessArea11").append("<tr><td><p class='f_p-error'>No items found.</p></td></tr>");
        }
        articleBusinessAreaCounterp = "";
        $("#example-basic-11").treetable({ expandable: true, initialState: "expanded" }, true);

    }
}
var businessareaHeaderMenuCounterp = "";
var articleBusinessArea2Counterp = "";
var strContractAreaNameMenuCounterp = "";
var strContractAreaNameMenuOwnerCounterp = "";
var MyBusinessAreaCountCounterp = 0;
var strContractAreaAdminCounterp = "";
var strContractAreaNameCounterp = "";
var strContractAreabusinesarearowkeyCounterp = "";
var previousidCounterp = "";
var strContractAreaIDLayoutCounterp = '';
var strContractAreaName12Counterp = "";
var strContractAreaName12OwnerCounterp = "";
var previousidCounterp = "";
function recursiveIterationCounterp(path, object) {
    if (object.ChildrenData.length != 0) {
        for (var i = 0; i < object.ChildrenData.length; i++) {
            var item = object.ChildrenData[i];
            var spath = '';
            if (path == '') {
                spath = item.BusinessAreaName;
                BusinessAreaPathRowKey.push([spath, item.RowKey]);
            }
            else {
                spath = path + ' > ' + item.BusinessAreaName;
                BusinessAreaPathRowKey.push([spath, item.RowKey]);
            }
            var additional = "";
            var found = $.grep(BusinessAreaAccessCounterp, function (n, ind) {
                return (n.indexOf(spath) == 0);
            });
            //var found = _.some(BusinessAreaAccessWithRead, function (value) {
            //    return value.indexOf(spath) != -1;
            //});
            if (found.length > 0 || localStorage.UserType.indexOf("Global Contract Owner") >= 0 || item.RowKey == "GenCA" || item.RowKey == "GenBA") {

                if (item.ParentBusinessAreaID == 0) {
                    additional = '<span>' + item.BusinessAreaName + '</span>'
                    strContractAreaName12Counterp = item.BusinessAreaName;
                    strContractAreaName12OwnerCounterp = item.Owner;
                    articleBusinessAreaCounterp += '<tr data-tt-id="tre-' + item.RowKey + '" class="branch expanded">';
                    articleBusinessAreaCounterp += '<td class="treeHead"><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaName12Counterp + '</span><span id="ContractAreaAdmin" style="display:none;">' + strContractAreaName12OwnerCounterp + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/globset.png" /><small>' + additional + '</small></td></tr>';
                } else {
                    if (strContractAreaName12Counterp == thisContractAreaNameC && item.BusinessAreaName == thisBusinessAreaNameC) {
                        thisBusinessAreaNameRowKey = item.RowKey;
                        thisContractAreaNameRowKey = strContractAreabusinesarearowkeyCounterp;
                    }
                    additional = '<span style="color:#3487ce; cursor:pointer;" onclick="javascript:treeviewclick11(this)">' + item.BusinessAreaName + '</span>'
                    articleBusinessAreaCounterp += '<tr data-tt-id="tre-' + item.RowKey + '" data-tt-parent-id="tre-' + item.ParentBusinessAreaID + '" class="branch collapsed" style="display: table-row;">';
                    articleBusinessAreaCounterp += '<td><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaName12Counterp + '</span><span id="ContractAreaAdmin" style="display:none;">' + strContractAreaName12OwnerCounterp + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/gen.png" /><small>' + additional + '</small></td></tr>';
                }

                recursiveIterationCounterp(spath, object.ChildrenData[i])
            }
        }
    }
    //if (object.ChildrenData.length != 0) {
    //    BindRecBACounterp('', object);
    //}
}

var BusinessAreaPathRowKey = [];
var j = 1;
function BindRecBACounterp(path, object) {
    for (var i = 0; i < object.ChildrenData.length; i++) {
        var item = object.ChildrenData[i];
        var additional = "";
        var spath = '';
        if (path == '') {
            spath = item.BusinessAreaName;
            BusinessAreaPathRowKey.push([spath, item.RowKey]);
        }
        else {
            spath = path + ' > ' + item.BusinessAreaName;
            BusinessAreaPathRowKey.push([spath, item.RowKey]);
        }
        //var found = $.grep(BusinessAreaAccessWithRead, function (k,value) {
        //    return (value.indexOf(spath) != -1); 
        //});
        var found = $.grep(BusinessAreaAccessCounterp, function (n, ind) {
            return (n.indexOf(spath) == 0);
        });
        //var found = _.some(BusinessAreaAccessWithRead, function (value) {
        //    return value.indexOf(spath) != -1;
        //});
        if (found.length > 0 || localStorage.UserType.indexOf("Global Contract Owner") >= 0 || item.RowKey == "GenCA" || item.RowKey == "GenBA") {

            if (item.ParentBusinessAreaID != 0) {
                if (strContractAreaNameCounterp == thisContractAreaNameC && item.BusinessAreaName == thisBusinessAreaNameC) {
                    thisBusinessAreaNameRowKey = item.RowKey;
                    thisContractAreaNameRowKey = strContractAreabusinesarearowkeyCounterp;
                }
                if (item.Owner.trim().split(';').indexOf(localStorage.UserName.trim()) > -1) {//if business owner
                    additional = '<span style="color:#3487ce; cursor:pointer;" onclick="javascript:treeviewclick11(this)">' + item.BusinessAreaName + '</span>&nbsp; <img src="/Content/Images/icon/profile.png" style="cursor:default;" />'
                } else { //if permission in business area
                    additional = '<span style="color:#3487ce; cursor:pointer;" onclick="javascript:treeviewclick11(this)">' + item.BusinessAreaName + '</span>'
                }
            } else {
                additional = '<span>' + item.BusinessAreaName + '</span>';
            }
            if (additional != "") {
                if (item.ParentBusinessAreaID == 0) {
                    strContractAreaNameCounterp = item.BusinessAreaName;
                    strContractAreabusinesarearowkeyCounterp = item.RowKey;
                    strContractAreaAdminCounterp = item.Owner;
                    articleBusinessAreaCounterp += '<tr data-tt-id="tre-' + item.RowKey + '" class="branch expanded">';
                    articleBusinessAreaCounterp += '<td class="treeHead"><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaNameCounterp + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/globset.png" /><small>' + additional + '</small></td></tr>';
                } else {

                    articleBusinessAreaCounterp += '<tr data-tt-id="tre-' + item.RowKey + '" data-tt-parent-id="tre-' + item.ParentBusinessAreaID + '" class="branch collapsed" style="display: table-row;">';

                    if (previousidCounterp == item.ParentBusinessAreaID) {
                        //find if child business area exists
                        if (object.ChildrenData.length == 0) {
                            articleBusinessAreaCounterp += '<td><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaNameCounterp + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/gen.png" class="padding_left_65px" /><small>' + additional + '</small></td></tr>';
                        } else {
                            var spandis = object.ChildrenData.length * 2 * 5 * j;
                            articleBusinessAreaCounterp += '<td><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaNameCounterp + '</span><span class="indenter" style="padding-left: ' + spandis + 'px;"></span><img src="/Content/Images/icon/gen.png" /><small>' + additional + '</small></td></tr>';
                        }
                        //$.ajax({
                        //    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/businessarea/childbusinessareas?businessareaid=' + item.RowKey,
                        //    type: 'GET',
                        //    dataType: 'json',
                        //    'Content-Type': 'application/json',
                        //    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                        //    async: false,
                        //    success: function (data) {
                        //        if (data.length == 0) {
                        //            articleBusinessArea += '<td><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaName + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/gen.png" class="padding_left_65px" /><small>' + additional + '</small></td></tr>';
                        //        } else {
                        //            articleBusinessArea += '<td><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaName + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/gen.png" /><small>' + additional + '</small></td></tr>';
                        //        }
                        //    },
                        //    error:
                        //        function (data) {

                        //        }
                        //});
                    } else {
                        articleBusinessAreaCounterp += '<td><span id="ParentBusinessAreaID" style="display:none;">' + item.ParentBusinessAreaID + '</span><span id="RowKey" style="display:none;">' + item.RowKey + '</span><span id="ContractAreaName" style="display:none;">' + strContractAreaNameCounterp + '</span><span class="indenter" style="padding-left: 5px;"></span><img src="/Content/Images/icon/gen.png" /><small>' + additional + '</small></td></tr>';
                    }
                    if (previousidCounterp != item.ParentBusinessAreaID)
                        previousidCounterp = item.RowKey;
                }
            }
            //    recursiveIteration(object.ChildrenData[i])

            //if (object.ChildrenData.length > 0)
            //    recursiveIteration(object.ChildrenData[i])

            if (object.ChildrenData.length > 1) {
                j += 1;
                BindRecBACounterp(spath, object.ChildrenData[i]);

                if (j > 1)
                    j = j - 1;
                else
                    j = 1;
            }
            else if (object.ChildrenData.length == 1) {
                j += 1;
                BindRecBACounterp(spath, object.ChildrenData[i]);
                j = 1;
            }
        }
    }
}


function getShareNameandEmailIdInternal(scontrid, popUpModalName) {
    if (contractItem != "") {
        var UsersToShow = contractItem.ContractManagers + ";" + contractItem.BusinessOwners + ";" + contractItem.CreatedBy + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees + ";" + contractItem.Requestor;
        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
        var vAccFeat = $.grep(veContractFeatures, function (n, i) {
            return (n.RowKey == "11" && n.Status == "ON");
        });
        if (vAccFeat.length > 0) {
            try {
                if (contractItem.ProjectManager == null || contractItem.ProjectManager == "") {
                    UsersToShow += ";" + contractItem.ProjectManager;
                }
            }
            catch (ex) {

            }
        }
        HideOptionsNotRequiredExcept(popUpModalName, UsersToShow);
    }
    else {
        HideOptionsNotRequiredExcept(popUpModalName, "");
    }
}
function HideOptionsNotRequiredExcept(controlname, values) {

    var multiarr = [];
    var res = values != null ? values.split(";") : [];
    var reslength = res.length;
    var resValue = "";
    $("#" + controlname).children('option').hide();
    $('#' + controlname).chosen().trigger("chosen:updated");

    for (var i = 0; i < reslength; i++) {
        //   multiarr.push(res[i].trim());
        resValue = res[i].trim();
        if (resValue != "") {
            if ($('#' + controlname).children('option').filter(function () { return $(this).text() == resValue; }).length > 0 && multiarr.indexOf(resValue) == -1) {
                $('#' + controlname).children('option').filter(function () { return $(this).text() == resValue; }).show();
                multiarr.push(resValue);
            }
        }
    }
    if (multiarr.length == 0) {
        $('#' + controlname).attr("data-placeholder", "No users available").chosen();
    }
    else {
        $('#' + controlname).attr("data-placeholder", "Select User(s)").chosen();
    }
    $('#' + controlname).chosen().trigger("chosen:updated");
}
function GetTextAndAutoPopulateNotHidden(controlname, values) {

    var multiarr = [];
    var res = values != null ? values.split(";") : [];
    var reslength = res.length;
    var resValue = "";
    for (var i = 0; i < reslength; i++) {
        //   multiarr.push(res[i].trim());
        resValue = res[i].trim();
        if (resValue != "") {
            if ($('#' + controlname + ' option[value="' + resValue + '"]').length > 0 && multiarr.indexOf(resValue) == -1 && $('#' + controlname + ' option[value="' + resValue + '"]').css("display") != "none") {
                multiarr.push(resValue);
            }
        }
    }


    ChosenOrder.setSelectionOrder($('#' + controlname), multiarr, true);
}

function BindContractRoles(item) {
    //RoleNames
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractrolesbytype?type=' + item.ContractType,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            if (data != null && data.length != 0) {
                if (vUserListG == '') {
                    vUserListG = GetUserList();
                }
                //  var rolesetting = data[0].ContractRoleSetting;
                var html = '';
                var html_view = '';
                //if (rolesetting !== "") {

                //    var rolesetting = data[0].ContractRoleSetting.split(';');
                var ddllt = [];
                ContractRoles = [];
                $(data).each(function (i, item) {
                    if (item != null) {
                        var Fieldname = item.ContractRoleName;
                        var FieldDisplay = item.ContractRoleDisplayName;
                        var FieldPermi = item.PermissionLabel;
                        var FieldisDeleted = item.isDeleted;

                        //Remove Existing
                        if ($("#view_" + Fieldname).length > 0)
                            $("#view_" + Fieldname).parent().remove();
                        if ($("select#" + Fieldname).length > 0)
                            $("select#" + Fieldname).parent().parent().parent().remove();

                        //For New People
                        if (!FieldisDeleted) {
                            html += ' <tr>';
                            html += '   <td class="f_head">' + FieldDisplay + '</td>';
                            html += '  <td class="labelleft width60">';
                            html += '   <div class="invite-Peop-mul-sel">';
                            html += '       <select id="' + Fieldname + '" multiple="multiple" title="" data-permission="' + FieldPermi + '" class="chosenmulti ContractRoleType" data-placeholder="Select User(s)" style="width:49.5%;"></select>';
                            html += '    </div>';
                            html += '  </td>';
                            ddllt.push(Fieldname);
                        }
                        ContractRoles.push([Fieldname, FieldPermi, FieldDisplay, FieldisDeleted]);
                        //For New People View
                        html_view += ' <tr>';
                        if (FieldisDeleted) {
                            html_view += '   <td height="10" align="left" valign="top" class="content-text clr999" style="color:#f54444;" title="This Contract Role is no longer available.">' + FieldDisplay + '</td>';
                            html_view += '  <td height="10" align="left" valign="top" class="content-text" id="view_' + Fieldname + '"  style="color:#f54444;" title="This Contract Role is no longer available.">';
                        }
                        else {
                            html_view += '   <td height="10" align="left" valign="top" class="content-text clr999">' + FieldDisplay + '</td>';
                            html_view += '  <td height="10" align="left" valign="top" class="content-text" id="view_' + Fieldname + '">';
                        }
                        html_view += '  </td>';
                    }
                });

                $('#tblPeople > tbody > tr').eq(6).after(html);
                $('#tblAddNewPeopleView > tbody > tr').eq(6).after(html_view);
                $(ddllt).each(function () {
                    var item = this.toString();
                    $("#" + item).append(vUserListG);
                    $("#" + item).chosen();
                });
                BindContractRolesMetadata();
                // }

            }
        }
    });
}
var RecvMetadatavaluetofinalize = '';
function BindContractRolesMetadata() {
    var vMetadatavaluetofinalize;
    var metadataFields = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (mainmetadataFields) {
            vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
            RecvMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
            var control = '';
            var control_view = '';
            $(ContractRoles).each(function () {
                $('.CRole').remove();
                var itemfield = $(this)[0];
                var itemfieldDisplay = $(this)[2];
                var itemfieldPermission = $(this)[1];
                var itemisdeleted = $(this)[3];
                FullContractroleUser = [];
                ReadContractroleUser = [];
                ReadWriteContractroleUser = [];
                if ($(vMetadatavaluetofinalize).find(itemfield).text() != "undefined" && $(vMetadatavaluetofinalize).find(itemfield).text() != null && $(vMetadatavaluetofinalize).find(itemfield).text() != "") {
                    if (itemisdeleted) {
                        control += '<tr class="CRole" title="This Contract Role is no longer available.">';
                        control += '<td height="10" align="left" valign="top" class="content-text width40" style="color:#f54444;">' + itemfieldDisplay + '</td>';
                        control += '<td height="10" align="left" valign="top" class="content-text width58 contractroles" data-name="' + itemfield + '" style="color:#f54444;">';
                    }
                    else {
                        control += '<tr class="CRole">';
                        control += '<td height="10" align="left" valign="top" class="content-text clr999 width40">' + itemfieldDisplay + '</td>';
                        control += '<td height="10" align="left" valign="top" class="content-text width58 contractroles" data-name="' + itemfield + '">';
                    }


                    // control += '<td height="10" align="left" valign="top" class="content-text width58">' + $(vMetadatavaluetofinalize).find(itemfield).text() + '</td>';
                    var eachus = $(vMetadatavaluetofinalize).find(itemfield).text().split(';');
                    $(eachus).each(function () {
                        //manoj
                        if ($.trim(this.toString()) != "") {
                            //manoj
                            if (itemfieldPermission == "Full Control") {
                                if ($.inArray(this.toString().trim(), FullContractroleUser) == -1) {
                                    FullContractroleUser.push(this.toString().trim());
                                }
                            }
                            else if (itemfieldPermission == "Read Only") {
                                if ($.inArray(this.toString().trim(), ReadContractroleUser) == -1) {
                                    ReadContractroleUser.push(this.toString().trim());
                                }
                            }
                            else if (itemfieldPermission == "Read/Write") {
                                if ($.inArray(this.toString().trim(), ReadWriteContractroleUser) == -1) {
                                    ReadWriteContractroleUser.push(this.toString().trim());
                                }
                            }
                            if (itemisdeleted) {
                                control += ' <span class="Link_UserProfile">' + this.toString().trim() + '</span>; ';

                                //For New People View
                                control_view += '<span class="Link_UserProfile">' + this.toString().trim() + '</span>; ';
                                $("#view_" + itemfield).empty();
                                $("#view_" + itemfield).append(control_view);
                            }
                            else {
                                if (vActiveUsers.length > 0 && vActiveUsers.indexOf(this.toString().trim()) < 0) {
                                    control += ' <a href="javascript:void(0);" onclick="ViewUserProfile(\'' + this.toString().trim() + '\')" class="Link_UserProfile disabled_item_link" title="This user is no longer available.">' + this.toString().trim() + '</a>; ';

                                    //For New People View
                                    control_view += '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + this.toString().trim() + '\')" class="Link_UserProfile disabled_item_link" title="This user is no longer available.">' + this.toString().trim() + '</a>; ';
                                    $("#view_" + itemfield).empty();
                                    $("#view_" + itemfield).append(control_view);
                                }
                                else {
                                    control += '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + this.toString().trim() + '\')" class="Link_UserProfile">' + this.toString().trim() + '</a>; ';

                                    //For New People View
                                    control_view += '<a href="javascript:void(0);" onclick="ViewUserProfile(\'' + this.toString().trim() + '\')" class="Link_UserProfile">' + this.toString().trim() + '</a>; ';
                                    $("#view_" + itemfield).empty();
                                    $("#view_" + itemfield).append(control_view);
                                }
                            }
                        }
                    });
                    control += ' </td>';
                    control += '</tr>';
                }
                else {
                    if (itemisdeleted) {
                        $("#view_" + itemfield).parent().remove();
                        //control += '<tr class="CRole" title="This Contract Role is no longer available.">';
                        //control += '<td height="10" align="left" valign="top" class="content-text width40" style="color:#f54444;">' + itemfieldDisplay + '</td>';
                        //control += '<td height="10" align="left" valign="top" class="content-text width58" style="color:#f54444;">Not Available</td>';
                        //control += '</tr>';
                    }
                    else {
                        control += '<tr class="CRole">';
                        control += '<td height="10" align="left" valign="top" class="content-text clr999 width40">' + itemfieldDisplay + '</td>';
                        control += '<td height="10" align="left" valign="top" class="content-text width58">Not Available</td>';
                        control += '</tr>';

                        //For New People View
                        $("#view_" + itemfield).empty();
                        $("#view_" + itemfield).append("Not Available");
                    }

                }
                control_view = '';
            });

            $('#PeopleTable').append(control);
        },
    });
}

function ChangeLableCheck(item) {
    var LabelTitle = item.value;
    var CategoryName = $(item).attr('data-category');
    //manoj
    //var classList = $(item).attr('data-category');
    //$(LinkURL).attr('data-value')
    //manoj
    //var classList = item.className.split(' ');
    //$(classList).each(function (i, item) {
    //    if ($.trim(item) != "autodisabledlabel" && CategoryName == "") {
    //        CategoryName = $.trim(item);
    //    }
    //});
    //manoj
    var FilterdCategory = $.grep(LabelsCategories, function (nCategory, iCategory) {
        return (nCategory.LabelCategory == CategoryName && nCategory.Restrict == "Yes");
    });
    //manoj
    if ($(item).is(':checked')) {
        if ($.inArray(LabelTitle, ContractLabels) == -1) {
            ContractLabels.push(LabelTitle);
            var FinalizeDiable = $.grep(arrLabelCollection, function (ndisable, idisable) {
                return (ndisable.Category == CategoryName && ndisable.Label == LabelTitle);
            });
            if (FinalizeDiable.length == 0) {
                var LabelDetails = { Category: CategoryName, Label: LabelTitle, Auto: false };
                arrLabelCollection.push(LabelDetails);
            }
        }
        if (FilterdCategory.length > 0) {
            if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length <= 1) {
                enbledisablelabel(LabelTitle, CategoryName, true);
            }
        }
    }
    else {
        ContractLabels = jQuery.grep(ContractLabels, function (value) {
            return value != LabelTitle;
        });
        arrLabelCollection = $.grep(arrLabelCollection, function (ndisable, idisable) {
            return ndisable.Label != LabelTitle;
        });
        if (FilterdCategory.length > 0) {
            if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length <= 1) {
                if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length == 1) {
                    var chaeckedlabel = "";
                    $('input:checkbox[data-category="' + CategoryName + '"]:checked').each(function () {
                        chaeckedlabel = this.value;
                    });
                    if (chaeckedlabel == LabelTitle) {
                        enbledisablelabel(LabelTitle, CategoryName, false);
                    } else {
                        enbledisablelabel(chaeckedlabel, CategoryName, true);
                    }
                } else if ($('input:checkbox[data-category="' + CategoryName + '"]:checked').length > 0) {
                    $(item).attr("disabled", "disabled");
                } else {
                    enbledisablelabel(chaeckedlabel, CategoryName, false);
                }
                //manoj
            } else {
                $('input:checkbox[data-category="' + CategoryName + '"]:not(:checked) ').attr("disabled", "disabled");
                $(".autodisabledlabel").attr("disabled", "disabled");
            }
        }
    }
}

function disablelabelbysearch() {
    var CategoriesCollection = [];
    $.each(arrLabelCollection, function (arrLabel) {
        if (arrLabel != null) {
            if ($.trim(arrLabelCollection[arrLabel].Category) != "") {
                CategoriesCollection.push($.trim(arrLabelCollection[arrLabel].Category));
            }
        }
    });
    var obj1 = {};
    //manoj
    var CategoriesList = [];
    $(CategoriesCollection).each(function (iCategories, itemCategories) {
        if (!(itemCategories in obj1)) {
            if ($.trim(itemCategories) != "") {
                CategoriesList.push($.trim(itemCategories));
            }
        }
        obj1[itemCategories] = true;
    });

    //manoj
    if (CategoriesList.length > 0) {
        $(CategoriesList).each(function (iCategoriesList, itemCategoriesList) {
            var SameCategoriesAutoLabel = $.grep(arrLabelCollection, function (narrSameLabel, iarrSameLabel) {
                return (narrSameLabel.Category == itemCategoriesList && narrSameLabel.Auto == true);
            });
            var SameCategoriesLabel = $.grep(arrLabelCollection, function (narrSameAutoLabel, iarrSameAutoLabel) {
                return (narrSameAutoLabel.Category == itemCategoriesList && narrSameAutoLabel.Auto == false);
            });
            if (SameCategoriesAutoLabel.length > 0 || SameCategoriesLabel.length > 0) {
                //if ((SameCategoriesLabel.length - SameCategoriesAutoLabel.length) >= 1) {
                //manoj
                var FilterdCategory = $.grep(LabelsCategories, function (nCategory, iCategory) {
                    return (nCategory.LabelCategory == itemCategoriesList && nCategory.Restrict == "Yes");
                });
                //manoj
                if (FilterdCategory.length > 0) {
                    //manoj
                    //$('input:checkbox[class=' + itemCategoriesList + ']').each(function () {
                    //manoj
                    $('input:checkbox[data-category="' + itemCategoriesList + '"]').each(function () {
                        //manoj
                        var selectedlabelvalue = this;
                        var enablelabeldetails = $.grep(arrLabelCollection, function (nenablelabel, ienablelabel) {
                            return (nenablelabel.Category == itemCategoriesList && nenablelabel.Auto == false && nenablelabel.Label == $.trim(selectedlabelvalue.value));
                        });
                        if (enablelabeldetails.length == 0) {
                            if (!this.checked) {
                                $(this).attr("disabled", "disabled");
                            }
                        } else if (SameCategoriesAutoLabel.length > 0) {
                            if (!this.checked)
                                $(this).attr("disabled", "disabled");
                        }
                    });
                    //manoj
                }
            }
        });
    }
    //manoj
}

//manoj
function enbledisablelabel(labelvalue, CategoryName, action) {
    if (action) {
        //manoj
        $('input:checkbox[data-category="' + CategoryName + '"]').each(function () {
            //manoj
            if (labelvalue != $.trim(this.value)) {
                $(this).attr("disabled", "disabled");
            }
        });
    } else {
        //manoj
        $('input:checkbox[data-category="' + CategoryName + '"]').each(function () {
            $(this).removeAttr("disabled");
        });
        //manoj
        //$("." + CategoryName).removeAttr("disabled");
        $(".autodisabledlabel").attr("disabled", "disabled");
    }
}
//manoj

function getShareNameandEmailIdInternal(scontrid, popUpModalName) {
    if (contractItem != "") {
        var UsersToShow = contractItem.ContractManagers + ";" + contractItem.BusinessOwners + ";" + contractItem.CreatedBy + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees + ";" + contractItem.Requestor;
        var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
        var vAccFeat = $.grep(veContractFeatures, function (n, i) {
            return (n.RowKey == "11" && n.Status == "ON");
        });
        if (vAccFeat.length > 0) {
            try {
                if (contractItem.ProjectManager == null || contractItem.ProjectManager == "") {
                    UsersToShow += ";" + contractItem.ProjectManager;
                }
            }
            catch (ex) {

            }
        }
        HideOptionsNotRequiredExcept(popUpModalName, UsersToShow);
    }
    else {
        HideOptionsNotRequiredExcept(popUpModalName, "");
    }
}


function SetBADashboard(BAPath, BA) {
    $("#dashmain").attr("src", "/Content/images/icon/gen.png");
    $(".business-area").css('display', 'none');

    $("#bNavDashboard").html("Dashboard");
    $("#bNavActivities").html("Activities");
    $("#bNavContracts").html("Contracts");
    $("#bNavPipeline").html("Pipeline");
    $("#bNavRequests").html("Requests");
    $("#liNavInsights").css('display', '');
    $("#bNavDashboardMob").html("Dashboard");
    $("#bNavActivitiesMob").html("Activities");
    $("#bNavContractsMob").html("Contracts");
    $("#bNavPipelineMob").html("Pipeline");
    $("#bNavRequestsMob").html("Requests");
    $("#liNavInsightsMob").css('display', '');
    localStorage.setItem("GlobalBusinessArea", BA);
    localStorage.setItem("GlobalBusinessAreaLocation", BAPath);
    localStorage.setItem("IsGeneralBusinessArea", "");
}
//Sridhar
function BindTermTypes(objvalue) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttermtypesenabled',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (data) {
            //var datalength = data.length;
            //TermTypeBinded = true;
            $(data).each(function (iType, itemType) {
                TermTypeDisplayName[itemType.ContractTermName] = itemType.ContractTermDisplayName;
            });
            //if(typeof (objvalue) != "undefined" && objvalue != null && objvalue != ""){
            //    BindMetaData(contractItem, false);
            //}
            //for (var i = 0; i < datalength; i++) {
            //}
        },
        error: function (data) {
            //TermTypeBinded = false;
        }
    });
}

function BindContractRelationships() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contractrelationships',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var options = "";
            if (data == null || data == "") {
                var relationshipType = "Master Agreement-Sub-Agreement/SOW;Prime Contractor Agreement-Sub Contractor Agreement;Blanket Agreement-Order/Invoice;Original-Duplicate/Copy;Past Contract-Renegotiated Contract;Primary Contract-Amendment/Modification;Other";
                var relationship1 = "Master Agreement;Prime Contractor Agreement;Blanket Agreement;Original;Past Contract;Primary Contract;Other";
                var relationship2 = "Sub-Agreement/SOW;Sub Contractor Agreement;Order/Invoice;Duplicate/Copy;Renegotiated Contract;Amendment/Modification;Other";
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/addrelationshipsettings?relationshiptypes=' + relationshipType + '&rel1=' + relationship1 + '&rel2=' + relationship2,
                    type: 'PUT',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                    cache: false,
                    success: function (data) {
                        $(data).each(function (i, item) {

                            var Relationship2 = [];
                            //Get all the relationship2 names
                            $(item.Relationship2).find('RelationshipName').each(function () {
                                var Relationship2each = $(this).text();
                                if (Relationship2each != null && typeof (Relationship2each) != "undefined" && Relationship2each != "")
                                    Relationship2.push(Relationship2each)
                            });
                            RelationshipTypes.push([item.RelationshipType, item.Relationship1, Relationship2]);
                            options += '<option value="' + item.RelationshipType + '">' + item.RelationshipType + '</option>';
                        });
                        $("#ddlRelationshipType").append(options);
                    },
                    error: function (person) {
                        RelationshipTypes = [];
                    }
                });
            }
            else {
                $(data).each(function (i, item) {

                    var Relationship2 = [];
                    //Get all the relationship2 names
                    $(item.Relationship2).find('RelationshipName').each(function () {
                        var Relationship2each = $(this).text();
                        if (Relationship2each != null && typeof (Relationship2each) != "undefined" && Relationship2each != "")
                            Relationship2.push(Relationship2each)
                    });
                    RelationshipTypes.push([item.RelationshipType, item.Relationship1, Relationship2]);
                    options += '<option value="' + item.RelationshipType + '">' + item.RelationshipType + '</option>';
                });
                $("#ddlRelationshipType").append(options);
            }
        },
        error: function (data) {
            var options = "";
            var relationshipType = "Master Agreement-Sub-Agreement/SOW;Prime Contractor Agreement-Sub Contractor Agreement;Blanket Agreement-Order/Invoice;Original-Duplicate/Copy;Past Contract-Renegotiated Contract;Primary Contract-Amendment/Modification;Other";
            var relationship1 = "Master Agreement;Prime Contractor Agreement;Blanket Agreement;Original;Past Contract;Primary Contract;Other";
            var relationship2 = "Sub-Agreement/SOW;Sub Contractor Agreement;Order/Invoice;Duplicate/Copy;Renegotiated Contract;Amendment/Modification;Other";
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/addrelationshipsettings?relationshiptypes=' + relationshipType + '&rel1=' + relationship1 + '&rel2=' + relationship2,
                type: 'PUT',
                dataType: 'json',
                headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
                cache: false,
                success: function (data) {
                    $(data).each(function (i, item) {

                        var Relationship2 = [];
                        //Get all the relationship2 names
                        $(item.Relationship2).find('RelationshipName').each(function () {
                            var Relationship2each = $(this).text();
                            if (Relationship2each != null && typeof (Relationship2each) != "undefined" && Relationship2each != "")
                                Relationship2.push(Relationship2each)
                        });
                        RelationshipTypes.push([item.RelationshipType, item.Relationship1, Relationship2]);
                        options += '<option value="' + item.RelationshipType + '">' + item.RelationshipType + '</option>';
                    });
                    $("#ddlRelationshipType").append(options);
                },
                error: function (person) {
                    RelationshipTypes = [];
                }
            });
        }
    });
}

function BindGeneralSettings() {

    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data.EnableMilestonesPipeline == "Yes") {
                $("#MilestoneEnable").show();
                if ((contractItem.ReadOnlyPermissions.indexOf(localStorage.UserName) > -1) && (!localStorage.UserType.indexOf("Global Contract Owner") >= 0)) {
                    $(".MilestoneEnableF").hide();
                }
                else {
                    if (contractItem.IsDraft == "Yes") {
                        $(".MilestoneEnableF").hide();
                    }
                    else
                        $(".MilestoneEnableF").show();

                }
                //if (!isPermissionView) {

                //}
                //else {
                //    $(".MilestoneEnableF").hide();
                //    $("#MilestoneEnable").hide();
                //}
            }
            else {
                $(".MilestoneEnableF").hide();
                $("#MilestoneEnable").hide();
                if (contractItem.Status == "New") {
                    $("#topAction2").css("display", "none");
                }
            }
            if (data.EnableObligationsPipeline == "Yes") {
                //$(".FL_Obligations").show();
                var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
                vAccFeat = $.grep(veContractFeatures, function (n, i) {
                    return (n.RowKey == "2" && n.Status == "ON");
                });
                if (vAccFeat.length > 0) {
                    $(".FL_Obligations").css('display', '');

                }
            }
            else {
                $(".FL_Obligations").hide();
            }

        },
        error:
            function (data) {
            },
        complete: function (status) {

        }
    });
}

//manoj
function Getvaluebynameattr(nameattr) {
    var selectedmilestoneid = '';
    $.each($('input:checkbox[name="' + nameattr + '"]:checked'), function () {
        if (typeof (this) != 'undefined' && $.trim(this) != null) {
            if ($.trim(this.id) != "") {
                selectedmilestoneid += ";" + $.trim(this.id)
            }
        }
    });
    selectedmilestoneid = selectedmilestoneid != "" ? selectedmilestoneid.trim() : selectedmilestoneid;
    selectedmilestoneid = selectedmilestoneid.charAt(0) == ";" ? selectedmilestoneid.substr(1) : selectedmilestoneid;
    selectedmilestoneid = selectedmilestoneid != "" ? selectedmilestoneid.trim() : selectedmilestoneid;
    return selectedmilestoneid;
}

//Browse generic method(s) for multi choice field(s) in counterparty
function ViewGenericCounterparty(obj) {
    vGlobalObjForGeneric = obj;
    $("#loadingPage").fadeIn();
    $("#tblGeneric").empty();
    $("#tblGenericheader").empty();
    $("#liSelectedRU").empty();
    var art = '<tr><td><article style="width:100%; text-align:center;">';
    art += '<input id="txtSearchBoxGeneric" class="f_inpt cl width80" type="text" style="text-wrap:none" placeholder="Type to Search" />';
    art += '<img title="Search" style="cursor: pointer; position: relative; left: -40px; top:-2px;" onclick="javascript: SearchGenericCounterparty();" src="../Content/Images/search_over.png" />';
    art += "<a href='javascript:void(0)' class='linkPickerClear' onclick='ClearGenericCounterparty();'>Clear</a>";
    art += '</article></td></tr>';
    $("#tblGenericheader").html(art);
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterpartyfieldbydisplayname?fielddisplayname=' + obj.id,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var prevSelected = $("#" + obj.title).val();
            arrprevRU = [];
            $.each(prevSelected.split(";"), function () {
                arrprevRU.push($.trim(this));
            });
            var arrayChoiceValues = data[0].ChoiceValues.split("\n");
            myArrayRU = [];
            var obj1 = {};
            //manoj
            $(arrayChoiceValues).each(function (iChoiceValue, itemChoiceValue) {
                //manoj
                //for (var i = 0; i < arraysplitRU.length; i++) {
                if (!(itemChoiceValue in obj1)) {
                    if ($.trim(itemChoiceValue) != "") {
                        myArrayRU.push($.trim(itemChoiceValue));
                    }
                }
                obj1[$.trim(itemChoiceValue)] = true;
            });
            var resultfound = true;
            var myArraylength = myArrayRU.length;
            $("#browseGeneric").data('param_1', obj.title).dialog("option", "title", obj.id + " Picker");
            CreateReportUnitList(0);
            var vCount = myArraylength;

            $('#compact-paginationGeneric').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tblGeneric',
                cssStyle: 'compact-theme',
                listname: 'CounterPartyUnit'
            });
            $('#compact-paginationGeneric').css("display", "");
            $("#txtSearchBoxGeneric").autocomplete({
                source: myArrayRU,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxGeneric").val(uidetails.item.label);
                    SearchGenericCounterparty();
                }
            });
            $("#browseGeneric").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error:
            function (data) {
                $("#tblGeneric").html('No item found.');
                $("#browseGeneric").data('param_1', obj.title).dialog("option", "title", obj.id + " Picker");
                $("#browseGeneric").dialog("open");
                $("#loadingPage").fadeOut();
            }
    });

    $('#txtSearchBoxGeneric').keypress(function (e) {
        if ($('#txtSearchBoxGeneric').val() != "") {
            if (e.keyCode == 13) {
                $(".ui-autocomplete").css('display', 'none');
                SearchGenericCounterparty();
            }
        }
    });
}
function ClearGenericCounterparty() {

    $('#loadGen').html('<img src="../Content/Images/icon/loading.gif">');
    $("#tblGeneric").find("tr:gt(0)").remove();
    $("#txtSearchBoxGeneric").val("")
    var searchKeyword = "";
    filtergenericCounterparty(searchKeyword);
}
function SearchGenericCounterparty() {

    $('#loadGen').html('<img src="../Content/Images/icon/loading.gif">Searching...');
    $("#tblGeneric").find("tr:gt(0)").remove();
    var searchKeyword = $("#txtSearchBoxGeneric").val();
    filtergenericCounterparty(searchKeyword);
}
function filtergenericCounterparty(searchKeyword) {
    $("#tblGeneric").empty();
    $("#liSelectedRU").empty();
    multipleChecksDocumentID = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterpartyfieldbydisplayname?fielddisplayname=' + vGlobalObjForGeneric.id,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            var prevSelected = $("#" + vGlobalObjForGeneric.title).val();
            arrprevRU = [];
            $.each(prevSelected.split(";"), function () {
                arrprevRU.push($.trim(this));
            });

            var arraysplitRU = [];
            myArrayRU = [];
            arraysplitRU = data[0].ChoiceValues.split("\n")
            var obj1 = {};
            for (var i = 0; i < arraysplitRU.length; i++) {
                if (!(arraysplitRU[i] in obj1)) {
                    if (arraysplitRU[i].trim() != "") {
                        if (arraysplitRU[i].toLowerCase().indexOf(searchKeyword.toLowerCase()) > -1 || searchKeyword == "") {
                            myArrayRU.push(arraysplitRU[i]);
                        }
                        obj1[arraysplitRU[i]] = true;
                    }
                }
            }
            var resultfound = true;
            var myArraylength = myArrayRU.length;
            CreateReportUnitList(0);
            var vCount = myArraylength;
            var vCount = $("#tblGeneric tr").length;
            $('#compact-paginationGeneric').pagination({
                items: vCount,
                itemsOnPage: 10,
                typeID: 'tblGeneric',
                cssStyle: 'compact-theme',
                listname: 'CounterPartyUnit'
            });
            $("#txtSearchBoxGeneric").autocomplete({
                source: arraysplitRU,
                minLength: 1,
                focus: function (event, ui) {
                    return false;
                },
                select: function (evn, uidetails) {
                    $("#txtSearchBoxGeneric").val(uidetails.item.label);
                    SearchGeneric();
                }
            });
            $('#loadGen').empty();
        },
        error:
            function (data) {

            }
    });
}
//Browse generic method(s) for multi choice field(s) in counterparty

function DisplayRequiredTab(tabname) {
    var passdispalyid = "";
    $(".cltabrequired").removeClass('pop_up__Acti');
    $('.cltblrequired').css("display", "none");
    if (typeof (tabname) != "undefined" && tabname != null && tabname != "") {
        $("#li" + tabname).addClass('pop_up__Acti');
        $("#tbl" + tabname).css("display", "");
        passdispalyid = 'tbl' + tabname;
    } else {
        $("#liRequired").addClass('pop_up__Acti');
        $("#tblRequired").css("display", "");
        passdispalyid = 'tblRequired';
    }
    allowtoupdate(passdispalyid);
}

function allowtoupdate(displayid) {
    if (displayid != "tblActivity") {
        var tbldata = document.getElementById(displayid).textContent;
        if (typeof (tbldata) != "undefined" && tbldata != null && tbldata != "" && tbldata != "No Required Metadata is missing." && tbldata != "No Required People(s) are missing." && tbldata != "No Required Document Template(s) and Document Type(s) are missing." && tbldata != "No Required Milestone(s) is missing." && tbldata != "No Pending Tasks.") {
            if ($("#hdnPermission").val() == "Manage" || $("#hdnPermission").val() == "Contribute") {
                $("#btnPendingUpdate").show();
            } else {
                $("#btnPendingUpdate").hide();
            }
        } else {
            $("#btnPendingUpdate").hide();
        }
    } else {
        $("#btnPendingUpdate").hide();
    }
}

function getcontractsummerytemplate(ContractType, SummeryBlobURL, action) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/summerytemplatebyctype?contype=' + encodeURIComponent(ContractType),
        type: 'GET',
        dataType: 'json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        //contentType: false,
        success: function (SummeryTemp) {
            if (action) {
                var SummeryDocumentName = SummeryBlobURL.split('_');
                $("#iStandardIcon").html('<label id="lblsummerydocumentpath" style="display:none"> ' + SummeryBlobURL + '</label><img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="openmenusummerydocument" />');
                //manoj
                $(".openmenusummerydocument").contextMenu({ menu: 'dropdownMenuSummery', leftButton: true }, function (action, el, pos) {
                    contextMenuSummeryDocument(action, el.parent("i"), pos);
                });
                if (contractItem.Permission != "View") {
                    $(".clCoverSheet").css("display", "");
                    $("#hdnsummeryTempDocu").text("Yes");
                    $("#lisummarydocument").css("display", "");
                } else {
                    $(".clCoverSheet").css("display", "none");
                    $("#hdnsummeryTempDocu").text("No");
                    $("#lisummarydocument").css("display", "none");
                }
            } else if (contractItem.Permission != "View") {
                $("#iStandardIcon").html('<img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="dropdownMenuGenerateSummery" />');
                $(".dropdownMenuGenerateSummery").contextMenu({ menu: 'dropdownMenuGenerateSummery', leftButton: true }, function (action, el, pos) {
                    contextMenuSummeryDocument(action, el.parent("i"), pos);
                });
                $("#hdnsummeryTempDocu").text("No");
                $("#lisummarydocument").css("display", "none");
            } else {
                $("#iStandardIcon").empty();
                $("#hdnsummeryTempDocu").text("No");
                $("#lisummarydocument").css("display", "none");
            }
        },
        error: function (SummeryTemp) {
            if (action) {
                var SummeryDocumentName = SummeryBlobURL.split('_');
                $("#iStandardIcon").html('<label id="lblsummerydocumentpath" style="display:none"> ' + SummeryBlobURL + '</label><img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="openmenusummerydocument" />');
                //manoj
                $(".openmenusummerydocument").contextMenu({ menu: 'dropdownMenuSummery', leftButton: true }, function (action, el, pos) {
                    contextMenuSummeryDocument(action, el.parent("i"), pos);
                });
                $(".clCoverSheet").css("display", "none");
                //manoj
                if (contractItem.Permission != "View") {
                    $("#hdnsummeryTempDocu").text("Yes");
                    $("#lisummarydocument").css("display", "");
                } else {
                    $("#hdnsummeryTempDocu").text("No");
                    $("#lisummarydocument").css("display", "none");
                }
                //manoj
            } else {
                $("#iStandardIcon").empty();
                $("#hdnsummeryTempDocu").text("No");
                $("#lisummarydocument").css("display", "none");
            }
        }
    });
}

function ViewSummeryDocument(docurl) {
    srcurl = "https://view.officeapps.live.com/op/embed.aspx?src=" + docurl + "?" + randomString() + "=" + randomString() + "&wdStartOn=1";
    window.open(srcurl);
}

function randomString() {
    var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
    var string_length = 8;
    var randomstring = '';
    for (var i = 0; i < string_length; i++) {
        var rnum = Math.floor(Math.random() * chars.length);
        randomstring += chars.substring(rnum, rnum + 1);
    }
    return randomstring;
}

//$("#btnsumdocu").click(function () {
function generatecoversheet(objvalue) {
    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/summerytemplate?contractid=' + contractItem.RowKey + '&contracttype=' + encodeURIComponent(contractItem.ContractType),
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        cache: false,
        success: function (SumDocu) {
            //manoj
            coversheet_trigger(objvalue);
            //manoj
        },
        error: function (SumDocu) {
            $("#loadingPage").fadeOut();
        }
    });
}
//});


function GetSummeryDocument(vconid) {
    //manoj
    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    var vCoverSheet = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "23" && n.Status == "ON");
    });
    if (vCoverSheet.length > 0) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts?contractid=' + vconid,
            type: 'GET',
            cache: false,
            contentType: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey, UserID: localStorage.UserID },
            processData: false,
            success: function (item) {
                vContractTile = item.ContractTitle;
                contractItem = item;
                if (contractItem.SummeryBlobURL != null && contractItem.SummeryBlobURL != "") {
                    var SummeryDocumentName = contractItem.SummeryBlobURL.split('_');
                    $("#iStandardIcon").html('<label id="lblsummerydocumentpath" style="display:none"> ' + contractItem.SummeryBlobURL + '</label><img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="openmenusummerydocument" />');
                    //manoj
                    $(".openmenusummerydocument").contextMenu({ menu: 'dropdownMenuSummery', leftButton: true }, function (action, el, pos) {
                        contextMenuSummeryDocument(action, el.parent("i"), pos);
                    });
                    $(".clCoverSheet").css("display", "");
                    $("#hdnsummeryTempDocu").text("Yes");
                    $("#lisummarydocument").css("display", "");
                } else {
                    $("#iStandardIcon").html('<img src="../Content/Images/status/cover_sheet.png" alt="Contract Cover Sheet" title="Contract Cover Sheet" class="dropdownMenuGenerateSummery" />');
                    $(".dropdownMenuGenerateSummery").contextMenu({ menu: 'dropdownMenuGenerateSummery', leftButton: true }, function (action, el, pos) {
                        contextMenuSummeryDocument(action, el.parent("i"), pos);
                    });
                    $("#hdnsummeryTempDocu").text("No");
                    $("#lisummarydocument").css("display", "none");
                }
                $("#loadingPage").fadeOut();
            }
        });
    } else {
        $("#loadingPage").fadeOut();
        $("#iStandardIcon").empty();
        $("#hdnsummeryTempDocu").text("No");
        $("#lisummarydocument").css("display", "none");
    }
}

//Context menu for Summery Document
function contextMenuSummeryDocument(action, el, pos) {
    switch (action) {
        case 'editO365': {
            ViewSummeryDocument($(el).find("#lblsummerydocumentpath").text());
            break;
        }
        case 'replace': {
            generatecoversheet('regenerate');
            break;
        }
        case 'genetarecover': {
            generatecoversheet('generate');
            break;
        }
        case 'download': {
            var LinkURL = decodeURIComponent($(el).find("#lblsummerydocumentpath").text());
            location = LinkURL;
            break;
        }
    }
}
//Context menu for Summery Document

//for Hyperlink
function navigateurl(obj) {
    if (typeof obj != 'undefined' && obj != null && obj != "") {
        var objvalue = $("#" + obj).val();
        var navigationresult = "";
        if (typeof objvalue != 'undefined' && objvalue != null && objvalue != "") {
            if (objvalue.trim() != "") {
                var reqularexprn = /^(http:\/\/|https:\/\/)[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/i
                if (reqularexprn.test(objvalue)) {
                    navigationresult = "Valid"
                } else {
                    navigationresult = "Notvalid"
                }
            } else {
                navigationresult = "WhiteSpace";
            }
        } else {
            navigationresult = "Empty";
        }
        switch (navigationresult) {
            case "Valid": {
                window.open(objvalue);
                break;
            }
            case "Notvalid": {
                swal("", "Enter valid URL.");
                break;
            }
            case "WhiteSpace": {
                swal("", "URL should not contain whitespace.");
                break;
            }
            case "Empty": {
                swal("", "URL should not be empty.");
                break;
            }
        }
    }
}
//for Hyperlink
//manoj

//Sridhar
function enableMilestoneSwitch() {
    $("#AlertMile").val('Yes').change();
    //$("#enableSwitch").parent().remove();
    if (IsPipeline) {
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn OFF reminders for milestone notifications, click <a href='javascript:void(0);' id='disableSwitch' onclick='disableMilestoneSwitch()'>Disable</a></span>")
    }
}

function disableMilestoneSwitch() {
    $("#AlertMile").val('No').change();
    //$("#enableSwitch").parent().remove();
    if (IsPipeline) {
        $("#reminderEnable").empty();
        $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")
    }
}

function enableObligationSwitch() {
    $("#AlertObli").val('Yes').change();
    //$("#enableOSwitch").parent().remove();
    if (IsPipeline) {
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn OFF reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='disableObligationSwitch()'>Disable</a></span>");
    }
}

function disableObligationSwitch() {
    $("#AlertObli").val('No').change();
    //$("#enableOSwitch").parent().remove();
    if (IsPipeline) {
        $("#reminderEnableObligation").empty();
        $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
    }
}

$("#AlertObli").change(function () {
    if (IsPipeline) {
        if ($(this).val() == "Yes") {
            $("#reminderEnableObligation").empty();
            $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn OFF reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='disableObligationSwitch()'>Disable</a></span>");
        }
        else if ($(this).val() == "No") {
            $("#reminderEnableObligation").empty();
            $("#reminderEnableObligation").append("Reminders <span style='color: red;margin-left: 23%'>To turn ON reminders for obligation notification, click <a href='javascript:void(0);' id='disableOSwitch' onclick='enableObligationSwitch()'>Enable</a></span>");
        }
    }
});

$("#AlertMile").change(function () {
    if (IsPipeline) {
        if ($(this).val() == "Yes") {
            $("#reminderEnable").empty();
            $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn OFF reminders for milestone notifications, click <a href='javascript:void(0);' id='disableSwitch' onclick='disableMilestoneSwitch()'>Disable</a></span>")
        }
        else if ($(this).val() == "No") {
            $("#reminderEnable").empty();
            $("#reminderEnable").append("Reminders <span style='color: red;margin-left: 20%'>To turn ON reminders for milestone notifications, click <a href='javascript:void(0);' id='enableSwitch' onclick='enableMilestoneSwitch()'>Enable</a></span>")
        }
    }
});
//Sridhar

var currentNav = "";
var currentHref = "";
function openmismatched(obj) {
    //If support for large volume document feature is enabled
    if ($("#hdnnewdocumentfeature").text() == "Yes") {
        if ($("#tabSummary").hasClass("active")) {
            if (obj.parentNode.childNodes[11].attributes["href"].value == "#") {
                currentNav = obj.parentNode.childNodes[11].attributes["seqe"].value
            } else {
                currentHref = obj.parentNode.childNodes[11].attributes["href"].value
            }
        } else {
            if (obj.parentNode.childNodes[13].attributes["href"].value == "#") {
                currentNav = obj.parentNode.childNodes[13].attributes["seqe"].value
            } else {
                currentHref = obj.parentNode.childNodes[13].attributes["href"].value
            }
        }
    } else {
        if (obj.parentNode.childNodes[13].attributes["href"].value == "#") {
            currentNav = obj.parentNode.childNodes[13].attributes["seqe"].value
        } else {
            currentHref = obj.parentNode.childNodes[13].attributes["href"].value
        }
    }
    $.ajax({
        url: '/Documents/PostByteArrayToString',
        type: 'Post',
        cache: false,
        dataType: 'json',
        headers: { 'AntiReqVerificationToken': $("#forgeryToken").val(), 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        data: {
            'byteArray': obj.attributes["data"].value
        },
        success: function (data) {
            var dataCollection = [];
            $(data).find('contentcontrol').each(function () {
                var vMetadata = $(this).find('metadata').text();
                var vContractValue = $(this).find('contractvalue').text();
                var vDocumentValue = $(this).find('documentvalue').text();
                var vIsIdentical = $(this).find('isidentical').text();
                var dataObject = {
                    Metadata: vMetadata, ContractValue: vContractValue,
                    DocumentValue: vDocumentValue, IsIdentical: vIsIdentical
                };
                dataCollection.push(dataObject);
            });

            var article = "";
            $('#mismatchedMetadatas').empty();
            $(dataCollection).each(function (idata, mismatchedData) {

                article += '<tr style="display: table-row;">';
                article += '<td><span>' + mismatchedData.Metadata + '</span></td>';
                if (mismatchedData.DocumentValue == "Click or tap here to enter text.") {
                    article += '<td><span></span></td>';
                }
                else {
                    article += '<td><span>' + mismatchedData.DocumentValue.replace(/Z25lSorv/g, "<br>") + '</span></td>';
                }

                article += '<td><b>' + mismatchedData.ContractValue.replace(/Z25lSorv/g, "<br>") + '</b></td>';
                if (mismatchedData.IsIdentical == "yes")
                    article += '<td><img src="/Content/Images/matched_yes.png" style="cursor:default;"></td>';
                else
                    article += '<td><img src="/Content/Images/matched_no.png" style="cursor:default;"></td>';
                article += '</tr>';

            });
            $('#mismatchedMetadatas').append(article);
            $('#dialogMismatched').dialog('open');
        },
        error: function (data) {
        }
    });
}

function CheckDocumentNameExistForEdit(FolderUrl, documentID) {
    var isExist = false;
    var vDocURL = "";
    var folderurltobind = "";



    vDocURL = FolderUrl.substring(0, FolderUrl.lastIndexOf("/") + 1) + encodeURIComponent($('#txtDocumentName').val()) + "." + $("#spExt").text().trim();


    folderurltobind = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?docurl=' + vDocURL,
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            if (data == null)
            { isExist = false; }
            else
            {
                if (data.RowKey == documentID) {
                    isExist = false;
                }
                else {
                    isExist = true;

                }
            }
        },
        error: function (data) {
            isExist = false;
        }
    });
    return isExist;
}

//Sridhar
function EnableAllMilestones(contractid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/enableallmilestones?contractid=' + contractid,
        type: 'PUT',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        cache: false,
        success: function (result) { }
    });
}

//manoj
//Cover Sheet Document Generate/Re-Generate
function coversheet_trigger(objvaluetrigger) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/automationcoversheet?coversheetid=' + vContractID,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        //async: false,
        success: function (data) {
            if (data != null && data.length > 0) {
                coversheet_init(objvaluetrigger);
            } else {
                if (objvaluetrigger == 'generate') {
                    swal("", "Cover sheet document has been generated for this contract.");
                } else {
                    swal("", "Cover sheet document has been regenerated for this contract.");
                }
                GetSummeryDocument(contractItem.RowKey);
            }
        },
        error: function (SumDocu) {
            if (objvaluetrigger == 'generate') {
                swal("", "Cover sheet document has been generated for this contract.");
            } else {
                swal("", "Cover sheet document has been regenerated for this contract.");
            }
            GetSummeryDocument(contractItem.RowKey);
        }
    });
}

//Trigger every 5 sec if document not yet created
function coversheet_init(objinit) {
    setTimeout('coversheet_trigger("' + objinit + '")', 5000);
}
//Trigger every 5 sec if document not yet created

//Cover Sheet Document Generate/Re-Generate
//manoj

function MarkAsCompleted() {
    if ($("#tblMetadataDetailForOwner").find("ul")[0].className.indexOf("Milestone") > -1) {
        var milestoneID = ($("#tblMetadataDetailForOwner ul li#milestoneID").children()[1].textContent != "" ? $("#tblMetadataDetailForOwner ul li#milestoneID").children()[1].textContent.trim() : "");
        var milestoneTitle = ($("#tblMetadataDetailForOwner ul li#milestoneTitle span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul li#milestoneTitle span")[0].textContent.trim() : "");
        var formDataStatusMile = new FormData();
        formDataStatusMile.append("MilestoneIDs", milestoneID);
        $("#loadingPage").fadeIn();

        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/changestatus?status=Complete',
            type: 'PUT',
            dataType: 'json',
            data: formDataStatusMile,
            contentType: false,
            processData: false,
            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
            cache: false,
            success: function (result) {
                BindMilestone();
                swal({
                    title: '',
                    text: "Thanks, Milestone <span style=\"font-weight:700\">'" + milestoneTitle + "'</span> has been completed successfully.",
                    showCancelButton: false,
                    confirmButtonText: 'OK',
                    html: true
                });
                $("#loadingPage").fadeOut();
            },
            error: function (status) {
                swal("", "Could not mark milestone as complete.");
                $("#loadingPage").fadeOut();
            }
        });

    }
    else {
        var vObligationID = ($("#tblMetadataDetailForOwner ul li#obligationID span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul li#obligationID span")[0].textContent.trim() : "");
        var vObligationTitle = ($("#tblMetadataDetailForOwner ul#obligationTitle li span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul#obligationTitle li span")[0].textContent.trim() : "");
        var vObligationText = ($("#tblMetadataDetailForOwner ul li#ObligationTEXT span")[0].textContent != "" ? $("#tblMetadataDetailForOwner ul li#ObligationTEXT span")[0].textContent.trim() : "");
        $("#loadingPage").fadeIn();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationcatalogs?obligationtext=' + vObligationText + '&obligationId=' + vObligationID,
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            async: false,
            success: function (catalogs) {
                if (catalogs != null && catalogs.length > 0) {
                    var catalogitems = "";

                    catalogitems = $.grep(catalogs, function (p) { return p.ObligationCatalogStatus != "Complete" && p.ObligationCatalogStatus != "Cancelled"; })
.map(function (p) { return p });
                    if (catalogitems != null && catalogitems != "") {
                        swal("", "Could not mark obligation as complete, Related products need to complete.");
                        $("#loadingPage").fadeOut();
                    }
                    else {
                        $.ajax({
                            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + vObligationID + '&obligationstatus=' + 'Complete',
                            type: 'POST',
                            dataType: 'json',
                            headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                            cache: false,
                            success: function (person) {
                                BindObligationsNew(getParameterByName('ContractID'));
                                swal({
                                    title: '',
                                    text: "Thanks, Obligation <span style=\"font-weight:700\">'" + vObligationTitle + "'</span> has been completed successfully.",
                                    showCancelButton: false,
                                    confirmButtonText: 'OK',
                                    html: true
                                });
                                $("#loadingPage").fadeOut();
                            },
                            error: function (status) {
                                swal("", "Could not mark obligation as complete.");
                                $("#loadingPage").fadeOut();
                            }
                        });
                    }
                }
                else {
                    $.ajax({
                        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + vObligationID + '&obligationstatus=' + 'Complete',
                        type: 'POST',
                        dataType: 'json',
                        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                        cache: false,
                        success: function (person) {
                            BindObligationsNew(getParameterByName('ContractID'));
                            swal({
                                title: '',
                                text: "Thanks, Obligation <span style=\"font-weight:700\">'" + vObligationTitle + "'</span> has been completed successfully.",
                                showCancelButton: false,
                                confirmButtonText: 'OK',
                                html: true
                            });
                            $("#loadingPage").fadeOut();
                        },
                        error: function (status) {
                            swal("", "Could not mark obligation as complete.");
                            $("#loadingPage").fadeOut();
                        }
                    });
                }

            },
            error: function (catalogs) {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/obligations/obligationsnew/updateobligationbyId?obligationId=' + vObligationID + '&obligationstatus=' + 'Complete',
                    type: 'POST',
                    dataType: 'json',
                    headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
                    cache: false,
                    success: function (person) {
                        BindObligationsNew(getParameterByName('ContractID'));
                        swal({
                            title: '',
                            text: "Thanks, Obligation <span style=\"font-weight:700\">'" + vObligationTitle + "'</span> has been completed successfully.",
                            showCancelButton: false,
                            confirmButtonText: 'OK',
                            html: true
                        });
                        $("#loadingPage").fadeOut();
                    },
                    error: function (status) {
                        swal("", "Could not mark obligation as complete.");
                        $("#loadingPage").fadeOut();
                    }
                });
            }
        });
    }
}

function getMilestoneOwners(milestoneOwners) {
    $("#loadingPage").fadeIn();
    var msOwners = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/milestones/ownersfromgroup?contractid=' + getParameterByName('ContractID') + '&milestoneonwers=' + milestoneOwners,
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        async: false,
        success: function (owners) {
            if (owners != null || owners != "") {
                for (var key in owners) {
                    if (owners.hasOwnProperty(key)) {
                        msOwners.push(key);
                    }
                }
            }
        },
        error: function (owners) { }

    });
    return msOwners;
}

//manoj
function deleteamentmentdocumets(dataobj, objid) {
    var documentlength = 0;
    var passdocumenttodelete = dataobj.length;
    $(dataobj).each(function (i, item) {
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents?documentid=' + item.RowKey,
            type: 'DELETE',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
            cache: false,
            success: function (data) {
                documentlength++;
                if (passdocumenttodelete == documentlength) {
                    deleteamanetment(objid);
                }
            },
            error: function () {
                documentlength++;
                if (passdocumenttodelete == documentlength) {
                    deleteamanetment(objid);
                }
            },
        });
    });
}

function deleteamanetment(objid) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/amendments?amendmentid=' + objid,
        type: 'DELETE',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, username: localStorage.UserName },
        "Content-Type": "application/json",
        cache: false,
        success: function (data) {
            $("#loadingPage").fadeOut();
            reloadaction();
        },
        error: function () {
            $("#loadingPage").fadeOut();
            reloadaction();
        }
    });
}

function reloadaction() {
    BindAmendments();
    if (documentview == null || documentview == "" || documentview == 'folder') {
        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
            var selectedfoldervalue = $('#showAll').find("a");
            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
            showfolderdocuments(parentdocumentdetails);
        }
        else {
            BindDocument(vContractID);
        }
    } else {
        DisplayDocument(documentview);
    }
    pendingStarted = false;
    GetContractPendingAction(true, "BindPeoples");
    $("#hdnFolderDocumentView").text('');
    $("#hdnShowAllTextValue").html('');
    PrvFolderselection = '';
    //Bind primary and pined document based on new feature
    if ($("#hdnnewdocumentfeature").text() == "Yes") {
        CreateDocumentListPinView(vContractID);
    }
}
//manoj


function MultipleDocumentSignature(el) {
    // var Stage = "";
    var requiredavalible = false;
    //  Stage = getParameterByName("Stage");
    if (Stage == 'pipeline') {
        if ($("#spanstatus").text() != "") {
            var arrstatus = ['Ready for Signature', 'Awaiting Signatures', 'Signed', 'Active', 'Expired', 'Replaced', 'Archived', 'On Hold', 'Cancelled'];
            if (arrstatus.indexOf($("#spanstatus").text().trim()) > -1) {
                Stage = '';
            }
        }
    }
    var documentName = '';
    var documentNameArr = multipleChecksDocumentName.split('~');
    var documentIDArr = multipleChecksDocumentID.split(';');
    var DocumentUrlArr = multipleChecksDocumentURL.split('|');

    var DocumentUrlArr = multipleChecksDocumentURL.split('|');
    var vOptions = '';
    var doccount = 1;

    var veContractFeatures = JSON.parse(localStorage.getItem("eContractFeatures"));
    if (veContractFeatures == null) {
        GetFeaturesInDetailPage();
    }
    var vAccFeat = $.grep(veContractFeatures, function (n, i) {
        return (n.RowKey == "26" && n.Status == "ON");
    });

    if (vAccFeat.length > 0 && documentNameArr.length > 1) {  //thilo advanved docusign

        for (i = 1; i <= documentNameArr.length; i++) {
            if (vOptions == '')
                vOptions = "<option value='" + i + "'>" + i + "</option>";
            else
                vOptions += "<option value='" + i + "'>" + i + "</option>";

        }
        $.each(documentNameArr, function (index, value) {
            if (documentName == '')
                documentName = "<b class='width90 float_left'>" + value + " <select id=ddlorder" + doccount + " class='f_inpt width5 DocOrder' onclick='ClickedDocOrder(this)' onchange='SelectedDocOrder(this)'>" + vOptions + " </select><img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDocOrder(this,\"" + documentIDArr[doccount - 1] + "\",\"" + DocumentUrlArr[doccount - 1] + "\");'></b>";
            else
                documentName += "<b class='width90 float_left'>" + value + " <select id=ddlorder" + doccount + " class='f_inpt width5 DocOrder' onclick='ClickedDocOrder(this)' onchange='SelectedDocOrder(this)'>" + vOptions + " </select><img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDocOrder(this,\"" + documentIDArr[doccount - 1] + "\",\"" + DocumentUrlArr[doccount - 1] + "\");'></b>";
            doccount++;
        });
    }
    else {
        $.each(documentNameArr, function (index, value) {
            if (documentName == '')
                documentName = "<b class='width90 float_left'>" + value + " <img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDoc(this,\"" + documentIDArr[index] + "\",\"" + DocumentUrlArr[index] + "\");'></b>";
            else
                documentName += "<b class='width90 float_left'>" + value + " <img src='/Content/Images/icon/delete.png' onclick='javascript:liRemoveSignDoc(this,\"" + documentIDArr[index] + "\",\"" + DocumentUrlArr[index] + "\");'></b>";
        });
    }

    var documentID = multipleChecksDocumentID;
    var DocumentUrl = multipleChecksDocumentURL;
    var PrimaryDocumentCheck = multipleChecksDocumentIsPrimaryDoc;

    $("#hdIsPrimaryDoc").val(PrimaryDocumentCheck);
    if (PrimaryDocumentCheck.indexOf('Yes') > -1)
        $("#lblAutoUpdateStatusSignDoc").html("Auto update Document & Contract Record status based on this Workflow.");
    else
        $("#lblAutoUpdateStatusSignDoc").html("Auto update Document status based on this Workflow.");
    if (Stage == 'pipeline') {
        var vMetadatavaluetofinalize;
        var metadataFields = [];
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/IContractDetails?contractid=' + getParameterByName("ContractID"),
            type: 'GET',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            async: false,
            success: function (mainmetadataFields) {
                vMetadatavaluetofinalize = $(mainmetadataFields).find('Metadata');
            },
        });
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/contracttypes/metadatas?contracttypename=' + strSelectedContractType.trim(),
            type: 'GET',
            dataType: 'json',
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            async: false,
            success: function (metadataFieldsvalue) {
                if (getParameterByName("Stage") == "pipeline") {
                    metadataFields = $.grep(metadataFieldsvalue, function (n, i) {
                        return (n.Finalizingfrom == "Required");
                    });
                }
            },
        });

        $(metadataFields).each(function (i, item) {
            if ($(vMetadatavaluetofinalize).find(item.FieldName).text() == null || $(vMetadatavaluetofinalize).find(item.FieldName).text() == "") {
                requiredavalible = true;
            }
        });
        if (!requiredavalible) {
            ClearSignatureForm();
            DisableCCUsers();
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                success: function (settings) {
                    $("#txtExpIn").val(settings.TaskDuration);
                    $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(),"days").format('MM/DD/YYYY'));
                    $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration,"days").format('MM/DD/YYYY'));
                },
                error: function () {

                }
            });

            $("#hdMarkAsFinal").val("Y");
            $("#hdDocumentID").val(documentID);
            $("#hdDocumentURL").val(DocumentUrl);
            $("#tdDocument").html(documentName);

            for (i = 1; i <= documentNameArr.length; i++) {
                $('#ddlorder' + i).val(i);
            }

            getNameAndEmailSignDocument();
            $("#sendForSignature").dialog("open");
        } else {
            swal({
                title: '',
                text: "Some fields required for Contract Record finalization are not filled. Do you want to edit now?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No',
                html: true
            },
            function (confirmed) {
                if (confirmed) {
                    if (Stage == 'pipeline') {
                        location = "/Contracts/EditContract?ContractID=" + getParameterByName("ContractID") + "&ContractType=" + encodeURIComponent($("#lblContractType").text()) + "&Stage=" + Stage + "&Finalize=true";
                    }
                } else {
                    $("#loadingPage").fadeOut();
                }
            });
        }

    } else {
        ClearSignatureForm();
        DisableCCUsers();
        $.ajax({
            url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Workflow/settings',
            type: 'GET',
            dataType: 'json',
            "Content-Type": "application/json",
            headers: { 'eContracts-ApiKey': localStorage.APIKey },
            cache: false,
            success: function (settings) {
                $("#txtExpIn").val(settings.TaskDuration);
                $("#lblExpDateddl").html(moment(new Date()).add($("#ddltxtExpIn").val(),"days").format('MM/DD/YYYY'));
                $("#lblExpDatetxt").html(moment(new Date()).add(settings.TaskDuration,"days").format('MM/DD/YYYY'));
            },
            error: function () {

            }
        });

        $("#hdMarkAsFinal").val("Y");
        $("#hdDocumentID").val(documentID);
        $("#hdDocumentURL").val(DocumentUrl);
        $("#tdDocument").html(documentName);
        for (i = 1; i <= documentNameArr.length; i++) {
            $('#ddlorder' + i).val(i);
        }
        getNameAndEmailSignDocument();
        $("#sendForSignature").dialog("open");
    }
}

function liRemoveSignDoc(obj, docid, docurl) {
    var documentIDArr = $("#hdDocumentID").val().split(';');
    documentIDArr = documentIDArr.filter(function (elem) {
        return elem != docid;
    });
    $("#hdDocumentID").val(documentIDArr.join(';'));
    var DocumentUrlArr = $("#hdDocumentURL").val().split('|');
    DocumentUrlArr = DocumentUrlArr.filter(function (elem) {
        return elem != docurl;
    });
    $("#hdDocumentURL").val(DocumentUrlArr.join('|'));
    var child = obj.parentNode;
    child.parentNode.removeChild(child);
}

function liRemoveSignDocOrder(obj, docid, docurl) {
    var documentIDArr = $("#hdDocumentID").val().split(';');
    documentIDArr = documentIDArr.filter(function (elem) {
        return elem != docid;
    });
    $("#hdDocumentID").val(documentIDArr.join(';'));
    var DocumentUrlArr = $("#hdDocumentURL").val().split('|');
    DocumentUrlArr = DocumentUrlArr.filter(function (elem) {
        return elem != docurl;
    });
    $("#hdDocumentURL").val(DocumentUrlArr.join('|'));

    //var child = obj.parentNode;
    //child.parentNode.removeChild(child);


    var vv = $(obj.parentNode).find('select');

    var curVal = 0;
    if (typeof vv != 'undefined') {
        curVal = parseInt(vv.val());
    }
    obj.parentNode.parentNode.removeChild(obj.parentNode);



    $(".DocOrder").each(function (index, data) {
        var removeindex = $("#" + data.id + " > option").length;//data.childelementcount;

        var curVal2 = parseInt($(data).val());
        if (curVal2 > curVal) {
            $(data).val(curVal2 - 1);
        }
        $("#" + data.id + " option[value='" + removeindex + "']").remove();
        //  $("#ddlorder1 option[value='" + removeindex + "']").remove();

    });


}

//Sridhar
function DisableCCUsers() {
    var globalConOwners = getGlobalContractOwners();
    var contractPeople = (contractItem.ContractManagers + ";" + contractItem.Approvers + ";" + contractItem.Reviewers + ";" + contractItem.Signees
                    + ";" + contractItem.ContractAreaAdministrators + ";" + contractItem.BusinessAreaOwners + ";" + contractItem.ReadOnlyPermissions
                    + ";" + contractItem.ReadWritePermissions + ";" + contractItem.FullControlPermissions + ";" + contractItem.ProjectManager + ";" + globalConOwners).split(';');
    contractPeople = $.map(contractPeople, $.trim);
    contractPeople = contractPeople.filter(function (people) { return people.trim() != ''; });
    var myArray = $("#ddlCC>option").map(function () { return $(this).val(); }).get();
    if (myArray == null)
        myArray = [];
    $.each(myArray, function (i, item) {
        if (contractPeople.indexOf(item) < 0)
            $("#ddlCC option[value='" + item + "']").attr('disabled', 'disabled');
        else
            $("#ddlCC option[value='" + item + "']").removeAttr('disabled');
    });
    $("#ddlCC").trigger('chosen:updated');
}

function BindRelatedContractsFilters() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/getcontracttypesforrelatedcontracts',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: $("#lblBusinessAreaPath").text(), UserID: localStorage.UserID },
        cache: false,
        success: function (ContractTypes) {
            $("#ddlRelConFilterContractType").empty();
            var control = "";
            var datalenght = ContractTypes.length;
            for (var i = 0; i < datalenght; i++) {
                var item = ContractTypes[i];
                control += "<option value=" + encodeURI(item.ContractType) + ">" + item.ContractType + "</option>";
            }

            $("#ddlRelConFilterContractType").append(control);
            $("#ddlRelConFilterContractType").chosen().trigger("chosen:updated");
        },
        error: function (ContractTypes) {

        }
    });
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/settings',
        type: 'GET',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (Settings) {
            var IsSystem = false;
            if (Settings.CounterpartyRelationshipScope.trim() == "System Level") {
                IsSystem = true;
            }
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                success: function (Counterparties) {
                    $("#ddlRelConFilterCounterparty").empty();
                    var control = "";
                    var datalenght = Counterparties.length;
                    for (var i = 0; i < datalenght; i++) {
                        var item = Counterparties[i];
                        if (item.Status == "Active") {
                            if (IsSystem) {
                                control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                            }
                            else {
                                if (typeof item.BusinessAreasPath != 'undefined' && item.BusinessAreasPath != null && item.BusinessAreasPath != "") {
                                    if (item.IsGlobal == "No") {
                                        if (businessAreaPath != "") {
                                            var isRelCounterpartyFilterAdd = false;
                                            $.each(item.BusinessAreasPath.split(";"), function () {
                                                if (businessAreaPath == $.trim(this)) {
                                                    isRelCounterpartyFilterAdd = true;
                                                }
                                            });
                                            if (isRelCounterpartyFilterAdd) {
                                                control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                                            }
                                        }
                                    }
                                    else {
                                        control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                                    }
                                }
                                else {
                                    control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                                }

                            }
                        }
                    }

                    $("#ddlRelConFilterCounterparty").append(control);
                    $("#ddlRelConFilterCounterparty").chosen().trigger("chosen:updated");
                },
                error: function (Counterparties) {

                }
            });


        },
        error: function (Settings) {
            var IsSystem = true;
            $.ajax({
                url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty',
                type: 'GET',
                dataType: 'json',
                "Content-Type": "application/json",
                headers: { 'eContracts-ApiKey': localStorage.APIKey },
                cache: false,
                success: function (Counterparties) {
                    $("#ddlRelConFilterCounterparty").empty();
                    var control = "";
                    var datalenght = Counterparties.length;
                    for (var i = 0; i < datalenght; i++) {
                        var item = Counterparties[i];
                        if (item.Status == "Active") {
                            if (IsSystem) {
                                control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                            }
                            else {
                                if (typeof item.BusinessAreasPath != 'undefined' && item.BusinessAreasPath != null && item.BusinessAreasPath != "") {
                                    if (item.IsGlobal == "No") {
                                        if (businessAreaPath != "") {
                                            var isRelCounterpartyFilterAdd = false;
                                            $.each(item.BusinessAreasPath.split(";"), function () {
                                                if (businessAreaPath == $.trim(this)) {
                                                    isRelCounterpartyFilterAdd = true;
                                                }
                                            });
                                            if (isRelCounterpartyFilterAdd) {
                                                control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                                            }
                                        }
                                    }
                                    else {
                                        control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                                    }
                                }
                                else {
                                    control += "<option value=" + encodeURI(item.CounterpartyName) + ">" + item.CounterpartyName + "</option>";
                                }

                            }
                        }
                    }

                    $("#ddlRelConFilterCounterparty").append(control);
                    $("#ddlRelConFilterCounterparty").chosen().trigger("chosen:updated");
                },
                error: function (Counterparties) {

                }
            });

        }
    });
}


function clearRelConSelection() {
    $("#ddlRelConFilterContractType option:selected").prop('selected', false).trigger('chosen:updated');
    $("#ddlRelConFilterCounterparty option:selected").prop('selected', false).trigger('chosen:updated');
    ViewContracts();
}

function getGlobalContractOwners() {
    var gloablconowners = "";
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/usersbyusertype?usertype=Global Contract Owner',
        type: 'GET',
        dataType: 'json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (userdetails) {
            $(userdetails).each(function (i, item) {
                if (gloablconowners == "")
                    gloablconowners = item.UserName;
                else
                    gloablconowners += ";" + item.UserName;
            });
        },
        error:
            function (userdetails) {
            }
    });
    return gloablconowners;
}

function ViewLegalEntity() {
    LegalEntityFunc();
    $('#loadCP').html('<img src="../Content/Images/icon/loading.gif"> Working on it...');
}

function LegalEntityFunc() {
    $("#loadingPage").fadeIn();
    $("#liSelectedLegalEntity").empty();
    $('#loadGenLegalEntity').html('')
    var SelectedLEList = [];
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/legalentities',
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        cache: false,
        success: function (data) {
            LeagalEntity = data;
            //   CounterPartyArrayprev = [];
            $.each($('#CompanyProfile').val().replace("; ", ";").split(";"), function () {
                if (SelectedLEList.indexOf($.trim(this)) == -1)
                    SelectedLEList.push($.trim(this));
            });

            var myLEArrayList = [];
            var obj1 = {};

            $(data).each(function (idata, itemdata) {
                myLEArrayList.push(itemdata);
            });
            //manoj

            var article = '<thead><tr><th style="height:24px"><input id="selectallLE" onclick="funselectallLE(this);" type="checkbox"/> Legal Entity</th><th style="height:24px">Default Currency</th><th>Authorized Signatory(ies)</th></tr></thead><tbody>';
            //manoj 
            var countryvalue = ''
            $(myLEArrayList).each(function (iArray, itemArray) {
                article += '<tr><td>';
                if (SelectedLEList.length > 0) {
                    if (SelectedLEList.indexOf(itemArray.LegalEntityName.trim()) > -1) {
                        article += '<input id="' + itemArray.RowKey + '" type="checkbox" name="CompanyProfile" onclick="checkMultipleDocumentsLE(this);" checked class="css1-checkbox" value="' + escape(itemArray.LegalEntityName.trim()) + '" />';
                    }
                    else {
                        article += '<input id="' + itemArray.RowKey + '" type="checkbox" name="CompanyProfile" onclick="checkMultipleDocumentsLE(this);"  class="css1-checkbox" value="' + escape(itemArray.LegalEntityName.trim()) + '" />';
                    }
                }
                else {
                    article += '<input id="' + itemArray.RowKey + '" type="checkbox" name="CompanyProfile" onclick="checkMultipleDocumentsLE(this);"  class="css1-checkbox" value="' + escape(itemArray.LegalEntityName.trim()) + '" />';
                }
                article += '<label for="CP' + itemArray.RowKey + '" class="css1-label" title="' + escape(itemArray.LegalEntityName.trim()) + '"  onmouseover="UnescapeNameMouseOver(this)" style="display: inline;">' + itemArray.LegalEntityName.trim() + '</label></td>';
                article += '<td>' + itemArray.DefaultCurrency + '</td>';
                AuthorizedSignatory = itemArray.AuthorizedSignatory != "" ? itemArray.AuthorizedSignatory : "-"
                article += '<td>' + AuthorizedSignatory + '</td>';
                article += '</tr>';
            });
            //manoj
            $("#listLEWrapper").html('<table id="tblLE" class="f_list"></table>');
            $("#tblLE").html(article);

            _alphabetSearch = '';
            $("#tblLE").DataTable({
                "columnDefs": [
                    { "orderable": false, 'targets': "_all" }
                ],
                "fnDrawCallback": function () { eventFired('CompanyProfile', 'selectallLE', 'tblLE'); },
                "iDisplayLength": 20,
                "searchHighlight": true,
                "pagingType": "full_numbers",
                //"scrollY": "420px",
                //"scrollCollapse": true,
            });
            alphabeticselection('tblLE');
            article = '';
            //manoj
            if ($('input:checkbox[name="CompanyProfile"]:checked').length == $('input:checkbox[name="CompanyProfile"]').length && $('input:checkbox[name="CompanyProfile"]:checked').length != 0) {
                $("#selectallLE").attr('checked', true);
            } else {
                $("#selectallLE").attr('checked', false);
            }
            $.each(SelectedLEList, function () {
                if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null && $.trim(this) != "") {
                    $('#liSelectedLegalEntity').append('<span style="font-size:13px;">' + $.trim(this) + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedLE(this);" style="float:right" /></span>');
                }
            });
            // Find and remove item from an array
            $("#browseLegalEntity").dialog("option", "title", "Legal Entity Picker");
            $("#browseLegalEntity").dialog("open");
            $("#loadingPage").fadeOut();
        },
        error: function () {
            $("#listLEWrapper").html('<p style="color: red; margin-top: 50px; margin-bottom: 10px; margin-left: 10px;">No items found.</p>');
            $("#browseLegalEntity").dialog("option", "title", "Legal Entity Picker");
            $("#browseLegalEntity").dialog("open");
            $("#loadingPage").fadeOut();
        }
    });
}

function funselectallLE(obj) {
    if (obj.checked) { // check select status  
        $('input:checkbox[name=CompanyProfile]').attr('checked', true);
    } else {
        $('input:checkbox[name=CompanyProfile]').attr('checked', false);
    }
    checkMultipleDocumentsLE("");
}

function checkMultipleDocumentsLE(object) {
    //manoj
    var arrselectedLE = [];
    $.each($('#liSelectedLegalEntity').children(), function () {
        if (arrselectedLE.indexOf($.trim(this.textContent)) == -1)
            arrselectedLE.push($.trim(this.textContent));
    });
    $('#liSelectedLegalEntity').empty();

    var tablebind = $('#tblLE').DataTable();
    $.each($('input:checkbox[name="CompanyProfile"]', tablebind.rows().nodes()), function () {
        if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null) {
            if ($.trim(this.value) != "") {
                if (this.checked) {
                    if (arrselectedLE.indexOf(unescape($.trim(this.value))) == -1) {
                        arrselectedLE.push(unescape($.trim(this.value)))
                    }
                } else if (arrselectedLE.indexOf(unescape($.trim(this.value))) > -1) {
                    arrselectedLE.splice(arrselectedLE.indexOf(unescape($.trim(this.value))), 1);
                }
            }
        }
    });
    arrselectedLE.sort();
    $.each(arrselectedLE, function () {
        $('#liSelectedLegalEntity').append('<span style="font-size:13px;">' + $.trim(this) + '<img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveSelectedLE(this);" style="float:right" /></span>');
    });
    arrselectedLE = [];

    //manoj
    if ($('input:checkbox[name="CompanyProfile"]:checked').length == $('input:checkbox[name="CompanyProfile"]').length && $('input:checkbox[name="CompanyProfile"]:checked').length != 0) {
        $("#selectallLE").attr('checked', true);
    } else {
        $("#selectallLE").attr('checked', false);
    }

    try {
        hideAllMenuAndStopPro(event);
    }
    catch (ex) {

    }
}

function liRemoveSelectedLE(obj) {
    var child = obj.parentNode;
    var tablebind = $('#tblLE').DataTable();
    $.each($('input:checkbox[name="CompanyProfile"]:checked', tablebind.rows().nodes()), function () {
        if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null) {
            if (unescape($.trim(this.value)) == child.textContent) {
                this.checked = false;
            }
        }
    });
    child.parentNode.removeChild(child);

    if ($('input:checkbox[name="CompanyProfile"]:checked').length == $('input:checkbox[name="CompanyProfile"]').length && $('input:checkbox[name="CompanyProfile"]:checked').length != 0) {
        $("#selectallLE").attr('checked', true);
    } else {
        $("#selectallLE").attr('checked', false);
    }

}

function AddLE() {
    var arrselectedLE = [];
    $.each($('#liSelectedLegalEntity').children(), function () {
        if (typeof ($.trim(this)) != 'undefined' && $.trim(this) != null && $.trim(this.textContent) != "") {
            if (arrselectedLE.indexOf($.trim(this.textContent)) == -1)
                arrselectedLE.push($.trim(this.textContent));
        }
    });
    if (arrselectedLE.length > 0) {
        $("#CompanyProfile").val(arrselectedLE.join("; "));
        // Removetextvalues();

    } else {
        $("#CompanyProfile").val('');
        // Removetextvalues();

    }
    arrselectedLE = [];
    $("#browseLegalEntity").dialog("close");
    // ClearAddCounterparty();
    //  $('#chkCounterpartyNotInList').prop('checked', false);

    $('#dvCPExistingLegalEntity').css("display", "");
}

function GetFeaturesInDetailPage() {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/feature',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        async: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            localStorage.setItem("eContractFeatures", JSON.stringify(data));
            var vAccFeat = $.grep(data, function (n, i) {
                return (n.RowKey == "29" && n.Status == "ON");
            });
            if (vAccFeat.length > 0) {
                if (typeof localStorage.CompanyBrandingLogo === "undefined") {
                    $.ajax({
                        url: '/Accounts/GetAccountSetting?accountid=' + localStorage.AccountID,
                        type: 'GET',
                        dataType: 'json',
                        cache: false,
                        success: function (AccountSetting) {
                            if (AccountSetting.CompanyLogo != "") {
                                localStorage.setItem("CompanyBrandingLogo", AccountSetting.CompanyLogo);
                                $(".FL_CompanyBrandingLogo").attr("src", AccountSetting.CompanyLogo);
                                $(".FL_CompanyBrandingLogo").css('display', '');
                            }
                            else {
                                $(".FL_CompanyBrandingLogo").css('display', '');
                                localStorage.setItem("CompanyBrandingLogo", '/Content/Images/logo.png');
                            }
                        }
                    });
                }
                else {
                    if (localStorage.CompanyBrandingLogo != "/Content/Images/logo.png") {
                        $(".FL_CompanyBrandingLogo").attr("src", localStorage.CompanyBrandingLogo);
                        $(".FL_CompanyBrandingLogo").css('display', '');
                    }
                    else {
                        $(".FL_CompanyBrandingLogo").css('display', '');
                    }

                }
            }
            else {
                $(".FL_CompanyBrandingLogo").css('display', '');
            }

        },
        error: function (data) {

        }
    });
}

//manoj
function CheckFolderExist(DocumentID) {
    if ($("#txtNewFolderName").val() != "") {
        if ($("#txtNewFolderName").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "new folder" && $("#txtNewFolderName").val().replace(/\s\s+/g, " ").toLowerCase().trim() != "amendments") {
            if (($('#lblFolderUrl').text().match(/\//g) || []).length > 2) {
                $.ajax({
                    url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/documents/childdocuments?contractid=' + vContractID + '&folderurl=' + $('#lblFolderUrl').text(),
                    type: 'GET',
                    cache: false,
                    contentType: false,
                    headers: { 'eContracts-ApiKey': localStorage.APIKey },
                    success: function (childdocument) {
                        var documentresult = $.grep(childdocument, function (n, i) {
                            return (n.DocumentName.toLowerCase() == $("#txtNewFolderName").val().replace(/\s\s+/g, " ").toLowerCase().trim());
                        });
                        if (documentresult.length > 0) {
                            $("#uploaddocumentprocess").css('display', 'none');
                            swal("", "Folder name <span style='font-weight:700'>" + $("#txtNewFolderName").val().replace(/\s\s+/g, " ").trim() + "</span> already exists (or) Reserved.");
                        } else {
                            allowuploadDocument(DocumentID);
                        }
                    },
                    error: function (childdocument) {
                        allowuploadDocument(DocumentID);
                    }
                });
            } else {
                allowuploadDocument(DocumentID);
            }
        } else {
            $("#uploaddocumentprocess").css('display', 'none');
            swal("", "Folder name <span style='font-weight:700'>" + $("#txtNewFolderName").val().replace(/\s\s+/g, " ").trim() + "</span> already exists (or) Reserved.");
        }
    } else {
        allowuploadDocument(DocumentID);
    }
}

function allowuploadDocument(DocumentID) {
    if (CheckDocumentExistwithoutparameter()) {
        swal({
            title: '',
            text: "Document already exists, do you want to <span style='font-weight:700'>overwrite</span> the existing document?",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No',
            html: true,
            closeOnConfirm: true
        },
         function (confirmed) {
             if (confirmed) {

                 overwritedocument = true;
                 if ($("#dtValidFrom").val() != '' && $("#dtValidTill").val() != '') {
                     if (comparedates("dtValidFrom", "dtValidTill")) {
                         $("#addEditDocument").dialog("close");
                         newDocument(DocumentID);
                     } else {
                         $("#uploaddocumentprocess").css('display', 'none');
                         swal("", "Valid Till date should be greater than Valid From date.");
                     }
                 } else {
                     $("#addEditDocument").dialog("close");
                     newDocument(DocumentID);
                 }
             }
             else {
                 $('.ui-button-green-text').parent().removeAttr('disabled');
                 $("#uploaddocumentprocess").css('display', 'none');
             }
             return;
         });

    }
    else {
        if ($("#dtValidFrom").val() != '' && $("#dtValidTill").val() != '') {
            if (comparedates("dtValidFrom", "dtValidTill")) {
                $("#addEditDocument").dialog("close");
                newDocument(DocumentID);
            } else {
                $("#uploaddocumentprocess").css('display', 'none');
                swal("", "Valid Till date should be greater than Valid From date.");
            }
        } else {
            $("#addEditDocument").dialog("close");
            newDocument(DocumentID);
        }
    }
}

function ViewCounterparties() {
    var baname = "";

    //if (typeof localStorage.GlobalBusinessAreaLocation != "undefined" && localStorage.GlobalBusinessAreaLocation != "" && localStorage.GlobalBusinessAreaLocation != "All") {
    //    baname = localStorage.GlobalBusinessAreaLocation;
    //}
    $("#tblPopupCounterparties").html('');
    if ($.trim($("#txtSearchBoxCounterparties").val()) != "") {
        $('#loadCounterparties').html('<img src="../Content/Images/icon/loading.gif"> Searching...');
    } else {
        $('#loadCounterparties').html('<img src="../Content/Images/icon/loading.gif">');
    }
    var arrcounterpartyIDarry = [];
    var arrcounterpartyNamearry = [];
    var arrcounterpartyRelationshipTypearr = [];
    var relatedCounterpartiesTag = [];
    //manoj
    var strBusinessAreaOwnerof = "";
    if ($('input[type="radio"][name=IsGlobal]:checked').val() == "No") {
        if ($("#txtOwnerofBusinessArea").val() != "") {
            if ($("#txtOwnerofBusinessArea").val() != "") {
                for (var i = 0; i < selectedBusinessAreaID11.length; i++) {

                    var rowKPath = jQuery.grep(BusinessAreaPathRowKey, function (a) {
                        return a[1] === selectedBusinessAreaID11[i][1];
                    });
                    if (rowKPath != null && typeof (rowKPath) != "undefined" && rowKPath.length != 0)
                        strBusinessAreaOwnerof += rowKPath[0][0] + "; ";
                }

                strBusinessAreaOwnerof = strBusinessAreaOwnerof.slice(0, -1)
            }
        } else {

            strBusinessAreaOwnerof = "";
        }
    }
    else {
        $("#txtOwnerofBusinessArea").val('');
        strBusinessAreaOwnerof = "";
    }
    //manoj

    var vURL = vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/counterparty/relatedcounterpartypicker?searchkeyword=' + encodeURIComponent($("#txtSearchBoxCounterparties").val()) + '&customquery=&sortbyfield=Timestamp&orderby=DESC';
    $.ajax({
        url: vURL,
        type: 'GET',
        dataType: 'json',
        "Content-Type": "application/json",
        headers: { 'eContracts-ApiKey': localStorage.APIKey, BusinessAreaLocation: strBusinessAreaOwnerof },
        cache: false,
        success: function (data) {
            $("#tblPopupCounterparties").html('');
            var datalenght = data.length;
            var counterpartyTags = [];
            //var prevSelected = $("#RelatedCounterparties").val();
            //manoj
            var prevSelected = [];
            $.each(curRelatedCounterparities, function (ipvr, itempvr) {
                prevSelected.push($.trim(itempvr.CounterpartyName));
            });
            var arr = prevSelected;
            //manoj
            //$.each(prevSelected, function () {
            //    arr.push($.trim(this));
            //});
            for (var i = 0; i < datalenght; i++) {
                var item = data[i];
                if ($("#txtCounterpartyID").val().indexOf(item.RowKey) > -1) { }
                else {

                    //if (arr.length > 0) {
                    //    if (arrRelatedCounterparities.length > 0) {
                    //        $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyID.split(";"), function () {
                    //            arrcounterpartyIDarry.push($.trim(this));
                    //        });
                    //        $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedCounterpartyTitle.split(";"), function () {
                    //            arrcounterpartyNamearry.push($.trim(this));
                    //        });
                    //        $.each(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelatedRelationshipType.split(";"), function () {
                    //            arrcounterpartyRelationshipTypearr.push($.trim(this));
                    //        });
                    //        if (arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType != "") {
                    //            $("#ddlRelationshipTypeCounterparties").val(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RootRelationshipType);
                    //        }
                    //        if (arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType != "") {
                    //            $("#ddlRelationshipTypeParentcounterparties").val(arrRelatedCounterparities[arrRelatedCounterparities.length - 1].RelationshipType);
                    //        }
                    //    }
                    //}
                    if (arr.indexOf(item.CounterpartyName.trim()) >= 0) {
                        var article = '<tr><td>';
                        article += '<input id="rel' + item.RowKey + '" type="checkbox" name="RelatedCounterparty" checked class="css1-checkbox" value="' + escape(item.CounterpartyName) + '"  onchange="javascript:currentrelatedcounterparty(this);" />';
                        article += '<label for="' + item.RowKey + '" class="css1-label">' + item.CounterpartyName + '</label>';
                        article += '</td>';
                        article += '<td class="ddl"><select class="f_inpt width90">';
                        var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
                        switch (jsLang) {
                            case 'Parent':
                                article += '<option value="Subsidiary" selected>Subsidiary</option>';
                                break;
                            case 'Subsidiary':
                                article += '<option value="Parent" selected>Parent</option>';
                                break;
                            case 'Supplier':
                                article += '<option value="Customer" selected>Customer</option>';
                                break;
                            case 'Customer':
                                article += '<option value="Supplier" selected>Supplier</option>';
                                break;
                            case 'Prime Contractor':
                                article += '<option value="Sub Contractor" selected>Sub Contractor</option>';
                                break;
                            case 'Sub Contractor':
                                article += '<option value="Prime Contractor" selected>Prime Contractor</option>';
                                break;
                            case 'Dissolved on Merger':
                                article += '<option value="Merged into" selected>Merged into</option>';
                                break;
                            case 'Merged into':
                                article += '<option value="Dissolved on Merger" selected>Dissolved on Merger</option>';
                                break;
                            case 'Other':
                                article += '<option value="Other" selected>Other</option>';
                                break;
                        }
                        article += '</select><td></tr>'
                        $("#tblPopupCounterparties").append(article);
                        relatedCounterpartiesTag.push(item.CounterpartyName);
                    }
                    else {
                        var article = '<tr><td>';
                        article += '<input id="rel' + item.RowKey + '" type="checkbox" name="RelatedCounterparty" class="css1-checkbox" value="' + escape(item.CounterpartyName) + '"  onchange="javascript:currentrelatedcounterparty(this);" />';
                        article += '<label for="' + item.RowKey + '" class="css1-label">' + item.CounterpartyName + '</label>';
                        article += '</td>';
                        article += '<td class="ddl"><td></tr>'
                        $("#tblPopupCounterparties").append(article);
                    }

                    //$("#rel" + item.RowKey).click(function () {
                    $("input[id='rel" + item.RowKey + "'][name='RelatedCounterparty']:checkbox").click(function () {
                        if (this.checked) {
                            var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                            var jsLang = $("#ddlRelationshipTypeParentcounterparties option:selected").val();
                            switch (jsLang) {
                                case 'Parent':
                                    vOptions += '<option value="Subsidiary">Subsidiary</option>';
                                    break;
                                case 'Subsidiary':
                                    vOptions += '<option value="Parent">Parent</option>';
                                    break;
                                case 'Supplier':
                                    vOptions += '<option value="Customer">Customer</option>';
                                    break;
                                case 'Customer':
                                    vOptions += '<option value="Supplier">Supplier</option>';
                                    break;
                                case 'Prime Contractor':
                                    vOptions += '<option value="Sub Contractor">Sub Contractor</option>';
                                    break;
                                case 'Sub Contractor':
                                    vOptions += '<option value="Prime Contractor">Prime Contractor</option>';
                                    break;
                                case 'Dissolved on Merger':
                                    vOptions += '<option value="Merged into">Merged into</option>';
                                    break;
                                case 'Merged into':
                                    vOptions += '<option value="Dissolved on Merger">Dissolved on Merger</option>';
                                    break;
                                case 'Other':
                                    vOptions += '<option value="Other">Other</option>';
                                    break;
                            }

                            vOptions += '</select>';
                            $(this).parent().parent().children(".ddl").append(vOptions);

                        } else {

                            $(this).parent().parent().children(".ddl").empty();
                        }
                        showallspans(this);
                    });
                }
            }
            var vCount = $("#tblPopupCounterparties tr").length;
            if (vCount != 0) {
                $('#loadCounterparties').html('');
                $('#compact-paginationRelatedCounterparties').css('display', '');
                $('#compact-paginationRelatedCounterparties').pagination({
                    items: vCount,
                    itemsOnPage: 10,
                    currentPage: 1,
                    cssStyle: 'compact-theme',
                    type: 'tdbody',
                    row: 'tr',
                    typeID: 'tblPopupCounterparties'
                    //items: vCount,
                    //itemsOnPage: 10,
                    //typeID: 'tblPopupCounterparties',
                    //cssStyle: 'compact-theme'
                });
            } else {
                $('#loadCounterparties').html('<p style="margin-left: 20px;">No items found.</p>');
                $('#compact-paginationRelatedCounterparties').css('display', 'none');
            }
        },
        error: function () {
            $('#compact-paginationRelatedCounterparties').css('display', 'none');
            $('#loadCounterparties').html('<p style="margin-left: 20px;">No items found.</p>');
        }
    });
}

function currentrelatedcounterparty(obj) {
    if (curRelatedCounterparities.length > 0) {
        var curRelCuntprty = $.grep(curRelatedCounterparities, function (ncurRelatedCounterparities, icurRelatedCounterparities) {
            return (ncurRelatedCounterparities.RowKey != obj.id);
        });
        curRelatedCounterparities = curRelCuntprty;
    }
    if (obj != "" && obj.checked == true) {
        curRelatedCounterparities.push(
            {
                RowKey: obj.id,
                CounterpartyName: unescape(obj.value),
                ChildRelationship: $(obj).parent().parent().children(".ddl").find('option:selected').text()
            });
    }
    //Add the List
    addselectedcounterparties();
    //Add the List
    //}
}

function changecounterpartychildrelationship(obj) {
    if (curRelatedCounterparities.length > 0) {
        var curRelCuntprty = $.grep(curRelatedCounterparities, function (ncurRelatedCounterparities, icurRelatedCounterparities) {
            return (ncurRelatedCounterparities.ChildRelationship = obj);
        });
        curRelatedCounterparities = curRelCuntprty;
        //Add the List
        addselectedcounterparties();
        //Add the List
    }
}

function addselectedcounterparties() {
    var SelectedCounterpartiesHTML = "";
    $(curRelatedCounterparities).each(function (i, item) {
        SelectedCounterpartiesHTML += '<span style="font-size:11px;" id=' + item.RowKey + '>' + item.CounterpartyName + ' (' + item.ChildRelationship + ') <img src="/Content/Images/close-quick.png" onclick="javascript:liRemoveCounterPartyRelationshipselected(this);" style="float:right" /></span>'
    });
    $('#liSelectedCounterparties').html(SelectedCounterpartiesHTML);
}

//function liRemoveCounterPartyRelationshipselected(obj) {
//    var child = obj.parentNode;
//    var relatedcounterpartyidtodelete = child.id;
//    $("input[id='" + child.id + "'][name='RelatedCounterparty']:checkbox").prop('checked', false);
//    $("input[id='" + child.id + "'][name='RelatedCounterparty']:checkbox").trigger("onchange");
//}

function liRemoveCounterPartyRelationshipselected(obj) {
    var child = obj.parentNode;
    var relatedcounterpartyidtodelete = child.id;
    var allow = false;
    try {
        if (typeof ($("input[id='" + child.id + "'][name='RelatedCounterparty']:checkbox")) != 'undefined') {
            if ($("input[id='" + child.id + "'][name='RelatedCounterparty']:checkbox").length != 0) {
                $("input[id='" + child.id + "'][name='RelatedCounterparty']:checkbox").prop('checked', false);
                var dsfdsfsd = $("input[id='" + child.id + "'][name='RelatedCounterparty']:checkbox");
                $(dsfdsfsd).parent().parent().children(".ddl").empty();
                $("input[id='" + child.id + "'][name='RelatedCounterparty']:checkbox").trigger("onchange");
            } else {
                allow = true;
            }
        } else {
            allow = true;
        }
    } catch (excp) {
        allow = true;
    }
    if (allow) {
        if (curRelatedCounterparities.length > 0) {
            var curRelCuntprty = $.grep(curRelatedCounterparities, function (ncurRelatedCounterparities, icurRelatedCounterparities) {
                return (ncurRelatedCounterparities.RowKey != child.id);
            });
            curRelatedCounterparities = curRelCuntprty;
        }
        //Add the List
        addselectedcounterparties();
        //Add the List
    }
}
//manoj

function ReplaceDocumentShareNew(collabrationID) {
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Documents/DocumentAcceptedShare?collarabationid=' + collabrationID,
        type: 'PUT',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging },
        success: function (data) {
            if (data != null && data != "" && typeof (data) != "undefined") {
                contractItem.Status = data;
                ContractTopActions();
                BindDocument(vContractID);
            }
            GetContractActivities(vContractID);
            $("#loadingPage").fadeOut();
            swal("", "New Version of the Document has been shared with users.");
        },
        error:
            function (data) {
                $("#loadingPage").fadeOut();
            }
    });

}

function refreshdocuemnt() {
    if (documentview == null || documentview == "" || documentview == 'folder') {
        if ($('#showAll').text() != null && $('#showAll').text() != "" && typeof ($('#showAll').text()) != "undefined") {
            var selectedfoldervalue = $('#showAll').find("a");
            var textvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].textContent;
            var idvalueselected = $(selectedfoldervalue)[$(selectedfoldervalue).length - 1].id;
            var parentdocumentdetails = { id: idvalueselected, text: textvalueselected };
            showfolderdocuments(parentdocumentdetails);
        }
        else {
            BindDocument(vContractID);
        }
    } else {
        DisplayDocument(documentview);
    }
}

function sortArrOfObjectsByParam(arrToSort) {
    arrToSort.sort(function (a, b) {
        var A = a.toUpperCase();
        var B = b.toUpperCase();
        return ((A < B) ? -1 : ((A > B) ? 1 : 0));
    });
    return arrToSort;
}

function ViewDocument(docurl) {
    if (docurl != '') {
        var srcurl = docurl;
        if (docurl.indexOf(".doc") >= 0 || docurl.indexOf(".ppt") >= 0 || docurl.indexOf(".xls") >= 0 || docurl.indexOf(".dotx") >= 0) {
            srcurl = "https://view.officeapps.live.com/op/embed.aspx?src=" + docurl + "&wdStartOn=1";
        }
        window.open(srcurl);
    }
}


function CreateRelatedContractsList(page) {
    $("#tblPopupContracts").empty();
    var startIndex = page * 10;
    var endIndex = startIndex + 10;
    if (endIndex > listRelatedContracts.length) endIndex = listRelatedContracts.length;
    //$("#spResult").html((startIndex + 1) + '&nbsp;to&nbsp;' + endIndex + '&nbsp;of&nbsp;' + listRelatedContracts.length);
    for (var i = startIndex; i < endIndex; i++) {
        var item = listRelatedContracts[i];
        if ($("#hdnRelatedContracts").text().indexOf(item.RowKey) > -1) { }
        else {
            if (item.RowKey != getParameterByName("ContractID")) {
                var article = '<tr><td class="width65">';
                article += '<input id="' + item.RowKey + '" type="checkbox" style="margin-left: 40px;" name="RelatedContract" onchange="javascript:collectrelatedcontractrowkey(this);" class="css1-checkbox" value="' + item.ContractTitle + '" />';
                article += '<label for="' + item.RowKey + '" class="css1-label">' + item.ContractTitle + '</label>';
                article += '</td>';
                article += '<td ><label class="">' + item.ContractType + '</label></td>'
                article += '<td ><label class="">'
                if (item.Counterparty != null && item.Counterparty != "") {
                    article += item.Counterparty
                } else {
                    article += "-"
                }
                article += '</label></td><td ><label class="" style="word-break: break-all;">'
                if (item.ContractNumber != null && item.ContractNumber != "") {
                    article += item.ContractNumber
                } else {
                    article += "-"
                }
                article += '</label></td><td <label class="">' + item.Status + '</label></td>'
                article += '<td class="ddl"></td>'
                article += '  </tr>'
                $("#tblPopupContracts").append(article);
                relatedContractsTag.push(item.ContractTitle.trim());
            }
        }
        $("#" + item.RowKey).click(function () {
            if (this.checked) {
                if ($(this).parent().parent().children(".ddl").find('option').length == 0) {
                    var vOptions = "<select class='f_inpt width90' onchange='showallspans(this)'>";
                    var jsLang = $("#ddlRelationshipTypeParent option:selected").val();
                    var jsLangType = $("#ddlRelationshipType option:selected").val();
                    $("#relatedrole").html("Relationship");
                    var rela1 = jQuery.grep(RelationshipTypes, function (a) {
                        return (a[1] === jsLang && a[0] === jsLangType);
                    });
                    var rela2 = jQuery.grep(RelationshipTypes, function (a) {
                        return (a[2].indexOf(jsLang) > -1 && a[0] === jsLangType);
                    });
                    if (rela1 != null && typeof (rela1) != "undefined" && rela1.length != 0) {
                        var Relationship = rela1[0];
                        $.each(Relationship[2], function (index, value) {
                            var optRel2 = value.toString();
                            vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                        })

                        if ($(Relationship[2]).length == 0) {
                            var optRel2 = Relationship[1].toString();

                            vOptions += "<option value='" + optRel2 + "'>" + optRel2 + "</option>";
                        }
                    }
                    else if (rela2 != null && typeof (rela2) != "undefined" && rela2.length != 0) {
                        var Relationship = rela2[0];
                        vOptions += "<option value='" + Relationship[1] + "'>" + Relationship[1] + "</option>";
                    }
                    else {
                        switch (jsLang) {
                            case 'Master Agreement':
                                vOptions += '<option value="Sub-Agreement">Sub-Agreement</option>';
                                vOptions += '<option value="SOW">SOW</option>';
                                break;
                            case 'Sub-Agreement':
                            case 'SOW':
                                vOptions += '<option value="Master Agreement">Master Agreement</option>';
                                break;
                            case 'Prime Contractor Agreement':
                                vOptions += '<option value="Sub Contractor Agreement">Sub Contractor Agreement</option>';
                                break;
                            case 'Sub Contractor Agreement':
                                vOptions += '<option value="Prime Contractor Agreement">Prime Contractor Agreement</option>';
                                break;
                            case 'Blanket Agreement':
                                vOptions += '<option value="Order">Order</option>';
                                vOptions += '<option value="Invoice">Invoice</option>';
                                break;
                            case 'Order':
                            case 'Invoice':
                                vOptions += '<option value="Blanket Agreement">Blanket Agreement</option>';
                                break;
                            case 'Original':
                                vOptions += '<option value="Duplicate">Duplicate</option>';
                                vOptions += '<option value="Copy">Copy</option>';
                                break;
                            case 'Duplicate':
                            case 'Copy':
                                vOptions += '<option value="Original">Original</option>';
                                break;
                            case 'Past Contract':
                                vOptions += '<option value="Renegotiated Contract">Renegotiated Contract</option>';
                                break;
                            case 'Renegotiated Contract':
                                vOptions += '<option value="Past Contract">Past Contract</option>';
                                break;
                            case 'Primary Contract':
                                vOptions += '<option value="Amendment">Amendment</option>';
                                vOptions += '<option value="Modification">Modification</option>';
                                break;
                            case 'Amendment':
                            case 'Modification':
                                vOptions += '<option value="Primary Contract">Primary Contract</option>';
                                break;
                            case 'Other':
                                vOptions += '<option value="Other">Other</option>';
                                break;
                        }
                    }
                    vOptions += '</select>';
                    $(this).parent().parent().children(".ddl").append(vOptions);
                }
            } else {

                $(this).parent().parent().children(".ddl").empty();
            }
            showallspans(this);

        });
    }
}

function sortArrOfObjectsByParam(arrToSort) {
    arrToSort.sort(function (a, b) {
        var A = a.toUpperCase();
        var B = b.toUpperCase();
        return ((A < B) ? -1 : ((A > B) ? 1 : 0));
    });
    return arrToSort;
}
//Added 2.4final to 2.4
function GetRenewalChecklistAndNotes(contractid) {
    if (contractid == null || contractid == "") { contractid = vContractID; }
    
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + contractid + '/contractrenewalhistory',
        type: 'GET',
        dataType: 'json',
        'Content-Type': 'application/json',
        cache: false,
        headers: { 'eContracts-ApiKey': localStorage.APIKey },
        success: function (data) {
            $(data).each(function (i, item) {
              if(item.RenewedDate == contractItem.NextTermStartDate && item.TermEndDate == contractItem.NextTermEndDate)
                {
                    UpComingNotes = item.RenewalNotes;
                    UpcomingChecklist = item.RenewalChecklist;
                    TermName = item.RenewalbeTermName;
                }

            });

            
        },
        error:
            function (data) {
                
            }
    });
}

function checkUpcoming(contractItem)
{
    if (contractItem.ContractTermType == "Renewable") {
        var vMetadata = "";
        if (contractItem.NextTermStartDate != null && contractItem.NextTermStartDate != null) {
            $('#Renew').css("display", "");

            vMetadata += '<small>';
            if (contractItem.NextTermStartDate != null)
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermStartDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
            vMetadata += '</small>';
            vMetadata += '<small>-</small>';
            vMetadata += '<small>';
            if (contractItem.NextTermEndDate != null)
                if (localStorage.AppDateFormat == "undefined" || localStorage.AppDateFormat == null || localStorage.AppDateFormat == "")
                { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                else {
                    if (localStorage.AppDateFormat == 'DD/MM/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$3/$2/$1'); }
                    else if (localStorage.AppDateFormat == 'MM/DD/YYYY') { vMetadata += contractItem.NextTermEndDate.replace(/^(\d{4})\-(\d{2})\-(\d{2}).*$/, '$2/$3/$1'); }
                }
            vMetadata += '</small>';

            var vDiff = DiffBetDate(contractItem.NextTermStartDate, contractItem.NextTermEndDate);
            vMetadata = vMetadata + "(" + vDiff + ")";

        }

        if (contractItem.RenewalAuth !== "No") {
            $('#Renew').css("display", "");
            $('#UpcomingText').html(vMetadata);
            $('#Authorize').css("display", "None");
        }
        else {
            $('#Renew').css("display", "None");
            $('#Authorize').css("display", "");
            $('#AuthorizeTermText').html(vMetadata);
        }
    }
}

$('#btnManage').click(function ()
{
    OpenManageContractTerm(contractItem);
});
$('#btnAuthorize').click(function () {

    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/contractrenewalhistoryupdate?TermName=' + TermName + '&Status=Renewed&User=' + localStorage.UserName,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        cache: false,
        success: function (Conrec) {
            $("#loadingPage").fadeOut();
            swal("", "Authorize Completed");
            
        },
        error: function (status) {

            $("#loadingPage").fadeOut();
            
        }
    });
});
$('#btnStopRene').click(function () {

    $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/contractrenewalhistoryupdate?TermName=' + vTermName + '&Status=Reject&User=' + localStorage.UserName,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        cache: false,
        success: function (Conrec) {
            $("#loadingPage").fadeOut();
            //swal("", " ");
            
        },
        error: function (status) {

            $("#loadingPage").fadeOut();
            
        }
    });
});
$('#btnRenewNow').click(function () {

     $("#loadingPage").fadeIn();
    $.ajax({
        url: vApiBaseSiteUrl +'/api/accounts/' + localStorage.AccountID + '/Contracts/' + vContractID + '/contractrenewalhistoryupdate?TermName=' + TermName + '&Status=Renewed&User=' + localStorage.UserName,
        type: 'POST',
        dataType: 'json',
        headers: { 'eContracts-ApiKey': localStorage.APIKey, 'eContracts-RestrictionHeader': localStorage.RestrictHighSecurityTagging, username: localStorage.UserName },
        cache: false,
        success: function (Conrec) {
            $("#loadingPage").fadeOut();
            swal("", "Renew Completed");
            $("#viewMetadataUpForRenewal").dialog("Close");
        },
        error: function (status) {

            $("#loadingPage").fadeOut();
            $("#viewMetadataUpForRenewal").dialog("Close");
        }
    });
});
//Added from 2.4 final to 2.4